{"version":3,"mappings":"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","names":["defaultGridOptions","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","valueCache","defaultColDef","filterParams","newRowsAction","tooltipShowDelay","suppressMovableColumns","extendStatics","__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","ClientSideNodeManager","rootNode","gridOptionsWrapper","context","eventService","columnController","gridApi","columnApi","selectionController","this","nextId","allNodesMap","group","level","id","ROOT_NODE_ID","allLeafChildren","childrenAfterGroup","childrenAfterSort","childrenAfterFilter","postConstruct","prototype","suppressParentsInRowNodes","isSuppressParentsInRowNodes","isRowMasterFunc","getIsRowMasterFunc","doingTreeData","isTreeData","doingMasterDetail","isMasterDetail","getCopyOfNodesMap","_","getRowNode","setRowData","rowData","childrenMapped","updateHasChildren","recursiveFunction","TOP_LEVEL","updateRowData","rowDataTran","rowNodeOrder","rowNodeTransaction","remove","update","add","nodesToUnselect","executeRemove","executeUpdate","executeAdd","updateSelection","selectionChanged","forEach","rowNode","setSelected","updateGroupsFromChildrenSelections","dispatchEvent","type","Events","api","_this","addIndex","newNodes","map","item","createNode","existingLeafChildren","nodesBeforeIndex","slice","nodesAfterIndex","rowIdsRemoved","lookupRowNode","isSelected","push","clearRowTopAndRowIndex","filter","updateData","selectable","setMasterForRow","data","rowNodeIdFunc","getRowNodeIdFunc","console","error","node","parent","rowNodes","dataItem","warn","RowNode","createBean","setDataAndId","toString","setExpanded","setMaster","expanded","rowGroupColumns","getRowGroupColumns","master","isExpanded","expandByDefault","getGroupDefaultExpanded","__extends","d","b","Object","setPrototypeOf","__proto__","p","hasOwnProperty","constructor","create","__","__decorate","decorators","target","key","desc","c","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","RecursionType","Normal","AfterFilter","AfterFilterAndSort","PivotNodes","ClientSideRowModel","_super","apply","onRowGroupOpenedPending","init","refreshEverythingFunc","refreshModel","bind","step","ClientSideRowModelSteps","refreshEverythingAfterColsChangedFunc","afterColumnsChanged","keepRenderedRows","animate","addManagedListener","onValueChanged","onRowGroupOpened","onFilterChanged","onSortChanged","refreshMapListener","GridOptionsWrapper","nodeManager","getContext","start","getRowData","ensureRowHeightsValid","startPixel","endPixel","startLimitIndex","endLimitIndex","atLeastOneChange","res","rowAtStartPixel","getRowIndexAtPixel","rowAtEndPixel","firstRow","Math","max","lastRow","min","rowIndex","getRow","rowHeightEstimated","rowHeight","getRowHeightForNode","setRowHeight","height","setRowTops","nextRowTop","rowsToDisplay","allowEstimate","getDomLayout","Constants","estimated","setRowTop","setRowIndex","resetRowTops","changedPath","displayedRowsMapped","clearIfNotDisplayed","recurse","detailNode","sibling","hasChildren","isRootNode","isActive","ensureRowsAtPixel","pixel","increment","indexAtPixelNow","idx","keepEditingRows","highlightRowAtPixel","rowNodeAtPixelNow","highlight","getHighlightPosition","lastHighlightedRow","setHighlighted","index","rowTop","getLastHighlightedRowNode","isLastRowIndexKnown","getRowCount","getTopLevelRowCount","getTopLevelRowDisplayedIndex","topLevelIndex","isGroupHideOpenParents","getRowBounds","action","isAnimateRows","isSuppressAnimationFrame","animationFrameService","addDestroyTask","event","afterDataChange","getType","isPivotActive","createChangePath","rowNodeTransactions","noTransactions","ChangedPath","setInactive","isSuppressModelUpdateAfterUpdateTransaction","params","transWithAddsOrDeletes","tx","doRowGrouping","groupState","doFilter","doPivot","doAggregate","doSort","doRowsToDisplay","newData","newPage","$scope","window","setTimeout","$apply","isEmpty","rowsMissing","isReady","isRowsToRender","getNodesInRangeForSelection","firstInRange","lastInRange","firstRowHit","lastRowHit","result","groupsSelectChildren","isGroupSelectsChildren","forEachNodeAfterFilterAndSort","lookingForLastRow","inRange","childOfLastRow","isParentOfNode","l","setDatasource","datasource","getTopLevelNodes","getRootNode","isRowPresent","indexOf","pixelToMatch","bottomPointer","topPointer","midPointer","floor","currentRowNode","isRowInPixel","forEachLeafNode","callback","forEachNode","recursivelyWalkNodesAndCallback","forEachNodeAfterFilter","forEachPivotNode","nodes","recursionType","nodeChildren","u","leafGroup","aggregationStage","execute","expandOrCollapseAll","expand","usingTreeData","recursiveExpandOrCollapse","source","sortStage","groupStage","removeGroupsFromSelection","restoreGroupState","filterStage","pivotStage","getGroupState","isRememberGroupStateWhenNewData","res_1","batchUpdateRowData","rowDataTransaction","applyAsyncTransactionsTimeout","rowDataTransactionBatch","waitMillis","getAsyncTransactionWaitMillis","executeBatchUpdateRowData","flushAsyncTransactions","clearTimeout","onDataChanged","callbackFuncsBound","rowNodeTrans","forceRowNodeOrder","tranItem","rowNodeTran","undefined","commonUpdateRowData","func","event_1","getApi","getColumnApi","results","createRowNodeOrder","isSuppressMaintainUnsortedOrder","orderMap","flattenStage","onRowHeightChanged","resetRowHeights","atLeastOne","Autowired","Optional","PostConstruct","Bean","BeanStub","FilterStage","filterService","selectableService","updateSelectableAfterFiltering","SortStage","sortOptions","sortController","getSortOptions","sortActive","deltaSort","isDeltaSort","dirtyLeafNodes","calculateDirtyNodes","valueColumns","getValueColumns","noAggregations","sortService","sort","dirtyNodes","addNodesFunc","tran","FlattenStage","value","skipLeafNodes","isPivotMode","showRootNode","recursivelyAddToRowsToDisplay","isGroupIncludeTotalFooter","ensureFooterNodeExists","addRowNodeToRowsToDisplay","rowsToFlatten","uiLevel","hideOpenParents","groupRemoveSingleChildren","isGroupRemoveSingleChildren","groupRemoveLowestSingleChildren","isGroupRemoveLowestSingleChildren","isParent","isRemovedSingleChildrenGroup","isRemovedLowestSingleChildrenGroup","excludedParent","isGroupIncludeFooter","createDetailNode","isGroupMultiAutoColumn","setUiLevel","groupNode","footerNode","keys","footer","oldRowTop","masterNode","detail","SortService","postSortFunc","getPostSortFunc","forEachChangedNodeDepthFirst","pullDownGroupDataForHideOpenParents","doDeltaSort","rowNodeSorter","doFullSort","updateChildIndexes","updateGroupDataForHiddenOpenParents","mapNodeToSortedNode","pos","currentPos","cleanNodes","passesDirtyNodesCheck","passesChangedPathCheck","canSkip","cleanNodesMapped","sortedRowNode","changedNodes","compareRowNodes","mergeSortedArrays","arr1","arr2","compareResult","listToSort","child","lastChild","setFirstChild","setLastChild","setChildIndex","executeFromRootNode","clearOperation","childRowNode","getGroupDisplayColumns","groupDisplayCol","showRowGroup","getColDef","rowGroupColumn","getPrimaryColumn","setGroupValue","getId","parentToStealFrom","getFirstChildOfFirstChild","FilterService","filterActive","filterManager","isAnyFilterPresent","filterNodes","filterCallback","includeChildNodes","childNode","passBecauseChildren","passBecauseDataPasses","doesRowPassFilter","setAllChildrenCount","doingTreeDataFiltering","treeDataDepthFirstFilter_1","alreadyFoundInParent","foundInParent","setAllChildrenCountTreeData","allChildrenCount","setAllChildrenCountGridGrouping","isExcludeChildrenWhenTreeDataFiltering","ImmutableService","rowModel","clientSideRowModel","createTransactionForRowData","transaction","existingNodesMap","existingNode","ClientSideRowModelModule","moduleName","ModuleNames","beans","rowModels","clientSide","InfiniteBlock","parentCache","call","startRow","blockSize","endRow","createRowNodes","getBlockStateJson","state","blockNumber","getStartRow","getEndRow","pageStatus","getState","loadFromDatasource","createLoadParams","getRows","processServerFail","successCallback","pageLoaded","getVersion","failCallback","pageLoadFailed","sortModel","filterModel","sequence","rowCount","next","getLastAccessed","lastAccessed","dontTouchLastAccessed","lastAccessedSequence","processServerResult","destroyRowNodes","PreDestroy","RowNodeBlock","__param","paramIndex","decorator","InfiniteCache","lastRowIndexKnown","blocks","blockCount","initialRowCount","setBeans","loggerFactory","logger","dontCreatePage","blockId","block","createBlock","newBlock","purgeBlocksIfNeeded","rowNodeBlockLoader","addBlock","refreshCache","purgeCache","getBlocksInOrder","setStateWaitingToLoad","checkBlockToLoad","destroyAllBlocks","destroyBlock","isAlive","log","checkRowCount","onCacheUpdated","blockToExclude","blocksForPurging","maxBlocksProvided","maxBlocksInCache","blocksToKeep","emptyBlocksToKeep","MAX_EMPTY_BLOCKS_TO_KEEP","isBlockCurrentlyDisplayed","isBlockFocused","removeBlockFromCache","focusedCell","focusController","getFocusCellToUseAfterRefresh","rowPinned","blockIndexStart","blockIndexEnd","startIndex","endIndex","rowRenderer","isRangeInRenderedViewport","blockToRemove","lastRowIndexPlusOverflow","overflowSize","setRowCount","forEachNodeDeep","NumberSequence","destroyBean","removeBlock","destroyAllBlocksPastVirtualRowCount","blocksToDestroy","getRowNodesInRange","lastBlockId","inActiveRange","numberSequence","foundGapInSelection","hitFirstOrLast","Qualifier","InfiniteRowModel","isRowModelInfinite","getRowHeightAsNumber","addEventListeners","addDestroyFunc","destroyCache","verifyProps","getDefaultGroupSortComparator","getDatasource","destroyDatasource","datasourceChanged","onColumnEverything","reset","cacheParams","isSortModelDifferent","getSortModel","infiniteCache","resetCache","createModelUpdatedEvent","maxConcurrentRequests","getMaxConcurrentDatasourceRequests","getFilterModel","defaultIfInvalid","getInfiniteInitialRowCount","getMaxBlocksInCache","getCacheOverflowSize","getCacheBlockSize","defaultValue","rowIndexForPixel","lastRowIndex","InfiniteRowModelModule","infinite","BaseCreator","getFileName","fileName","extension","getDefaultFileExtension","getDefaultFileName","getMergedParamsAndData","userParams","mergedParams","mergeDefaultParams","gridSerializer","serialize","createSerializingSession","baseParams","getDefaultExportParams","BaseGridSerializingSession","config","groupColumns","valueService","processCellCallback","processHeaderCallback","processGroupHeaderCallback","processRowGroupCallback","prepare","columnsToExport","col","extractHeaderValue","column","getHeaderName","extractRowCellValue","accumulatedRowIndex","valueForCell","groupIndex","rowGroupIndex","isGroupUseEntireRow","createValueForGroupNode","getValue","processCell","getDisplayNameForColumn","reverse","join","Downloader","download","content","win","document","defaultView","navigator","msSaveOrOpenBlob","element","createElement","url_1","URL","createObjectURL","setAttribute","style","display","body","appendChild","MouseEvent","bubbles","cancelable","view","removeChild","revokeObjectURL","CsvSerializingSession","isFirstLine","columnSeparator","suppressQuotes","addCustomContent","test","beginNewLine","replace","row","cell","putInQuotes","mergeAcross","appendEmptyCells","onNewHeaderGroupingRow","onColumn","onNewHeaderGroupingRowColumn","header","span","count","onNewHeaderRow","onNewHeaderRowColumn","onNewBodyRow","onNewBodyRowColumn","stringValue","parse","CsvCreator","export","isExportSuppressed","_a","packagedFile","Blob","getMimeType","exportDataAsCsv","getDataAsCsv","isSuppressCsvExport","GridSerializer","gridSerializingSession","getColumnsToExport","allColumns","columnKeys","prepareSession","prependContent","exportColumnGroups","exportHeaders","processPinnedTopRows","processRows","processPinnedBottomRows","appendContent","serializeChain","processRow","rowSkipper","shouldRowBeSkipped","skipSingleChildrenGroup","skipLowestSingleChildrenGroup","isLeafNode","shouldSkipCurrentGroup","skipGroups","skipRowGroups","onlySelected","skipPinnedTop","skipPinnedBottom","rowAccumulator","getCustomContentBelowRow","customFooter","customHeader","skipColumnGroupHeaders","columnGroups","groupInstanceIdCreator","GroupInstanceIdCreator","displayedGroups","displayedGroupCreator","createDisplayedGroups","getGridBalancedTree","recursivelyAddHeaderGroups","skipHeader","skipColumnHeaders","gridRowIterator_1","pinnedRowModel","forEachPinnedTopRow","rowModelType","usingCsrm","usingSsrm","onlySelectedNonStandardModel","onlySelectedAllPages","getSelectedNodes","forEachPinnedBottomRow","getGridColumns","concat","getAllPrimaryColumns","getAllDisplayedColumns","directChildrenHeaderGroups","columnGroupChild","getChildren","it","ColumnGroup","doAddHeaderHeader","gridRowIterator","columnIndex","name","columnGroup","getDisplayNameForColumnGroup","getLeafColumns","CsvExportModule","LINE_SEPARATOR","crcTable","XmlFactory","createHeader","headerElement","version","encoding","standalone","headerStart","createXml","xmlElement","booleanTransformer","props","properties","prefixedAttributes","prefixedSet","returnAttributeIfPopulated","prefix","rawMap","children","textNode","xmlValue","Uint32Array","AllCommunityModules","ZipContainer","addFolders","paths","addFolder","path","folders","created","Date","isBase64","addFile","files","getContent","mimeType","textOutput","buildFileStream","uInt8Output","buildUint8Array","clearStream","fData","totalFiles","len","foData","lL","cL","_i","totalFiles_1","getHeader","fileHeader","folderHeader","buildFolderEnd","currentFile","offset","decToHex","utfPath","utf8_encode","isUTF8","time","convertTime","dt","convertDate","extraFields","uExtraFieldPath","getFromCrc32Table","getConvertedContent","size","convertedContent","split","atob","tLen","cLen","lLen","uint8","Uint8Array","charCodeAt","iterable","crc","date","getHours","getMinutes","getSeconds","getFullYear","getMonth","getDate"],"sources":["./projects/ng-dialogs/src/app/shared/constants/default-grid-options.constants.ts","./node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/clientSideRowModel.js","./node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/clientSideNodeManager.js","./node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/filterStage.js","./node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/sortStage.js","./node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/flattenStage.js","./node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/sortService.js","./node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/filterService.js","./node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/immutableService.js","./node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModelModule.js","./node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModel/infiniteBlock.js","./node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModel/infiniteCache.js","./node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModel/infiniteRowModel.js","./node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModelModule.js","./node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/baseCreator.js","./node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/sessions/baseGridSerializingSession.js","./node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/downloader.js","./node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/sessions/csvSerializingSession.js","./node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/csvCreator.js","./node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/gridSerializer.js","./node_modules/@ag-grid-community/csv-export/dist/es6/csvExportModule.js","./node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/xmlFactory.js","./node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/zipContainer.js","./node_modules/@ag-grid-community/all-modules/dist/es6/main.js"],"sourcesContent":["import { GridOptions } from '@ag-grid-community/all-modules';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  suppressMovableColumns: true,\r\n};\r\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, ChangedPath, Constants, Events, GridOptionsWrapper, Optional, PostConstruct, ClientSideRowModelSteps, RowNode } from \"@ag-grid-community/core\";\nimport { ClientSideNodeManager } from \"./clientSideNodeManager\";\nvar RecursionType;\n(function (RecursionType) {\n    RecursionType[RecursionType[\"Normal\"] = 0] = \"Normal\";\n    RecursionType[RecursionType[\"AfterFilter\"] = 1] = \"AfterFilter\";\n    RecursionType[RecursionType[\"AfterFilterAndSort\"] = 2] = \"AfterFilterAndSort\";\n    RecursionType[RecursionType[\"PivotNodes\"] = 3] = \"PivotNodes\";\n})(RecursionType || (RecursionType = {}));\nvar ClientSideRowModel = /** @class */ (function (_super) {\n    __extends(ClientSideRowModel, _super);\n    function ClientSideRowModel() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.onRowGroupOpenedPending = false;\n        return _this;\n    }\n    ClientSideRowModel.prototype.init = function () {\n        var refreshEverythingFunc = this.refreshModel.bind(this, { step: ClientSideRowModelSteps.EVERYTHING });\n        var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {\n            step: ClientSideRowModelSteps.EVERYTHING,\n            afterColumnsChanged: true,\n            keepRenderedRows: true,\n            animate: true\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refreshEverythingAfterColsChangedFunc);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: ClientSideRowModelSteps.PIVOT }));\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);\n        var refreshMapListener = this.refreshModel.bind(this, {\n            step: ClientSideRowModelSteps.MAP,\n            keepRenderedRows: true,\n            animate: true\n        });\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapListener);\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapListener);\n        this.rootNode = new RowNode();\n        this.nodeManager = new ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.getContext(), this.eventService, this.columnController, this.gridApi, this.columnApi, this.selectionController);\n        this.createBean(this.rootNode);\n    };\n    ClientSideRowModel.prototype.start = function () {\n        var rowData = this.gridOptionsWrapper.getRowData();\n        if (rowData) {\n            this.setRowData(rowData);\n        }\n    };\n    ClientSideRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n        var atLeastOneChange;\n        var res = false;\n        // we do this multiple times as changing the row heights can also change the first and last rows,\n        // so the first pass can make lots of rows smaller, which means the second pass we end up changing\n        // more rows.\n        do {\n            atLeastOneChange = false;\n            var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\n            var rowAtEndPixel = this.getRowIndexAtPixel(endPixel);\n            // keep check to current page if doing pagination\n            var firstRow = Math.max(rowAtStartPixel, startLimitIndex);\n            var lastRow = Math.min(rowAtEndPixel, endLimitIndex);\n            for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n                var rowNode = this.getRow(rowIndex);\n                if (rowNode.rowHeightEstimated) {\n                    var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);\n                    rowNode.setRowHeight(rowHeight.height);\n                    atLeastOneChange = true;\n                    res = true;\n                }\n            }\n            if (atLeastOneChange) {\n                this.setRowTops();\n            }\n        } while (atLeastOneChange);\n        return res;\n    };\n    ClientSideRowModel.prototype.setRowTops = function () {\n        var nextRowTop = 0;\n        for (var i = 0; i < this.rowsToDisplay.length; i++) {\n            // we don't estimate if doing fullHeight or autoHeight, as all rows get rendered all the time\n            // with these two layouts.\n            var allowEstimate = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;\n            var rowNode = this.rowsToDisplay[i];\n            if (_.missing(rowNode.rowHeight)) {\n                var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode, allowEstimate);\n                rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\n            }\n            rowNode.setRowTop(nextRowTop);\n            rowNode.setRowIndex(i);\n            nextRowTop += rowNode.rowHeight;\n        }\n    };\n    ClientSideRowModel.prototype.resetRowTops = function (changedPath) {\n        var displayedRowsMapped = {};\n        this.rowsToDisplay.forEach(function (rowNode) {\n            if (rowNode.id != null) {\n                displayedRowsMapped[rowNode.id] = rowNode;\n            }\n        });\n        var clearIfNotDisplayed = function (rowNode) {\n            if (rowNode && rowNode.id != null && displayedRowsMapped[rowNode.id] == null) {\n                rowNode.clearRowTopAndRowIndex();\n            }\n        };\n        var recurse = function (rowNode) {\n            clearIfNotDisplayed(rowNode);\n            clearIfNotDisplayed(rowNode.detailNode);\n            clearIfNotDisplayed(rowNode.sibling);\n            if (rowNode.hasChildren()) {\n                if (rowNode.childrenAfterGroup) {\n                    // if a changedPath is active, it means we are here because of a transaction update or\n                    // a change detection. neither of these impacts the open/closed state of groups. so if\n                    // a group is not open this time, it was not open last time. so we know all closed groups\n                    // already have their top positions cleared. so there is no need to traverse all the way\n                    // when changedPath is active and the rowNode is not expanded.\n                    var isRootNode = rowNode.level == -1; // we need to give special consideration for root node,\n                    // as expanded=undefined for root node\n                    var skipChildren = changedPath.isActive() && !isRootNode && !rowNode.expanded;\n                    if (!skipChildren) {\n                        rowNode.childrenAfterGroup.forEach(recurse);\n                    }\n                }\n            }\n        };\n        recurse(this.rootNode);\n    };\n    // returns false if row was moved, otherwise true\n    ClientSideRowModel.prototype.ensureRowsAtPixel = function (rowNodes, pixel, increment) {\n        var _this = this;\n        if (increment === void 0) { increment = 0; }\n        var indexAtPixelNow = this.getRowIndexAtPixel(pixel);\n        var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\n        if (rowNodeAtPixelNow === rowNodes[0]) {\n            return false;\n        }\n        rowNodes.forEach(function (rowNode) {\n            _.removeFromArray(_this.rootNode.allLeafChildren, rowNode);\n        });\n        rowNodes.forEach(function (rowNode, idx) {\n            _.insertIntoArray(_this.rootNode.allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);\n        });\n        this.refreshModel({\n            step: ClientSideRowModelSteps.EVERYTHING,\n            keepRenderedRows: true,\n            animate: true,\n            keepEditingRows: true\n        });\n        return true;\n    };\n    ClientSideRowModel.prototype.highlightRowAtPixel = function (rowNode, pixel) {\n        var indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;\n        var rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;\n        if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {\n            if (this.lastHighlightedRow) {\n                this.lastHighlightedRow.setHighlighted(null);\n                this.lastHighlightedRow = null;\n            }\n            return;\n        }\n        var highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);\n        if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {\n            this.lastHighlightedRow.setHighlighted(null);\n            this.lastHighlightedRow = null;\n        }\n        rowNodeAtPixelNow.setHighlighted(highlight);\n        this.lastHighlightedRow = rowNodeAtPixelNow;\n    };\n    ClientSideRowModel.prototype.getHighlightPosition = function (pixel, rowNode) {\n        if (!rowNode) {\n            var index = this.getRowIndexAtPixel(pixel);\n            rowNode = this.getRow(index || 0);\n            if (!rowNode) {\n                return 'below';\n            }\n        }\n        var rowTop = rowNode.rowTop, rowHeight = rowNode.rowHeight;\n        return pixel - rowTop < rowHeight / 2 ? 'above' : 'below';\n    };\n    ClientSideRowModel.prototype.getLastHighlightedRowNode = function () {\n        return this.lastHighlightedRow;\n    };\n    ClientSideRowModel.prototype.isLastRowIndexKnown = function () {\n        return true;\n    };\n    ClientSideRowModel.prototype.getRowCount = function () {\n        if (this.rowsToDisplay) {\n            return this.rowsToDisplay.length;\n        }\n        return 0;\n    };\n    ClientSideRowModel.prototype.getTopLevelRowCount = function () {\n        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n        if (showingRootNode) {\n            return 1;\n        }\n        return this.rootNode.childrenAfterFilter ? this.rootNode.childrenAfterFilter.length : 0;\n    };\n    ClientSideRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n        if (showingRootNode) {\n            return topLevelIndex;\n        }\n        var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];\n        if (this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            // if hideOpenParents, and this row open, then this row is now displayed at this index, first child is\n            while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\n                rowNode = rowNode.childrenAfterSort[0];\n            }\n        }\n        return rowNode.rowIndex;\n    };\n    ClientSideRowModel.prototype.getRowBounds = function (index) {\n        if (_.missing(this.rowsToDisplay)) {\n            return null;\n        }\n        var rowNode = this.rowsToDisplay[index];\n        if (rowNode) {\n            return {\n                rowTop: rowNode.rowTop,\n                rowHeight: rowNode.rowHeight\n            };\n        }\n        return null;\n    };\n    ClientSideRowModel.prototype.onRowGroupOpened = function () {\n        // because the user can call rowNode.setExpanded() many times in on VM turn,\n        // we debounce the call using animationFrameService. we use animationFrameService\n        // rather than _.debounce() so this will get done if anyone flushes the animationFrameService\n        // (eg user calls api.ensureRowVisible(), which in turn flushes ).\n        var _this = this;\n        if (this.onRowGroupOpenedPending) {\n            return;\n        }\n        this.onRowGroupOpenedPending = true;\n        var action = function () {\n            _this.onRowGroupOpenedPending = false;\n            var animate = _this.gridOptionsWrapper.isAnimateRows();\n            _this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, animate: animate });\n        };\n        if (this.gridOptionsWrapper.isSuppressAnimationFrame()) {\n            action();\n        }\n        else {\n            this.animationFrameService.addDestroyTask(action);\n        }\n    };\n    ClientSideRowModel.prototype.onFilterChanged = function (event) {\n        if (event.afterDataChange) {\n            return;\n        }\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: ClientSideRowModelSteps.FILTER, keepRenderedRows: true, animate: animate });\n    };\n    ClientSideRowModel.prototype.onSortChanged = function () {\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: ClientSideRowModelSteps.SORT, keepRenderedRows: true, animate: animate, keepEditingRows: true });\n    };\n    ClientSideRowModel.prototype.getType = function () {\n        return Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n    };\n    ClientSideRowModel.prototype.onValueChanged = function () {\n        if (this.columnController.isPivotActive()) {\n            this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });\n        }\n        else {\n            this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });\n        }\n    };\n    ClientSideRowModel.prototype.createChangePath = function (rowNodeTransactions) {\n        // for updates, if the row is updated at all, then we re-calc all the values\n        // in that row. we could compare each value to each old value, however if we\n        // did this, we would be calling the valueService twice, once on the old value\n        // and once on the new value. so it's less valueGetter calls if we just assume\n        // each column is different. that way the changedPath is used so that only\n        // the impacted parent rows are recalculated, parents who's children have\n        // not changed are not impacted.\n        var noTransactions = _.missingOrEmpty(rowNodeTransactions);\n        var changedPath = new ChangedPath(false, this.rootNode);\n        if (noTransactions || this.gridOptionsWrapper.isTreeData()) {\n            changedPath.setInactive();\n        }\n        return changedPath;\n    };\n    ClientSideRowModel.prototype.isSuppressModelUpdateAfterUpdateTransaction = function (params) {\n        if (!this.gridOptionsWrapper.isSuppressModelUpdateAfterUpdateTransaction()) {\n            return false;\n        }\n        // return true if we are only doing update transactions\n        if (params.rowNodeTransactions == null) {\n            return false;\n        }\n        var transWithAddsOrDeletes = _.filter(params.rowNodeTransactions, function (tx) {\n            return (tx.add != null && tx.add.length > 0) || (tx.remove != null && tx.remove.length > 0);\n        });\n        var transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;\n        return transactionsContainUpdatesOnly;\n    };\n    ClientSideRowModel.prototype.refreshModel = function (params) {\n        var _this = this;\n        if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {\n            return;\n        }\n        // this goes through the pipeline of stages. what's in my head is similar\n        // to the diagram on this page:\n        // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html\n        // however we want to keep the results of each stage, hence we manually call\n        // each step rather than have them chain each other.\n        // fallthrough in below switch is on purpose,\n        // eg if STEP_FILTER, then all steps below this\n        // step get done\n        // let start: number;\n        // console.log('======= start =======');\n        var changedPath = this.createChangePath(params.rowNodeTransactions);\n        switch (params.step) {\n            case ClientSideRowModelSteps.EVERYTHING:\n                // start = new Date().getTime();\n                this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, !!params.afterColumnsChanged);\n            // console.log('rowGrouping = ' + (new Date().getTime() - start));\n            case ClientSideRowModelSteps.FILTER:\n                // start = new Date().getTime();\n                this.doFilter(changedPath);\n            // console.log('filter = ' + (new Date().getTime() - start));\n            case ClientSideRowModelSteps.PIVOT:\n                this.doPivot(changedPath);\n            case ClientSideRowModelSteps.AGGREGATE: // depends on agg fields\n                // start = new Date().getTime();\n                this.doAggregate(changedPath);\n            // console.log('aggregation = ' + (new Date().getTime() - start));\n            case ClientSideRowModelSteps.SORT:\n                // start = new Date().getTime();\n                this.doSort(params.rowNodeTransactions, changedPath);\n            // console.log('sort = ' + (new Date().getTime() - start));\n            case ClientSideRowModelSteps.MAP:\n                // start = new Date().getTime();\n                this.doRowsToDisplay();\n            // console.log('rowsToDisplay = ' + (new Date().getTime() - start));\n        }\n        // set all row tops to null, then set row tops on all visible rows. if we don't\n        // do this, then the algorithm below only sets row tops, old row tops from old rows\n        // will still lie around\n        this.setRowTops();\n        this.resetRowTops(changedPath);\n        var event = {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            animate: params.animate,\n            keepRenderedRows: params.keepRenderedRows,\n            newData: params.newData,\n            newPage: false\n        };\n        this.eventService.dispatchEvent(event);\n        if (this.$scope) {\n            window.setTimeout(function () {\n                _this.$scope.$apply();\n            }, 0);\n        }\n    };\n    ClientSideRowModel.prototype.isEmpty = function () {\n        var rowsMissing = _.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;\n        return _.missing(this.rootNode) || rowsMissing || !this.columnController.isReady();\n    };\n    ClientSideRowModel.prototype.isRowsToRender = function () {\n        return _.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;\n    };\n    ClientSideRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        // if lastSelectedNode is missing, we start at the first row\n        var firstRowHit = !lastInRange;\n        var lastRowHit = false;\n        var lastRow;\n        var result = [];\n        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        this.forEachNodeAfterFilterAndSort(function (rowNode) {\n            var lookingForLastRow = firstRowHit && !lastRowHit;\n            // check if we need to flip the select switch\n            if (!firstRowHit) {\n                if (rowNode === lastInRange || rowNode === firstInRange) {\n                    firstRowHit = true;\n                }\n            }\n            var skipThisGroupNode = rowNode.group && groupsSelectChildren;\n            if (!skipThisGroupNode) {\n                var inRange = firstRowHit && !lastRowHit;\n                var childOfLastRow = rowNode.isParentOfNode(lastRow);\n                if (inRange || childOfLastRow) {\n                    result.push(rowNode);\n                }\n            }\n            if (lookingForLastRow) {\n                if (rowNode === lastInRange || rowNode === firstInRange) {\n                    lastRowHit = true;\n                    if (rowNode === lastInRange) {\n                        lastRow = lastInRange;\n                    }\n                    else {\n                        lastRow = firstInRange;\n                    }\n                }\n            }\n        });\n        return result;\n    };\n    ClientSideRowModel.prototype.setDatasource = function (datasource) {\n        console.error('AG Grid: should never call setDatasource on clientSideRowController');\n    };\n    ClientSideRowModel.prototype.getTopLevelNodes = function () {\n        return this.rootNode ? this.rootNode.childrenAfterGroup : null;\n    };\n    ClientSideRowModel.prototype.getRootNode = function () {\n        return this.rootNode;\n    };\n    ClientSideRowModel.prototype.getRow = function (index) {\n        return this.rowsToDisplay[index];\n    };\n    ClientSideRowModel.prototype.isRowPresent = function (rowNode) {\n        return this.rowsToDisplay.indexOf(rowNode) >= 0;\n    };\n    ClientSideRowModel.prototype.getRowIndexAtPixel = function (pixelToMatch) {\n        if (this.isEmpty()) {\n            return -1;\n        }\n        // do binary search of tree\n        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/\n        var bottomPointer = 0;\n        var topPointer = this.rowsToDisplay.length - 1;\n        // quick check, if the pixel is out of bounds, then return last row\n        if (pixelToMatch <= 0) {\n            // if pixel is less than or equal zero, it's always the first row\n            return 0;\n        }\n        var lastNode = _.last(this.rowsToDisplay);\n        if (lastNode.rowTop <= pixelToMatch) {\n            return this.rowsToDisplay.length - 1;\n        }\n        while (true) {\n            var midPointer = Math.floor((bottomPointer + topPointer) / 2);\n            var currentRowNode = this.rowsToDisplay[midPointer];\n            if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\n                return midPointer;\n            }\n            if (currentRowNode.rowTop < pixelToMatch) {\n                bottomPointer = midPointer + 1;\n            }\n            else if (currentRowNode.rowTop > pixelToMatch) {\n                topPointer = midPointer - 1;\n            }\n        }\n    };\n    ClientSideRowModel.prototype.isRowInPixel = function (rowNode, pixelToMatch) {\n        var topPixel = rowNode.rowTop;\n        var bottomPixel = rowNode.rowTop + rowNode.rowHeight;\n        var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;\n        return pixelInRow;\n    };\n    ClientSideRowModel.prototype.forEachLeafNode = function (callback) {\n        if (this.rootNode.allLeafChildren) {\n            this.rootNode.allLeafChildren.forEach(function (rowNode, index) { return callback(rowNode, index); });\n        }\n    };\n    ClientSideRowModel.prototype.forEachNode = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);\n    };\n    ClientSideRowModel.prototype.forEachNodeAfterFilter = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);\n    };\n    ClientSideRowModel.prototype.forEachNodeAfterFilterAndSort = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);\n    };\n    ClientSideRowModel.prototype.forEachPivotNode = function (callback) {\n        this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);\n    };\n    // iterates through each item in memory, and calls the callback function\n    // nodes - the rowNodes to traverse\n    // callback - the user provided callback\n    // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\n    // index - works similar to the index in forEach in javascript's array function\n    ClientSideRowModel.prototype.recursivelyWalkNodesAndCallback = function (nodes, callback, recursionType, index) {\n        if (!nodes) {\n            return index;\n        }\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            callback(node, index++);\n            // go to the next level if it is a group\n            if (node.hasChildren()) {\n                // depending on the recursion type, we pick a difference set of children\n                var nodeChildren = null;\n                switch (recursionType) {\n                    case RecursionType.Normal:\n                        nodeChildren = node.childrenAfterGroup;\n                        break;\n                    case RecursionType.AfterFilter:\n                        nodeChildren = node.childrenAfterFilter;\n                        break;\n                    case RecursionType.AfterFilterAndSort:\n                        nodeChildren = node.childrenAfterSort;\n                        break;\n                    case RecursionType.PivotNodes:\n                        // for pivot, we don't go below leafGroup levels\n                        nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\n                        break;\n                }\n                if (nodeChildren) {\n                    index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);\n                }\n            }\n        }\n        return index;\n    };\n    // it's possible to recompute the aggregate without doing the other parts\n    // + gridApi.recomputeAggregates()\n    ClientSideRowModel.prototype.doAggregate = function (changedPath) {\n        if (this.aggregationStage) {\n            this.aggregationStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n        }\n    };\n    // + gridApi.expandAll()\n    // + gridApi.collapseAll()\n    ClientSideRowModel.prototype.expandOrCollapseAll = function (expand) {\n        var usingTreeData = this.gridOptionsWrapper.isTreeData();\n        if (this.rootNode) {\n            recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);\n        }\n        function recursiveExpandOrCollapse(rowNodes) {\n            if (!rowNodes) {\n                return;\n            }\n            rowNodes.forEach(function (rowNode) {\n                var shouldExpandOrCollapse = usingTreeData ? _.exists(rowNode.childrenAfterGroup) : rowNode.group;\n                if (shouldExpandOrCollapse) {\n                    rowNode.expanded = expand;\n                    recursiveExpandOrCollapse(rowNode.childrenAfterGroup);\n                }\n            });\n        }\n        this.refreshModel({ step: ClientSideRowModelSteps.MAP });\n        var eventSource = expand ? 'expandAll' : 'collapseAll';\n        var event = {\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            type: Events.EVENT_EXPAND_COLLAPSE_ALL,\n            source: eventSource\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ClientSideRowModel.prototype.doSort = function (rowNodeTransactions, changedPath) {\n        this.sortStage.execute({\n            rowNode: this.rootNode,\n            rowNodeTransactions: rowNodeTransactions,\n            changedPath: changedPath\n        });\n    };\n    ClientSideRowModel.prototype.doRowGrouping = function (groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {\n        if (this.groupStage) {\n            if (rowNodeTransactions) {\n                this.groupStage.execute({\n                    rowNode: this.rootNode,\n                    rowNodeTransactions: rowNodeTransactions,\n                    rowNodeOrder: rowNodeOrder,\n                    changedPath: changedPath\n                });\n            }\n            else {\n                // groups are about to get disposed, so need to deselect any that are selected\n                this.selectionController.removeGroupsFromSelection();\n                this.groupStage.execute({\n                    rowNode: this.rootNode,\n                    changedPath: changedPath,\n                    afterColumnsChanged: afterColumnsChanged\n                });\n                // set open/closed state on groups\n                this.restoreGroupState(groupState);\n            }\n            if (this.gridOptionsWrapper.isGroupSelectsChildren()) {\n                this.selectionController.updateGroupsFromChildrenSelections(changedPath);\n            }\n        }\n        else {\n            this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;\n            this.rootNode.updateHasChildren();\n        }\n    };\n    ClientSideRowModel.prototype.restoreGroupState = function (groupState) {\n        if (!groupState) {\n            return;\n        }\n        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {\n            // if the group was open last time, then open it this time. however\n            // if was not open last time, then don't touch the group, so the 'groupDefaultExpanded'\n            // setting will take effect.\n            if (typeof groupState[key] === 'boolean') {\n                node.expanded = groupState[key];\n            }\n        });\n    };\n    ClientSideRowModel.prototype.doFilter = function (changedPath) {\n        this.filterStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n    };\n    ClientSideRowModel.prototype.doPivot = function (changedPath) {\n        if (this.pivotStage) {\n            this.pivotStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n        }\n    };\n    ClientSideRowModel.prototype.getGroupState = function () {\n        if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {\n            return null;\n        }\n        var result = {};\n        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) { return result[key] = node.expanded; });\n        return result;\n    };\n    ClientSideRowModel.prototype.getCopyOfNodesMap = function () {\n        return this.nodeManager.getCopyOfNodesMap();\n    };\n    ClientSideRowModel.prototype.getRowNode = function (id) {\n        // although id is typed a string, this could be called by the user, and they could have passed a number\n        var idIsGroup = typeof id == 'string' && id.indexOf(RowNode.ID_PREFIX_ROW_GROUP) == 0;\n        if (idIsGroup) {\n            // only one users complained about getRowNode not working for groups, after years of\n            // this working for normal rows. so have done quick implementation. if users complain\n            // about performance, then GroupStage should store / manage created groups in a map,\n            // which is a chunk of work.\n            var res_1 = null;\n            this.forEachNode(function (node) {\n                if (node.id === id) {\n                    res_1 = node;\n                }\n            });\n            return res_1;\n        }\n        else {\n            return this.nodeManager.getRowNode(id);\n        }\n    };\n    // rows: the rows to put into the model\n    ClientSideRowModel.prototype.setRowData = function (rowData) {\n        // no need to invalidate cache, as the cache is stored on the rowNode,\n        // so new rowNodes means the cache is wiped anyway.\n        // remember group state, so we can expand groups that should be expanded\n        var groupState = this.getGroupState();\n        this.nodeManager.setRowData(rowData);\n        // this event kicks off:\n        // - clears selection\n        // - updates filters\n        // - shows 'no rows' overlay if needed\n        var rowDataChangedEvent = {\n            type: Events.EVENT_ROW_DATA_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(rowDataChangedEvent);\n        this.refreshModel({\n            step: ClientSideRowModelSteps.EVERYTHING,\n            groupState: groupState,\n            newData: true\n        });\n    };\n    ClientSideRowModel.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {\n        var _this = this;\n        if (this.applyAsyncTransactionsTimeout == null) {\n            this.rowDataTransactionBatch = [];\n            var waitMillis = this.gridOptionsWrapper.getAsyncTransactionWaitMillis();\n            this.applyAsyncTransactionsTimeout = window.setTimeout(function () {\n                _this.executeBatchUpdateRowData();\n            }, waitMillis);\n        }\n        this.rowDataTransactionBatch.push({ rowDataTransaction: rowDataTransaction, callback: callback });\n    };\n    ClientSideRowModel.prototype.flushAsyncTransactions = function () {\n        if (this.applyAsyncTransactionsTimeout != null) {\n            clearTimeout(this.applyAsyncTransactionsTimeout);\n            this.executeBatchUpdateRowData();\n        }\n    };\n    ClientSideRowModel.prototype.executeBatchUpdateRowData = function () {\n        var _this = this;\n        this.valueCache.onDataChanged();\n        var callbackFuncsBound = [];\n        var rowNodeTrans = [];\n        // The rowGroup stage uses rowNodeOrder if order was provided. if we didn't pass 'true' to\n        // commonUpdateRowData, using addIndex would have no effect when grouping.\n        var forceRowNodeOrder = false;\n        if (this.rowDataTransactionBatch) {\n            this.rowDataTransactionBatch.forEach(function (tranItem) {\n                var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, undefined);\n                rowNodeTrans.push(rowNodeTran);\n                if (tranItem.callback) {\n                    callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));\n                }\n                if (typeof tranItem.rowDataTransaction.addIndex === 'number') {\n                    forceRowNodeOrder = true;\n                }\n            });\n        }\n        this.commonUpdateRowData(rowNodeTrans, undefined, forceRowNodeOrder);\n        // do callbacks in next VM turn so it's async\n        if (callbackFuncsBound.length > 0) {\n            window.setTimeout(function () {\n                callbackFuncsBound.forEach(function (func) { return func(); });\n            }, 0);\n        }\n        if (rowNodeTrans.length > 0) {\n            var event_1 = {\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                type: Events.EVENT_ASYNC_TRANSACTIONS_FLUSHED,\n                results: rowNodeTrans\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n        this.rowDataTransactionBatch = null;\n        this.applyAsyncTransactionsTimeout = undefined;\n    };\n    ClientSideRowModel.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n        this.valueCache.onDataChanged();\n        var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);\n        // if doing immutableData, addIndex is never present. however if doing standard transaction, and user\n        // provided addIndex, then this is used in updateRowData. However if doing Enterprise, then the rowGroup\n        // stage also uses the\n        var forceRowNodeOrder = typeof rowDataTran.addIndex === 'number';\n        this.commonUpdateRowData([rowNodeTran], rowNodeOrder, forceRowNodeOrder);\n        return rowNodeTran;\n    };\n    ClientSideRowModel.prototype.createRowNodeOrder = function () {\n        var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();\n        if (suppressSortOrder) {\n            return;\n        }\n        var orderMap = {};\n        if (this.rootNode && this.rootNode.allLeafChildren) {\n            for (var index = 0; index < this.rootNode.allLeafChildren.length; index++) {\n                var node = this.rootNode.allLeafChildren[index];\n                orderMap[node.id] = index;\n            }\n        }\n        return orderMap;\n    };\n    // common to updateRowData and batchUpdateRowData\n    ClientSideRowModel.prototype.commonUpdateRowData = function (rowNodeTrans, rowNodeOrder, forceRowNodeOrder) {\n        if (forceRowNodeOrder) {\n            rowNodeOrder = this.createRowNodeOrder();\n        }\n        this.refreshModel({\n            step: ClientSideRowModelSteps.EVERYTHING,\n            rowNodeTransactions: rowNodeTrans,\n            rowNodeOrder: rowNodeOrder,\n            keepRenderedRows: true,\n            animate: true,\n            keepEditingRows: true\n        });\n        var event = {\n            type: Events.EVENT_ROW_DATA_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ClientSideRowModel.prototype.doRowsToDisplay = function () {\n        this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });\n    };\n    ClientSideRowModel.prototype.onRowHeightChanged = function () {\n        this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, keepEditingRows: true });\n    };\n    ClientSideRowModel.prototype.resetRowHeights = function () {\n        var atLeastOne = false;\n        this.forEachNode(function (rowNode) {\n            rowNode.setRowHeight(rowNode.rowHeight, true);\n            // we keep the height each row is at, however we set estimated=true rather than clear the height.\n            // this means the grid will not reset the row heights back to defaults, rather it will re-calc\n            // the height for each row as the row is displayed. otherwise the scroll will jump when heights are reset.\n            var detailNode = rowNode.detailNode;\n            if (detailNode) {\n                detailNode.setRowHeight(detailNode.rowHeight, true);\n            }\n            atLeastOne = true;\n        });\n        if (atLeastOne) {\n            this.onRowHeightChanged();\n        }\n    };\n    __decorate([\n        Autowired('columnController')\n    ], ClientSideRowModel.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('$scope')\n    ], ClientSideRowModel.prototype, \"$scope\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], ClientSideRowModel.prototype, \"selectionController\", void 0);\n    __decorate([\n        Autowired('valueCache')\n    ], ClientSideRowModel.prototype, \"valueCache\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], ClientSideRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], ClientSideRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('animationFrameService')\n    ], ClientSideRowModel.prototype, \"animationFrameService\", void 0);\n    __decorate([\n        Autowired('filterStage')\n    ], ClientSideRowModel.prototype, \"filterStage\", void 0);\n    __decorate([\n        Autowired('sortStage')\n    ], ClientSideRowModel.prototype, \"sortStage\", void 0);\n    __decorate([\n        Autowired('flattenStage')\n    ], ClientSideRowModel.prototype, \"flattenStage\", void 0);\n    __decorate([\n        Optional('groupStage')\n    ], ClientSideRowModel.prototype, \"groupStage\", void 0);\n    __decorate([\n        Optional('aggregationStage')\n    ], ClientSideRowModel.prototype, \"aggregationStage\", void 0);\n    __decorate([\n        Optional('pivotStage')\n    ], ClientSideRowModel.prototype, \"pivotStage\", void 0);\n    __decorate([\n        PostConstruct\n    ], ClientSideRowModel.prototype, \"init\", null);\n    ClientSideRowModel = __decorate([\n        Bean('rowModel')\n    ], ClientSideRowModel);\n    return ClientSideRowModel;\n}(BeanStub));\nexport { ClientSideRowModel };\n","var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { _, Events, RowNode } from \"@ag-grid-community/core\";\nvar ClientSideNodeManager = /** @class */ (function () {\n    function ClientSideNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnController, gridApi, columnApi, selectionController) {\n        this.nextId = 0;\n        // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n        this.allNodesMap = {};\n        this.rootNode = rootNode;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.context = context;\n        this.eventService = eventService;\n        this.columnController = columnController;\n        this.gridApi = gridApi;\n        this.columnApi = columnApi;\n        this.selectionController = selectionController;\n        this.rootNode.group = true;\n        this.rootNode.level = -1;\n        this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;\n        this.rootNode.allLeafChildren = [];\n        this.rootNode.childrenAfterGroup = [];\n        this.rootNode.childrenAfterSort = [];\n        this.rootNode.childrenAfterFilter = [];\n        // if we make this class a bean, then can annotate postConstruct\n        this.postConstruct();\n    }\n    // @PostConstruct - this is not a bean, so postConstruct called by constructor\n    ClientSideNodeManager.prototype.postConstruct = function () {\n        // func below doesn't have 'this' pointer, so need to pull out these bits\n        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();\n        this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();\n        this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();\n    };\n    ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {\n        return _.cloneObject(this.allNodesMap);\n    };\n    ClientSideNodeManager.prototype.getRowNode = function (id) {\n        return this.allNodesMap[id];\n    };\n    ClientSideNodeManager.prototype.setRowData = function (rowData) {\n        this.rootNode.childrenAfterFilter = null;\n        this.rootNode.childrenAfterGroup = null;\n        this.rootNode.childrenAfterSort = null;\n        this.rootNode.childrenMapped = null;\n        this.rootNode.updateHasChildren();\n        this.nextId = 0;\n        this.allNodesMap = {};\n        if (!rowData) {\n            this.rootNode.allLeafChildren = [];\n            this.rootNode.childrenAfterGroup = [];\n            return;\n        }\n        // kick off recursion\n        // we add rootNode as the parent, however if using ag-grid-enterprise, the grouping stage\n        // sets the parent node on each row (even if we are not grouping). so setting parent node\n        // here is for benefit of ag-grid-community users\n        this.rootNode.allLeafChildren = this.recursiveFunction(rowData, this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n    };\n    ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n        var rowNodeTransaction = {\n            remove: [],\n            update: [],\n            add: []\n        };\n        var nodesToUnselect = [];\n        this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.executeAdd(rowDataTran, rowNodeTransaction);\n        this.updateSelection(nodesToUnselect);\n        if (rowNodeOrder) {\n            _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n        }\n        return rowNodeTransaction;\n    };\n    ClientSideNodeManager.prototype.updateSelection = function (nodesToUnselect) {\n        var selectionChanged = nodesToUnselect.length > 0;\n        if (selectionChanged) {\n            nodesToUnselect.forEach(function (rowNode) {\n                rowNode.setSelected(false, false, true);\n            });\n        }\n        // we do this regardless of nodes to unselect or not, as it's possible\n        // a new node was inserted, so a parent that was previously selected (as all\n        // children were selected) should not be tri-state (as new one unselected against\n        // all other selected children).\n        this.selectionController.updateGroupsFromChildrenSelections();\n        if (selectionChanged) {\n            var event_1 = {\n                type: Events.EVENT_SELECTION_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n    };\n    ClientSideNodeManager.prototype.executeAdd = function (rowDataTran, rowNodeTransaction) {\n        var _this = this;\n        var add = rowDataTran.add, addIndex = rowDataTran.addIndex;\n        if (_.missingOrEmpty(add)) {\n            return;\n        }\n        // create new row nodes for each data item\n        var newNodes = add.map(function (item) { return _this.createNode(item, _this.rootNode, ClientSideNodeManager.TOP_LEVEL); });\n        // add new row nodes to the root nodes 'allLeafChildren'\n        var useIndex = typeof addIndex === 'number' && addIndex >= 0;\n        if (useIndex) {\n            // new rows are inserted in one go by concatenating them in between the existing rows at the desired index.\n            // this is much faster than splicing them individually into 'allLeafChildren' when there are large inserts.\n            var existingLeafChildren = this.rootNode.allLeafChildren;\n            var nodesBeforeIndex = existingLeafChildren.slice(0, addIndex);\n            var nodesAfterIndex = existingLeafChildren.slice(addIndex, existingLeafChildren.length);\n            this.rootNode.allLeafChildren = __spreadArrays(nodesBeforeIndex, newNodes, nodesAfterIndex);\n        }\n        else {\n            this.rootNode.allLeafChildren = __spreadArrays(this.rootNode.allLeafChildren, newNodes);\n        }\n        // add new row nodes to the transaction add items\n        rowNodeTransaction.add = newNodes;\n    };\n    ClientSideNodeManager.prototype.executeRemove = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        var _this = this;\n        var remove = rowDataTran.remove;\n        if (_.missingOrEmpty(remove)) {\n            return;\n        }\n        var rowIdsRemoved = {};\n        remove.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n            if (rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            // so row renderer knows to fade row out (and not reposition it)\n            rowNode.clearRowTopAndRowIndex();\n            // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially\n            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n            rowIdsRemoved[rowNode.id] = true;\n            // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n            delete _this.allNodesMap[rowNode.id];\n            rowNodeTransaction.remove.push(rowNode);\n        });\n        this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function (rowNode) { return !rowIdsRemoved[rowNode.id]; });\n    };\n    ClientSideNodeManager.prototype.executeUpdate = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        var _this = this;\n        var update = rowDataTran.update;\n        if (_.missingOrEmpty(update)) {\n            return;\n        }\n        update.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            rowNode.updateData(item);\n            if (!rowNode.selectable && rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            _this.setMasterForRow(rowNode, item, ClientSideNodeManager.TOP_LEVEL, false);\n            rowNodeTransaction.update.push(rowNode);\n        });\n    };\n    ClientSideNodeManager.prototype.lookupRowNode = function (data) {\n        var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n        var rowNode;\n        if (_.exists(rowNodeIdFunc)) {\n            // find rowNode using id\n            var id = rowNodeIdFunc(data);\n            rowNode = this.allNodesMap[id];\n            if (!rowNode) {\n                console.error(\"AG Grid: could not find row id=\" + id + \", data item was not found for this id\");\n                return null;\n            }\n        }\n        else {\n            // find rowNode using object references\n            rowNode = _.find(this.rootNode.allLeafChildren, function (node) { return node.data === data; });\n            if (!rowNode) {\n                console.error(\"AG Grid: could not find data item as object was not found\", data);\n                return null;\n            }\n        }\n        return rowNode;\n    };\n    ClientSideNodeManager.prototype.recursiveFunction = function (rowData, parent, level) {\n        var _this = this;\n        // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum\n        if (typeof rowData === 'string') {\n            console.warn('AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');\n            return;\n        }\n        var rowNodes = [];\n        rowData.forEach(function (dataItem) {\n            var node = _this.createNode(dataItem, parent, level);\n            rowNodes.push(node);\n        });\n        return rowNodes;\n    };\n    ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {\n        var node = new RowNode();\n        this.context.createBean(node);\n        node.group = false;\n        this.setMasterForRow(node, dataItem, level, true);\n        if (parent && !this.suppressParentsInRowNodes) {\n            node.parent = parent;\n        }\n        node.level = level;\n        node.setDataAndId(dataItem, this.nextId.toString());\n        if (this.allNodesMap[node.id]) {\n            console.warn(\"ag-grid: duplicate node id '\" + node.id + \"' detected from getRowNodeId callback, this could cause issues in your grid.\");\n        }\n        this.allNodesMap[node.id] = node;\n        this.nextId++;\n        return node;\n    };\n    ClientSideNodeManager.prototype.setMasterForRow = function (rowNode, data, level, setExpanded) {\n        if (this.doingTreeData) {\n            rowNode.setMaster(false);\n            if (setExpanded) {\n                rowNode.expanded = false;\n            }\n        }\n        else {\n            // this is the default, for when doing grid data\n            if (this.doingMasterDetail) {\n                // if we are doing master detail, then the\n                // default is that everything can be a Master Row.\n                if (this.isRowMasterFunc) {\n                    rowNode.setMaster(this.isRowMasterFunc(data));\n                }\n                else {\n                    rowNode.setMaster(true);\n                }\n            }\n            else {\n                rowNode.setMaster(false);\n            }\n            if (setExpanded) {\n                var rowGroupColumns = this.columnController.getRowGroupColumns();\n                var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n                // need to take row group into account when determining level\n                var masterRowLevel = level + numRowGroupColumns;\n                rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n            }\n        }\n    };\n    ClientSideNodeManager.prototype.isExpanded = function (level) {\n        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();\n        if (expandByDefault === -1) {\n            return true;\n        }\n        return level < expandByDefault;\n    };\n    ClientSideNodeManager.TOP_LEVEL = 0;\n    ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';\n    return ClientSideNodeManager;\n}());\nexport { ClientSideNodeManager };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, BeanStub } from \"@ag-grid-community/core\";\nvar FilterStage = /** @class */ (function (_super) {\n    __extends(FilterStage, _super);\n    function FilterStage() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FilterStage.prototype.execute = function (params) {\n        var rowNode = params.rowNode, changedPath = params.changedPath;\n        this.filterService.filter(changedPath);\n        this.selectableService.updateSelectableAfterFiltering(rowNode);\n    };\n    __decorate([\n        Autowired('selectableService')\n    ], FilterStage.prototype, \"selectableService\", void 0);\n    __decorate([\n        Autowired('filterService')\n    ], FilterStage.prototype, \"filterService\", void 0);\n    FilterStage = __decorate([\n        Bean('filterStage')\n    ], FilterStage);\n    return FilterStage;\n}(BeanStub));\nexport { FilterStage };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub } from \"@ag-grid-community/core\";\nvar SortStage = /** @class */ (function (_super) {\n    __extends(SortStage, _super);\n    function SortStage() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SortStage.prototype.execute = function (params) {\n        var sortOptions = this.sortController.getSortOptions();\n        var sortActive = _.exists(sortOptions) && sortOptions.length > 0;\n        var deltaSort = sortActive\n            && _.exists(params.rowNodeTransactions)\n            // in time we can remove this check, so that delta sort is always\n            // on if transactions are present. it's off for now so that we can\n            // selectively turn it on and test it with some select users before\n            // rolling out to everyone.\n            && this.gridOptionsWrapper.isDeltaSort();\n        // we only need dirty nodes if doing delta sort\n        var dirtyLeafNodes = deltaSort ? this.calculateDirtyNodes(params.rowNodeTransactions) : null;\n        var valueColumns = this.columnController.getValueColumns();\n        var noAggregations = _.missingOrEmpty(valueColumns);\n        this.sortService.sort(sortOptions, sortActive, deltaSort, dirtyLeafNodes, params.changedPath, noAggregations);\n    };\n    SortStage.prototype.calculateDirtyNodes = function (rowNodeTransactions) {\n        var dirtyNodes = {};\n        var addNodesFunc = function (rowNodes) {\n            if (rowNodes) {\n                rowNodes.forEach(function (rowNode) { return dirtyNodes[rowNode.id] = true; });\n            }\n        };\n        // all leaf level nodes in the transaction were impacted\n        if (rowNodeTransactions) {\n            rowNodeTransactions.forEach(function (tran) {\n                addNodesFunc(tran.add);\n                addNodesFunc(tran.update);\n                addNodesFunc(tran.remove);\n            });\n        }\n        return dirtyNodes;\n    };\n    __decorate([\n        Autowired('sortService')\n    ], SortStage.prototype, \"sortService\", void 0);\n    __decorate([\n        Autowired('sortController')\n    ], SortStage.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], SortStage.prototype, \"columnController\", void 0);\n    SortStage = __decorate([\n        Bean('sortStage')\n    ], SortStage);\n    return SortStage;\n}(BeanStub));\nexport { SortStage };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, RowNode } from \"@ag-grid-community/core\";\nvar FlattenStage = /** @class */ (function (_super) {\n    __extends(FlattenStage, _super);\n    function FlattenStage() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FlattenStage.prototype.execute = function (params) {\n        var rootNode = params.rowNode;\n        // even if not doing grouping, we do the mapping, as the client might\n        // of passed in data that already has a grouping in it somewhere\n        var result = [];\n        // putting value into a wrapper so it's passed by reference\n        var nextRowTop = { value: 0 };\n        var skipLeafNodes = this.columnController.isPivotMode();\n        // if we are reducing, and not grouping, then we want to show the root node, as that\n        // is where the pivot values are\n        var showRootNode = skipLeafNodes && rootNode.leafGroup;\n        var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;\n        this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0);\n        // we do not want the footer total if the gris is empty\n        var atLeastOneRowPresent = result.length > 0;\n        var includeGroupTotalFooter = !showRootNode\n            // don't show total footer when showRootNode is true (i.e. in pivot mode and no groups)\n            && atLeastOneRowPresent\n            && this.gridOptionsWrapper.isGroupIncludeTotalFooter();\n        if (includeGroupTotalFooter) {\n            this.ensureFooterNodeExists(rootNode);\n            this.addRowNodeToRowsToDisplay(rootNode.sibling, result, nextRowTop, 0);\n        }\n        return result;\n    };\n    FlattenStage.prototype.recursivelyAddToRowsToDisplay = function (rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {\n        if (_.missingOrEmpty(rowsToFlatten)) {\n            return;\n        }\n        var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();\n        // these two are mutually exclusive, so if first set, we don't set the second\n        var groupRemoveSingleChildren = this.gridOptionsWrapper.isGroupRemoveSingleChildren();\n        var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n        for (var i = 0; i < rowsToFlatten.length; i++) {\n            var rowNode = rowsToFlatten[i];\n            // check all these cases, for working out if this row should be included in the final mapped list\n            var isParent = rowNode.hasChildren();\n            var isSkippedLeafNode = skipLeafNodes && !isParent;\n            var isRemovedSingleChildrenGroup = groupRemoveSingleChildren &&\n                isParent &&\n                rowNode.childrenAfterGroup.length === 1;\n            var isRemovedLowestSingleChildrenGroup = groupRemoveLowestSingleChildren &&\n                isParent &&\n                rowNode.leafGroup &&\n                rowNode.childrenAfterGroup.length === 1;\n            // hide open parents means when group is open, we don't show it. we also need to make sure the\n            // group is expandable in the first place (as leaf groups are not expandable if pivot mode is on).\n            // the UI will never allow expanding leaf  groups, however the user might via the API (or menu option 'expand all')\n            var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;\n            var isHiddenOpenParent = hideOpenParents && rowNode.expanded && (!neverAllowToExpand);\n            var thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent &&\n                !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;\n            if (thisRowShouldBeRendered) {\n                this.addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);\n            }\n            // if we are pivoting, we never map below the leaf group\n            if (skipLeafNodes && rowNode.leafGroup) {\n                continue;\n            }\n            if (isParent) {\n                var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;\n                // we traverse the group if it is expended, however we always traverse if the parent node\n                // was removed (as the group will never be opened if it is not displayed, we show the children instead)\n                if (rowNode.expanded || excludedParent) {\n                    // if the parent was excluded, then ui level is that of the parent\n                    var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;\n                    this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren);\n                    // put a footer in if user is looking for it\n                    if (this.gridOptionsWrapper.isGroupIncludeFooter()) {\n                        this.ensureFooterNodeExists(rowNode);\n                        this.addRowNodeToRowsToDisplay(rowNode.sibling, result, nextRowTop, uiLevel);\n                    }\n                }\n            }\n            else if (rowNode.master && rowNode.expanded) {\n                var detailNode = this.createDetailNode(rowNode);\n                this.addRowNodeToRowsToDisplay(detailNode, result, nextRowTop, uiLevel);\n            }\n        }\n    };\n    // duplicated method, it's also in floatingRowModel\n    FlattenStage.prototype.addRowNodeToRowsToDisplay = function (rowNode, result, nextRowTop, uiLevel) {\n        var isGroupMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();\n        result.push(rowNode);\n        rowNode.setUiLevel(isGroupMultiAutoColumn ? 0 : uiLevel);\n    };\n    FlattenStage.prototype.ensureFooterNodeExists = function (groupNode) {\n        // only create footer node once, otherwise we have daemons and\n        // the animate screws up with the daemons hanging around\n        if (_.exists(groupNode.sibling)) {\n            return;\n        }\n        var footerNode = new RowNode();\n        this.context.createBean(footerNode);\n        Object.keys(groupNode).forEach(function (key) {\n            footerNode[key] = groupNode[key];\n        });\n        footerNode.footer = true;\n        footerNode.setRowTop(null);\n        footerNode.setRowIndex(null);\n        // manually set oldRowTop to null so we discard any\n        // previous information about its position.\n        footerNode.oldRowTop = null;\n        if (_.exists(footerNode.id)) {\n            footerNode.id = 'rowGroupFooter_' + footerNode.id;\n        }\n        // get both header and footer to reference each other as siblings. this is never undone,\n        // only overwritten. so if a group is expanded, then contracted, it will have a ghost\n        // sibling - but that's fine, as we can ignore this if the header is contracted.\n        footerNode.sibling = groupNode;\n        groupNode.sibling = footerNode;\n    };\n    FlattenStage.prototype.createDetailNode = function (masterNode) {\n        if (_.exists(masterNode.detailNode)) {\n            return masterNode.detailNode;\n        }\n        var detailNode = new RowNode();\n        this.context.createBean(detailNode);\n        detailNode.detail = true;\n        detailNode.selectable = false;\n        detailNode.parent = masterNode;\n        if (_.exists(masterNode.id)) {\n            detailNode.id = 'detail_' + masterNode.id;\n        }\n        detailNode.data = masterNode.data;\n        detailNode.level = masterNode.level + 1;\n        masterNode.detailNode = detailNode;\n        return detailNode;\n    };\n    __decorate([\n        Autowired('columnController')\n    ], FlattenStage.prototype, \"columnController\", void 0);\n    FlattenStage = __decorate([\n        Bean('flattenStage')\n    ], FlattenStage);\n    return FlattenStage;\n}(BeanStub));\nexport { FlattenStage };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, PostConstruct, BeanStub } from \"@ag-grid-community/core\";\nvar SortService = /** @class */ (function (_super) {\n    __extends(SortService, _super);\n    function SortService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SortService.prototype.init = function () {\n        this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();\n    };\n    SortService.prototype.sort = function (sortOptions, sortActive, deltaSort, dirtyLeafNodes, changedPath, noAggregations) {\n        var _this = this;\n        var callback = function (rowNode) {\n            // we clear out the 'pull down open parents' first, as the values mix up the sorting\n            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterFilter, true);\n            // Javascript sort is non deterministic when all the array items are equals, ie Comparator always returns 0,\n            // so to ensure the array keeps its order, add an additional sorting condition manually, in this case we\n            // are going to inspect the original array position. This is what sortedRowNodes is for.\n            if (sortActive) {\n                rowNode.childrenAfterSort = deltaSort ?\n                    _this.doDeltaSort(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations)\n                    : _this.rowNodeSorter.doFullSort(rowNode.childrenAfterFilter, sortOptions);\n            }\n            else {\n                rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);\n            }\n            _this.updateChildIndexes(rowNode);\n            if (_this.postSortFunc) {\n                _this.postSortFunc(rowNode.childrenAfterSort);\n            }\n        };\n        if (changedPath) {\n            changedPath.forEachChangedNodeDepthFirst(callback);\n        }\n        this.updateGroupDataForHiddenOpenParents(changedPath);\n    };\n    SortService.prototype.mapNodeToSortedNode = function (rowNode, pos) {\n        return { currentPos: pos, rowNode: rowNode };\n    };\n    SortService.prototype.doDeltaSort = function (rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) {\n        // clean nodes will be a list of all row nodes that remain in the set\n        // and ordered. we start with the old sorted set and take out any nodes\n        // that were removed or changed (but not added, added doesn't make sense,\n        // if a node was added, there is no way it could be here from last time).\n        var cleanNodes = rowNode.childrenAfterSort\n            .filter(function (node) {\n            // take out all nodes that were changed as part of the current transaction.\n            // a changed node could a) be in a different sort position or b) may\n            // no longer be in this set as the changed node may not pass filtering,\n            // or be in a different group.\n            var passesDirtyNodesCheck = !dirtyLeafNodes[node.id];\n            // also remove group nodes in the changed path, as they can have different aggregate\n            // values which could impact the sort order.\n            // note: changed path is not active if a) no value columns or b) no transactions. it is never\n            // (b) in deltaSort as we only do deltaSort for transactions. for (a) if no value columns, then\n            // there is no value in the group that could of changed (ie no aggregate values)\n            var passesChangedPathCheck = noAggregations || (changedPath && changedPath.canSkip(node));\n            return passesDirtyNodesCheck && passesChangedPathCheck;\n        })\n            .map(this.mapNodeToSortedNode.bind(this));\n        // for fast access below, we map them\n        var cleanNodesMapped = {};\n        cleanNodes.forEach(function (sortedRowNode) { return cleanNodesMapped[sortedRowNode.rowNode.id] = sortedRowNode.rowNode; });\n        // these are all nodes that need to be placed\n        var changedNodes = rowNode.childrenAfterFilter\n            // ignore nodes in the clean list\n            .filter(function (node) { return !cleanNodesMapped[node.id]; })\n            .map(this.mapNodeToSortedNode.bind(this));\n        // sort changed nodes. note that we don't need to sort cleanNodes as they are\n        // already sorted from last time.\n        changedNodes.sort(this.rowNodeSorter.compareRowNodes.bind(this, sortOptions));\n        var result;\n        if (changedNodes.length === 0) {\n            result = cleanNodes;\n        }\n        else if (cleanNodes.length === 0) {\n            result = changedNodes;\n        }\n        else {\n            result = this.mergeSortedArrays(sortOptions, cleanNodes, changedNodes);\n        }\n        return result.map(function (item) { return item.rowNode; });\n    };\n    // Merge two sorted arrays into each other\n    SortService.prototype.mergeSortedArrays = function (sortOptions, arr1, arr2) {\n        var res = [];\n        var i = 0;\n        var j = 0;\n        // Traverse both array, adding them in order\n        while (i < arr1.length && j < arr2.length) {\n            // Check if current element of first\n            // array is smaller than current element\n            // of second array. If yes, store first\n            // array element and increment first array\n            // index. Otherwise do same with second array\n            var compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);\n            if (compareResult < 0) {\n                res.push(arr1[i++]);\n            }\n            else {\n                res.push(arr2[j++]);\n            }\n        }\n        // add remaining from arr1\n        while (i < arr1.length) {\n            res.push(arr1[i++]);\n        }\n        // add remaining from arr2\n        while (j < arr2.length) {\n            res.push(arr2[j++]);\n        }\n        return res;\n    };\n    SortService.prototype.updateChildIndexes = function (rowNode) {\n        if (_.missing(rowNode.childrenAfterSort)) {\n            return;\n        }\n        var listToSort = rowNode.childrenAfterSort;\n        for (var i = 0; i < listToSort.length; i++) {\n            var child = listToSort[i];\n            var firstChild = i === 0;\n            var lastChild = i === rowNode.childrenAfterSort.length - 1;\n            child.setFirstChild(firstChild);\n            child.setLastChild(lastChild);\n            child.setChildIndex(i);\n        }\n    };\n    SortService.prototype.updateGroupDataForHiddenOpenParents = function (changedPath) {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            return;\n        }\n        // recurse breadth first over group nodes after sort to 'pull down' group data to child groups\n        var callback = function (rowNode) {\n            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);\n            rowNode.childrenAfterSort.forEach(function (child) {\n                if (child.hasChildren()) {\n                    callback(child);\n                }\n            });\n        };\n        if (changedPath) {\n            changedPath.executeFromRootNode(function (rowNode) { return callback(rowNode); });\n        }\n    };\n    SortService.prototype.pullDownGroupDataForHideOpenParents = function (rowNodes, clearOperation) {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents() || _.missing(rowNodes)) {\n            return;\n        }\n        rowNodes.forEach(function (childRowNode) {\n            var groupDisplayCols = _this.columnController.getGroupDisplayColumns();\n            groupDisplayCols.forEach(function (groupDisplayCol) {\n                var showRowGroup = groupDisplayCol.getColDef().showRowGroup;\n                if (typeof showRowGroup !== 'string') {\n                    console.error('AG Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup');\n                    return;\n                }\n                var displayingGroupKey = showRowGroup;\n                var rowGroupColumn = _this.columnController.getPrimaryColumn(displayingGroupKey);\n                var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;\n                if (thisRowNodeMatches) {\n                    return;\n                }\n                if (clearOperation) {\n                    // if doing a clear operation, we clear down the value for every possible group column\n                    childRowNode.setGroupValue(groupDisplayCol.getId(), null);\n                }\n                else {\n                    // if doing a set operation, we set only where the pull down is to occur\n                    var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);\n                    if (parentToStealFrom) {\n                        childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);\n                    }\n                }\n            });\n        });\n    };\n    __decorate([\n        Autowired('columnController')\n    ], SortService.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('rowNodeSorter')\n    ], SortService.prototype, \"rowNodeSorter\", void 0);\n    __decorate([\n        PostConstruct\n    ], SortService.prototype, \"init\", null);\n    SortService = __decorate([\n        Bean('sortService')\n    ], SortService);\n    return SortService;\n}(BeanStub));\nexport { SortService };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct, BeanStub } from \"@ag-grid-community/core\";\nvar FilterService = /** @class */ (function (_super) {\n    __extends(FilterService, _super);\n    function FilterService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FilterService.prototype.postConstruct = function () {\n        this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n    };\n    FilterService.prototype.filter = function (changedPath) {\n        var filterActive = this.filterManager.isAnyFilterPresent();\n        this.filterNodes(filterActive, changedPath);\n    };\n    FilterService.prototype.filterNodes = function (filterActive, changedPath) {\n        var _this = this;\n        var filterCallback = function (rowNode, includeChildNodes) {\n            // recursively get all children that are groups to also filter\n            if (rowNode.hasChildren()) {\n                // result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes\n                if (filterActive && !includeChildNodes) {\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function (childNode) {\n                        // a group is included in the result if it has any children of it's own.\n                        // by this stage, the child groups are already filtered\n                        var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;\n                        // both leaf level nodes and tree data nodes have data. these get added if\n                        // the data passes the filter\n                        var passBecauseDataPasses = childNode.data\n                            && _this.filterManager.doesRowPassFilter({ rowNode: childNode });\n                        // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass\n                        return passBecauseChildren || passBecauseDataPasses;\n                    });\n                }\n                else {\n                    // if not filtering, the result is the original list\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n                }\n                _this.setAllChildrenCount(rowNode);\n            }\n            else {\n                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n                rowNode.setAllChildrenCount(null);\n            }\n        };\n        if (this.doingTreeDataFiltering()) {\n            var treeDataDepthFirstFilter_1 = function (rowNode, alreadyFoundInParent) {\n                // tree data filter traverses the hierarchy depth first and includes child nodes if parent passes\n                // filter, and parent nodes will be include if any children exist.\n                if (rowNode.childrenAfterGroup) {\n                    for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                        var childNode = rowNode.childrenAfterGroup[i];\n                        // first check if current node passes filter before invoking child nodes\n                        var foundInParent = alreadyFoundInParent\n                            || _this.filterManager.doesRowPassFilter({ rowNode: childNode });\n                        if (childNode.childrenAfterGroup) {\n                            treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);\n                        }\n                        else {\n                            filterCallback(childNode, foundInParent);\n                        }\n                    }\n                }\n                filterCallback(rowNode, alreadyFoundInParent);\n            };\n            var treeDataFilterCallback = function (rowNode) { return treeDataDepthFirstFilter_1(rowNode, false); };\n            changedPath.executeFromRootNode(treeDataFilterCallback);\n        }\n        else {\n            var defaultFilterCallback = function (rowNode) { return filterCallback(rowNode, false); };\n            changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n        }\n    };\n    FilterService.prototype.setAllChildrenCountTreeData = function (rowNode) {\n        // for tree data, we include all children, groups and leafs\n        var allChildrenCount = 0;\n        rowNode.childrenAfterFilter.forEach(function (child) {\n            // include child itself\n            allChildrenCount++;\n            // include children of children\n            allChildrenCount += child.allChildrenCount;\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    };\n    FilterService.prototype.setAllChildrenCountGridGrouping = function (rowNode) {\n        // for grid data, we only count the leafs\n        var allChildrenCount = 0;\n        rowNode.childrenAfterFilter.forEach(function (child) {\n            if (child.group) {\n                allChildrenCount += child.allChildrenCount;\n            }\n            else {\n                allChildrenCount++;\n            }\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    };\n    FilterService.prototype.setAllChildrenCount = function (rowNode) {\n        if (this.doingTreeData) {\n            this.setAllChildrenCountTreeData(rowNode);\n        }\n        else {\n            this.setAllChildrenCountGridGrouping(rowNode);\n        }\n    };\n    FilterService.prototype.doingTreeDataFiltering = function () {\n        return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();\n    };\n    __decorate([\n        Autowired('filterManager')\n    ], FilterService.prototype, \"filterManager\", void 0);\n    __decorate([\n        PostConstruct\n    ], FilterService.prototype, \"postConstruct\", null);\n    FilterService = __decorate([\n        Bean(\"filterService\")\n    ], FilterService);\n    return FilterService;\n}(BeanStub));\nexport { FilterService };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, Constants, PostConstruct, BeanStub } from \"@ag-grid-community/core\";\nvar ImmutableService = /** @class */ (function (_super) {\n    __extends(ImmutableService, _super);\n    function ImmutableService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ImmutableService.prototype.postConstruct = function () {\n        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            this.clientSideRowModel = this.rowModel;\n        }\n    };\n    // converts the setRowData() command to a transaction\n    ImmutableService.prototype.createTransactionForRowData = function (data) {\n        if (_.missing(this.clientSideRowModel)) {\n            console.error('AG Grid: ImmutableService only works with ClientSideRowModel');\n            return;\n        }\n        var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n        if (!getRowNodeIdFunc || _.missing(getRowNodeIdFunc)) {\n            console.error('AG Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!');\n            return;\n        }\n        // convert the data into a transaction object by working out adds, removes and updates\n        var transaction = {\n            remove: [],\n            update: [],\n            add: []\n        };\n        var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();\n        var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();\n        var orderMap = suppressSortOrder ? null : {};\n        if (_.exists(data)) {\n            // split all the new data in the following:\n            // if new, push to 'add'\n            // if update, push to 'update'\n            // if not changed, do not include in the transaction\n            data.forEach(function (dataItem, index) {\n                var id = getRowNodeIdFunc(dataItem);\n                var existingNode = existingNodesMap[id];\n                if (orderMap) {\n                    orderMap[id] = index;\n                }\n                if (existingNode) {\n                    var dataHasChanged = existingNode.data !== dataItem;\n                    if (dataHasChanged) {\n                        transaction.update.push(dataItem);\n                    }\n                    // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta\n                    // remove from list, so we know the item is not to be removed\n                    existingNodesMap[id] = undefined;\n                }\n                else {\n                    transaction.add.push(dataItem);\n                }\n            });\n        }\n        // at this point, all rows that are left, should be removed\n        _.iterateObject(existingNodesMap, function (id, rowNode) {\n            if (rowNode) {\n                transaction.remove.push(rowNode.data);\n            }\n        });\n        return [transaction, orderMap];\n    };\n    __decorate([\n        Autowired('rowModel')\n    ], ImmutableService.prototype, \"rowModel\", void 0);\n    __decorate([\n        PostConstruct\n    ], ImmutableService.prototype, \"postConstruct\", null);\n    ImmutableService = __decorate([\n        Bean('immutableService')\n    ], ImmutableService);\n    return ImmutableService;\n}(BeanStub));\nexport { ImmutableService };\n","import { ModuleNames } from \"@ag-grid-community/core\";\nimport { ClientSideRowModel } from \"./clientSideRowModel/clientSideRowModel\";\nimport { FilterStage } from \"./clientSideRowModel/filterStage\";\nimport { SortStage } from \"./clientSideRowModel/sortStage\";\nimport { FlattenStage } from \"./clientSideRowModel/flattenStage\";\nimport { SortService } from \"./clientSideRowModel/sortService\";\nimport { FilterService } from \"./clientSideRowModel/filterService\";\nimport { ImmutableService } from \"./clientSideRowModel/immutableService\";\nexport var ClientSideRowModelModule = {\n    moduleName: ModuleNames.ClientSideRowModelModule,\n    beans: [FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService],\n    rowModels: { clientSide: ClientSideRowModel }\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, PostConstruct, PreDestroy, RowNode, RowNodeBlock } from \"@ag-grid-community/core\";\nvar InfiniteBlock = /** @class */ (function (_super) {\n    __extends(InfiniteBlock, _super);\n    function InfiniteBlock(id, parentCache, params) {\n        var _this = _super.call(this, id) || this;\n        _this.parentCache = parentCache;\n        _this.params = params;\n        // we don't need to calculate these now, as the inputs don't change,\n        // however it makes the code easier to read if we work them out up front\n        _this.startRow = id * params.blockSize;\n        _this.endRow = _this.startRow + params.blockSize;\n        return _this;\n    }\n    InfiniteBlock.prototype.postConstruct = function () {\n        this.createRowNodes();\n    };\n    InfiniteBlock.prototype.getBlockStateJson = function () {\n        return {\n            id: '' + this.getId(),\n            state: {\n                blockNumber: this.getId(),\n                startRow: this.getStartRow(),\n                endRow: this.getEndRow(),\n                pageStatus: this.getState()\n            }\n        };\n    };\n    InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {\n        if (_.exists(data)) {\n            // this means if the user is not providing id's we just use the\n            // index for the row. this will allow selection to work (that is based\n            // on index) as long user is not inserting or deleting rows,\n            // or wanting to keep selection between server side sorting or filtering\n            rowNode.setDataAndId(data, index.toString());\n        }\n        else {\n            rowNode.setDataAndId(undefined, undefined);\n        }\n    };\n    InfiniteBlock.prototype.loadFromDatasource = function () {\n        var _this = this;\n        var params = this.createLoadParams();\n        if (_.missing(this.params.datasource.getRows)) {\n            console.warn(\"AG Grid: datasource is missing getRows method\");\n            return;\n        }\n        // put in timeout, to force result to be async\n        window.setTimeout(function () {\n            _this.params.datasource.getRows(params);\n        }, 0);\n    };\n    InfiniteBlock.prototype.processServerFail = function () {\n        // todo - this method has better handling in SSRM\n    };\n    InfiniteBlock.prototype.createLoadParams = function () {\n        // PROBLEM . . . . when the user sets sort via colDef.sort, then this code\n        // is executing before the sort is set up, so server is not getting the sort\n        // model. need to change with regards order - so the server side request is\n        // AFTER thus it gets the right sort model.\n        var params = {\n            startRow: this.getStartRow(),\n            endRow: this.getEndRow(),\n            successCallback: this.pageLoaded.bind(this, this.getVersion()),\n            failCallback: this.pageLoadFailed.bind(this, this.getVersion()),\n            sortModel: this.params.sortModel,\n            filterModel: this.params.filterModel,\n            context: this.gridOptionsWrapper.getContext()\n        };\n        return params;\n    };\n    InfiniteBlock.prototype.forEachNode = function (callback, sequence, rowCount) {\n        var _this = this;\n        this.rowNodes.forEach(function (rowNode, index) {\n            var rowIndex = _this.startRow + index;\n            if (rowIndex < rowCount) {\n                callback(rowNode, sequence.next());\n            }\n        });\n    };\n    InfiniteBlock.prototype.getLastAccessed = function () {\n        return this.lastAccessed;\n    };\n    InfiniteBlock.prototype.getRow = function (rowIndex, dontTouchLastAccessed) {\n        if (dontTouchLastAccessed === void 0) { dontTouchLastAccessed = false; }\n        if (!dontTouchLastAccessed) {\n            this.lastAccessed = this.params.lastAccessedSequence.next();\n        }\n        var localIndex = rowIndex - this.startRow;\n        return this.rowNodes[localIndex];\n    };\n    InfiniteBlock.prototype.getStartRow = function () {\n        return this.startRow;\n    };\n    InfiniteBlock.prototype.getEndRow = function () {\n        return this.endRow;\n    };\n    // creates empty row nodes, data is missing as not loaded yet\n    InfiniteBlock.prototype.createRowNodes = function () {\n        this.rowNodes = [];\n        for (var i = 0; i < this.params.blockSize; i++) {\n            var rowIndex = this.startRow + i;\n            var rowNode = this.getContext().createBean(new RowNode());\n            rowNode.setRowHeight(this.params.rowHeight);\n            rowNode.uiLevel = 0;\n            rowNode.setRowIndex(rowIndex);\n            rowNode.setRowTop(this.params.rowHeight * rowIndex);\n            this.rowNodes.push(rowNode);\n        }\n    };\n    InfiniteBlock.prototype.processServerResult = function (params) {\n        var _this = this;\n        this.rowNodes.forEach(function (rowNode, index) {\n            var data = params.rowData ? params.rowData[index] : undefined;\n            _this.setDataAndId(rowNode, data, _this.startRow + index);\n        });\n        var finalRowCount = params.rowCount != null && params.rowCount >= 0 ? params.rowCount : undefined;\n        this.parentCache.pageLoaded(this, finalRowCount);\n    };\n    InfiniteBlock.prototype.destroyRowNodes = function () {\n        this.rowNodes.forEach(function (rowNode) {\n            // this is needed, so row render knows to fade out the row, otherwise it\n            // sees row top is present, and thinks the row should be shown.\n            rowNode.clearRowTopAndRowIndex();\n        });\n    };\n    __decorate([\n        PostConstruct\n    ], InfiniteBlock.prototype, \"postConstruct\", null);\n    __decorate([\n        PreDestroy\n    ], InfiniteBlock.prototype, \"destroyRowNodes\", null);\n    return InfiniteBlock;\n}(RowNodeBlock));\nexport { InfiniteBlock };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Autowired, BeanStub, Events, NumberSequence, PreDestroy, Qualifier, _ } from \"@ag-grid-community/core\";\nimport { InfiniteBlock } from \"./infiniteBlock\";\nvar InfiniteCache = /** @class */ (function (_super) {\n    __extends(InfiniteCache, _super);\n    function InfiniteCache(params) {\n        var _this = _super.call(this) || this;\n        _this.lastRowIndexKnown = false;\n        _this.blocks = {};\n        _this.blockCount = 0;\n        _this.rowCount = params.initialRowCount;\n        _this.params = params;\n        return _this;\n    }\n    InfiniteCache.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('InfiniteCache');\n    };\n    // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,\n    // it will want new pages in the cache as it asks for rows. only when we are inserting /\n    // removing rows via the api is dontCreatePage set, where we move rows between the pages.\n    InfiniteCache.prototype.getRow = function (rowIndex, dontCreatePage) {\n        if (dontCreatePage === void 0) { dontCreatePage = false; }\n        var blockId = Math.floor(rowIndex / this.params.blockSize);\n        var block = this.blocks[blockId];\n        if (!block) {\n            if (dontCreatePage) {\n                return null;\n            }\n            block = this.createBlock(blockId);\n        }\n        return block.getRow(rowIndex);\n    };\n    InfiniteCache.prototype.createBlock = function (blockNumber) {\n        var newBlock = this.createBean(new InfiniteBlock(blockNumber, this, this.params));\n        this.blocks[newBlock.getId()] = newBlock;\n        this.blockCount++;\n        this.purgeBlocksIfNeeded(newBlock);\n        this.params.rowNodeBlockLoader.addBlock(newBlock);\n        return newBlock;\n    };\n    // we have this on infinite row model only, not server side row model,\n    // because for server side, it would leave the children in inconsistent\n    // state - eg if a node had children, but after the refresh it had data\n    // for a different row, then the children would be with the wrong row node.\n    InfiniteCache.prototype.refreshCache = function () {\n        var nothingToRefresh = this.blockCount == 0;\n        if (nothingToRefresh) {\n            this.purgeCache();\n            return;\n        }\n        this.getBlocksInOrder().forEach(function (block) { return block.setStateWaitingToLoad(); });\n        this.params.rowNodeBlockLoader.checkBlockToLoad();\n    };\n    InfiniteCache.prototype.destroyAllBlocks = function () {\n        var _this = this;\n        this.getBlocksInOrder().forEach(function (block) { return _this.destroyBlock(block); });\n    };\n    InfiniteCache.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n    InfiniteCache.prototype.isLastRowIndexKnown = function () {\n        return this.lastRowIndexKnown;\n    };\n    // block calls this, when page loaded\n    InfiniteCache.prototype.pageLoaded = function (block, lastRow) {\n        // if we are not active, then we ignore all events, otherwise we could end up getting the\n        // grid to refresh even though we are no longer the active cache\n        if (!this.isAlive()) {\n            return;\n        }\n        this.logger.log(\"onPageLoaded: page = \" + block.getId() + \", lastRow = \" + lastRow);\n        this.checkRowCount(block, lastRow);\n        // we fire cacheUpdated even if the row count has not changed, as some items need updating even\n        // if no new rows to render. for example the pagination panel has '?' as the total rows when loading\n        // is underway, which would need to get updated when loading finishes.\n        this.onCacheUpdated();\n    };\n    InfiniteCache.prototype.purgeBlocksIfNeeded = function (blockToExclude) {\n        var _this = this;\n        // we exclude checking for the page just created, as this has yet to be accessed and hence\n        // the lastAccessed stamp will not be updated for the first time yet\n        var blocksForPurging = this.getBlocksInOrder().filter(function (b) { return b != blockToExclude; });\n        var lastAccessedComparator = function (a, b) { return b.getLastAccessed() - a.getLastAccessed(); };\n        blocksForPurging.sort(lastAccessedComparator);\n        // we remove (maxBlocksInCache - 1) as we already excluded the 'just created' page.\n        // in other words, after the splice operation below, we have taken out the blocks\n        // we want to keep, which means we are left with blocks that we can potentially purge\n        var maxBlocksProvided = this.params.maxBlocksInCache > 0;\n        var blocksToKeep = maxBlocksProvided ? this.params.maxBlocksInCache - 1 : null;\n        var emptyBlocksToKeep = InfiniteCache.MAX_EMPTY_BLOCKS_TO_KEEP - 1;\n        blocksForPurging.forEach(function (block, index) {\n            var purgeBecauseBlockEmpty = block.getState() === InfiniteBlock.STATE_WAITING_TO_LOAD && index >= emptyBlocksToKeep;\n            var purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep : false;\n            if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {\n                // if the block currently has rows been displayed, then don't remove it either.\n                // this can happen if user has maxBlocks=2, and blockSize=5 (thus 10 max rows in cache)\n                // but the screen is showing 20 rows, so at least 4 blocks are needed.\n                if (_this.isBlockCurrentlyDisplayed(block)) {\n                    return;\n                }\n                // don't want to loose keyboard focus, so keyboard navigation can continue. so keep focused blocks.\n                if (_this.isBlockFocused(block)) {\n                    return;\n                }\n                // at this point, block is not needed, so burn baby burn\n                _this.removeBlockFromCache(block);\n            }\n        });\n    };\n    InfiniteCache.prototype.isBlockFocused = function (block) {\n        var focusedCell = this.focusController.getFocusCellToUseAfterRefresh();\n        if (!focusedCell) {\n            return false;\n        }\n        if (focusedCell.rowPinned != null) {\n            return false;\n        }\n        var blockIndexStart = block.getStartRow();\n        var blockIndexEnd = block.getEndRow();\n        var hasFocus = focusedCell.rowIndex >= blockIndexStart && focusedCell.rowIndex < blockIndexEnd;\n        return hasFocus;\n    };\n    InfiniteCache.prototype.isBlockCurrentlyDisplayed = function (block) {\n        var startIndex = block.getStartRow();\n        var endIndex = block.getEndRow() - 1;\n        return this.rowRenderer.isRangeInRenderedViewport(startIndex, endIndex);\n    };\n    InfiniteCache.prototype.removeBlockFromCache = function (blockToRemove) {\n        if (!blockToRemove) {\n            return;\n        }\n        this.destroyBlock(blockToRemove);\n        // we do not want to remove the 'loaded' event listener, as the\n        // concurrent loads count needs to be updated when the load is complete\n        // if the purged page is in loading state\n    };\n    InfiniteCache.prototype.checkRowCount = function (block, lastRow) {\n        // if client provided a last row, we always use it, as it could change between server calls\n        // if user deleted data and then called refresh on the grid.\n        if (typeof lastRow === 'number' && lastRow >= 0) {\n            this.rowCount = lastRow;\n            this.lastRowIndexKnown = true;\n        }\n        else if (!this.lastRowIndexKnown) {\n            // otherwise, see if we need to add some virtual rows\n            var lastRowIndex = (block.getId() + 1) * this.params.blockSize;\n            var lastRowIndexPlusOverflow = lastRowIndex + this.params.overflowSize;\n            if (this.rowCount < lastRowIndexPlusOverflow) {\n                this.rowCount = lastRowIndexPlusOverflow;\n            }\n        }\n    };\n    InfiniteCache.prototype.setRowCount = function (rowCount, lastRowIndexKnown) {\n        this.rowCount = rowCount;\n        // if undefined is passed, we do not set this value, if one of {true,false}\n        // is passed, we do set the value.\n        if (_.exists(lastRowIndexKnown)) {\n            this.lastRowIndexKnown = lastRowIndexKnown;\n        }\n        // if we are still searching, then the row count must not end at the end\n        // of a particular page, otherwise the searching will not pop into the\n        // next page\n        if (!this.lastRowIndexKnown) {\n            if (this.rowCount % this.params.blockSize === 0) {\n                this.rowCount++;\n            }\n        }\n        this.onCacheUpdated();\n    };\n    InfiniteCache.prototype.forEachNodeDeep = function (callback) {\n        var _this = this;\n        var sequence = new NumberSequence();\n        this.getBlocksInOrder().forEach(function (block) { return block.forEachNode(callback, sequence, _this.rowCount); });\n    };\n    InfiniteCache.prototype.getBlocksInOrder = function () {\n        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order\n        var blockComparator = function (a, b) { return a.getId() - b.getId(); };\n        var blocks = _.getAllValuesInObject(this.blocks).sort(blockComparator);\n        return blocks;\n    };\n    InfiniteCache.prototype.destroyBlock = function (block) {\n        delete this.blocks[block.getId()];\n        this.destroyBean(block);\n        this.blockCount--;\n        this.params.rowNodeBlockLoader.removeBlock(block);\n    };\n    // gets called 1) row count changed 2) cache purged 3) items inserted\n    InfiniteCache.prototype.onCacheUpdated = function () {\n        if (this.isAlive()) {\n            // if the virtualRowCount is shortened, then it's possible blocks exist that are no longer\n            // in the valid range. so we must remove these. this can happen if user explicitly sets\n            // the virtual row count, or the datasource returns a result and sets lastRow to something\n            // less than virtualRowCount (can happen if user scrolls down, server reduces dataset size).\n            this.destroyAllBlocksPastVirtualRowCount();\n            // this results in both row models (infinite and server side) firing ModelUpdated,\n            // however server side row model also updates the row indexes first\n            var event_1 = {\n                type: Events.EVENT_STORE_UPDATED\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n    };\n    InfiniteCache.prototype.destroyAllBlocksPastVirtualRowCount = function () {\n        var _this = this;\n        var blocksToDestroy = [];\n        this.getBlocksInOrder().forEach(function (block) {\n            var startRow = block.getId() * _this.params.blockSize;\n            if (startRow >= _this.rowCount) {\n                blocksToDestroy.push(block);\n            }\n        });\n        if (blocksToDestroy.length > 0) {\n            blocksToDestroy.forEach(function (block) { return _this.destroyBlock(block); });\n        }\n    };\n    InfiniteCache.prototype.purgeCache = function () {\n        var _this = this;\n        this.getBlocksInOrder().forEach(function (block) { return _this.removeBlockFromCache(block); });\n        this.lastRowIndexKnown = false;\n        // if zero rows in the cache, we need to get the SSRM to start asking for rows again.\n        // otherwise if set to zero rows last time, and we don't update the row count, then after\n        // the purge there will still be zero rows, meaning the SSRM won't request any rows.\n        // to kick things off, at least one row needs to be asked for.\n        if (this.rowCount === 0) {\n            this.rowCount = this.params.initialRowCount;\n        }\n        this.onCacheUpdated();\n    };\n    InfiniteCache.prototype.getRowNodesInRange = function (firstInRange, lastInRange) {\n        var _this = this;\n        var result = [];\n        var lastBlockId = -1;\n        var inActiveRange = false;\n        var numberSequence = new NumberSequence();\n        // if only one node passed, we start the selection at the top\n        if (_.missing(firstInRange)) {\n            inActiveRange = true;\n        }\n        var foundGapInSelection = false;\n        this.getBlocksInOrder().forEach(function (block) {\n            if (foundGapInSelection) {\n                return;\n            }\n            if (inActiveRange && (lastBlockId + 1 !== block.getId())) {\n                foundGapInSelection = true;\n                return;\n            }\n            lastBlockId = block.getId();\n            block.forEachNode(function (rowNode) {\n                var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;\n                if (inActiveRange || hitFirstOrLast) {\n                    result.push(rowNode);\n                }\n                if (hitFirstOrLast) {\n                    inActiveRange = !inActiveRange;\n                }\n            }, numberSequence, _this.rowCount);\n        });\n        // inActiveRange will be still true if we never hit the second rowNode\n        var invalidRange = foundGapInSelection || inActiveRange;\n        return invalidRange ? [] : result;\n    };\n    // this property says how many empty blocks should be in a cache, eg if scrolls down fast and creates 10\n    // blocks all for loading, the grid will only load the last 2 - it will assume the blocks the user quickly\n    // scrolled over are not needed to be loaded.\n    InfiniteCache.MAX_EMPTY_BLOCKS_TO_KEEP = 2;\n    __decorate([\n        Autowired('rowRenderer')\n    ], InfiniteCache.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired(\"focusController\")\n    ], InfiniteCache.prototype, \"focusController\", void 0);\n    __decorate([\n        __param(0, Qualifier('loggerFactory'))\n    ], InfiniteCache.prototype, \"setBeans\", null);\n    __decorate([\n        PreDestroy\n    ], InfiniteCache.prototype, \"destroyAllBlocks\", null);\n    return InfiniteCache;\n}(BeanStub));\nexport { InfiniteCache };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, Constants, Events, NumberSequence, PostConstruct, PreDestroy } from \"@ag-grid-community/core\";\nimport { InfiniteCache } from \"./infiniteCache\";\nvar InfiniteRowModel = /** @class */ (function (_super) {\n    __extends(InfiniteRowModel, _super);\n    function InfiniteRowModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    InfiniteRowModel.prototype.getRowBounds = function (index) {\n        return {\n            rowHeight: this.rowHeight,\n            rowTop: this.rowHeight * index\n        };\n    };\n    // we don't implement as lazy row heights is not supported in this row model\n    InfiniteRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n        return false;\n    };\n    InfiniteRowModel.prototype.init = function () {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isRowModelInfinite()) {\n            return;\n        }\n        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n        this.addEventListeners();\n        this.addDestroyFunc(function () { return _this.destroyCache(); });\n        this.verifyProps();\n    };\n    InfiniteRowModel.prototype.verifyProps = function () {\n        if (this.gridOptionsWrapper.getDefaultGroupSortComparator() != null) {\n            var message_1 = \"AG Grid: defaultGroupSortComparator cannot be used with Infinite Row Model. If using Infinite Row Model, then sorting is done on the server side, nothing to do with the client.\";\n            _.doOnce(function () { return console.warn(message_1); }, 'IRM.DefaultGroupSortComparator');\n        }\n    };\n    InfiniteRowModel.prototype.start = function () {\n        this.setDatasource(this.gridOptionsWrapper.getDatasource());\n    };\n    InfiniteRowModel.prototype.destroyDatasource = function () {\n        if (this.datasource) {\n            this.getContext().destroyBean(this.datasource);\n            this.rowRenderer.datasourceChanged();\n            this.datasource = null;\n        }\n    };\n    InfiniteRowModel.prototype.addEventListeners = function () {\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_STORE_UPDATED, this.onCacheUpdated.bind(this));\n    };\n    InfiniteRowModel.prototype.onFilterChanged = function () {\n        this.reset();\n    };\n    InfiniteRowModel.prototype.onSortChanged = function () {\n        this.reset();\n    };\n    InfiniteRowModel.prototype.onColumnEverything = function () {\n        var resetRequired;\n        // if cache params, we require reset only if sort model has changed. we don't need to check\n        // for filter model, as the filter manager will fire an event when columns change that result\n        // in the filter changing.\n        if (this.cacheParams) {\n            resetRequired = this.isSortModelDifferent();\n        }\n        else {\n            // if no cacheParams, means first time creating the cache, so always create one\n            resetRequired = true;\n        }\n        if (resetRequired) {\n            this.reset();\n        }\n    };\n    InfiniteRowModel.prototype.isSortModelDifferent = function () {\n        return !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());\n    };\n    InfiniteRowModel.prototype.getType = function () {\n        return Constants.ROW_MODEL_TYPE_INFINITE;\n    };\n    InfiniteRowModel.prototype.setDatasource = function (datasource) {\n        this.destroyDatasource();\n        this.datasource = datasource;\n        // only reset if we have a valid datasource to working with\n        if (datasource) {\n            this.reset();\n        }\n    };\n    InfiniteRowModel.prototype.isEmpty = function () {\n        return !this.infiniteCache;\n    };\n    InfiniteRowModel.prototype.isRowsToRender = function () {\n        return !!this.infiniteCache;\n    };\n    InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];\n    };\n    InfiniteRowModel.prototype.reset = function () {\n        // important to return here, as the user could be setting filter or sort before\n        // data-source is set\n        if (!this.datasource) {\n            return;\n        }\n        // if user is providing id's, then this means we can keep the selection between datasource hits,\n        // as the rows will keep their unique id's even if, for example, server side sorting or filtering\n        // is done.\n        var userGeneratingIds = _.exists(this.gridOptionsWrapper.getRowNodeIdFunc());\n        if (!userGeneratingIds) {\n            this.selectionController.reset();\n        }\n        this.resetCache();\n        var event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    };\n    InfiniteRowModel.prototype.createModelUpdatedEvent = function () {\n        return {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            // not sure if these should all be false - noticed if after implementing,\n            // maybe they should be true?\n            newPage: false,\n            newData: false,\n            keepRenderedRows: true,\n            animate: false\n        };\n    };\n    InfiniteRowModel.prototype.resetCache = function () {\n        // if not first time creating a cache, need to destroy the old one\n        this.destroyCache();\n        var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();\n        this.cacheParams = {\n            // the user provided datasource\n            datasource: this.datasource,\n            // sort and filter model\n            filterModel: this.filterManager.getFilterModel(),\n            sortModel: this.sortController.getSortModel(),\n            rowNodeBlockLoader: this.rowNodeBlockLoader,\n            // properties - this way we take a snapshot of them, so if user changes any, they will be\n            // used next time we create a new cache, which is generally after a filter or sort change,\n            // or a new datasource is set\n            maxConcurrentRequests: this.defaultIfInvalid(maxConcurrentRequests, 2),\n            initialRowCount: this.defaultIfInvalid(this.gridOptionsWrapper.getInfiniteInitialRowCount(), 1),\n            maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),\n            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n            // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past\n            // the current page and request first row of next page\n            overflowSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheOverflowSize(), 1),\n            // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the\n            // server for one page at a time. so the default if not specified is 100.\n            blockSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheBlockSize(), 100),\n            // the cache could create this, however it is also used by the pages, so handy to create it\n            // here as the settings are also passed to the pages\n            lastAccessedSequence: new NumberSequence()\n        };\n        this.infiniteCache = this.createBean(new InfiniteCache(this.cacheParams));\n    };\n    InfiniteRowModel.prototype.defaultIfInvalid = function (value, defaultValue) {\n        return value > 0 ? value : defaultValue;\n    };\n    InfiniteRowModel.prototype.destroyCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache = this.destroyBean(this.infiniteCache);\n        }\n    };\n    InfiniteRowModel.prototype.onCacheUpdated = function () {\n        var event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    };\n    InfiniteRowModel.prototype.getRow = function (rowIndex) {\n        return this.infiniteCache ? this.infiniteCache.getRow(rowIndex) : null;\n    };\n    InfiniteRowModel.prototype.getRowNode = function (id) {\n        var result = null;\n        this.forEachNode(function (rowNode) {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n        });\n        return result;\n    };\n    InfiniteRowModel.prototype.forEachNode = function (callback) {\n        if (this.infiniteCache) {\n            this.infiniteCache.forEachNodeDeep(callback);\n        }\n    };\n    InfiniteRowModel.prototype.getTopLevelRowCount = function () {\n        return this.getRowCount();\n    };\n    InfiniteRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        return topLevelIndex;\n    };\n    InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n        if (this.rowHeight !== 0) { // avoid divide by zero error\n            var rowIndexForPixel = Math.floor(pixel / this.rowHeight);\n            var lastRowIndex = this.getRowCount() - 1;\n            if (rowIndexForPixel > lastRowIndex) {\n                return lastRowIndex;\n            }\n            else {\n                return rowIndexForPixel;\n            }\n        }\n        else {\n            return 0;\n        }\n    };\n    InfiniteRowModel.prototype.getRowCount = function () {\n        return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;\n    };\n    InfiniteRowModel.prototype.isRowPresent = function (rowNode) {\n        var foundRowNode = this.getRowNode(rowNode.id);\n        return !!foundRowNode;\n    };\n    InfiniteRowModel.prototype.refreshCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.refreshCache();\n        }\n    };\n    InfiniteRowModel.prototype.purgeCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.purgeCache();\n        }\n    };\n    // for iRowModel\n    InfiniteRowModel.prototype.isLastRowIndexKnown = function () {\n        if (this.infiniteCache) {\n            return this.infiniteCache.isLastRowIndexKnown();\n        }\n        else {\n            return false;\n        }\n    };\n    InfiniteRowModel.prototype.setRowCount = function (rowCount, lastRowIndexKnown) {\n        if (this.infiniteCache) {\n            this.infiniteCache.setRowCount(rowCount, lastRowIndexKnown);\n        }\n    };\n    __decorate([\n        Autowired('filterManager')\n    ], InfiniteRowModel.prototype, \"filterManager\", void 0);\n    __decorate([\n        Autowired('sortController')\n    ], InfiniteRowModel.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], InfiniteRowModel.prototype, \"selectionController\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], InfiniteRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], InfiniteRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], InfiniteRowModel.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired('rowNodeBlockLoader')\n    ], InfiniteRowModel.prototype, \"rowNodeBlockLoader\", void 0);\n    __decorate([\n        PostConstruct\n    ], InfiniteRowModel.prototype, \"init\", null);\n    __decorate([\n        PreDestroy\n    ], InfiniteRowModel.prototype, \"destroyDatasource\", null);\n    InfiniteRowModel = __decorate([\n        Bean('rowModel')\n    ], InfiniteRowModel);\n    return InfiniteRowModel;\n}(BeanStub));\nexport { InfiniteRowModel };\n","import { ModuleNames } from \"@ag-grid-community/core\";\nimport { InfiniteRowModel } from \"./infiniteRowModel/infiniteRowModel\";\nexport var InfiniteRowModelModule = {\n    moduleName: ModuleNames.InfiniteRowModelModule,\n    rowModels: { infinite: InfiniteRowModel }\n};\n","import { _ } from \"@ag-grid-community/core\";\nvar BaseCreator = /** @class */ (function () {\n    function BaseCreator() {\n    }\n    BaseCreator.prototype.setBeans = function (beans) {\n        this.beans = beans;\n    };\n    BaseCreator.prototype.getFileName = function (fileName) {\n        var extension = this.getDefaultFileExtension();\n        if (fileName == null || !fileName.length) {\n            fileName = this.getDefaultFileName();\n        }\n        return fileName.indexOf('.') === -1 ? fileName + \".\" + extension : fileName;\n    };\n    BaseCreator.prototype.getMergedParamsAndData = function (userParams) {\n        var mergedParams = this.mergeDefaultParams(userParams);\n        var data = this.beans.gridSerializer.serialize(this.createSerializingSession(mergedParams), mergedParams);\n        return { mergedParams: mergedParams, data: data };\n    };\n    BaseCreator.prototype.mergeDefaultParams = function (userParams) {\n        var baseParams = this.getDefaultExportParams();\n        var params = {};\n        _.assign(params, baseParams);\n        _.assign(params, userParams);\n        return params;\n    };\n    return BaseCreator;\n}());\nexport { BaseCreator };\n","import { _ } from \"@ag-grid-community/core\";\nvar BaseGridSerializingSession = /** @class */ (function () {\n    function BaseGridSerializingSession(config) {\n        this.groupColumns = [];\n        var columnController = config.columnController, valueService = config.valueService, gridOptionsWrapper = config.gridOptionsWrapper, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, processGroupHeaderCallback = config.processGroupHeaderCallback, processRowGroupCallback = config.processRowGroupCallback;\n        this.columnController = columnController;\n        this.valueService = valueService;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.processCellCallback = processCellCallback;\n        this.processHeaderCallback = processHeaderCallback;\n        this.processGroupHeaderCallback = processGroupHeaderCallback;\n        this.processRowGroupCallback = processRowGroupCallback;\n    }\n    BaseGridSerializingSession.prototype.prepare = function (columnsToExport) {\n        this.groupColumns = _.filter(columnsToExport, function (col) { return !!col.getColDef().showRowGroup; });\n    };\n    BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {\n        var value = this.getHeaderName(this.processHeaderCallback, column);\n        return value != null ? value : '';\n    };\n    BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, accumulatedRowIndex, type, node) {\n        // we render the group summary text e.g. \"-> Parent -> Child\"...\n        var groupIndex = this.gridOptionsWrapper.isGroupMultiAutoColumn() ? node.rowGroupIndex : 0;\n        var renderGroupSummaryCell = \n        // on group rows\n        node && node.group\n            && (\n            // in the group column if groups appear in regular grid cells\n            index === groupIndex && this.groupColumns.indexOf(column) !== -1\n                // or the first cell in the row, if we're doing full width rows\n                || (index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnController.isPivotMode())));\n        var valueForCell;\n        if (renderGroupSummaryCell) {\n            valueForCell = this.createValueForGroupNode(node);\n        }\n        else {\n            valueForCell = this.valueService.getValue(column, node);\n        }\n        var value = this.processCell(accumulatedRowIndex, node, column, valueForCell, this.processCellCallback, type);\n        return value != null ? value : '';\n    };\n    BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {\n        if (callback) {\n            return callback({\n                column: column,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext()\n            });\n        }\n        return this.columnController.getDisplayNameForColumn(column, 'csv', true);\n    };\n    BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {\n        if (this.processRowGroupCallback) {\n            return this.processRowGroupCallback({\n                node: node,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n            });\n        }\n        var keys = [node.key];\n        if (!this.gridOptionsWrapper.isGroupMultiAutoColumn()) {\n            while (node.parent) {\n                node = node.parent;\n                keys.push(node.key);\n            }\n        }\n        return keys.reverse().join(' -> ');\n    };\n    BaseGridSerializingSession.prototype.processCell = function (accumulatedRowIndex, rowNode, column, value, processCellCallback, type) {\n        if (processCellCallback) {\n            return processCellCallback({\n                accumulatedRowIndex: accumulatedRowIndex,\n                column: column,\n                node: rowNode,\n                value: value,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n                type: type\n            });\n        }\n        return value != null ? value : '';\n    };\n    return BaseGridSerializingSession;\n}());\nexport { BaseGridSerializingSession };\n","var Downloader = /** @class */ (function () {\n    function Downloader() {\n    }\n    Downloader.download = function (fileName, content) {\n        var win = document.defaultView || window;\n        if (!win) {\n            console.warn('AG Grid: There is no `window` associated with the current `document`');\n            return;\n        }\n        // Internet Explorer\n        if (win.navigator.msSaveOrOpenBlob) {\n            win.navigator.msSaveOrOpenBlob(content, fileName);\n        }\n        else {\n            // Other Browsers\n            var element = document.createElement('a');\n            // @ts-ignore\n            var url_1 = win.URL.createObjectURL(content);\n            element.setAttribute('href', url_1);\n            element.setAttribute('download', fileName);\n            element.style.display = 'none';\n            document.body.appendChild(element);\n            element.dispatchEvent(new MouseEvent('click', {\n                bubbles: false,\n                cancelable: true,\n                view: win\n            }));\n            document.body.removeChild(element);\n            win.setTimeout(function () {\n                // @ts-ignore\n                win.URL.revokeObjectURL(url_1);\n            }, 0);\n        }\n    };\n    return Downloader;\n}());\nexport { Downloader };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Constants } from \"@ag-grid-community/core\";\nimport { BaseGridSerializingSession } from \"./baseGridSerializingSession\";\nvar LINE_SEPARATOR = '\\r\\n';\nvar CsvSerializingSession = /** @class */ (function (_super) {\n    __extends(CsvSerializingSession, _super);\n    function CsvSerializingSession(config) {\n        var _this = _super.call(this, config) || this;\n        _this.isFirstLine = true;\n        _this.result = '';\n        var suppressQuotes = config.suppressQuotes, columnSeparator = config.columnSeparator;\n        _this.suppressQuotes = suppressQuotes;\n        _this.columnSeparator = columnSeparator;\n        return _this;\n    }\n    CsvSerializingSession.prototype.addCustomContent = function (content) {\n        var _this = this;\n        if (!content) {\n            return;\n        }\n        if (typeof content === 'string') {\n            if (!/^\\s*\\n/.test(content)) {\n                this.beginNewLine();\n            }\n            // replace whatever newlines are supplied with the style we're using\n            content = content.replace(/\\r?\\n/g, LINE_SEPARATOR);\n            this.result += content;\n        }\n        else {\n            content.forEach(function (row) {\n                _this.beginNewLine();\n                row.forEach(function (cell, index) {\n                    if (index !== 0) {\n                        _this.result += _this.columnSeparator;\n                    }\n                    _this.result += _this.putInQuotes(cell.data.value || '');\n                    if (cell.mergeAcross) {\n                        _this.appendEmptyCells(cell.mergeAcross);\n                    }\n                });\n            });\n        }\n    };\n    CsvSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewHeaderGroupingRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function (header, index, span) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(header);\n        this.appendEmptyCells(span);\n    };\n    CsvSerializingSession.prototype.appendEmptyCells = function (count) {\n        for (var i = 1; i <= count; i++) {\n            this.result += this.columnSeparator + this.putInQuotes(\"\");\n        }\n    };\n    CsvSerializingSession.prototype.onNewHeaderRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewHeaderRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewHeaderRowColumn = function (column, index) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(this.extractHeaderValue(column));\n    };\n    CsvSerializingSession.prototype.onNewBodyRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewBodyRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewBodyRowColumn = function (column, index, node) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(this.extractRowCellValue(column, index, index, Constants.EXPORT_TYPE_CSV, node));\n    };\n    CsvSerializingSession.prototype.putInQuotes = function (value) {\n        if (this.suppressQuotes) {\n            return value;\n        }\n        if (value === null || value === undefined) {\n            return '\"\"';\n        }\n        var stringValue;\n        if (typeof value === 'string') {\n            stringValue = value;\n        }\n        else if (typeof value.toString === 'function') {\n            stringValue = value.toString();\n        }\n        else {\n            console.warn('unknown value type during csv conversion');\n            stringValue = '';\n        }\n        // replace each \" with \"\" (ie two sets of double quotes is how to do double quotes in csv)\n        var valueEscaped = stringValue.replace(/\"/g, \"\\\"\\\"\");\n        return '\"' + valueEscaped + '\"';\n    };\n    CsvSerializingSession.prototype.parse = function () {\n        return this.result;\n    };\n    CsvSerializingSession.prototype.beginNewLine = function () {\n        if (!this.isFirstLine) {\n            this.result += LINE_SEPARATOR;\n        }\n        this.isFirstLine = false;\n    };\n    return CsvSerializingSession;\n}(BaseGridSerializingSession));\nexport { CsvSerializingSession };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"@ag-grid-community/core\";\nimport { BaseCreator } from \"./baseCreator\";\nimport { Downloader } from \"./downloader\";\nimport { CsvSerializingSession } from \"./sessions/csvSerializingSession\";\nvar CsvCreator = /** @class */ (function (_super) {\n    __extends(CsvCreator, _super);\n    function CsvCreator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CsvCreator.prototype.postConstruct = function () {\n        this.setBeans({\n            gridSerializer: this.gridSerializer,\n            gridOptionsWrapper: this.gridOptionsWrapper\n        });\n    };\n    CsvCreator.prototype.getDefaultExportParams = function () {\n        return this.gridOptionsWrapper.getDefaultExportParams('csv');\n    };\n    CsvCreator.prototype.export = function (userParams) {\n        if (this.isExportSuppressed()) {\n            console.warn(\"ag-grid: Export cancelled. Export is not allowed as per your configuration.\");\n            return '';\n        }\n        var _a = this.getMergedParamsAndData(userParams), mergedParams = _a.mergedParams, data = _a.data;\n        var packagedFile = new Blob([\"\\ufeff\", data], {\n            // @ts-ignore\n            type: window.navigator.msSaveOrOpenBlob ? this.getMimeType() : 'octet/stream'\n        });\n        Downloader.download(this.getFileName(mergedParams.fileName), packagedFile);\n        return data;\n    };\n    CsvCreator.prototype.exportDataAsCsv = function (params) {\n        return this.export(params);\n    };\n    CsvCreator.prototype.getDataAsCsv = function (params) {\n        return this.getMergedParamsAndData(params).data;\n    };\n    CsvCreator.prototype.getMimeType = function () {\n        return 'text/csv;charset=utf-8;';\n    };\n    CsvCreator.prototype.getDefaultFileName = function () {\n        return 'export.csv';\n    };\n    CsvCreator.prototype.getDefaultFileExtension = function () {\n        return 'csv';\n    };\n    CsvCreator.prototype.createSerializingSession = function (params) {\n        var _a = this, columnController = _a.columnController, valueService = _a.valueService, gridOptionsWrapper = _a.gridOptionsWrapper;\n        var _b = params, processCellCallback = _b.processCellCallback, processHeaderCallback = _b.processHeaderCallback, processGroupHeaderCallback = _b.processGroupHeaderCallback, processRowGroupCallback = _b.processRowGroupCallback, suppressQuotes = _b.suppressQuotes, columnSeparator = _b.columnSeparator;\n        return new CsvSerializingSession({\n            columnController: columnController,\n            valueService: valueService,\n            gridOptionsWrapper: gridOptionsWrapper,\n            processCellCallback: processCellCallback || undefined,\n            processHeaderCallback: processHeaderCallback || undefined,\n            processGroupHeaderCallback: processGroupHeaderCallback || undefined,\n            processRowGroupCallback: processRowGroupCallback || undefined,\n            suppressQuotes: suppressQuotes || false,\n            columnSeparator: columnSeparator || ','\n        });\n    };\n    CsvCreator.prototype.isExportSuppressed = function () {\n        return this.gridOptionsWrapper.isSuppressCsvExport();\n    };\n    __decorate([\n        Autowired('columnController')\n    ], CsvCreator.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], CsvCreator.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('gridSerializer')\n    ], CsvCreator.prototype, \"gridSerializer\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], CsvCreator.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], CsvCreator.prototype, \"postConstruct\", null);\n    CsvCreator = __decorate([\n        Bean('csvCreator')\n    ], CsvCreator);\n    return CsvCreator;\n}(BaseCreator));\nexport { CsvCreator };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, ColumnGroup, Constants, GroupInstanceIdCreator } from \"@ag-grid-community/core\";\nexport var RowType;\n(function (RowType) {\n    RowType[RowType[\"HEADER_GROUPING\"] = 0] = \"HEADER_GROUPING\";\n    RowType[RowType[\"HEADER\"] = 1] = \"HEADER\";\n    RowType[RowType[\"BODY\"] = 2] = \"BODY\";\n})(RowType || (RowType = {}));\nvar GridSerializer = /** @class */ (function (_super) {\n    __extends(GridSerializer, _super);\n    function GridSerializer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GridSerializer.prototype.serialize = function (gridSerializingSession, params) {\n        if (params === void 0) { params = {}; }\n        var columnsToExport = this.getColumnsToExport(params.allColumns, params.columnKeys);\n        var serializeChain = _.compose(\n        // first pass, put in the header names of the cols\n        this.prepareSession(columnsToExport), this.prependContent(params), this.exportColumnGroups(params, columnsToExport), this.exportHeaders(params, columnsToExport), this.processPinnedTopRows(params, columnsToExport), this.processRows(params, columnsToExport), this.processPinnedBottomRows(params, columnsToExport), this.appendContent(params));\n        return serializeChain(gridSerializingSession).parse();\n    };\n    GridSerializer.prototype.processRow = function (gridSerializingSession, params, columnsToExport, node) {\n        var rowSkipper = params.shouldRowBeSkipped || (function () { return false; });\n        var gridOptionsWrapper = this.gridOptionsWrapper;\n        var context = gridOptionsWrapper.getContext();\n        var api = gridOptionsWrapper.getApi();\n        var columnApi = gridOptionsWrapper.getColumnApi();\n        var skipSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveSingleChildren();\n        var hideOpenParents = gridOptionsWrapper.isGroupHideOpenParents();\n        var skipLowestSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n        var isLeafNode = this.columnController.isPivotMode() ? node.leafGroup : !node.group;\n        var skipRowGroups = params.skipGroups || params.skipRowGroups;\n        var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;\n        var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);\n        if (skipRowGroups && params.skipGroups) {\n            _.doOnce(function () { return console.warn('AG Grid: Since v25.2 `skipGroups` has been renamed to `skipRowGroups`.'); }, 'gridSerializer-skipGroups');\n        }\n        if ((!isLeafNode && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents)) ||\n            (params.onlySelected && !node.isSelected()) ||\n            (params.skipPinnedTop && node.rowPinned === 'top') ||\n            (params.skipPinnedBottom && node.rowPinned === 'bottom')) {\n            return;\n        }\n        // if we are in pivotMode, then the grid will show the root node only\n        // if it's not a leaf group\n        var nodeIsRootNode = node.level === -1;\n        if (nodeIsRootNode && !node.leafGroup) {\n            return;\n        }\n        var shouldRowBeSkipped = rowSkipper({ node: node, api: api, context: context });\n        if (shouldRowBeSkipped) {\n            return;\n        }\n        var rowAccumulator = gridSerializingSession.onNewBodyRow();\n        columnsToExport.forEach(function (column, index) {\n            rowAccumulator.onColumn(column, index, node);\n        });\n        if (params.getCustomContentBelowRow) {\n            var content = params.getCustomContentBelowRow({ node: node, api: api, columnApi: columnApi, context: context });\n            if (content) {\n                gridSerializingSession.addCustomContent(content);\n            }\n        }\n    };\n    GridSerializer.prototype.appendContent = function (params) {\n        return function (gridSerializingSession) {\n            var appendContent = params.customFooter || params.appendContent;\n            if (appendContent) {\n                if (params.customFooter) {\n                    _.doOnce(function () { return console.warn('AG Grid: Since version 25.2.0 the `customFooter` param has been deprecated. Use `appendContent` instead.'); }, 'gridSerializer-customFooter');\n                }\n                gridSerializingSession.addCustomContent(appendContent);\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.prependContent = function (params) {\n        return function (gridSerializingSession) {\n            var prependContent = params.customHeader || params.prependContent;\n            if (prependContent) {\n                if (params.customHeader) {\n                    _.doOnce(function () { return console.warn('AG Grid: Since version 25.2.0 the `customHeader` param has been deprecated. Use `prependContent` instead.'); }, 'gridSerializer-customHeader');\n                }\n                gridSerializingSession.addCustomContent(prependContent);\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.prepareSession = function (columnsToExport) {\n        return function (gridSerializingSession) {\n            gridSerializingSession.prepare(columnsToExport);\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.exportColumnGroups = function (params, columnsToExport) {\n        var _this = this;\n        return function (gridSerializingSession) {\n            if (!params.skipColumnGroupHeaders) {\n                var groupInstanceIdCreator = new GroupInstanceIdCreator();\n                var displayedGroups = _this.displayedGroupCreator.createDisplayedGroups(columnsToExport, _this.columnController.getGridBalancedTree(), groupInstanceIdCreator, null);\n                _this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);\n            }\n            else if (params.columnGroups) {\n                _.doOnce(function () { return console.warn('AG Grid: Since v25.2 the `columnGroups` param has deprecated, and groups are exported by default.'); }, 'gridSerializer-columnGroups');\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.exportHeaders = function (params, columnsToExport) {\n        return function (gridSerializingSession) {\n            if (!params.skipHeader && !params.skipColumnHeaders) {\n                var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();\n                columnsToExport.forEach(function (column, index) {\n                    gridRowIterator_1.onColumn(column, index, undefined);\n                });\n            }\n            else if (params.skipHeader) {\n                _.doOnce(function () { return console.warn('AG Grid: Since v25.2 the `skipHeader` param has been renamed to `skipColumnHeaders`.'); }, 'gridSerializer-skipHeader');\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.processPinnedTopRows = function (params, columnsToExport) {\n        var _this = this;\n        return function (gridSerializingSession) {\n            var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);\n            _this.pinnedRowModel.forEachPinnedTopRow(processRow);\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.processRows = function (params, columnsToExport) {\n        var _this = this;\n        return function (gridSerializingSession) {\n            // when in pivot mode, we always render cols on screen, never 'all columns'\n            var rowModel = _this.rowModel;\n            var rowModelType = rowModel.getType();\n            var usingCsrm = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n            var usingSsrm = rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;\n            var onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;\n            var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);\n            if (_this.columnController.isPivotMode()) {\n                if (usingCsrm) {\n                    rowModel.forEachPivotNode(processRow);\n                }\n                else {\n                    // must be enterprise, so we can just loop through all the nodes\n                    rowModel.forEachNode(processRow);\n                }\n            }\n            else {\n                // onlySelectedAllPages: user doing pagination and wants selected items from\n                // other pages, so cannot use the standard row model as it won't have rows from\n                // other pages.\n                // onlySelectedNonStandardModel: if user wants selected in non standard row model\n                // (eg viewport) then again RowModel cannot be used, so need to use selected instead.\n                if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {\n                    var selectedNodes = _this.selectionController.getSelectedNodes();\n                    selectedNodes.forEach(processRow);\n                }\n                else {\n                    // here is everything else - including standard row model and selected. we don't use\n                    // the selection model even when just using selected, so that the result is the order\n                    // of the rows appearing on the screen.\n                    if (usingCsrm) {\n                        rowModel.forEachNodeAfterFilterAndSort(processRow);\n                    }\n                    else if (usingSsrm) {\n                        rowModel.forEachNodeAfterFilterAndSort(processRow);\n                    }\n                    else {\n                        rowModel.forEachNode(processRow);\n                    }\n                }\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.processPinnedBottomRows = function (params, columnsToExport) {\n        var _this = this;\n        return function (gridSerializingSession) {\n            var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);\n            _this.pinnedRowModel.forEachPinnedBottomRow(processRow);\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.getColumnsToExport = function (allColumns, columnKeys) {\n        if (allColumns === void 0) { allColumns = false; }\n        var isPivotMode = this.columnController.isPivotMode();\n        if (columnKeys && columnKeys.length) {\n            return this.columnController.getGridColumns(columnKeys);\n        }\n        if (allColumns && !isPivotMode) {\n            // add auto group column for tree data\n            var columns = this.gridOptionsWrapper.isTreeData()\n                ? this.columnController.getGridColumns([Constants.GROUP_AUTO_COLUMN_ID])\n                : [];\n            return columns.concat(this.columnController.getAllPrimaryColumns() || []);\n        }\n        return this.columnController.getAllDisplayedColumns();\n    };\n    GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession, processGroupHeaderCallback) {\n        var directChildrenHeaderGroups = [];\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            if (!columnGroup.getChildren) {\n                return;\n            }\n            columnGroup.getChildren().forEach(function (it) { return directChildrenHeaderGroups.push(it); });\n        });\n        if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {\n            this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);\n        }\n        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\n            this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);\n        }\n    };\n    GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups, processGroupHeaderCallback) {\n        var _this = this;\n        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();\n        var columnIndex = 0;\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            var name;\n            if (processGroupHeaderCallback) {\n                name = processGroupHeaderCallback({\n                    columnGroup: columnGroup,\n                    api: _this.gridOptionsWrapper.getApi(),\n                    columnApi: _this.gridOptionsWrapper.getColumnApi(),\n                    context: _this.gridOptionsWrapper.getContext()\n                });\n            }\n            else {\n                name = _this.columnController.getDisplayNameForColumnGroup(columnGroup, 'header');\n            }\n            gridRowIterator.onColumn(name || '', columnIndex++, columnGroup.getLeafColumns().length - 1);\n        });\n    };\n    __decorate([\n        Autowired('displayedGroupCreator')\n    ], GridSerializer.prototype, \"displayedGroupCreator\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], GridSerializer.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], GridSerializer.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('pinnedRowModel')\n    ], GridSerializer.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], GridSerializer.prototype, \"selectionController\", void 0);\n    GridSerializer = __decorate([\n        Bean(\"gridSerializer\")\n    ], GridSerializer);\n    return GridSerializer;\n}(BeanStub));\nexport { GridSerializer };\n","import { ModuleNames } from \"@ag-grid-community/core\";\nimport { CsvCreator } from \"./csvExport/csvCreator\";\nimport { GridSerializer } from \"./csvExport/gridSerializer\";\nexport var CsvExportModule = {\n    moduleName: ModuleNames.CsvExportModule,\n    beans: [CsvCreator, GridSerializer]\n};\n","var LINE_SEPARATOR = '\\r\\n';\nvar XmlFactory = /** @class */ (function () {\n    function XmlFactory() {\n    }\n    XmlFactory.createHeader = function (headerElement) {\n        if (headerElement === void 0) { headerElement = {}; }\n        var headerStart = '<?';\n        var headerEnd = '?>';\n        var keys = ['version'];\n        if (!headerElement.version) {\n            headerElement.version = \"1.0\";\n        }\n        if (headerElement.encoding) {\n            keys.push('encoding');\n        }\n        if (headerElement.standalone) {\n            keys.push('standalone');\n        }\n        var att = keys.map(function (key) { return key + \"=\\\"\" + headerElement[key] + \"\\\"\"; }).join(' ');\n        return headerStart + \"xml \" + att + \" \" + headerEnd;\n    };\n    XmlFactory.createXml = function (xmlElement, booleanTransformer) {\n        var _this = this;\n        var props = '';\n        if (xmlElement.properties) {\n            if (xmlElement.properties.prefixedAttributes) {\n                xmlElement.properties.prefixedAttributes.forEach(function (prefixedSet) {\n                    Object.keys(prefixedSet.map).forEach(function (key) {\n                        props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);\n                    });\n                });\n            }\n            if (xmlElement.properties.rawMap) {\n                Object.keys(xmlElement.properties.rawMap).forEach(function (key) {\n                    props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);\n                });\n            }\n        }\n        var result = '<' + xmlElement.name + props;\n        if (!xmlElement.children && xmlElement.textNode == null) {\n            return result + '/>' + LINE_SEPARATOR;\n        }\n        if (xmlElement.textNode != null) {\n            return result + '>' + xmlElement.textNode + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n        }\n        result += '>' + LINE_SEPARATOR;\n        if (xmlElement.children) {\n            xmlElement.children.forEach(function (it) {\n                result += _this.createXml(it, booleanTransformer);\n            });\n        }\n        return result + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n    };\n    XmlFactory.returnAttributeIfPopulated = function (key, value, booleanTransformer) {\n        if (!value && value !== '' && value !== 0) {\n            return '';\n        }\n        var xmlValue = value;\n        if ((typeof (value) === 'boolean')) {\n            if (booleanTransformer) {\n                xmlValue = booleanTransformer(value);\n            }\n        }\n        return \" \" + key + \"=\\\"\" + xmlValue + \"\\\"\";\n    };\n    return XmlFactory;\n}());\nexport { XmlFactory };\n","import { _ } from \"@ag-grid-community/core\";\n// table for crc calculation\n// from: https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references\nvar crcTable = new Uint32Array([\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,\n    0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,\n    0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,\n    0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\n    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,\n    0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,\n    0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,\n    0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,\n    0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,\n    0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,\n    0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\n    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,\n    0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,\n    0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,\n    0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,\n    0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,\n    0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,\n    0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,\n    0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,\n    0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,\n    0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,\n    0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\n    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,\n    0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,\n    0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,\n    0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,\n    0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\n    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d\n]);\nvar ZipContainer = /** @class */ (function () {\n    function ZipContainer() {\n    }\n    ZipContainer.addFolders = function (paths) {\n        paths.forEach(this.addFolder.bind(this));\n    };\n    ZipContainer.addFolder = function (path) {\n        this.folders.push({\n            path: path,\n            created: new Date(),\n            isBase64: false\n        });\n    };\n    ZipContainer.addFile = function (path, content, isBase64) {\n        if (isBase64 === void 0) { isBase64 = false; }\n        this.files.push({\n            path: path,\n            created: new Date(),\n            content: content,\n            isBase64: isBase64\n        });\n    };\n    ZipContainer.getContent = function (mimeType) {\n        if (mimeType === void 0) { mimeType = 'application/zip'; }\n        var textOutput = this.buildFileStream();\n        var uInt8Output = this.buildUint8Array(textOutput);\n        this.clearStream();\n        return new Blob([uInt8Output], { type: mimeType });\n    };\n    ZipContainer.clearStream = function () {\n        this.folders = [];\n        this.files = [];\n    };\n    ZipContainer.buildFileStream = function (fData) {\n        if (fData === void 0) { fData = ''; }\n        var totalFiles = this.folders.concat(this.files);\n        var len = totalFiles.length;\n        var foData = '';\n        var lL = 0;\n        var cL = 0;\n        for (var _i = 0, totalFiles_1 = totalFiles; _i < totalFiles_1.length; _i++) {\n            var currentFile = totalFiles_1[_i];\n            var _a = this.getHeader(currentFile, lL), fileHeader = _a.fileHeader, folderHeader = _a.folderHeader, content = _a.content;\n            lL += fileHeader.length + content.length;\n            cL += folderHeader.length;\n            fData += fileHeader + content;\n            foData += folderHeader;\n        }\n        var foEnd = this.buildFolderEnd(len, cL, lL);\n        return fData + foData + foEnd;\n    };\n    ZipContainer.getHeader = function (currentFile, offset) {\n        var content = currentFile.content, path = currentFile.path, created = currentFile.created, isBase64 = currentFile.isBase64;\n        var utf8_encode = _.utf8_encode, decToHex = _.decToHex;\n        var utfPath = utf8_encode(path);\n        var isUTF8 = utfPath !== path;\n        var time = this.convertTime(created);\n        var dt = this.convertDate(created);\n        var extraFields = '';\n        if (isUTF8) {\n            var uExtraFieldPath = decToHex(1, 1) + decToHex(this.getFromCrc32Table(utfPath), 4) + utfPath;\n            extraFields = \"\\x75\\x70\" + decToHex(uExtraFieldPath.length, 2) + uExtraFieldPath;\n        }\n        var _a = !content ? { size: 0, content: '' } : this.getConvertedContent(content, isBase64), size = _a.size, convertedContent = _a.content;\n        var header = '\\x0A\\x00' +\n            (isUTF8 ? '\\x00\\x08' : '\\x00\\x00') +\n            '\\x00\\x00' +\n            decToHex(time, 2) + // last modified time\n            decToHex(dt, 2) + // last modified date\n            decToHex(size ? this.getFromCrc32Table(convertedContent) : 0, 4) +\n            decToHex(size, 4) + // compressed size\n            decToHex(size, 4) + // uncompressed size\n            decToHex(utfPath.length, 2) + // file name length\n            decToHex(extraFields.length, 2); // extra field length\n        var fileHeader = 'PK\\x03\\x04' + header + utfPath + extraFields;\n        var folderHeader = 'PK\\x01\\x02' + // central header\n            '\\x14\\x00' +\n            header + // file header\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            (content ? '\\x00\\x00\\x00\\x00' : '\\x10\\x00\\x00\\x00') + // external file attributes\n            decToHex(offset, 4) + // relative offset of local header\n            utfPath + // file name\n            extraFields; // extra field\n        return { fileHeader: fileHeader, folderHeader: folderHeader, content: convertedContent || '' };\n    };\n    ZipContainer.getConvertedContent = function (content, isBase64) {\n        if (isBase64 === void 0) { isBase64 = false; }\n        if (isBase64) {\n            content = content.split(';base64,')[1];\n        }\n        content = isBase64 ? atob(content) : content;\n        return {\n            size: content.length,\n            content: content\n        };\n    };\n    ZipContainer.buildFolderEnd = function (tLen, cLen, lLen) {\n        var decToHex = _.decToHex;\n        return 'PK\\x05\\x06' + // central folder end\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            decToHex(tLen, 2) + // total number of entries in the central folder\n            decToHex(tLen, 2) + // total number of entries in the central folder\n            decToHex(cLen, 4) + // size of the central folder\n            decToHex(lLen, 4) + // central folder start offset\n            '\\x00\\x00';\n    };\n    ZipContainer.buildUint8Array = function (content) {\n        var uint8 = new Uint8Array(content.length);\n        for (var i = 0; i < uint8.length; i++) {\n            uint8[i] = content.charCodeAt(i);\n        }\n        return uint8;\n    };\n    ZipContainer.getFromCrc32Table = function (content) {\n        if (!content.length) {\n            return 0;\n        }\n        var size = content.length;\n        var iterable = new Uint8Array(size);\n        for (var i = 0; i < size; i++) {\n            iterable[i] = content.charCodeAt(i);\n        }\n        var crc = 0 ^ (-1);\n        var j = 0;\n        var k = 0;\n        var l = 0;\n        for (var i = 0; i < size; i++) {\n            j = iterable[i];\n            k = (crc ^ j) & 0xFF;\n            l = crcTable[k];\n            crc = (crc >>> 8) ^ l;\n        }\n        return crc ^ (-1);\n    };\n    ZipContainer.convertTime = function (date) {\n        var time = date.getHours();\n        time <<= 6;\n        time = time | date.getMinutes();\n        time <<= 5;\n        time = time | date.getSeconds() / 2;\n        return time;\n    };\n    ZipContainer.convertDate = function (date) {\n        var dt = date.getFullYear() - 1980;\n        dt <<= 4;\n        dt = dt | (date.getMonth() + 1);\n        dt <<= 5;\n        dt = dt | date.getDate();\n        return dt;\n    };\n    ZipContainer.folders = [];\n    ZipContainer.files = [];\n    return ZipContainer;\n}());\nexport { ZipContainer };\n","import { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { InfiniteRowModelModule } from '@ag-grid-community/infinite-row-model';\nimport { CsvExportModule } from '@ag-grid-community/csv-export';\nexport var AllCommunityModules = [ClientSideRowModelModule, InfiniteRowModelModule, CsvExportModule];\nexport * from \"@ag-grid-community/client-side-row-model\";\nexport * from \"@ag-grid-community/csv-export\";\nexport * from \"@ag-grid-community/infinite-row-model\";\nexport * from \"@ag-grid-community/core\";\n"],"sourceRoot":"webpack:///","file":"default-projects_ng-dialogs_src_app_shared_constants_default-grid-options_constants_ts-node_m-d43c44.89738cfb83abee6b.js"}