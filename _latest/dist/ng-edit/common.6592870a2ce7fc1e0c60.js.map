{"version":3,"sources":["./projects/ng-dialogs/src/app/app-administration/ag-grid-components/analyze-settings-value/analyze-settings-value.component.ts","./projects/ng-dialogs/src/app/app-administration/ag-grid-components/analyze-settings-value/analyze-settings-value.component.html","./projects/ng-dialogs/src/app/content-export/content-export-dialog.config.ts","./projects/ng-dialogs/src/app/content-export/content-export-routing.module.ts","./projects/ng-dialogs/src/app/content-export/content-export.module.ts","./projects/ng-dialogs/src/app/content-import/content-import-dialog.config.ts","./projects/ng-dialogs/src/app/content-import/content-import-routing.module.ts","./projects/ng-dialogs/src/app/content-import/content-import.module.ts","./projects/ng-dialogs/src/app/content-import/services/content-import.service.ts","./projects/ng-dialogs/src/app/content-items/content-item-import/content-item-import-dialog.config.ts","./projects/ng-dialogs/src/app/content-items/content-items-dialog.config.ts","./projects/ng-dialogs/src/app/content-items/content-items-routing.module.ts","./projects/ng-dialogs/src/app/content-items/content-items.module.ts","./projects/ng-dialogs/src/app/content-type-fields/constants/data-type.constants.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.helpers.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields-dialog.config.ts","./projects/ng-dialogs/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields-dialog.config.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields-routing.module.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.module.ts","./projects/ng-dialogs/src/app/import-app/import-app-dialog.config.ts","./projects/ng-dialogs/src/app/import-app/import-app-routing.module.ts","./projects/ng-dialogs/src/app/import-app/import-app.module.ts","./projects/ng-dialogs/src/app/manage-content-list/services/content-group.service.ts","./projects/ng-dialogs/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/ng-dialogs/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts","./projects/ng-dialogs/src/app/shared/directives/drag-and-drop.directive.ts","./projects/ng-dialogs/src/app/shared/directives/mousedown-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/helpers/load-scripts.helper.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-resource-url.ts"],"names":["snackBar","agInit","params","this","value","refresh","copy","open","duration","AnalyzeSettingsValueComponent","contentExportDialog","name","initContext","panelSize","panelClass","getComponent","routes","path","component","data","dialog","ContentExportRoutingModule","ContentExportModule","contentImportDialog","ContentImportRoutingModule","ContentImportModule","http","context","dnnContext","evaluateContent","formValues","file","pipe","fileBase64","requestData","AppId","appId","toString","DefaultLanguage","defaultLanguage","ContentType","contentType","ContentBase64","ResourcesReferences","resourcesReferences","ClearEntities","clearEntities","post","$2sxc","apiUrl","result","Success","Errors","Detail","importContent","ContentImportService","contentItemImportDialog","contentItemsDialog","children","loadChildren","then","m","title","matcher","EditModule","RefreshEditModule","ContentItemsRoutingModule","ContentItemsModule","DataTypeConstants","Boolean","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","calculateTypeIcon","typeName","contentTypeFieldsDialog","editContentTypeFieldsDialog","ContentTypeFieldsRoutingModule","ContentTypeFieldsModule","importAppDialog","ImportAppRoutingModule","ImportAppModule","getItems","item","get","webApiContentGroup","guid","part","index","saveItem","entityId","id","add","getList","contentGroup","saveList","resortedList","getHeader","ContentGroupService","filter","isFilterActive","doesFilterPass","valueGetter","node","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","BooleanFilterComponent","isError","isShort","toggleIsShort","FieldHintComponent","elementRef","zone","markStyle","allowedFileTypes","filesDropped","dropAreaClass","dragClass","timeouts","subscription","element","nativeElement","ngOnInit","markStyleClass","classList","runOutsideAngular","subscribe","event","preventDefault","stopPropagation","clearTimeouts","push","window","setTimeout","remove","ngOnDestroy","unsubscribe","onDrop","files","Array","from","dataTransfer","filterTypes","length","emit","clearTimeout","allowedTypes","split","map","type","toLocaleLowerCase","filtered","extIndex","lastIndexOf","ext","substring","includes","allowedTypesString","replace","DragAndDropDirective","onMousedown","MousedownStopPropagationDirective","loadScripts","scriptObjects","callback","iteration","newCallback","bind","scrObj","global","test","w","require","src","exportedVar","sanitizer","transform","resourceUrl","bypassSecurityTrustResourceUrl","SafeResourceUrlPipe"],"mappings":"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","file":"common.6592870a2ce7fc1e0c60.js","sourcesContent":["import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../../shared/helpers/copy-to-clipboard.helper';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings-value',\r\n  templateUrl: './analyze-settings-value.component.html',\r\n  styleUrls: ['./analyze-settings-value.component.scss'],\r\n})\r\nexport class AnalyzeSettingsValueComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.value);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"value-box highlight\" [tippy]=\"value\" (click)=\"copy()\">\r\n  <span class=\"value\">{{ value }}</span>\r\n</div>\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentExportDialog: DialogConfig = {\r\n  name: 'EXPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentExportComponent } = await import('./content-export.component');\r\n    return ContentExportComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentExportDialog } from './content-export-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: contentExportDialog } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentExportRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentExportRoutingModule } from './content-export-routing.module';\r\nimport { ContentExportComponent } from './content-export.component';\r\nimport { ContentExportService } from './services/content-export.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentExportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentExportRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentExportService,\r\n    AppDialogConfigService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentExportModule { }\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentImportDialog: DialogConfig = {\r\n  name: 'IMPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentImportComponent } = await import('./content-import.component');\r\n    return ContentImportComponent;\r\n  }\r\n};\r\n\r\nexport interface ContentImportDialogData {\r\n  files?: File[];\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentImportDialog } from './content-import-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: contentImportDialog } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentImportRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentImportRoutingModule } from './content-import-routing.module';\r\nimport { ContentImportComponent } from './content-import.component';\r\nimport { ContentImportService } from './services/content-import.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentImportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentImportRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentImportService,\r\n    AppDialogConfigService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentImportModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentImport, EvaluateContentResult, ImportContentRequest, ImportContentResult } from '../models/content-import.model';\r\n\r\n@Injectable()\r\nexport class ContentImportService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  evaluateContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<EvaluateContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlPreview'), requestData).pipe(\r\n          map(result => {\r\n            if (!result.Success) {\r\n              result.Errors = result.Detail as any;\r\n              delete result.Detail;\r\n            }\r\n            return result;\r\n          }),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  importContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<ImportContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlUpload'), requestData);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { DialogConfig } from '../../shared/models/dialog-config.model';\r\n\r\nexport const contentItemImportDialog: DialogConfig = {\r\n  name: 'IMPORT_CONTENT_ITEM_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentItemImportComponent } = await import('./content-item-import.component');\r\n    return ContentItemImportComponent;\r\n  }\r\n};\r\n\r\nexport interface ContentItemImportDialogData {\r\n  files?: File[];\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentItemsDialog: DialogConfig = {\r\n  name: 'CONTENT_ITEMS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentItemsComponent } = await import('./content-items.component');\r\n    return ContentItemsComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../../../../edit/edit.matcher';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentItemImportDialog } from './content-item-import/content-item-import-dialog.config';\r\nimport { contentItemsDialog } from './content-items-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: contentItemsDialog }, children: [\r\n      ...GoToMetadata.getRoutes(),\r\n      {\r\n        path: 'export/:contentTypeStaticName',\r\n        loadChildren: () => import('../content-export/content-export.module').then(m => m.ContentExportModule)\r\n      },\r\n      {\r\n        path: 'export/:contentTypeStaticName/:selectedIds',\r\n        loadChildren: () => import('../content-export/content-export.module').then(m => m.ContentExportModule)\r\n      },\r\n      { path: 'import', component: DialogEntryComponent, data: { dialog: contentItemImportDialog } },\r\n      {\r\n        path: ':contentTypeStaticName/import',\r\n        loadChildren: () => import('../content-import/content-import.module').then(m => m.ContentImportModule),\r\n        data: { title: 'Import Items' },\r\n      },\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n      {\r\n        matcher: refreshEdit,\r\n        loadChildren: () => import('../../../../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentItemsRoutingModule { }\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { EcoFabSpeedDialModule } from '@ecodev/fab-speed-dial';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { ContentItemImportComponent } from './content-item-import/content-item-import.component';\r\nimport { ContentItemsRoutingModule } from './content-items-routing.module';\r\nimport { ContentItemsComponent } from './content-items.component';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentItemsComponent,\r\n    PubMetaFilterComponent,\r\n    ContentItemsStatusComponent,\r\n    ContentItemsActionsComponent,\r\n    ContentItemsEntityComponent,\r\n    ContentItemImportComponent,\r\n    CreateMetadataDialogComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentItemsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    AgGridModule.withComponents([]),\r\n    FormsModule,\r\n    MatRadioModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatProgressSpinnerModule,\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n    EcoFabSpeedDialModule,\r\n    MatMenuModule,\r\n    ReactiveFormsModule,\r\n    MatSlideToggleModule,\r\n    MatBadgeModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentItemsService,\r\n    EntitiesService,\r\n    ContentExportService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentItemsModule { }\r\n","export const DataTypeConstants = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const;\r\n\r\nexport type DataTypeConstant = typeof DataTypeConstants[keyof typeof DataTypeConstants];\r\n","import { DataTypeConstants } from './constants/data-type.constants';\r\n\r\nexport function calculateTypeIcon(typeName: string): string {\r\n  const typeIconMap: Record<string, string> = {\r\n    [DataTypeConstants.Boolean]: 'toggle_on',\r\n    [DataTypeConstants.Custom]: 'extension',\r\n    [DataTypeConstants.DateTime]: 'today',\r\n    [DataTypeConstants.Empty]: 'crop_free',\r\n    [DataTypeConstants.Entity]: 'share',\r\n    [DataTypeConstants.Hyperlink]: 'link',\r\n    [DataTypeConstants.Number]: 'dialpad',\r\n    [DataTypeConstants.String]: 'text_fields',\r\n  };\r\n  return typeIconMap[typeName] ?? 'device_unknown';\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentTypeFieldsDialog: DialogConfig = {\r\n  name: 'CONTENT_TYPE_FIELDS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentTypeFieldsComponent } = await import('./content-type-fields.component');\r\n    return ContentTypeFieldsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../shared/models/dialog-config.model';\r\n\r\nexport const editContentTypeFieldsDialog: DialogConfig = {\r\n  name: 'EDIT_CONTENT_TYPE_FIELDS_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { EditContentTypeFieldsComponent } = await import('./edit-content-type-fields.component');\r\n    return EditContentTypeFieldsComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../../../../edit/edit.matcher';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentTypeFieldsDialog } from './content-type-fields-dialog.config';\r\nimport { editContentTypeFieldsDialog } from './edit-content-type-fields/edit-content-type-fields-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: contentTypeFieldsDialog }, children: [\r\n      { path: 'add/:contentTypeStaticName', component: DialogEntryComponent, data: { dialog: editContentTypeFieldsDialog } },\r\n      {\r\n        path: 'update/:contentTypeStaticName/:id/:editMode',\r\n        component: DialogEntryComponent,\r\n        data: { dialog: editContentTypeFieldsDialog },\r\n      },\r\n      GoToPermissions.route,\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n      {\r\n        matcher: refreshEdit,\r\n        loadChildren: () => import('../../../../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentTypeFieldsRoutingModule { }\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentTypeFieldsActionsComponent } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsInputTypeComponent } from './ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsSpecialComponent } from './ag-grid-components/content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './ag-grid-components/content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTypeComponent } from './ag-grid-components/content-type-fields-type/content-type-fields-type.component';\r\nimport { ContentTypeFieldsRoutingModule } from './content-type-fields-routing.module';\r\nimport { ContentTypeFieldsComponent } from './content-type-fields.component';\r\nimport { EditContentTypeFieldsComponent } from './edit-content-type-fields/edit-content-type-fields.component';\r\nimport { ReservedNamesValidatorDirective } from './edit-content-type-fields/reserved-names.directive';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentTypeFieldsComponent,\r\n    ContentTypeFieldsTitleComponent,\r\n    ContentTypeFieldsInputTypeComponent,\r\n    ContentTypeFieldsActionsComponent,\r\n    EditContentTypeFieldsComponent,\r\n    ContentTypeFieldsTypeComponent,\r\n    ContentTypeFieldsSpecialComponent,\r\n    ReservedNamesValidatorDirective,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentTypeFieldsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    AgGridModule.withComponents([]),\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n    MatMenuModule,\r\n    MatBadgeModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentTypesService,\r\n    ContentTypesFieldsService,\r\n  ]\r\n})\r\nexport class ContentTypeFieldsModule { }\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const importAppDialog: DialogConfig = {\r\n  name: 'IMPORT_APP_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ImportAppComponent } = await import('./import-app.component');\r\n    return ImportAppComponent;\r\n  }\r\n};\r\n\r\nexport interface ImportAppDialogData {\r\n  files?: File[];\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { importAppDialog } from './import-app-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: importAppDialog } }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ImportAppRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ImportAppRoutingModule } from './import-app-routing.module';\r\nimport { ImportAppComponent } from './import-app.component';\r\nimport { ImportAppService } from './services/import-app.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ImportAppComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ImportAppRoutingModule,\r\n    SharedComponentsModule,\r\n    MatProgressSpinnerModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ImportAppService,\r\n  ]\r\n})\r\nexport class ImportAppModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ReplaceConfig } from '../../replace-content/models/replace-config.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentGroup, ContentGroupAdd } from '../models/content-group.model';\r\nimport { GroupHeader } from '../models/group-header.model';\r\n\r\nconst webApiContentGroup = 'cms/contentgroup/';\r\n\r\n@Injectable()\r\nexport class ContentGroupService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getItems(item: ContentGroup) {\r\n    return this.http.get<ReplaceConfig>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'replace'), {\r\n      params: { appId: this.context.appId.toString(), guid: item.guid, part: item.part, index: item.index.toString() }\r\n    });\r\n  }\r\n\r\n  saveItem(item: ContentGroupAdd) {\r\n    return this.http.post<null>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'replace'), {}, {\r\n      params: { guid: item.guid, part: item.part, index: item.index.toString(), entityId: item.id.toString(), add: `${item.add}` }\r\n    });\r\n  }\r\n\r\n  getList(contentGroup: ContentGroup) {\r\n    return this.http.get<GroupHeader[]>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'itemlist'), {\r\n      params: { appId: this.context.appId.toString(), guid: contentGroup.guid, part: contentGroup.part }\r\n    });\r\n  }\r\n\r\n  saveList(contentGroup: ContentGroup, resortedList: GroupHeader[]) {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'itemlist'), resortedList, {\r\n      params: { appId: this.context.appId.toString(), guid: contentGroup.guid, part: contentGroup.part }\r\n    });\r\n  }\r\n\r\n  getHeader(contentGroup: ContentGroup) {\r\n    return this.http.get<GroupHeader>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'header'), {\r\n      params: { appId: this.context.appId.toString(), guid: contentGroup.guid }\r\n    });\r\n  }\r\n}\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const value: boolean = this.params.valueGetter(params.node);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\n\r\n@Directive({ selector: '[appDragAndDrop]' })\r\nexport class DragAndDropDirective implements OnInit, OnDestroy {\r\n  @Input() markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n  private subscription = new Subscription();\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appMousedownStopPropagation]' })\r\nexport class MousedownStopPropagationDirective {\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { EavWindow } from '../models/eav-window.model';\r\n\r\ndeclare const window: EavWindow;\r\n\r\nexport function loadScripts(scriptObjects: ScriptObject[], callback: () => void, iteration = 0) {\r\n  const isLast = scriptObjects.length === iteration + 1;\r\n  const newCallback = isLast ? callback : loadScripts.bind(this, scriptObjects, callback, iteration + 1);\r\n  const scrObj = scriptObjects[iteration];\r\n\r\n  const global = typeof scrObj.test === 'string' ? scrObj.test : null;\r\n  const test = typeof scrObj.test === 'function' ? scrObj.test : null;\r\n  const w = window as Record<string, any>;\r\n\r\n  if (global != null && !!w[global]) {\r\n    callback();\r\n    return;\r\n  }\r\n\r\n  if (test != null && test()) {\r\n    callback();\r\n    return;\r\n  }\r\n\r\n  window.require([scrObj.src], (exportedVar: any) => {\r\n    if (exportedVar && !w[global]) {\r\n      w[global] = exportedVar;\r\n    }\r\n    newCallback();\r\n  });\r\n}\r\n\r\nexport interface ScriptObject {\r\n  /** window.xxx or a function that returns a boolean */\r\n  test: string | (() => boolean);\r\n  src: string;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeResourceUrl' })\r\nexport class SafeResourceUrlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(resourceUrl: string) {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(resourceUrl);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}