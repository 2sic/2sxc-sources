{"version":3,"mappings":"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","names":["i0","ctx_r8","oxw","ctx_r13","ctx_r16","ctx_r18","ctx_r19","ctx_r20","SystemInfoComponent","constructor","zoneService","snackBar","dialogService","sxcInsightsService","this","ngOnInit","systemInfoSet$","BehaviorSubject","undefined","languages$","loading$","buildTemplateVars","getSystemInfo","getLanguages","ngOnDestroy","complete","copyToClipboard","text","open","duration","openSiteSettings","sitePrimaryApp","dialogSettings","Context","Site","PrimaryApp","openAppAdministration","ZoneId","AppId","openGlobalSettings","globalPrimaryApp","System","openInsights","window","$2sxc","http","apiUrl","activatePageLog","form","next","pageLogDuration","subscribe","res","document","activeElement","HTMLElement","blur","resetForm","error","systemInfoSet","languages","systemInfos$","pipe","map","label","value","EavVersion","Platform","PlatformVersion","Zones","toString","Fingerprint","siteInfos$","combineLatest","allLanguages","length","activeLanguages","filter","l","IsEnabled","SiteId","link","Apps","templateVars$","systemInfos","siteInfos","loading","selectors","ctx_r4","ctx_r6","AppsListActionsComponent","agInit","params","app","data","refresh","flushCache","onFlush","deleteApp","onDelete","AppsListShowComponent","AppsListComponent","router","route","appsListService","AllCommunityModules","Object","defaultGridOptions","columnDefs","headerName","field","width","headerClass","cellClass","split","cellRenderer","IdFieldComponent","sortable","valueGetter","Id","cellRendererParams","tooltipGetter","Guid","BooleanFilterComponent","IsHidden","flex","minWidth","sort","onCellClicked","event","openApp","Name","Thumbnail","Folder","Version","Items","pinned","flushApp","Subscription","fetchAppsList","refreshOnChildClosed","apps$","fabOpen$","subscription","unsubscribe","openChange","browseCatalog","createApp","navigate","relativeTo","firstChild","createInheritedApp","importApp","files","state","getAll","apps","result","prompt","delete","alert","confirm","add","events","NavigationEnd","startWith","snapshot","pairwise","hadChild","hasChild","ctx","SiteLanguagesStatusComponent","toggleLanguage","onEnabledToggle","SiteLanguagesComponent","Code","language","Culture","fetchLanguages","FeaturesListEnabledReasonComponent","feature","FeaturesListEnabledComponent","FeaturesStatusComponent","disabled","isDisabled","toggle","nextValue","onToggle","ctx_r7","FeatureDetailsDialogComponent","dialogData","dialogRef","closeDialog","close","MAT_DIALOG_DATA","_r3","ctx_r9","UploadLicenseDialogComponent","featuresConfigService","filesDropped","importFile","fileChange","target","upload","uploadLicense","info","Success","Message","panelClass","AgGridHeightDirective","elementRef","element","nativeElement","ngOnChanges","changes","itemsCount","style","height","headerHeight","maxRows","rowHeight","extraHeight","LicensesOrderPipe","transform","licenses","Array","isArray","a","b","Priority","pure","ActiveFeaturesCountPipe","license","Features","f","Enabled","ctx_r11","LicenseInfoComponent","dialog","viewContainerRef","changeDetectorRef","globalConfigService","getDebugEnabled$","NameId","showFeatureDetails","EnabledReason","expires","O","Expires","_a","startsWith","EnabledStored","disabled$","enabled","toggleFeature","fetchLicenses","distinctUntilChanged","t","gridRef","api","refreshCells","force","columns","licenses$","trackLicenses","index","retrieveLicense","openLicenseUpload","autoFocus","afterClosed","getLicenses","markForCheck","forkJoin","saveFeatures","FeatureGuid","timer","AgGridAngular","AppsManagementNavComponent","context","appDialogConfigService","zoneId","tabs","indexOf","url","path","tabIndex","fetchDialogSettings","dialogSettings$","changeTab","getDialogSettings","FieldHintComponent","toggleIsShort","isShort","id","align","tooltip","copy","ToggleDebugDirective","onClick","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","str","el","createElement","setAttribute","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange","SafeHtmlPipe","sanitizer","html","bypassSecurityTrustHtml"],"sources":["./projects/ng-dialogs/src/app/apps-management/system-info/system-info.component.html","./projects/ng-dialogs/src/app/apps-management/system-info/system-info.component.ts","./projects/ng-dialogs/src/app/apps-management/ag-grid-components/apps-list-actions/apps-list-actions.component.html","./projects/ng-dialogs/src/app/apps-management/ag-grid-components/apps-list-actions/apps-list-actions.component.ts","./projects/ng-dialogs/src/app/apps-management/ag-grid-components/apps-list-show/apps-list-show.component.html","./projects/ng-dialogs/src/app/apps-management/ag-grid-components/apps-list-show/apps-list-show.component.ts","./projects/ng-dialogs/src/app/apps-management/apps-list/apps-list.component.ts","./projects/ng-dialogs/src/app/apps-management/apps-list/apps-list.component.html","./projects/ng-dialogs/src/app/apps-management/ag-grid-components/site-languages-status/site-languages-status.component.ts","./projects/ng-dialogs/src/app/apps-management/ag-grid-components/site-languages-status/site-languages-status.component.html","./projects/ng-dialogs/src/app/apps-management/site-languages/site-languages.component.ts","./projects/ng-dialogs/src/app/apps-management/site-languages/site-languages.component.html","./projects/ng-dialogs/src/app/apps-management/ag-grid-components/features-list-enabled-reason/features-list-enabled-reason.component.ts","./projects/ng-dialogs/src/app/apps-management/ag-grid-components/features-list-enabled-reason/features-list-enabled-reason.component.html","./projects/ng-dialogs/src/app/apps-management/ag-grid-components/features-list-enabled/features-list-enabled.component.ts","./projects/ng-dialogs/src/app/apps-management/ag-grid-components/features-list-enabled/features-list-enabled.component.html","./projects/ng-dialogs/src/app/apps-management/ag-grid-components/features-status/features-status.component.ts","./projects/ng-dialogs/src/app/apps-management/ag-grid-components/features-status/features-status.component.html","./projects/ng-dialogs/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/ng-dialogs/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./projects/ng-dialogs/src/app/apps-management/licence-info/upload-license-dialog/upload-license-dialog.component.html","./projects/ng-dialogs/src/app/apps-management/licence-info/upload-license-dialog/upload-license-dialog.component.ts","./projects/ng-dialogs/src/app/apps-management/licence-info/ag-grid-height.directive.ts","./projects/ng-dialogs/src/app/apps-management/licence-info/licenses-order.pipe.ts","./projects/ng-dialogs/src/app/apps-management/licence-info/active-features-count.pipe.ts","./projects/ng-dialogs/src/app/apps-management/licence-info/license-info.component.html","./projects/ng-dialogs/src/app/apps-management/licence-info/license-info.component.ts","./projects/ng-dialogs/src/app/apps-management/apps-management-nav/apps-management-nav.component.html","./projects/ng-dialogs/src/app/apps-management/apps-management-nav/apps-management-nav.component.ts","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.html","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <div mat-card-avatar>\r\n        <mat-icon>settings_applications</mat-icon>\r\n      </div>\r\n      <mat-card-title>Platform</mat-card-title>\r\n      <mat-card-subtitle>What you are running</mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <div class=\"info-row\" *ngFor=\"let info of data.systemInfos\">\r\n        <div class=\"info-row__label\">{{ info.label }}</div>\r\n        <div class=\"info-row__value\">\r\n          <span [tippy]=\"info.value\" (click)=\"copyToClipboard(info.value)\">{{ info.value }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-content-separator\"></div>\r\n      <h4>Global Settings</h4>\r\n      <p>\r\n        This includes both pre-defined SystemSettings as well as custom Settings.\r\n        It will affect the entire Installation.\r\n        See <a href=\"http://r.2sxc.org/settings\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <div class=\"card-actions\">\r\n        <button mat-button (click)=\"openGlobalSettings()\">\r\n          <mat-icon>open_in_new</mat-icon>\r\n          <span>Open Global Settings</span>\r\n        </button>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <div mat-card-avatar>\r\n        <mat-icon>public</mat-icon>\r\n      </div>\r\n      <mat-card-title>This Site</mat-card-title>\r\n      <mat-card-subtitle>The current Site you're on</mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <div class=\"info-row\" *ngFor=\"let info of data.siteInfos\">\r\n        <div class=\"info-row__label\">{{ info.label }}</div>\r\n        <div class=\"info-row__value\">\r\n          <span [tippy]=\"info.value\" (click)=\"copyToClipboard(info.value)\">{{ info.value }}</span>\r\n          <a class=\"info-row__link\" *ngIf=\"info.link\" [routerLink]=\"info.link\">manage</a>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-content-separator\"></div>\r\n      <h4>Site Settings</h4>\r\n      <p>\r\n        This includes both pre-defined SystemSettings as well as custom Settings.\r\n        It will affect the entire Site / Portal.\r\n        See <a href=\"http://r.2sxc.org/settings\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <div class=\"card-actions\">\r\n        <button mat-button (click)=\"openSiteSettings()\">\r\n          <mat-icon>open_in_new</mat-icon>\r\n          <span>Open Site Settings</span>\r\n        </button>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <div mat-card-avatar>\r\n        <mat-icon>speed</mat-icon>\r\n      </div>\r\n      <mat-card-title>2sxc Insights</mat-card-title>\r\n      <mat-card-subtitle>See what's happening under the hood</mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <h4>2sxc Insights for Super Users</h4>\r\n      <p>\r\n        This is to access a special section to see what is really in the server memory.\r\n        It's intended for extensive debugging - see also\r\n        <a href=\"https://2sxc.org/en/blog/post/using-2sxc-insights\" target=\"_blank\">this blog post</a>.\r\n      </p>\r\n      <div class=\"card-actions\">\r\n        <button mat-button (click)=\"openInsights()\">\r\n          <mat-icon>open_in_new</mat-icon>\r\n          <span>Open 2sxc Insights</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"card-content-separator\"></div>\r\n      <h4>Activate Page Level Logging</h4>\r\n      <form #activateLogForm=\"ngForm\" class=\"activate-log-form\" (ngSubmit)=\"activatePageLog(activateLogForm)\">\r\n        <div>\r\n          This will place insights-logs in the HTML of the user output for users with ?debug=true in the url.\r\n          It can only be activated for short periods of time.\r\n        </div>\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Duration in Minutes</mat-label>\r\n          <input matInput type=\"number\" min=\"0\" required [pattern]=\"positiveWholeNumber\" [(ngModel)]=\"pageLogDuration\"\r\n            name=\"Duration\" #duration=\"ngModel\" [disabled]=\"data.loading\">\r\n        </mat-form-field>\r\n        <ng-container *ngIf=\"duration.touched && duration.errors\">\r\n          <app-field-hint *ngIf=\"duration.errors.pattern\" [isError]=\"true\">\r\n            Only positive whole numbers\r\n          </app-field-hint>\r\n        </ng-container>\r\n        <div class=\"form-actions\">\r\n          <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!activateLogForm.valid || data.loading\">\r\n            Activate\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </mat-card-content>\r\n  </mat-card>\r\n</ng-container>\r\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { DialogSettings } from '../../app-administration/models';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { SiteLanguage } from '../models/site-language.model';\r\nimport { SystemInfoSet } from '../models/system-info.model';\r\nimport { SxcInsightsService } from '../services/sxc-insights.service';\r\nimport { ZoneService } from '../services/zone.service';\r\nimport { InfoTemplate, SystemInfoTemplateVars } from './system-info.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-system-info',\r\n  templateUrl: './system-info.component.html',\r\n  styleUrls: ['./system-info.component.scss'],\r\n})\r\nexport class SystemInfoComponent implements OnInit, OnDestroy {\r\n  @Input() dialogSettings: DialogSettings;\r\n\r\n  pageLogDuration: number;\r\n  positiveWholeNumber = /^[1-9][0-9]*$/;\r\n  templateVars$: Observable<SystemInfoTemplateVars>;\r\n\r\n  private systemInfoSet$: BehaviorSubject<SystemInfoSet | undefined>;\r\n  private languages$: BehaviorSubject<SiteLanguage[] | undefined>;\r\n  private loading$: BehaviorSubject<boolean>;\r\n\r\n  constructor(\r\n    private zoneService: ZoneService,\r\n    private snackBar: MatSnackBar,\r\n    private dialogService: DialogService,\r\n    private sxcInsightsService: SxcInsightsService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.systemInfoSet$ = new BehaviorSubject<SystemInfoSet | undefined>(undefined);\r\n    this.languages$ = new BehaviorSubject<SiteLanguage[] | undefined>(undefined);\r\n    this.loading$ = new BehaviorSubject<boolean>(false);\r\n\r\n    this.buildTemplateVars();\r\n    this.getSystemInfo();\r\n    this.getLanguages();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.systemInfoSet$.complete();\r\n    this.languages$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  openSiteSettings(): void {\r\n    const sitePrimaryApp = this.dialogSettings.Context.Site.PrimaryApp;\r\n    this.dialogService.openAppAdministration(sitePrimaryApp.ZoneId, sitePrimaryApp.AppId, 'app');\r\n  }\r\n\r\n  openGlobalSettings(): void {\r\n    const globalPrimaryApp = this.dialogSettings.Context.System.PrimaryApp;\r\n    this.dialogService.openAppAdministration(globalPrimaryApp.ZoneId, globalPrimaryApp.AppId, 'app');\r\n  }\r\n\r\n  openInsights() {\r\n    window.open(window.$2sxc.http.apiUrl('sys/insights/help'), '_blank');\r\n  }\r\n\r\n  activatePageLog(form: NgForm) {\r\n    this.loading$.next(true);\r\n    this.snackBar.open('Activating...');\r\n    this.sxcInsightsService.activatePageLog(this.pageLogDuration).subscribe(res => {\r\n      this.loading$.next(false);\r\n      this.snackBar.open(res, null, { duration: 4000 });\r\n    });\r\n    if (document.activeElement instanceof HTMLElement) {\r\n      document.activeElement.blur();\r\n    }\r\n    form.resetForm();\r\n  }\r\n\r\n  private getSystemInfo(): void {\r\n    this.zoneService.getSystemInfo().subscribe({\r\n      error: () => {\r\n        this.systemInfoSet$.next(undefined);\r\n      },\r\n      next: (systemInfoSet) => {\r\n        this.systemInfoSet$.next(systemInfoSet);\r\n      },\r\n    });\r\n  }\r\n\r\n  private getLanguages(): void {\r\n    this.zoneService.getLanguages().subscribe({\r\n      error: () => {\r\n        this.languages$.next(undefined);\r\n      },\r\n      next: (languages) => {\r\n        this.languages$.next(languages);\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildTemplateVars(): void {\r\n    const systemInfos$ = this.systemInfoSet$.pipe(\r\n      map(systemInfoSet => {\r\n        if (systemInfoSet == null) { return; }\r\n        const info: InfoTemplate[] = [\r\n          { label: 'CMS', value: `2sxc v.${systemInfoSet.System.EavVersion}` },\r\n          { label: 'Platform', value: `${systemInfoSet.System.Platform} v.${systemInfoSet.System.PlatformVersion}` },\r\n          { label: 'Zones', value: systemInfoSet.System.Zones.toString() },\r\n          { label: 'Fingerprint', value: systemInfoSet.System.Fingerprint },\r\n        ];\r\n        return info;\r\n      })\r\n    );\r\n    const siteInfos$ = combineLatest([this.systemInfoSet$, this.languages$]).pipe(\r\n      map(([systemInfoSet, languages]) => {\r\n        if (systemInfoSet == null || languages == null) { return; }\r\n        const allLanguages = languages.length;\r\n        const activeLanguages = languages.filter(l => l.IsEnabled).length;\r\n        const info: InfoTemplate[] = [\r\n          { label: 'Zone', value: systemInfoSet.Site.ZoneId.toString() },\r\n          { label: 'Site', value: systemInfoSet.Site.SiteId.toString() },\r\n          {\r\n            label: 'Languages',\r\n            value: `${activeLanguages}/${allLanguages}`,\r\n            link: 'languages',\r\n          },\r\n          {\r\n            label: 'Apps',\r\n            value: systemInfoSet.Site.Apps.toString(),\r\n            link: 'list',\r\n          },\r\n        ];\r\n        return info;\r\n      })\r\n    );\r\n    this.templateVars$ = combineLatest([systemInfos$, siteInfos$, this.loading$]).pipe(\r\n      map(([systemInfos, siteInfos, loading]) => {\r\n        const templateVars: SystemInfoTemplateVars = {\r\n          systemInfos,\r\n          siteInfos,\r\n          loading,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button icon\"\r\n    [tippy]=\"app.IsGlobal ? 'This app is global' : app.IsInherited ? 'This app is inherited' : ''\"\r\n    [tippyDisabled]=\"!app.IsGlobal && !app.IsInherited\">\r\n    <mat-icon *ngIf=\"app.IsGlobal\">foundation</mat-icon>\r\n    <mat-icon *ngIf=\"app.IsInherited\">holiday_village</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item (click)=\"flushCache()\">\r\n      <mat-icon>cached</mat-icon>\r\n      <span>Flush cache</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"!app.IsApp\" (click)=\"deleteApp()\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { App } from '../../models/app.model';\r\nimport { AppsListActionsParams } from './apps-list-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-apps-list-actions',\r\n  templateUrl: './apps-list-actions.component.html',\r\n  styleUrls: ['./apps-list-actions.component.scss'],\r\n})\r\nexport class AppsListActionsComponent implements ICellRendererAngularComp {\r\n  app: App;\r\n  private params: AppsListActionsParams;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: AppsListActionsParams) {\r\n    this.params = params;\r\n    this.app = this.params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  flushCache() {\r\n    this.params.onFlush(this.app);\r\n  }\r\n\r\n  deleteApp() {\r\n    this.params.onDelete(this.app);\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon tippy=\"Show this app to users\" *ngIf=\"value\">visibility</mat-icon>\r\n  <mat-icon tippy=\"Don't show this app to users\" *ngIf=\"!value\">visibility_off</mat-icon>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-apps-list-show',\r\n  templateUrl: './apps-list-show.component.html',\r\n  styleUrls: ['./apps-list-show.component.scss'],\r\n})\r\nexport class AppsListShowComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { AllCommunityModules, GridOptions, ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { ImportAppDialogData } from '../../import-app/import-app-dialog.config';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { AppsListActionsComponent } from '../ag-grid-components/apps-list-actions/apps-list-actions.component';\r\nimport { AppsListActionsParams } from '../ag-grid-components/apps-list-actions/apps-list-actions.models';\r\nimport { AppsListShowComponent } from '../ag-grid-components/apps-list-show/apps-list-show.component';\r\nimport { App } from '../models/app.model';\r\nimport { AppsListService } from '../services/apps-list.service';\r\n\r\n@Component({\r\n  selector: 'app-apps-list',\r\n  templateUrl: './apps-list.component.html',\r\n  styleUrls: ['./apps-list.component.scss'],\r\n})\r\nexport class AppsListComponent implements OnInit, OnDestroy {\r\n  apps$ = new BehaviorSubject<App[]>(undefined);\r\n  fabOpen$ = new BehaviorSubject(false);\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    columnDefs: [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline'.split(' '),\r\n        cellRenderer: IdFieldComponent, sortable: true, filter: 'agNumberColumnFilter',\r\n        valueGetter: (params) => (params.data as App).Id,\r\n        cellRendererParams: {\r\n          tooltipGetter: (app: App) => `ID: ${app.Id}\\nGUID: ${app.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        field: 'Show', width: 70, headerClass: 'dense', cellClass: 'icons no-outline'.split(' '), sortable: true,\r\n        filter: BooleanFilterComponent, cellRenderer: AppsListShowComponent, valueGetter: (params) => !(params.data as App).IsHidden,\r\n      },\r\n      {\r\n        field: 'Name', flex: 2, minWidth: 250, cellClass: 'apps-list-primary-action highlight'.split(' '), sortable: true,\r\n        sort: 'asc', filter: 'agTextColumnFilter', onCellClicked: (event) => this.openApp(event.data as App),\r\n        valueGetter: (params) => (params.data as App).Name,\r\n        cellRenderer: (params: ICellRendererParams) => {\r\n          const app: App = params.data;\r\n          if (app.Thumbnail != null) {\r\n            return `\r\n            <div class=\"container\">\r\n              <img class=\"image logo\" src=\"${app.Thumbnail}?w=40&h=40&mode=crop\"></img>\r\n              <div class=\"text\">${params.value}</div>\r\n            </div>`;\r\n          } else {\r\n            return `\r\n            <div class=\"container\">\r\n              <div class=\"image logo\">\r\n                <span class=\"material-icons-outlined\">star_border</span>\r\n              </div>\r\n              <div class=\"text\">${params.value}</div>\r\n            </div>`;\r\n          }\r\n        },\r\n      },\r\n      {\r\n        field: 'Folder', flex: 2, minWidth: 250, cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter', valueGetter: (params) => (params.data as App).Folder,\r\n      },\r\n      {\r\n        field: 'Version', width: 78, headerClass: 'dense', cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter', valueGetter: (params) => (params.data as App).Version,\r\n      },\r\n      {\r\n        field: 'Items', width: 70, headerClass: 'dense', cellClass: 'number-cell no-outline'.split(' '), sortable: true,\r\n        filter: 'agNumberColumnFilter', valueGetter: (params) => (params.data as App).Items,\r\n      },\r\n      {\r\n        width: 82, cellClass: 'secondary-action no-padding'.split(' '), cellRenderer: AppsListActionsComponent, pinned: 'right',\r\n        cellRendererParams: {\r\n          onDelete: (app) => this.deleteApp(app),\r\n          onFlush: (app) => this.flushApp(app),\r\n        } as AppsListActionsParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private appsListService: AppsListService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchAppsList();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.apps$.complete();\r\n    this.fabOpen$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  openChange(open: boolean) {\r\n    this.fabOpen$.next(open);\r\n  }\r\n\r\n  browseCatalog() {\r\n    window.open('https://2sxc.org/apps', '_blank');\r\n  }\r\n\r\n  createApp() {\r\n    this.router.navigate(['create'], { relativeTo: this.route.firstChild });\r\n  }\r\n\r\n  createInheritedApp(): void {\r\n    this.router.navigate(['create-inherited'], { relativeTo: this.route.firstChild });\r\n  }\r\n\r\n  importApp(files?: File[]) {\r\n    const dialogData: ImportAppDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route.firstChild, state: dialogData });\r\n  }\r\n\r\n  private fetchAppsList() {\r\n    this.appsListService.getAll().subscribe(apps => {\r\n      this.apps$.next(apps);\r\n    });\r\n  }\r\n\r\n  private deleteApp(app: App) {\r\n    const result = prompt(`This cannot be undone. To really delete this app, type 'yes!' or type/paste the app-name here. Are you sure want to delete '${app.Name}' (${app.Id})?`);\r\n    if (result === null) { return; }\r\n    if (result === app.Name || result === 'yes!') {\r\n      this.snackBar.open('Deleting...');\r\n      this.appsListService.delete(app.Id).subscribe(() => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchAppsList();\r\n      });\r\n    } else {\r\n      alert('Input did not match - will not delete');\r\n    }\r\n  }\r\n\r\n  private flushApp(app: App) {\r\n    if (!confirm(`Flush the App Cache for ${app.Name} (${app.Id})?`)) { return; }\r\n    this.snackBar.open('Flushing cache...');\r\n    this.appsListService.flushCache(app.Id).subscribe(() => {\r\n      this.snackBar.open('Cache flushed', null, { duration: 2000 });\r\n    });\r\n  }\r\n\r\n  private openApp(app: App) {\r\n    this.router.navigate([app.Id.toString()], { relativeTo: this.route.firstChild });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchAppsList();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n  <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"apps$ | async\" [modules]=\"modules\" [gridOptions]=\"gridOptions\"\r\n    appDragAndDrop [allowedFileTypes]=\"'zip'\" (filesDropped)=\"importApp($event)\">\r\n  </ag-grid-angular>\r\n\r\n  <div class=\"grid-more-actions-box\"></div>\r\n\r\n  <eco-fab-speed-dial class=\"grid-fab\" [ngClass]=\"{ 'fab-opened': (fabOpen$ | async) }\"\r\n    (openChange)=\"openChange($event)\">\r\n    <eco-fab-speed-dial-trigger [spin]=\"true\">\r\n      <button mat-fab>\r\n        <mat-icon class=\"spin180\">{{ (fabOpen$ | async) ? 'close' : 'add' }}</mat-icon>\r\n      </button>\r\n    </eco-fab-speed-dial-trigger>\r\n\r\n    <eco-fab-speed-dial-actions>\r\n      <button mat-mini-fab label=\"Find more apps\" (click)=\"browseCatalog()\">\r\n        <mat-icon>search</mat-icon>\r\n      </button>\r\n      <button mat-mini-fab label=\"Create inherited app\" (click)=\"createInheritedApp()\">\r\n        <mat-icon>holiday_village</mat-icon>\r\n      </button>\r\n      <button mat-mini-fab label=\"Import app\" (click)=\"importApp()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n      </button>\r\n      <button mat-mini-fab label=\"Create app\" (click)=\"createApp()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </eco-fab-speed-dial-actions>\r\n  </eco-fab-speed-dial>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { SiteLanguage } from '../../models/site-language.model';\r\nimport { SiteLanguagesStatusParams } from './site-languages-status.models';\r\n\r\n@Component({\r\n  selector: 'app-site-languages-status',\r\n  templateUrl: './site-languages-status.component.html',\r\n  styleUrls: ['./site-languages-status.component.scss'],\r\n})\r\nexport class SiteLanguagesStatusComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n  private params: SiteLanguagesStatusParams;\r\n\r\n  agInit(params: SiteLanguagesStatusParams) {\r\n    this.params = params;\r\n    this.value = this.params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  toggleLanguage() {\r\n    const language: SiteLanguage = this.params.data;\r\n    this.params.onEnabledToggle(language);\r\n  }\r\n}\r\n","<mat-slide-toggle [checked]=\"value\" (change)=\"toggleLanguage()\"></mat-slide-toggle>\r\n","import { AllCommunityModules, GridOptions } from '@ag-grid-community/all-modules';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { SiteLanguagesStatusComponent } from '../ag-grid-components/site-languages-status/site-languages-status.component';\r\nimport { SiteLanguagesStatusParams } from '../ag-grid-components/site-languages-status/site-languages-status.models';\r\nimport { SiteLanguage } from '../models/site-language.model';\r\nimport { ZoneService } from '../services/zone.service';\r\n\r\n@Component({\r\n  selector: 'app-site-languages',\r\n  templateUrl: './site-languages.component.html',\r\n  styleUrls: ['./site-languages.component.scss'],\r\n})\r\nexport class SiteLanguagesComponent implements OnInit, OnDestroy {\r\n  languages$ = new BehaviorSubject<SiteLanguage[]>(undefined);\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    columnDefs: [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline'.split(' '),\r\n        cellRenderer: IdFieldComponent, sortable: true, filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => (params.data as SiteLanguage).Code,\r\n        cellRendererParams: {\r\n          tooltipGetter: (language: SiteLanguage) => `ID: ${language.Code}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        field: 'Name', flex: 2, minWidth: 250, cellClass: 'primary-action highlight no-outline'.split(' '), sortable: true,\r\n        sort: 'asc', filter: 'agTextColumnFilter', onCellClicked: (event) => this.toggleLanguage(event.data as SiteLanguage),\r\n        valueGetter: (params) => (params.data as SiteLanguage).Culture,\r\n      },\r\n      {\r\n        field: 'Status', width: 72, headerClass: 'dense', cellClass: 'no-padding no-outline'.split(' '),\r\n        cellRenderer: SiteLanguagesStatusComponent, sortable: true, filter: BooleanFilterComponent,\r\n        valueGetter: (params) => (params.data as SiteLanguage).IsEnabled,\r\n        cellRendererParams: {\r\n          onEnabledToggle: (language) => this.toggleLanguage(language),\r\n        } as SiteLanguagesStatusParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  constructor(private zoneService: ZoneService) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchLanguages();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.languages$.complete();\r\n  }\r\n\r\n  private toggleLanguage(language: SiteLanguage) {\r\n    this.zoneService.toggleLanguage(language.Code, !language.IsEnabled).subscribe(() => {\r\n      this.fetchLanguages();\r\n    });\r\n  }\r\n\r\n  private fetchLanguages() {\r\n    this.zoneService.getLanguages().subscribe(languages => {\r\n      this.languages$.next(languages);\r\n    });\r\n  }\r\n}\r\n","<div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n  <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"languages$ | async\" [modules]=\"modules\"\r\n    [gridOptions]=\"gridOptions\">\r\n  </ag-grid-angular>\r\n\r\n  <div class=\"grid-more-actions-box\"></div>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Feature } from '../../models/feature.model';\r\n\r\n@Component({\r\n  selector: 'app-features-list-enabled-reason',\r\n  templateUrl: './features-list-enabled-reason.component.html',\r\n  styleUrls: ['./features-list-enabled-reason.component.scss'],\r\n})\r\nexport class FeaturesListEnabledReasonComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n  feature: Feature;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.feature = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div [tippy]=\"feature.EnabledReasonDetailed\">{{ value }}</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-features-list-enabled',\r\n  templateUrl: './features-list-enabled.component.html',\r\n  styleUrls: ['./features-list-enabled.component.scss'],\r\n})\r\nexport class FeaturesListEnabledComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon>{{ value ? 'check_box' : 'check_box_outline_blank' }}</mat-icon>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { Feature } from '../../models/feature.model';\r\nimport { FeaturesStatusParams } from './features-status.models';\r\n\r\n@Component({\r\n  selector: 'app-features-status',\r\n  templateUrl: './features-status.component.html',\r\n  styleUrls: ['./features-status.component.scss'],\r\n})\r\nexport class FeaturesStatusComponent implements ICellRendererAngularComp {\r\n  value: boolean | null;\r\n  disabled: boolean;\r\n  private params: FeaturesStatusParams;\r\n\r\n  agInit(params: FeaturesStatusParams) {\r\n    this.params = params;\r\n    this.value = this.params.value;\r\n    this.disabled = this.params.isDisabled();\r\n  }\r\n\r\n  refresh(params: FeaturesStatusParams): boolean {\r\n    this.disabled = this.params.isDisabled();\r\n    return true;\r\n  }\r\n\r\n  toggle() {\r\n    const feature: Feature = this.params.data;\r\n    let nextValue: boolean;\r\n    switch (this.value) {\r\n      case false:\r\n        nextValue = null;\r\n        break;\r\n      case null:\r\n        nextValue = true;\r\n        break;\r\n      case true:\r\n        nextValue = false;\r\n        break;\r\n    }\r\n    this.value = nextValue;\r\n    this.params.onToggle(feature, nextValue);\r\n  }\r\n}\r\n","<mat-slide-toggle [checked]=\"value\" [disabled]=\"disabled\" (change)=\"toggle()\" [ngClass]=\"{\r\n  'toggle-false': value === false,\r\n  'toggle-null': value === null\r\n  }\">\r\n</mat-slide-toggle>\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>{{ dialogData.feature.Name }}</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<p class=\"dialog-description\" [innerHtml]=\"dialogData.feature.Description | safeHtml\"></p>\r\n\r\n<div class=\"info-box\">\r\n  <div class=\"info-row\" *ngIf=\"dialogData.feature.NameId as id\">\r\n    <div class=\"info-row__label\">ID</div>\r\n    <div class=\"info-row__value click\">\r\n      <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"info-row\" *ngIf=\"dialogData.feature.Guid as guid\">\r\n    <div class=\"info-row__label\">GUID</div>\r\n    <div class=\"info-row__value click\">\r\n      <span [tippy]=\"guid\" (click)=\"copyToClipboard(guid)\">{{ guid }}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"info-row\"\r\n    *ngIf=\"(dialogData.feature.Security.Impact + ': ' + dialogData.feature.Security.Message) as security\">\r\n    <div class=\"info-row__label\">Security Rating</div>\r\n    <div class=\"info-row__value\">\r\n      <span>{{ security }}</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../../shared/helpers/copy-to-clipboard.helper';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-feature-details-dialog',\r\n  templateUrl: './feature-details-dialog.component.html',\r\n  styleUrls: ['./feature-details-dialog.component.scss']\r\n})\r\nexport class FeatureDetailsDialogComponent implements OnInit {\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: FeatureDetailsDialogData,\r\n    private dialogRef: MatDialogRef<FeatureDetailsDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div appDragAndDrop [allowedFileTypes]=\"'json'\" (filesDropped)=\"filesDropped($event)\" *ngIf=\"{\r\n  loading: loading$ | async\r\n} as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Upload license</div>\r\n  </div>\r\n\r\n  <mat-spinner *ngIf=\"data.loading\" mode=\"indeterminate\" diameter=\"20\" color=\"accent\"></mat-spinner>\r\n\r\n  <p class=\"dialog-description\"></p>\r\n\r\n  <div>\r\n    <button mat-raised-button tippy=\"Open file browser\" [disabled]=\"data.loading\" (click)=\"fileInput.click()\">\r\n      <span>{{ importFile?.name ?? 'Select or drop file' }}</span>\r\n    </button>\r\n    <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button mat-raised-button [disabled]=\"data.loading\" (click)=\"closeDialog()\">\r\n      Cancel\r\n    </button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"data.loading || !importFile\" (click)=\"upload()\">\r\n      Upload\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { FeaturesConfigService } from '../../services/features-config.service';\r\n\r\n@Component({\r\n  selector: 'app-upload-license-dialog',\r\n  templateUrl: './upload-license-dialog.component.html',\r\n  styleUrls: ['./upload-license-dialog.component.scss'],\r\n})\r\nexport class UploadLicenseDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  loading$ = new BehaviorSubject(false);\r\n  importFile: File;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<UploadLicenseDialogComponent>,\r\n    private featuresConfigService: FeaturesConfigService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.loading$.complete();\r\n  }\r\n\r\n  closeDialog(refresh?: boolean): void {\r\n    this.dialogRef.close(refresh);\r\n  }\r\n\r\n  filesDropped(files: File[]): void {\r\n    this.importFile = files[0];\r\n  }\r\n\r\n  fileChange(event: Event): void {\r\n    this.importFile = (event.target as HTMLInputElement).files[0];\r\n  }\r\n\r\n  upload(): void {\r\n    this.loading$.next(true);\r\n    this.snackBar.open('Uploading license...');\r\n    this.featuresConfigService.uploadLicense(this.importFile).subscribe({\r\n      error: () => {\r\n        this.loading$.next(false);\r\n        this.snackBar.open('Failed to upload license. Please check console for more information', undefined, { duration: 3000 });\r\n      },\r\n      next: (info) => {\r\n        const message = `License ${info.Success ? 'uploaded' : 'upload failed'}: ${info.Message}`;\r\n        const duration = info.Success ? 3000 : 10000;\r\n        const panelClass = info.Success ? undefined : 'snackbar-error';\r\n        this.snackBar.open(message, undefined, { duration, panelClass });\r\n        this.closeDialog(true);\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n@Directive({ selector: '[appAgGridHeight]' })\r\nexport class AgGridHeightDirective implements OnChanges {\r\n  @Input() itemsCount = 0;\r\n  @Input() headerHeight = 32;\r\n  @Input() rowHeight = 48;\r\n  @Input() maxRows = 100;\r\n\r\n  /** Fixes a bug where scrollbar appears when then is no overflow */\r\n  private extraHeight = 2;\r\n\r\n  private element: HTMLElement;\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.itemsCount != null) {\r\n      const rows = this.itemsCount === 0 ? 2 : this.itemsCount > this.maxRows ? this.maxRows : this.itemsCount;\r\n      this.element.style.height = `${this.headerHeight + rows * this.rowHeight + this.extraHeight}px`;\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { License } from '../models/license.model';\r\n\r\n@Pipe({ name: 'licensesOrder' })\r\nexport class LicensesOrderPipe implements PipeTransform {\r\n\r\n  transform(licenses: License[]): any {\r\n    if (!Array.isArray(licenses)) { return licenses; }\r\n\r\n    const sorted = [...licenses].sort((a: License, b: License) => {\r\n      if (a.Priority < b.Priority) {\r\n        return -1;\r\n      } else if (a.Priority > b.Priority) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return sorted;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { License } from '../models/license.model';\r\n\r\n@Pipe({ name: 'activeFeaturesCount' })\r\nexport class ActiveFeaturesCountPipe implements PipeTransform {\r\n\r\n  transform(license: License) {\r\n    return `${license.Features.filter(f => f.Enabled).length}/${license.Features.length}`;\r\n  }\r\n}\r\n","<mat-accordion multi *ngIf=\"licenses$ | async as licenses\">\r\n  <mat-expansion-panel #panel *ngFor=\"let license of licenses | licensesOrder; trackBy: trackLicenses\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        <mat-icon class=\"panel-icon\" [tippy]=\"license.IsEnabled ? 'License is active' : 'License is not active'\">\r\n          {{ license.IsEnabled ? 'check_circle_outline' : 'cancel' }}\r\n        </mat-icon>\r\n        <div>\r\n          <div class=\"panel-title\">\r\n            <span>{{ license.Name }}</span>\r\n            <span class=\"active-features-count\">{{ license | activeFeaturesCount }}</span>\r\n          </div>\r\n          <div class=\"panel-description\">{{ license.Description }}</div>\r\n        </div>\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n\r\n    <ng-container *ngIf=\"panel.expanded\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"license.Features\" [modules]=\"modules\"\r\n        [gridOptions]=\"gridOptions\" appAgGridHeight [itemsCount]=\"license.Features?.length\">\r\n      </ag-grid-angular>\r\n    </ng-container>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n\r\n<div class=\"actions-box\">\r\n  <button mat-button color=\"accent\" tippy=\"Retrieve licenses\" *ngIf=\"debugEnabled$ | async\" (click)=\"retrieveLicense()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n    <span>License</span>\r\n  </button>\r\n  <button mat-button color=\"accent\" tippy=\"Upload license\" *ngIf=\"debugEnabled$ | async\" (click)=\"openLicenseUpload()\">\r\n    <mat-icon>cloud_upload</mat-icon>\r\n    <span>License</span>\r\n  </button>\r\n</div>\r\n","import { AllCommunityModules, GridOptions } from '@ag-grid-community/all-modules';\r\nimport { AgGridAngular } from '@ag-grid-community/angular';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, distinctUntilChanged, forkJoin, Subscription, timer } from 'rxjs';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { FeaturesListEnabledReasonComponent } from '../ag-grid-components/features-list-enabled-reason/features-list-enabled-reason.component';\r\nimport { FeaturesListEnabledComponent } from '../ag-grid-components/features-list-enabled/features-list-enabled.component';\r\nimport { FeaturesStatusComponent } from '../ag-grid-components/features-status/features-status.component';\r\nimport { FeaturesStatusParams } from '../ag-grid-components/features-status/features-status.models';\r\nimport { Feature, FeatureState } from '../models/feature.model';\r\nimport { License } from '../models/license.model';\r\nimport { FeaturesConfigService } from '../services/features-config.service';\r\nimport { FeatureDetailsDialogComponent } from './feature-details-dialog/feature-details-dialog.component';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog/feature-details-dialog.models';\r\nimport { UploadLicenseDialogComponent } from './upload-license-dialog/upload-license-dialog.component';\r\n\r\n@Component({\r\n  selector: 'app-license-info',\r\n  templateUrl: './license-info.component.html',\r\n  styleUrls: ['./license-info.component.scss'],\r\n})\r\nexport class LicenseInfoComponent implements OnInit, OnDestroy {\r\n  @ViewChild(AgGridAngular) private gridRef: AgGridAngular;\r\n\r\n  licenses$ = new BehaviorSubject<License[]>(undefined);\r\n  disabled$ = new BehaviorSubject(false);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    columnDefs: [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 200, headerClass: 'dense', cellClass: 'id-action no-padding no-outline'.split(' '),\r\n        cellRenderer: IdFieldComponent, sortable: true, filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => (params.data as Feature).NameId,\r\n        cellRendererParams: {\r\n          tooltipGetter: (feature: Feature) => `NameId: ${feature.NameId}\\nGUID: ${feature.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        field: 'Name', flex: 3, minWidth: 250, cellClass: 'primary-action highlight'.split(' '), sortable: true, filter: 'agTextColumnFilter',\r\n        onCellClicked: (params) => this.showFeatureDetails(params.data as Feature),\r\n        valueGetter: (params) => (params.data as Feature).Name,\r\n      },\r\n      {\r\n        field: 'Enabled', width: 80, headerClass: 'dense', cellClass: 'no-outline',\r\n        sortable: true, filter: BooleanFilterComponent, cellRenderer: FeaturesListEnabledComponent,\r\n        valueGetter: (params) => (params.data as Feature).Enabled,\r\n      },\r\n      {\r\n        field: 'EnabledReason', headerName: 'Reason', flex: 1, minWidth: 150, cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter', cellRenderer: FeaturesListEnabledReasonComponent,\r\n        valueGetter: (params) => (params.data as Feature).EnabledReason,\r\n      },\r\n      {\r\n        field: 'Expires', width: 100, cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => {\r\n          const expires = (params.data as Feature).Expires?.split('T')[0];\r\n          if (expires.startsWith('9999')) { return 'never'; }\r\n          return expires;\r\n        },\r\n      },\r\n      {\r\n        field: 'Status', headerName: '', width: 62, cellClass: 'secondary-action no-outline no-padding'.split(' '), pinned: 'right',\r\n        cellRenderer: FeaturesStatusComponent,\r\n        valueGetter: (params) => (params.data as Feature).EnabledStored,\r\n        cellRendererParams: {\r\n          isDisabled: () => this.disabled$.value,\r\n          onToggle: (feature, enabled) => this.toggleFeature(feature, enabled),\r\n        } as FeaturesStatusParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private featuresConfigService: FeaturesConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private globalConfigService: GlobalConfigService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.fetchLicenses();\r\n    this.subscription.add(\r\n      this.disabled$.pipe(distinctUntilChanged()).subscribe(() => {\r\n        this.gridRef?.api.refreshCells({ force: true, columns: ['Status'] });\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.licenses$.complete();\r\n    this.disabled$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  trackLicenses(index: number, license: License): string {\r\n    return license.Guid;\r\n  }\r\n\r\n  retrieveLicense(): void {\r\n    this.featuresConfigService.retrieveLicense().subscribe(info => {\r\n      const message = `License ${info.Success ? 'Info' : 'Error'}: ${info.Message}`;\r\n      const duration = info.Success ? 3000 : 100000;\r\n      const panelClass = info.Success ? undefined : 'snackbar-error';\r\n      this.snackBar.open(message, undefined, { duration, panelClass });\r\n    });\r\n  }\r\n\r\n  openLicenseUpload(): void {\r\n    const dialogRef = this.dialog.open(UploadLicenseDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    dialogRef.afterClosed().subscribe((refresh?: boolean) => {\r\n      if (refresh) {\r\n        this.fetchLicenses();\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchLicenses(): void {\r\n    this.featuresConfigService.getLicenses().subscribe({\r\n      error: () => {\r\n        this.licenses$.next(undefined);\r\n        this.disabled$.next(false);\r\n      },\r\n      next: (licenses) => {\r\n        this.licenses$.next(licenses);\r\n        this.disabled$.next(false);\r\n      },\r\n    });\r\n  }\r\n\r\n  private showFeatureDetails(feature: Feature): void {\r\n    const data: FeatureDetailsDialogData = {\r\n      feature,\r\n    };\r\n    this.dialog.open(FeatureDetailsDialogComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private toggleFeature(feature: Feature, enabled: boolean): void {\r\n    this.disabled$.next(true);\r\n    const state: FeatureState = {\r\n      FeatureGuid: feature.Guid,\r\n      Enabled: enabled,\r\n    };\r\n    forkJoin([this.featuresConfigService.saveFeatures([state]), timer(100)]).subscribe(() => {\r\n      this.fetchLicenses();\r\n    });\r\n  }\r\n}\r\n","<div class=\"nav-component-wrapper\" appToggleDebug>\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Manage Zone {{ zoneId }}</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <!-- spm NOTE: we use mat-tab-group because mat-tab-nav-bar doesn't have animations and doesn't look pretty -->\r\n  <mat-tab-group class=\"mat-tab-group-max-height\" dynamicHeight color=\"accent\"\r\n    *ngIf=\"dialogSettings$ | async as dialogSettings\" (selectedTabChange)=\"changeTab($event)\"\r\n    [selectedIndex]=\"tabIndex$ | async\">\r\n    <mat-tab>\r\n      <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"System Info\">\r\n        <mat-icon>settings</mat-icon>\r\n        <span>System</span>\r\n      </div>\r\n      <app-system-info *matTabContent [dialogSettings]=\"dialogSettings\"></app-system-info>\r\n    </mat-tab>\r\n\r\n    <mat-tab>\r\n      <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Apps\">\r\n        <mat-icon>star_border</mat-icon>\r\n        <span>Apps</span>\r\n      </div>\r\n      <app-apps-list *matTabContent></app-apps-list>\r\n    </mat-tab>\r\n\r\n    <mat-tab>\r\n      <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Languages\">\r\n        <mat-icon>translate</mat-icon>\r\n        <span>Languages</span>\r\n      </div>\r\n      <app-site-languages *matTabContent></app-site-languages>\r\n    </mat-tab>\r\n\r\n    <mat-tab>\r\n      <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Extensions and Features\">\r\n        <mat-icon>tune</mat-icon>\r\n        <span>Extensions / Features</span>\r\n      </div>\r\n      <app-license-info *matTabContent></app-license-info>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n</div>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatTabChangeEvent } from '@angular/material/tabs';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { DialogSettings } from '../../app-administration/models';\r\nimport { AppDialogConfigService } from '../../app-administration/services';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Component({\r\n  selector: 'app-apps-management-nav',\r\n  templateUrl: './apps-management-nav.component.html',\r\n  styleUrls: ['./apps-management-nav.component.scss'],\r\n})\r\nexport class AppsManagementNavComponent implements OnInit, OnDestroy {\r\n  zoneId = this.context.zoneId;\r\n  dialogSettings$ = new BehaviorSubject<DialogSettings>(undefined);\r\n\r\n  private tabs = ['system', 'list', 'languages', 'license']; // tabs order has to match template\r\n  tabIndex$ = this.router.events.pipe(\r\n    filter(event => event instanceof NavigationEnd),\r\n    map(() => this.tabs.indexOf(this.route.snapshot.firstChild.url[0].path)),\r\n    filter(tabIndex => tabIndex >= 0),\r\n    startWith(this.tabs.indexOf(this.route.snapshot.firstChild.url[0].path)),\r\n  );\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AppsManagementNavComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchDialogSettings();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogSettings$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  changeTab(event: MatTabChangeEvent) {\r\n    const path = this.tabs[event.index];\r\n    this.router.navigate([path], { relativeTo: this.route });\r\n  }\r\n\r\n  private fetchDialogSettings() {\r\n    this.appDialogConfigService.getDialogSettings(0).subscribe(dialogSettings => {\r\n      this.dialogSettings$.next(dialogSettings);\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchDialogSettings();\r\n      })\r\n    );\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: IdFieldParams) {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_apps-management_apps-management-nav_apps-management-nav_component_ts.102bd41813f7d628.js"}