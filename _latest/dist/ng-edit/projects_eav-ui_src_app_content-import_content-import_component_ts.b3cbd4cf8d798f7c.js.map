{"version":3,"file":"projects_eav-ui_src_app_content-import_content-import_component_ts.b3cbd4cf8d798f7c.js","mappings":"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","names":["AppDialogConfigService","ServiceBase","constructor","http","context","globalConfigService","featuresService","super","EavLogger","this","dialogSettings$","log","a","svcId","loadFromService","ngOnDestroy","destroy","getCurrent$","appId","getShared$","getSitePrimaryApp$","pipe","map","dc","Context","Site","PrimaryApp","getGlobalPrimaryApp$","System","getDialogSettings","shareReplay","refCount","reqBy","get","params","toString","dlgSettings","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","static","t","i0","i1","i2","i3","i4","_angular_core__WEBPACK_IMPORTED_MODULE_8__","jDH","factory","ɵfac","webApiTypeRoot","webApiTypeScopes","ContentTypesService","dnnContext","apiUrl","name","$2sxc","retrieveContentType","staticName","contentTypeId","retrieveContentTypes","scope","getScopes","scopesData","scopes","old","Object","keys","key","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ContentImportService","evaluateContent","formValues","from","toBase64","switchMap","fileBase64","requestData","AppId","DefaultLanguage","defaultLanguage","ContentType","ContentBase64","ResourcesReferences","resourcesReferences","ClearEntities","clearEntities","webApiEntityRoot","result","Success","Errors","Detail","importContent","core","_r3","fileInput_r4","click","$event","ctx_r1","fileChange","closeDialog","vm_r6","evaluationResult","DocumentElementsCount","LanguagesInDocumentCount","AttributeNamesInDocument","length","join","AmountOfEntitiesCreated","AmountOfEntitiesUpdated","AmountOfEntitiesDeleted","AttributeNamesNotImported","error_r7","ErrorDetail","LineNumber","LineDetail","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_3_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_4_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_5_Template","errors","ErrorCode","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_0_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_Template","_r5","back","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_3_Conditional_0_Conditional_1_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_3_Conditional_0_Conditional_2_Template","importResult","ContentImportComponent_Conditional_0_Conditional_10_Case_3_Conditional_0_Template","_r8","ContentImportComponent_Conditional_0_Conditional_10_Case_0_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_1_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_3_Template","tmp_3_0","viewStateSelected","_r1","filesDropped","ContentImportComponent_Conditional_0_Conditional_10_Template","Name","ContentImportComponent","dialogData","dialogRef","route","hostClass","contentImportService","transient","contentTypesService","appDialogConfigService","contentType$","BehaviorSubject","loading$","viewStates","waiting","default","evaluated","imported","viewStateSelected$","evaluationResult$","importResult$","viewModel$","combineLatest","loading","contentTypeStaticName","snapshot","paramMap","ngOnInit","next","forkJoin","subscribe","dialogSettings","Primary","complete","close","event","target","MAT_DIALOG_DATA","VBU","selectors","hostVars","hostBindings","rf","ctx","ContentImportComponent_Conditional_0_Template","tmp_0_0","FormsModule","MatButtonModule","MatRadioModule","i5","MatDialogActions","AsyncPipe","DragAndDropDirective","styles","BaseDirective","subscriptions","Subscription","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__","FsC","elementRef","zone","snackBar","markStyle","allowedFileTypes","EventEmitter","dropAreaClass","dragClass","timeouts","element","nativeElement","markStyleClass","classList","add","runOutsideAngular","fromEvent","preventDefault","stopPropagation","clearTimeouts","push","window","setTimeout","remove","onDrop","Array","dataTransfer","filterTypes","emit","timeout","clearTimeout","allowedTypes","split","type","toLocaleLowerCase","filtered","extIndex","lastIndexOf","ext","substring","includes","allowedTypesString","replace","open","duration","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","readAsText","SignalHelpers","boolEquals","equal","RxHelpers","valueEquals","numberEquals","stringEquals","objectEquals","objectsEqual","webApiEntityList","EntityService","formConfig","queryService","getEntities$","p","getAvailableEntities","contentTypeName","entitiesFilter","rxTap","enabled","getEntities","contentTypes","itemIds","fields","data","Default","entityId","force","parentId","parentField","id","config","FeaturesService","dialogContext$","ReplaySubject","dialogContextSignal","signal","configService","ds","load","dialogContext","set","getAll","computed","Features","arraysEqual","get$","featureNameId","find","f","nameId","getSignal","isEnabled$","isEnabled","_angular_core__WEBPACK_IMPORTED_MODULE_4__","providedIn","GlobalConfigService","debugState","isDebug","allowDebugMode","debugEnabled","debugEnabled$","toObservable","initial","sessionStorage","getItem","keyDebug","allow","oldConfig","newConfig","toggleDebugEnabled"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/content-import/services/content-import.service.ts","./projects/eav-ui/src/app/content-import/content-import.component.html","./projects/eav-ui/src/app/content-import/content-import.component.ts","./projects/eav-ui/src/app/shared/directives/base.directive.ts","./projects/eav-ui/src/app/shared/directives/drag-and-drop.directive.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/helpers/signal.helpers.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/features.service.ts","./projects/eav-ui/src/app/shared/services/global-config.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { ServiceBase } from '../../shared/services/service-base';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { DialogContextSiteApp } from '../../shared/models/dialog-context.models';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\n\r\nconst logThis = false;\r\n\r\nconst webApiSettings = 'admin/dialog/settings';\r\n\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService extends ServiceBase implements OnDestroy {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private globalConfigService: GlobalConfigService,\r\n    featuresService: FeaturesService,\r\n  ) {\r\n    super(new EavLogger('AppDialogConfigService', logThis));\r\n    this.log.a(`using context #${this.context.log.svcId}`);\r\n    featuresService.loadFromService(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.destroy();\r\n    // TODO: probably should add an onDestroy and ensure all subscriptions in dialogSettings$ are killed\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getCurrent$(): Observable<DialogSettings> {\r\n    const appId = this.context.appId;\r\n    this.log.a(`getCurrent\\$ - appId:${appId}`);\r\n    return this.getShared$(appId);\r\n  }\r\n\r\n    // new 2dg\r\n    getSitePrimaryApp$(): Observable<DialogContextSiteApp> {\r\n      return this.getCurrent$().pipe(map(dc => dc?.Context.Site.PrimaryApp));\r\n    }\r\n\r\n    getGlobalPrimaryApp$(): Observable<DialogContextSiteApp> {\r\n      return this.getCurrent$().pipe(map(dc => dc?.Context.System.PrimaryApp));\r\n    }\r\n\r\n\r\n  getShared$(appId: number): Observable<DialogSettings> {\r\n    this.log.a('getShared$ appId: ' + appId);\r\n    // if (!this.dialogSettings$[appIdToUse])\r\n    this.dialogSettings$[appId] ??= this.getDialogSettings(appId, 'getShared$').pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n  }\r\n\r\n  getDialogSettings(appId?: number, reqBy?: string): Observable<DialogSettings> {\r\n    this.log.a('getDialogSettings', {appId, reqBy});\r\n    return this.http.get<DialogSettings>(webApiSettings, {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dlgSettings => {\r\n        dlgSettings.Context.Language.List = dlgSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dlgSettings;\r\n      }),\r\n      tap(dlgSettings => {\r\n        this.globalConfigService.allowDebug(dlgSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentImport, EvaluateContentResult, ImportContentRequest, ImportContentResult } from '../models/content-import.model';\r\nimport { webApiEntityRoot } from '../../shared/services/entity.service';\r\n\r\n@Injectable()\r\nexport class ContentImportService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  evaluateContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<EvaluateContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlPreview'), requestData).pipe(\r\n          map(result => {\r\n            if (!result.Success) {\r\n              result.Errors = result.Detail as any;\r\n              delete result.Detail;\r\n            }\r\n            return result;\r\n          }),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  importContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<ImportContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlUpload'), requestData);\r\n      })\r\n    );\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n<div class=\"eav-dialog\" appDragAndDrop [allowedFileTypes]=\"'xml'\" (filesDropped)=\"filesDropped($event)\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ vm.contentType?.Name }} Import Data</div>\r\n  </div>\r\n  <div class=\"eav-dialog-description\">\r\n    <p>\r\n      This will import content-items into 2sxc. It requires that you already defined the content-type before you try\r\n      importing, and that you created the import-file using the template provided by the Export. Please visit\r\n      <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n    </p>\r\n  </div>\r\n  @if (formValues != null) {\r\n  @switch (vm.viewStateSelected) {\r\n  <!-- FORM -->\r\n  @case (1) {\r\n  <form #ngForm=\"ngForm\">\r\n    <div class=\"eav-dialog-content\">\r\n      <div>\r\n        <button mat-raised-button tippy=\"Open file browser\" (click)=\"fileInput.click()\">\r\n          <span>{{ formValues.file ? formValues.file.name : 'Select or drop file' }}</span>\r\n        </button>\r\n        <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n      </div>\r\n      <div>\r\n        <p class=\"eav-radio-group-label\">References to pages / files</p>\r\n        <mat-radio-group class=\"eav-radio-group\" [(ngModel)]=\"formValues.resourcesReferences\"\r\n          name=\"ResourcesReferences\">\r\n          <mat-radio-button value=\"Keep\">\r\n            Import links as written in the file (for example /Portals/...)\r\n          </mat-radio-button>\r\n          <mat-radio-button value=\"Resolve\">\r\n            Try to resolve paths to references\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n      <div>\r\n        <p class=\"eav-radio-group-label\">Clear all other entities</p>\r\n        <mat-radio-group class=\"eav-radio-group\" [(ngModel)]=\"formValues.clearEntities\" name=\"ClearEntities\">\r\n          <mat-radio-button value=\"None\">\r\n            Keep all entities not found in import\r\n          </mat-radio-button>\r\n          <mat-radio-button value=\"All\">\r\n            Remove all entities not found in import\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n      <p class=\"eav-hint\">Remember to backup your DNN first!</p>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!formValues.file || !formValues.file.name\"\r\n        (click)=\"evaluateContent()\">\r\n        Preview Import\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </form>\r\n  }\r\n  <!-- END FORM -->\r\n  <!-- WAITING -->\r\n  @case (0) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p>Please wait while processing...</p>\r\n  </div>\r\n  }\r\n  <!-- END WAITING -->\r\n  <!-- EVALUATION RESULT -->\r\n  @case (2) {\r\n  @if (vm.evaluationResult) {\r\n  <!-- DETAILS / STATISTICS -->\r\n  @if (vm.evaluationResult.Success) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p class=\"eav-evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n    <p class=\"eav-evaluation__title\">File contains:</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      <li>{{ vm.evaluationResult.Detail.DocumentElementsCount }} content-items (records/entities)</li>\r\n      <li>{{ vm.evaluationResult.Detail.LanguagesInDocumentCount }} languages</li>\r\n      <li>{{ vm.evaluationResult.Detail.AttributeNamesInDocument.length }} columns:\r\n        {{ vm.evaluationResult.Detail.AttributeNamesInDocument.join(', ') }}</li>\r\n    </ul>\r\n    <p class=\"eav-evaluation__title\">If you press Import, it will:</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      <li>Create {{ vm.evaluationResult.Detail.AmountOfEntitiesCreated }} content-items</li>\r\n      <li>Update {{ vm.evaluationResult.Detail.AmountOfEntitiesUpdated }} content-items</li>\r\n      <li>Delete {{ vm.evaluationResult.Detail.AmountOfEntitiesDeleted }} content-items</li>\r\n      <li>Ignore {{ vm.evaluationResult.Detail.AttributeNamesNotImported.length }} columns:\r\n        {{ vm.evaluationResult.Detail.AttributeNamesNotImported.join(', ') }}</li>\r\n    </ul>\r\n    <p class=\"eav-hint\">Note: The import validates much data and may take several minutes.</p>\r\n  </div>\r\n  }\r\n  <!-- END DETAILS / STATISTICS -->\r\n  <!-- ERRORS -->\r\n  @if (!vm.evaluationResult.Success) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p class=\"eav-evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      @for (error of vm.evaluationResult.Errors; track error) {\r\n      <li>\r\n        <div>{{ errors[error.ErrorCode] }}</div>\r\n        @if (error.ErrorDetail) {\r\n        <div><i>Details: {{ error.ErrorDetail }}</i></div>\r\n        }\r\n        @if (error.LineNumber) {\r\n        <div><i>Line-no: {{ error.LineNumber }}</i></div>\r\n        }\r\n        @if (error.LineDetail) {\r\n        <div><i>Line-details: {{ error.LineDetail }}</i></div>\r\n        }\r\n      </li>\r\n      }\r\n    </ul>\r\n  </div>\r\n  }\r\n  <!-- END ERRORS -->\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button (click)=\"back()\">Back</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!vm.evaluationResult.Success\" (click)=\"importContent()\">\r\n      Import\r\n    </button>\r\n  </mat-dialog-actions>\r\n  }\r\n  }\r\n  <!-- END EVALUATION RESULT -->\r\n  <!-- IMPORT RESULT -->\r\n  @case (3) {\r\n  @if (vm.importResult) {\r\n  <div class=\"eav-dialog-content\">\r\n    @if (vm.importResult.Success) {\r\n    <p>Import done.</p>\r\n    }\r\n    @if (!vm.importResult.Success) {\r\n    <p>Import failed.</p>\r\n    }\r\n  </div>\r\n  }\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n  </mat-dialog-actions>\r\n  }\r\n  <!-- END IMPORT RESULT -->\r\n  }\r\n  }\r\n</div>\r\n}\r\n","import { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogActions } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin, map } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentImportDialogData } from './content-import-dialog.config';\r\nimport { ContentImport, EvaluateContentResult, ImportContentResult } from './models/content-import.model';\r\nimport { ContentImportService } from './services/content-import.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { transient } from '../core';\r\n\r\n@Component({\r\n  selector: 'app-content-import',\r\n  templateUrl: './content-import.component.html',\r\n  styleUrls: ['./content-import.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatButtonModule,\r\n    MatRadioModule,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    DragAndDropDirective,\r\n  ],\r\n})\r\nexport class ContentImportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private contentImportService = transient(ContentImportService);\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private appDialogConfigService = transient(AppDialogConfigService);\r\n\r\n  formValues: ContentImport;\r\n  private contentType$ = new BehaviorSubject<ContentType>(null);\r\n  private loading$ = new BehaviorSubject(false);\r\n  private viewStates = {\r\n    waiting: 0,\r\n    default: 1,\r\n    evaluated: 2,\r\n    imported: 3,\r\n  };\r\n  private viewStateSelected$ = new BehaviorSubject<number>(this.viewStates.default);\r\n  private evaluationResult$ = new BehaviorSubject<EvaluateContentResult>(null);\r\n  private importResult$ = new BehaviorSubject<ImportContentResult>(null);\r\n  viewModel$ = combineLatest([\r\n    this.contentType$, this.loading$, this.viewStateSelected$, this.evaluationResult$, this.importResult$,\r\n  ]).pipe(\r\n    map(([contentType, loading, viewStateSelected, evaluationResult, importResult]) =>\r\n      ({ contentType, loading, viewStateSelected, evaluationResult, importResult })),\r\n  );\r\n  errors: Record<number, string> = {\r\n    0: 'Unknown error occured.',\r\n    1: 'Selected content-type does not exist.',\r\n    2: 'Document is not a valid XML file.',\r\n    3: 'Selected content-type does not match the content-type in the XML file.',\r\n    4: 'The language is not supported.',\r\n    5: 'The document does not specify all languages for all entities.',\r\n    6: 'Language reference cannot be parsed, the language is not supported.',\r\n    7: 'Language reference cannot be parsed, the read-write protection is not supported.',\r\n    8: 'Value cannot be read, because of it has an invalid format.'\r\n  };\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ContentImportDialogData,\r\n    private dialogRef: MatDialogRef<ContentImportComponent>,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.appDialogConfigService.getCurrent$();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentType: this.contentTypeStaticName,\r\n        file: this.dialogData.files != null ? this.dialogData.files[0] : null,\r\n        resourcesReferences: 'Keep',\r\n        clearEntities: 'None',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n    this.viewStateSelected$.complete();\r\n    this.evaluationResult$.complete();\r\n    this.importResult$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  evaluateContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.evaluateContent(this.formValues).subscribe(result => {\r\n      this.evaluationResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.evaluated);\r\n    });\r\n  }\r\n\r\n  importContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.importContent(this.formValues).subscribe(result => {\r\n      this.importResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.imported);\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.viewStateSelected$.next(this.viewStates.default);\r\n    this.evaluationResult$.next(null);\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    this.formValues.file = (event.target as HTMLInputElement).files[0];\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.formValues.file = importFile;\r\n  }\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive()\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseDirective implements OnDestroy {\r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent } from 'rxjs';\r\nimport { BaseDirective } from './base.directive';\r\n\r\n@Directive({ selector: '[appDragAndDrop]', standalone: true })\r\nexport class DragAndDropDirective extends BaseDirective implements OnInit, OnDestroy {\r\n  @Input() markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    super();\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscriptions.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscriptions.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { CreateComputedOptions } from '@angular/core';\r\nimport { RxHelpers } from '../rxJs/rx.helpers';\r\nimport { ValueEqualityFn } from '@angular/core/primitives/signals';\r\n\r\nexport class SignalHelpers {\r\n  /** Options for number signal to ensure equality only on value difference */\r\n  static boolEquals: CreateComputedOptions<boolean> = {\r\n    equal: RxHelpers.valueEquals<boolean>\r\n  };\r\n\r\n  /** Options for string signal to ensure equality only on value difference */\r\n  static numberEquals: CreateComputedOptions<number> = {\r\n    equal: RxHelpers.valueEquals<number>\r\n  };\r\n\r\n  /** Options for string signal to ensure equality only on value difference */\r\n  static stringEquals: CreateComputedOptions<string> = {\r\n    equal: RxHelpers.valueEquals<string>\r\n  };\r\n\r\n  // note: this doesn't work as expected; leaving in so nobody tries to repeat this\r\n  // /** Options for string signal to ensure equality only on value difference */\r\n  // static valueEquals: CreateComputedOptions<boolean | string | number> = {\r\n  //   equal: RxHelpers.valueEquals<boolean | string | number>\r\n  // };\r\n\r\n  /** Options for object signal to ensure equality only on value difference */\r\n  static objectEquals = { equal: RxHelpers.objectsEqual };\r\n}\r\n\r\n// export class SignalEquals<T>: CreateComputedOptions<T> {\r\n//   equal: RxHelpers.objectsEqual<T>;\r\n// }\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { ServiceBase } from './service-base';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { EntityBasic } from '../../edit/shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { FormConfigService } from '../../edit/state/form-config.service';\r\n\r\nconst logThis = false;\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n// TODO: @2dg also try to use transient only - should be possible\r\n@Injectable()\r\nexport class EntityService extends ServiceBase {\r\n  constructor(private http: HttpClient,\r\n    private formConfig: FormConfigService,\r\n    private dnnContext: DnnContext,\r\n    private queryService: QueryService,\r\n  )\r\n  {\r\n    super(new EavLogger('EntityService', logThis));\r\n  }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.rxTap('getEntities', { enabled: true });\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      log.pipe(),\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId: this.formConfig.config.appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable, Signal, computed, signal } from '@angular/core';\r\nimport { map, Observable, ReplaySubject } from 'rxjs';\r\nimport { AppDialogConfigService } from '../../app-administration/services';\r\nimport { DialogContext } from '../models/dialog-settings.model';\r\nimport { ServiceBase } from './service-base';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { FeatureSummary } from '../../features/models/feature-summary.model';\r\nimport { SignalHelpers } from '../helpers/signal.helpers';\r\nimport { RxHelpers } from '../rxJs/rx.helpers';\r\n\r\nconst logThis = false;\r\n\r\n/**\r\n * Singleton Service to provide information about enabled/disabled features.\r\n *\r\n * It currently has a strange architecture, since it's singleton,\r\n * but needs context data.\r\n * So the AppDialogConfigService seems to call the loadFromService.\r\n * TODO: 2dm: I don't like this, should rethink the architecture, feels a bit flaky.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class FeaturesService extends ServiceBase {\r\n  // new 2dm WIP\r\n  // Provide context information and ensure that previously added data is always available\r\n  private dialogContext$ = new ReplaySubject<DialogContext>(1);\r\n  private dialogContextSignal = signal<DialogContext>(null);\r\n\r\n  constructor() {\r\n    super(new EavLogger('FeaturesService', logThis));\r\n  }\r\n\r\n  loadFromService(configService: AppDialogConfigService) {\r\n    configService.getCurrent$().subscribe(ds => this.load(ds.Context));\r\n  }\r\n\r\n  load(dialogContext: DialogContext) {\r\n    // new 2dm WIP\r\n    this.dialogContext$.next(dialogContext);\r\n    this.dialogContextSignal.set(dialogContext);\r\n  }\r\n\r\n  getAll(): Signal<FeatureSummary[]> {\r\n    return computed(\r\n      () => this.dialogContextSignal()?.Features ?? [],\r\n      { equal: RxHelpers.arraysEqual }\r\n    );\r\n  }\r\n\r\n  // new 2dm WIP\r\n  get$(featureNameId: string): Observable<FeatureSummary> {\r\n    return this.dialogContext$.pipe(\r\n      // tap(f => console.log('2dm', f, featureNameId)),\r\n      map(dc => dc?.Features.find(f => f.nameId === featureNameId))\r\n    );\r\n  }\r\n\r\n  getSignal(featureNameId: string): Signal<FeatureSummary> {\r\n    return computed(\r\n      () => this.dialogContextSignal()?.Features.find(f => f.nameId === featureNameId),\r\n      { equal: RxHelpers.objectsEqual }\r\n    );\r\n  }\r\n\r\n  isEnabled$(nameId: string): Observable<boolean> {\r\n    return this.get$(nameId).pipe(map(f => f?.isEnabled ?? false));\r\n  }\r\n\r\n  isEnabled(nameId: string): Signal<boolean> {\r\n    return computed(\r\n      () => this.dialogContextSignal()?.Features.find(f => f.nameId === nameId)?.isEnabled ?? false,\r\n      SignalHelpers.boolEquals\r\n    );\r\n  }\r\n}\r\n","import { Injectable, computed, signal } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { keyDebug } from '../constants/session.constants';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalConfigService {\r\n\r\n  private debugState = signal<GlobalConfig>(null);\r\n\r\n  isDebug = computed(() => !!this.debugState()?.allowDebugMode && !!this.debugState()?.debugEnabled);\r\n\r\n  /** This observable is a left-over, try to remove once more is refactored */\r\n  debugEnabled$ = toObservable(this.isDebug);\r\n\r\n  constructor(private snackBar: MatSnackBar) {\r\n    const initial: GlobalConfig = {\r\n      id: 0,\r\n      debugEnabled: sessionStorage.getItem(keyDebug) === 'true',\r\n      allowDebugMode: false,\r\n    };\r\n    this.debugState.set(initial);\r\n  }\r\n\r\n  allowDebug(allow: boolean): void {\r\n    const oldConfig = this.debugState();\r\n    if (oldConfig.allowDebugMode === allow)\r\n      return;\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      allowDebugMode: allow,\r\n    };\r\n    this.debugState.set(newConfig);\r\n  }\r\n\r\n  toggleDebugEnabled(): void {\r\n    const oldConfig = this.debugState();\r\n    if (!oldConfig.allowDebugMode) {\r\n      this.snackBar.open('You do not have permissions to enter developer mode', null, { duration: 3000 });\r\n      return;\r\n    }\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      debugEnabled: !oldConfig.debugEnabled,\r\n    };\r\n    this.debugState.set(newConfig);\r\n    this.snackBar.open(newConfig.debugEnabled ? 'developer mode on' : 'developer mode off', null, { duration: 3000 });\r\n  }\r\n}\r\n\r\ninterface GlobalConfig {\r\n  id: 0;\r\n  debugEnabled: boolean;\r\n  allowDebugMode: boolean;\r\n}\r\n"],"x_google_ignoreList":[]}