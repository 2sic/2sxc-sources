{"version":3,"sources":["./src/app/replace-content/replace-content.component.html","./src/app/replace-content/replace-content.component.ts"],"names":["dialogRef","contentGroupService","router","route","snackBar","hostClass","item$","id","guid","this","snapshot","paramMap","get","part","index","parseInt","add","queryParamMap","options$","subscription","ngOnInit","getConfig","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","selectedChanged","next","value","save","open","saveItem","subscribe","duration","closeDialog","copySelected","form","items","ContentTypeName","contentTypeName","DuplicateEntity","formUrl","navigate","relativeTo","close","getItems","replaceConfig","options","itemKeys","Object","keys","Items","nKey","push","label","SelectedId","events","pipe","event","firstChild","editResult","getCurrentNavigation","extras","state","ReplaceContentComponent"],"mappings":"sbAcM,wBAA6E,QAAkB,Q,uBAAzC,sBAAuB,uBCDnF,iBAqBE,WACUA,EACAC,EACAC,EACAC,EACAC,GAJA,KAAAJ,YACA,KAAAC,sBACA,KAAAC,SACA,KAAAC,QACA,KAAAC,WAnBgB,KAAAC,UAAY,mBAEtC,KAAAC,MAAQ,IAAI,IAAiC,CAC3CC,GAAI,KACJC,KAAMC,KAAKN,MAAMO,SAASC,SAASC,IAAI,QACvCC,KAAMJ,KAAKN,MAAMO,SAASC,SAASC,IAAI,QACvCE,MAAOC,SAASN,KAAKN,MAAMO,SAASC,SAASC,IAAI,SAAU,IAC3DI,MAAOP,KAAKN,MAAMO,SAASO,cAAcL,IAAI,SAE/C,KAAAM,SAAW,IAAI,IAAiC,MAGxC,KAAAC,aAAe,IAAI,I,OAU3B,YAAAC,SAAA,WACEX,KAAKY,YACLZ,KAAKa,wBAGP,YAAAC,YAAA,WACEd,KAAKH,MAAMkB,WACXf,KAAKS,SAASM,WACdf,KAAKU,aAAaM,eAGpB,YAAAC,gBAAA,SAAgBnB,GACdE,KAAKH,MAAMqB,KAAK,2BAAKlB,KAAKH,MAAMsB,OAAK,CAAErB,GAAE,MAG3C,YAAAsB,KAAA,sBACEpB,KAAKL,SAAS0B,KAAK,aACnBrB,KAAKR,oBAAoB8B,SAAStB,KAAKH,MAAMsB,OAAOI,WAAU,WAC5D,EAAK5B,SAAS0B,KAAK,QAAS,KAAM,CAAEG,SAAU,MAC9C,EAAKC,kBAIT,YAAAC,aAAA,WACE,IAAMC,EAAiB,CACrBC,MAAO,CAAC,CAAEC,gBAAiB7B,KAAK8B,gBAAiBC,gBAAiB/B,KAAKH,MAAMsB,MAAMrB,MAE/EkC,EAAU,YAAiBL,GACjC3B,KAAKP,OAAOwC,SAAS,CAAC,QAAQD,GAAY,CAAEE,WAAYlC,KAAKN,SAG/D,YAAA+B,YAAA,WACEzB,KAAKT,UAAU4C,SAGT,YAAAvB,UAAR,sBACEZ,KAAKR,oBAAoB4C,SAASpC,KAAKH,MAAMsB,OAAOI,WAAU,SAAAc,G,QACtDC,EAA2B,GAC3BC,EAAWC,OAAOC,KAAKJ,EAAcK,O,IAC3C,IAAkB,kBAAAH,GAAQ,8BAAE,CAAvB,IACGI,EAAOrC,SADD,QACe,IAE3BgC,EAAQM,KAAK,CAAEC,MADER,EAAcK,MAAMC,GACJ,KAAKA,EAAI,IAAKxB,MAAOwB,K,iGAExD,EAAKlC,SAASS,KAAKoB,GAEd,EAAKzC,MAAMsB,MAAMrB,IAAO,EAAKD,MAAMsB,MAAMZ,KAC5C,EAAKV,MAAMqB,KAAK,2BAAK,EAAKrB,MAAMsB,OAAK,CAAErB,GAAIuC,EAAcS,cAEtD,EAAKhB,kBACR,EAAKA,gBAAkBO,EAAcR,qBAKnC,YAAAhB,qBAAR,sBACEb,KAAKU,aAAaH,IAChBP,KAAKP,OAAOsD,OAAOC,KACjB,aAAO,SAAAC,GAAS,OAAAA,aAAiB,OACjC,cAAYjD,KAAKN,MAAMO,SAASiD,YAChC,aAAI,WAAM,QAAE,EAAKxD,MAAMO,SAASiD,cAChC,cACA,aAAO,SAAC,G,IAAA,mBAAyB,OAAxB,OAAU,SACnB3B,WAAU,W,MACV,EAAKX,YACL,IACMuC,EAA8B,QAApB,EADG,EAAK1D,OAAO2D,uBACDC,cAAM,eAAEC,MACtC,GAAIH,EAAY,CACd,IAAMrD,EAAKqD,EAAWX,OAAOC,KAAKU,GAAY,IAC9C,EAAKtD,MAAMqB,KAAK,2BAAK,EAAKrB,MAAMsB,OAAK,CAAErB,GAAE,W,sCA5FtCyD,GAAuB,oD,uBAAvBA,EAAuB,+E,8gBDnBpC,gBACE,gBAA8B,+BAAoB,OACpD,OAEA,wBAEA,cACE,kHACF,OAEA,gBACE,2BACE,oBAAW,sBAAW,OACtB,wBAA2D,yCAAiB,EAAAtC,gBAAA,M,iBAC1E,8B,iBACF,OACF,OACA,oBAAoE,gCAAS,EAAAS,kBAC3E,oBAAU,qBAAS,OACrB,OACF,OAEA,iBACE,oBAA0B,gCAAS,EAAAD,iBAAe,kBAAM,OACxD,qBAAyC,gCAAS,EAAAL,UAAQ,gBAAI,OAChE,Q,MAZgB,+CACE,gD,oRCDlB","file":"replace-content-component.fda031738d03d1ff67d5.js","sourcesContent":["<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Replace Content Item</div>\r\n</div>\r\n\r\n<router-outlet></router-outlet>\r\n\r\n<p class=\"dialog-description\">\r\n  By replacing a content-item you can make a other content appear in the slot of the original content.\r\n</p>\r\n\r\n<div class=\"options-box\">\r\n  <mat-form-field class=\"options-box__field\" appearance=\"standard\" color=\"accent\">\r\n    <mat-label>Choose item</mat-label>\r\n    <mat-select [ngModel]=\"(item$ | async).id\" name=\"Language\" (ngModelChange)=\"selectedChanged($event)\">\r\n      <mat-option *ngFor=\"let option of (options$ | async)\" [value]=\"option.value\">{{ option.label }}</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n  <button mat-icon-button class=\"options-box__copy\" matTooltip=\"Copy\" (click)=\"copySelected()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </button>\r\n</div>\r\n\r\n<div class=\"dialog-component-actions\">\r\n  <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n  <button mat-raised-button color=\"accent\" (click)=\"save()\">Save</button>\r\n</div>\r\n","import { Component, OnInit, OnDestroy, HostBinding, ChangeDetectionStrategy } from '@angular/core';\r\nimport { Router, ActivatedRoute, NavigationEnd } from '@angular/router';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\nimport { filter, startWith, map, pairwise } from 'rxjs/operators';\r\n\r\nimport { ContentGroupService } from '../manage-content-list/services/content-group.service';\r\nimport { ReplaceOption } from './models/replace-option.model';\r\nimport { ContentGroupAdd } from '../manage-content-list/models/content-group.model';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\n\r\n@Component({\r\n  selector: 'app-replace-content',\r\n  templateUrl: './replace-content.component.html',\r\n  styleUrls: ['./replace-content.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ReplaceContentComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  item$ = new BehaviorSubject<ContentGroupAdd>({\r\n    id: null,\r\n    guid: this.route.snapshot.paramMap.get('guid'),\r\n    part: this.route.snapshot.paramMap.get('part'),\r\n    index: parseInt(this.route.snapshot.paramMap.get('index'), 10),\r\n    add: !!this.route.snapshot.queryParamMap.get('add'),\r\n  });\r\n  options$ = new BehaviorSubject<ReplaceOption[]>(null);\r\n\r\n  private contentTypeName: string;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ReplaceContentComponent>,\r\n    private contentGroupService: ContentGroupService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getConfig();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.item$.complete();\r\n    this.options$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  selectedChanged(id: number) {\r\n    this.item$.next({ ...this.item$.value, id });\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    this.contentGroupService.saveItem(this.item$.value).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  copySelected() {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeName, DuplicateEntity: this.item$.value.id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private getConfig() {\r\n    this.contentGroupService.getItems(this.item$.value).subscribe(replaceConfig => {\r\n      const options: ReplaceOption[] = [];\r\n      const itemKeys = Object.keys(replaceConfig.Items);\r\n      for (const key of itemKeys) {\r\n        const nKey = parseInt(key, 10);\r\n        const itemName = replaceConfig.Items[nKey];\r\n        options.push({ label: `${itemName} (${nKey})`, value: nKey });\r\n      }\r\n      this.options$.next(options);\r\n      // don't set the ID if dialog should be in add-mode\r\n      if (!this.item$.value.id && !this.item$.value.add) {\r\n        this.item$.next({ ...this.item$.value, id: replaceConfig.SelectedId });\r\n      }\r\n      if (!this.contentTypeName) {\r\n        this.contentTypeName = replaceConfig.ContentTypeName;\r\n      }\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.getConfig();\r\n        const navigation = this.router.getCurrentNavigation();\r\n        const editResult = navigation.extras?.state;\r\n        if (editResult) {\r\n          const id = editResult[Object.keys(editResult)[0]];\r\n          this.item$.next({ ...this.item$.value, id });\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}