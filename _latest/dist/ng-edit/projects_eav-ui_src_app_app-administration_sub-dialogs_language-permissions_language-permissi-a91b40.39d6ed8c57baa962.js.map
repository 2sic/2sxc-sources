{"version":3,"file":"projects_eav-ui_src_app_app-administration_sub-dialogs_language-permissions_language-permissi-a91b40.39d6ed8c57baa962.js","mappings":"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","names":["LanguagesPermissionsActionsComponent","agInit","params","this","language","data","refresh","openPermissions","onOpenPermissions","static","t","fesm2022_core","VBU","selectors","standalone","features","i0","decls","vars","consts","template","rf","ctx","Permissions","Count","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","_r1","ctx_r1","closeDialog","languages","gridOptions","LanguagePermissionsComponent","BaseWithChildDialogComponent","constructor","router","route","dialogRef","super","zoneService","transient","ZoneService","subscriptions","Subscription","languages$","BehaviorSubject","undefined","buildGridOptions","ngOnInit","getLanguages","add","childDialogClosed$","subscribe","viewModel$","combineLatest","pipe","map","ngOnDestroy","complete","close","navigate","GoToPermissions","getUrlLanguage","NameId","relativeTo","getLanguagesPermissions","error","next","defaultGridOptions","columnDefs","ColumnDefinitions","Id","field","filter","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","Code","TextWide","sort","valueGetter","Culture","ActionsPinnedRight1","LanguagePermissionsComponent_Conditional_0_Template","tmp_0_0","MatButtonModule","i4","RouterOutlet","MatDialogActions","AsyncPipe","SxcGridModule","i5","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵfac","ɵcmp","type","styles","encapsulation","changeDetection","MatBadge","color","_color","value","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","delete","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","inputs","None","HasDecoratorInputTransform","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/sub-dialogs/language-permissions/languages-permissions-actions/languages-permissions-actions.component.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/language-permissions/languages-permissions-actions/languages-permissions-actions.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/language-permissions/language-permissions.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/language-permissions/language-permissions.component.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { SiteLanguagePermissions } from '../../../../apps-management/models/site-language.model';\r\nimport { LanguagesPermissionsActionsParams } from './languages-permissions-actions.models';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-languages-permissions-actions',\r\n  templateUrl: './languages-permissions-actions.component.html',\r\n  styleUrls: ['./languages-permissions-actions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n  ],\r\n})\r\nexport class LanguagesPermissionsActionsComponent implements ICellRendererAngularComp {\r\n  language: SiteLanguagePermissions;\r\n\r\n  private params: ICellRendererParams & LanguagesPermissionsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & LanguagesPermissionsActionsParams): void {\r\n    this.params = params;\r\n    this.language = this.params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openPermissions(): void {\r\n    this.params.onOpenPermissions(this.language);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Permissions\" (click)=\"openPermissions()\">\r\n    <mat-icon [matBadge]=\"language.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!language.Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n      person\r\n    </mat-icon>\r\n  </div>\r\n</div>","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog nav-component-wrapper\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Language permissions</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"eav-dialog-content nav-component-wrapper\">\r\n      <p>\r\n        If no language permissions are defined, all editors can edit all languages.\r\n        As soon as you set any language permission, only the specified users\r\n        (or users in the specified groups) can edit these permissions.\r\n      </p>\r\n      <router-outlet></router-outlet>\r\n      <div class=\"grid-wrapper\">\r\n        <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.languages\" [gridOptions]=\"gridOptions\">\r\n        </ag-grid-angular>\r\n      </div>\r\n      <mat-dialog-actions align=\"end\"></mat-dialog-actions>\r\n    </div>\r\n  </div>\r\n}","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router, RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, map, Observable, Subscription } from 'rxjs';\r\nimport { SiteLanguagePermissions } from '../../../apps-management/models/site-language.model';\r\nimport { ZoneService } from '../../../apps-management/services/zone.service';\r\nimport { GoToPermissions } from '../../../permissions';\r\nimport { BaseWithChildDialogComponent } from '../../../shared/components/base-with-child-dialog.component';\r\nimport { IdFieldComponent } from '../../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../../shared/constants/default-grid-options.constants';\r\nimport { LanguagesPermissionsActionsComponent } from './languages-permissions-actions/languages-permissions-actions.component';\r\nimport { LanguagesPermissionsActionsParams } from './languages-permissions-actions/languages-permissions-actions.models';\r\nimport { ColumnDefinitions } from '../../../shared/ag-grid/column-definitions';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { SxcGridModule } from '../../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { transient } from '../../../core';\r\n\r\n@Component({\r\n  selector: 'app-language-permissions',\r\n  templateUrl: './language-permissions.component.html',\r\n  styleUrls: ['./language-permissions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class LanguagePermissionsComponent extends BaseWithChildDialogComponent implements OnInit, OnDestroy {\r\n  languages$: BehaviorSubject<SiteLanguagePermissions[] | undefined>;\r\n  gridOptions: GridOptions;\r\n\r\n  viewModel$: Observable<LanguagePermissionsViewModel>;\r\n\r\n  private zoneService = transient(ZoneService);\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<LanguagePermissionsComponent>,\r\n  ) {\r\n    super(router, route);\r\n    this.subscriptions = new Subscription();\r\n    this.languages$ = new BehaviorSubject<SiteLanguagePermissions[] | undefined>(undefined);\r\n    this.gridOptions = this.buildGridOptions();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getLanguages();\r\n    this.subscriptions.add(this.childDialogClosed$().subscribe(() => { this.getLanguages(); }));\r\n    this.viewModel$ = combineLatest([this.languages$]).pipe(\r\n      map(([languages]) => ({ languages }))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.languages$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openPermissions(language: SiteLanguagePermissions): void {\r\n    this.router.navigate([GoToPermissions.getUrlLanguage(language.NameId)], { relativeTo: this.route });\r\n  }\r\n\r\n  private getLanguages(): void {\r\n    this.zoneService.getLanguagesPermissions().subscribe({\r\n      error: () => {\r\n        this.languages$.next(undefined);\r\n      },\r\n      next: (languages) => {\r\n        this.languages$.next(languages);\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.Id,\r\n          field: 'Code',\r\n          filter: 'agTextColumnFilter',\r\n          cellRenderer: IdFieldComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<SiteLanguagePermissions> = {\r\n              tooltipGetter: (language) => `ID: ${language.Code}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Name',\r\n          sort: 'asc',\r\n          valueGetter: (params) => {\r\n            const language: SiteLanguagePermissions = params.data;\r\n            return language.Culture;\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight1,\r\n          cellRenderer: LanguagesPermissionsActionsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: LanguagesPermissionsActionsParams = {\r\n              onOpenPermissions: (language) => this.openPermissions(language),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\ninterface LanguagePermissionsViewModel {\r\n  languages: SiteLanguagePermissions[] | undefined\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[4]}