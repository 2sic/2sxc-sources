{"version":3,"file":"projects_eav-ui_src_app_content-export_content-export_component_ts.04de7fd20cd59720.js","mappings":"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","names":["i0","lang_r3","NameId","ctx_r1","itemIds","length","$event","_r1","formValues","language","ContentExportComponent_Conditional_5_For_17_Template","recordExport","ContentExportComponent_Conditional_5_Conditional_26_Template","languageReferences","resourcesReferences","closeDialog","exportContent","languages","hasIdList","ngForm_r4","form","valid","ContentExportComponent","constructor","dialog","route","this","hostClass","contentExportService","transient","ContentExportService","contentTypesService","ContentTypesService","dialogConfigSvc","DialogConfigAppService","loading$","BehaviorSubject","contentType$","contentTypeStaticName","snapshot","paramMap","get","selectedIds","split","map","id","parseInt","ngOnInit","next","retrieveContentType","dialogSettings$","getCurrent$","forkJoin","subscribe","contentType","dialogSettings","Context","Language","List","defaultLanguage","Primary","ngOnDestroy","complete","close","i1","i2","selectors","hostVars","hostBindings","rf","ctx","ContentExportComponent_Conditional_5_Template","tmp_0_0","Name","FormsModule","i3","MatFormFieldModule","i4","MatSelectModule","i5","i6","MatOptionModule","MatRadioModule","i7","MatDialogActions","MatButtonModule","i8","AsyncPipe","styles","webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","HttpServiceBase","nameId","getHttpApiUrl","params","appId","contentTypeId","getTypeSig","initial","getSignal","retrieveContentTypes","scope","getTypesSig","getScopes","pipe","scopesData","scopes","old","Object","keys","key","name","value","getScopesSig","scopesSignal","computed","getScopesV2","save","http","post","apiUrl","appid","delete","staticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceNameId","__ngFactoryType__","factory","Éµfac"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-export/content-export.component.html","./projects/eav-ui/src/app/content-export/content-export.component.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts"],"sourcesContent":["<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Export {{ (contentType$ | async)?.Name }}</div>\r\n  </div>\r\n  @if ((loading$ | async) === false) {\r\n    <form #ngForm=\"ngForm\">\r\n      <div class=\"eav-dialog-content\">\r\n        <p>\r\n          This will generate an XML file which you can edit in Excel. If you just want to import new data, use this to export the schema\r\n          that you can then fill in using Excel. Please visit\r\n          <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n        </p>\r\n        <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n          <div>\r\n            <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n              <mat-label>Languages</mat-label>\r\n              <mat-select [(ngModel)]=\"formValues.language\" name=\"Language\">\r\n                <mat-option value=\"\">All</mat-option>\r\n                @for (lang of languages; track lang) {\r\n                  <mat-option [value]=\"lang.NameId\">{{ lang.NameId }}</mat-option>\r\n                }\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">Export data</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.recordExport\" name=\"RecordExport\" class=\"eav-radio-group\">\r\n              <mat-radio-button value=\"Blank\">No, just export blank data schema (for new data import) </mat-radio-button>\r\n              <mat-radio-button value=\"All\">Yes, export all content-items</mat-radio-button>\r\n              @if (hasIdList) {\r\n                <mat-radio-button value=\"Selection\"> Export selected {{ itemIds.length }} items </mat-radio-button>\r\n              }\r\n            </mat-radio-group>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">Value references to other languages</p>\r\n            <mat-radio-group\r\n              [(ngModel)]=\"formValues.languageReferences\"\r\n              name=\"LanguageReferences\"\r\n              [disabled]=\"formValues.recordExport === 'Blank'\"\r\n              class=\"eav-radio-group\"\r\n            >\r\n              <mat-radio-button value=\"Link\">Keep references to other languages (for re-import) </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">Replace references with values</mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">File / page references</p>\r\n            <mat-radio-group\r\n              [(ngModel)]=\"formValues.resourcesReferences\"\r\n              name=\"ResourcesReferences\"\r\n              [disabled]=\"formValues.recordExport === 'Blank'\"\r\n              class=\"eav-radio-group\"\r\n            >\r\n              <mat-radio-button value=\"Link\">Keep references (for re-import, for example Page:4711) </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">Replace references with real URLs (for example /Portals/0...) </mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <mat-dialog-actions align=\"end\">\r\n        <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button color=\"accent\" [disabled]=\"!ngForm.form.valid\" (click)=\"exportContent()\">Export Data</button>\r\n      </mat-dialog-actions>\r\n    </form>\r\n  }\r\n</div>\r\n","import { AsyncPipe } from '@angular/common';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { transient } from '../../../../core';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { DialogConfigAppService } from '../app-administration/services/dialog-config-app.service';\r\nimport { Language } from '../shared/models/language.model';\r\nimport { ContentExport } from './models/content-export.model';\r\nimport { ContentExportService } from './services/content-export.service';\r\n\r\n@Component({\r\n    selector: 'app-content-export',\r\n    templateUrl: './content-export.component.html',\r\n    styleUrls: ['./content-export.component.scss'],\r\n    imports: [\r\n        FormsModule,\r\n        MatFormFieldModule,\r\n        MatSelectModule,\r\n        MatOptionModule,\r\n        MatRadioModule,\r\n        MatDialogActions,\r\n        MatButtonModule,\r\n        AsyncPipe,\r\n    ]\r\n})\r\nexport class ContentExportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private contentExportService = transient(ContentExportService);\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private dialogConfigSvc = transient(DialogConfigAppService);\r\n\r\n  formValues: ContentExport;\r\n  languages: Language[];\r\n  itemIds: number[];\r\n  hasIdList = false;\r\n  loading$ = new BehaviorSubject(false);\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ContentExportComponent>,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    const selectedIds = this.route.snapshot.paramMap.get('selectedIds');\r\n    this.hasIdList = !!selectedIds;\r\n    if (this.hasIdList) {\r\n      this.itemIds = selectedIds.split(',').map(id => parseInt(id, 10));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.dialogConfigSvc.getCurrent$();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.languages = dialogSettings.Context.Language.List;\r\n\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentTypeStaticName: this.contentTypeStaticName,\r\n        language: '',\r\n        recordExport: this.hasIdList ? 'Selection' : 'All',\r\n        languageReferences: 'Link',\r\n        resourcesReferences: 'Link',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  exportContent() {\r\n    this.contentExportService.exportContent(this.formValues,\r\n      this.hasIdList && this.formValues.recordExport === 'Selection' ? this.itemIds : null);\r\n  }\r\n}\r\n","import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  getTypeSig(nameId: string, initial: ContentType): Signal<ContentType> {\r\n    return this.getSignal<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }, initial);\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.getHttpApiUrl<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  getTypesSig(scope: string, initial: ContentType[]): Signal<ContentType[]> {\r\n    return this.getSignal<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  // todo: switch to using the GetSignal with `map` parameter similar to the initial version above\r\n  getScopesSig(initial: undefined): Signal<ScopeOption[]> {\r\n    const scopesSignal = this.getSignal<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(\r\n      webApiTypeScopes,\r\n      { params: { appId: this.appId } }, initial,\r\n    );\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      const scopesData = scopesSignal();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}