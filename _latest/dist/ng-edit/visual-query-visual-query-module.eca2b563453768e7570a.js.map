{"version":3,"sources":["./src/app/visual-query/services/query-definition.service.ts","./src/app/visual-query/plumb-editor/plumb-editor.helpers.ts","./src/app/visual-query/plumb-editor/plumber.helper.ts","./src/app/visual-query/query-result/query-result.component.html","./src/app/visual-query/query-result/query-result.component.ts","./src/app/visual-query/stream-error-result/stream-error-result.component.ts","./src/app/visual-query/stream-error-result/stream-error-result.component.html","./src/app/visual-query/services/visual-query.service.ts","./src/app/visual-query/plumb-editor/plumb-editor.component.html","./src/app/visual-query/plumb-editor/plumb-editor.component.ts","./src/app/visual-query/run-explorer/run-explorer.component.html","./src/app/visual-query/run-explorer/run-explorer.component.ts","./src/app/visual-query/run-explorer/run-explorer.helpers.ts","./src/app/visual-query/add-explorer/add-explorer.component.html","./src/app/visual-query/add-explorer/add-explorer.component.ts","./src/app/visual-query/add-explorer/add-explorer.helpers.ts","./src/app/visual-query/visual-query-routing.module.ts","./src/app/visual-query/visual-query.component.ts","./src/app/visual-query/visual-query.component.html","./src/app/visual-query/visual-query.module.ts"],"names":["http","context","dnnContext","fetchPipeline","pipelineEntityId","dataSources","this","get","$2sxc","apiUrl","params","appId","toString","id","pipe","map","pipelineModel","DataSources","length","buildDefaultModel","fixPipelineDataSources","templateDataSources","pipelineDesigner","defaultPipeline","templateDS","dataSource","find","ds","PartAssemblyAndType","push","Description","EntityGuid","EntityId","undefined","Name","VisualDesignerData","Pipeline","StreamWiring","streamWiring","pipelineDataSources","some","pipelineDS","outDataSource","outDs","pipelineDataSource","Top","Left","fetchDataSources","ContentType","Difficulty","dataSourceDifficulties","default","DynamicIn","DynamicOut","EnableConfig","HelpLink","Icon","In","Out","PrimaryType","UiHint","typeNameFilter","input","format","globalParts","split","classFullNameParts","savePipeline","pipeline","post","Id","newPipelineModel","runPipeline","top","debugStream","source","sourceOut","from","out","QueryDefinitionService","guiTypes","Cache","Filter","Logic","Lookup","Modify","Security","Sort","Source","Target","Unknown","Debug","System","calculateTypeInfos","typeInfos","typeInfo","dataSrcIdPrefix","jsPlumbRoot","onConnectionsChanged","onDragend","onDebugStream","lineCount","linePaintDefault","stroke","strokeWidth","outlineStroke","outlineWidth","lineColors","maxCols","uuidColorMap","bulkDelete","instance","window","jsPlumb","getInstance","getInstanceDefaults","batch","initDomDataSources","initWirings","bindEvents","repaintEverything","destroy","reset","unbindContainer","removeEndpointsOnDataSource","pipelineDataSourceGuid","elementId","selectEndpoints","element","delete","getAllConnections","connection","From","sourceId","replace","endpoints","getOverlay","label","To","targetId","getStreamsOut","streamsOut","target","each","endpoint","join","putEntityCountOnConnections","result","Streams","forEach","stream","sourceElementId","toUuid","includes","TargetIn","sEndp","getEndpoint","SourceOut","connections","filter","getUuid","Error","Count","setLabel","cssClass","events","click","labelOverlay","AllowEdit","nextLinePaintStyle","uuid","Object","assign","container","Container","Connector","curviness","PaintStyle","HoverPaintStyle","domDataSource","querySelector","draggable","grid","stop","event","el","position","finalPos","setTimeout","name","addEndpoint","targetEndpointUnlimited","buildTargetEndpoint","maxConnections","makeTarget","makeSource","buildSourceEndpoint","wire","fromUuid","targetElementId","pipeDataSource","connect","uuids","paintStyle","e","console","error","message","to","endpointName","isIn","style","d","isDynamic","getEndpointInfo","endpointInfo","required","model","enabled","fill","radius","isSource","anchor","faces","overlays","getEndpointOverlays","isTarget","dropOptions","hoverClass","activeClass","location","newLabel","prompt","bind","info","targetEndpoint","deleteEndpoint","endpointLabel","labelPrompt","getLabel","getEndpoints","canvas","classList","contains","Math","floor","random","deleteConnection","fireEvent","trimmed","trim","endsWith","substring","dialogData","dialogRef","visualQueryService","ngOnInit","pipelineModel$","value","Params","testParams","TestParameters","parameters","concat","timeUsed","QueryTimer","Milliseconds","ticksUsed","Ticks","optionsForTop","Query","sources","Sources","streams","closeDialog","close","show","original","QueryResultComponent","errorData","openInsights","open","StreamErrorResultComponent","router","route","queryDefinitionService","titleService","snackBar","dialog","viewContainerRef","zone","metadataService","contentTypesService","changeDetectorRef","BehaviorSubject","dataSources$","putEntityCountOnConnections$","Subject","pipelineId","parseInt","snapshot","paramMap","doRefresh","subscription","Subscription","ngOnDestroy","complete","unsubscribe","init","attachKeyboardSave","refreshOnChildClosed","editPipelineEntity","form","items","formUrl","navigate","relativeTo","saveAndRun","save","run","addDataSource","cloneDeep","next","removeDataSource","StreamsOut","renameDataSource","changeDataSourceDescription","description","changeConnections","changeDataSourcePosition","editDataSource","contentTypeName","key","getMetadata","metadata","entity","type","keyTypes","guid","subscribe","retrieveContentType","contentType","ContentTypeName","For","Guid","alert","callback","duration","pipelineResult","showQueryResult","warn","showStreamErrorResult","streamResult","sourceName","reloadingSnackBar","setTitle","autoFocus","backdropClass","closeOnNavigation","data","panelClass","markForCheck","ErrorData","runOutsideAngular","add","fromEvent","firstChild","navigator","platform","match","metaKey","ctrlKey","keyCode","preventDefault","startWith","pairwise","refresh","VisualQueryService","hardReset","scriptLoaded$","test","src","plumber","templateModel$","combineLatest","detectChanges","allowEdit","ngAfterViewInit","domDataSourcesLoaded$","domDataSourcesRef","changes","domRootRef","nativeElement","configureDataSource","getTypeName","partAssemblyAndType","isOutDataSource","remove","confirm","openHelp","url","editName","newName","editDescription","newDescription","PlumbEditorComponent","warnings$","warnings","queryParams","param","midMatch","exec","testMid","urlMid","moduleId","calculateWarnings","editPipeline","openParamsHelp","saveAndRunQuery","openRestApi","goToQuery","RunExplorerComponent","toggledItems","difficulties","difficulty$","sorted$","maxDifficulty","filtered","sort","a","b","toLocaleLowerCase","localeCompare","sorted","filterAndSortDataSources","toggleDifficulty","checked","advanced","toggleItem","item","toggleInArray","trackGroups","index","trackDataSources","AddExplorerComponent","routes","path","component","explorer","activeExplorer","toggleExplorer","VisualQueryComponent","children","matcher","loadChildren","then","m","EditModule","history","VisualQueryRoutingModule","forChild","VisualQueryModule"],"mappings":"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","file":"visual-query-visual-query-module.eca2b563453768e7570a.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiQueryDataSources, webApiQueryDebugStream, webApiQueryGet, webApiQueryRun, webApiQuerySave } from '../../app-administration/services';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult } from '../models';\r\n\r\n@Injectable()\r\nexport class QueryDefinitionService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  fetchPipeline(pipelineEntityId: number, dataSources: DataSource[]) {\r\n    return this.http.get<PipelineModel>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryGet), {\r\n      params: { appId: this.context.appId.toString(), id: pipelineEntityId.toString() }\r\n    }).pipe(\r\n      map(pipelineModel => {\r\n        // if pipeline is new, populate it with default model\r\n        if (!pipelineModel.DataSources.length) {\r\n          this.buildDefaultModel(pipelineModel, dataSources);\r\n        }\r\n        this.fixPipelineDataSources(pipelineModel.DataSources);\r\n        return pipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private buildDefaultModel(pipelineModel: PipelineModel, dataSources: DataSource[]) {\r\n    const templateDataSources = eavConstants.pipelineDesigner.defaultPipeline.dataSources;\r\n    for (const templateDS of templateDataSources) {\r\n      const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === templateDS.PartAssemblyAndType);\r\n      const pipelineDataSource: PipelineDataSource = {\r\n        Description: '',\r\n        EntityGuid: templateDS.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: dataSource.Name,\r\n        PartAssemblyAndType: templateDS.PartAssemblyAndType,\r\n        VisualDesignerData: templateDS.VisualDesignerData,\r\n      };\r\n      pipelineModel.DataSources.push(pipelineDataSource);\r\n    }\r\n\r\n    pipelineModel.Pipeline.StreamWiring = eavConstants.pipelineDesigner.defaultPipeline.streamWiring;\r\n  }\r\n\r\n  private fixPipelineDataSources(pipelineDataSources: PipelineDataSource[]) {\r\n    const outDataSourceExists = pipelineDataSources.some(\r\n      pipelineDS => pipelineDS.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    );\r\n    if (!outDataSourceExists) {\r\n      const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n      const outDsConst: PipelineDataSource = {\r\n        Description: outDs.Description,\r\n        EntityGuid: outDs.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: outDs.Name,\r\n        PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n        VisualDesignerData: outDs.VisualDesignerData,\r\n      };\r\n      pipelineDataSources.push(outDsConst);\r\n    }\r\n\r\n    for (const pipelineDataSource of pipelineDataSources) {\r\n      pipelineDataSource.VisualDesignerData ??= { Top: 50, Left: 50 };\r\n    }\r\n  }\r\n\r\n  fetchDataSources() {\r\n    return this.http.get<DataSource[]>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDataSources)).pipe(\r\n      map(dataSources => {\r\n        const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n        const outDsConst: DataSource = {\r\n          ContentType: undefined,\r\n          Difficulty: eavConstants.pipelineDesigner.dataSourceDifficulties.default,\r\n          DynamicIn: true,\r\n          DynamicOut: false,\r\n          EnableConfig: undefined,\r\n          HelpLink: undefined,\r\n          Icon: undefined,\r\n          In: outDs.In,\r\n          Name: outDs.Name,\r\n          Out: undefined,\r\n          PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n          PrimaryType: outDs.PrimaryType,\r\n          UiHint: undefined,\r\n        };\r\n        dataSources.push(outDsConst);\r\n        return dataSources;\r\n      }),\r\n    );\r\n  }\r\n\r\n  typeNameFilter(input: string, format: 'className' | 'classFullName') {\r\n    const globalParts = input.split(', ');\r\n\r\n    switch (format) {\r\n      case 'classFullName':\r\n        const classFullName = globalParts[0];\r\n        return classFullName;\r\n      case 'className':\r\n        const classFullNameParts = globalParts[0].split('.');\r\n        const className = classFullNameParts[classFullNameParts.length - 1];\r\n        return className;\r\n      default:\r\n        return input;\r\n    }\r\n  }\r\n\r\n  /** Save the current query and reload entire definition as returned from server */\r\n  savePipeline(pipelineModel: PipelineModel) {\r\n    const pipeline = pipelineModel.Pipeline;\r\n    const dataSources = pipelineModel.DataSources;\r\n\r\n    return this.http.post<PipelineModel>(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiQuerySave),\r\n      { pipeline, dataSources },\r\n      { params: { appId: this.context.appId.toString(), Id: pipeline.EntityId.toString() } }\r\n    ).pipe(\r\n      map(newPipelineModel => {\r\n        this.fixPipelineDataSources(newPipelineModel.DataSources);\r\n        return newPipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  runPipeline(id: number, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryRun), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), top: top.toString() }\r\n    });\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  debugStream(id: number, source: string, sourceOut: string, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDebugStream), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), from: source, out: sourceOut, top: top.toString() }\r\n    });\r\n  }\r\n}\r\n","import { DataSource, PipelineDataSource } from '../models';\r\nimport { GuiTypes, TypeInfo, TypeInfos } from './plumb-editor.models';\r\n\r\nexport const guiTypes: GuiTypes = {\r\n  Cache: { Name: 'Cache', Icon: 'history', UiHint: 'Caching of data' },\r\n  Filter: { Name: 'Filter', Icon: 'filter_list', UiHint: 'Filter data - usually returning less items than came in' },\r\n  Logic: { Name: 'Logic', Icon: 'share', UiHint: 'Logic operations - usually choosing between different streams' },\r\n  Lookup: { Name: 'Lookup', Icon: 'search', UiHint: 'Lookup operation - usually looking for other data based on a criteria' },\r\n  Modify: { Name: 'Modify', Icon: 'edit_attributes', UiHint: 'Modify data - usually changing, adding or removing values' },\r\n  Security: { Name: 'Security', Icon: 'account_circle', UiHint: 'Security - usually limit what the user sees based on his identity' },\r\n  Sort: { Name: 'Sort', Icon: 'sort', UiHint: 'Sort the items' },\r\n  Source: { Name: 'Source', Icon: 'cloud_upload', UiHint: 'Source of new data - usually SQL, CSV or similar' },\r\n  Target: { Name: 'Target', Icon: 'adjust', UiHint: 'Target - usually just a destination of data' },\r\n  Unknown: { Name: 'Unknown', Icon: 'fiber_manual_record', UiHint: 'Unknown type' },\r\n  Debug: { Name: 'Debug', Icon: 'bug_report', UiHint: 'Debugging Tools'},\r\n  System: { Name: 'System', Icon: 'military_tech', UiHint: 'System Data' },\r\n};\r\n\r\nexport function calculateTypeInfos(pipelineDataSources: PipelineDataSource[], dataSources: DataSource[]) {\r\n  const typeInfos: TypeInfos = {};\r\n\r\n  for (const pipelineDataSource of pipelineDataSources) {\r\n    let typeInfo: TypeInfo;\r\n    const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    if (dataSource) {\r\n      typeInfo = { ...(dataSource.PrimaryType ? guiTypes[dataSource.PrimaryType] : guiTypes.Unknown) };\r\n      if (dataSource.Icon != null) { typeInfo.Icon = dataSource.Icon; }\r\n      if (dataSource.DynamicIn != null) { typeInfo.DynamicIn = dataSource.DynamicIn; }\r\n      if (dataSource.DynamicOut != null) { typeInfo.DynamicOut = dataSource.DynamicOut; }\r\n      if (dataSource.HelpLink != null) { typeInfo.HelpLink = dataSource.HelpLink; }\r\n      if (dataSource.EnableConfig != null) { typeInfo.EnableConfig = dataSource.EnableConfig; }\r\n      if (dataSource.UiHint != null) { typeInfo.UiHint = dataSource.UiHint; }\r\n    }\r\n    if (!typeInfo) { typeInfo = { ...guiTypes.Unknown }; }\r\n    typeInfos[pipelineDataSource.EntityGuid] = typeInfo;\r\n  }\r\n\r\n  return typeInfos;\r\n}\r\n","import { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Dictionary } from '../../shared/models/dictionary.model';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { EndpointInfo, PlumbType } from './plumb-editor.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\nexport const dataSrcIdPrefix = 'dataSource_';\r\n\r\nexport class Plumber {\r\n  private instance: PlumbType;\r\n  private lineCount = 0;\r\n  private linePaintDefault = {\r\n    stroke: '#61B7CF',\r\n    strokeWidth: 4,\r\n    outlineStroke: 'white',\r\n    outlineWidth: 2,\r\n  };\r\n  private lineColors = [\r\n    '#009688', '#00bcd4', '#3f51b5', '#9c27b0', '#e91e63',\r\n    '#db4437', '#ff9800', '#60a917', '#60a917', '#008a00',\r\n    '#00aba9', '#1ba1e2', '#0050ef', '#6a00ff', '#aa00ff',\r\n    '#f472d0', '#d80073', '#a20025', '#e51400', '#fa6800',\r\n    '#f0a30a', '#e3c800', '#825a2c', '#6d8764', '#647687',\r\n    '#76608a', '#a0522d',\r\n  ];\r\n  private maxCols = this.lineColors.length - 1;\r\n  private uuidColorMap: Dictionary = {};\r\n  private bulkDelete = false;\r\n\r\n  constructor(\r\n    private jsPlumbRoot: HTMLElement,\r\n    private pipelineModel: PipelineModel,\r\n    private dataSources: DataSource[],\r\n    private onConnectionsChanged: () => void,\r\n    private onDragend: (pipelineDataSourceGuid: string, position: VisualDesignerData) => void,\r\n    private onDebugStream: (stream: PipelineResultStream) => void,\r\n  ) {\r\n    this.instance = window.jsPlumb.getInstance(this.getInstanceDefaults(this.jsPlumbRoot));\r\n    this.instance.batch(() => {\r\n      this.initDomDataSources();\r\n      this.initWirings();\r\n      this.bindEvents();\r\n    });\r\n    // spm NOTE: repaint after initial paint fixes:\r\n    // Error: <svg> attribute width: Expected length, \"-Infinity\".\r\n    this.instance.repaintEverything();\r\n  }\r\n\r\n  destroy() {\r\n    this.instance.reset();\r\n    this.instance.unbindContainer();\r\n  }\r\n\r\n  removeEndpointsOnDataSource(pipelineDataSourceGuid: string) {\r\n    const elementId = dataSrcIdPrefix + pipelineDataSourceGuid;\r\n    this.bulkDelete = true;\r\n    this.instance.batch(() => {\r\n      this.instance.selectEndpoints({ element: elementId }).delete();\r\n    });\r\n    this.bulkDelete = false;\r\n  }\r\n\r\n  getAllConnections() {\r\n    const connectionInfos: StreamWire[] = this.instance.getAllConnections().map((connection: PlumbType) => {\r\n      const wire: StreamWire = {\r\n        From: connection.sourceId.replace(dataSrcIdPrefix, ''),\r\n        Out: connection.endpoints[0].getOverlay('endpointLabel').label,\r\n        To: connection.targetId.replace(dataSrcIdPrefix, ''),\r\n        In: connection.endpoints[1].getOverlay('endpointLabel').label,\r\n      };\r\n      return wire;\r\n    });\r\n    return connectionInfos;\r\n  }\r\n\r\n  getStreamsOut() {\r\n    const streamsOut: string[] = [];\r\n    this.instance.selectEndpoints({ target: dataSrcIdPrefix + 'Out' }).each((endpoint: PlumbType) => {\r\n      streamsOut.push(endpoint.getOverlay('endpointLabel').label);\r\n    });\r\n    const streamsOutStr = streamsOut.join(',');\r\n    return streamsOutStr;\r\n  }\r\n\r\n  putEntityCountOnConnections(result: PipelineResult) {\r\n    result.Streams?.forEach(stream => {\r\n      const sourceElementId = dataSrcIdPrefix + stream.Source;\r\n      const outTargets = ['00000000-0000-0000-0000-000000000000', this.pipelineModel.Pipeline.EntityGuid];\r\n      const targetElementId = outTargets.includes(stream.Target) ? dataSrcIdPrefix + 'Out' : dataSrcIdPrefix + stream.Target;\r\n\r\n      const fromUuid = sourceElementId + '_out_' + stream.SourceOut;\r\n      const toUuid = targetElementId + '_in_' + stream.TargetIn;\r\n\r\n      const sEndp: PlumbType = this.instance.getEndpoint(fromUuid);\r\n      sEndp?.connections\r\n        ?.filter((connection: PlumbType) => connection.endpoints[1].getUuid() === toUuid)\r\n        ?.forEach((connection: PlumbType) => {\r\n          const label = !stream.Error ? stream.Count.toString() : '';\r\n          const cssClass = 'streamEntitiesCount ' + (!stream.Error ? '' : 'streamEntitiesError');\r\n          connection.setLabel({\r\n            label,\r\n            cssClass,\r\n            events: {\r\n              click: (labelOverlay: PlumbType) => {\r\n                if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n                this.onDebugStream(stream);\r\n              },\r\n            },\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  private nextLinePaintStyle(uuid: string) {\r\n    return (\r\n      this.uuidColorMap[uuid] ||\r\n      (this.uuidColorMap[uuid] = Object.assign({}, this.linePaintDefault, { stroke: this.lineColors[this.lineCount++ % this.maxCols] }))\r\n    );\r\n  }\r\n\r\n  private getInstanceDefaults(container: HTMLElement) {\r\n    const defaults = {\r\n      Container: container,\r\n      Connector: ['Bezier', { curviness: 70 }],\r\n      PaintStyle: this.nextLinePaintStyle('dummy'),\r\n      HoverPaintStyle: {\r\n        stroke: '#216477',\r\n        strokeWidth: 4,\r\n        outlineStroke: 'white',\r\n        outlineWidth: 2,\r\n      },\r\n    };\r\n    return defaults;\r\n  }\r\n\r\n  /** Create sources, targets and endpoints */\r\n  private initDomDataSources() {\r\n    for (const pipelineDataSource of this.pipelineModel.DataSources) {\r\n      const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + dataSrcIdPrefix + pipelineDataSource.EntityGuid);\r\n      if (!domDataSource) { continue; }\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      if (!dataSource) { continue; }\r\n\r\n      if (this.pipelineModel.Pipeline.AllowEdit) {\r\n        // WARNING! Must happen before instance.makeSource()\r\n        this.instance.draggable(domDataSource, {\r\n          grid: [20, 20], stop: (event: PlumbType) => {\r\n            const element: HTMLElement = event.el;\r\n            const pipelineDataSourceGuid: string = element.id.replace(dataSrcIdPrefix, '');\r\n            const position: VisualDesignerData = {\r\n              Top: event.finalPos[1],\r\n              Left: event.finalPos[0],\r\n            };\r\n            setTimeout(() => { this.onDragend(pipelineDataSourceGuid, position); });\r\n          }\r\n        });\r\n      }\r\n\r\n      // Add Out-Endpoints from Definition\r\n      dataSource.Out?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, false, pipelineDataSource);\r\n      });\r\n\r\n      // Add In-Endpoints from Definition\r\n      dataSource.In?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, true, pipelineDataSource);\r\n      });\r\n\r\n      // Make DataSource a Target for new Endpoints (if .In is an Array)\r\n      if (dataSource.In) {\r\n        const targetEndpointUnlimited = this.buildTargetEndpoint();\r\n        targetEndpointUnlimited.maxConnections = -1;\r\n        this.instance.makeTarget(domDataSource, targetEndpointUnlimited);\r\n      }\r\n\r\n      if (dataSource.DynamicOut) {\r\n        this.instance.makeSource(domDataSource, this.buildSourceEndpoint(), { filter: '.add-endpoint' });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Create wires */\r\n  private initWirings() {\r\n    this.pipelineModel.Pipeline.StreamWiring?.forEach(wire => {\r\n      // read connections from Pipeline\r\n      const sourceElementId = dataSrcIdPrefix + wire.From;\r\n      const fromUuid = sourceElementId + '_out_' + wire.Out;\r\n      const targetElementId = dataSrcIdPrefix + wire.To;\r\n      const toUuid = targetElementId + '_in_' + wire.In;\r\n\r\n      // Ensure In-Endpoint exist\r\n      if (!this.instance.getEndpoint(fromUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + sourceElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.Out, false, pipelineDataSource);\r\n      }\r\n\r\n      // Ensure Out-Endpoint exist\r\n      if (!this.instance.getEndpoint(toUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + targetElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.In, true, pipelineDataSource);\r\n      }\r\n\r\n      try {\r\n        this.instance.connect({\r\n          uuids: [fromUuid, toUuid],\r\n          paintStyle: this.nextLinePaintStyle(fromUuid),\r\n        });\r\n      } catch (e) {\r\n        console.error({ message: 'Connection failed', from: fromUuid, to: toUuid });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addEndpoint(domDataSource: HTMLElement, endpointName: string, isIn: boolean, pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources.find(d => d.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    const isDynamic = isIn\r\n      ? !dataSource.In?.some(name => this.getEndpointInfo(name, false))\r\n      : !dataSource.Out?.some(name => this.getEndpointInfo(name, false));\r\n    const endpointInfo = this.getEndpointInfo(endpointName, isDynamic);\r\n\r\n    let style: string;\r\n    if (isDynamic) {\r\n      style = 'dynamic';\r\n    } else if (!endpointInfo.required) {\r\n      style = '';\r\n    } else {\r\n      const wireExists = this.pipelineModel.Pipeline.StreamWiring?.some(wire => {\r\n        const targetElementId = dataSrcIdPrefix + wire.To;\r\n        const targetEndpointName = wire.In;\r\n\r\n        return targetElementId === domDataSource.id && targetEndpointName === endpointInfo.name;\r\n      });\r\n      style = wireExists ? '' : 'required';\r\n    }\r\n\r\n    const uuid = domDataSource.id + (isIn ? '_in_' : '_out_') + endpointInfo.name;\r\n    const model = isIn ? this.buildTargetEndpoint(style) : this.buildSourceEndpoint(style);\r\n    // Endpoints on Out-DataSource must be always enabled\r\n    const params = {\r\n      uuid,\r\n      enabled: this.pipelineModel.Pipeline.AllowEdit\r\n        || pipelineDataSource.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    };\r\n\r\n    const endPoint: PlumbType = this.instance.addEndpoint(domDataSource, model, params);\r\n    endPoint.getOverlay('endpointLabel').setLabel(endpointInfo.name);\r\n  }\r\n\r\n  private buildSourceEndpoint(style?: string) {\r\n    const sourceEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'sourceEndpoint ' + style ?? '',\r\n      maxConnections: -1,\r\n      isSource: true,\r\n      anchor: ['Continuous', { faces: ['top'] }],\r\n      overlays: this.getEndpointOverlays(true)\r\n    };\r\n    return sourceEndpoint;\r\n  }\r\n\r\n  private buildTargetEndpoint(style?: string) {\r\n    const targetEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'targetEndpoint ' + style ?? '',\r\n      maxConnections: 1,\r\n      isTarget: true,\r\n      anchor: ['Continuous', { faces: ['bottom'] }],\r\n      overlays: this.getEndpointOverlays(false),\r\n      dropOptions: { hoverClass: 'hover', activeClass: 'active' }\r\n    };\r\n    return targetEndpoint;\r\n  }\r\n\r\n  private getEndpointOverlays(isSource: boolean) {\r\n    return [\r\n      [\r\n        'Label', {\r\n          id: 'endpointLabel',\r\n          location: [0.5, isSource ? 0 : 1],\r\n          label: 'Default',\r\n          cssClass: isSource ? 'endpointSourceLabel' : 'endpointTargetLabel',\r\n          events: {\r\n            click: (labelOverlay: PlumbType) => {\r\n              if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n\r\n              const newLabel = prompt('Rename stream', labelOverlay.label);\r\n              if (!newLabel) { return; }\r\n              labelOverlay.setLabel(newLabel);\r\n              setTimeout(() => { this.onConnectionsChanged(); });\r\n            },\r\n          },\r\n        }\r\n      ]\r\n    ];\r\n  }\r\n\r\n  private bindEvents() {\r\n    this.instance.bind('connectionDetached', (info: PlumbType) => {\r\n      if (this.bulkDelete) { return; }\r\n      const domDataSource: HTMLElement = info.target;\r\n      const pipelineDataSource = this.pipelineModel.DataSources.find(\r\n        pipelineDS => pipelineDS.EntityGuid === domDataSource.id.replace(dataSrcIdPrefix, '')\r\n      );\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      const label: string = info.targetEndpoint.getOverlay('endpointLabel').label;\r\n      const isDynamic = !dataSource.In.some(name => this.getEndpointInfo(name, false).name === label);\r\n      if (isDynamic) {\r\n        this.instance.deleteEndpoint(info.targetEndpoint);\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      } else {\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      }\r\n    });\r\n\r\n    this.instance.bind('connection', (info: PlumbType) => {\r\n      if (info.sourceId === info.targetId) {\r\n        setTimeout(() => {\r\n          this.instance.deleteConnection(info.connection, { fireEvent: false });\r\n          setTimeout(() => { this.onConnectionsChanged(); });\r\n        });\r\n        return;\r\n      }\r\n      const endpointLabel: PlumbType = info.targetEndpoint.getOverlay('endpointLabel');\r\n      const labelPrompt: string = endpointLabel.getLabel();\r\n      const endpoints: PlumbType[] = this.instance.getEndpoints(info.target.id);\r\n      const targetEndpointHasSameLabel = endpoints.some(endpoint => {\r\n        const label: string = endpoint.getOverlay('endpointLabel').getLabel();\r\n        return label === labelPrompt &&\r\n          info.targetEndpoint.id !== endpoint.id &&\r\n          (endpoint.canvas as HTMLCanvasElement).classList.contains('targetEndpoint');\r\n      });\r\n      if (targetEndpointHasSameLabel) {\r\n        endpointLabel.setLabel(`PleaseRename${Math.floor(Math.random() * 99999)}`);\r\n      }\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n  }\r\n\r\n  private getEndpointInfo(endpointName: string, isDynamic: boolean): EndpointInfo {\r\n    let name: string;\r\n    let required: boolean;\r\n\r\n    if (isDynamic) {\r\n      name = endpointName;\r\n      required = false;\r\n    } else {\r\n      const trimmed = endpointName.trim();\r\n      required = trimmed.endsWith('*');\r\n      name = !required ? trimmed : trimmed.substring(0, trimmed.length - 1);\r\n    }\r\n\r\n    const endpointInfo: EndpointInfo = {\r\n      name,\r\n      required,\r\n    };\r\n    return endpointInfo;\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>\r\n      Query Results\r\n      <ng-container *ngIf=\"debugStream\">\r\n        for Stream: \"{{ debugStream.name }}\" on Source: \"{{ debugStream.sourceName }}\"\r\n      </ng-container>\r\n    </div>\r\n    <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<p class=\"dialog-description\">\r\n  The Full result was logged to the Browser Console. Further down you'll find more debug-infos.\r\n  Executed in {{ timeUsed }}ms ({{ ticksUsed }} ticks)\r\n</p>\r\n\r\n<mat-tab-group dynamicHeight color=\"accent\">\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" matTooltip=\"Results\">\r\n      <span>Results</span>\r\n    </div>\r\n\r\n    <p class=\"description\">\r\n      <ng-container *ngIf=\"top === 0\">Showing All results</ng-container>\r\n      <ng-container *ngIf=\"top !== 0\">Showing top {{ top }} results</ng-container>\r\n      <button mat-button *ngFor=\"let option of optionsForTop\" (click)=\"show(option)\">\r\n        Show\r\n        <ng-container *ngIf=\"option === 0\">All</ng-container>\r\n        <ng-container *ngIf=\"option !== 0\">{{ option }}</ng-container>\r\n      </button>\r\n    </p>\r\n    <pre>{{ result | json }}</pre>\r\n  </mat-tab>\r\n\r\n  <mat-tab *ngIf=\"parameters?.length\">\r\n    <div *matTabLabel class=\"mat-tab-label-box\" matTooltip=\"Parameters\">\r\n      <span>Parameters</span>\r\n    </div>\r\n\r\n    <br />\r\n    <ul class=\"description\">\r\n      <li *ngFor=\"let param of parameters\">{{ param }}</li>\r\n    </ul>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" matTooltip=\"Sources\">\r\n      <span>Sources</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Guid</th>\r\n        <th>Type</th>\r\n        <th>Configuration</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let source of sources | keyvalue\">\r\n        <td>\r\n          <pre>{{ source.value.Guid }}</pre>\r\n        </td>\r\n        <td>{{ source.value.Type }}</td>\r\n        <td>\r\n          <ol>\r\n            <li *ngFor=\"let config of source.value.Configuration | keyvalue\">\r\n              <b>{{ config.key }}</b>=<em>{{ config.value }}</em>\r\n            </li>\r\n          </ol>\r\n        </td>\r\n        <td>{{ source.value.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" matTooltip=\"Streams\">\r\n      <span>Streams</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Source</th>\r\n        <th>Target</th>\r\n        <th>Items</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let stream of streams\">\r\n        <td>\r\n          <pre>{{ stream.Source + \":\" + stream.SourceOut }}</pre>\r\n        </td>\r\n        <td>\r\n          <pre>{{ stream.Target + \":\" + stream.TargetIn }}</pre>\r\n        </td>\r\n        <td>{{ stream.Count }}</td>\r\n        <td>{{ stream.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n</mat-tab-group>\r\n","import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DebugStreamInfo, PipelineResultQuery, PipelineResultSources, PipelineResultStream } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { QueryResultDialogData } from './query-result.models';\r\n\r\n@Component({\r\n  selector: 'app-query-result',\r\n  templateUrl: './query-result.component.html',\r\n  styleUrls: ['./query-result.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class QueryResultComponent implements OnInit {\r\n  parameters: string[];\r\n  timeUsed: number;\r\n  ticksUsed: number;\r\n  top: number;\r\n  optionsForTop: number[];\r\n  result: PipelineResultQuery;\r\n  debugStream: DebugStreamInfo;\r\n  sources: PipelineResultSources;\r\n  streams: PipelineResultStream[];\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: QueryResultDialogData,\r\n    private dialogRef: MatDialogRef<QueryResultComponent>,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const pipeline = this.visualQueryService.pipelineModel$.value.Pipeline;\r\n    const params = (pipeline.Params?.split('\\n') ?? []).filter(el => !!el);\r\n    const testParams = (pipeline.TestParameters?.split('\\n') ?? []).filter(el => !!el);\r\n    this.parameters = [].concat(params, testParams);\r\n    this.timeUsed = this.dialogData.result.QueryTimer.Milliseconds;\r\n    this.ticksUsed = this.dialogData.result.QueryTimer.Ticks;\r\n    this.top = this.dialogData.top;\r\n    this.optionsForTop = [25, 100, 1000, 0];\r\n    this.result = this.dialogData.result.Query;\r\n    this.debugStream = this.dialogData.debugStream;\r\n    this.sources = this.dialogData.result.Sources;\r\n    this.streams = this.dialogData.result.Streams;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  show(top: number) {\r\n    if (top === this.top) { return; }\r\n\r\n    if (this.debugStream) {\r\n      this.visualQueryService.debugStream(this.debugStream.original, top);\r\n    } else {\r\n      this.visualQueryService.runPipeline(top);\r\n    }\r\n\r\n    this.closeDialog();\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { StreamErrorData } from '../models';\r\nimport { StreamErrorResultDialogData } from './stream-error-result.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-stream-error-result',\r\n  templateUrl: './stream-error-result.component.html',\r\n  styleUrls: ['./stream-error-result.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class StreamErrorResultComponent implements OnInit {\r\n  errorData: StreamErrorData;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: StreamErrorResultDialogData,\r\n    private dialogRef: MatDialogRef<StreamErrorResultComponent>,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.errorData = this.dialogData.errorData;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openInsights() {\r\n    window.open(window.$2sxc.http.apiUrl('sys/insights/logs?key=web-api'), '_blank');\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Stream Error Results</div>\r\n    <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<br />\r\n\r\n<pre>{{ errorData | json }}</pre>\r\n\r\n<div>\r\n  <button mat-button matTooltip=\"Open 2sxc Insights\" (click)=\"openInsights()\">\r\n    <mat-icon>speed</mat-icon>\r\n    <span>Insights</span>\r\n  </button>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Injectable, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { BehaviorSubject, fromEvent, Subject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../../permissions/services/metadata.service';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\n// tslint:disable-next-line:max-line-length\r\nimport { DataSource, DataSourceMetadata, DebugStreamInfo, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { QueryResultComponent } from '../query-result/query-result.component';\r\nimport { QueryResultDialogData } from '../query-result/query-result.models';\r\nimport { StreamErrorResultComponent } from '../stream-error-result/stream-error-result.component';\r\nimport { StreamErrorResultDialogData } from '../stream-error-result/stream-error-result.models';\r\nimport { QueryDefinitionService } from './query-definition.service';\r\n\r\n@Injectable()\r\nexport class VisualQueryService implements OnDestroy {\r\n  pipelineModel$ = new BehaviorSubject<PipelineModel>(null);\r\n  dataSources$ = new BehaviorSubject<DataSource[]>(null);\r\n  putEntityCountOnConnections$ = new Subject<PipelineResult>();\r\n\r\n  private pipelineId = parseInt(this.route.snapshot.paramMap.get('pipelineId'), 10);\r\n  private doRefresh = false;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private titleService: Title,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private zone: NgZone,\r\n    private metadataService: MetadataService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnDestroy() {\r\n    this.pipelineModel$.complete();\r\n    this.dataSources$.complete();\r\n    this.putEntityCountOnConnections$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  init() {\r\n    this.fetchDataSources(() => this.fetchPipeline());\r\n    this.attachKeyboardSave();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  editPipelineEntity() {\r\n    // save Pipeline, then open Edit Dialog\r\n    this.savePipeline(() => {\r\n      const form: EditForm = {\r\n        items: [{ EntityId: this.pipelineModel$.value.Pipeline.EntityId }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.doRefresh = true;\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n    });\r\n  }\r\n\r\n  saveAndRun(save: boolean, run: boolean) {\r\n    if (save && run) {\r\n      this.savePipeline(() => { this.runPipeline(); });\r\n    } else if (save) {\r\n      this.savePipeline();\r\n    } else if (run) {\r\n      this.runPipeline();\r\n    }\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const newPipelineDataSource: PipelineDataSource = {\r\n      Description: '',\r\n      EntityGuid: 'unsaved' + (pipelineModel.DataSources.length + 1),\r\n      EntityId: undefined,\r\n      Name: dataSource.Name,\r\n      PartAssemblyAndType: dataSource.PartAssemblyAndType,\r\n      VisualDesignerData: { Top: 100, Left: 100 },\r\n    };\r\n    pipelineModel.DataSources.push(newPipelineDataSource);\r\n    this.pipelineModel$.next(pipelineModel);\r\n    this.savePipeline();\r\n  }\r\n\r\n  removeDataSource(pipelineDataSourceGuid: string, connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.DataSources = pipelineModel.DataSources.filter(pipelineDS => pipelineDS.EntityGuid !== pipelineDataSourceGuid);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  renameDataSource(pipelineDataSourceGuid: string, name: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Name = name;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourceDescription(pipelineDataSourceGuid: string, description: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Description = description;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeConnections(connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourcePosition(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    if (!pipelineDataSource) {\r\n      // spm NOTE: fixes problem where dataSource position can't be updated if dataSource with guid unsavedXX gets saved while dragging.\r\n      // Can happen if dataSource is just added and user drags it and save happens.\r\n      return;\r\n    }\r\n    pipelineDataSource.VisualDesignerData = { ...pipelineDataSource.VisualDesignerData, ...position };\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  editDataSource(pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources$.value.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n\r\n    // const contentTypeName = dataSource?.ContentType\r\n    //   ?? '|Config ' + this.queryDefinitionService.typeNameFilter(pipelineDataSource.PartAssemblyAndType, 'classFullName');\r\n    const contentTypeName = dataSource.ContentType;\r\n    const typeId = eavConstants.metadata.entity.type;\r\n    const keyType = eavConstants.keyTypes.guid;\r\n    const key = pipelineDataSource.EntityGuid;\r\n\r\n    // query for existing Entity\r\n    this.metadataService.getMetadata<DataSourceMetadata[]>(typeId, keyType, key, contentTypeName).subscribe(metadata => {\r\n      // edit existing Entity\r\n      if (metadata.length) {\r\n        const form: EditForm = {\r\n          items: [{ EntityId: metadata[0].Id }],\r\n        };\r\n        const formUrl = convertFormToUrl(form);\r\n        this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        return;\r\n      }\r\n\r\n      // Check if the type exists, and if yes, create new Entity\r\n      this.contentTypesService.retrieveContentType(contentTypeName /*, { ignoreErrors: 'true' } */).subscribe({\r\n        next: contentType => {\r\n          const form: EditForm = {\r\n            items: [{\r\n              ContentTypeName: contentTypeName,\r\n              For: {\r\n                Target: eavConstants.metadata.entity.target,\r\n                Guid: key,\r\n              }\r\n            }],\r\n          };\r\n          const formUrl = convertFormToUrl(form);\r\n          this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        },\r\n        error: (error: HttpErrorResponse) => {\r\n          alert('Server reports error - this usually means that this data-source doesn\\'t have any configuration');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private savePipeline(callback?: () => void) {\r\n    this.snackBar.open('Saving...');\r\n    this.queryDefinitionService.savePipeline(this.pipelineModel$.value).subscribe({\r\n      next: pipelineModel => {\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.pipelineModel$.next(pipelineModel);\r\n        if (callback != null) { callback(); }\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Save Pipeline failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  runPipeline(top = 25) {\r\n    this.snackBar.open('Running query...');\r\n    this.queryDefinitionService.runPipeline(this.pipelineModel$.value.Pipeline.EntityId, top).subscribe({\r\n      next: pipelineResult => {\r\n        this.snackBar.open('Query worked', null, { duration: 2000 });\r\n        this.showQueryResult(pipelineResult, top);\r\n        console.warn(pipelineResult);\r\n        // push cloned pipelineModel to reset jsPlumb\r\n        this.pipelineModel$.next(cloneDeep(this.pipelineModel$.value));\r\n        setTimeout(() => { this.putEntityCountOnConnections$.next(pipelineResult); });\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Query failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  debugStream(stream: PipelineResultStream, top = 25) {\r\n    if (stream.Error) {\r\n      this.showStreamErrorResult(stream);\r\n      return;\r\n    }\r\n\r\n    if (stream.Count === 0) { return; }\r\n\r\n    this.snackBar.open('Running stream...');\r\n    const pipelineId = this.pipelineModel$.value.Pipeline.EntityId;\r\n    this.queryDefinitionService.debugStream(pipelineId, stream.Source, stream.SourceOut, top).subscribe({\r\n      next: streamResult => {\r\n        this.snackBar.open('Stream worked', null, { duration: 2000 });\r\n        const pipelineDataSource = this.pipelineModel$.value.DataSources.find(ds => ds.EntityGuid === stream.Source);\r\n        const debugStream: DebugStreamInfo = {\r\n          name: stream.SourceOut,\r\n          source: stream.Source,\r\n          sourceName: pipelineDataSource.Name,\r\n          original: stream,\r\n        };\r\n        this.showQueryResult(streamResult, top, debugStream);\r\n        console.warn(streamResult);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Stream failed', null, { duration: 2000 });\r\n      },\r\n    });\r\n  }\r\n\r\n  private fetchPipeline(reloadingSnackBar = false) {\r\n    if (reloadingSnackBar) {\r\n      this.snackBar.open('Reloading query, please wait...');\r\n    }\r\n    this.queryDefinitionService.fetchPipeline(this.pipelineId, this.dataSources$.value).subscribe(pipelineModel => {\r\n      if (reloadingSnackBar) {\r\n        this.snackBar.open('Query reloaded', null, { duration: 2000 });\r\n      }\r\n      this.pipelineModel$.next(pipelineModel);\r\n      this.titleService.setTitle(`${pipelineModel.Pipeline.Name} - Visual Query`);\r\n    });\r\n  }\r\n\r\n  private showQueryResult(result: PipelineResult, top: number, debugStream?: DebugStreamInfo) {\r\n    const dialogData: QueryResultDialogData = {\r\n      result,\r\n      debugStream,\r\n      top,\r\n    };\r\n    this.dialog.open(QueryResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private showStreamErrorResult(stream: PipelineResultStream) {\r\n    const dialogData: StreamErrorResultDialogData = {\r\n      errorData: stream.ErrorData,\r\n    };\r\n    this.dialog.open(StreamErrorResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private fetchDataSources(callback?: () => void) {\r\n    this.queryDefinitionService.fetchDataSources().subscribe(dataSources => {\r\n      this.dataSources$.next(dataSources);\r\n      callback();\r\n    });\r\n  }\r\n\r\n  private attachKeyboardSave() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent(window, 'keydown').pipe(\r\n          filter(() => !this.route.snapshot.firstChild),\r\n          filter((event: KeyboardEvent) => {\r\n            const CTRL_S = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.keyCode === 83;\r\n            return CTRL_S;\r\n          }),\r\n        ).subscribe(event => {\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.savePipeline(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n        filter(() => {\r\n          const refresh = this.doRefresh;\r\n          this.doRefresh = false;\r\n          return refresh;\r\n        }),\r\n      ).subscribe(() => {\r\n        this.fetchPipeline(true);\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div #domRoot id=\"pipeline-root\" *ngIf=\"(templateModel$ | async) as templateModel\">\r\n  <!-- do not use trackBy, jsPlumb drag stops working properly after delete -->\r\n  <ng-container *ngIf=\"!hardReset\">\r\n    <div #domDataSource *ngFor=\"let dataSource of templateModel.pipelineDataSources\"\r\n      [id]=\"dataSrcIdPrefix + dataSource.EntityGuid\" class=\"dataSource\" [ngStyle]=\"{\r\n        'top': dataSource.VisualDesignerData.Top + 'px',\r\n        'left': dataSource.VisualDesignerData.Left + 'px',\r\n        'min-width': dataSource.VisualDesignerData.Width ? dataSource.VisualDesignerData.Width + 'px' : null\r\n      }\">\r\n\r\n      <div class=\"actions left\">\r\n        <mat-icon class=\"type-info\" [title]=\"templateModel.typeInfos[dataSource.EntityGuid].UiHint\">\r\n          {{ templateModel.typeInfos[dataSource.EntityGuid].Icon }}\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"configure\" title=\"Configure data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].EnableConfig\"\r\n          (click)=\"configureDataSource(dataSource)\">\r\n          settings\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"help\" title=\"Help for this data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.typeInfos[dataSource.EntityGuid].HelpLink\"\r\n          (click)=\"openHelp(templateModel.typeInfos[dataSource.EntityGuid].HelpLink)\">\r\n          help_outline\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"actions right\">\r\n        <mat-icon class=\"delete\" title=\"Delete\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && !isOutDataSource(dataSource)\" (click)=\"remove(dataSource)\">\r\n          delete\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"name\" title=\"Click to edit name\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editName(dataSource)\">\r\n        <span>{{ dataSource.Name || '(no name)' }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br />\r\n\r\n      <div class=\"description\" title=\"Click to edit description\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editDescription(dataSource)\">\r\n        <span>{{ dataSource.Description }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br />\r\n\r\n      <div class=\"typename\" [title]=\"dataSource.PartAssemblyAndType\">\r\n        Type: {{ getTypeName(dataSource.PartAssemblyAndType) }}\r\n      </div>\r\n\r\n      <mat-icon class=\"add-endpoint\" title=\"Drag a new Out-Connection\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicOut\">\r\n        arrow_drop_up\r\n      </mat-icon>\r\n\r\n      <mat-icon class=\"many-in\" title=\"This data source supports multiple In-Connections\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicIn\">\r\n        arrow_drop_up\r\n      </mat-icon>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { loadScripts } from '../../shared/helpers/load-scripts.helper';\r\nimport { PipelineDataSource, PipelineResultStream, VisualDesignerData } from '../models';\r\nimport { QueryDefinitionService } from '../services/query-definition.service';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateTypeInfos } from './plumb-editor.helpers';\r\nimport { PlumbEditorTemplateModel } from './plumb-editor.models';\r\nimport { dataSrcIdPrefix, Plumber } from './plumber.helper';\r\n\r\nconst jsPlumbUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.14.5/js/jsplumb.min.js';\r\n\r\n@Component({\r\n  selector: 'app-plumb-editor',\r\n  templateUrl: './plumb-editor.component.html',\r\n  styles: [':host { display: block; width: 100%; height: 100%; }'],\r\n  styleUrls: ['./plumb-editor.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PlumbEditorComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('domRoot') private domRootRef: ElementRef<HTMLDivElement>;\r\n  @ViewChildren('domDataSource') private domDataSourcesRef: QueryList<ElementRef<HTMLDivElement>>;\r\n\r\n  dataSrcIdPrefix = dataSrcIdPrefix;\r\n  templateModel$: Observable<PlumbEditorTemplateModel>;\r\n  hardReset = false;\r\n\r\n  private plumber: Plumber;\r\n  private scriptLoaded$ = new BehaviorSubject(false);\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private visualQueryService: VisualQueryService,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    loadScripts([{ test: 'jsPlumb', src: jsPlumbUrl }], () => {\r\n      this.scriptLoaded$.next(true);\r\n    });\r\n\r\n    this.subscription.add(\r\n      this.visualQueryService.putEntityCountOnConnections$.subscribe(result => {\r\n        this.plumber.putEntityCountOnConnections(result);\r\n      })\r\n    );\r\n\r\n    this.templateModel$ = combineLatest([this.visualQueryService.pipelineModel$, this.visualQueryService.dataSources$]).pipe(\r\n      map(([pipelineModel, dataSources]) => {\r\n        if (pipelineModel == null || dataSources == null) { return; }\r\n\r\n        // workaround for jsPlumb not working with dom elements which it initialized on previously.\r\n        // This wipes dom entirely and gives us new elements\r\n        this.hardReset = true;\r\n        this.changeDetectorRef.detectChanges();\r\n        this.hardReset = false;\r\n        const templateModel: PlumbEditorTemplateModel = {\r\n          pipelineDataSources: pipelineModel.DataSources,\r\n          typeInfos: calculateTypeInfos(pipelineModel.DataSources, dataSources),\r\n          allowEdit: pipelineModel.Pipeline.AllowEdit,\r\n        };\r\n        return templateModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // https://stackoverflow.com/questions/37087864/execute-a-function-when-ngfor-finished-in-angular-2/37088348#37088348\r\n    const domDataSourcesLoaded$ = this.domDataSourcesRef.changes.pipe(map(() => true));\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.scriptLoaded$, domDataSourcesLoaded$]).subscribe(([scriptLoaded, domDataSourcesLoaded]) => {\r\n        if (!scriptLoaded || !domDataSourcesLoaded) { return; }\r\n\r\n        this.plumber?.destroy();\r\n        this.plumber = new Plumber(\r\n          this.domRootRef.nativeElement,\r\n          this.visualQueryService.pipelineModel$.value,\r\n          this.visualQueryService.dataSources$.value,\r\n          this.onConnectionsChanged.bind(this),\r\n          this.onDragend.bind(this),\r\n          this.onDebugStream.bind(this),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.plumber?.destroy();\r\n    this.scriptLoaded$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  onConnectionsChanged() {\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.changeConnections(connections, streamsOut);\r\n  }\r\n\r\n  onDragend(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    this.visualQueryService.changeDataSourcePosition(pipelineDataSourceGuid, position);\r\n  }\r\n\r\n  onDebugStream(stream: PipelineResultStream) {\r\n    this.visualQueryService.debugStream(stream);\r\n  }\r\n\r\n  configureDataSource(dataSource: PipelineDataSource) {\r\n    // ensure dataSource entity is saved\r\n    if (dataSource.EntityGuid.includes('unsaved')) {\r\n      this.visualQueryService.saveAndRun(true, false);\r\n    } else {\r\n      this.visualQueryService.editDataSource(dataSource);\r\n    }\r\n  }\r\n\r\n  getTypeName(partAssemblyAndType: string) {\r\n    if (partAssemblyAndType.length === 36 && (partAssemblyAndType.split('-').length - 1) === 4) {\r\n      // partAssemblyAndType is guid\r\n      return partAssemblyAndType.substring(0, 10) + '…';\r\n    }\r\n    return this.queryDefinitionService.typeNameFilter(partAssemblyAndType, 'className');\r\n  }\r\n\r\n  isOutDataSource(pipelineDataSource: PipelineDataSource) {\r\n    return pipelineDataSource.PartAssemblyAndType === eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType;\r\n  }\r\n\r\n  remove(pipelineDataSource: PipelineDataSource) {\r\n    if (!confirm(`Delete ${pipelineDataSource.Name} data source?`)) { return; }\r\n\r\n    this.plumber.removeEndpointsOnDataSource(pipelineDataSource.EntityGuid);\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.removeDataSource(pipelineDataSource.EntityGuid, connections, streamsOut);\r\n  }\r\n\r\n  openHelp(url: string) {\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  editName(dataSource: PipelineDataSource) {\r\n    const newName = prompt('Rename data source', dataSource.Name)?.trim();\r\n    if (newName == null || newName === '') { return; }\r\n\r\n    this.visualQueryService.renameDataSource(dataSource.EntityGuid, newName);\r\n  }\r\n\r\n  editDescription(dataSource: PipelineDataSource) {\r\n    const newDescription = prompt('Edit description', dataSource.Description)?.trim();\r\n    if (newDescription == null) { return; }\r\n\r\n    this.visualQueryService.changeDataSourceDescription(dataSource.EntityGuid, newDescription);\r\n  }\r\n\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"(pipelineModel$ | async) as pipelineModel\">\r\n\r\n  <div class=\"wrapper\">\r\n    <div class=\"actions\">\r\n      <button mat-raised-button class=\"action\" color=\"accent\" (click)=\"saveAndRunQuery(true, true)\">\r\n        Save and run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(false, true)\">\r\n        Run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(true, false)\">\r\n        Save\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">\r\n        <div>Query Parameters</div>\r\n        <div>\r\n          <button mat-icon-button matTooltip=\"Edit parameters\" (click)=\"editPipeline()\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button matTooltip=\"Query Params Docs\" (click)=\"openParamsHelp()\">\r\n            <mat-icon>info</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.Params?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.Params?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">Test Parameters</div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.TestParameters?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.TestParameters?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"(warnings$ | async) as warnings\">\r\n      <div class=\"warnings\" *ngIf=\"warnings.length\">\r\n        <div class=\"title\">\r\n          <span>Warnings</span>\r\n          <mat-icon style=\"color: red\">warning</mat-icon>\r\n        </div>\r\n        <ol class=\"values\">\r\n          <li *ngFor=\"let warning of warnings\" [innerHTML]=\"warning\">\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"description\" *ngIf=\"pipelineModel.Pipeline.Description\">\r\n      <div class=\"title\">Query Description</div>\r\n      <div>{{ pipelineModel.Pipeline.Description }}</div>\r\n    </div>\r\n\r\n    <div class=\"footer-actions\">\r\n      <button mat-raised-button class=\"action\" (click)=\"openRestApi()\">\r\n        Use in JSON / REST API\r\n        <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GoToDevRest } from '../../dev-rest';\r\nimport { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateWarnings } from './run-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-run-explorer',\r\n  templateUrl: './run-explorer.component.html',\r\n  styleUrls: ['./run-explorer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RunExplorerComponent implements OnInit {\r\n  pipelineModel$: Observable<PipelineModel>;\r\n  warnings$: Observable<string[]>;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.pipelineModel$ = this.visualQueryService.pipelineModel$;\r\n    this.warnings$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => calculateWarnings(pipelineModel, this.context)),\r\n    );\r\n  }\r\n\r\n  editPipeline() {\r\n    this.visualQueryService.editPipelineEntity();\r\n  }\r\n\r\n  openParamsHelp() {\r\n    window.open('https://r.2sxc.org/QueryParams', '_blank');\r\n  }\r\n\r\n  saveAndRunQuery(save: boolean, run: boolean) {\r\n    this.visualQueryService.saveAndRun(save, run);\r\n  }\r\n\r\n  openRestApi() {\r\n    const queryGuid = this.visualQueryService.pipelineModel$.value.Pipeline.EntityGuid;\r\n    this.router.navigate([GoToDevRest.goToQuery(queryGuid)], { relativeTo: this.route });\r\n  }\r\n}\r\n","import { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\n\r\n/**\r\n * Check if there are special warnings the developer should know.\r\n * Typically when the test ModuleId is different from the one we're currently working on\r\n */\r\nexport function calculateWarnings(pipelineModel: PipelineModel, context: Context) {\r\n  const warnings: string[] = [];\r\n\r\n  try {\r\n    const queryParams = pipelineModel.Pipeline.Params?.split(/\\r?\\n/) || [];\r\n    const testParams = pipelineModel.Pipeline.TestParameters?.split(/\\r?\\n/) || [];\r\n\r\n    queryParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Query Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const paramSyntax = /^[a-zA-Z0-9]+=(.*)$/gmi;\r\n      const matched = paramSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Query Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>key=value</code> <br>\r\n          or resolve to a token like: <br>\r\n          <code>key=[source:key]</code>\r\n        `);\r\n      }\r\n    });\r\n\r\n    testParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Test Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const testParamSyntax = /^\\[[a-zA-Z]+:[a-zA-Z0-9]+\\]=(.*)$/gmi;\r\n      const matched = testParamSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Test Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>[source:key]=value</code>\r\n        `);\r\n      }\r\n\r\n      // Check if we should show the warning about the test ModuleId.\r\n      // This is because in the old days, the ModuleId wasn't auto-filled, so people had to add it as a test value.\r\n      // Now it's not necessary any more\r\n      const midRegex = /^\\[module:moduleid\\]=([0-9]*)$/gmi;\r\n      const midMatch = midRegex.exec(param); // capture the ModuleId\r\n      if (midMatch) {\r\n        const testMid = midMatch[1];\r\n        const urlMid = context.moduleId.toString();\r\n        if (testMid !== urlMid) {\r\n          warnings.push(`\r\n            Your test ModuleId (${testMid}) is different from the current ModuleId (${urlMid}).\r\n            Note that 2sxc 9.33 automatically provides the ModuleId - so you usually do not need to set it any more.\r\n          `);\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Something went wrong in calculateWarnings for params', error);\r\n  }\r\n\r\n  return warnings;\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"sorted$ | async as sorted\">\r\n\r\n  <mat-slide-toggle labelPosition=\"before\" (change)=\"toggleDifficulty($event)\">\r\n    Show Advanced\r\n  </mat-slide-toggle>\r\n\r\n  <ng-container *ngFor=\"let group of sorted | keyvalue; trackBy: trackGroups\">\r\n    <div class=\"collapsible\" [matTooltip]=\"guiTypes[group.key].UiHint || group.key\" matTooltipShowDelay=\"750\"\r\n      (click)=\"toggleItem(group.key)\">\r\n      <mat-icon>{{ guiTypes[group.key].Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n      <span>{{ group.key }}</span>\r\n    </div>\r\n\r\n    <div class=\"list\" *ngIf=\"toggledItems.includes(group.key)\">\r\n      <div class=\"list-item\" *ngFor=\"let dataSource of group.value; trackBy: trackDataSources\"\r\n        [matTooltip]=\"dataSource.UiHint || dataSource.Name\" matTooltipShowDelay=\"750\"\r\n        (click)=\"addDataSource(dataSource)\">\r\n        <mat-icon>{{ dataSource.Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n        <span>{{ dataSource.Name }}</span>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { KeyValue } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\nimport { guiTypes } from '../plumb-editor/plumb-editor.helpers';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { filterAndSortDataSources } from './add-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-add-explorer',\r\n  templateUrl: './add-explorer.component.html',\r\n  styleUrls: ['./add-explorer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AddExplorerComponent implements OnInit, OnDestroy {\r\n  sorted$: Observable<SortedDataSources>;\r\n  toggledItems: string[] = [];\r\n  guiTypes = guiTypes;\r\n\r\n  private difficulties = eavConstants.pipelineDesigner.dataSourceDifficulties;\r\n  private difficulty$ = new BehaviorSubject(this.difficulties.default);\r\n\r\n  constructor(private visualQueryService: VisualQueryService) { }\r\n\r\n  ngOnInit() {\r\n    this.sorted$ = combineLatest([this.visualQueryService.dataSources$, this.difficulty$]).pipe(\r\n      map(([dataSources, difficulty]) => filterAndSortDataSources(dataSources, difficulty)),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.difficulty$.complete();\r\n  }\r\n\r\n  toggleDifficulty(event: MatSlideToggleChange) {\r\n    const difficulty = event.checked ? this.difficulties.advanced : this.difficulties.default;\r\n    this.difficulty$.next(difficulty);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    this.visualQueryService.addDataSource(dataSource);\r\n  }\r\n\r\n  toggleItem(item: string) {\r\n    GeneralHelpers.toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n  trackGroups(index: number, type: KeyValue<string, DataSource[]>) {\r\n    return type.key;\r\n  }\r\n\r\n  trackDataSources(index: number, dataSource: DataSource) {\r\n    return dataSource.PartAssemblyAndType;\r\n  }\r\n}\r\n","import cloneDeep from 'lodash-es/cloneDeep';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\n\r\nexport function filterAndSortDataSources(dataSources: DataSource[], maxDifficulty: number) {\r\n  if (!dataSources) { return; }\r\n\r\n  const cloned = cloneDeep(dataSources);\r\n\r\n  const filtered = cloned.filter(dataSource =>\r\n    dataSource.Difficulty <= maxDifficulty\r\n    && dataSource.PartAssemblyAndType !== eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType\r\n  );\r\n\r\n  filtered.sort((a, b) => a.Name.toLocaleLowerCase().localeCompare(b.Name.toLocaleLowerCase()));\r\n\r\n  const sorted: SortedDataSources = {};\r\n  for (const dataSource of filtered) {\r\n    const type = dataSource.PrimaryType;\r\n    if (sorted[type]) {\r\n      sorted[type].push(dataSource);\r\n    } else {\r\n      sorted[type] = [dataSource];\r\n    }\r\n  }\r\n\r\n  return sorted;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit } from '../../../../edit/edit.matcher';\r\nimport { GoToDevRest } from '../dev-rest';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: VisualQueryComponent, children: [\r\n      GoToDevRest.route,\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule),\r\n        data: { history: false },\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class VisualQueryRoutingModule { }\r\n","import { ChangeDetectionStrategy, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Context } from '../shared/services/context';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { VisualQueryService } from './services/visual-query.service';\r\n\r\n@Component({\r\n  selector: 'app-visual-query',\r\n  templateUrl: './visual-query.component.html',\r\n  styleUrls: ['./visual-query.component.scss'],\r\n  providers: [VisualQueryService],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class VisualQueryComponent implements OnInit {\r\n  @ViewChild(PlumbEditorComponent) plumbEditor: PlumbEditorComponent;\r\n\r\n  explorer = {\r\n    run: 'run',\r\n    add: 'add'\r\n  };\r\n  activeExplorer = this.explorer.run;\r\n\r\n  constructor(private context: Context, private route: ActivatedRoute, private visualQueryService: VisualQueryService) {\r\n    this.context.init(this.route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.visualQueryService.init();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    this.activeExplorer = (this.activeExplorer === explorer) ? null : explorer;\r\n  }\r\n\r\n  openHelp() {\r\n    window.open('https://r.2sxc.org/visual-query', '_blank');\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>\r\n\r\n<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" matTooltip=\"Run\" [ngClass]=\"{ 'active': activeExplorer === explorer.run }\"\r\n      (click)=\"toggleExplorer(explorer.run)\">\r\n      <mat-icon>play_arrow</mat-icon>\r\n    </div>\r\n    <div class=\"button\" matTooltip=\"Add\" [ngClass]=\"{ 'active': activeExplorer === explorer.add }\"\r\n      (click)=\"toggleExplorer(explorer.add)\">\r\n      <mat-icon>add</mat-icon>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"button\" matTooltip=\"Help\" (click)=\"openHelp()\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-run-explorer [hidden]=\"activeExplorer !== explorer.run\"></app-run-explorer>\r\n\r\n  <app-add-explorer [hidden]=\"activeExplorer !== explorer.add\"></app-add-explorer>\r\n\r\n  <app-plumb-editor></app-plumb-editor>\r\n</div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../permissions/services/metadata.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { AddExplorerComponent } from './add-explorer/add-explorer.component';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { QueryResultComponent } from './query-result/query-result.component';\r\nimport { RunExplorerComponent } from './run-explorer/run-explorer.component';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { StreamErrorResultComponent } from './stream-error-result/stream-error-result.component';\r\nimport { VisualQueryRoutingModule } from './visual-query-routing.module';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n    QueryResultComponent,\r\n    StreamErrorResultComponent,\r\n  ],\r\n  entryComponents: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n    QueryResultComponent,\r\n    StreamErrorResultComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedComponentsModule,\r\n    VisualQueryRoutingModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    QueryDefinitionService,\r\n    MetadataService,\r\n    ContentTypesService,\r\n  ],\r\n})\r\nexport class VisualQueryModule { }\r\n"],"sourceRoot":"webpack:///"}