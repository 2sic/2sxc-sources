{"version":3,"sources":["./projects/ng-dialogs/src/app/app-administration/services/content-types.service.ts","./projects/ng-dialogs/src/app/content-export/services/content-export.service.ts","./projects/ng-dialogs/src/app/content-items/services/content-items.service.ts","./projects/ng-dialogs/src/app/content-items/services/entities.service.ts","./projects/ng-dialogs/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/ng-dialogs/src/app/shared/helpers/file-to-base64.helper.ts"],"names":["webApiTypeRoot","http","context","dnnContext","apiUrl","name","this","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","scopes","Object","keys","map","key","value","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService","exportContent","values","selectedIds","selectedIdsString","join","url","language","defaultLanguage","contentTypeStaticName","recordExport","resourcesReferences","languageReferences","window","open","exportJson","typeName","exportEntity","id","prefix","metadata","ContentExportService","getAll","getColumns","importItem","file","fileBase64","AppId","ContentBase64","ContentItemsService","type","tryForce","force","EntitiesService","webApiFieldsAll","webApiFieldsRoot","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","description","Description","getReservedNames","getFields","fields","fld","Metadata","md","typeMd","inputMd","InputType","merged","All","reOrder","idArray","Id","order","JSON","stringify","setTitle","item","attributeId","rename","fieldId","newName","IsTitle","Error","add","newField","ContentTypeId","Index","SortOrder","updateInputType","field","ContentTypesFieldsService","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText"],"mappings":"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","file":"projects_ng-dialogs_src_app_content-export_services_content-export_service_ts-projects_ng-dia-50fc89.a23b275cabb94697ad16.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentExport } from '../models/content-export.model';\r\n\r\n@Injectable()\r\nexport class ContentExportService {\r\n  constructor(private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Download')\r\n      + '?appId=' + this.context.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiTypeRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  getFields(contentType: ContentType) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"sourceRoot":"webpack:///"}