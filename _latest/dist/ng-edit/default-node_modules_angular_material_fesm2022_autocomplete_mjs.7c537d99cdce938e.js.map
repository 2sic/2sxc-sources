{"version":3,"file":"default-node_modules_angular_material_fesm2022_autocomplete_mjs.7c537d99cdce938e.js","mappings":"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","names":["_c0","_class2_ng_template_0_Template","rf","ctx","i0","formFieldId_r1","id","ctx_r0","_classList","isOpen","ariaLabel","_getPanelAriaLabelledby","_c1","panelAnimation","trigger","state","style","opacity","transform","transition","group","animate","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","this","_MatAutocompleteMixinBase","mixinDisableRipple","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","autoSelectActiveOption","hideSingleSelectionIndicator","_MatAutocompleteBase","_class","_isOpen","showPanel","_setColor","value","_color","_setThemeClasses","_autoActiveFirstOption","coerceBooleanProperty","_autoSelectActiveOption","classList","length","coerceStringArray","reduce","className","_setVisibilityClasses","_elementRef","nativeElement","_changeDetectorRef","_defaults","platform","super","_activeOptionChanges","Subscription","EMPTY","displayWith","optionSelected","EventEmitter","opened","closed","optionActivated","inertGroups","SAFARI","ngAfterContentInit","_keyManager","ActiveDescendantKeyManager","options","withWrap","skipPredicate","_skipPredicate","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","destroy","unsubscribe","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","labelId","ariaLabelledby","_visibleClass","_hiddenClass","disabled","ɵfac","t","i1","ɵdir","type","viewQuery","TemplateRef","_t","template","first","inputs","panelWidth","outputs","features","MatAutocomplete","_class2","arguments","_hideSingleSelectionIndicator","_syncParentProperties","_option","ɵ_class2_BaseFactory","ɵcmp","selectors","contentQueries","dirIndex","MAT_OPTGROUP","MatOption","optionGroups","hostAttrs","disableRipple","exportAs","provide","MAT_OPTION_PARENT_COMPONENT","useExisting","ngContentSelectors","decls","vars","consts","dependencies","i2","styles","encapsulation","data","animation","changeDetection","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","multi","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","_MatAutocompleteTriggerBase","_class5","autocompleteDisabled","_autocompleteDisabled","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","Subject","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","defer","autocomplete","changes","pipe","startWith","switchMap","merge","map","onSelectionChange","onStable","take","_handlePanelKeydown","keyCode","ESCAPE","hasModifierKey","UP_ARROW","_pendingAutoselectedOption","_updateNativeInputValue","_valueBeforeAutoSelection","next","_resetActiveItem","stopPropagation","preventDefault","_trackedModal","_scrollStrategy","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","_clearFromModal","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","run","hasAttached","detach","_closingActionsSubscription","_updatePanelState","detectChanges","panelClosingActions","tabOut","filter","_getOutsideClickStream","detachments","of","MatOptionSelectionChange","activeOption","activeItem","fromEvent","clickTarget","_getEventTarget","formField","customOrigin","connectedTo","elementRef","contains","overlayElement","writeValue","Promise","resolve","then","_assignOptionValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_handleKeydown","hasModifier","ENTER","_selectViaInteraction","prevActiveItem","isArrowKey","DOWN_ARROW","TAB","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_previousValue","_clearPreviousSelectedOption","_handleFocus","_handleClick","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","tap","reapplyLastPosition","delay","wasOpen","_setValueAndClose","dispose","toDisplay","_control","toSelect","focus","skip","emitEvent","forEach","selected","deselect","overlayRef","setOrigin","_getConnectedElement","updateSize","width","_getPanelWidth","_portal","TemplatePortal","getLabelId","create","_getOverlayConfig","attach","color","_applyModalPanelOwnership","_keydownSubscription","keydownEvents","_outsideClickSubscription","outsidePointerEvents","OverlayConfig","positionStrategy","_getOverlayPosition","direction","undefined","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","firstEnabledOptionIndex","get","setActiveItem","element","readOnly","defaultView","labelCount","_countGroupLabelsBeforeOption","_getHostElement","newScrollPosition","_getOptionScrollPosition","offsetTop","offsetHeight","modal","closest","panelId","removeAriaReferencedId","addAriaReferencedId","i1$1","i2$1","MAT_FORM_FIELD","DOCUMENT","i3","_class6","ɵ_class6_BaseFactory","hostVars","hostBindings","$event","toString","MatAutocompleteModule","_class7","ɵmod","ɵinj","providers","imports","OverlayModule","MatOptionModule","MatCommonModule","CommonModule","CdkScrollableModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/autocomplete.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, TemplateRef, Directive, Inject, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ActiveDescendantKeyManager, removeAriaReferencedId, addAriaReferencedId } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, group, animate } from '@angular/animations';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { ESCAPE, hasModifierKey, UP_ARROW, ENTER, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/bidi';\n\n// Animation values come from\n// https://github.com/material-components/material-components-web/blob/master/packages/mdc-menu-surface/_mixins.scss\n// TODO(mmalerba): Ideally find a way to import the values from MDC's code.\nconst panelAnimation = trigger('panelAnimation', [\n    state('void, hidden', style({\n        opacity: 0,\n        transform: 'scaleY(0.8)',\n    })),\n    transition(':enter, hidden => visible', [\n        group([\n            animate('0.03s linear', style({ opacity: 1 })),\n            animate('0.12s cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scaleY(1)' })),\n        ]),\n    ]),\n    transition(':leave, visible => hidden', [animate('0.075s linear', style({ opacity: 0 }))]),\n]);\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {\n});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        autoActiveFirstOption: false,\n        autoSelectActiveOption: false,\n        hideSingleSelectionIndicator: false,\n    };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n        this._color = value;\n        this._setThemeClasses(this._classList);\n    }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() {\n        return this._autoActiveFirstOption;\n    }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /** Whether the active option should be selected as the user is navigating. */\n    get autoSelectActiveOption() {\n        return this._autoSelectActiveOption;\n    }\n    set autoSelectActiveOption(value) {\n        this._autoSelectActiveOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._setThemeClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    constructor(_changeDetectorRef, _elementRef, _defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._defaults = _defaults;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = platform?.SAFARI || false;\n        this._autoActiveFirstOption = !!_defaults.autoActiveFirstOption;\n        this._autoSelectActiveOption = !!_defaults.autoSelectActiveOption;\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withWrap()\n            .skipPredicate(this._skipPredicate);\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n    /** Sets the theming classes on a classlist based on the theme of the panel. */\n    _setThemeClasses(classList) {\n        classList['mat-primary'] = this._color === 'primary';\n        classList['mat-warn'] = this._color === 'warn';\n        classList['mat-accent'] = this._color === 'accent';\n    }\n    _skipPredicate(option) {\n        return option.disabled;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteBase, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatAutocompleteBase, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", autoSelectActiveOption: \"autoSelectActiveOption\", panelWidth: \"panelWidth\", classList: [\"class\", \"classList\"] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }, { type: i1.Platform }]; }, propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input\n            }], autoSelectActiveOption: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }] } });\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-mdc-autocomplete-visible';\n        this._hiddenClass = 'mat-mdc-autocomplete-hidden';\n        this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate(_option) {\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocomplete, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatAutocomplete, selector: \"mat-autocomplete\", inputs: { disableRipple: \"disableRipple\", hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\" }, host: { attributes: { \"ngSkipHydration\": \"\" }, classAttribute: \"mat-mdc-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }], exportAs: [\"matAutocomplete\"], usesInheritance: true, ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [panelAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', inputs: ['disableRipple'], host: {\n                        'class': 'mat-mdc-autocomplete',\n                        'ngSkipHydration': '',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], animations: [panelAnimation], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"] }]\n        }], propDecorators: { optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], hideSingleSelectionIndicator: [{\n                type: Input\n            }] } });\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteOriginBase, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatAutocompleteOriginBase, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteOriginBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteOrigin, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatAutocompleteOrigin, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                }]\n        }] });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() {\n        return this._autocompleteDisabled;\n    }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of changes to the selection state of the autocomplete options. */\n        this.optionSelections = defer(() => {\n            const options = this.autocomplete ? this.autocomplete.options : null;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        /** Handles keyboard events coming from the overlay panel. */\n        this._handlePanelKeydown = (event) => {\n            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n            if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                // If the user had typed something in before we autoselected an option, and they decided\n                // to cancel the selection, restore the input value to the one they had typed in.\n                if (this._pendingAutoselectedOption) {\n                    this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n                    this._pendingAutoselectedOption = null;\n                }\n                this._closeKeyEventStream.next();\n                this._resetActiveItem();\n                // We need to stop propagation, otherwise the event will eventually\n                // reach the input itself and cause the overlay to be reopened.\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        };\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        this._scrollStrategy = scrollStrategy;\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n        this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            // The `NgZone.onStable` always emits outside of the Angular zone,\n            // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\n            // We should manually run in Angular zone to update UI after panel closing.\n            this._zone.run(() => {\n                this.autocomplete.closed.emit();\n            });\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        this._pendingAutoselectedOption = null;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        this._updatePanelState();\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return (this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                // Normally focus moves inside `mousedown` so this condition will almost always be\n                // true. Its main purpose is to handle the case where the input is focused from an\n                // outside click which propagates up to the `body` listener within the same sequence\n                // and causes the panel to close immediately (see #3106).\n                this._document.activeElement !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                !!this._overlayRef &&\n                !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n                if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n                    if (!this._pendingAutoselectedOption) {\n                        this._valueBeforeAutoSelection = this._element.nativeElement.value;\n                    }\n                    this._pendingAutoselectedOption = this.activeOption;\n                    this._assignOptionValue(this.activeOption.value);\n                }\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._pendingAutoselectedOption = null;\n            this._onChange(value);\n            if (!value) {\n                this._clearPreviousSelectedOption(null, false);\n            }\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this.openPanel();\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            if (this._formField) {\n                this._formField.floatLabel = 'auto';\n            }\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return (merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            this._zone.run(() => {\n                const wasOpen = this.panelOpen;\n                this._resetActiveItem();\n                this._updatePanelState();\n                this._changeDetectorRef.detectChanges();\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                }\n                if (wasOpen !== this.panelOpen) {\n                    // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n                    // `closed` event, because we may not have emitted it. This can happen\n                    // - if the users opens the panel and there are no options, but the\n                    //   options come in slightly later or as a result of the value changing,\n                    // - if the panel is closed after the user entered a string that did not match any\n                    //   of the available options,\n                    // - if a valid string is entered after an invalid one.\n                    if (this.panelOpen) {\n                        this.autocomplete.opened.emit();\n                    }\n                    else {\n                        this.autocomplete.closed.emit();\n                    }\n                }\n            });\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _assignOptionValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith\n            ? this.autocomplete.displayWith(value)\n            : value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = value;\n        }\n        else {\n            this._element.nativeElement.value = value;\n        }\n        this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const toSelect = event ? event.source : this._pendingAutoselectedOption;\n        if (toSelect) {\n            this._clearPreviousSelectedOption(toSelect);\n            this._assignOptionValue(toSelect.value);\n            this._onChange(toSelect.value);\n            this.autocomplete._emitSelectEvent(toSelect);\n            this._element.nativeElement.focus();\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip, emitEvent) {\n        if (this.autocomplete && this.autocomplete.options) {\n            this.autocomplete.options.forEach(option => {\n                if (option !== skip && option.selected) {\n                    option.deselect(emitEvent);\n                }\n            });\n        }\n    }\n    _attachOverlay() {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: this._formField?.getLabelId(),\n            });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        this.autocomplete._setColor(this._formField?.color);\n        this._updatePanelState();\n        this._applyModalPanelOwnership();\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /** Updates the panel's visibility state and any trigger state tied to id. */\n    _updatePanelState() {\n        this.autocomplete._setVisibility();\n        // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n        // because the act of subscribing will prevent events from reaching other overlays and\n        // we don't want to block the events if there are no options.\n        if (this.panelOpen) {\n            const overlayRef = this._overlayRef;\n            if (!this._keydownSubscription) {\n                // Use the `keydownEvents` in order to take advantage of\n                // the overlay event targeting provided by the CDK overlay.\n                this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n            }\n            if (!this._outsideClickSubscription) {\n                // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n                // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n                // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n                this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n            }\n        }\n        else {\n            this._keydownSubscription?.unsubscribe();\n            this._outsideClickSubscription?.unsubscribe();\n            this._keydownSubscription = this._outsideClickSubscription = null;\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir ?? undefined,\n            panelClass: this._defaults?.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n            // because it activates the first option that passes the skip predicate, rather than the\n            // first *enabled* option.\n            let firstEnabledOptionIndex = -1;\n            for (let index = 0; index < autocomplete.options.length; index++) {\n                const option = autocomplete.options.get(index);\n                if (!option.disabled) {\n                    firstEnabledOptionIndex = index;\n                    break;\n                }\n            }\n            autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document?.defaultView || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = this.autocomplete.id;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n            this._trackedModal = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteTriggerBase, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: MAT_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i2$1.Directionality, optional: true }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: i3.ViewportRuler }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatAutocompleteTriggerBase, inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"] }, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteTriggerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n                }] }, { type: i2$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }, {\n                    type: Host\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: ['matAutocompleteDisabled']\n            }] } });\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-mdc-autocomplete-panel-above';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatAutocompleteTrigger, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-controls\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-mdc-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-mdc-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                }]\n        }] });\n\nclass MatAutocompleteModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteModule, declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule], exports: [CdkScrollableModule,\n            MatAutocomplete,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule, CdkScrollableModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatAutocomplete,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n"],"x_google_ignoreList":[0]}