{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_edit-content-type-fields_edit-content-type-fields-56a972.a620f81d546d8fe5.js","mappings":"sYAEA,MAAMA,EAAaA,CAACC,EAAKC,KAAWD,EAAIE,KAAKD,GAAQD,GAC9C,SAASG,IACZ,SAAOC,KAAQ,CAACC,EAAQC,MCFrB,SAASC,EAAOC,EAAaC,GAChC,SAAOL,QAAQM,KAAcF,EAAaC,EAAME,UAAUC,QAAU,GAAG,GAAO,GAClF,EDCQL,CAAOR,EAAY,GAAnBQ,CAAuBF,GAAQQ,UAAUP,EAAU,EAE3D,CEPO,MAAMQ,EAAmB,yBACnBC,EAAiB,uICE9B,MAAMC,EAAyE,CAC7EC,QAAS,CAAEC,SAAOC,KAAmBC,IAAgBH,SAAUI,YAAa,+BAC5EC,OAAQ,CAAEJ,SAAOC,KAAmBC,IAAgBE,QAASD,YAAa,iLAC1EE,SAAU,CAAEL,SAAOC,KAAmBC,IAAgBG,UAAWF,YAAa,qCAC9EG,MAAO,CAAEN,SAAOC,KAAmBC,IAAgBI,OAAQH,YAAa,8BACxEI,OAAQ,CAAEP,SAAOC,KAAmBC,IAAgBK,QAASJ,YAAa,mCAC1EK,UAAW,CAAER,SAAOC,KAAmBC,IAAgBM,WAAYL,YAAa,8CAChFM,OAAQ,CAAET,SAAOC,KAAmBC,IAAgBO,QAASN,YAAa,sBAC1EO,OAAQ,CAAEV,SAAOC,KAAmBC,IAAgBQ,QAASP,YAAa,oFCArE,IAAMQ,EAA+B,MAAtC,MAAOA,EAPbC,cAQ6BC,KAAAC,cAAwC,GAEnEC,SAASC,GACP,IAAKA,EAAQjC,MAAS,OAAO,KAE7B,MAAMkC,EAAgBD,EAAQjC,MAAiBmC,oBACzCC,EAAeC,OAAOC,KAAKR,KAAKC,eAAeQ,KAAKC,GAAQA,EAAKL,sBAAwBD,GAC/F,OAAOE,EAAe,CAAEL,cAAeD,KAAKC,cAAcK,IAAkB,IAC9E,CAEA,4BAAOK,CAAsBV,EAAuCW,GAClE,MAAMC,EAAyC,GAC/CD,SAAOE,QAAQC,IACbF,EAAeE,EAAMC,YAAc,wCAE9B,IACFf,KACAY,EAEP,CAACI,SAAAjB,KAAA,mBAAAkB,iBApBUpB,EAA+B,EAAAmB,SAAAjB,KAAA,UAAAmB,EAAAC,IAAA,MAA/BtB,EAA+BuB,UAAA,6BAAAC,OAAA,CAAArB,cAAA,CAAAsB,MAAAC,KAAA,qCAAAC,YAAA,EAAAC,SAAA,CAAAH,MAL7B,CACT,CAAEI,QAASC,KAAeC,YAAa/B,EAAiCgC,OAAO,eAIxEhC,CAA+B,qICCOyB,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,kBAAiBA,qCAC3DA,MAAA,WAA6DA,MAAA,GAA2BA,kCAA3BA,cAAA,IAAAQ,EAAAC,YAAAC,KAAA,6BAItBV,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,UAASA,qCACnDA,MAAA,WAA6DA,MAAA,GAAqBA,kCAArBA,cAAA,IAAAW,EAAAlB,WAAA,6BAItBO,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,UAASA,qCACnDA,MAAA,WAA6DA,MAAA,GAAeA,kCAAfA,cAAA,IAAAY,EAAAC,KAAA,6BAItBb,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,WAAUA,oDACSA,MAA7D,UAA6DA,CAAD,eACxDA,MAAA,yBAAAc,EAAAd,MAAAe,GAAAC,UAAAC,EAAAjB,QAAA,OAAAA,MAASiB,EAAAC,YAAAJ,GAAkB,GAAEd,MAAA,YAAgBA,iCAGnDA,MAAA,iCACAA,MAAA,kCAQ2CA,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,cAAaA,qCASjDA,MAAA,uBAAiCA,MAAA,GAAoBA,+BAArCA,MAAA,cAAiBA,cAAAiB,EAAAxD,2CAGjCuC,MAAA,uBACEA,MAAA,GACFA,wCAFgBA,MAAA,cACdA,cAAA,IAAAmB,EAAAC,OAAA1C,cAAA,+BAFJsB,MAHA,EAAAqB,GAAA,wBAGArB,CAH8B,EAAAsB,GAAA,uDAA9BtB,MAAA,EAAAmB,EAAAC,OAAAG,QAAA,MAGAvB,cAAA,EAAAmB,EAAAC,OAAA1C,cAAA,gDARAsB,MAFJ,UAEIA,CAFmE,sBAEnEA,CADwD,eAC7CA,MAAA,cAAQA,QACnBA,MAAA,gBAA6CA,MAAA,yBAAAwB,GAAA,MAAAC,EAAAzB,MAAA0B,GAAAV,UAAAhB,aAAAyB,EAAAE,QAAAH,KAAAC,EAAAE,QAAAH,GAAAxB,MAAAwB,EAAA,GAE/CxB,UACAA,MAAA,EAAA4B,GAAA,KAUF5B,mEAboBA,MAAA,GAAAA,MAAA,UAAAiB,EAAAzD,kBAA6BwC,MAAA,UAAAyB,EAAAE,SACxB3B,MADmD,oBAAA6B,EACnD7B,CAD4E,mBAAAiB,EAAAvC,eAGnGsB,MAAA,GAAAA,MAAA,EAAAmB,EAAAC,OAAA,8BAcqCpB,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,YAAWA,qCACrDA,MAAA,WAA0FA,MAAA,GACLA,kCADKA,cAAA,IAAA8B,EAAAtC,MAAAiB,YAAAC,KAAA,IAAAoB,EAAAtC,MAAAC,WAAA,KAAAqC,EAAAtC,MAAAqB,KAAA,8BAKnDb,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,YAAWA,oDACOA,MAA5D,UAA4DA,CAAD,eACvDA,MAAA,yBAAA+B,EAAA/B,MAAAgC,GAAAhB,UAAAC,EAAAjB,QAAA,OAAAA,MAASiB,EAAAgB,YAAAF,GAAiB,GAAE/B,MAAA,YAAgBA,iCAGlDA,MAAA,iCACAA,MAAA,WC7BL,IAAMkC,GAA0B,MAAjC,MAAOA,UAAkCC,IAe7CC,GAEAC,GAEAC,GAEA9D,YACkC+D,EACxBC,EACAC,EAEAC,EACAC,EACAC,GAERC,QARgCpE,KAAA8D,aACxB9D,KAAA+D,YACA/D,KAAAgE,WAEAhE,KAAAiE,SACAjE,KAAAkE,mBACAlE,KAAAmE,oBA3BgBnE,KAAAqE,UAAY,mBAGtCrE,KAAAsE,gCAA4C,CAAC,cAAe,OAAQ,OAAQ,SAC5EtE,KAAAuE,+BAA2C,CAAC,UAAW,SAAU,UAEvDvE,KAAAwE,gBAAkB,IAAIC,KAA0B,IAChDzE,KAAA0E,eAAiB,IAAID,KAAiC,IACtDzE,KAAAjB,iBAAmBA,EACnBiB,KAAAhB,eAAiBA,EACjBgB,KAAAC,cAAwC,GAExCD,KAAA2E,QAAU,IAAIC,KAAgB,GAExC5E,MAAA2D,KAAYkB,OAAOC,MAEnB9E,MAAA4D,KAAyBmB,KAAUC,MAEnChF,MAAA6D,EAA8B7D,MAAK2D,EAAUsB,UAAUC,IAAaC,4BAYlEnF,KAAK+D,UAAUqB,cAAe,EAC9BpF,KAAKqF,cAAcC,IACjBtF,KAAK+D,UAAUwB,gBAAgBzG,UAAU,MACnCkB,KAAKwF,KAAKC,OAASzF,KAAK0E,eAAegB,KAAK7G,OAAS,KACrC8G,QAAQ,0EAG5B3F,KAAK4F,aAAW,GAGtB,CAEAC,WAEE7F,KAAKqF,cAAcC,IACjBtF,MAAK4D,EAAuBkC,qBACzBhH,UAAU0F,IACTxE,KAAKwE,gBAAgBkB,KAAOlB,KAGlCxE,KAAKqF,cAAcC,IACjBtF,MAAK4D,EAAuBmC,mBACzBjH,UAAUmB,IACTD,KAAKC,cAAgBH,EAAgCa,sBAAsBV,EAAeD,KAAK8D,WAAWjD,eAAc,GAGhI,CAGAmF,cACEhG,KAAK2E,QAAQsB,WACb7B,MAAM4B,aACR,CAGAvD,YAAY1B,GACV,MAAM2D,EAAiB1E,KAAK0E,eAAegB,KAC3ChB,EAAevG,KAAK,CAAE+E,QAASnC,EAAMC,WAAYD,UACjDf,KAAK0E,eAAegB,KAAOhB,CAE7B,CAGAlB,YAAYzC,GACV,MAAM2D,EAAiB1E,KAAK0E,eAAegB,KAC3ChB,EAAewB,OAAOxB,EAAeyB,QAAQpF,GAAQ,GACrDf,KAAK0E,eAAegB,KAAOhB,CAC7B,CAGA0B,OACOpG,MAAK6D,KAGR7D,KAAK2E,QAAQ0B,MAAK,GAClBrG,KAAKgE,SAASsC,KAAK,cAAW,EAC9BC,SAAMvG,KAAK0E,eAAegB,MAAMc,QAC9BC,KAAOC,KAAkBA,EAAaxD,UAAO,EAC7CyD,KAAUD,GACR1G,MAAK4D,EAAuBgD,kBAC1B5G,KAAK8D,WAAW+C,YAAYC,GAC5BJ,EAAa3F,MAAMiB,YAAY8E,GAC/BJ,EAAa3F,MAAMgG,KACnBL,EAAaxD,SACbsD,QAAKQ,KAAWC,MAASV,MAAG,SAEhCnI,KACAU,UAAUoI,IACVlH,KAAK2E,QAAQ0B,MAAK,GAClBrG,KAAKgE,SAASsC,KAAK,QAAS,KAAM,CAAEa,SAAU,MAC9CnH,KAAK4F,aAAW,KACjB,EAnBDwB,MAAkBpH,KAAKiE,OAAQiB,IAAaC,2BAA4BnF,KAAKkE,iBAAkBlE,KAAKmE,kBAqBxG,CAEAyB,cACE5F,KAAK+D,UAAUsD,OACjB,CAACpG,SAAAjB,KAAA,mBAAAkB,iBA5GUuC,GAAyBlC,MAsB1B+F,MAAe/F,MAAAgG,MAAAhG,MAAAiG,MAAAjG,MAAAgG,MAAAhG,0BAAA,EAAAN,SAAAjB,KAAA,UAAAmB,EAAAsG,IAAA,MAtBdhE,EAAyBpC,UAAA,6BAAAqG,UAAA,SAAAC,EAAAC,MAAA,EAAAD,cAEPE,iGAFlBtG,MAAA,YAAAqG,EAAAvD,k2CD3CT9C,MAFJ,UAEIA,CAFqC,UAErCA,CAD6B,WAE3BA,MAAA,wBAEJA,UAEEA,MADF,UACEA,CAD8B,UACxBA,MAAA,wBAA+DA,QAGjEA,MAFJ,UAEIA,CAFwB,gBAExBA,CADmC,cAEjCA,MAAA,MAEEA,MADA,GAAAuG,GAAA,YACAvG,CADsC,GAAAwG,GAAA,qBAIxCxG,MAAA,OAEEA,MADA,GAAAyG,GAAA,YACAzG,CADsC,GAAA0G,GAAA,qBAIxC1G,MAAA,OAEEA,MADA,GAAA2G,GAAA,YACA3G,CADsC,GAAA4G,GAAA,qBAIxC5G,MAAA,OAEEA,MADA,GAAA6G,GAAA,YACA7G,CADsC,GAAA8G,GAAA,qBAMxC9G,MADA,GAAA+G,GAAA,YACA/G,CADsE,GAAAgH,GAAA,aAG1EhH,UAIIA,MAFJ,iBAEIA,CAFkC,iBAElCA,CADqB,cAEnBA,MAAA,OAEEA,MADA,GAAAiH,GAAA,YACAjH,CADsC,GAAAkH,GAAA,qBAoBxClH,MAAA,OAEEA,MADA,GAAAmH,GAAA,YACAnH,CADsC,GAAAoH,GAAA,qBAKxCpH,MAAA,OAEEA,MADA,GAAAqH,GAAA,YACArH,CADsC,GAAAsH,GAAA,qBAMxCtH,MADA,GAAAuH,GAAA,YACAvH,CADqE,GAAAwH,GAAA,aAK7ExH,cAEEA,MADF,2BACEA,CAD8B,gBACUA,MAAA,mBAAAA,aAAAyH,GAAAzH,MAASqG,EAAAhC,cAAa,GAAErE,MAAA,aAAMA,QACtEA,MAAA,kCAC0FA,MAAA,mBAAAA,aAAAyH,GAAAzH,MAASqG,EAAAxB,OAAM,GAErG7E,MADF,YACEA,CAD8B,WACxBA,MAAA,WAAIA,QACVA,MAAA,oCAKRA,0CAvFIA,MAAA,GAAAA,MAAA,IAAAA,MAAA,4DAIIA,MAAA,GAAAA,YAAA,qDAGeA,MAAA,GAAAA,MAAA,aAAAqG,EAAApD,iBAsBKjD,MAAA,IAAAA,MAAA,kBAAAqG,EAAAtD,iCACa/C,cAAA,mBAAAqG,EAAAtD,iCAMhB/C,MAAA,GAAAA,MAAA,aAAAqG,EAAAlD,gBAkCKnD,MAAA,IAAAA,MAAA,kBAAAqG,EAAArD,gCACahD,cAAA,mBAAAqG,EAAArD,gCAQrChD,MAAA,GAAAA,MAAA,YAAA0H,EAAAzD,KAAA0D,OAAA,GAAAtB,EAAAlD,eAAAgB,KAAA7G,QAAA0C,MAAA,MAAAqG,EAAAjD,UAIIpD,MAAA,GAAAA,MAAA,8DCvDR4H,KAAaC,KACbC,KAAcC,kDACdC,KAAeC,KACfC,KAAWC,mCACXC,KAAkBC,UAClBC,KAAcC,KACdhK,EACAiK,KACAC,KACAC,IAAeC,KACfC,KACAC,KAAkBC,OAAA,mgCAGT5G,CAA0B,mJCzC/BlC,MAAA,oCAGAA,MAAA,wCAGAA,MAAA,4CAiBYA,MAAA,uBAAiCA,MAAA,GAAoBA,+BAArCA,MAAA,cAAiBA,cAAA+I,EAAAtL,2CAGjCuC,MAAA,uBACEA,MAAA,GACFA,wCAFgBA,MAAA,cACdA,cAAA,IAAAgJ,EAAA5H,OAAA1C,cAAA,+BAFJsB,MAHA,EAAAiJ,GAAA,wBAGAjJ,CAHiC,EAAAkJ,GAAA,uDAAjClJ,MAAA,EAAAgJ,EAAA5H,OAAAG,QAAA,MAGAvB,cAAA,EAAAgJ,EAAA5H,OAAA1C,cAAA,iCAkBMsB,MADF,kBACEA,CADkC,iBACFA,MAAA,GAAmBA,QACnDA,MAAA,UAAMA,MAAA,GACRA,oCAHYA,MAAA,QAAAmJ,EAAAhK,MACsBa,MAAA,GAAAA,MAAAmJ,EAAAC,MAC1BpJ,MAAA,GAAAA,MAAAmJ,EAAAvL,kCAuBFoC,MAAA,iBAAiCA,MAAA,GAAiBA,wCAAjBA,cAAAqJ,EAAAD,iCAFnCpJ,MAJJ,kBAIIA,CAHsD,QAGtDA,CADG,UACGA,MAAA,GAAkBA,QACxBA,MAAA,EAAAsJ,GAAA,mBAIJtJ,oCAREA,MADU,QAAAqJ,EAAAE,UACVvJ,CADoC,UAAAA,MAAA,EAAAwJ,GAAAH,EAAAI,aAI5BzJ,MAAA,GAAAA,MAAAqJ,EAAAzL,OACNoC,cAAA,EAAAqJ,EAAAD,KAAA,gDAjDVpJ,MAHN,UAGMA,CAHyB,WAGzBA,CAFwB,sBAExBA,CADwD,eAC7CA,MAAA,UAAIA,QACfA,MAAA,gBAAgFA,MAAA,yBAAAwB,GAAA,MAAAZ,EAAAZ,MAAA0J,GAAA1I,UAAAhB,aAAAY,EAAAnB,WAAA+B,KAAAZ,EAAAnB,WAAA+B,GAAAxB,MAAAwB,EAAA,GAEhFxB,UACAA,MAAA,EAAA2J,GAAA,KAUF3J,QAGIA,MAFJ,WAEIA,CAFwB,sBAExBA,CADwD,gBAC7CA,MAAA,gBAASA,QACpBA,MAAA,oBAAYA,MAAA,mCAAA4J,EAAA5J,MAAA0J,GAAAG,OAAAd,EAAA/I,MAAA,GAAmB+I,SAAAe,uBAAAF,GAA2Bb,EAAAgB,eAAAH,GAAiB5J,MAAE+I,EAAAiB,eAAAJ,GAAiB,GAC5F5J,MAAA,yBAAAwB,GAAA,MAAAZ,EAAAZ,MAAA0J,GAAA1I,UAAAhB,aAAAY,EAAAC,KAAAW,KAAAZ,EAAAC,KAAAW,GAAAxB,MAAAwB,EAAA,GAEExB,MADF,wBACEA,CADkB,kBACcA,MAAA,IAA0BA,QAC1DA,MAAA,WAAMA,MAAA,IACRA,UACAA,MAAA,GAAAiK,GAAA,oBAAAjK,OAOJA,UACAA,MAAA,qBAAgBA,MAAA,IAClBA,UAGIA,MAFJ,YAEIA,CAFwB,uBAExBA,CADwD,gBAC7CA,MAAA,iBAAUA,QACrBA,MAAA,oBAAYA,MAAA,mCAAA4J,EAAA5J,MAAA0J,GAAAG,OAAAd,EAAA/I,MAAA,UAAAA,MAAmB+I,EAAAiB,eAAAJ,GAAiB,GAAE5J,MAAA,yBAAAwB,GAAA,MAAAZ,EAAAZ,MAAA0J,GAAA1I,UAAAhB,aAAAY,EAAAsJ,UAAA1I,KAAAZ,EAAAsJ,UAAA1I,GAAAxB,MAAAwB,EAAA,GAG9CxB,MADF,wBACEA,CADkB,WACZA,MAAA,IAAgDA,QACtDA,MAAA,kBAAiCA,MAAA,IACnCA,UACAA,MAAA,GAAAmK,GAAA,oBAAAnK,OAaJA,UACAA,MAAA,qBAAgBA,MAAA,IAEpBA,iFA1DoBA,MAAA,GAA6BA,MAA7B,UAAA+I,EAAAvL,iBAA6BwC,CAAD,mBAAA+I,EAAArK,eAAoCsB,MAAA,UAAAY,EAAAnB,YAC9BO,MAAhD,oBAAA4J,EAAgD5J,CAAvB,yBAAA+I,EAAAqB,UAE3BpK,MAAA,GAAAA,MAAA,EAAAgJ,EAAAqB,SAAArB,EAAA5H,OAAA,MAeIpB,MAAA,GAAAA,MAAA,UAAAY,EAAAC,MAA6Cb,MAApB,cAAA4J,EAAoB5J,CAAD,iBAAA+I,EAAAqB,UAEVpK,MAAA,GAAAA,MAAA+I,EAAAuB,SAAA1J,EAAAC,OAC1Bb,MAAA,GAAAA,MAAA+I,EAAAwB,UAAA3J,EAAAC,OAERb,cAAA+I,EAAAyB,WAQYxK,MAAA,GAAAA,MAAA+I,EAAA0B,cAAAb,IAKoC5J,MAAA,GAAAA,MAAA,UAAAY,EAAAsJ,WAChDlK,MAD8E,mBAAA4J,EAC9E5J,CADsG,oBAAA+I,EAAAqB,UAG9FpK,MAAA,GAAAA,MAAA,OAAA0K,EAAA3B,EAAA4B,mBAAA/J,EAAAsJ,YAAA,KAAAQ,EAAA9M,OAC2BoC,MAAA,GAAAA,MAAA,OAAA4K,EAAA7B,EAAA4B,mBAAA/J,EAAAsJ,YAAA,KAAAU,EAAAxB,MAEnCpJ,cAAA+I,EAAA8B,yBAAAjB,IAcY5J,MAAA,GAAAA,MAAA+I,EAAA+B,eAAAlB,8CA8BpB5J,MAAA,eAAwCA,MAAA,mBAAAA,MAAA+K,GAAA,MAAAhC,EAAA/I,MAAA,UAAAA,MAAS+I,EAAAiC,iBAAgB,GAAEhL,MAAA,wBAAsDA,cAAtDA,oBAAA,qFA7F3EA,MAAA,cAAuBA,MAAA,sBAAAA,MAAAyH,GAAA,MAAAsB,EAAA/I,QAAA,OAAAA,MAAY+I,EAAAlE,OAAM,GACvC7E,MAAA,WACEA,MAAA,EAAAiL,GAAA,cAAAjL,OAiEAA,QAwBAA,MAAA,wBACEA,MAAA,EAAAkL,GAAA,gBAGAlL,MAAA,WACAA,MAAA,eAAwCA,MAAA,mBAAAA,MAAAyH,GAAA,MAAAsB,EAAA/I,QAAA,OAAAA,MAAS+I,EAAA1E,cAAa,GAAErE,MAAA,YAAMA,QACtEA,MAAA,kCACEA,MAAA,aAGNA,+CAnGEA,MAAA,GAAAA,MAAA+I,EAAA1J,QA0FEW,MAAA,GAAAA,MAAA,EAAA+I,EAAAoC,UAAA,MAKuDnL,MAAA,GAAAA,MAAA,YAAAoL,EAAAnH,KAAA0D,OAAA3H,MAAA,KAAA+I,EAAA3F,WC3D1D,IAAMiI,GAA+B,MAAtC,MAAOA,UAAuClJ,IA0BlD3D,YACUgE,EACA8I,EACA7I,EACAC,GAERG,QALQpE,KAAA+D,YACA/D,KAAA6M,QACA7M,KAAAgE,WACAhE,KAAAiE,SA7BgBjE,KAAAqE,UAAY,mBAGtCrE,KAAAY,OAA2B,GAC3BZ,KAAAa,eAA0B,GAC1Bb,KAAAC,cAAwC,GAGxCD,KAAAoM,yBAAqD,GACrDpM,KAAAgM,cAA0B,GAC1BhM,KAAAqM,eAA2B,GAC3BrM,KAAAjB,iBAAmBA,EACnBiB,KAAAhB,eAAiBA,EACjBgB,KAAA6L,SAAWiB,IACX9M,KAAA8L,UAAY1M,IACZY,KAAA+M,SAAW,IAAInI,KAAgB,GAC/B5E,KAAA2E,QAAU,IAAIC,KAAgB,GAC9B5E,KAAA0M,WAAU7H,OAAOmI,MAAqBN,QAK9B1M,KAAAiN,uBAAsBlI,KAAUmI,MAChClN,KAAAmN,6BAA4BpI,KAAUC,MAS5ChF,KAAK+D,UAAUqB,cAAe,EAC9BpF,KAAKqF,cAAcC,IACjBtF,KAAK+D,UAAUwB,gBAAgBzG,UAAUsO,IACnCpN,KAAKwF,KAAKC,QACME,QAAQ,0EAG5B3F,KAAK4F,aAAW,GAGtB,CAEAC,WACE7F,KAAK2L,SAAW3L,KAAK6M,MAAMQ,SAASC,SAASC,IAAI,YAEjD,MAAMC,EAAwBxN,KAAK6M,MAAMQ,SAASC,SAASC,IAAI,yBACzDE,EAAezN,KAAKiN,oBAAoBS,oBAAoBF,GAAuBhH,QAAKmH,QACxFC,EAAUH,EAAajH,QAAKqH,KAAUhH,GAAe7G,KAAKmN,0BAA0BW,UAAUjH,EAAY7F,cAC1G+M,EAAa/N,KAAKmN,0BAA0Ba,mBAAmBxH,QAAKyH,KAAIC,GLnF5E,SAAUC,GAAmBD,GACjC,MAAMnC,EAAwB,GAC9B,UAAWqC,KAAeF,EACxBnC,EAAU5N,KAAK,CACbuC,KAAM0N,EACNjP,MAAOF,EAAemP,GAAajP,MACnCwL,QAAMmC,KAAkBsB,GACxB9O,YAAaL,EAAemP,GAAa9O,cAG7C,OAAOyM,CACT,CKwEkGoC,CAAmBD,KAC3GG,EAAcrO,KAAKmN,0BAA0BmB,oBAC7CC,EAAiBvO,KAAKmN,0BAA0BpH,oBAEtDyI,OAAS,CAACf,EAAcG,EAASG,EAAYM,EAAaE,IAAiBzP,UACzE,EAAE+H,EAAajG,EAAQmL,GAAW0C,GAAYxO,OAQ5C,GAPAD,KAAK6G,YAAcA,EACnB7G,KAAK+L,UAAYA,GACjB/L,KAAK0O,iBAAmBD,GACxBzO,KAAKa,eAAiBD,EAEtBZ,KAAKC,cAAgBH,EAAgCa,sBAAsBV,GAAeW,GAErE,MAAjBZ,KAAK2L,SAAkB,CACzB,MAAMgD,EAAc3O,KAAK6M,MAAMQ,SAASC,SAASC,IAAI,MAAQqB,SAAS5O,KAAK6M,MAAMQ,SAASC,SAASC,IAAI,MAAO,IAAM,KAC9GsB,GAAYjO,EAAOH,KAAKM,IAASA,GAAM+F,KAAO6H,GAC9B,SAAlB3O,KAAK2L,iBACA3L,KAAKC,cAAc4O,GAAU7N,YACtChB,KAAKY,OAAOzC,KAAK0Q,SAEjB,QAASC,EAAI,EAAGA,GAAK,EAAGA,IACtB9O,KAAKY,OAAOzC,KAAK,CACf2I,GAAI,EACJ1E,KAAM/C,IAAgBQ,OACtB4L,UAAWsD,IAAiBC,cAC5BhO,WAAY,GACZiO,QAA2B,IAAlBrO,EAAO/B,OAChBqQ,UAAWtO,EAAO/B,OAASiQ,IAKjC,QAASA,EAAI,EAAGA,EAAI9O,KAAKY,OAAO/B,OAAQiQ,IACtC9O,KAAKqL,uBAAuByD,GAC5B9O,KAAKuL,eAAeuD,GAGtB9O,KAAK+M,SAAS1G,MAAK,EAAK,EAG9B,CAEAL,cACEhG,KAAK+M,SAAS9G,WACdjG,KAAK2E,QAAQsB,WACb7B,MAAM4B,aACR,CAEAJ,cACE5F,KAAK+D,UAAUsD,OACjB,CAEAgE,uBAAuB8D,GACrBnP,KAAKoM,yBAAyB+C,GAASnP,KAAK0O,iBAAiBjI,OAC3D2I,GAAUA,EAAOC,WAAarP,KAAKY,OAAOuO,GAAO/M,KAAK/B,oBAE1D,CAEAiL,eAAe6D,GACb,IAAIG,EAAmBtP,KAAKY,OAAOuO,GAAO/M,KAAK/B,oBAAsB0O,IAAiBQ,cAChEvP,KAAKoM,yBAAyB+C,GAAOK,KAAKJ,GAAUA,EAAOtE,YAAcwE,KAE7FA,EAAmBtP,KAAKoM,yBAAyB+C,GAAO,GAAGrE,WAC7D9K,KAAKY,OAAOuO,GAAO1D,UAAY6D,CACjC,CAEA/D,eAAe4D,GACb,MAAMM,EAAmBzP,KAAK+L,UAAUtL,KAAK4O,GAAYA,EAAS3O,OAASV,KAAKY,OAAOuO,GAAO/M,MACxFsN,EAAoB1P,KAAK0O,iBAAiBjO,KAAKkP,GAAmBA,EAAgB7E,YAAc9K,KAAKY,OAAOuO,GAAO1D,WACzHzL,KAAKgM,cAAcmD,GAASM,GAAkBnQ,aAAe,GAC7DU,KAAKqM,eAAe8C,GAASO,GAAmB1E,WAC5C,cAAc0E,EAAkBE,kBAChCF,GAAmBpQ,aAAe,EACxC,CAEA4M,mBAAmB2D,GACjB,OAAO7P,KAAK0O,iBAAiBjO,KAAK2O,GAAUA,EAAOtE,YAAc+E,EACnE,CAEAtD,iBACEvM,KAAKiE,OAAOqC,KAAK7C,GAA2B,CAC1CqM,WAAW,EACXC,MAAO,SACPrK,KAAM,CAAEmB,YAAa7G,KAAK6G,YAAahG,eAAgBb,KAAKa,iBAEhE,CAEAuF,OAGE,GAFApG,KAAK2E,QAAQ0B,MAAK,GAClBrG,KAAKgE,SAASsC,KAAK,aACE,MAAjBtG,KAAK2L,SAAkB,CACzB,MAAM5K,EAAQf,KAAKY,OAAO,GACJ,SAAlBZ,KAAK2L,SACP3L,KAAKmN,0BAA0B6C,OAAOjP,EAAM+F,GAAI9G,KAAK6G,YAAYC,GAAI/F,EAAMC,YAAYlC,UAAU,KAC/FkB,KAAK2E,QAAQ0B,MAAK,GAClBrG,KAAKgE,SAASsC,KAAK,QAAS,KAAM,CAAEa,SAAU,MAC9CnH,KAAK4F,aAAW,GAES,cAAlB5F,KAAK2L,UACd3L,KAAKmN,0BAA0B8C,gBAAgBlP,EAAM+F,GAAI/F,EAAMC,WAAYD,EAAM0K,WAAW3M,UAAU,KACpGkB,KAAK2E,QAAQ0B,MAAK,GAClBrG,KAAKgE,SAASsC,KAAK,QAAS,KAAM,CAAEa,SAAU,MAC9CnH,KAAK4F,aAAW,QAIpBW,WAAMvG,KAAKY,QAAQ4F,QACjBC,KAAO1F,KAAWA,EAAMC,aAAU,EAClC2F,KAAU5F,GACRf,KAAKmN,0BAA0B7H,IAAIvE,EAAOf,KAAK6G,YAAYC,IAAIN,QAAKQ,KAAWC,MAASV,MAAG,SAE7FnI,KACAU,UAAUoR,IACVlQ,KAAK2E,QAAQ0B,MAAK,GAClBrG,KAAKgE,SAASsC,KAAK,QAAS,KAAM,CAAEa,SAAU,MAC9CnH,KAAK4F,aAAW,EAGtB,CAAC3E,SAAAjB,KAAA,mBAAAkB,iBAzKU0L,GAA8BrL,MAAAgG,MAAAhG,MAAAiG,OAAAjG,MAAA6H,MAAA7H,MAAAgG,MAAA,EAAAtG,SAAAjB,KAAA,UAAAmB,EAAAsG,IAAA,MAA9BmF,EAA8BvL,UAAA,mCAAAqG,UAAA,SAAAC,EAAAC,MAAA,EAAAD,cAEZE,iGAFlBtG,MAAA,YAAAqG,EAAAvD,uyBDnDT9C,MAFJ,UAEIA,CAFoD,UAEpDA,CAD6B,WAQ3BA,MANA,EAAA4O,GAAA,IAMA5O,CAN8B,EAAA6O,GAAA,IAM9B7O,CAHyB,EAAA8O,GAAA,KAO7B9O,UACAA,MAAA,EAAA+O,GAAA,8BAwGA/O,eAnHIA,MAAA,GAAAA,MAAA,OAAAgP,IAAA3I,EAAA+D,SAAA,MAGApK,cAAA,SAAAqG,EAAA+D,SAAA,MAGApK,cAAA,QAAAqG,EAAA+D,SAAA,MAKJpK,cAAA,OAAAA,MAAA,IAAAqG,EAAAmF,UAAA,sBCuBEtD,KAAWH,mCACXK,KAAkBH,UAClBK,KAAcH,KACd5J,EACA0Q,KAAe5G,UAAAE,KACf2G,KAAavG,KACbwG,KACAC,KACA5G,KACAR,KAAeqH,KACf5G,KACAC,IAAe4G,KACfzG,IACA0G,MAAoBzG,OAAA,ojBAGXuC,CAA+B,uICjDpCrL,MAAA,4BADFA,MAAA,cACEA,MAAA,EAAAwP,EAAA,sBACFxP,uCADiBA,cAAA,mBAAAyP,yBAKfzP,MAAA,4BADFA,MAAA,eACEA,MAAA,EAAA0P,EAAA,sBACF1P,uCADiBA,cAAA,mBAAAyP,yBAOrBzP,MAAA,GCDK,IAAM6I,EAAkB,MAAzB,MAAOA,EAIXrK,cAHSC,KAAAkR,SAAU,EACnBlR,KAAAmR,SAAU,CAEM,CAEhBC,gBACEpR,KAAKmR,SAAWnR,KAAKmR,OACvB,CAAClQ,SAAAjB,KAAA,mBAAAkB,iBARUkJ,EAAkB,EAAAnJ,SAAAjB,KAAA,UAAAqR,EAAA5J,IAAA,MAAlB2C,EAAkB/I,UAAA,qBAAAC,OAAA,CAAA4P,QAAA,WAAAzP,YAAA,EAAAC,SAAA,CAAAH,OAAA+P,mBAAAC,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,2EAAAC,SAAA,SAAAhK,EAAAC,GAAA,KAAAD,EAAA,yBDf/BpG,MAAA,WAAsBA,MAAA,mBAAAA,aAAAyH,GAAAzH,MAASqG,EAAAwJ,gBAAe,GAO1C7P,MALA,EAAAqQ,EAAA,IAKArQ,CALe,EAAAsQ,EAAA,KAWnBtQ,QAEAA,MAAA,EAAAuQ,EAAA,yBAAAvQ,qBAfgDA,MAAA,UAAAA,MAAA,EAAAwJ,EAAAnD,EAAAuJ,UAC9C5P,cAAA,QAAAwQ,EAAAnK,EAAAsJ,SAAK,GAAL,IAAKa,EAAD,sBCSFpI,KAAkBpC,UAClBoJ,KACAqB,MAAgB3H,OAAA,+cAGPD,CAAkB,oBCdzB,SAAU6H,EAAgBC,GAC9B,MAAMC,EAAKC,SAASC,cAAc,YAClCF,EAAGjU,MAAQgU,EACXC,EAAGG,aAAa,WAAY,IAC5BH,EAAGI,MAAMC,SAAW,WACpBL,EAAGI,MAAME,KAAO,UAChBL,SAASM,KAAKC,YAAYR,GAC1B,MAAMS,EACJR,SAASS,eAAeC,WAAa,GACjCV,SAASS,eAAeE,WAAW,GAEzCZ,EAAGa,SACHZ,SAASa,YAAY,QACrBb,SAASM,KAAKQ,YAAYf,GACtBS,IACFR,SAASS,eAAeM,kBACxBf,SAASS,eAAeO,SAASR,GAErC","names":["arrReducer","arr","value","push","toArray","operate","source","subscriber","reduce","accumulator","seed","scanInternals","arguments","length","subscribe","fieldNamePattern","fieldNameError","dataTypeLabels","Boolean","label","calculateTypeLabel","DataTypeCatalog","description","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","ReservedNamesValidatorDirective","constructor","this","reservedNames","validate","control","controlValue","toLocaleLowerCase","reservedName","Object","keys","find","name","assembleReservedNames","fields","existingFields","forEach","field","StaticName","static","t","core","FsC","selectors","inputs","i0","None","standalone","features","provide","NG_VALIDATORS","useExisting","multi","field_r2","ContentType","Name","field_r3","field_r4","Type","field_r6","_r5","$implicit","ctx_r6","selectField","newName_r10","errors","AddSharingFieldsComponent_td_32_Conditional_6_Conditional_0_Template","AddSharingFieldsComponent_td_32_Conditional_6_Conditional_1_Template","pattern","$event","item_r9","_r8","newName","AddSharingFieldsComponent_td_32_Conditional_6_Template","i_r11","item_r12","item_r14","_r13","removeField","AddSharingFieldsComponent","BaseComponent","#features","#contentTypesFieldsSvc","#fieldShareConfigManagement","dialogData","dialogRef","snackBar","dialog","viewContainerRef","changeDetectorRef","super","hostClass","displayedShareableFieldsColumns","displayedSelectedFieldsColumns","shareableFields","MatTableDataSource","selectedFields","saving$","BehaviorSubject","inject","FeaturesScopedService","transient","ContentTypesFieldsService","isEnabled","FeatureNames","FieldShareConfigManagement","disableClose","subscriptions","add","backdropClick","form","dirty","data","confirm","closeDialog","ngOnInit","getShareableFields","getReservedNames","ngOnDestroy","complete","splice","indexOf","save","next","open","of","pipe","filter","inheritField","concatMap","addInheritedField","contentType","Id","Guid","catchError","error","responses","duration","openFeatureDialog","close","MAT_DIALOG_DATA","i1","i2","VBU","viewQuery","rf","ctx","NgForm","AddSharingFieldsComponent_th_13_Template","AddSharingFieldsComponent_td_14_Template","AddSharingFieldsComponent_th_16_Template","AddSharingFieldsComponent_td_17_Template","AddSharingFieldsComponent_th_19_Template","AddSharingFieldsComponent_td_20_Template","AddSharingFieldsComponent_th_22_Template","AddSharingFieldsComponent_td_23_Template","AddSharingFieldsComponent_tr_24_Template","AddSharingFieldsComponent_tr_25_Template","AddSharingFieldsComponent_th_31_Template","AddSharingFieldsComponent_td_32_Template","AddSharingFieldsComponent_th_34_Template","AddSharingFieldsComponent_td_35_Template","AddSharingFieldsComponent_th_37_Template","AddSharingFieldsComponent_td_38_Template","AddSharingFieldsComponent_tr_39_Template","AddSharingFieldsComponent_tr_40_Template","_r1","ngForm_r15","valid","MatCardModule","i3","MatTableModule","i4","MatButtonModule","i5","FormsModule","i6","MatFormFieldModule","i7","MatInputModule","i8","MatDialogActions","AsyncPipe","TranslateModule","i9","FeatureIconIndicatorComponent","FieldHintComponent","styles","ctx_r1","staticName_r5","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_7_Conditional_0_Template","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_7_Conditional_1_Template","dataType_r7","icon","option_r8","EditContentTypeFieldsComponent_Conditional_6_For_4_For_33_Conditional_4_Template","inputType","_c1","isObsolete","_r3","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_7_Template","i_r6","$index","filterInputTypeOptions","resetInputType","calculateHints","EditContentTypeFieldsComponent_Conditional_6_For_4_For_19_Template","InputType","EditContentTypeFieldsComponent_Conditional_6_For_4_For_33_Template","editMode","touched","findIcon","findLabel","dataTypes","dataTypeHints","tmp_29_0","getInputTypeOption","tmp_30_0","filteredInputTypeOptions","inputTypeHints","_r9","addSharedField","EditContentTypeFieldsComponent_Conditional_6_For_4_Template","EditContentTypeFieldsComponent_Conditional_6_Conditional_6_Template","isDebug","ngForm_r10","EditContentTypeFieldsComponent","route","calculateTypeIcon","loading$","GlobalConfigService","contentTypesService","ContentTypesService","contentTypesFieldsService","event","snapshot","paramMap","get","contentTypeStaticName","contentType$","retrieveContentType","share","fields$","switchMap","getFields","dataTypes$","typeListRetrieve","map","rawDataTypes","calculateDataTypes","rawDataType","inputTypes$","getInputTypesList","reservedNames$","forkJoin","inputTypes","inputTypeOptions","editFieldId","parseInt","editField","i","InputTypeCatalog","StringDefault","IsTitle","SortOrder","index","option","dataType","defaultInputType","DefaultSuffix","some","selectedDataType","selectedInputType","inputTypeOption","obsoleteMessage","inputName","autoFocus","width","rename","updateInputType","_","EditContentTypeFieldsComponent_Conditional_3_Template","EditContentTypeFieldsComponent_Conditional_4_Template","EditContentTypeFieldsComponent_Conditional_5_Template","EditContentTypeFieldsComponent_Conditional_6_Template","undefined","MatSelectModule","MatIconModule","MatOptionModule","NgClass","i10","i11","ToggleDebugDirective","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","_angular_core__WEBPACK_IMPORTED_MODULE_0__","ngContentSelectors","_c0","decls","vars","consts","template","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","tmp_2_0","NgTemplateOutlet","copyToClipboard","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/operators/toArray.js","./node_modules/rxjs/dist/esm/internal/operators/reduce.js","./projects/eav-ui/src/app/app-administration/constants/field-name.patterns.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/reserved-names.directive.ts","./projects/eav-ui/src/app/content-type-fields/add-sharing-fields/add-sharing-fields.component.html","./projects/eav-ui/src/app/content-type-fields/add-sharing-fields/add-sharing-fields.component.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["import { reduce } from './reduce';\nimport { operate } from '../util/lift';\nconst arrReducer = (arr, value) => (arr.push(value), arr);\nexport function toArray() {\n    return operate((source, subscriber) => {\n        reduce(arrReducer, [])(source).subscribe(subscriber);\n    });\n}\n","import { scanInternals } from './scanInternals';\nimport { operate } from '../util/lift';\nexport function reduce(accumulator, seed) {\n    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n","export const fieldNamePattern = /^[A-Za-z][A-Za-z0-9]+$/;\r\nexport const fieldNameError = 'Standard letters and numbers are allowed. Must start with a letter.';\r\n","import { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\n\r\nconst dataTypeLabels: Record<string, { label: string, description: string }> = {\r\n  Boolean: { label: calculateTypeLabel(DataTypeCatalog.Boolean), description: 'Yes/no or true/false values' },\r\n  Custom: { label: calculateTypeLabel(DataTypeCatalog.Custom), description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: calculateTypeLabel(DataTypeCatalog.DateTime), description: 'For date, time or combined values' },\r\n  Empty: { label: calculateTypeLabel(DataTypeCatalog.Empty), description: 'Use to structure your form' },\r\n  Entity: { label: calculateTypeLabel(DataTypeCatalog.Entity), description: 'One or more other content-items' },\r\n  Hyperlink: { label: calculateTypeLabel(DataTypeCatalog.Hyperlink), description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: calculateTypeLabel(DataTypeCatalog.Number), description: 'Any kind of number' },\r\n  String: { label: calculateTypeLabel(DataTypeCatalog.String), description: 'Any kind of text' },\r\n};\r\n\r\nexport interface DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\r\nimport { Field } from '../../shared/fields/field.model';\r\n\r\n@Directive({\r\n    selector: '[appReservedNames]',\r\n    providers: [\r\n      { provide: NG_VALIDATORS, useExisting: ReservedNamesValidatorDirective, multi: true },\r\n    ],\r\n    standalone: true,\r\n})\r\nexport class ReservedNamesValidatorDirective implements Validator {\r\n  @Input('appReservedNames') reservedNames: Record<string, string> = {};\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!control.value) { return null; }\r\n\r\n    const controlValue = (control.value as string).toLocaleLowerCase();\r\n    const reservedName = Object.keys(this.reservedNames).find(name => name.toLocaleLowerCase() === controlValue);\r\n    return reservedName ? { reservedNames: this.reservedNames[reservedName] } : null;\r\n  }\r\n\r\n  static assembleReservedNames(reservedNames: Record<string, string>, fields: Field[]) {\r\n    const existingFields: Record<string, string> = {};\r\n    fields.forEach(field => {\r\n      existingFields[field.StaticName] = 'Field with this name already exists';\r\n    });\r\n    return {\r\n      ...reservedNames,\r\n      ...existingFields,\r\n    };\r\n  }\r\n\r\n}\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ \"SharingOrInheriting.TitleAddFieldsWhichInherit\" | translate}}\r\n    </div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <span>{{ \"SharingOrInheriting.PickFieldsToInheritFrom\" | translate }}</span>\r\n    <div class=\"eav-tables-div\">\r\n      <mat-card class=\"eav-table-div-left\">\r\n        <table mat-table [dataSource]=\"shareableFields\" class=\"eav-fields-table\">\r\n          <ng-container matColumnDef=\"contentType\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Content Type</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.ContentType.Name}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Name</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.StaticName}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"type\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Type</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.Type}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"share\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Share</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> <button mat-raised-button type=\"button\"\r\n                (click)=\"selectField(field)\">Select</button> </td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"displayedShareableFieldsColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedShareableFieldsColumns;\"></tr>\r\n        </table>\r\n      </mat-card>\r\n\r\n      <mat-card class=\"eav-table-div-right\">\r\n        <form #ngForm=\"ngForm\">\r\n          <table mat-table [dataSource]=\"selectedFields\" class=\"eav-fields-table\">\r\n            <ng-container matColumnDef=\"newName\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>New Name</b> </th>\r\n              <td mat-cell *matCellDef=\"let item; index as i\" class=\"eav-table-cell\">\r\n                <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                  <mat-label>New Name</mat-label>\r\n                  <input matInput [pattern]=\"fieldNamePattern\" [(ngModel)]=\"item.newName\" [name]=\"'StaticName' + i\"\r\n                    #newName=\"ngModel\" [appReservedNames]=\"reservedNames\">\r\n                </mat-form-field>\r\n                @if (newName.errors) {\r\n                  @if (newName.errors.pattern) {\r\n                    <app-field-hint [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                  }\r\n                  @if (newName.errors.reservedNames) {\r\n                    <app-field-hint [isError]=\"true\">\r\n                      {{ newName.errors.reservedNames }}\r\n                    </app-field-hint>\r\n                  }\r\n                }\r\n              </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"source\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>Source</b> </th>\r\n              <td mat-cell *matCellDef=\"let item\" style=\"word-break:break-all;\" class=\"eav-table-cell\"> {{\r\n                item.field.ContentType.Name }}/{{ item.field.StaticName }} ({{ item.field.Type }}) </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"remove\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>Remove</b> </th>\r\n              <td mat-cell *matCellDef=\"let item\" class=\"eav-table-cell\"> <button mat-raised-button type=\"button\"\r\n                  (click)=\"removeField(item)\">Remove</button> </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedSelectedFieldsColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedSelectedFieldsColumns;\"></tr>\r\n          </table>\r\n        </form>\r\n      </mat-card>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\"\r\n        [disabled]=\"!ngForm.form.valid || selectedFields.data.length == 0 || (saving$ | async)\" (click)=\"save()\">\r\n        <div class=\"eav-button-feature\">\r\n          <span>Save</span>\r\n          <app-feature-icon-indicator class=\"eav-button-feature-icon\"\r\n            [featureNameId]=\"'FieldShareConfigManagement'\"></app-feature-icon-indicator>\r\n        </div>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n","import { ChangeDetectorRef, Component, HostBinding, Inject, OnDestroy, OnInit, ViewChild, ViewContainerRef, inject } from '@angular/core';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, catchError, concatMap, filter, of, toArray } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { NgForm, FormsModule } from '@angular/forms';\r\nimport { FeaturesScopedService } from '../../features/features-scoped.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { openFeatureDialog } from '../../features/shared/base-feature.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { ReservedNamesValidatorDirective } from '../edit-content-type-fields/reserved-names.directive';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FeatureIconIndicatorComponent } from '../../features/feature-icon-indicator/feature-icon-indicator.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { transient } from '../../core';\r\n\r\n@Component({\r\n  selector: 'app-add-sharing-fields',\r\n  templateUrl: './add-sharing-fields.component.html',\r\n  styleUrls: ['./add-sharing-fields.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    ReservedNamesValidatorDirective,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    TranslateModule,\r\n    FeatureIconIndicatorComponent,\r\n    FieldHintComponent,\r\n  ],\r\n})\r\nexport class AddSharingFieldsComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n\r\n  displayedShareableFieldsColumns: string[] = ['contentType', 'name', 'type', 'share'];\r\n  displayedSelectedFieldsColumns: string[] = ['newName', 'source', 'remove'];\r\n\r\n  protected shareableFields = new MatTableDataSource<Field>([]);\r\n  protected selectedFields = new MatTableDataSource<NewNameField>([]);\r\n  protected fieldNamePattern = fieldNamePattern;\r\n  protected fieldNameError = fieldNameError;\r\n  protected reservedNames: Record<string, string> = {};\r\n\r\n  protected saving$ = new BehaviorSubject(false);\r\n\r\n  #features = inject(FeaturesScopedService);\r\n\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  #fieldShareConfigManagement = this.#features.isEnabled[FeatureNames.FieldShareConfigManagement];\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: { contentType: ContentType, existingFields: Field[] },\r\n    private dialogRef: MatDialogRef<AddSharingFieldsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    // All this is just for the feature dialog\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n    this.dialogRef.disableClose = true;\r\n    this.subscriptions.add(\r\n      this.dialogRef.backdropClick().subscribe(() => {\r\n        if (this.form.dirty || this.selectedFields.data.length > 0) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) return;\r\n        }\r\n        this.closeDialog();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    // TODO: @SDV Try to find a better way to do this\r\n    this.subscriptions.add(\r\n      this.#contentTypesFieldsSvc.getShareableFields()\r\n        .subscribe(shareableFields => {\r\n          this.shareableFields.data = shareableFields;\r\n        })\r\n    );\r\n    this.subscriptions.add(\r\n      this.#contentTypesFieldsSvc.getReservedNames()\r\n        .subscribe(reservedNames => {\r\n          this.reservedNames = ReservedNamesValidatorDirective.assembleReservedNames(reservedNames, this.dialogData.existingFields);\r\n        })\r\n    );\r\n  }\r\n\r\n\r\n  ngOnDestroy() {\r\n    this.saving$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  // TODO: @SDV Try to find a better way to do this\r\n  selectField(field: Field) {\r\n    const selectedFields = this.selectedFields.data;\r\n    selectedFields.push({ newName: field.StaticName, field });\r\n    this.selectedFields.data = selectedFields;\r\n\r\n  }\r\n\r\n  // TODO: @SDV Try to find a better way to do this\r\n  removeField(field: NewNameField) {\r\n    const selectedFields = this.selectedFields.data;\r\n    selectedFields.splice(selectedFields.indexOf(field), 1);\r\n    this.selectedFields.data = selectedFields;\r\n  }\r\n\r\n  // When API gets created we will need to send the selected fields to the API\r\n  save() {\r\n    if (!this.#fieldShareConfigManagement()) {\r\n      openFeatureDialog(this.dialog, FeatureNames.FieldShareConfigManagement, this.viewContainerRef, this.changeDetectorRef);\r\n    } else {\r\n      this.saving$.next(true);\r\n      this.snackBar.open('Saving...');\r\n      of(...this.selectedFields.data).pipe(\r\n        filter(inheritField => !!inheritField.newName),\r\n        concatMap(inheritField =>\r\n          this.#contentTypesFieldsSvc.addInheritedField(\r\n            this.dialogData.contentType.Id,\r\n            inheritField.field.ContentType.Id,\r\n            inheritField.field.Guid,\r\n            inheritField.newName\r\n          ).pipe(catchError(error => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(responses => {\r\n        this.saving$.next(false);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.closeDialog();\r\n      });\r\n    }\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\nexport interface AppSharingFieldsViewModel {\r\n  shareableFields: Field[];\r\n  selectedFields: Field[];\r\n}\r\n\r\ninterface NewNameField {\r\n  newName: string;\r\n  field: Field;\r\n}\r\n","<div class=\"eav-dialog eav-no-scrollbar\" appToggleDebug>\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      @if (editMode === undefined) {\r\n        Fields\r\n      }\r\n      @if (editMode === null) {\r\n        Add Fields\r\n      }\r\n      @if (editMode != null) {\r\n        Edit Field\r\n      }\r\n    </div>\r\n  </div>\r\n  @if ((loading$ | async) === false) {\r\n    <form #ngForm=\"ngForm\" (ngSubmit)=\"save()\">\r\n      <div class=\"eav-dialog-content\">\r\n        @for (field of fields; track field; let i = $index) {\r\n          <div class=\"eav-row-container\">\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Name</mat-label>\r\n                <input matInput [pattern]=\"fieldNamePattern\" [appReservedNames]=\"reservedNames\" [(ngModel)]=\"field.StaticName\"\r\n                  [name]=\"'StaticName' + i\" #staticName=\"ngModel\" [disabled]=\"editMode === 'inputType'\">\r\n                </mat-form-field>\r\n                @if (staticName.touched && staticName.errors) {\r\n                  @if (staticName.errors.pattern) {\r\n                    <app-field-hint [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                  }\r\n                  @if (staticName.errors.reservedNames) {\r\n                    <app-field-hint [isError]=\"true\">\r\n                      {{ staticName.errors.reservedNames }}\r\n                    </app-field-hint>\r\n                  }\r\n                }\r\n              </div>\r\n              <div class=\"eav-edit-input\">\r\n                <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                  <mat-label>Data Type</mat-label>\r\n                  <mat-select (selectionChange)=\"filterInputTypeOptions(i); resetInputType(i); calculateHints(i)\"\r\n                    [(ngModel)]=\"field.Type\" [name]=\"'Type' + i\" [disabled]=\"editMode != null\">\r\n                    <mat-select-trigger>\r\n                      <mat-icon class=\"eav-type-icon\">{{ findIcon(field.Type) }}</mat-icon>\r\n                      <span>{{ findLabel(field.Type) }}</span>\r\n                    </mat-select-trigger>\r\n                    @for (dataType of dataTypes; track dataType) {\r\n                      <mat-option [value]=\"dataType.name\">\r\n                        <mat-icon class=\"eav-type-icon\">{{ dataType.icon }}</mat-icon>\r\n                        <span>{{ dataType.label }}</span>\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                </mat-form-field>\r\n                <app-field-hint>{{ dataTypeHints[i] }}</app-field-hint>\r\n              </div>\r\n              <div class=\"eav-edit-input\">\r\n                <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                  <mat-label>Input Type</mat-label>\r\n                  <mat-select (selectionChange)=\"calculateHints(i)\" [(ngModel)]=\"field.InputType\" [name]=\"'InputType' + i\"\r\n                    [disabled]=\"editMode === 'name'\">\r\n                    <mat-select-trigger>\r\n                      <span>{{ getInputTypeOption(field.InputType)?.label }}</span>\r\n                      <mat-icon class=\"eav-input-icon\">{{ getInputTypeOption(field.InputType)?.icon }}</mat-icon>\r\n                    </mat-select-trigger>\r\n                    @for (option of filteredInputTypeOptions[i]; track option) {\r\n                      <mat-option [value]=\"option.inputType\"\r\n                        [ngClass]=\"{ 'eav-input-obsolete': option.isObsolete }\">\r\n                        <!-- div is needed here because <mat-option> by default puts mat-icon on the first place if it exists -->\r\n                        <div>\r\n                          <span>{{ option.label }}</span>\r\n                          @if (option.icon) {\r\n                            <mat-icon class=\"eav-input-icon\">{{ option.icon }}</mat-icon>\r\n                          }\r\n                        </div>\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                </mat-form-field>\r\n                <app-field-hint>{{ inputTypeHints[i] }}</app-field-hint>\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n        <!--\r\n        TODO: @SDV\r\n        - create a button to the left which is only visible in debug mode!\r\n        - Label: Add Shared Field (BETA) - put it in i18n\r\n      - on click, open a dialog\r\n        - Title: \"Add Fields which Inherits Configuration\" (i18n)\r\n        - Content: \"Pick original fields which we'll inherit from\" (i18n)\r\n        - The screen should now be split into 2 columns. Both columns should scroll independently\r\n          - Left column: a list of all content-types/fields can be selected\r\n            - get from the api fields/GetSharedFields\r\n            - show a table with these columns\r\n              - Content Type (from the new Field.ContentType.Name)\r\n              - Field (Field.Name)\r\n              - Type (Field.Type)\r\n            - On click, an entry is added to the table in the right column\r\n          - Right column: a list of all fields which were selected, and should be added\r\n            - show a table with these columns\r\n              - Name (input field - initial value is Field.Name, but editable)\r\n              - Source (basically [ContentType.Name]/[Field.Name]([Field.Type]))\r\n              - Remove button\r\n        - At the end the Cancel / Ok button\r\n        - When OK is pressed, nothing happens yet\r\n        -->\r\n        <mat-dialog-actions>\r\n          @if (isDebug()) {\r\n            <button mat-raised-button type=\"button\" (click)=\"addSharedField()\">{{ \"SharingOrInheriting.AddSharedField\" | translate }}</button>\r\n          }\r\n          <div class=\"spacer\"></div>\r\n          <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n          <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || (saving$ | async)\">\r\n            Save\r\n          </button>\r\n        </mat-dialog-actions>\r\n      </form>\r\n    }\r\n  </div>\r\n\r\n","import { Component, HostBinding, inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm, FormsModule } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, catchError, concatMap, filter, forkJoin, map, of, share, switchMap, toArray } from 'rxjs';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { InputTypeStrict, InputTypeCatalog } from '../../shared/fields/input-type-catalog';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\nimport { Field, FieldInputTypeOption } from '../../shared/fields/field.model';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { calculateDataTypes, DataType } from './edit-content-type-fields.helpers';\r\nimport { AddSharingFieldsComponent } from '../add-sharing-fields/add-sharing-fields.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { NgClass, AsyncPipe } from '@angular/common';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { ReservedNamesValidatorDirective } from './reserved-names.directive';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ToggleDebugDirective } from '../../shared/directives/toggle-debug.directive';\r\nimport { transient } from '../../core';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type-fields',\r\n  templateUrl: './edit-content-type-fields.component.html',\r\n  styleUrls: ['./edit-content-type-fields.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    ReservedNamesValidatorDirective,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatOptionModule,\r\n    NgClass,\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    AsyncPipe,\r\n    TranslateModule,\r\n    FieldHintComponent,\r\n    ToggleDebugDirective,\r\n  ],\r\n})\r\nexport class EditContentTypeFieldsComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n\r\n  fields: Partial<Field>[] = [];\r\n  existingFields: Field[] = [];\r\n  reservedNames: Record<string, string> = {};\r\n  editMode: 'name' | 'inputType';\r\n  dataTypes: DataType[];\r\n  filteredInputTypeOptions: FieldInputTypeOption[][] = [];\r\n  dataTypeHints: string[] = [];\r\n  inputTypeHints: string[] = [];\r\n  fieldNamePattern = fieldNamePattern;\r\n  fieldNameError = fieldNameError;\r\n  findIcon = calculateTypeIcon;\r\n  findLabel = calculateTypeLabel;\r\n  loading$ = new BehaviorSubject(true);\r\n  saving$ = new BehaviorSubject(false);\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n\r\n  private contentType: ContentType;\r\n  private inputTypeOptions: FieldInputTypeOption[];\r\n\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private contentTypesFieldsService = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<EditContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n  ) {\r\n    super();\r\n    this.dialogRef.disableClose = true;\r\n    this.subscriptions.add(\r\n      this.dialogRef.backdropClick().subscribe(event => {\r\n        if (this.form.dirty) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) return;\r\n        }\r\n        this.closeDialog();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.editMode = this.route.snapshot.paramMap.get('editMode') as 'name' | 'inputType';\r\n\r\n    const contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n    const contentType$ = this.contentTypesService.retrieveContentType(contentTypeStaticName).pipe(share());\r\n    const fields$ = contentType$.pipe(switchMap(contentType => this.contentTypesFieldsService.getFields(contentType.StaticName)));\r\n    const dataTypes$ = this.contentTypesFieldsService.typeListRetrieve().pipe(map(rawDataTypes => calculateDataTypes(rawDataTypes)));\r\n    const inputTypes$ = this.contentTypesFieldsService.getInputTypesList();\r\n    const reservedNames$ = this.contentTypesFieldsService.getReservedNames();\r\n\r\n    forkJoin([contentType$, fields$, dataTypes$, inputTypes$, reservedNames$]).subscribe(\r\n      ([contentType, fields, dataTypes, inputTypes, reservedNames]) => {\r\n        this.contentType = contentType;\r\n        this.dataTypes = dataTypes;\r\n        this.inputTypeOptions = inputTypes;\r\n        this.existingFields = fields;\r\n\r\n        this.reservedNames = ReservedNamesValidatorDirective.assembleReservedNames(reservedNames, fields);\r\n\r\n        if (this.editMode != null) {\r\n          const editFieldId = this.route.snapshot.paramMap.get('id') ? parseInt(this.route.snapshot.paramMap.get('id'), 10) : null;\r\n          const editField = fields.find(field => field.Id === editFieldId);\r\n          if (this.editMode === 'name')\r\n            delete this.reservedNames[editField.StaticName];\r\n          this.fields.push(editField);\r\n        } else {\r\n          for (let i = 1; i <= 8; i++) {\r\n            this.fields.push({\r\n              Id: 0,\r\n              Type: DataTypeCatalog.String,\r\n              InputType: InputTypeCatalog.StringDefault,\r\n              StaticName: '',\r\n              IsTitle: fields.length === 0,\r\n              SortOrder: fields.length + i,\r\n            });\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < this.fields.length; i++) {\r\n          this.filterInputTypeOptions(i);\r\n          this.calculateHints(i);\r\n        }\r\n\r\n        this.loading$.next(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.loading$.complete();\r\n    this.saving$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  filterInputTypeOptions(index: number) {\r\n    this.filteredInputTypeOptions[index] = this.inputTypeOptions.filter(\r\n      option => option.dataType === this.fields[index].Type.toLocaleLowerCase()\r\n    );\r\n  }\r\n\r\n  resetInputType(index: number) {\r\n    let defaultInputType = this.fields[index].Type.toLocaleLowerCase() + InputTypeCatalog.DefaultSuffix as InputTypeStrict;\r\n    const defaultExists = this.filteredInputTypeOptions[index].some(option => option.inputType === defaultInputType);\r\n    if (!defaultExists)\r\n      defaultInputType = this.filteredInputTypeOptions[index][0].inputType;\r\n    this.fields[index].InputType = defaultInputType;\r\n  }\r\n\r\n  calculateHints(index: number) {\r\n    const selectedDataType = this.dataTypes.find(dataType => dataType.name === this.fields[index].Type);\r\n    const selectedInputType = this.inputTypeOptions.find(inputTypeOption => inputTypeOption.inputType === this.fields[index].InputType);\r\n    this.dataTypeHints[index] = selectedDataType?.description ?? '';\r\n    this.inputTypeHints[index] = selectedInputType?.isObsolete\r\n      ? `OBSOLETE - ${selectedInputType.obsoleteMessage}`\r\n      : selectedInputType?.description ?? '';\r\n  }\r\n\r\n  getInputTypeOption(inputName: string) {\r\n    return this.inputTypeOptions.find(option => option.inputType === inputName);\r\n  }\r\n\r\n  addSharedField() {\r\n    this.dialog.open(AddSharingFieldsComponent, {\r\n      autoFocus: false,\r\n      width: '1600px',\r\n      data: { contentType: this.contentType, existingFields: this.existingFields }\r\n    });\r\n  }\r\n\r\n  save() {\r\n    this.saving$.next(true);\r\n    this.snackBar.open('Saving...');\r\n    if (this.editMode != null) {\r\n      const field = this.fields[0];\r\n      if (this.editMode === 'name') {\r\n        this.contentTypesFieldsService.rename(field.Id, this.contentType.Id, field.StaticName).subscribe(() => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n      } else if (this.editMode === 'inputType') {\r\n        this.contentTypesFieldsService.updateInputType(field.Id, field.StaticName, field.InputType).subscribe(() => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n      }\r\n    } else {\r\n      of(...this.fields).pipe(\r\n        filter(field => !!field.StaticName),\r\n        concatMap(field =>\r\n          this.contentTypesFieldsService.add(field, this.contentType.Id).pipe(catchError(error => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(_ => {\r\n        this.saving$.next(false);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.closeDialog();\r\n      });\r\n    }\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    NgClass,\r\n    NgTemplateOutlet\r\n  ]\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"x_google_ignoreList":[0,1]}