{"version":3,"sources":["./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.html","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/ng-dialogs/src/app/content-items/content-items.component.html","./projects/ng-dialogs/src/app/content-items/content-items.component.ts","./projects/ng-dialogs/src/app/content-items/content-items.helpers.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.html","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts"],"names":["agInit","params","this","item","data","refresh","clone","onClone","export","onExport","deleteItem","onDelete","ContentItemsActionsComponent","Array","isArray","value","encodedValue","htmlEncode","join","colDef","allowMultiValue","entities","length","text","replace","ContentItemsEntityComponent","For","metadataTooltip","Target","Number","String","Guid","ContentItemsStatusComponent","published","metadata","isFilterActive","doesFilterPass","publishedPassed","metadataPassed","valueGetter","node","toString","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","PubMetaFilterComponent","dialogRef","hostClass","eavConstants","freeTextTargetType","ngOnInit","form","addControl","control","keyType","controls","mismatch","targetTypeOptions","Object","values","map","option","knownTargetTypes","type","keyTypeOptions","closeDialog","result","close","confirm","formValues","getRawValue","target","find","targetType","key","CreateMetadataDialogComponent","contentTypesService","router","route","contentItemsService","entitiesService","contentExportService","snackBar","globalConfigService","dialog","viewContainerRef","changeDetectorRef","contentType$","BehaviorSubject","items$","debugEnabled$","getDebugEnabled$","modules","gridOptions","frameworkComponents","pubMetaFilterComponent","booleanFilterComponent","idFieldComponent","contentItemsStatusComponent","contentItemsActionsComponent","contentItemsEntityComponent","gridApi$","contentTypeStaticName","snapshot","paramMap","get","subscription","Subscription","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","onGridReady","next","api","retrieveContentType","subscribe","contentType","getAll","items","getColumns","columns","columnDefs","buildColumnDefs","filterModel","urlFilters","parsed","charAt","atob","JSON","parse","error","console","IsPublished","IsMetadata","Status","filter","filterKeys","keys","filterTo","buildFilterModel","sessionStorage","getItem","setColumnDefs","pipe","gridApi","take","setFilterModel","editItem","formUrl","ContentTypeName","EntityId","Id","navigate","relativeTo","exportContent","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","filesDropped","files","importFile","name","substring","lastIndexOf","toLocaleLowerCase","importContent","importItem","state","addMetadata","open","autoFocus","width","afterClosed","res","parseInt","markForCheck","debugFilter","warn","alert","add","events","event","startWith","firstChild","pairwise","headerName","field","headerClass","cellClass","cellRenderer","sortable","cellRendererParams","tooltipGetter","paramsData","_RepositoryId","valueGetterStatus","flex","minWidth","onCellClicked","bind","headerTooltip","valueGetterUsage","pinned","delete","column","StaticName","Type","Metadata","Entity","AllowMultiValue","e","valueGetterEntityField","useTimePicker","DateTime","UseTimePicker","valueGetterDateTime","valueGetterBoolean","DuplicateEntity","exportEntity","_Title","duration","err","dismiss","ExceptionMessage","_Used","_Uses","rawValue","Title","ContentItemsComponent","id","tooltip","copy","IdFieldComponent","onClick","stopPropagation","ClickStopPropagationDirective","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","ToggleDebugDirective","copyToClipboard","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange","sanitizer","transform","html","bypassSecurityTrustHtml","SafeHtmlPipe"],"mappings":"6cAKA,aASE,c,OAEA,YAAAA,OAAA,SAAOC,GACLC,KAAKD,OAASA,EACdC,KAAKC,KAAOF,EAAOG,MAGrB,YAAAC,QAAA,SAAQJ,GACN,OAAO,GAGT,YAAAK,MAAA,WACEJ,KAAKD,OAAOM,QAAQL,KAAKC,OAG3B,YAAAK,OAAA,WACEN,KAAKD,OAAOQ,SAASP,KAAKC,OAG5B,YAAAO,WAAA,WACER,KAAKD,OAAOU,SAAST,KAAKC,O,sCAxBjBS,I,wBAAAA,EAA4B,yZ,GAAA,MCVzC,iBACE,iBAA0D,gCAAS,EAAAN,UACjE,oBAAU,qBAAS,QACrB,QACA,iBAA4D,gCAAS,EAAAE,WACnE,oBAAU,0BAAc,QAC1B,QACA,iBACE,oBAAU,sBAAU,QACtB,QACF,QAEA,yBACE,qBAAsB,gCAAS,EAAAE,eAC7B,qBAAU,mBAAM,QAChB,iBAAM,mBAAM,QACd,QACF,S,qBAV4D,wC,0DDF5D,G,mCEJE,kBAA6C,SAAc,S,mBAAd,4BCI/C,+B,OASE,YAAAV,OAAA,SAAOC,GACAY,MAAMC,QAAQb,EAAOc,SAE1Bb,KAAKc,aAAed,KAAKe,WAAWhB,EAAOc,MAAMG,KAAK,OACjDjB,EAAOkB,OAA0BC,kBACpClB,KAAKmB,SAAWpB,EAAOc,MAAMO,UAIjC,YAAAjB,QAAA,SAAQJ,GACN,OAAO,GAID,YAAAgB,WAAR,SAAmBM,GACjB,OAAOA,EAAKC,QAAQ,KAAM,SAASA,QAAQ,KAAM,UAAUA,QAAQ,KAAM,SAASA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,S,sCAnB7GC,I,wBAAAA,EAA2B,iKDVxC,iBACE,wBACA,SACF,S,MAHK,8BACI,kCACP,0C,uLCGF,G,sBCJE,sBAAoD,sBAAU,S,sBAC9D,sBAAyD,0BAAc,S,yBACvE,sBAA6E,uBAAW,S,mBAArC,kCCGrD,+B,OASE,YAAAzB,OAAA,SAAOC,GAELC,KAAKa,MAAQd,EAAOc,MACpB,IAAMZ,EAAoBF,EAAOG,KAC7BD,EAAKuB,MACPxB,KAAKyB,gBAAkB,mBACRxB,EAAKuB,IAAIE,QACnBzB,EAAKuB,IAAIG,OAAS,aAAa1B,EAAKuB,IAAIG,OAAW,KACnD1B,EAAKuB,IAAII,OAAS,aAAa3B,EAAKuB,IAAII,OAAW,KACnD3B,EAAKuB,IAAIK,KAAO,WAAW5B,EAAKuB,IAAIK,KAAS,MAItD,YAAA1B,QAAA,SAAQJ,GACN,OAAO,G,sCAlBE+B,I,wBAAAA,EAA2B,wSDXxC,iBACE,4BACA,4BACA,4BACF,S,MAHa,yCACA,0CACkB,0C,yFCG/B,G,oBCDA,0BAME,KAAAC,UAAY,GACZ,KAAAC,SAAW,G,OAIX,YAAAlC,OAAA,SAAOC,GACLC,KAAKD,OAASA,GAGhB,YAAAkC,eAAA,WACE,MAA0B,KAAnBjC,KAAK+B,WAAsC,KAAlB/B,KAAKgC,UAGvC,YAAAE,eAAA,SAAenC,GACb,IAAIoC,EACAC,EACEvB,EAAiBb,KAAKD,OAAOsC,YAAYtC,EAAOuC,MAmBtD,OAhBIH,EAFmB,KAAnBnC,KAAK+B,WACHlB,QAAMkB,WAGUlB,EAAMkB,UAAUQ,aAAevC,KAAK+B,UAOtDK,EAFkB,KAAlBpC,KAAKgC,UACHnB,QAAMmB,UAGSnB,EAAMmB,SAASO,aAAevC,KAAKgC,SAKjDG,GAAmBC,GAG5B,YAAAI,SAAA,WACE,GAAKxC,KAAKiC,iBACV,MAAO,CACLQ,WAAY,WACZV,UAAW/B,KAAK+B,UAChBC,SAAUhC,KAAKgC,WAInB,YAAAU,SAAA,SAASC,GACP3C,KAAK+B,UAAYY,EAAQA,EAAMZ,UAAY,GAC3C/B,KAAKgC,SAAWW,EAAQA,EAAMX,SAAW,IAG3C,YAAAY,iBAAA,SAAiB7C,KAGjB,YAAA8C,cAAA,WACE7C,KAAKD,OAAO+C,yB,sCAzDHC,I,wBAAAA,EAAsB,oLCVnC,iBAAmB,qBAAS,QAC5B,6BAAiB,yDAAuB,kCAAkB,EAAAF,kBACxD,8BAA2B,eAAG,QAC9B,8BAA+B,qBAAS,QACxC,8BAAgC,yBAAa,QAC/C,QAEA,iBAAmB,qBAAQ,QAC3B,8BAAiB,wDAAsB,kCAAkB,EAAAA,kBACvD,+BAA2B,gBAAG,QAC9B,+BAA+B,wBAAW,QAC1C,+BAAgC,4BAAe,QACjD,S,MAXiB,sCAOA,uC,0PDHjB,G,+FEUQ,yBACE,SACF,S,uBAFqD,sBACnD,kC,yBAEF,yBAEE,SACF,S,oBAFE,gDACA,0D,yBANJ,yBACE,+BAGA,+BAIF,S,mBAPiC,8CAGlB,uF,qBAMf,oB,sBAQF,6BAEE,oCACF,S,KAFE,oB,sBAGF,6BAGE,8HACF,S,KAFE,oB,yBAQE,yBACE,SACF,S,uBAFkD,iBAChD,2B,sBAKN,6BAEE,oCACF,S,KAFE,oB,qBAOA,oB,qBACA,oB,uBAGF,6BACE,oCACF,S,KAF8F,oB,uBAG9F,6BAGE,0CACF,S,KAFE,oBC9DN,kBAeE,WAAoBG,GAAA,KAAAA,YATM,KAAAC,UAAY,mBAEtC,KAAAC,aAAe,IAGf,KAAAC,oBAAqB,E,OAMrB,YAAAC,SAAA,WCtBK,IAA8BC,EDuBjCrD,KAAKqD,KAAO,IAAI,KAAU,IAC1BrD,KAAKqD,KAAKC,WAAW,aAAc,IAAI,KAAY,yBAAmC,CAAC,iBACvFtD,KAAKqD,KAAKC,WAAW,UAAW,IAAI,KAAY,oBAA8B,CAAC,iBAC/EtD,KAAKqD,KAAKC,WAAW,MAAO,IAAI,KAAY,KAAM,CAAC,eC1BlBD,ED0B4DrD,KAAKqD,KCzB7F,SAACE,GACN,IAAMC,EAAwCH,EAAKI,SAAkB,QAAE5C,MAKvE,MAFc,WAAZ2C,GAAiD,iBAAlBD,EAAQ1C,OAC3B,WAAZ2C,GAAiD,iBAAlBD,EAAQ1C,MACvB,CAAE6C,UAAU,GAAS,UDqBvC1D,KAAK2D,kBAAoBC,OAAOC,OAAO,cAAuBC,IAAI,SAAAC,GAAU,OAAC,WAAKA,KAClF/D,KAAKgE,iBAAmBhE,KAAK2D,kBAAkBG,IAAI,SAAAC,GAAU,OAAAA,EAAOE,OACpEjE,KAAKkE,eAAiBN,OAAOC,OAAO,eAGtC,YAAAM,YAAA,SAAYC,GACVpE,KAAKgD,UAAUqB,MAAMD,IAGvB,YAAAE,QAAA,W,QACQC,EAAiCvE,KAAKqD,KAAKmB,cAI3CJ,EAAuB,CAC3BK,OAHiG,QAApF,EAA4E,QAA5E,EAAAzE,KAAK2D,kBAAkBe,KAAK,SAAAX,GAAU,OAAAA,EAAOE,OAASM,EAAWI,oBAAW,eAAEF,cAAM,QAAIF,EAAWI,WAAWpC,WAI3HiB,QAASe,EAAWf,QACpBoB,IAAKL,EAAWK,IAAIrC,YAEtBvC,KAAKmE,YAAYC,I,sCArCRS,GAA6B,c,wBAA7BA,EAA6B,sF,2lCDZ1C,iBACE,iBAA8B,gCAAoB,QACpD,QAEA,eACE,6FACF,QAEA,kBACE,iBAGE,4BACE,qBAAW,gDAAoC,QAC/C,+BAUA,0BAEA,qBAA8D,6EAE5D,qBAAU,wBAAW,QACvB,QACF,QAEA,mCAIA,mCAOA,6BACE,sBAAW,uCAA0B,QACrC,0BACE,gCAGF,QACF,QAEA,mCAMA,6BACE,sBAAW,kCAAqB,QAChC,2BACA,2BACF,QAEA,oCAGA,oCAKF,QAEA,mBACE,sBAA0B,gCAAS,EAAAV,gBAAe,mBAAM,QACxD,sBAAkE,gCAAS,EAAAG,YAAW,oBAAO,QAC/F,QACF,S,MAtEM,mCAMa,6CAU0B,4CAQxB,qJAKd,+JASgC,2CAMlB,4IAQc,gEACE,gEAGhB,gIAId,0MAQsC,2C,uPCrE7C,G,qIEKE,kB,0BACE,4B,QAAA,O,uCA0BE,qBACE,iEACA,oBAAU,uBAAW,QACrB,gBAAM,kBAAM,QACd,SCHN,kBA2BE,WACUtB,EACA8B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAXA,KAAAxC,YACA,KAAA8B,sBACA,KAAAC,SACA,KAAAC,QACA,KAAAC,sBACA,KAAAC,kBACA,KAAAC,uBACA,KAAAC,WACA,KAAAC,sBACA,KAAAC,SACA,KAAAC,mBACA,KAAAC,oBAjCV,KAAAC,aAAe,IAAIC,EAAA,EAA6B,MAChD,KAAAC,OAAS,IAAID,EAAA,EAA+B,MAC5C,KAAAE,cAAgB5F,KAAKqF,oBAAoBQ,mBAEzC,KAAAC,QAAU,KACV,KAAAC,aAAW,oBACN,KAAkB,CACrBC,oBAAqB,CACnBC,uBAAwBlD,EACxBmD,uBAAwB,IACxBC,iBAAkB,IAClBC,4BAA6BtE,EAC7BuE,6BAA8B3F,EAC9B4F,4BAA6B/E,KAIzB,KAAAgF,SAAW,IAAIb,EAAA,EAAyB,MACxC,KAAAc,sBAAwBxG,KAAKgF,MAAMyB,SAASC,SAASC,IAAI,yBACzD,KAAAC,aAAe,IAAIC,EAAA,E,OAiB3B,YAAAzD,SAAA,WACEpD,KAAK8G,mBACL9G,KAAK+G,aACL/G,KAAKgH,eACLhH,KAAKiH,wBAGP,YAAAC,YAAA,WACElH,KAAKyF,aAAa0B,WAClBnH,KAAK2F,OAAOwB,WACZnH,KAAKuG,SAASY,WACdnH,KAAK4G,aAAaQ,eAGpB,YAAAjD,YAAA,WACEnE,KAAKgD,UAAUqB,SAGjB,YAAAgD,YAAA,SAAYtH,GACVC,KAAKuG,SAASe,KAAKvH,EAAOwH,MAGpB,YAAAT,iBAAR,sBACE9G,KAAK8E,oBAAoB0C,oBAAoBxH,KAAKwG,uBAAuBiB,UAAU,SAAAC,GACjF,EAAKjC,aAAa6B,KAAKI,MAInB,YAAAX,WAAR,sBACE/G,KAAKiF,oBAAoB0C,OAAO3H,KAAKwG,uBAAuBiB,UAAU,SAAAG,GACpE,EAAKjC,OAAO2B,KAAKM,MAIb,YAAAZ,aAAR,sBACEhH,KAAKiF,oBAAoB4C,WAAW7H,KAAKwG,uBAAuBiB,UAAU,SAAAK,GACxE,IAAMC,EAAa,EAAKC,gBAAgBF,GAClCG,EClHL,SAA0BC,G,QAC/B,GAAKA,EAAL,CAOA,IAAIC,EAJ6C,MAA7CD,EAAWE,OAAOF,EAAW9G,OAAS,KACxC8G,EAAaG,KAAKH,IAIpB,IACEC,EAASG,KAAKC,MAAML,GACpB,MAAOM,GACPC,QAAQD,MAAM,0CAA4CN,GAE5D,GAAKC,EAAL,CAGA,IAAMF,EAAiC,IACnCE,EAAOO,aAAeP,EAAOQ,cAM/BV,EAAYW,OALNC,EAA6B,CACjCpG,WAAY,WACZV,UAAWoG,EAAOO,YAAcP,EAAOO,YAAc,GACrD1G,SAAUmG,EAAOQ,WAAaR,EAAOQ,WAAa,KAKtD,IAAMG,EAAalF,OAAOmF,KAAKZ,G,IAC/B,IAAkB,eAAAW,GAAU,8BAAE,CAAzB,IAAMlE,EAAG,QACZ,GAAY,gBAARA,GAAiC,eAARA,EAA7B,CAEA,IAAM/D,EAAQsH,EAAOvD,GACrB,GAAqB,iBAAV/D,EAEToH,EAAYrD,GADNiE,EAA0B,CAAEpG,WAAY,OAAQwB,KAAM,SAAU4E,OAAQhI,QAEzE,GAAqB,iBAAVA,EAEhBoH,EAAYrD,GADNiE,EAA4B,CAAEpG,WAAY,SAAUwB,KAAM,SAAU4E,OAAQhI,EAAOmI,SAAU,WAE9F,GAAqB,kBAAVnI,EAAuB,CACvC,IAAMgI,EAA6B,CAAEpG,WAAY,UAAWoG,OAAQhI,EAAM0B,YAC1E0F,EAAYrD,GAAOiE,K,iGAIvB,OAAOZ,IDsEiBgB,CAAiBC,eAAeC,QAAQ,OACxD,EAAK5C,SAAS1F,MAChB,EAAKuI,cAAcrB,EAAYE,GAE/B,EAAK1B,SAAS8C,MACZ,EAAAR,EAAA,GAAO,SAAAS,GAAW,OAAW,MAAXA,KAClB,EAAAC,EAAA,GAAK,IACL9B,UAAU,SAAA6B,GACV,EAAKF,cAAcrB,EAAYE,QAM/B,YAAAmB,cAAR,SAAsBrB,EAAsBE,GAC1CjI,KAAKuG,SAAS1F,MAAMuI,cAAcrB,GAC9BE,KACF,OAAkB,4BAA6BA,GAC/CjI,KAAKuG,SAAS1F,MAAM2I,eAAevB,KAIvC,YAAAwB,SAAA,SAAS1J,GACP,IAAME,EAAoBF,aAAM,EAANA,EAAQG,KAQ5BwJ,GAAU,OAPO,CACrB9B,MAAO,CACG,MAAR3H,EACI,CAAE0J,gBAAiB3J,KAAKwG,uBACxB,CAAEoD,SAAU3J,EAAK4J,OAIzB7J,KAAK+E,OAAO+E,SAAS,CAAC,QAAQJ,GAAY,CAAEK,WAAY/J,KAAKgF,SAG/D,YAAAgF,cAAA,WACE,IAAM/B,EAAcjI,KAAKuG,SAAS1F,MAAMoJ,iBAClCC,EAAatG,OAAOmF,KAAKd,GAAa7G,OAAS,EAC/C+I,EAAgB,GAClBD,GACFlK,KAAKuG,SAAS1F,MAAMuJ,8BAA8B,SAAAC,GAChDF,EAAIG,KAAMD,EAAQnK,KAAqB2J,MAG3C7J,KAAK+E,OAAO+E,SAAS,CAAC,UAAU9J,KAAKwG,uBAAwB2D,EAAI/I,OAAS,EAAI,IAAI+I,EAAQ,KAAO,CAAEJ,WAAY/J,KAAKgF,SAGtH,YAAAuF,aAAA,SAAaC,GACX,IAAMC,EAAaD,EAAM,GAEzB,OADYC,EAAWC,KAAKC,UAAUF,EAAWC,KAAKE,YAAY,KAAO,GAAGC,qBAE1E,IAAK,MACH7K,KAAK8K,cAAcN,GACnB,MACF,IAAK,OACHxK,KAAK+K,WAAWP,KAKtB,YAAAM,cAAA,SAAcN,GAEZxK,KAAK+E,OAAO+E,SAAS,CAAI9J,KAAKwG,sBAAqB,WAAY,CAAEuD,WAAY/J,KAAKgF,MAAOgG,MAD7C,CAAER,MAAK,MAIrD,YAAAO,WAAA,SAAWP,GAETxK,KAAK+E,OAAO+E,SAAS,CAAC,UAAW,CAAEC,WAAY/J,KAAKgF,MAAOgG,MADX,CAAER,MAAK,MAIzD,YAAAS,YAAA,sBAC4BjL,KAAKsF,OAAO4F,KAAKrG,GAA+B,CACxEsG,WAAW,EACX5F,iBAAkBvF,KAAKuF,iBACvB6F,MAAO,UAESC,cAAchC,MAAK,EAAAE,EAAA,GAAK,IAAI9B,UAAU,SAAC6D,GACvD,GAAW,MAAPA,EAAJ,CAEA,IAAMjI,EAAiB,CACrBuE,MAAO,CAAC,CACN+B,gBAAiB,EAAKnD,sBACtBhF,KAAK,SAAF,kBACDE,OAAQ4J,EAAI7G,QACR6G,EAAI9H,UAAY,mBAA8B,CAAE3B,KAAMyJ,EAAI1G,MAC1D0G,EAAI9H,UAAY,qBAAgC,CAAE7B,OAAQ4J,SAASD,EAAI1G,IAAK,MAC5E0G,EAAI9H,UAAY,qBAAgC,CAAE5B,OAAQ0J,EAAI1G,SAIlE8E,GAAU,OAAiBrG,GACjC,EAAK0B,OAAO+E,SAAS,CAAC,QAAQJ,GAAY,CAAEK,WAAY,EAAK/E,QAC7D,EAAKQ,kBAAkBgG,mBAI3B,YAAAC,YAAA,WACEhD,QAAQiD,KAAK,kBAAmB1L,KAAKuG,SAAS1F,MAAMoJ,kBACpD0B,MAAM,yCAGA,YAAA1E,qBAAR,sBACEjH,KAAK4G,aAAagF,IAChB5L,KAAK+E,OAAO8G,OAAOxC,MACjB,EAAAR,EAAA,GAAO,SAAAiD,GAAS,OAAAA,aAAiB,QACjC,EAAAC,EAAA,KAAY/L,KAAKgF,MAAMyB,SAASuF,aAChC,EAAAlI,EAAA,GAAI,WAAM,QAAE,EAAKkB,MAAMyB,SAASuF,cAChC,EAAAC,EAAA,MACA,EAAApD,EAAA,GAAO,SAAC,G,IAAA,gBAAyB,OAAhB,OAAU,QAC3BpB,UAAU,WACV,EAAKV,iBAKH,YAAAiB,gBAAR,SAAwBF,G,QAChBC,EAAuB,CAC3B,CACEmE,WAAY,KAAMC,MAAO,KAAMf,MAAO,GAAIgB,YAAa,QAASC,UAAW,kCAC3EC,aAAc,mBAAoBC,UAAU,EAAM1D,OAAQ,qBAC1D2D,mBAAoB,CAClBC,cAAe,SAACC,GAA4B,aAAOA,EAAW7C,GAAE,aAAa6C,EAAWC,cAAa,WAAWD,EAAW7K,QAG/H,CACEqK,WAAY,SAAUC,MAAO,SAAUf,MAAO,GAAIgB,YAAa,QAASC,UAAW,aACnFxD,OAAQ,yBAA0ByD,aAAc,8BAA+BjK,YAAarC,KAAK4M,mBAEnG,CACEV,WAAY,gBAAiBC,MAAO,SAAUU,KAAM,EAAGC,SAAU,IAAKT,UAAW,2BACjFE,UAAU,EAAM1D,OAAQ,qBAAsBkE,cAAe/M,KAAKyJ,SAASuD,KAAKhN,OAElF,CACEkM,WAAY,QAASe,cAAe,+BACpCd,MAAO,QAASf,MAAO,GAAIgB,YAAa,QAASC,UAAW,aAC5DE,UAAU,EAAM1D,OAAQ,qBAAsBxG,YAAarC,KAAKkN,kBAElE,CACEb,UAAW,8BAA+BjB,MAAO,IAAKkB,aAAc,+BAAgCa,OAAQ,QAC5GX,mBAAoB,CAClBnM,QAASL,KAAKI,MAAM4M,KAAKhN,MACzBO,SAAUP,KAAKM,OAAO0M,KAAKhN,MAC3BS,SAAUT,KAAKoN,OAAOJ,KAAKhN,S,IAIjC,IAAqB,eAAA8H,GAAO,8BAAE,CAAzB,IAAMuF,EAAM,QACTpM,EAAyB,CAC7BiL,WAAYmB,EAAOC,WAAYnB,MAAOkB,EAAOC,WAAYT,KAAM,EAAGC,SAAU,IAAKT,UAAW,aAC5FE,UAAU,GAEZ,OAAQc,EAAOE,MACb,KAAK,WACH,IACEtM,EAAOC,gBAAkBmM,EAAOG,SAASC,OAAOC,gBAChD,MAAOC,GACP1M,EAAOC,iBAAkB,EAE3BD,EAAOqL,aAAe,8BACtBrL,EAAOoB,YAAcrC,KAAK4N,uBAC1B3M,EAAO4H,OAAS,qBAChB,MACF,KAAK,aACH,IACE5H,EAAO4M,cAAgBR,EAAOG,SAASM,SAASC,cAChD,MAAOJ,GACP1M,EAAO4M,eAAgB,EAEzB5M,EAAOoB,YAAcrC,KAAKgO,oBAC1B/M,EAAO4H,OAAS,qBAChB,MACF,KAAK,YACH5H,EAAOoB,YAAcrC,KAAKiO,mBAC1BhN,EAAO4H,OAAS,yBAChB,MACF,KAAK,WACH5H,EAAO4H,OAAS,uBAChB,MACF,QACE5H,EAAO4H,OAAS,qBAGpBd,EAAWuC,KAAKrJ,I,iGAElB,OAAO8G,GAGD,YAAA3H,MAAR,SAAcH,GACZ,IAGMyJ,GAAU,OAHO,CACrB9B,MAAO,CAAC,CAAE+B,gBAAiB3J,KAAKwG,sBAAuB0H,gBAAiBjO,EAAK4J,OAG/E7J,KAAK+E,OAAO+E,SAAS,CAAC,QAAQJ,GAAY,CAAEK,WAAY/J,KAAKgF,SAGvD,YAAA1E,OAAR,SAAeL,GACbD,KAAKmF,qBAAqBgJ,aAAalO,EAAK4J,GAAI7J,KAAKwG,uBAAuB,IAGtE,YAAA4G,OAAR,SAAenN,GAAf,WACOqE,QAAQ,WAAWrE,EAAKmO,OAAM,MAAMnO,EAAK0M,cAAa,QAC3D3M,KAAKoF,SAAS8F,KAAK,eACnBlL,KAAKkF,gBAAgBkI,OAAOpN,KAAKwG,sBAAuBvG,EAAK0M,eAAe,GAAOlF,UAAU,CAC3FH,KAAM,WACJ,EAAKlC,SAAS8F,KAAK,UAAW,KAAM,CAAEmD,SAAU,MAChD,EAAKtH,cAEPyB,MAAO,SAAC8F,GACN,EAAKlJ,SAASmJ,UACTjK,QAAWgK,EAAI9F,MAAMgG,iBAAgB,oCAAoCvO,EAAKmO,OAAM,MAAMnO,EAAK0M,cAAa,QAGjH,EAAKvH,SAAS8F,KAAK,eACnB,EAAKhG,gBAAgBkI,OAAO,EAAK5G,sBAAuBvG,EAAK0M,eAAe,GAAMlF,UAAU,WAC1F,EAAKrC,SAAS8F,KAAK,UAAW,KAAM,CAAEmD,SAAU,MAChD,EAAKtH,qBAML,YAAA6F,kBAAR,SAA0B7M,GACxB,IAAME,EAAoBF,EAAOG,KAKjC,MAJ2B,CACzB6B,UAAW9B,EAAKyI,YAChB1G,WAAY/B,EAAKuB,MAKb,YAAA0L,iBAAR,SAAyBnN,GACvB,IAAME,EAAoBF,EAAOG,KACjC,OAAUD,EAAKwO,MAAK,MAAMxO,EAAKyO,OAGzB,YAAAd,uBAAR,SAA+B7N,GAC7B,IAAM4O,EAA0B5O,EAAOG,KAAKH,EAAOkB,OAAOkL,OAC1D,OAAwB,IAApBwC,EAASvN,OAAuB,KAC7BuN,EAAS7K,IAAI,SAAA7D,GAAQ,OAAAA,EAAK2O,SAG3B,YAAAZ,oBAAR,SAA4BjO,GAC1B,IAAM4O,EAAmB5O,EAAOG,KAAKH,EAAOkB,OAAOkL,OACnD,OAAKwC,EAGG5O,EAAOkB,OAA0B4M,cAAgBc,EAAShE,UAAU,EAAG,IAAIrJ,QAAQ,IAAK,KAAOqN,EAAShE,UAAU,EAAG,IAHrG,MAMlB,YAAAsD,mBAAR,SAA2BlO,GACzB,IAAM4O,EAAW5O,EAAOG,KAAKH,EAAOkB,OAAOkL,OAC3C,MAAwB,kBAAbwC,EAAmC,KACvCA,EAASpM,Y,sCAtUPsM,GAAqB,sJ,wBAArBA,EAAqB,85B,QAAA,MD7ClC,iBACE,iBACE,iBACE,eAAK,S,iBAAuC,QAC5C,oBAA6C,gCAAS,EAAA1K,gBACpD,oBAAU,iBAAK,QACjB,QACF,QACF,QAEA,yBAEA,yB,kBAIA,kBACE,8BAC8B,qCAAa,EAAAkD,YAAA,IAAb,CAAiC,kCAC7C,EAAAkD,aAAA,K,kBAClB,QAEA,kBACE,qBAA2C,gCAAS,EAAAP,kBAClD,qBAAU,2BAAc,QACxB,iBAAM,iBAAI,QACZ,QACA,qBAA2C,gCAAS,EAAAc,kBAClD,qBAAU,yBAAY,QACtB,iBAAM,iBAAI,QACZ,QACA,sBAAmD,gCAAS,EAAAC,eAC1D,qBAAU,yBAAY,QACtB,iBAAM,iBAAI,QACZ,QACA,sBAAkD,gCAAS,EAAAE,gBACzD,qBAAU,wBAAW,QACrB,iBAAM,qBAAQ,QAChB,QACA,6B,kBAKF,QAEA,sBAAoE,gCAAS,EAAAxB,SAAS,QACpF,qBAAU,gBAAG,QACf,QACF,QACF,S,MA/CW,2EASH,+GAKuC,gDAA0B,oBAA1B,CAA0B,4BAA1B,CAA0B,+BAsBA,uD,4FCCzE,I,kIElCA,aASE,WAAoBrE,GAAA,KAAAA,W,OAEpB,YAAAtF,OAAA,SAAOC,GACLC,KAAK8O,GAAK/O,EAAOc,MACjBb,KAAK+O,QAAUhP,EAAO0M,cAAc1M,EAAOG,OAG7C,YAAAC,QAAA,SAAQJ,GACN,OAAO,GAGT,YAAAiP,KAAA,YACE,OAAgBhP,KAAK+O,SACrB/O,KAAKoF,SAAS8F,KAAK,sBAAuB,KAAM,CAAEmD,SAAU,O,sCAjBnDY,GAAgB,c,wBAAhBA,EAAgB,gKCX7B,iBAA0D,gCAAS,EAAAD,SACjE,kBAAiB,SAAQ,QACzB,sBAAuB,qBAAS,QAClC,S,MAHwC,yBACrB,uB,kdDKnB,I,gFEJA,2B,OAGE,YAAAE,QADA,SACQpD,GACNA,EAAMqD,mB,sCAHGC,I,wBAAAA,EAA6B,8E,iCAA7B,kB,EADb,I,0FCCA,aAGE,WAAoB/J,GAAA,KAAAA,sB,OAGpB,YAAA6J,QADA,SACQpD,IACwBuD,UAAUC,SAASC,MAAM,OAASzD,EAAM0D,QAAU1D,EAAM2D,UAAY3D,EAAM4D,UAAY5D,EAAM6D,SAExH3P,KAAKqF,oBAAoBuK,qBACzBC,OAAOC,eAAeC,oB,sCATfC,GAAoB,c,wBAApBA,EAAoB,qE,iCAApB,kB,EADb,I,kCCFO,SAASC,EAAgBC,GAC9B,IAAMC,EAAKC,SAASC,cAAc,YAClCF,EAAGtP,MAAQqP,EACXC,EAAGG,aAAa,WAAY,IAC5BH,EAAGI,MAAMC,SAAW,WACpBL,EAAGI,MAAME,KAAO,UAChBL,SAASM,KAAKC,YAAYR,GAC1B,IAAMS,EACJR,SAASN,eAAee,WAAa,GACjCT,SAASN,eAAegB,WAAW,GAEzCX,EAAGY,SACHX,SAASY,YAAY,QACrBZ,SAASM,KAAKO,YAAYd,GACtBS,IACFR,SAASN,eAAeC,kBACxBK,SAASN,eAAeoB,SAASN,I,2HCdrC,aAGE,WAAoBO,GAAA,KAAAA,Y,OAEpB,YAAAC,UAAA,SAAUC,GACR,OAAOrR,KAAKmR,UAAUG,wBAAwBD,I,sCALrCE,GAAY,iB,yCAAZA,EAAY,U,EADzB","file":"projects_ng-dialogs_src_app_content-items_content-items_component_ts.e240f75c0b1019c17c71.js","sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  private params: ContentItemsActionsParams;\r\n  private item: ContentItem;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ContentItemsActionsParams) {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone() {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export() {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem() {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <button mat-menu-item (click)=\"deleteItem()\">\r\n    <mat-icon>delete</mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","<div [tippy]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon *ngIf=\"value.published\" tippy=\"Published\">visibility</mat-icon>\r\n  <mat-icon *ngIf=\"!value.published\" tippy=\"Not published\">visibility_off</mat-icon>\r\n  <mat-icon class=\"meta-icon\" *ngIf=\"value.metadata\" [tippy]=\"metadataTooltip\">local_offer</mat-icon>\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  metadataTooltip: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    // spm TODO: something about data.DraftEntity and data.PublishedEntity is missing. Search in eav-ui project\r\n    this.value = params.value;\r\n    const item: ContentItem = params.data;\r\n    if (item.For) {\r\n      this.metadataTooltip = 'Metadata'\r\n        + `\\nType: ${item.For.Target}`\r\n        + (item.For.Number ? `\\nNumber: ${item.For.Number}` : '')\r\n        + (item.For.String ? `\\nString: ${item.For.String}` : '')\r\n        + (item.For.Guid ? `\\nGuid: ${item.For.Guid}` : '');\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    const value: PubMeta = this.params.valueGetter(params.node);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n    };\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Create Metadata Info</div>\r\n</div>\r\n\r\n<p class=\"dialog-description\">\r\n  This is a special operation to add an item which is metadata for another item.\r\n</p>\r\n\r\n<form [formGroup]=\"form\" class=\"dialog-form\">\r\n  <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n    <!-- Target Type -->\r\n    <mat-form-field appearance=\"standard\" color=\"accent\">\r\n      <mat-label>What kind of assignment do you want?</mat-label>\r\n      <mat-select *ngIf=\"!freeTextTargetType\" formControlName=\"targetType\">\r\n        <mat-option *ngFor=\"let option of targetTypeOptions\" [value]=\"option.type\">\r\n          {{ option.target }}\r\n        </mat-option>\r\n        <mat-option *ngIf=\"!knownTargetTypes.includes(form.controls['targetType'].value)\"\r\n          [value]=\"form.controls['targetType'].value\">\r\n          {{ form.controls['targetType'].value }}\r\n        </mat-option>\r\n      </mat-select>\r\n\r\n      <input matInput type=\"number\" min=\"0\" *ngIf=\"freeTextTargetType\" formControlName=\"targetType\">\r\n\r\n      <button mat-icon-button matSuffix tippy=\"FreeText TargetType\" (click)=\"freeTextTargetType = !freeTextTargetType\"\r\n        appClickStopPropagation>\r\n        <mat-icon>text_fields</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n\r\n    <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.required\"\r\n      [isError]=\"true\">\r\n      This field is required\r\n    </app-field-hint>\r\n    <app-field-hint\r\n      *ngIf=\"form.controls['targetType'].touched && !form.controls['targetType'].invalid && !knownTargetTypes.includes(form.controls['targetType'].value)\"\r\n      [isError]=\"false\">\r\n      Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n    </app-field-hint>\r\n\r\n    <!-- Key Type -->\r\n    <mat-form-field appearance=\"standard\" color=\"accent\">\r\n      <mat-label>What key type do you want?</mat-label>\r\n      <mat-select formControlName=\"keyType\">\r\n        <mat-option *ngFor=\"let option of keyTypeOptions\" [value]=\"option\">\r\n          {{ option }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <app-field-hint *ngIf=\"form.controls['keyType'].touched && form.controls['keyType'].errors?.required\"\r\n      [isError]=\"true\">\r\n      This field is required\r\n    </app-field-hint>\r\n\r\n    <!-- Key -->\r\n    <mat-form-field appearance=\"standard\" color=\"accent\">\r\n      <mat-label>What key do you want?</mat-label>\r\n      <input matInput type=\"text\" *ngIf=\"form.controls['keyType'].value !== 'number'\" formControlName=\"key\">\r\n      <input matInput type=\"number\" *ngIf=\"form.controls['keyType'].value === 'number'\" formControlName=\"key\">\r\n    </mat-form-field>\r\n\r\n    <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.required\" [isError]=\"true\">\r\n      This field is required\r\n    </app-field-hint>\r\n    <app-field-hint\r\n      *ngIf=\"form.controls['key'].touched && !form.controls['key'].errors?.required && form.controls['key'].errors?.mismatch\"\r\n      [isError]=\"true\">\r\n      Key type and key don't match\r\n    </app-field-hint>\r\n  </div>\r\n\r\n  <div class=\"dialog-form-actions\">\r\n    <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">Confirm</button>\r\n  </div>\r\n</form>\r\n","import { Component, HostBinding, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss']\r\n})\r\nexport class CreateMetadataDialogComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  form: FormGroup;\r\n  targetTypeOptions: TargetTypeOption[];\r\n  freeTextTargetType = false;\r\n  knownTargetTypes: number[];\r\n  keyTypeOptions: string[];\r\n\r\n  constructor(private dialogRef: MatDialogRef<CreateMetadataDialogComponent>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('targetType', new FormControl(eavConstants.metadata.entity.type, [Validators.required]));\r\n    this.form.addControl('keyType', new FormControl(eavConstants.keyTypes.number, [Validators.required]));\r\n    this.form.addControl('key', new FormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.knownTargetTypes = this.targetTypeOptions.map(option => option.type);\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n    // if not a known target, use the number\r\n    const target = this.targetTypeOptions.find(option => option.type === formValues.targetType)?.target ?? formValues.targetType.toString();\r\n\r\n    const result: MetadataInfo = {\r\n      target,\r\n      keyType: formValues.keyType,\r\n      key: formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n}\r\n","import { AbstractControl, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\n\r\nexport function metadataKeyValidator(form: FormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    const keyType: 'guid' | 'string' | 'number' = form.controls['keyType'].value;\r\n\r\n    const mismatch =\r\n      keyType === 'number' && typeof control.value !== 'number' ||\r\n      keyType !== 'number' && typeof control.value !== 'string';\r\n    return mismatch ? { mismatch: true } : null;\r\n  };\r\n}\r\n","<div appToggleDebug class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ (contentType$ | async)?.Name }} Data</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div *ngIf=\"(contentType$ | async)?.Metadata?.ListInstructions as listInstructions\"\r\n    [innerHTML]=\"listInstructions | safeHtml\">\r\n  </div>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n      (filesDropped)=\"filesDropped($event)\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\">\r\n      <button mat-button tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon>cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button tippy=\"Add metadata to entity\" (click)=\"addMetadata()\">\r\n        <mat-icon>local_offer</mat-icon>\r\n        <span>Metadata</span>\r\n      </button>\r\n      <button mat-button color=\"accent\" tippy=\"Print filter to console\" *ngIf=\"debugEnabled$ | async\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon>filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n    </div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { AllCommunityModules, CellClickedEvent, ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith, take } from 'rxjs/operators';\r\nimport { GlobalConfigService } from '../../../../edit/shared/store/ngrx-data';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogAngular } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './ag-grid-components/content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemImportDialogData } from './content-item-import/content-item-import-dialog.config';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n  items$ = new BehaviorSubject<ContentItem[]>(null);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      pubMetaFilterComponent: PubMetaFilterComponent,\r\n      booleanFilterComponent: BooleanFilterComponent,\r\n      idFieldComponent: IdFieldComponent,\r\n      contentItemsStatusComponent: ContentItemsStatusComponent,\r\n      contentItemsActionsComponent: ContentItemsActionsComponent,\r\n      contentItemsEntityComponent: ContentItemsEntityComponent,\r\n    },\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      const columnDefs = this.buildColumnDefs(columns);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters));\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogAngular('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  editItem(params: CellClickedEvent) {\r\n    const item: ContentItem = params?.data;\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        ids.push((rowNode.data as ContentItem).Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: ContentItemImportDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  addMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().pipe(take(1)).subscribe((res: MetadataInfo) => {\r\n      if (res == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: res.target,\r\n            ...(res.keyType === eavConstants.keyTypes.guid && { Guid: res.key }),\r\n            ...(res.keyType === eavConstants.keyTypes.number && { Number: parseInt(res.key, 10) }),\r\n            ...(res.keyType === eavConstants.keyTypes.string && { String: res.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    alert('Check console for filter information');\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchItems();\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline',\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agTextColumnFilter',\r\n        cellRendererParams: {\r\n          tooltipGetter: (paramsData: ContentItem) => `ID: ${paramsData.Id}\\nRepoID: ${paramsData._RepositoryId}\\nGUID: ${paramsData.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        headerName: 'Status', field: 'Status', width: 80, headerClass: 'dense', cellClass: 'no-outline',\r\n        filter: 'pubMetaFilterComponent', cellRenderer: 'contentItemsStatusComponent', valueGetter: this.valueGetterStatus,\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)', field: '_Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: this.editItem.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Stats', headerTooltip: 'Used by others / uses others',\r\n        field: '_Used', width: 70, headerClass: 'dense', cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter', valueGetter: this.valueGetterUsage,\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding', width: 120, cellRenderer: 'contentItemsActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onClone: this.clone.bind(this),\r\n          onExport: this.export.bind(this),\r\n          onDelete: this.delete.bind(this),\r\n        } as ContentItemsActionsParams,\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName, field: column.StaticName, flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          try {\r\n            colDef.allowMultiValue = column.Metadata.Entity.AllowMultiValue;\r\n          } catch (e) {\r\n            colDef.allowMultiValue = true;\r\n          }\r\n          colDef.cellRenderer = 'contentItemsEntityComponent';\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          try {\r\n            colDef.useTimePicker = column.Metadata.DateTime.UseTimePicker;\r\n          } catch (e) {\r\n            colDef.useTimePicker = false;\r\n          }\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = 'booleanFilterComponent';\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterStatus(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    const published: PubMeta = {\r\n      published: item.IsPublished,\r\n      metadata: !!item.For,\r\n    };\r\n    return published;\r\n  }\r\n\r\n  private valueGetterUsage(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    return `${item._Used} / ${item._Uses}`;\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n\r\n    // remove 'Z' and replace 'T'\r\n    return (params.colDef as ExtendedColDef).useTimePicker ? rawValue.substring(0, 19).replace('T', ' ') : rawValue.substring(0, 10);\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== typeof true) { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { NumberFilterModel, TextFilterModel } from '@ag-grid-community/all-modules';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { PubMetaFilterModel } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let parsed: Record<string, any>;\r\n  try {\r\n    parsed = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!parsed) { return; }\r\n\r\n  // filters can be published, metadata, string, number and boolean\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (parsed.IsPublished || parsed.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: parsed.IsPublished ? parsed.IsPublished : '',\r\n      metadata: parsed.IsMetadata ? parsed.IsMetadata : '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  const filterKeys = Object.keys(parsed);\r\n  for (const key of filterKeys) {\r\n    if (key === 'IsPublished' || key === 'IsMetadata') { continue; }\r\n\r\n    const value = parsed[key];\r\n    if (typeof value === typeof '') {\r\n      const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n      filterModel[key] = filter;\r\n    } else if (typeof value === typeof 0) {\r\n      const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n      filterModel[key] = filter;\r\n    } else if (typeof value === typeof true) {\r\n      const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n      filterModel[key] = filter;\r\n    }\r\n  }\r\n\r\n  return filterModel;\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: IdFieldParams) {\r\n    this.id = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}