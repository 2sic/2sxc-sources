{"version":3,"file":"projects_eav-ui_src_app_features_feature-names_ts-projects_eav-ui_src_app_features_feature-te-e1a60e.ac0d2a56ea621743.js","mappings":"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","names":["FeatureNames","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","FieldShareConfigManagement","i0","_r7","ctx_r6","openDialog","vm_r4","feature","icon","FeatureTextInfoComponent_Conditional_0_Conditional_0_Template","ctx","show","FeatureTextInfoComponent","FeatureComponentBase","asInfo","value","this","asInfo$","next","constructor","dialog","viewContainerRef","featuresService","changeDetectorRef","super","BehaviorSubject","viewModel$","combineLatest","feature$","show$","pipe","map","static","t","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_0__","In1","selectors","inputs","features","decls","vars","consts","template","rf","FeatureTextInfoComponent_Conditional_0_Template","FeatureTextInfoComponent_Conditional_2_Template","FeatureTextInfoComponent_ng_template_3_Template","FeatureTextInfoComponent_contFlowTmp","FeaturesModule","a4G","s3X","FeatureDetailService","imports","CommonModule","MatButtonModule","MatIconModule","MatCardModule","SharedComponentsModule","TranslateModule","forChild","buildTranslateConfiguration","translateLoaderFactory","http","dnnContext","getFeatureDetails","featureNameId","get","$2sxc","apiUrl","webApiRoot","params","nameId","wxM","factory","Éµfac","id_r4","_r6","ctx_r5","copyToClipboard","link_r7","_r9","ctx_r8","findOutMore","FeatureInfoDialogComponent_Conditional_0_Conditional_15_Template","FeatureInfoDialogComponent_Conditional_0_Conditional_17_Template","_r11","ctx_r10","closeDialog","Name","Description","IsEnabled","FeatureInfoDialogComponent_Conditional_0_contFlowTmp","NameId","Link","FeatureInfoDialogComponent","dialogData","dialogRef","snackBar","featureDetailService","ngOnInit","text","open","duration","link","window","close","MAT_DIALOG_DATA","i3","core","FeatureInfoDialogComponent_Conditional_0_Template","FeatureInfoDialogComponent_contFlowTmp","featureNameId$","showIf","showIf$","switchMap","featName","get$","feat","featureId","autoFocus","data","width","markForCheck","Sc5","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","TranslateLoaderWithErrorHandling","sxcVersion","prefix","suffix","getTranslation","lang","catchError","error","console","warn","of","nextId","BADGE_CONTENT_CLASS","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","Éµdir","type","hostAttrs","hostVars","hostBindings","hidden","disabled","booleanAttribute","MatBadgeModule","Éµmod","Éµinj","A11yModule","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/features.module.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-factory.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  FieldShareConfigManagement: 'FieldShareConfigManagement',\r\n};\r\n","@if (viewModel$ | async; as vm) {\r\n  @if (vm.show) {\r\n    <div class=\"feature-text-info\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: vm.feature\">\r\n      <mat-icon class=\"icon icon-{{vm.icon}}\">{{ vm.icon }}</mat-icon>\r\n      <div class=\"feature-text-info-content\">\r\n        <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n        <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n      </div>\r\n    </div>\r\n  }\r\n} @else {\r\n  <div>loading...</div>\r\n}\r\n<ng-template #loading>\r\n  <div>loading...</div>\r\n</ng-template>","import { ChangeDetectorRef, Component, Input, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureSummary } from '../models';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\nimport { BehaviorSubject, map, Observable, combineLatest, switchMap } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss']\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  @Input()\r\n  public set asInfo(value: boolean) { this.asInfo$.next(value); }\r\n  asInfo$ = new BehaviorSubject<boolean>(false);\r\n\r\n  viewModel$: Observable<FeatureTextInfoViewModel>;\r\n\r\n  constructor(\r\n    dialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    featuresService: FeaturesService,\r\n    changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    super(dialog, viewContainerRef, changeDetectorRef , featuresService);\r\n    this.viewModel$ = combineLatest([this.feature$, this.asInfo$, this.show$]).pipe(map(([feature, asInfo, show]) => \r\n      ({\r\n        feature,\r\n        icon: asInfo ? 'info' : 'warning',\r\n        show\r\n      })));\r\n  }\r\n\r\n}\r\n\r\ninterface FeatureTextInfoViewModel {\r\n  feature: FeatureSummary;\r\n  icon: string;\r\n  show: boolean;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FeatureIconTextComponent } from './feature-icon-text/feature-icon-text.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { buildTranslateConfiguration } from '../shared/translation';\r\nimport { translateLoaderFactory } from '../shared/translation/translate-loader-factory';\r\nimport { FeatureInfoDialogComponent } from './feature-info-dialog/feature-info-dialog.component';\r\nimport { FeatureIconComponent } from './feature-icon/feature-icon.component';\r\nimport { FeatureTextInfoComponent } from './feature-text-info/feature-text-info.component';\r\nimport { FeatureIconIndicatorComponent } from './feature-icon-indicator/feature-icon-indicator.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FeatureDetailService } from './services/feature-detail.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    SharedComponentsModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactory)),\r\n  ],\r\n  exports: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  providers: [\r\n    FeatureDetailService\r\n  ]\r\n})\r\nexport class FeaturesModule { }\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../models';\r\n\r\nexport const webApiRoot = \"admin/feature/\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext\r\n  ) { }\r\n\r\n  getFeatureDetails(featureNameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot + 'details'), {\r\n      params: { nameId: featureNameId }\r\n    });\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ vm.feature.Name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"vm.feature.Description | safeHtml\"></p>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">{{ \"Features.Status\" | translate }}:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ (vm.feature.IsEnabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n        </div>\r\n      </div>\r\n      @if (vm.feature.NameId; as id) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">ID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      @if (vm.feature.Link; as link) {\r\n        <button mat-raised-button color=\"accent\"\r\n          class=\"eav-card-action-button\" (click)=\"findOutMore(link)\">\r\n          <mat-icon>open_in_new</mat-icon>\r\n          {{ \"Features.FindOutMore\" | translate }}\r\n        </button>\r\n      }\r\n      <button mat-raised-button class=\"eav-card-action-button\" (click)=\"closeDialog()\">\r\n        {{ \"Features.Close\" | translate }}\r\n      </button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable, combineLatest, map } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss']\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  viewModel$: Observable<FeatureInfoViewModel>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = combineLatest([\r\n      this.featureDetailService.getFeatureDetails(this.dialogData)\r\n    ]).pipe(map(([feature]) => ({ feature })));\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  findOutMore(link: string): void { \r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\ninterface FeatureInfoViewModel {\r\n  feature: Feature;\r\n}","import { ChangeDetectorRef, Directive, Input, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { BehaviorSubject, switchMap, Observable, map, combineLatest } from 'rxjs';\r\nimport { FeatureSummary } from '../models';\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n  /** Feature NameId to check */\r\n  @Input()\r\n  public set featureNameId(value: string) { this.featureNameId$.next(value); }\r\n  protected featureNameId$ = new BehaviorSubject<string>(null);\r\n\r\n  /** By default, it will show if it's false - here we can change it to show if true */\r\n  @Input()\r\n  public set showIf(value: boolean) { this.showIf$.next(value == true); }\r\n  protected showIf$ = new BehaviorSubject<boolean>(false);\r\n\r\n  // TODO: @SDV - MAKE REACTIVE - SEE text-info-component example\r\n  // featureOn: boolean = true;\r\n  feature$: Observable<FeatureSummary>;\r\n  show$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    protected featuresService: FeaturesService\r\n  ) {\r\n    this.feature$ = this.featureNameId$.pipe(\r\n      switchMap(featName => this.featuresService.get$(featName)\r\n    ));\r\n    this.show$ = combineLatest([this.feature$, this.showIf$]).pipe(\r\n      // tap(data => console.log('2dm - show$', data)),\r\n      map(([feat,showIf]) => showIf == (feat?.IsEnabled ?? false))\r\n    );\r\n  }\r\n\r\n  openDialog() {\r\n    FeatureComponentBase.openDialog(this.dialog, this.featureNameId$.value, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n\r\n  /** Public/Static so it can be called from elsewhere */\r\n  public static openDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n    dialog.open(FeatureInfoDialogComponent, {\r\n      autoFocus: false,\r\n      data: featureId,\r\n      viewContainerRef: viewContainerRef,\r\n      width: '400px',\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateLoader } from \"@ngx-translate/core\";\r\nimport { EavWindow } from \"../models/eav-window.model\";\r\nimport { TranslateLoaderWithErrorHandling } from \"./translate-loader-with-error-handling\";\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactory(http: HttpClient): TranslateLoader {\r\n    return new TranslateLoaderWithErrorHandling(http, './i18n/', `.js?${window.sxcVersion}`);\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { inject, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ÉµÉµFactoryTarget.Directive }); }\n    static { this.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.4\", type: MatBadge, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule }); }\n    static { this.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] }); }\n    static { this.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[11]}