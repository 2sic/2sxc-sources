{"version":3,"sources":["./src/app/manage-content-list/manage-content-list.component.html","./src/app/manage-content-list/manage-content-list.component.ts"],"names":["dialogRef","contentGroupService","route","router","snackBar","hostClass","items$","header$","templateVars$","this","pipe","items","header","contentGroup","id","guid","snapshot","paramMap","get","part","index","parseInt","reordered","subscription","ngOnInit","fetchList","fetchHeader","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","closeDialog","close","saveList","open","value","subscribe","res","editHeader","form","Group","Guid","Index","Part","Add","Id","formUrl","navigate","relativeTo","editItem","EntityId","drop","event","previousIndex","currentIndex","next","trackByFn","item","getList","map","length","some","includes","duration","sort","a","b","aIndex","indexOf","bIndex","getHeader","add","events","firstChild","ManageContentListComponent"],"mappings":"ubAaM,QACE,eAAM,QAAuB,OAC7B,oBAAiD,gEAC/C,mBAAU,eAAI,OAChB,OACF,O,2BAJQ,8B,sBAKR,QAAwC,oCAAyB,Q,yBAZrE,QACE,eACE,oEACF,OAEA,eACE,+BAMA,+BACF,OACF,Q,uBARkB,mCAMA,qC,qCAcd,cACE,oBAA2E,yFACzE,mBAAU,eAAI,OAChB,OACF,Q,yBAXF,iBACE,iBACE,sBAA6E,sBAAW,OACxF,kBACE,QACF,OACF,OACA,sBAKF,Q,uBATuC,oDACjC,yCAGC,+B,qCA3BX,gBACE,+BAgBA,cAAyC,6DAAkD,OAE3F,gBAAkC,wEAChC,uBAaF,OACF,O,8BAjCgB,8BAmBP,gCAAmD,6BCb5D,iBAwBE,WACUA,EACAC,EACAC,EACAC,EACAC,GAJA,KAAAJ,YACA,KAAAC,sBACA,KAAAC,QACA,KAAAC,SACA,KAAAC,WAtBgB,KAAAC,UAAY,mBAE9B,KAAAC,OAAS,IAAI,IAA+B,MAC5C,KAAAC,QAAU,IAAI,IAA6B,MACnD,KAAAC,cAAgB,YAAc,CAACC,KAAKH,OAAQG,KAAKF,UAAUG,KACzD,aAAI,SAAC,G,IAAA,mBAAoB,OAAGC,MAAjB,KAAwBC,OAAhB,UAGb,KAAAC,aAA6B,CACnCC,GAAI,KACJC,KAAMN,KAAKP,MAAMc,SAASC,SAASC,IAAI,QACvCC,KAAMV,KAAKP,MAAMc,SAASC,SAASC,IAAI,QACvCE,MAAOC,SAASZ,KAAKP,MAAMc,SAASC,SAASC,IAAI,SAAU,KAErD,KAAAI,WAAY,EACZ,KAAAC,aAAe,IAAI,I,OAU3B,YAAAC,SAAA,WACEf,KAAKgB,YACLhB,KAAKiB,cACLjB,KAAKkB,wBAGP,YAAAC,YAAA,WACEnB,KAAKH,OAAOuB,WACZpB,KAAKF,QAAQsB,WACbpB,KAAKc,aAAaO,eAGpB,YAAAC,YAAA,WACEtB,KAAKT,UAAUgC,SAGjB,YAAAC,SAAA,sBACExB,KAAKL,SAAS8B,KAAK,aACnBzB,KAAKR,oBAAoBgC,SAASxB,KAAKI,aAAcJ,KAAKH,OAAO6B,OAAOC,WAAU,SAAAC,GAChF,EAAKjC,SAAS8B,KAAK,SACnB,EAAKH,kBAIT,YAAAO,WAAA,WACE,IAAMC,EAAiB,CACrB5B,MAAO,CACL,CACE6B,MAAO,CACLC,KAAMhC,KAAKI,aAAaE,KACxB2B,MAAO,EACPC,KAAM,cACNC,IAA+B,IAA1BnC,KAAKF,QAAQ4B,MAAMU,KAG5B,CACEL,MAAO,CACLC,KAAMhC,KAAKI,aAAaE,KACxB2B,MAAO,EACPC,KAAM,mBACNC,IAA+B,IAA1BnC,KAAKF,QAAQ4B,MAAMU,OAK1BC,EAAU,YAAiBP,GACjC9B,KAAKN,OAAO4C,SAAS,CAAC,QAAQD,GAAY,CAAEE,WAAYvC,KAAKP,SAG/D,YAAA+C,SAAA,SAASnC,GACP,IAAMyB,EAAiB,CACrB5B,MAAO,CAAC,CAAEuC,SAAUpC,KAEhBgC,EAAU,YAAiBP,GACjC9B,KAAKN,OAAO4C,SAAS,CAAC,QAAQD,GAAY,CAAEE,WAAYvC,KAAKP,SAG/D,YAAAiD,KAAA,SAAKC,GACH,IAAMzC,EAAQ,YAAIF,KAAKH,OAAO6B,OAC9B,YAAgBxB,EAAOyC,EAAMC,cAAeD,EAAME,cAClD7C,KAAKH,OAAOiD,KAAK5C,GACjBF,KAAKa,WAAY,GAGnB,YAAAkC,UAAA,SAAUpC,EAAeqC,GAEvB,OAAUA,EAAKf,MAAK,IAAIe,EAAKZ,IAGvB,YAAApB,UAAR,sBACEhB,KAAKR,oBAAoByD,QAAQjD,KAAKI,cAAcuB,WAAU,SAAAzB,GAC5D,GAAI,EAAKW,UAAW,CAClB,IAAM,EAAS,EAAKhB,OAAO6B,MAAMwB,KAAI,SAAAF,GAAQ,OAAAA,EAAKZ,MAElD,GADmB,EAAKvC,OAAO6B,MAAMyB,SAAWjD,EAAMiD,QAAUjD,EAAMkD,MAAK,SAAAJ,GAAQ,OAAC,EAAOK,SAASL,EAAKZ,OAUvG,EAAKzC,SAAS8B,KAAK,gEAAiE,KAAM,CAAE6B,SAAU,UATvF,CACf,IAAM,EAAY,EAAKzD,OAAO6B,MAAMwB,KAAI,SAAAF,GAAQ,OAAAA,EAAKf,SACrD/B,EAAMqD,MAAK,SAACC,EAAGC,GACb,IAAMC,EAAS,EAAUC,QAAQH,EAAEvB,OAC7B2B,EAAS,EAAUD,QAAQF,EAAExB,OACnC,OAAgB,IAAZyB,IAA6B,IAAZE,EAAwB,EACtCF,EAASE,MAMtB,EAAK/D,OAAOiD,KAAK5C,OAIb,YAAAe,YAAR,sBACEjB,KAAKR,oBAAoBqE,UAAU7D,KAAKI,cAAcuB,WAAU,SAAAxB,GAC9D,EAAKL,QAAQgD,KAAK3C,OAId,YAAAe,qBAAR,sBACElB,KAAKc,aAAagD,IAChB9D,KAAKN,OAAOqE,OAAO9D,KACjB,aAAO,SAAA0C,GAAS,OAAAA,aAAiB,OACjC,cAAY3C,KAAKP,MAAMc,SAASyD,YAChC,aAAI,WAAM,QAAE,EAAKvE,MAAMc,SAASyD,cAChC,cACA,aAAO,SAAC,G,IAAA,mBAAyB,OAAhB,OAAU,SAC3BrC,WAAU,WACV,EAAKX,YACL,EAAKC,mB,sCApIAgD,GAA0B,oD,uBAA1BA,EAA0B,mF,i3BDnBvC,gBACE,gBAA8B,oCAAyB,OACzD,OAEA,wBAEA,sB,gBAoCA,gBACE,mBAA0B,gCAAS,EAAA3C,iBAAe,iBAAM,OACxD,mBAAyC,gCAAS,EAAAE,cAAY,gBAAI,OACpE,Q,MAvC4D,iD,uqCCO5D","file":"manage-content-list-component.597481ccbca16551cf1c.js","sourcesContent":["<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Manage content-item lists</div>\r\n</div>\r\n\r\n<router-outlet></router-outlet>\r\n\r\n<div class=\"dialog-component-content fancy-scrollbar-light\" *ngIf=\"(templateVars$ | async) as data\">\r\n  <ng-container *ngIf=\"data.header\">\r\n    <p class=\"dialog-description\">\r\n      You can manage the list header here (if it is defined):\r\n    </p>\r\n\r\n    <p class=\"dialog-description\">\r\n      <ng-container *ngIf=\"data.header.Type\">\r\n        <span>{{ data.header.Title }}</span>\r\n        <button mat-icon-button matTooltip=\"Edit header\" (click)=\"editHeader()\">\r\n          <mat-icon>edit</mat-icon>\r\n        </button>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!data.header.Type\">(this list has no header)</ng-container>\r\n    </p>\r\n  </ng-container>\r\n\r\n  <p class=\"dialog-description sort-title\">Sort the items by dragging as you need, then save:</p>\r\n\r\n  <div class=\"dnd-list\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\r\n    <div *ngFor=\"let item of data.items; trackBy: trackByFn\" class=\"dnd-item\" cdkDrag>\r\n      <div class=\"dnd-item__title\">\r\n        <mat-icon class=\"dnd-item__title-icon\" matTooltip=\"Drag to reorder the list\">drag_handle</mat-icon>\r\n        <span class=\"dnd-item__title-text\" matTooltip=\"{{ item.Title }} ({{ item.Id }})\">\r\n          {{ item.Title }} ({{ item.Id }})\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"item.Id !== 0\">\r\n        <button mat-icon-button matTooltip=\"Edit item\" appMousedownStopPropagation (click)=\"editItem(item.Id)\">\r\n          <mat-icon>edit</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"dialog-component-actions\">\r\n  <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n  <button mat-raised-button color=\"accent\" (click)=\"saveList()\">Save</button>\r\n</div>\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { ChangeDetectionStrategy, Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentGroup } from './models/content-group.model';\r\nimport { GroupHeader } from './models/group-header.model';\r\nimport { ContentGroupService } from './services/content-group.service';\r\n\r\n@Component({\r\n  selector: 'app-manage-content-list',\r\n  templateUrl: './manage-content-list.component.html',\r\n  styleUrls: ['./manage-content-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ManageContentListComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private items$ = new BehaviorSubject<GroupHeader[]>(null);\r\n  private header$ = new BehaviorSubject<GroupHeader>(null);\r\n  templateVars$ = combineLatest([this.items$, this.header$]).pipe(\r\n    map(([items, header]) => ({ items, header })),\r\n  );\r\n\r\n  private contentGroup: ContentGroup = {\r\n    id: null,\r\n    guid: this.route.snapshot.paramMap.get('guid'),\r\n    part: this.route.snapshot.paramMap.get('part'),\r\n    index: parseInt(this.route.snapshot.paramMap.get('index'), 10),\r\n  };\r\n  private reordered = false;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ManageContentListComponent>,\r\n    private contentGroupService: ContentGroupService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchList();\r\n    this.fetchHeader();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.items$.complete();\r\n    this.header$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  saveList() {\r\n    this.snackBar.open('Saving...');\r\n    this.contentGroupService.saveList(this.contentGroup, this.items$.value).subscribe(res => {\r\n      this.snackBar.open('Saved');\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  editHeader() {\r\n    const form: EditForm = {\r\n      items: [\r\n        {\r\n          Group: {\r\n            Guid: this.contentGroup.guid,\r\n            Index: 0,\r\n            Part: 'listcontent',\r\n            Add: this.header$.value.Id === 0,\r\n          },\r\n        },\r\n        {\r\n          Group: {\r\n            Guid: this.contentGroup.guid,\r\n            Index: 0,\r\n            Part: 'listpresentation',\r\n            Add: this.header$.value.Id === 0,\r\n          },\r\n        },\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(id: number) {\r\n    const form: EditForm = {\r\n      items: [{ EntityId: id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  drop(event: CdkDragDrop<GroupHeader[]>) {\r\n    const items = [...this.items$.value];\r\n    moveItemInArray(items, event.previousIndex, event.currentIndex);\r\n    this.items$.next(items);\r\n    this.reordered = true;\r\n  }\r\n\r\n  trackByFn(index: number, item: GroupHeader) {\r\n    // we use both Index and Id because all demo items have Id=0\r\n    return `${item.Index}+${item.Id}`;\r\n  }\r\n\r\n  private fetchList() {\r\n    this.contentGroupService.getList(this.contentGroup).subscribe(items => {\r\n      if (this.reordered) {\r\n        const oldIds = this.items$.value.map(item => item.Id);\r\n        const idsChanged = this.items$.value.length !== items.length || items.some(item => !oldIds.includes(item.Id));\r\n        if (!idsChanged) {\r\n          const sortOrder = this.items$.value.map(item => item.Index);\r\n          items.sort((a, b) => {\r\n            const aIndex = sortOrder.indexOf(a.Index);\r\n            const bIndex = sortOrder.indexOf(b.Index);\r\n            if (aIndex === -1 || bIndex === -1) { return 0; }\r\n            return aIndex - bIndex;\r\n          });\r\n        } else {\r\n          this.snackBar.open('List was changed from somewhere else. Order of items is reset', null, { duration: 5000 });\r\n        }\r\n      }\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchHeader() {\r\n    this.contentGroupService.getHeader(this.contentGroup).subscribe(header => {\r\n      this.header$.next(header);\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchList();\r\n        this.fetchHeader();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}