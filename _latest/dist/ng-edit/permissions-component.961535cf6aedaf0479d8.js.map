{"version":3,"sources":["./src/app/shared/components/id-field/id-field.component.ts","./src/app/shared/components/id-field/id-field.component.html","./src/app/permissions/ag-grid-components/permissions-actions/permissions-actions.component.ts","./src/app/permissions/ag-grid-components/permissions-actions/permissions-actions.component.html","./src/app/permissions/permissions.component.ts","./src/app/permissions/permissions.component.html","./src/app/shared/helpers/copy-to-clipboard.helper.ts"],"names":["snackBar","agInit","params","this","id","value","tooltip","tooltipGetter","data","refresh","copy","open","duration","IdFieldComponent","deletePermission","onDelete","PermissionsActionsComponent","dialogRef","router","route","permissionsService","permissions$","BehaviorSubject","modules","gridOptions","frameworkComponents","idFieldComponent","permissionsActionsComponent","columnDefs","headerName","field","width","headerClass","cellClass","cellRenderer","sortable","filter","cellRendererParams","paramsData","Id","Guid","flex","minWidth","sort","onCellClicked","editPermission","bind","pinned","subscription","Subscription","targetType","parseInt","snapshot","paramMap","get","keyType","key","ngOnInit","fetchPermissions","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","closeDialog","close","getAll","subscribe","permissions","next","form","target","Object","values","metadata","find","metaValue","type","items","ContentTypeName","contentTypes","For","Target","keyTypes","guid","number","Number","string","String","EntityId","formUrl","navigate","relativeTo","permission","confirm","Title","delete","add","events","pipe","event","startWith","firstChild","map","pairwise","PermissionsComponent","copyToClipboard","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange"],"mappings":"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","file":"permissions-component.961535cf6aedaf0479d8.js","sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: IdFieldParams) {\r\n    this.id = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [matTooltip]=\"tooltip\" (click)=\"copy()\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Permission } from '../../models/permission.model';\r\nimport { PermissionsActionsParams } from './permissions-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-permissions-actions',\r\n  templateUrl: './permissions-actions.component.html',\r\n  styleUrls: ['./permissions-actions.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PermissionsActionsComponent implements ICellRendererAngularComp {\r\n  private params: PermissionsActionsParams;\r\n\r\n  agInit(params: PermissionsActionsParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  deletePermission() {\r\n    const permission: Permission = this.params.data;\r\n    this.params.onDelete(permission);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Delete\" (click)=\"deletePermission()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n</div>\r\n","import { AllCommunityModules, CellClickedEvent, GridOptions } from '@ag-grid-community/all-modules';\r\nimport { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { PermissionsActionsComponent } from './ag-grid-components/permissions-actions/permissions-actions.component';\r\nimport { PermissionsActionsParams } from './ag-grid-components/permissions-actions/permissions-actions.models';\r\nimport { Permission } from './models/permission.model';\r\nimport { PermissionsService } from './services/permissions.service';\r\n\r\n@Component({\r\n  selector: 'app-permissions',\r\n  templateUrl: './permissions.component.html',\r\n  styleUrls: ['./permissions.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PermissionsComponent implements OnInit, OnDestroy {\r\n  permissions$ = new BehaviorSubject<Permission[]>(null);\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      idFieldComponent: IdFieldComponent,\r\n      permissionsActionsComponent: PermissionsActionsComponent,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline',\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agTextColumnFilter',\r\n        cellRendererParams: {\r\n          tooltipGetter: (paramsData: Permission) => `ID: ${paramsData.Id}\\nGUID: ${paramsData.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        headerName: 'Name', field: 'Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, sort: 'asc', filter: 'agTextColumnFilter', onCellClicked: this.editPermission.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Identity', field: 'Identity', flex: 2, minWidth: 250, cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n      },\r\n      {\r\n        headerName: 'Condition', field: 'Condition', flex: 2, minWidth: 250, cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n      },\r\n      {\r\n        headerName: 'Grant', field: 'Grant', width: 70, headerClass: 'dense', cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter',\r\n      },\r\n      {\r\n        width: 40, cellClass: 'secondary-action no-padding', cellRenderer: 'permissionsActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onDelete: this.deletePermission.bind(this),\r\n        } as PermissionsActionsParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  private subscription = new Subscription();\r\n  private targetType = parseInt(this.route.snapshot.paramMap.get('type'), 10);\r\n  private keyType = this.route.snapshot.paramMap.get('keyType');\r\n  private key = this.route.snapshot.paramMap.get('key');\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<PermissionsComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private permissionsService: PermissionsService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchPermissions();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.permissions$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private fetchPermissions() {\r\n    this.permissionsService.getAll(this.targetType, this.keyType, this.key).subscribe(permissions => {\r\n      this.permissions$.next(permissions);\r\n    });\r\n  }\r\n\r\n  editPermission(params: CellClickedEvent) {\r\n    let form: EditForm;\r\n    if (params == null) {\r\n      const target = Object.values(eavConstants.metadata).find(metaValue => metaValue.type === this.targetType)?.target;\r\n      form = {\r\n        items: [{\r\n          ContentTypeName: eavConstants.contentTypes.permissions,\r\n          For: {\r\n            Target: target,\r\n            ...(this.keyType === eavConstants.keyTypes.guid && { Guid: this.key }),\r\n            ...(this.keyType === eavConstants.keyTypes.number && { Number: parseInt(this.key, 10) }),\r\n            ...(this.keyType === eavConstants.keyTypes.string && { String: this.key }),\r\n          }\r\n        }],\r\n      };\r\n    } else {\r\n      const permission: Permission = params.data;\r\n      form = {\r\n        items: [{ EntityId: permission.Id }],\r\n      };\r\n    }\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private deletePermission(permission: Permission) {\r\n    if (!confirm(`Delete '${permission.Title}' (${permission.Id})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.permissionsService.delete(permission.Id).subscribe(() => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchPermissions();\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchPermissions();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Permissions</div>\r\n      <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"permissions$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\"></div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" matTooltip=\"Create a new permission\"\r\n      (click)=\"editPermission(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}