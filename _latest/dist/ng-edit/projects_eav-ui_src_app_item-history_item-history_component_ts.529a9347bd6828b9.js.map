{"version":3,"mappings":"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","names":["version","versions","compareWith","currentDataTypes","JSON","parse","Json","Entity","Attributes","previousItem","liveVersion","VersionNumber","findLive","find","v","previousDataTypes","allAttributes","Object","entries","forEach","dataType","attributes","keys","attributeName","a","name","push","map","attribute","currentValues","_","i","_a","previousValues","p","r","_b","change","calcChangeType","values","calcHistoryValues","allLangKeys","lang","includes","langKey","currentValue","e","previousValue","o","value","oldValue","sortObjectKeys","sortKeysAlphabetically","stringify","obj","sort","reduce","acc","key","i0","ctx_r7","oxw","ctx_r26","ctx_r30","ctx_r34","ctx_r37","ctx_r40","ItemHistoryComponent","constructor","dialogRef","route","versionsService","snackBar","this","parseInt","snapshot","paramMap","get","BehaviorSubject","pageSizeOptions","combineLatest","versions$","page$","pageSize$","compareWith$","pipe","page","pageSize","filteredVersions","changeSetId","ChangeSetId","calcHistoryAttributes","historyId","HistoryId","timeStamp","TimeStamp","user","User","versionNumber","isLastVersion","some","calcHistoryItems","slice","getHistoryItems","historyItems$","historyItems","length","c","ngOnInit","fetchVersions","itemId","subscribe","next","ngOnDestroy","complete","closeDialog","close","compareChange","newCompareWith","panelExpandedChange","expand","expandedPanels","attributeExpandedToggle","expandedAttributes","pageChange","event","newPage","pageIndex","newPageSize","restore","changeId","open","res","duration","refreshEdit","selectors"],"sources":["./projects/eav-ui/src/app/item-history/item-history.helpers.ts","./projects/eav-ui/src/app/item-history/item-history.component.html","./projects/eav-ui/src/app/item-history/item-history.component.ts"],"sourcesContent":["import { CompareWith } from './models/compare-with.model';\r\nimport { HistoryAttribute, HistoryAttributeValue, HistoryItem } from './models/history-item.model';\r\nimport { Version, VersionEntityAttributeValues, VersionJsonParsed } from './models/version.model';\r\n\r\nexport function getHistoryItems(versions: Version[], page: number, pageSize: number, compareWith: CompareWith) {\r\n  if (versions == null || page == null || pageSize == null || compareWith == null) { return null; }\r\n  const filtered = versions.slice((page - 1) * pageSize, page * pageSize);\r\n\r\n  const historyItems = calcHistoryItems(filtered, versions, compareWith);\r\n  return historyItems;\r\n}\r\n\r\nfunction calcHistoryItems(filteredVersions: Version[], versions: Version[], compareWith: CompareWith) {\r\n  return filteredVersions.map(version => {\r\n    const historyItem: HistoryItem = {\r\n      changeSetId: version.ChangeSetId,\r\n      attributes: calcHistoryAttributes(version, versions, compareWith),\r\n      historyId: version.HistoryId,\r\n      timeStamp: version.TimeStamp,\r\n      user: version.User,\r\n      versionNumber: version.VersionNumber,\r\n      isLastVersion: !versions.some(v => v.VersionNumber === version.VersionNumber + 1),\r\n    };\r\n    return historyItem;\r\n  });\r\n}\r\n\r\nfunction calcHistoryAttributes(version: Version, versions: Version[], compareWith: CompareWith) {\r\n  const currentDataTypes = (JSON.parse(version.Json) as VersionJsonParsed).Entity.Attributes;\r\n  const previousItem = compareWith === 'live' ? findLive(versions) : versions.find(v => v.VersionNumber === version.VersionNumber - 1);\r\n  const previousDataTypes = previousItem ? (JSON.parse(previousItem.Json) as VersionJsonParsed).Entity.Attributes : null;\r\n\r\n  const allAttributes: { name: string, dataType: string }[] = [];\r\n  if (currentDataTypes != null) {\r\n    Object.entries(currentDataTypes).forEach(([dataType, attributes]) => {\r\n      Object.keys(attributes).forEach(attributeName => {\r\n        if (allAttributes.find(a => a.name === attributeName && a.dataType === dataType) != null) { return; }\r\n        allAttributes.push({ name: attributeName, dataType });\r\n      });\r\n    });\r\n  }\r\n  if (previousDataTypes != null) {\r\n    Object.entries(previousDataTypes).forEach(([dataType, attributes]) => {\r\n      Object.keys(attributes).forEach(attributeName => {\r\n        if (allAttributes.find(a => a.name === attributeName && a.dataType === dataType) != null) { return; }\r\n        allAttributes.push({ name: attributeName, dataType });\r\n      });\r\n    });\r\n  }\r\n\r\n  const historyAttributes = allAttributes.map(attribute => {\r\n    const currentValues = currentDataTypes?.[attribute.dataType]?.[attribute.name];\r\n    const previousValues = previousDataTypes?.[attribute.dataType]?.[attribute.name];\r\n\r\n    const historyAttribute: HistoryAttribute = {\r\n      name: attribute.name,\r\n      dataType: attribute.dataType,\r\n      change: calcChangeType(currentValues, previousValues, true),\r\n      values: calcHistoryValues(currentValues, previousValues),\r\n    };\r\n    return historyAttribute;\r\n  });\r\n\r\n  return historyAttributes;\r\n}\r\n\r\nfunction findLive(versions: Version[]) {\r\n  let liveVersion = versions[0];\r\n  for (const version of versions) {\r\n    if (version.VersionNumber <= liveVersion.VersionNumber) { continue; }\r\n    liveVersion = version;\r\n  }\r\n  return liveVersion;\r\n}\r\n\r\nfunction calcHistoryValues(values: VersionEntityAttributeValues, previousValues: VersionEntityAttributeValues) {\r\n  const allLangKeys: string[] = [];\r\n  if (values != null) {\r\n    Object.keys(values).forEach(lang => {\r\n      if (allLangKeys.includes(lang)) { return; }\r\n      allLangKeys.push(lang);\r\n    });\r\n  }\r\n  if (previousValues != null) {\r\n    Object.keys(previousValues).forEach(lang => {\r\n      if (allLangKeys.includes(lang)) { return; }\r\n      allLangKeys.push(lang);\r\n    });\r\n  }\r\n\r\n  const historyValues = allLangKeys.map(langKey => {\r\n    const currentValue = values?.[langKey];\r\n    const previousValue = previousValues?.[langKey];\r\n\r\n    const historyValue: HistoryAttributeValue = {\r\n      langKey,\r\n      value: currentValue,\r\n      oldValue: previousValue,\r\n      change: calcChangeType(currentValue, previousValue),\r\n    };\r\n    return historyValue;\r\n  });\r\n\r\n  return historyValues;\r\n}\r\n\r\nfunction calcChangeType(currentValue: any, previousValue: any, sortObjectKeys = false) {\r\n  let change: 'new' | 'deleted' | 'changed' | 'none';\r\n\r\n  if (sortObjectKeys) {\r\n    if (typeof currentValue === 'object') {\r\n      currentValue = sortKeysAlphabetically(currentValue);\r\n    }\r\n    if (typeof previousValue === 'object') {\r\n      previousValue = sortKeysAlphabetically(previousValue);\r\n    }\r\n  }\r\n\r\n  if (currentValue != null && previousValue != null) {\r\n    if (JSON.stringify(currentValue) !== JSON.stringify(previousValue)) {\r\n      change = 'changed';\r\n    } else {\r\n      change = 'none';\r\n    }\r\n  } else if (currentValue != null) {\r\n    change = 'new';\r\n  } else {\r\n    change = 'deleted';\r\n  }\r\n\r\n  return change;\r\n}\r\n\r\nfunction sortKeysAlphabetically(obj: Record<string, any>): Record<string, any> {\r\n  if (typeof obj !== 'object') { return obj; }\r\n\r\n  return Object.keys(obj).sort().reduce((acc, key) => ({ ...acc, [key]: obj[key] }), {});\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Item History</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">Check version history for this item and restore the version you need.</p>\r\n\r\n  <div *ngIf=\"data.historyItems?.length > 0\" class=\"compare-box\">\r\n    <mat-form-field appearance=\"standard\" color=\"accent\" class=\"compare-box__dropdown\">\r\n      <mat-select [value]=\"data.compareWith\" name=\"Scope\" (selectionChange)=\"compareChange($event.value)\">\r\n        <mat-option value=\"previous\">Compare with: Previous</mat-option>\r\n        <mat-option value=\"live\">Compare with: Live</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-content fancy-scrollbar-light\">\r\n    <div *ngIf=\"data.historyItems === null\">Loading...</div>\r\n    <div *ngIf=\"data.historyItems?.length === 0\">No previous versions of this item found</div>\r\n\r\n    <mat-accordion multi *ngIf=\"data.historyItems?.length > 0\" class=\"history-tables\">\r\n      <mat-expansion-panel *ngFor=\"let historyItem of data.historyItems\"\r\n        [expanded]=\"expandedPanels[historyItem.versionNumber]\"\r\n        (expandedChange)=\"panelExpandedChange($event, historyItem.versionNumber)\">\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>Version {{ historyItem.versionNumber }}</mat-panel-title>\r\n          <mat-panel-description>{{ historyItem.timeStamp | date:'yyyy-MM-dd hh:mm' }}</mat-panel-description>\r\n        </mat-expansion-panel-header>\r\n\r\n        <ng-container *ngIf=\"expandedPanels[historyItem.versionNumber]\">\r\n          <div class=\"table-row\" *ngFor=\"let attribute of historyItem.attributes\">\r\n            <div class=\"table-row__main row-main\"\r\n              (click)=\"attributeExpandedToggle(historyItem.versionNumber, attribute.name)\">\r\n              <div class=\"row-main__label history-{{ attribute.change }}\">\r\n                {{ attribute.name }}\r\n              </div>\r\n              <div class=\"row-main__value history-{{ attribute.change }}\">\r\n                <ng-container *ngIf=\"!expandedAttributes[historyItem.versionNumber + attribute.name]\">\r\n                  {{ attribute.values[0]?.value }}\r\n                </ng-container>\r\n              </div>\r\n              <div class=\"row-main__type\">\r\n                <i>[{{ attribute.dataType }}]</i>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"table-row__details\" *ngIf=\"expandedAttributes[historyItem.versionNumber + attribute.name]\">\r\n              <div class=\"detail-row\" *ngFor=\"let value of attribute.values\">\r\n                <div class=\"detail-row__label history-{{ value.change }}\">{{ value.langKey }}:</div>\r\n                <div class=\"detail-row__value\">\r\n                  <div class=\"history-{{ value.change }}\" *ngIf=\"value.change !== 'changed'\">\r\n                    {{ value.change === 'deleted' ? value.oldValue : value.value }}\r\n                  </div>\r\n                  <ng-container *ngIf=\"value.change === 'changed'\">\r\n                    <div class=\"history-new\">{{ value.value }}</div>\r\n                    <div class=\"history-deleted history-deleted__value\">{{ value.oldValue }}</div>\r\n                  </ng-container>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row-actions\">\r\n            <button mat-raised-button color=\"accent\" *ngIf=\"!historyItem.isLastVersion\"\r\n              (click)=\"restore(historyItem.changeSetId)\">\r\n              Restore\r\n            </button>\r\n          </div>\r\n        </ng-container>\r\n      </mat-expansion-panel>\r\n    </mat-accordion>\r\n  </div>\r\n\r\n  <mat-paginator color=\"accent\" showFirstLastButtons=\"true\" [length]=\"data.length\" [pageSize]=\"data.pageSize\"\r\n    [pageSizeOptions]=\"pageSizeOptions\" (page)=\"pageChange($event)\" *ngIf=\"data.historyItems?.length > 0\">\r\n  </mat-paginator>\r\n</ng-container>","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { PageEvent } from '@angular/material/paginator';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, map } from 'rxjs';\r\nimport { getHistoryItems } from './item-history.helpers';\r\nimport { CompareWith } from './models/compare-with.model';\r\nimport { ItemHistoryResult } from './models/item-history-result.model';\r\nimport { Version } from './models/version.model';\r\nimport { VersionsService } from './services/versions.service';\r\n\r\n@Component({\r\n  selector: 'app-item-history',\r\n  templateUrl: './item-history.component.html',\r\n  styleUrls: ['./item-history.component.scss'],\r\n})\r\nexport class ItemHistoryComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  pageSizeOptions = [10, 20, 50];\r\n  expandedPanels: Record<string, boolean> = {};\r\n  expandedAttributes: Record<string, boolean> = {};\r\n\r\n  private itemId = parseInt(this.route.snapshot.paramMap.get('itemId'), 10);\r\n  private versions$ = new BehaviorSubject<Version[]>(null);\r\n  private page$ = new BehaviorSubject(1);\r\n  private pageSize$ = new BehaviorSubject(this.pageSizeOptions[0]);\r\n  private compareWith$ = new BehaviorSubject<CompareWith>('live');\r\n  private historyItems$ = combineLatest([this.versions$, this.page$, this.pageSize$, this.compareWith$]).pipe(\r\n    map(([versions, page, pageSize, compareWith]) => getHistoryItems(versions, page, pageSize, compareWith)),\r\n  );\r\n  templateVars$ = combineLatest([this.versions$, this.historyItems$, this.pageSize$, this.compareWith$]).pipe(\r\n    map(([versions, historyItems, pageSize, compareWith]) => ({\r\n      length: versions?.length,\r\n      historyItems,\r\n      pageSize,\r\n      compareWith,\r\n    })),\r\n  );\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ItemHistoryComponent>,\r\n    private route: ActivatedRoute,\r\n    private versionsService: VersionsService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.versionsService.fetchVersions(this.itemId).subscribe(versions => {\r\n      this.versions$.next(versions);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.versions$.complete();\r\n    this.page$.complete();\r\n    this.pageSize$.complete();\r\n    this.compareWith$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  compareChange(newCompareWith: CompareWith) {\r\n    this.compareWith$.next(newCompareWith);\r\n  }\r\n\r\n  panelExpandedChange(expand: boolean, versionNumber: number) {\r\n    this.expandedPanels[versionNumber] = expand;\r\n  }\r\n\r\n  attributeExpandedToggle(versionNumber: number, name: string) {\r\n    this.expandedAttributes[versionNumber + name] = !this.expandedAttributes[versionNumber + name];\r\n  }\r\n\r\n  pageChange(event: PageEvent) {\r\n    const newPage = event.pageIndex + 1;\r\n    if (newPage !== this.page$.value) {\r\n      this.expandedPanels = {};\r\n      this.expandedAttributes = {};\r\n      this.page$.next(newPage);\r\n    }\r\n    const newPageSize = event.pageSize;\r\n    if (newPageSize !== this.pageSize$.value) {\r\n      this.pageSize$.next(newPageSize);\r\n    }\r\n  }\r\n\r\n  restore(changeId: number) {\r\n    this.snackBar.open('Restoring previous version...');\r\n    this.versionsService.restore(this.itemId, changeId).subscribe(res => {\r\n      this.snackBar.open('Previous version restored. Will reload edit dialog', null, { duration: 3000 });\r\n      const result: ItemHistoryResult = {\r\n        refreshEdit: true,\r\n      };\r\n      this.dialogRef.close(result);\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_item-history_item-history_component_ts.529a9347bd6828b9.js"}