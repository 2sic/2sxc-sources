{"version":3,"sources":["./src/app/shared/components/dialog-entry/dialog-entry.component.ts","C:/Projects/2sxc/LTS-11.22/eav-item-dialog-angular/node_modules/@angular/material/__ivy_ngcc__/fesm2015/divider.js"],"names":["dialog","viewContainerRef","router","route","context","changeDetectorRef","navigation","this","getCurrentNavigation","dialogData","extras","state","ngOnInit","dialogConfig","snapshot","data","Error","name","id","getComponent","then","component","initContext","init","dialogRef","open","backdropClass","panelClass","panelSize","showScrollbar","autoFocus","closeOnNavigation","position","top","afterClosed","pipe","subscribe","navRes","navigateUrl","pathFromRoot","length","window","parent","$2sxc","totalPopup","close","error","navigate","url","relativeTo","markForCheck","ngOnDestroy","DialogEntryComponent","MatDivider","_vertical","_inset","value","ɵfac","t","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","vertical","inset","inputs","decls","vars","template","styles","encapsulation","changeDetection","MatDividerModule","ɵmod","ɵinj","factory","imports"],"mappings":"sNAaA,aAUE,WACUA,EACAC,EACAC,EACAC,EACAC,EACAC,G,MALA,KAAAL,SACA,KAAAC,mBACA,KAAAC,SACA,KAAAC,QACA,KAAAC,UACA,KAAAC,oBAER,IAAMC,EAAaC,KAAKL,OAAOM,uBAC/BD,KAAKE,YAA+B,QAAlB,EAAAH,aAAU,EAAVA,EAAYI,cAAM,eAAEC,QAAS,G,OAGjD,YAAAC,SAAA,sBACQC,EAA6BN,KAAKJ,MAAMW,SAASC,KAAKf,OAC5D,GAAoB,MAAhBa,EACF,MAAM,IAAIG,MAAM,uFAElB,YAAkB,eAAgBH,EAAaI,KAAM,cAAeV,KAAKH,QAAQc,GAAI,WAAYX,KAAKH,SAEtGS,EAAaM,eAAeC,MAAK,SAAAC,GAC3BR,EAAaS,aACf,EAAKlB,QAAQmB,KAAK,EAAKpB,OAGzB,EAAKqB,UAAY,EAAKxB,OAAOyB,KAAKJ,EAAW,CAC3CN,KAAM,EAAKN,WACXiB,cAAe,kBACfC,WAAY,YAAF,CACR,eACA,gBAAgBd,EAAae,UAC7Bf,EAAagB,cAAgB,iBAAmB,gBAC5ChB,EAAac,WAAad,EAAac,WAAa,IAE1D1B,iBAAkB,EAAKA,iBACvB6B,WAAW,EACXC,mBAAmB,EAGnBC,SAAU,CAAEC,IAAK,OAGnB,EAAKT,UAAUU,cAAcC,KAAK,YAAK,IAAIC,WAAU,SAACrB,GACpD,YAAkB,qBAAsBF,EAAaI,KAAM,QAASF,GAEpE,IAAMsB,EAAStB,EACf,GAA2B,OAAvBsB,aAAM,EAANA,EAAQC,aAKZ,GAAI,EAAKnC,MAAMoC,aAAaC,QAAU,EACpC,IACEC,OAAOC,OAAOC,MAAMC,WAAWC,QAC/B,MAAOC,SAKT,EAAK5C,OAAO6C,SAAS,CAAC,MADpB,EAAK5C,MAAMW,SAASkC,IAAIR,OAAS,EACN,CAAES,WAAY,EAAK9C,MAAMuC,OAAQ/B,MAAOI,GAExC,CAAEkC,WAAY,EAAK9C,MAAMuC,OAAOA,OAAQ/B,MAAOI,SAd5E,EAAKb,OAAO6C,SAAS,CAACV,EAAOC,iBAkBjC,EAAKjC,kBAAkB6C,mBAI3B,YAAAC,YAAA,WACE5C,KAAKiB,UAAUqB,S,sCAzENO,GAAoB,8D,uBAApBA,EAAoB,yG,EANjC,I,uLCDMC,E,WACF,iCACI9C,KAAK+C,WAAY,EACjB/C,KAAKgD,QAAS,E,qDAGD,OAAOhD,KAAK+C,W,aAChBE,GAASjD,KAAK+C,UAAY,YAAsBE,K,4BAE/C,OAAOjD,KAAKgD,Q,aAChBC,GAASjD,KAAKgD,OAAS,YAAsBC,O,YAE3DH,EAAWI,UAAO,SAA4BC,GAAK,OAAO,IAAKA,GAAKL,IACpEA,EAAWM,UAAO,KAAyB,CAAEC,KAAMP,EAAYQ,UAAW,CAAC,CAAC,gBAAiBC,UAAW,CAAC,OAAQ,YAAa,EAAG,eAAgBC,SAAU,EAAGC,aAAc,SAAiCC,EAAIC,GAAgB,EAALD,IACpN,KAAmB,mBAAoBC,EAAIC,SAAW,WAAa,cACnE,KAAmB,uBAAwBD,EAAIC,SAA/C,CAAyD,0BAA2BD,EAAIC,SAAxF,CAAkG,oBAAqBD,EAAIE,SAC1HC,OAAQ,CAAEF,SAAU,WAAYC,MAAO,SAAWE,MAAO,EAAGC,KAAM,EAAGC,SAAU,SAA6BP,EAAIC,KAAUO,OAAQ,CAAC,iTAAkTC,cAAe,EAAGC,gBAAiB,I,sBAmC3dC,E,yCAENA,EAAiBC,UAAO,KAAwB,CAAEjB,KAAMgB,IACxDA,EAAiBE,UAAO,KAAwB,CAAEC,QAAS,SAAkCrB,GAAK,OAAO,IAAKA,GAAKkB,IAAwBI,QAAS,CAAC,CAAC,KAAkB,O","file":"item-history-item-history-module.c4c1b66e143366e6c20b.js","sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { NavigateFormResult } from '../../../../../../edit/shared/models';\r\nimport { consoleLogAngular } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { Dictionary } from '../../models/dictionary.model';\r\nimport { EavWindow } from '../../models/eav-window.model';\r\nimport { Context } from '../../services/context';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: Dictionary;\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogAngular('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      if (dialogConfig.initContext) {\r\n        this.context.init(this.route);\r\n      }\r\n\r\n      this.dialogRef = this.dialog.open(component, {\r\n        data: this.dialogData,\r\n        backdropClass: 'dialog-backdrop',\r\n        panelClass: [\r\n          'dialog-panel',\r\n          `dialog-panel-${dialogConfig.panelSize}`,\r\n          dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n          ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n        ],\r\n        viewContainerRef: this.viewContainerRef,\r\n        autoFocus: false,\r\n        closeOnNavigation: false,\r\n        // spm NOTE: used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n        // Real top margin is overwritten in css e.g. dialog-panel-large\r\n        position: { top: '0' }\r\n      });\r\n\r\n      this.dialogRef.afterClosed().pipe(take(1)).subscribe((data: any) => {\r\n        consoleLogAngular('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n        const navRes = data as NavigateFormResult;\r\n        if (navRes?.navigateUrl != null) {\r\n          this.router.navigate([navRes.navigateUrl]);\r\n          return;\r\n        }\r\n\r\n        if (this.route.pathFromRoot.length <= 3) {\r\n          try {\r\n            window.parent.$2sxc.totalPopup.close();\r\n          } catch (error) { }\r\n          return;\r\n        }\r\n\r\n        if (this.route.snapshot.url.length > 0) {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n        } else {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n        }\r\n      });\r\n\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nclass MatDivider {\n    constructor() {\n        this._vertical = false;\n        this._inset = false;\n    }\n    /** Whether the divider is vertically aligned. */\n    get vertical() { return this._vertical; }\n    set vertical(value) { this._vertical = coerceBooleanProperty(value); }\n    /** Whether the divider is an inset divider. */\n    get inset() { return this._inset; }\n    set inset(value) { this._inset = coerceBooleanProperty(value); }\n}\nMatDivider.ɵfac = function MatDivider_Factory(t) { return new (t || MatDivider)(); };\nMatDivider.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDivider, selectors: [[\"mat-divider\"]], hostAttrs: [\"role\", \"separator\", 1, \"mat-divider\"], hostVars: 7, hostBindings: function MatDivider_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-divider-vertical\", ctx.vertical)(\"mat-divider-horizontal\", !ctx.vertical)(\"mat-divider-inset\", ctx.inset);\n    } }, inputs: { vertical: \"vertical\", inset: \"inset\" }, decls: 0, vars: 0, template: function MatDivider_Template(rf, ctx) { }, styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatDivider.propDecorators = {\n    vertical: [{ type: Input }],\n    inset: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDivider, [{\n        type: Component,\n        args: [{\n                selector: 'mat-divider',\n                host: {\n                    'role': 'separator',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-divider-vertical]': 'vertical',\n                    '[class.mat-divider-horizontal]': '!vertical',\n                    '[class.mat-divider-inset]': 'inset',\n                    'class': 'mat-divider'\n                },\n                template: '',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"]\n            }]\n    }], function () { return []; }, { vertical: [{\n            type: Input\n        }], inset: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDividerModule {\n}\nMatDividerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDividerModule });\nMatDividerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatDividerModule_Factory(t) { return new (t || MatDividerModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDividerModule, { declarations: function () { return [MatDivider]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatDivider, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDividerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatDivider, MatCommonModule],\n                declarations: [MatDivider]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatDivider, MatDividerModule };\n\n//# sourceMappingURL=divider.js.map"],"sourceRoot":"webpack:///"}