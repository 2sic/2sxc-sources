{"version":3,"sources":["./src/app/replace-content/replace-content.component.html","./src/app/replace-content/replace-content.component.ts"],"names":["dialogRef","contentGroupService","router","route","snackBar","hostClass","item$","id","guid","this","snapshot","paramMap","get","part","index","parseInt","add","queryParamMap","options$","templateVars$","pipe","item","options","subscription","ngOnInit","getConfig","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","closeDialog","close","selectedChanged","next","value","save","open","saveItem","subscribe","duration","copySelected","form","items","ContentTypeName","contentTypeName","DuplicateEntity","formUrl","navigate","relativeTo","getItems","replaceConfig","Object","entries","Items","map","itemId","label","SelectedId","events","event","firstChild","editResult","getCurrentNavigation","extras","state","keys","ReplaceContentComponent"],"mappings":"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","file":"replace-content-component.d2d1e9f69deabd7fab43.js","sourcesContent":["<ng-container *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">{{ data.item.add ? 'Add Existing Item' : 'Replace Content Item' }}</div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <p class=\"dialog-description\">\r\n    {{\r\n      data.item.add\r\n      ? 'Select a content-item to add to this list.'\r\n      : 'By replacing a content-item you can make other content appear in the slot of the original content.'\r\n    }}\r\n  </p>\r\n\r\n  <div class=\"options-box\">\r\n    <mat-form-field class=\"options-box__field\" appearance=\"standard\" color=\"accent\">\r\n      <mat-label>Choose item</mat-label>\r\n      <mat-select [ngModel]=\"data.item.id\" name=\"Language\" (ngModelChange)=\"selectedChanged($event)\">\r\n        <mat-option *ngFor=\"let option of data.options\" [value]=\"option.value\">{{ option.label }}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <button mat-icon-button class=\"options-box__copy\" matTooltip=\"Copy\" (click)=\"copySelected()\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!data.item.id\" (click)=\"save()\">Save</button>\r\n  </div>\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { ContentGroupAdd } from '../manage-content-list/models/content-group.model';\r\nimport { ContentGroupService } from '../manage-content-list/services/content-group.service';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ReplaceOption } from './models/replace-option.model';\r\n\r\n@Component({\r\n  selector: 'app-replace-content',\r\n  templateUrl: './replace-content.component.html',\r\n  styleUrls: ['./replace-content.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ReplaceContentComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private item$ = new BehaviorSubject<ContentGroupAdd>({\r\n    id: null,\r\n    guid: this.route.snapshot.paramMap.get('guid'),\r\n    part: this.route.snapshot.paramMap.get('part'),\r\n    index: parseInt(this.route.snapshot.paramMap.get('index'), 10),\r\n    add: !!this.route.snapshot.queryParamMap.get('add'),\r\n  });\r\n  private options$ = new BehaviorSubject<ReplaceOption[]>(null);\r\n  templateVars$ = combineLatest([this.item$, this.options$]).pipe(\r\n    map(([item, options]) => ({ item, options })),\r\n  );\r\n\r\n  private contentTypeName: string;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ReplaceContentComponent>,\r\n    private contentGroupService: ContentGroupService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.getConfig();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.item$.complete();\r\n    this.options$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  selectedChanged(id: number) {\r\n    this.item$.next({ ...this.item$.value, id });\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    this.contentGroupService.saveItem(this.item$.value).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  copySelected() {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeName, DuplicateEntity: this.item$.value.id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private getConfig() {\r\n    this.contentGroupService.getItems(this.item$.value).subscribe(replaceConfig => {\r\n      const options = Object.entries(replaceConfig.Items).map(([itemId, itemName]) => {\r\n        const option: ReplaceOption = {\r\n          label: `${itemName} (${itemId})`,\r\n          value: parseInt(itemId, 10),\r\n        };\r\n        return option;\r\n      });\r\n      this.options$.next(options);\r\n      // don't set the ID if dialog should be in add-mode\r\n      if (!this.item$.value.id && !this.item$.value.add) {\r\n        this.item$.next({ ...this.item$.value, id: replaceConfig.SelectedId });\r\n      }\r\n      if (!this.contentTypeName) {\r\n        this.contentTypeName = replaceConfig.ContentTypeName;\r\n      }\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.getConfig();\r\n        const navigation = this.router.getCurrentNavigation();\r\n        const editResult = navigation.extras?.state;\r\n        if (editResult) {\r\n          const id = editResult[Object.keys(editResult)[0]];\r\n          this.item$.next({ ...this.item$.value, id });\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}