{"version":3,"file":"projects_eav-ui_src_app_app-administration_sub-dialogs_import-query_import-query_component_ts.js","mappings":"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","sources":["./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/import-query/import-query.component.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/import-query/import-query.component.html","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  getAll(contentType: string) {\r\n    return this.getHttpApiUrl<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.getHttpApiUrl<null>(webApiQueryClone, {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { transient } from '../../../../../../core';\r\nimport { FileUploadDialogComponent, FileUploadDialogData, UploadTypes } from '../../../shared/components/file-upload-dialog';\r\nimport { PipelinesService } from '../../services/pipelines.service';\r\n\r\n@Component({\r\n  selector: 'app-import-query',\r\n  templateUrl: './import-query.component.html',\r\n  standalone: true,\r\n  imports: [FileUploadDialogComponent,],\r\n})\r\nexport class ImportQueryComponent {\r\n  uploadType = UploadTypes.Query;\r\n\r\n  private pipelinesService = transient(PipelinesService);\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) dialogData: FileUploadDialogData) {\r\n    dialogData.title ??= `Import Query`;\r\n    dialogData.description ??= `Select a Query file (json) from your computer to import.`;\r\n    dialogData.allowedFileTypes ??= 'json';\r\n    dialogData.upload$ ??= (files) => this.pipelinesService.importQuery(files[0]);\r\n  }\r\n\r\n}\r\n","<app-file-upload-dialog [uploadType]=\"uploadType\"></app-file-upload-dialog>","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"names":["from","map","switchMap","toBase64","webApiEntityList","HttpServiceBase","webApiQueryImport","webApiQueryClone","webApiQueryDelete","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","contentType","getHttpApiUrl","params","appId","importQuery","file","pipe","fileBase64","http","post","apiUrl","AppId","ContentBase64","success","result","Success","Messages","clonePipeline","id","Id","toString","delete","__ngFactoryType__","factory","ɵfac","MAT_DIALOG_DATA","transient","FileUploadDialogComponent","UploadTypes","ImportQueryComponent","constructor","dialogData","uploadType","Query","pipelinesService","title","description","allowedFileTypes","upload$","files","i0","ɵɵdirectiveInject","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ImportQueryComponent_Template","rf","ctx","ɵɵelement","ɵɵproperty","encapsulation","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","error","readAsText"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}