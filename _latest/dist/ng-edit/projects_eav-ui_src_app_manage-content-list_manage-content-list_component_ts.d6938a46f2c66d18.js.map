{"version":3,"mappings":"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","names":["i0","ctx_r8","ctx_r14","oxw","ctx_r17","ManageContentListComponent","constructor","dialogRef","contentGroupService","route","router","snackBar","translate","appDialogConfigService","this","BehaviorSubject","combineLatest","items$","header$","pipe","map","items","header","id","guid","snapshot","paramMap","get","part","index","parseInt","Subscription","ngOnInit","fetchList","fetchHeader","refreshOnChildClosed","fetchDialogSettings","ngOnDestroy","complete","subscription","unsubscribe","getShared$","tap","dialogSettings","setDefaultLang","Context","Language","Primary","split","use","Current","subscribe","closeDialog","close","saveList","open","contentGroup","value","res","editHeader","formUrl","convertFormToUrl","Add","Id","Index","Parent","Field","navigate","relativeTo","editItem","EntityId","drop","event","moveItemInArray","previousIndex","currentIndex","next","reordered","trackByFn","item","getList","oldIds","length","some","includes","duration","sortOrder","sort","a","b","aIndex","indexOf","bIndex","getHeader","add","events","filter","NavigationEnd","startWith","firstChild","pairwise","hadChild","hasChild","selectors","ctx"],"sources":["./projects/eav-ui/src/app/manage-content-list/manage-content-list.component.html","./projects/eav-ui/src/app/manage-content-list/manage-content-list.component.ts"],"sourcesContent":["<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">{{'ManageContentList.Title' | translate}}</div>\r\n</div>\r\n\r\n<router-outlet></router-outlet>\r\n\r\n<div class=\"dialog-component-content fancy-scrollbar-light\" cdkScrollable *ngIf=\"(templateVars$ | async) as data\">\r\n  <ng-container *ngIf=\"data.header\">\r\n    <p class=\"dialog-description\">\r\n      {{'ManageContentList.Description' | translate}}\r\n    </p>\r\n\r\n    <p class=\"dialog-description\">\r\n      <ng-container *ngIf=\"data.header.Type\">\r\n        <span>{{ data.header.Title }}</span>\r\n        <button mat-icon-button tippy=\"Edit header\" (click)=\"editHeader()\">\r\n          <mat-icon>edit</mat-icon>\r\n        </button>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!data.header.Type\">{{'ManageContentList.NoHeader' | translate}}</ng-container>\r\n    </p>\r\n  </ng-container>\r\n\r\n  <p class=\"dialog-description sort-title\" *ngIf=\"data.items && data.items?.length < 25 \">\r\n    {{'ManageContentList.SortItems' | translate}}\r\n  </p>\r\n  <p class=\"dialog-description sort-title\" *ngIf=\"data.items?.length >= 25 \">\r\n    {{'ManageContentList.SortLotsOfItems' | translate}}\r\n  </p>\r\n\r\n  <div class=\"dnd-list\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\r\n    <div *ngFor=\"let item of data.items; trackBy: trackByFn\" class=\"dnd-item\" cdkDrag>\r\n      <div class=\"dnd-item__title\">\r\n        <mat-icon class=\"dnd-item__title-icon\" tippy=\"Drag to reorder the list\">drag_handle</mat-icon>\r\n        <span class=\"dnd-item__title-text\" tippy=\"{{ item.Title }} ({{ item.Id }})\">\r\n          {{ item.Title }} ({{ item.Id }})\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"item.Id !== 0\">\r\n        <button mat-icon-button tippy=\"Edit item\" appMousedownStopPropagation (click)=\"editItem(item.Id)\">\r\n          <mat-icon>edit</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"dialog-component-actions\">\r\n  <button mat-raised-button (click)=\"closeDialog()\">{{'General.Buttons.Cancel' | translate}}</button>\r\n  <button mat-raised-button color=\"accent\" (click)=\"saveList()\">{{'General.Buttons.Save' | translate}}</button>\r\n</div>","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, filter, map, pairwise, startWith, Subscription, tap } from 'rxjs';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentGroup } from './models/content-group.model';\r\nimport { GroupHeader } from './models/group-header.model';\r\nimport { ContentGroupService } from './services/content-group.service';\r\nimport { AppDialogConfigService } from '../app-administration/services';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-manage-content-list',\r\n  templateUrl: './manage-content-list.component.html',\r\n  styleUrls: ['./manage-content-list.component.scss'],\r\n})\r\nexport class ManageContentListComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private items$ = new BehaviorSubject<GroupHeader[]>(null);\r\n  private header$ = new BehaviorSubject<GroupHeader>(null);\r\n  templateVars$ = combineLatest([this.items$, this.header$]).pipe(\r\n    map(([items, header]) => ({ items, header })),\r\n  );\r\n\r\n  private contentGroup: ContentGroup = {\r\n    id: null,\r\n    guid: this.route.snapshot.paramMap.get('guid'),\r\n    part: this.route.snapshot.paramMap.get('part'),\r\n    index: parseInt(this.route.snapshot.paramMap.get('index'), 10),\r\n  };\r\n  private reordered = false;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ManageContentListComponent>,\r\n    private contentGroupService: ContentGroupService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n    private translate: TranslateService,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchList();\r\n    this.fetchHeader();\r\n    this.refreshOnChildClosed();\r\n    this.fetchDialogSettings();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.items$.complete();\r\n    this.header$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  private fetchDialogSettings() {\r\n    this.appDialogConfigService.getShared$() /*.getDialogSettings() */ .pipe(\r\n      tap(\r\n        dialogSettings => {\r\n          this.translate.setDefaultLang(dialogSettings.Context.Language.Primary.split('-')[0]);\r\n          this.translate.use(dialogSettings.Context.Language.Current.split('-')[0]);\r\n        })\r\n    ).subscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  saveList() {\r\n    this.snackBar.open('Saving...');\r\n    this.contentGroupService.saveList(this.contentGroup, this.items$.value).subscribe(res => {\r\n      this.snackBar.open('Saved');\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  editHeader() {\r\n    const form: EditForm = {\r\n      items: [\r\n        {\r\n          Add: this.header$.value.Id === 0,\r\n          Index: 0,\r\n          Parent: this.contentGroup.guid,\r\n          Field: 'listcontent',\r\n        },\r\n        {\r\n          Add: this.header$.value.Id === 0,\r\n          Index: 0,\r\n          Parent: this.contentGroup.guid,\r\n          Field: 'listpresentation',\r\n        },\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(id: number) {\r\n    const form: EditForm = {\r\n      items: [{ EntityId: id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  drop(event: CdkDragDrop<GroupHeader[]>) {\r\n    const items = [...this.items$.value];\r\n    moveItemInArray(items, event.previousIndex, event.currentIndex);\r\n    this.items$.next(items);\r\n    this.reordered = true;\r\n  }\r\n\r\n  trackByFn(index: number, item: GroupHeader) {\r\n    // we use both Index and Id because all demo items have Id=0\r\n    return `${item.Index}+${item.Id}`;\r\n  }\r\n\r\n  private fetchList() {\r\n    this.contentGroupService.getList(this.contentGroup).subscribe(items => {\r\n      if (this.reordered) {\r\n        const oldIds = this.items$.value.map(item => item.Id);\r\n        const idsChanged = this.items$.value.length !== items.length || items.some(item => !oldIds.includes(item.Id));\r\n        if (!idsChanged) {\r\n          const sortOrder = this.items$.value.map(item => item.Index);\r\n          items.sort((a, b) => {\r\n            const aIndex = sortOrder.indexOf(a.Index);\r\n            const bIndex = sortOrder.indexOf(b.Index);\r\n            if (aIndex === -1 || bIndex === -1) { return 0; }\r\n            return aIndex - bIndex;\r\n          });\r\n        } else {\r\n          this.snackBar.open('List was changed from somewhere else. Order of items is reset', null, { duration: 5000 });\r\n        }\r\n      }\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchHeader() {\r\n    this.contentGroupService.getHeader(this.contentGroup).subscribe(header => {\r\n      this.header$.next(header);\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchList();\r\n        this.fetchHeader();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_manage-content-list_manage-content-list_component_ts.d6938a46f2c66d18.js"}