{"version":3,"file":"projects_eav-ui_src_app_edit_dialog_footer_edit-dialog-footer_component_ts.dfcd3bdce7663cb8.js","mappings":"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","names":["DataDumpComponent","constructor","itemService","formConfig","this","items","getManySignal","config","itemGuids","i0","i1","i2","selectors","decls","vars","consts","template","rf","ctx","JsonPipe","styles","DebugTypes","Data","Formulas","Logs","SelectTargets","Entity","Field","Target","SnippetLabelSizePipe","maxLength","transform","label","length","substring","pure","entityOption_r3","entityGuid","_c2","hasFormula","fieldOption_r4","fieldName","targetOption_r6","target","$event","_r5","ctx_r1","selectedChanged","FormulaDesignerComponent_Conditional_0_Conditional_16_For_2_Template","state","targetOptions","_r7","snippet_r9","_r8","$implicit","clipboard","copyToClipboard","code","snippet_r11","_r10","result","value","FormulaDesignerComponent_Conditional_0_Conditional_40_Conditional_0_Conditional_0_Template","FormulaDesignerComponent_Conditional_0_Conditional_40_Conditional_0_Conditional_1_Template","FormulaDesignerComponent_Conditional_0_Conditional_40_Conditional_0_Conditional_2_Template","undefined","isOnlyPromise","FormulaDesignerComponent_Conditional_0_Conditional_40_Conditional_0_Template","FormulaDesignerComponent_Conditional_0_Conditional_40_Conditional_1_Template","isError","_r12","save","editMode","tmp_3_0","currentFormula","sourceCode","tmp_4_0","saving","_r1","FormulaDesignerComponent_Conditional_0_For_6_Template","_forTrack0","FormulaDesignerComponent_Conditional_0_For_12_Template","_forTrack1","FormulaDesignerComponent_Conditional_0_Conditional_16_Template","FormulaDesignerComponent_Conditional_0_Conditional_17_Template","toggleFreeText","formulaChanged","onFocused","FormulaDesignerComponent_Conditional_0_For_32_Template","_forTrack2","FormulaDesignerComponent_Conditional_0_Conditional_33_Template","FormulaDesignerComponent_Conditional_0_For_35_Template","FormulaDesignerComponent_Conditional_0_Conditional_40_Template","toggleEdit","deleteFormula","reset","FormulaDesignerComponent_Conditional_0_Conditional_60_Template","run","entityOptions","fieldsOptions","freeTextTarget","_c0","focused","filename","tmp_11_0","v2JsTypings","monacoOptions","_c1","v1DataSnippets","tmp_16_0","v1ContextSnippets","isDeleted","menu_r13","tmp_20_0","sourceCodeId","allowSaveFormula","tmp_22_0","FormulaDesignerComponent","#designerSvc","#entitiesService","snackBar","contentTypeService","translate","log","classLog","inject","FormulaDesignerService","transient","EntityEditService","ClipboardService","loadError","enableFormulaSave","signal","minimap","enabled","lineHeight","lineNumbers","lineDecorationsWidth","folding","scrollBeyondLastLine","tabSize","fixedOverflowWidgets","formId","designerState","formulaResult","currentTargetOptions","computed","Object","values","FormulaNewPickerTargets","includes","defaultListItemFormula","defaultFormula","ngOnInit","keys","itemSettingsServices","setDesignerOpen","initAfterItemSettingsAreReady","ngOnDestroy","newState","selectedSettingsSvc","allProps","set","formula","cache","updateFormulaFromEditor","#designerIdentifier","oldState","designer","identifier","resetFormula","retriggerFormulas","item","get","atAllFieldSettings","getAttributeOfItem","Metadata","find","m","Type","Id","create","eavConstants","contentTypes","formulas","Title","Formula","Enabled","ParentRelationship","EditPrep","relationship","Guid","subscribe","savedFormula","updateSaved","open","duration","update","sourceCodeGuid","confirm","instant","title","id","delete","next","error","_","i3","i4","i5","FormulaDesignerComponent_Conditional_0_Template","MatFormFieldModule","i6","MatSelectModule","i7","i8","FormsModule","i9","MatOptionModule","NgClass","MatInputModule","i10","MatButtonModule","i11","MatIconModule","i12","MonacoEditorComponent","MatMenuModule","i13","TippyDirective","ClipboardModule","static","__ngFactoryType__","type","ConfigEditorDialogComponent","dialog","data","hostClass","editorOptions","theme","language","readOnly","automaticLayout","selectedConfig","JSON","stringify","configData","MAT_DIALOG_DATA","hostVars","hostBindings","MatDialogModule","encapsulation","SpecsEditorDialogComponent","logSpecs","onClose","close","onSave","onValueChanged","newValue","config_r1","log_r3","ctx_r3","openLogSpecs","key","_r2","toggleConfig","LogsConfigComponent_div_16_Conditional_4_Template","isChecked","hasLogSpecs","LogsConfigComponent","loggingService","matDialog","LogSeverities","logManager","LogManager","singleton","allLogs","mergeAllSpecs","configs","sessionPrefix","logs","getLogsSignal","loadConfigsFromStateManager","checkAll","every","specs","spec","name","toggle","savedConfigs","filter","startsWith","map","replace","onConfigSelected","configName","forEach","logKey","saveConfig","prompt","enabledConfigs","fromEntries","entries","add","exportConfig","width","afterClosed","updatedSpecs","parse","updateSpecs","LogsConfigComponent_mat_option_15_Template","LogsConfigComponent_div_16_Template","CommonModule","log_r2","ctx_r2","logToConsole","severity","Error","Warn","time","LogsDumpComponent_Conditional_2_Conditional_0_Template","LogsDumpComponent_Conditional_2_For_2_Template","LogsDumpComponent","showSettings","Log","console","warn","toggleDialog","LogsDumpComponent_Conditional_2_Template","LogsDumpComponent_Conditional_3_Template","DatePipe","toggleSize","preferences","expanded","_r3","prefManager","pinResource","EditDialogFooterComponent_Conditional_22_Case_1_Template","EditDialogFooterComponent_Conditional_22_Case_2_Template","EditDialogFooterComponent_Conditional_22_Case_3_Template","tmp_2_0","tab","EditDialogFooterComponent","sxcVer","window","sxcVersion","lastIndexOf","UserPreferences","part","footerPreferences","s","hideTab","setMany","size","pinResources","pinned","EditDialogFooterComponent_Conditional_18_Template","EditDialogFooterComponent_Conditional_19_Template","EditDialogFooterComponent_Conditional_22_Template","MatCardModule","HttpServiceBase","contentType","entity","http","post","params","appId","zoneId","entityId","tryForce","apiUrl","webApiEntityRoot","toString","force","factory","ɵfac"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/edit/dialog/footer/data-dump/data-dump.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/data-dump/data-dump.component.html","./projects/eav-ui/src/app/edit/dialog/footer/edit-dialog-footer.models.ts","./projects/eav-ui/src/app/edit/dialog/footer/formula-designer/formula-designer.models.ts","./projects/eav-ui/src/app/edit/dialog/footer/formula-designer/snippet-label-size.pipe.ts","./projects/eav-ui/src/app/edit/dialog/footer/formula-designer/formula-designer.component.html","./projects/eav-ui/src/app/edit/dialog/footer/formula-designer/formula-designer.component.ts","./node_modules/@angular/cdk/fesm2022/clipboard.mjs","./projects/eav-ui/src/app/edit/dialog/footer/logs-config/config-editor-dialog/config-editor-dialog.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/logs-config/config-editor-dialog/config-editor-dialog.component.html","./projects/eav-ui/src/app/edit/dialog/footer/logs-config/specs-editor-dialog/specs-editor-dialog.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/logs-config/specs-editor-dialog/specs-editor-dialog.component.html","./projects/eav-ui/src/app/edit/dialog/footer/logs-config/logs-config.component.html","./projects/eav-ui/src/app/edit/dialog/footer/logs-config/logs-config.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/logs-dump/logs-dump.component.html","./projects/eav-ui/src/app/edit/dialog/footer/logs-dump/logs-dump.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/edit-dialog-footer.component.html","./projects/eav-ui/src/app/edit/dialog/footer/edit-dialog-footer.component.ts","./projects/eav-ui/src/app/shared/services/entity-edit.service.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { JsonPipe } from '@angular/common';\r\nimport { FormConfigService } from '../../../form/form-config.service';\r\nimport { ItemService } from '../../../state/item.service';\r\n\r\n@Component({\r\n    selector: 'app-data-dump',\r\n    templateUrl: './data-dump.component.html',\r\n    styleUrls: ['./data-dump.component.scss'],\r\n    imports: [JsonPipe]\r\n})\r\nexport class DataDumpComponent {\r\n  protected items = this.itemService.getManySignal(this.formConfig.config.itemGuids);\r\n  constructor(private itemService: ItemService, private formConfig: FormConfigService) { }\r\n}\r\n","  <textarea readonly class=\"fancy-scrollbar-light\">{{ items() | json }}</textarea>\r\n\r\n","export const DebugTypes = {\r\n  Data: 'data',\r\n  Formulas: 'formulas',\r\n  Logs: 'logs',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { Of } from '../../../../../../../core';\r\nimport { FormulaCacheItem } from '../../../formulas/cache/formula-cache.model';\r\nimport { FormulaTargets } from '../../../formulas/targets/formula-targets';\r\n\r\nexport interface EntityOption {\r\n  entityGuid: string;\r\n  formulas: FormulaCacheItem[];\r\n  hasFormula: boolean;\r\n  label: string;\r\n}\r\n\r\nexport interface FieldOption {\r\n  fieldName: string;\r\n  formulas: FormulaCacheItem[];\r\n  hasFormula: boolean;\r\n  inputType: string;\r\n  label: string;\r\n}\r\n\r\nexport interface TargetOption {\r\n  hasFormula: boolean;\r\n  label: string;\r\n  target: Of<typeof FormulaTargets>;\r\n}\r\n\r\nexport interface DesignerSnippet {\r\n  code: string;\r\n  label: string;\r\n}\r\n\r\nexport const SelectTargets = {\r\n  Entity: 'entityGuid',\r\n  Field: 'fieldValue',\r\n  Target: 'formulaTarget',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'snippetLabelSize',\r\n})\r\nexport class SnippetLabelSizePipe implements PipeTransform {\r\n\r\n  private maxLength = 24;\r\n\r\n  transform(label: string): string {\r\n    if (label.length <= this.maxLength) { return label; }\r\n    return `…${label.substring(label.length - this.maxLength)}`;\r\n  }\r\n}\r\n","@if (!loadError) {\r\n  <div class=\"formula-context-box\">\r\n    <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n      <mat-label>Entity</mat-label>\r\n      <mat-select [ngModel]=\"state().entityGuid\" (ngModelChange)=\"selectedChanged(SelectTargets.Entity, $event)\">\r\n        @for (entityOption of entityOptions(); track entityOption.entityGuid)\r\n        {\r\n          <mat-option\r\n            [value]=\"entityOption.entityGuid\">\r\n            <span [ngClass]=\"{ 'has-formula': entityOption.hasFormula }\">\r\n              {{ entityOption.label }}\r\n            </span>\r\n          </mat-option>\r\n        }\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n      <mat-label>Attribute</mat-label>\r\n      <mat-select [ngModel]=\"state().fieldName\" (ngModelChange)=\"selectedChanged(SelectTargets.Field, $event)\"\r\n        [disabled]=\"state().entityGuid == null\">\r\n        @for (fieldOption of fieldsOptions(); track fieldOption.fieldName)\r\n        {\r\n          <mat-option\r\n            [value]=\"fieldOption.fieldName\">\r\n            <span [ngClass]=\"{ 'has-formula': fieldOption.hasFormula }\">\r\n              {{ fieldOption.fieldName }}\r\n            </span>\r\n          </mat-option>\r\n        }\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n      <mat-label>Target</mat-label>\r\n      @if (!freeTextTarget)\r\n      {\r\n        <mat-select [ngModel]=\"state().target\"\r\n          (ngModelChange)=\"selectedChanged(SelectTargets.Target, $event)\"\r\n          [disabled]=\"state().entityGuid == null || state().fieldName == null\">\r\n          @for (targetOption of targetOptions(); track targetOption) {\r\n            <mat-option [value]=\"targetOption.target\">\r\n              <span [ngClass]=\"{ 'has-formula': targetOption.hasFormula }\">\r\n                {{ targetOption.label }}\r\n              </span>\r\n            </mat-option>\r\n          }\r\n        </mat-select>\r\n      }\r\n      @else\r\n      {\r\n        <input matInput [ngModel]=\"state().target\"\r\n          (ngModelChange)=\"selectedChanged(SelectTargets.Target, $event)\"\r\n          [disabled]=\"state().entityGuid == null || state().fieldName == null\">\r\n      }\r\n    </mat-form-field>\r\n    <button mat-icon-button tippy=\"FreeText Target\" class=\"eav-formula-button\"\r\n      [disabled]=\"state().entityGuid == null || state().fieldName == null\" (click)=\"toggleFreeText()\">\r\n      <mat-icon>text_fields</mat-icon>\r\n    </button>\r\n    <div class=\"spacer\"></div>\r\n    <a mat-icon-button tippy=\"Help\" class=\"eav-formula-button\" href=\"https://go.2sxc.org/formulas\" target=\"_blank\">\r\n      <mat-icon>help</mat-icon>\r\n    </a>\r\n  </div>\r\n  <div class=\"formula-box\">\r\n    <div class=\"formula-field\" [ngClass]=\"{\r\n      'disabled': !state().editMode || state().entityGuid == null || state().fieldName == null || state().target == null,\r\n      'focused': focused\r\n      }\">\r\n      <mat-label class=\"label\">Function</mat-label>\r\n      <app-monaco-editor class=\"editor\" [filename]=\"filename\" [value]=\"currentFormula()?.sourceCode ?? template()\"\r\n        [jsTypings]=\"v2JsTypings()\" (valueChanged)=\"formulaChanged($event)\" [options]=\"monacoOptions\"\r\n        (focused)=\"onFocused(true)\" (blurred)=\"onFocused(false)\">\r\n      </app-monaco-editor>\r\n    </div>\r\n    <div class=\"formula-snippets fancy-scrollbar-light\" [ngClass]=\"{ 'disabled': !state().editMode }\">\r\n      @for (snippet of v1DataSnippets(); track snippet.code)\r\n      {\r\n        <div class=\"snippet\" [title]=\"snippet.code\"\r\n          (click)=\"clipboard.copyToClipboard(snippet.code)\">\r\n          {{ snippet.label | snippetLabelSize }}\r\n        </div>\r\n      }\r\n      @if (v1DataSnippets()?.length && v1ContextSnippets().length)\r\n      {\r\n        <div class=\"separator\"></div>\r\n      }\r\n      @for (snippet of v1ContextSnippets(); track snippet.code)\r\n      {\r\n        <div class=\"snippet\" [title]=\"snippet.code\"\r\n          (click)=\"clipboard.copyToClipboard(snippet.code)\">\r\n          {{ snippet.label | snippetLabelSize }}\r\n        </div>\r\n      }\r\n    </div>\r\n  </div>\r\n  <div class=\"formula-footer-box\">\r\n    <div class=\"formula-result-box hide-scrollbar\">\r\n      <span class=\"label\">Result:&nbsp;</span>\r\n      @if (result() != null && !isDeleted())\r\n      {\r\n        @if (!result().isError)\r\n        {\r\n          @if (result().value !== undefined) {\r\n            <span>{{ result().value | json }}</span>\r\n          }\r\n          @else if (!result().isOnlyPromise) {\r\n            <span class=\"result-undefined\">undefined</span>\r\n          }\r\n          @else {\r\n            <span>promise(🤞🏽)</span>\r\n          }\r\n        }\r\n        @else\r\n        {\r\n          <span class=\"result-error\">\r\n            Calculation failed. Please check console for more info\r\n          </span>\r\n        }\r\n      }\r\n    </div>\r\n    <div class=\"formula-actions-box\">\r\n      <button mat-icon-button tippy=\"Edit\" (click)=\"toggleEdit()\">\r\n        <mat-icon>edit</mat-icon>\r\n      </button>\r\n      <button mat-icon-button tippy=\"Menu\" [matMenuTriggerFor]=\"menu\">\r\n        <mat-icon>more_vert</mat-icon>\r\n      </button>\r\n      <mat-menu #menu=\"matMenu\">\r\n        <button mat-menu-item (click)=\"deleteFormula()\"\r\n          [disabled]=\"!currentFormula()?.sourceCodeId\">\r\n          <mat-icon>delete</mat-icon>\r\n          <span>Delete</span>\r\n        </button>\r\n        <button mat-menu-item (click)=\"reset()\">\r\n          <mat-icon>history</mat-icon>\r\n          <span>Reset</span>\r\n        </button>\r\n      </mat-menu>\r\n      @if (allowSaveFormula)\r\n      {\r\n        <button mat-icon-button tippy=\"Save\"\r\n          [tippyDisabled]=\"!state().editMode || !currentFormula()?.sourceCode\"\r\n          [disabled]=\"!state().editMode || !currentFormula()?.sourceCode || saving()\" (click)=\"save()\">\r\n          <mat-icon>save</mat-icon>\r\n        </button>\r\n      }\r\n      <button mat-icon-button tippy=\"Run\"\r\n        [disabled]=\"!state().editMode || !currentFormula()?.sourceCode\" (click)=\"run()\">\r\n        <mat-icon>play_arrow</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n}\r\n","import { JsonPipe, NgClass } from '@angular/common';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, computed, inject, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport type * as Monaco from 'monaco-editor';\r\nimport { Of } from '../../../../../../../core';\r\nimport { transient } from '../../../../../../../core/transient';\r\nimport { MonacoEditorComponent } from '../../../../monaco-editor/monaco-editor.component';\r\nimport { eavConstants } from '../../../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../../../shared/directives/tippy.directive';\r\nimport { classLog } from '../../../../shared/logging';\r\nimport { EditPrep } from '../../../../shared/models/edit-form.model';\r\nimport { ClipboardService } from '../../../../shared/services/clipboard.service';\r\nimport { EntityEditService } from '../../../../shared/services/entity-edit.service';\r\nimport { FormConfigService } from '../../../form/form-config.service';\r\nimport { DesignerState } from '../../../formulas/designer/designer-state.model';\r\nimport { FormulaDesignerService } from '../../../formulas/designer/formula-designer.service';\r\nimport { defaultFormula, defaultListItemFormula } from '../../../formulas/formula-definitions';\r\nimport { FormulaIdentifier } from '../../../formulas/results/formula-results.models';\r\nimport { FormulaNewPickerTargets, FormulaTargets } from '../../../formulas/targets/formula-targets';\r\nimport { ContentTypeService } from '../../../shared/content-types/content-type.service';\r\nimport { ItemService } from '../../../state/item.service';\r\nimport { SelectTargets } from './formula-designer.models';\r\nimport { SnippetLabelSizePipe } from './snippet-label-size.pipe';\r\n\r\n@Component({\r\n    selector: 'app-formula-designer',\r\n    templateUrl: './formula-designer.component.html',\r\n    styleUrls: ['./formula-designer.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        MatSelectModule,\r\n        FormsModule,\r\n        MatOptionModule,\r\n        NgClass,\r\n        MatInputModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MonacoEditorComponent,\r\n        MatMenuModule,\r\n        JsonPipe,\r\n        SnippetLabelSizePipe,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class FormulaDesignerComponent implements OnInit, OnDestroy {\r\n\r\n  log = classLog({FormulaDesignerComponent});\r\n\r\n  #designerSvc = inject(FormulaDesignerService);\r\n\r\n  #entitiesService = transient(EntityEditService);\r\n  \r\n  constructor(\r\n    private snackBar: MatSnackBar,\r\n    private formConfig: FormConfigService,\r\n    private itemService: ItemService,\r\n    private contentTypeService: ContentTypeService,\r\n    private translate: TranslateService,\r\n  ) { }\r\n\r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  SelectTargets = SelectTargets;\r\n  loadError = false;\r\n  freeTextTarget = false;\r\n  allowSaveFormula = this.formConfig.config.enableFormulaSave;\r\n  isDeleted = signal(false);\r\n  saving = signal(false);\r\n  monacoOptions: Monaco.editor.IStandaloneEditorConstructionOptions = {\r\n    minimap: {\r\n      enabled: false,\r\n    },\r\n    lineHeight: 19,\r\n    lineNumbers: 'off',\r\n    lineDecorationsWidth: 0,\r\n    folding: false,\r\n    scrollBeyondLastLine: false,\r\n    tabSize: 2,\r\n    fixedOverflowWidgets: true,\r\n  };\r\n  filename = `formula${this.formConfig.config.formId}.js`;\r\n  focused = false;\r\n\r\n\r\n  protected state = this.#designerSvc.designerState;\r\n  protected result = this.#designerSvc.formulaResult;\r\n  protected targetOptions = this.#designerSvc.currentTargetOptions;\r\n  \r\n  protected entityOptions = this.#designerSvc.entityOptions;\r\n  protected fieldsOptions = this.#designerSvc.fieldsOptions;\r\n  protected currentFormula = this.#designerSvc.currentFormula;\r\n\r\n  protected v2JsTypings = this.#designerSvc.v2JsTypings;\r\n\r\n  protected v1ContextSnippets = this.#designerSvc.v1ContextSnippets;\r\n  protected v1DataSnippets = this.#designerSvc.v1DataSnippets;\r\n\r\n  protected template = computed(() => Object.values(FormulaNewPickerTargets).includes(this.state().target)\r\n    ? defaultListItemFormula\r\n    : defaultFormula\r\n  );\r\n\r\n\r\n  ngOnInit(): void {\r\n    // Make sure all necessary services have what they need, otherwise flag & exit\r\n    // 1. Make sure the designer has access to all itemSettingsServices\r\n    this.loadError = false;\r\n    if (Object.keys(this.#designerSvc.itemSettingsServices).length < 1) {\r\n      this.loadError = true;\r\n      return;\r\n    }\r\n    \r\n    this.#designerSvc.setDesignerOpen(true);\r\n    this.#designerSvc.initAfterItemSettingsAreReady();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.#designerSvc.setDesignerOpen(false);\r\n  }\r\n\r\n  selectedChanged(target: Of<typeof SelectTargets>, value: string | Of<typeof FormulaTargets>): void {\r\n    const newState: DesignerState = {\r\n      ...this.#designerSvc.designerState(),\r\n      editMode: false,\r\n    };\r\n    switch (target) {\r\n      case SelectTargets.Entity:\r\n        newState.entityGuid = value;\r\n        const selectedSettingsSvc = this.#designerSvc.itemSettingsServices[newState.entityGuid];\r\n        newState.fieldName = Object.keys(selectedSettingsSvc.allProps())[0];\r\n        break;\r\n      case SelectTargets.Field:\r\n        newState.fieldName = value;\r\n        break;\r\n      case SelectTargets.Target:\r\n        newState.target = value as Of<typeof FormulaTargets>;\r\n        break;\r\n    }\r\n\r\n    this.#designerSvc.designerState.set(newState);\r\n  }\r\n\r\n  toggleFreeText(): void {\r\n    this.freeTextTarget = !this.freeTextTarget;\r\n  }\r\n\r\n  formulaChanged(formula: string): void {\r\n    this.#designerSvc.cache.updateFormulaFromEditor(this.#designerIdentifier, formula, false);\r\n  }\r\n\r\n  onFocused(focused: boolean): void {\r\n    this.focused = focused;\r\n  }\r\n\r\n  toggleEdit(): void {\r\n    const oldState = this.#designerSvc.designerState();\r\n    const designer: DesignerState = {\r\n      ...oldState,\r\n      editMode: !oldState.editMode,\r\n    };\r\n    this.#designerSvc.designerState.set(designer);\r\n    if (designer.editMode && this.#designerSvc.currentFormula() == null)\r\n      this.#designerSvc.cache.updateFormulaFromEditor(this.#designerIdentifier, this.template(), false);\r\n  }\r\n\r\n  reset(): void {\r\n    const designer: DesignerState = {\r\n      ...this.#designerSvc.designerState(),\r\n      editMode: false,\r\n    };\r\n    const identifier = this.#designerIdentifier;\r\n    this.#designerSvc.designerState.set(designer);\r\n    this.#designerSvc.cache.resetFormula(identifier);\r\n    this.#designerSvc.itemSettingsServices[identifier.entityGuid].retriggerFormulas('designer-reset');\r\n  }\r\n\r\n  run(): void {\r\n    const identifier = this.#designerIdentifier;\r\n    const formula = this.#designerSvc.currentFormula();\r\n    this.#designerSvc.cache.updateFormulaFromEditor(identifier, formula.sourceCode, true);\r\n    this.#designerSvc.itemSettingsServices[identifier.entityGuid].retriggerFormulas('designer-run');\r\n    this.isDeleted.set(false);\r\n  }\r\n\r\n  get #designerIdentifier(): FormulaIdentifier {\r\n    const designer = this.#designerSvc.designerState();\r\n    const id: FormulaIdentifier = { entityGuid: designer.entityGuid, fieldName: designer.fieldName, target: designer.target };\r\n    return id;\r\n  }\r\n\r\n  //#region Save/Delete\r\n\r\n  save(): void {\r\n    this.saving.set(true);\r\n    const formula = this.#designerSvc.currentFormula();\r\n\r\n    if (formula.sourceCodeId == null) {\r\n      const item = this.itemService.get(formula.entityGuid);\r\n      const attributeDef = this.contentTypeService.getAttributeOfItem(item, formula.fieldName);\r\n      const atAllFieldSettings = attributeDef.Metadata.find(m => m.Type.Id === '@All');\r\n      if (!atAllFieldSettings) {\r\n        this.snackBar.open('Field configuration is missing. Please create formula in Administration', undefined, { duration: 3000 });\r\n        this.saving.set(false);\r\n        return;\r\n      }\r\n      this.#entitiesService.create(\r\n        eavConstants.contentTypes.formulas,\r\n        {\r\n          Title: formula.target,\r\n          Target: formula.target,\r\n          Formula: formula.sourceCode,\r\n          Enabled: true,\r\n          ParentRelationship: EditPrep.relationship(atAllFieldSettings.Guid, 'Formulas'),\r\n        },\r\n      ).subscribe(savedFormula => {\r\n        this.#designerSvc.cache.updateSaved(formula, savedFormula.Guid, savedFormula.Id);\r\n        this.snackBar.open('Formula saved', null, { duration: 2000 });\r\n        this.saving.set(false);\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.#entitiesService.update(eavConstants.contentTypes.formulas, formula.sourceCodeId, { Formula: formula.sourceCode }).subscribe(() => {\r\n      this.#designerSvc.cache.updateSaved(formula, formula.sourceCodeGuid, formula.sourceCodeId);\r\n      this.snackBar.open('Formula saved', null, { duration: 2000 });\r\n      this.saving.set(false);\r\n    });\r\n  }\r\n\r\n  deleteFormula(): void {\r\n    const designer = this.#designerSvc.designerState();\r\n    const formula = this.#designerSvc.currentFormula();\r\n\r\n    const id = formula.sourceCodeId;\r\n    const title = formula.fieldName + ' - ' + formula.target;\r\n\r\n    const confirmed = confirm(this.translate.instant('Data.Delete.Question', { title, id }));\r\n    if (!confirmed)\r\n      return;\r\n\r\n    this.#entitiesService.delete(eavConstants.contentTypes.formulas, formula.sourceCodeId, true)\r\n      .subscribe({\r\n        next: () => {\r\n          this.#designerSvc.cache.delete(formula);\r\n          this.snackBar.open(this.translate.instant('Message.Deleted'), null, { duration: 2000 });\r\n          this.isDeleted.set(true);\r\n          if (designer.editMode)\r\n            this.toggleEdit();\r\n        },\r\n        error: (_: HttpErrorResponse) => {\r\n          this.snackBar.open(this.translate.instant('Message.DeleteError'), null, { duration: 2000 });\r\n        }\r\n      });\r\n  }\r\n\r\n  //#endregion\r\n\r\n}\r\n","import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, Injectable, InjectionToken, NgZone, EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a re-layout. This re-layout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * re-layout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nclass PendingCopy {\n    _document;\n    _textarea;\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = (this._textarea = this._document.createElement('textarea'));\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        // Making the textarea `readonly` prevents the screen from jumping on iOS Safari (see #25169).\n        textarea.readOnly = true;\n        // The element needs to be inserted into the fullscreen container, if the page\n        // is in fullscreen mode, otherwise the browser won't execute the copy command.\n        (this._document.fullscreenElement || this._document.body).appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try {\n            // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            textarea.remove();\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    _document = inject(DOCUMENT);\n    constructor() { }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: Clipboard, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: Clipboard, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: Clipboard, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    _clipboard = inject(Clipboard);\n    _ngZone = inject(NgZone);\n    /** Content to be copied. */\n    text = '';\n    /**\n     * How many times to attempt to copy the text. This may be necessary for longer text, because\n     * the browser needs time to fill an intermediate textarea element and copy the content.\n     */\n    attempts = 1;\n    /**\n     * Emits when some text is copied to the clipboard. The\n     * emitted value indicates whether copying was successful.\n     */\n    copied = new EventEmitter();\n    /** Copies that are currently being attempted. */\n    _pending = new Set();\n    /** Whether the directive has been destroyed. */\n    _destroyed;\n    /** Timeout for the current copy attempt. */\n    _currentTimeout;\n    constructor() {\n        const config = inject(CDK_COPY_TO_CLIPBOARD_CONFIG, { optional: true });\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkCopyToClipboard, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkCopyToClipboard, isStandalone: true, selector: \"[cdkCopyToClipboard]\", inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" }, host: { listeners: { \"click\": \"copy()\" } }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkCopyToClipboard, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCopyToClipboard]',\n                    host: {\n                        '(click)': 'copy()',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { text: [{\n                type: Input,\n                args: ['cdkCopyToClipboard']\n            }], attempts: [{\n                type: Input,\n                args: ['cdkCopyToClipboardAttempts']\n            }], copied: [{\n                type: Output,\n                args: ['cdkCopyToClipboardCopied']\n            }] } });\n\nclass ClipboardModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: ClipboardModule, imports: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: ClipboardModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkCopyToClipboard],\n                    exports: [CdkCopyToClipboard],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n","import { ClipboardModule } from '@angular/cdk/clipboard';\r\nimport { Component, HostBinding, Inject } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatDialogActions,\r\n  MatDialogClose,\r\n  MatDialogModule, MatDialogRef\r\n} from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { transient } from '../../../../../../../../core/transient';\r\nimport { ClipboardService } from '../../../../..//shared/services/clipboard.service';\r\nimport { MonacoEditorComponent } from '../../../../../monaco-editor/monaco-editor.component';\r\nimport { TippyDirective } from '../../../../../shared/directives/tippy.directive';\r\n@Component({\r\n    imports: [\r\n        MatDialogModule,\r\n        FormsModule,\r\n        MonacoEditorComponent,\r\n        MatButtonModule,\r\n        MatDialogActions,\r\n        MatDialogClose,\r\n        ClipboardModule,\r\n        MatIconModule,\r\n        TippyDirective,\r\n    ],\r\n    selector: 'app-monaco-editor-dialog',\r\n    templateUrl: './config-editor-dialog.component.html'\r\n})\r\nexport class ConfigEditorDialogComponent {\r\n\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  \r\n  selectedConfig: string;\r\n  focused = false;\r\n  editorOptions = {\r\n    theme: 'vs-light',\r\n    language: 'json',\r\n    readOnly: true,\r\n    automaticLayout: true,\r\n    minimap: { enabled: false },\r\n    scrollBeyondLastLine: false,\r\n  };\r\n  filename = 'exported-config.json';\r\n\r\n  constructor(\r\n    public dialog: MatDialogRef<ConfigEditorDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    this.selectedConfig = JSON.stringify(data.configData, null, 2);\r\n  }\r\n  \r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  onFocused(focused: boolean): void {\r\n    this.focused = focused;\r\n  }\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Configs Exporter</div>\r\n    <button mat-icon-button mat-dialog-close tippy=\"Close dialog\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content\" style=\"padding-bottom: 0;\">\r\n    <app-monaco-editor\r\n      [filename]=\"filename\"\r\n      [value]=\"selectedConfig\"\r\n      [options]=\"editorOptions\"\r\n      (focused)=\"onFocused(true)\"\r\n      (blurred)=\"onFocused(false)\"\r\n      style=\"height: 350px; width: 100%\"\r\n    />\r\n  </div>\r\n  <mat-dialog-actions>\r\n    <button mat-icon-button (click)=\"clipboard.copyToClipboard(selectedConfig)\" tippy=\"Copy Config To Clipboard\">\r\n      <mat-icon>content_copy</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { Component, HostBinding, Inject } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatDialogActions,\r\n  MatDialogClose,\r\n  MatDialogModule,\r\n  MatDialogRef\r\n} from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MonacoEditorComponent } from '../../../../../monaco-editor/monaco-editor.component';\r\nimport { TippyDirective } from '../../../../../shared/directives/tippy.directive';\r\n@Component({\r\n    imports: [\r\n        MatDialogModule,\r\n        FormsModule,\r\n        MonacoEditorComponent,\r\n        MatButtonModule,\r\n        MatDialogActions,\r\n        MatDialogClose,\r\n        MatIconModule,\r\n        TippyDirective,\r\n    ],\r\n    selector: 'app-monaco-editor-dialog',\r\n    templateUrl: './specs-editor-dialog.component.html'\r\n})\r\nexport class SpecsEditorDialogComponent {\r\n\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  logSpecs: string;\r\n  focused = false;\r\n  editorOptions = {\r\n    theme: 'vs-light',\r\n    language: 'json',\r\n    readOnly: false,\r\n    automaticLayout: true,\r\n    minimap: { enabled: false },\r\n    scrollBeyondLastLine: false,\r\n  };\r\n  filename = 'log-specs.json';\r\n\r\n  constructor(\r\n    public dialog: MatDialogRef<SpecsEditorDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    this.logSpecs = JSON.stringify(data.logSpecs, null, 2);\r\n  }\r\n\r\n  onClose(): void {\r\n    this.dialog.close();\r\n  }\r\n\r\n  onSave(): void {\r\n    this.dialog.close(this.logSpecs);\r\n  }\r\n\r\n  onValueChanged(newValue: string): void {\r\n    this.logSpecs = newValue;\r\n  }\r\n\r\n  onFocused(focused: boolean): void {\r\n    this.focused = focused;\r\n  }\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Log Specs Editor</div>\r\n    <button mat-icon-button mat-dialog-close tippy=\"Close dialog\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content\" style=\"padding-bottom: 0;\">\r\n    <app-monaco-editor\r\n      [filename]=\"filename\"\r\n      [value]=\"logSpecs\"\r\n      [options]=\"editorOptions\"\r\n      (valueChanged)=\"onValueChanged($event)\"\r\n      (focused)=\"onFocused(true)\"\r\n      (blurred)=\"onFocused(false)\"\r\n      style=\"height: 350px; width: 100%\"\r\n    />\r\n  </div>\r\n  <mat-dialog-actions>\r\n    <button mat-icon-button (click)=\"onSave()\" tippy=\"Save Specs\">\r\n      <mat-icon>save</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","<div class=\"log-content fancy-scrollbar-light\">\r\n  <div class=\"menu\">\r\n    <button mat-button tippy=\"Toggles All Logs\" (click)=\"checkAll()\">\r\n      Toggle All\r\n    </button>\r\n\r\n    <div>\r\n      <button mat-icon-button (click)=\"saveConfig()\" tippy=\"Save Configuration\">\r\n        <mat-icon>save</mat-icon>\r\n      </button>\r\n      <button\r\n      mat-icon-button\r\n      [disabled]=\"selectedConfig === null\"\r\n      (click)=\"exportConfig()\"\r\n      tippy=\"Export configuration\"\r\n      >\r\n      <mat-icon>ios_share</mat-icon>\r\n    </button>\r\n    <mat-form-field color=\"accent\">\r\n      <mat-label>Configurations</mat-label>\r\n      <mat-select\r\n        [(value)]=\"selectedConfig\"\r\n        (selectionChange)=\"onConfigSelected($event.value)\"\r\n      >\r\n        <mat-option *ngFor=\"let config of configs\" [value]=\"config\">\r\n          {{ config }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    </div>\r\n  </div>\r\n  <div *ngFor=\"let log of allLogs | keyvalue\">\r\n    <label>\r\n      <input\r\n        type=\"checkbox\"\r\n        [id]=\"log.key\"\r\n        [name]=\"log.key\"\r\n        [checked]=\"isChecked(log.key)\"\r\n        (change)=\"toggleConfig(log.key)\"\r\n      />\r\n      {{ log.key }}\r\n      @if (hasLogSpecs(log.key)) {\r\n        <button (click)=\"openLogSpecs(log.key)\" tippy=\"Edit Log Specs\">\r\n          <mat-icon class=\"specs-icon\">data_object</mat-icon>\r\n        </button>\r\n      }\r\n    </label>\r\n  </div>\r\n</div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { TippyDirective } from '../../../../shared/directives/tippy.directive';\r\nimport { LogManager } from '../../../../shared/logging/log-manager';\r\nimport { LoggingService, LogSeverities } from '../../../shared/services/logging.service';\r\nimport { ConfigEditorDialogComponent } from '../logs-config/config-editor-dialog/config-editor-dialog.component';\r\nimport { SpecsEditorDialogComponent } from '../logs-config/specs-editor-dialog/specs-editor-dialog.component';\r\n\r\n@Component({\r\n    selector: 'app-logs-config',\r\n    templateUrl: './logs-config.component.html',\r\n    styleUrls: ['./logs-config.component.scss'],\r\n    imports: [\r\n        CommonModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        TippyDirective,\r\n        MatFormFieldModule,\r\n        MatSelectModule,\r\n        MatOptionModule,\r\n        FormsModule,\r\n        MatInputModule,\r\n    ]\r\n})\r\nexport class LogsConfigComponent {\r\n  LogSeverities = LogSeverities;\r\n  logManager = LogManager.singleton();\r\n  allLogs = this.logManager.mergeAllSpecs;\r\n  configs: string[] = [];\r\n  selectedConfig: string | null = null;\r\n  sessionPrefix = 'logSpecs';\r\n\r\n  protected logs = this.loggingService.getLogsSignal();\r\n\r\n  constructor(\r\n    private loggingService: LoggingService,\r\n    private matDialog: MatDialog,\r\n    private snackBar: MatSnackBar\r\n  ) { this.loadConfigsFromStateManager(); }\r\n\r\n  /* Toggle Functions */\r\n  checkAll(): void {\r\n    const allChecked = Object.values(this.allLogs).every(\r\n      (specs) => specs.enabled\r\n    );\r\n\r\n    if (allChecked) {\r\n      // Reset all to unchecked\r\n      for (const spec of Object.keys(this.allLogs)) {\r\n        if (this.isChecked(spec)) {\r\n          this.toggleConfig(spec);\r\n        }\r\n      }\r\n    } else {\r\n      for (const spec of Object.keys(this.allLogs)) {\r\n        if (!this.isChecked(spec)) {\r\n          this.toggleConfig(spec);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.allLogs = this.logManager.mergeAllSpecs;\r\n  }\r\n\r\n  isChecked(name: string): boolean {\r\n    return this.allLogs[name]?.enabled ?? false;\r\n  }\r\n\r\n  toggleConfig(name: string): void {\r\n    this.logManager.toggle(name);\r\n    this.allLogs = this.logManager.mergeAllSpecs;\r\n  }\r\n\r\n  /* Config Functions */\r\n  loadConfigsFromStateManager(): void {\r\n    const savedConfigs = Object.keys(this.logManager.state.cache).filter(\r\n      (key) => key.startsWith(this.sessionPrefix)\r\n    );\r\n    this.configs = savedConfigs.map((key) =>\r\n      key.replace(`${this.sessionPrefix}.`, '')\r\n    );\r\n  }\r\n\r\n  onConfigSelected(configName: string | null): void {\r\n    if (configName) {\r\n      Object.keys(this.allLogs).forEach((logKey) => {\r\n        if (this.isChecked(logKey)) {\r\n          this.toggleConfig(logKey);\r\n        }\r\n      });\r\n\r\n      const fullConfigKey = `${this.sessionPrefix}.${configName}`;\r\n      const configData = this.logManager.state.cache[fullConfigKey];\r\n\r\n      if (configData) {\r\n        Object.keys(configData).forEach((logKey) => {\r\n          const shouldEnable = (configData as any)[logKey]?.enabled ?? false;\r\n          if (shouldEnable) {\r\n            if (!this.isChecked(logKey)) {\r\n              this.toggleConfig(logKey);\r\n            }\r\n          }\r\n        });\r\n        this.allLogs = this.logManager.mergeAllSpecs;\r\n      }\r\n    }\r\n  }\r\n\r\n  saveConfig(): void {\r\n    const configName = prompt('Enter the config name:');\r\n\r\n    if (configName) {\r\n      const enabledConfigs = Object.fromEntries(\r\n        Object.entries(this.allLogs).filter(\r\n          ([, config]) => config.enabled\r\n        )\r\n      );\r\n\r\n      const fullConfigKey = `${this.sessionPrefix}.${configName}`;\r\n      this.logManager.state.add(fullConfigKey, enabledConfigs);\r\n\r\n      this.snackBar.open(`Config \"${configName}\" has been saved.`, null, {\r\n        duration: 2000,\r\n      });\r\n      this.loadConfigsFromStateManager();\r\n    }\r\n  }\r\n\r\n  exportConfig(): void {\r\n    const fullConfigKey = `${this.sessionPrefix}.${this.selectedConfig}`;\r\n    const configData = this.logManager.state.cache[fullConfigKey];\r\n\r\n    if (configData) {\r\n      this.matDialog.open(ConfigEditorDialogComponent, {\r\n        width: '800px',\r\n        data: { configData },\r\n      });\r\n    } else {\r\n      this.snackBar.open(`Config \"${this.selectedConfig}\" not found.`, null, {\r\n        duration: 2000,\r\n      });\r\n    }\r\n  }\r\n\r\n  /* Specs Editor Dialog Functions */\r\n  hasLogSpecs(logKey: string): boolean {\r\n    const specs = this.allLogs[logKey]?.specs;\r\n    return !!specs && Object.keys(specs).length > 0;\r\n  }\r\n\r\n  openLogSpecs(logKey: string): void {\r\n    let logSpecs = this.allLogs[logKey].specs;\r\n    const dialogRef = this.matDialog.open(SpecsEditorDialogComponent, {\r\n      width: '800px',\r\n      data: { logSpecs: logSpecs },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        const updatedSpecs = JSON.parse(result);\r\n\r\n        this.allLogs[logKey].specs = updatedSpecs;\r\n\r\n        this.logManager.updateSpecs(this.allLogs);\r\n      }\r\n    });\r\n  }\r\n}\r\n","<div class=\"logs-box fancy-scrollbar-light\">\r\n  <div class=\"logs-content\">\r\n    @if (!showSettings) {\r\n      @if (logs().length === 0) {\r\n        <div>Logs are empty</div>\r\n      } \r\n      @for (log of logs(); track log) {\r\n        <div\r\n          class=\"log-entry\"\r\n          [ngClass]=\"{\r\n            'log-error': log.severity === LogSeverities.Error,\r\n            'log-warn': log.severity === LogSeverities.Warn\r\n          }\"\r\n        >\r\n          <span class=\"log-entry-part log-entry-time\"\r\n            >{{ log.time | date : \"HH:mm:ss\" }}:</span\r\n          >\r\n          <span class=\"log-entry-part log-entry-label\">{{ log.label }}</span>\r\n          <span\r\n            class=\"log-entry-part log-entry-show\"\r\n            tippy=\"Log to console\"\r\n            (click)=\"logToConsole(log)\"\r\n          >\r\n            console\r\n          </span>\r\n        </div>\r\n      }\r\n    } @else {\r\n      <app-logs-config />\r\n    }\r\n  </div>\r\n\r\n  <div class=\"log-button\">\r\n    <button mat-icon-button tippy=\"Enable Logs UI\" (click)=\"toggleDialog()\">\r\n      <mat-icon>settings</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { DatePipe, NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../../../shared/directives/tippy.directive';\r\nimport { LogEntry, LoggingService, LogSeverities } from '../../../shared/services/logging.service';\r\nimport { LogsConfigComponent } from \"../logs-config/logs-config.component\";\r\n\r\n@Component({\r\n    selector: 'app-logs-dump',\r\n    templateUrl: './logs-dump.component.html',\r\n    styleUrls: ['./logs-dump.component.scss'],\r\n    imports: [\r\n        NgClass,\r\n        DatePipe,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        LogsConfigComponent,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class LogsDumpComponent {\r\n  LogSeverities = LogSeverities;\r\n  showSettings = false;\r\n\r\n  protected logs = this.loggingService.getLogsSignal();\r\n\r\n  constructor(private loggingService: LoggingService) { }\r\n\r\n  logToConsole(log: LogEntry): void {\r\n    switch (log.severity) {\r\n      case LogSeverities.Log:\r\n        console.log(log.label, log.error);\r\n        break;\r\n      case LogSeverities.Warn:\r\n        console.warn(log.label, log.error);\r\n        break;\r\n      case LogSeverities.Error:\r\n        console.error(log.label, log.error);\r\n        break;\r\n    }\r\n  }\r\n\r\n  toggleDialog(): void {\r\n    this.showSettings = !this.showSettings;\r\n  }\r\n}\r\n\r\n","<mat-card appearance=\"raised\" class=\"mat-elevation-z4\" [ngClass]=\"{ 'debug-enabled': preferences().tab != null }\">\r\n  \r\n  <div class=\"debug-buttons-container\">\r\n    <button mat-button tippy=\"Show Data JSON\" (click)=\"toggleDialog(DebugTypes.Data)\">\r\n      <mat-icon>offline_bolt</mat-icon>\r\n      <span>Data</span>\r\n    </button>\r\n    <button mat-button tippy=\"Show Formula Designer\" (click)=\"toggleDialog(DebugTypes.Formulas)\">\r\n      <mat-icon>functions</mat-icon>\r\n      <span>Formulas</span>\r\n    </button>\r\n    <button mat-button tippy=\"Show Logs\" (click)=\"toggleDialog(DebugTypes.Logs)\">\r\n      <mat-icon>speed</mat-icon>\r\n      <span>Logs</span>\r\n    </button>\r\n    <div class=\"spacer\"></div>\r\n\r\n    <!-- Special expand button when working with formulas, to get more space -->\r\n    @if (preferences().tab != null)\r\n    {\r\n      <button mat-icon-button tippy=\"expand/shrink\" (click)=\"toggleSize()\">\r\n        <mat-icon>{{ preferences().expanded ? 'unfold_less' : 'expand' }}</mat-icon>\r\n      </button>\r\n    }\r\n    @else\r\n    {\r\n      <button mat-icon-button [tippy]=\"'Developer tools are only visible to developers. ' + pinResource('status')\" (click)=\"prefManager.toggle('pinned')\">\r\n        <mat-icon>{{ pinResource('icon') }}</mat-icon>\r\n      </button>\r\n    }\r\n\r\n    <div class=\"sxc-version\">\r\n      2sxc {{ sxcVer }}\r\n    </div>\r\n  </div>\r\n\r\n  @if (preferences().tab != null)\r\n  {\r\n    <div class=\"debug-info-container\" [ngClass]=\"'size' + (preferences().expanded ? '-xl' : '')\">\r\n      @switch (preferences().tab) {\r\n        @case (DebugTypes.Data) {\r\n          <app-data-dump></app-data-dump>\r\n        }\r\n        @case (DebugTypes.Formulas) {\r\n          <app-formula-designer></app-formula-designer>\r\n        }\r\n        @case (DebugTypes.Logs) {\r\n          <app-logs-dump></app-logs-dump>\r\n        }\r\n      }\r\n    </div>\r\n  }\r\n</mat-card>","import { NgClass } from '@angular/common';\r\nimport { Component, inject } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Of } from '../../../../../../core';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { classLog } from '../../../shared/logging';\r\nimport { EavWindow } from '../../../shared/models/eav-window.model';\r\nimport { UserPreferences } from '../../../shared/user/user-preferences.service';\r\nimport { DataDumpComponent } from './data-dump/data-dump.component';\r\nimport { DebugTypes } from './edit-dialog-footer.models';\r\nimport { footerPreferences } from './footer-preferences';\r\nimport { FormulaDesignerComponent } from './formula-designer/formula-designer.component';\r\nimport { LogsDumpComponent } from './logs-dump/logs-dump.component';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n    selector: 'app-edit-dialog-footer',\r\n    templateUrl: './edit-dialog-footer.component.html',\r\n    styleUrls: ['./edit-dialog-footer.component.scss'],\r\n    imports: [\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        NgClass,\r\n        DataDumpComponent,\r\n        FormulaDesignerComponent,\r\n        LogsDumpComponent,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class EditDialogFooterComponent {\r\n\r\n  log = classLog({EditDialogFooterComponent});\r\n\r\n  DebugTypes = DebugTypes;\r\n\r\n  sxcVer = window.sxcVersion.substring(0, window.sxcVersion.lastIndexOf('.'));\r\n  \r\n  prefManager = inject(UserPreferences).part(footerPreferences);\r\n  preferences = this.prefManager.data;\r\n\r\n  toggleDialog(type: Of<typeof DebugTypes>): void {\r\n    const s = this.preferences();\r\n    const hideTab = s.tab === type;\r\n    const tab = hideTab ? null :  type;\r\n    const expanded = hideTab ? false : s.expanded;\r\n    const size = hideTab ? 0 : expanded ? 2 : 1;\r\n    this.prefManager.setMany({ tab, expanded, size });\r\n  }\r\n\r\n  toggleSize(): void {\r\n    const expanded = !this.preferences().expanded;\r\n    const size = expanded ? 2 : 1;\r\n    this.prefManager.setMany({ expanded, size });\r\n  }\r\n\r\n  pinResource(part: string): string {\r\n    return pinResources[(`${part}-${this.preferences().pinned}`)];\r\n  }\r\n}\r\n\r\nconst pinResources: Record<string, string> = {\r\n  ['status-true']: 'pinned - will remain visible on reload',\r\n  ['status-false']: 'not pinned - will hide on reload',\r\n  ['icon-true']: 'keep_public',\r\n  ['icon-false']: 'keep_off',\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { ItemInListIdentifier } from '../models/edit-form.model';\r\nimport { webApiEntityRoot } from './entity.service';\r\nimport { HttpServiceBase } from './http-service-base';\r\n\r\n@Injectable()\r\nexport class EntityEditService extends HttpServiceBase {\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.appId, force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\ninterface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\ninterface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n"],"x_google_ignoreList":[7]}