{"version":3,"sources":["./projects/ng-dialogs/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/ng-dialogs/src/app/shared/components/boolean-filter/boolean-filter.component.html","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js","./projects/ng-dialogs/src/app/shared/directives/mousedown-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.helpers.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-resource-url.ts","./projects/ng-dialogs/src/app/shared/components/empty-route/empty-route.component.ts","./projects/ng-dialogs/src/app/shared/components/empty-route/empty-route.component.html","./projects/ng-dialogs/src/app/shared/constants/file-names.constants.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/apps-management/services/apps-list.service.ts","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts","./projects/ng-dialogs/src/app/shared/services/dialog.service.ts","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/badge.js","./projects/ng-dialogs/src/app/content-export/services/content-export.service.ts","./projects/ng-dialogs/src/app/content-items/services/content-items.service.ts","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/card.js","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/content-type-fields/constants/data-type.constants.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts","./projects/ng-dialogs/src/app/shared/constants/guid.constants.ts","./projects/ng-dialogs/src/app/manage-content-list/services/content-group.service.ts","./projects/ng-dialogs/src/app/shared/directives/drag-and-drop.directive.ts","./projects/ng-dialogs/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/ng-dialogs/src/app/shared/translation/translate-configuration.ts","./projects/ng-dialogs/src/app/shared/translation/translate-loader-with-error-handling.ts"],"names":["filter","agInit","params","this","isFilterActive","doesFilterPass","value","valueGetter","node","toString","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","BooleanFilterComponent","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","defaults","_animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","parseInt","markForCheck","monitor","subscribe","focusOrigin","_inputElement","nativeElement","focus","Promise","resolve","then","stopMonitoring","event","stopPropagation","emit","_emitChangeEvent","fn","isDisabled","disabled","options","origin","focusVia","detectChanges","ɵfac","t","ɵcmp","type","selectors","viewQuery","rf","ctx","_t","_thumbEl","first","_thumbBarEl","hostAttrs","hostVars","hostBindings","inputs","disableRipple","color","required","outputs","exportAs","features","ngContentSelectors","decls","vars","consts","template","$event","_onChangeEvent","_onInputClick","_onLabelTextChange","_r0","_r4","inputId","textContent","trim","directives","styles","encapsulation","changeDetection","_MatSlideToggleRequiredValidatorModule","ɵmod","ɵinj","MatSlideToggleModule","imports","onMousedown","MousedownStopPropagationDirective","calculateTypeIcon","typeName","String","Entity","Boolean","Number","Custom","DateTime","Hyperlink","Empty","sanitizer","transform","resourceUrl","bypassSecurityTrustResourceUrl","SafeResourceUrlPipe","EmptyRouteComponent","defaultControllerName","defaultTemplateName","defaultTokenName","onClick","ClickStopPropagationDirective","http","context","dnnContext","apiUrl","$2sxc","getAll","get","zoneId","create","post","delete","appId","flushCache","AppsListService","isError","isShort","toggleIsShort","FieldHintComponent","openCodeFile","path","isShared","dialog","Develop","form","items","Path","hashParams","buildHashParam","JSON","stringify","url","buildFullUrl","window","open","openQueryDesigner","queryId","PipelineDesigner","EntityId","openAppAdministration","tab","scope","extras","App","buildSharedHashParams","tabId","moduleId","contentBlockId","sessionStorage","getItem","key","rawKey","replace","valueTemp","rawValue","encodeURIComponent","oldHref","oldUrl","URL","newHref","pathname","search","allHashParams","Object","entries","reduce","acc","DialogService","nextId","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_ngZone","_ariaDescriber","_renderer","_hasContent","_color","_overlap","position","size","_id","_setColor","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","setAttribute","removeAttribute","_hidden","indexOf","changes","contentChange","currentValue","length","_updateTextContent","description","removeDescription","destroyNode","_stringifyContent","_createBadgeElement","createElement","activeClass","contentClass","_clearExistingBadges","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","content","describe","colorPalette","remove","cssClass","element","childCount","children","currentChild","contains","removeChild","ɵdir","overlap","isAbove","isAfter","hidden","MatBadgeModule","exportContent","values","selectedIds","selectedIdsString","join","language","defaultLanguage","contentTypeStaticName","recordExport","resourcesReferences","languageReferences","exportJson","exportEntity","prefix","metadata","ContentExportService","contentType","getColumns","staticName","importItem","file","pipe","fileBase64","AppId","ContentBase64","ContentItemsService","MatCardContent","MatCardTitle","MatCardActions","align","MatCard","MatCardHeader","MatCardModule","globalConfigService","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","ToggleDebugDirective","DataTypeConstants","html","bypassSecurityTrustHtml","SafeHtmlPipe","guidRegex","getItems","item","webApiContentGroup","guid","part","index","saveItem","entityId","getList","contentGroup","saveList","resortedList","getHeader","ContentGroupService","zone","snackBar","markStyle","allowedFileTypes","filesDropped","dropAreaClass","dragClass","timeouts","subscription","ngOnInit","markStyleClass","preventDefault","clearTimeouts","push","setTimeout","ngOnDestroy","unsubscribe","onDrop","files","Array","from","dataTransfer","filterTypes","clearTimeout","allowedTypes","split","map","toLocaleLowerCase","filtered","extIndex","lastIndexOf","ext","substring","includes","allowedTypesString","duration","DragAndDropDirective","webApiFieldsAll","webApiFieldsRoot","typeListRetrieve","appid","getInputTypesList","inputConfigs","config","dataType","Type","inputType","label","Label","Description","getReservedNames","getFields","StaticName","fields","fld","Metadata","md","allMd","All","typeMd","inputMd","InputType","merged","reOrder","idArray","contentTypeId","Id","order","setTitle","attributeId","rename","fieldId","newName","IsTitle","Error","newField","ContentTypeId","Index","SortOrder","updateInputType","field","ContentTypesFieldsService","buildTranslateConfiguration","loader","useFactory","deps","isolate","suffix","getTranslation","lang","catchError","error","console","warn","of"],"mappings":"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","file":"common.bbedc4937368f734e997.js","sourcesContent":["import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const value: boolean = this.params.valueGetter(params.node);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Whether the slide-toggle is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n        ɵngcc0.ɵɵviewQuery(_c1, 1);\n        ɵngcc0.ɵɵviewQuery(_c2, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatSlideToggleRequiredValidator_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); };\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); };\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appMousedownStopPropagation]' })\r\nexport class MousedownStopPropagationDirective {\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { DataTypeConstants } from './constants/data-type.constants';\r\n\r\nexport function calculateTypeIcon(typeName: string): string {\r\n  switch (typeName) {\r\n    case DataTypeConstants.String:\r\n      return 'text_fields';\r\n    case DataTypeConstants.Entity:\r\n      return 'share';\r\n    case DataTypeConstants.Boolean:\r\n      return 'toggle_on';\r\n    case DataTypeConstants.Number:\r\n      return 'dialpad';\r\n    case DataTypeConstants.Custom:\r\n      return 'extension';\r\n    case DataTypeConstants.DateTime:\r\n      return 'today';\r\n    case DataTypeConstants.Hyperlink:\r\n      return 'link';\r\n    case DataTypeConstants.Empty:\r\n      return 'crop_free';\r\n    default:\r\n      return 'device_unknown';\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeResourceUrl' })\r\nexport class SafeResourceUrlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(resourceUrl: string) {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(resourceUrl);\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-empty-route',\r\n  templateUrl: './empty-route.component.html',\r\n})\r\nexport class EmptyRouteComponent {\r\n  constructor() { }\r\n}\r\n","<router-outlet></router-outlet>\r\n","export const defaultControllerName = 'MyController.cs';\r\nexport const defaultTemplateName = '_MyFile.cshtml';\r\nexport const defaultTokenName = 'MyFile.html';\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { App } from '../models/app.model';\r\n\r\n@Injectable()\r\nexport class AppsListService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  getAll() {\r\n    return this.http.get<App[]>(this.apiUrl(webApiAppRoot + 'list'), {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  create(name: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiAppRoot + 'app'), {}, {\r\n      params: { zoneId: this.context.zoneId.toString(), name }\r\n    });\r\n  }\r\n\r\n  delete(appId: number) {\r\n    return this.http.delete<null>(this.apiUrl(webApiAppRoot + 'app'), {\r\n      params: { zoneId: this.context.zoneId.toString(), appId: appId.toString() },\r\n    });\r\n  }\r\n\r\n  flushCache(appId: number) {\r\n    return this.http.get<null>(this.apiUrl(webApiAppRoot + 'flushcache'), {\r\n      params: { zoneId: this.context.zoneId.toString(), appId: appId.toString() },\r\n    });\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DialogTypeConstants } from '../constants/dialog-type.constants';\r\n// tslint:disable-next-line:max-line-length\r\nimport { keyApi, keyAppId, keyContentBlockId, keyDebug, keyDialog, keyExtras, keyIsShared, keyItems, keyModuleId, keyPartOfPage, keyPipelineId, keyRequestToken, keyTabId, keyUrl, keyZoneId, prefix } from '../constants/session.constants';\r\nimport { DialogHashParams, ExtrasParam } from '../models/dialog-url-params.model';\r\nimport { EditForm } from '../models/edit-form.model';\r\nimport { Context } from './context';\r\n\r\n@Injectable()\r\nexport class DialogService {\r\n  constructor(private context: Context) { }\r\n\r\n  openCodeFile(path: string, isShared = false) {\r\n    const dialog = DialogTypeConstants.Develop;\r\n    const form: EditForm = {\r\n      items: [{ Path: path }]\r\n    };\r\n\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyDialog, dialog),\r\n      ...this.buildHashParam(keyIsShared, isShared.toString()),\r\n      ...this.buildHashParam(keyItems, JSON.stringify(form.items)),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  openQueryDesigner(queryId: number) {\r\n    const dialog = DialogTypeConstants.PipelineDesigner;\r\n    const form: EditForm = {\r\n      items: [{ EntityId: queryId }],\r\n    };\r\n\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyDialog, dialog),\r\n      ...this.buildHashParam(keyPipelineId, queryId.toString()),\r\n      ...this.buildHashParam(keyItems, JSON.stringify(form.items)),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  openAppAdministration(zoneId: number, appId: number, tab?: string, scope?: string) {\r\n    const extras: ExtrasParam = tab && scope ? { tab, scope } : null;\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyZoneId, zoneId.toString()),\r\n      ...this.buildHashParam(keyAppId, appId.toString()),\r\n      ...this.buildHashParam(keyDialog, DialogTypeConstants.App),\r\n      ...(extras ? this.buildHashParam(keyExtras, JSON.stringify(extras)) : ''),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  /** A lot of the link is identical when opening the admin-dialogs in a new window */\r\n  private buildSharedHashParams() {\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyZoneId, this.context.zoneId.toString()),\r\n      ...this.buildHashParam(keyAppId, this.context.appId.toString()),\r\n      ...this.buildHashParam(keyTabId, this.context.tabId.toString()),\r\n      ...this.buildHashParam(keyModuleId, this.context.moduleId.toString()),\r\n      ...this.buildHashParam(keyContentBlockId, this.context.contentBlockId.toString()),\r\n      ...this.buildHashParam(keyPartOfPage),\r\n      ...this.buildHashParam(keyRequestToken),\r\n      ...this.buildHashParam(keyApi),\r\n      ...(sessionStorage.getItem(keyDebug) ? this.buildHashParam(keyDebug) : {}),\r\n    };\r\n    return hashParams;\r\n  }\r\n\r\n  /** Encodes param if necessary */\r\n  private buildHashParam(key: string, value?: string) {\r\n    const rawKey = key.replace(prefix, '');\r\n    const valueTemp = (value != null) ? value : sessionStorage.getItem(key);\r\n    const rawValue = encodeURIComponent(valueTemp);\r\n    const hashParam: DialogHashParams = { [rawKey]: rawValue };\r\n    return hashParam;\r\n  }\r\n\r\n  private buildFullUrl(hashParams: DialogHashParams) {\r\n    const oldHref = sessionStorage.getItem(keyUrl);\r\n    const oldUrl = new URL(oldHref);\r\n    const newHref = oldUrl.origin + oldUrl.pathname + oldUrl.search;\r\n\r\n    const allHashParams: DialogHashParams = {\r\n      ...this.buildSharedHashParams(),\r\n      ...hashParams,\r\n    };\r\n    const hashUrl = Object.entries(allHashParams).reduce((acc, [key, value]) => `${acc}&${key}=${value}`, '').replace('&', '#');\r\n    return newHref + hashUrl;\r\n  }\r\n}\r\n","import { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {\n}\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeMixinBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        /** Whether the badge has any content. */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() { return this._color; }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() { return this._overlap; }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() { return this._description; }\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /** Whether the badge is hidden. */\n    get hidden() { return this._hidden; }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    ngOnChanges(changes) {\n        const contentChange = changes['content'];\n        if (contentChange) {\n            const value = contentChange.currentValue;\n            this._hasContent = value != null && `${value}`.trim().length > 0;\n            this._updateTextContent();\n        }\n    }\n    ngOnDestroy() {\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            if (this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    /** Injects a span element into the DOM with the content. */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this._stringifyContent();\n        }\n        return this._badgeElement;\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this._stringifyContent();\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Sets the aria-label property on the element */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            const classList = this._elementRef.nativeElement.classList;\n            if (this._color) {\n                classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges(cssClass) {\n        const element = this._elementRef.nativeElement;\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n    /** Gets the string representation of the badge content. */\n    _stringifyContent() {\n        // Convert null and undefined to an empty string which is consistent\n        // with how Angular handles them in inside template interpolations.\n        const content = this.content;\n        return content == null ? '' : `${content}`;\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatBadge.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"], content: [\"matBadge\", \"content\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); };\nMatBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            A11yModule,\n            MatCommonModule\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge, MatCommonModule],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n\n//# sourceMappingURL=badge.js.map","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentExport } from '../models/content-export.model';\r\n\r\n@Injectable()\r\nexport class ContentExportService {\r\n  constructor(private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Download')\r\n      + '?appId=' + this.context.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiTypeRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"*\", [[\"mat-card-footer\"]]];\nconst _c1 = [\"*\", \"mat-card-footer\"];\nconst _c2 = [[[\"\", \"mat-card-avatar\", \"\"], [\"\", \"matCardAvatar\", \"\"]], [[\"mat-card-title\"], [\"mat-card-subtitle\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardTitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], \"*\"];\nconst _c3 = [\"[mat-card-avatar], [matCardAvatar]\", \"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\", \"*\"];\nconst _c4 = [[[\"mat-card-title\"], [\"mat-card-subtitle\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardTitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], [[\"img\"]], \"*\"];\nconst _c5 = [\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\", \"img\", \"*\"];\nclass MatCardContent {\n}\nMatCardContent.ɵfac = function MatCardContent_Factory(t) { return new (t || MatCardContent)(); };\nMatCardContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardContent, selectors: [[\"mat-card-content\"], [\"\", \"mat-card-content\", \"\"], [\"\", \"matCardContent\", \"\"]], hostAttrs: [1, \"mat-card-content\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardContent, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-card-content, [mat-card-content], [matCardContent]',\n                host: { 'class': 'mat-card-content' }\n            }]\n    }], null, null); })();\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardTitle {\n}\nMatCardTitle.ɵfac = function MatCardTitle_Factory(t) { return new (t || MatCardTitle)(); };\nMatCardTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardTitle, selectors: [[\"mat-card-title\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"matCardTitle\", \"\"]], hostAttrs: [1, \"mat-card-title\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardTitle, [{\n        type: Directive,\n        args: [{\n                selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                host: {\n                    'class': 'mat-card-title'\n                }\n            }]\n    }], null, null); })();\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardSubtitle {\n}\nMatCardSubtitle.ɵfac = function MatCardSubtitle_Factory(t) { return new (t || MatCardSubtitle)(); };\nMatCardSubtitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardSubtitle, selectors: [[\"mat-card-subtitle\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], hostAttrs: [1, \"mat-card-subtitle\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardSubtitle, [{\n        type: Directive,\n        args: [{\n                selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                host: {\n                    'class': 'mat-card-subtitle'\n                }\n            }]\n    }], null, null); })();\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardActions {\n    constructor() {\n        /** Position of the actions inside the card. */\n        this.align = 'start';\n    }\n}\nMatCardActions.ɵfac = function MatCardActions_Factory(t) { return new (t || MatCardActions)(); };\nMatCardActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardActions, selectors: [[\"mat-card-actions\"]], hostAttrs: [1, \"mat-card-actions\"], hostVars: 2, hostBindings: function MatCardActions_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-card-actions-align-end\", ctx.align === \"end\");\n    } }, inputs: { align: \"align\" }, exportAs: [\"matCardActions\"] });\nMatCardActions.propDecorators = {\n    align: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardActions, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-card-actions',\n                exportAs: 'matCardActions',\n                host: {\n                    'class': 'mat-card-actions',\n                    '[class.mat-card-actions-align-end]': 'align === \"end\"'\n                }\n            }]\n    }], function () { return []; }, { align: [{\n            type: Input\n        }] }); })();\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nclass MatCardFooter {\n}\nMatCardFooter.ɵfac = function MatCardFooter_Factory(t) { return new (t || MatCardFooter)(); };\nMatCardFooter.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardFooter, selectors: [[\"mat-card-footer\"]], hostAttrs: [1, \"mat-card-footer\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardFooter, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-card-footer',\n                host: { 'class': 'mat-card-footer' }\n            }]\n    }], null, null); })();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardImage {\n}\nMatCardImage.ɵfac = function MatCardImage_Factory(t) { return new (t || MatCardImage)(); };\nMatCardImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardImage, selectors: [[\"\", \"mat-card-image\", \"\"], [\"\", \"matCardImage\", \"\"]], hostAttrs: [1, \"mat-card-image\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-image], [matCardImage]',\n                host: { 'class': 'mat-card-image' }\n            }]\n    }], null, null); })();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardSmImage {\n}\nMatCardSmImage.ɵfac = function MatCardSmImage_Factory(t) { return new (t || MatCardSmImage)(); };\nMatCardSmImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardSmImage, selectors: [[\"\", \"mat-card-sm-image\", \"\"], [\"\", \"matCardImageSmall\", \"\"]], hostAttrs: [1, \"mat-card-sm-image\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardSmImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-sm-image], [matCardImageSmall]',\n                host: { 'class': 'mat-card-sm-image' }\n            }]\n    }], null, null); })();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardMdImage {\n}\nMatCardMdImage.ɵfac = function MatCardMdImage_Factory(t) { return new (t || MatCardMdImage)(); };\nMatCardMdImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardMdImage, selectors: [[\"\", \"mat-card-md-image\", \"\"], [\"\", \"matCardImageMedium\", \"\"]], hostAttrs: [1, \"mat-card-md-image\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardMdImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-md-image], [matCardImageMedium]',\n                host: { 'class': 'mat-card-md-image' }\n            }]\n    }], null, null); })();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardLgImage {\n}\nMatCardLgImage.ɵfac = function MatCardLgImage_Factory(t) { return new (t || MatCardLgImage)(); };\nMatCardLgImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardLgImage, selectors: [[\"\", \"mat-card-lg-image\", \"\"], [\"\", \"matCardImageLarge\", \"\"]], hostAttrs: [1, \"mat-card-lg-image\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardLgImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-lg-image], [matCardImageLarge]',\n                host: { 'class': 'mat-card-lg-image' }\n            }]\n    }], null, null); })();\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardXlImage {\n}\nMatCardXlImage.ɵfac = function MatCardXlImage_Factory(t) { return new (t || MatCardXlImage)(); };\nMatCardXlImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardXlImage, selectors: [[\"\", \"mat-card-xl-image\", \"\"], [\"\", \"matCardImageXLarge\", \"\"]], hostAttrs: [1, \"mat-card-xl-image\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardXlImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                host: { 'class': 'mat-card-xl-image' }\n            }]\n    }], null, null); })();\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nclass MatCardAvatar {\n}\nMatCardAvatar.ɵfac = function MatCardAvatar_Factory(t) { return new (t || MatCardAvatar)(); };\nMatCardAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardAvatar, selectors: [[\"\", \"mat-card-avatar\", \"\"], [\"\", \"matCardAvatar\", \"\"]], hostAttrs: [1, \"mat-card-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardAvatar, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-avatar], [matCardAvatar]',\n                host: { 'class': 'mat-card-avatar' }\n            }]\n    }], null, null); })();\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nclass MatCard {\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n    }\n}\nMatCard.ɵfac = function MatCard_Factory(t) { return new (t || MatCard)(ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatCard.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCard, selectors: [[\"mat-card\"]], hostAttrs: [1, \"mat-card\", \"mat-focus-indicator\"], hostVars: 2, hostBindings: function MatCard_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, exportAs: [\"matCard\"], ngContentSelectors: _c1, decls: 2, vars: 0, template: function MatCard_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n    } }, styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions:not(.mat-card-actions-align-end) .mat-button:first-child,.mat-card-actions:not(.mat-card-actions-align-end) .mat-raised-button:first-child,.mat-card-actions:not(.mat-card-actions-align-end) .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-actions-align-end .mat-button:last-child,.mat-card-actions-align-end .mat-raised-button:last-child,.mat-card-actions-align-end .mat-stroked-button:last-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatCard.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCard, [{\n        type: Component,\n        args: [{\n                selector: 'mat-card',\n                exportAs: 'matCard',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-card mat-focus-indicator',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions:not(.mat-card-actions-align-end) .mat-button:first-child,.mat-card-actions:not(.mat-card-actions-align-end) .mat-raised-button:first-child,.mat-card-actions:not(.mat-card-actions-align-end) .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-actions-align-end .mat-button:last-child,.mat-card-actions-align-end .mat-raised-button:last-child,.mat-card-actions-align-end .mat-stroked-button:last-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"]\n            }]\n    }], function () { return [{ type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, null); })();\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\nclass MatCardHeader {\n}\nMatCardHeader.ɵfac = function MatCardHeader_Factory(t) { return new (t || MatCardHeader)(); };\nMatCardHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCardHeader, selectors: [[\"mat-card-header\"]], hostAttrs: [1, \"mat-card-header\"], ngContentSelectors: _c3, decls: 4, vars: 0, consts: [[1, \"mat-card-header-text\"]], template: function MatCardHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-card-header',\n                template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-header' }\n            }]\n    }], null, null); })();\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\nclass MatCardTitleGroup {\n}\nMatCardTitleGroup.ɵfac = function MatCardTitleGroup_Factory(t) { return new (t || MatCardTitleGroup)(); };\nMatCardTitleGroup.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCardTitleGroup, selectors: [[\"mat-card-title-group\"]], hostAttrs: [1, \"mat-card-title-group\"], ngContentSelectors: _c5, decls: 4, vars: 0, template: function MatCardTitleGroup_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c4);\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardTitleGroup, [{\n        type: Component,\n        args: [{\n                selector: 'mat-card-title-group',\n                template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-title-group' }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatCardModule {\n}\nMatCardModule.ɵfac = function MatCardModule_Factory(t) { return new (t || MatCardModule)(); };\nMatCardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatCardModule });\nMatCardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCardModule, { declarations: function () { return [MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage, MatCardXlImage, MatCardAvatar]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage, MatCardXlImage, MatCardAvatar, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCardModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [\n                    MatCard,\n                    MatCardHeader,\n                    MatCardTitleGroup,\n                    MatCardContent,\n                    MatCardTitle,\n                    MatCardSubtitle,\n                    MatCardActions,\n                    MatCardFooter,\n                    MatCardSmImage,\n                    MatCardMdImage,\n                    MatCardLgImage,\n                    MatCardImage,\n                    MatCardXlImage,\n                    MatCardAvatar,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n                    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n                    MatCardXlImage, MatCardAvatar,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n\n//# sourceMappingURL=card.js.map","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","export const DataTypeConstants = {\r\n  String: 'String',\r\n  Entity: 'Entity',\r\n  Boolean: 'Boolean',\r\n  Number: 'Number',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Hyperlink: 'Hyperlink',\r\n  Empty: 'Empty',\r\n} as const;\r\n\r\nexport type DataTypeConstant = typeof DataTypeConstants[keyof typeof DataTypeConstants];\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","/**\r\n * Do not reuse regex:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#using_test_on_a_regex_with_the_global_flag\r\n */\r\nexport function guidRegex(): RegExp {\r\n  return /[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}/i;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ReplaceConfig } from '../../replace-content/models/replace-config.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentGroup, ContentGroupAdd } from '../models/content-group.model';\r\nimport { GroupHeader } from '../models/group-header.model';\r\n\r\nconst webApiContentGroup = 'cms/contentgroup/';\r\n\r\n@Injectable()\r\nexport class ContentGroupService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getItems(item: ContentGroup) {\r\n    return this.http.get<ReplaceConfig>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'replace'), {\r\n      params: { appId: this.context.appId.toString(), guid: item.guid, part: item.part, index: item.index.toString() }\r\n    });\r\n  }\r\n\r\n  saveItem(item: ContentGroupAdd) {\r\n    return this.http.post<null>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'replace'), {}, {\r\n      params: { guid: item.guid, part: item.part, index: item.index.toString(), entityId: item.id.toString(), add: `${item.add}` }\r\n    });\r\n  }\r\n\r\n  getList(contentGroup: ContentGroup) {\r\n    return this.http.get<GroupHeader[]>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'itemlist'), {\r\n      params: { appId: this.context.appId.toString(), guid: contentGroup.guid, part: contentGroup.part }\r\n    });\r\n  }\r\n\r\n  saveList(contentGroup: ContentGroup, resortedList: GroupHeader[]) {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'itemlist'), resortedList, {\r\n      params: { appId: this.context.appId.toString(), guid: contentGroup.guid, part: contentGroup.part }\r\n    });\r\n  }\r\n\r\n  getHeader(contentGroup: ContentGroup) {\r\n    return this.http.get<GroupHeader>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'header'), {\r\n      params: { appId: this.context.appId.toString(), guid: contentGroup.guid }\r\n    });\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\n\r\n@Directive({ selector: '[appDragAndDrop]' })\r\nexport class DragAndDropDirective implements OnInit, OnDestroy {\r\n  @Input() private markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() private allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n  private subscription = new Subscription();\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent(this.element, 'dragover').subscribe((event: DragEvent) => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent(this.element, 'dragleave').subscribe((event: DragEvent) => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  getFields(contentType: ContentType) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader) {\r\n  return {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}