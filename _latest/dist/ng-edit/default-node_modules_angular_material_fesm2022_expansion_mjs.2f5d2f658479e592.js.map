{"version":3,"file":"default-node_modules_angular_material_fesm2022_expansion_mjs.2f5d2f658479e592.js","mappings":"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","names":["nextId$1","CDK_ACCORDION","InjectionToken","CdkAccordion","_class","constructor","this","_stateChanges","Subject","_openCloseAllActions","id","_multi","multi","coerceBooleanProperty","openAll","next","closeAll","ngOnChanges","changes","ngOnDestroy","complete","ɵfac","t","ɵdir","i0","type","selectors","inputs","exportAs","features","provide","useExisting","nextId","CdkAccordionItem","_class2","expanded","_expanded","expandedChange","emit","opened","_expansionDispatcher","notify","accordion","closed","_changeDetectorRef","markForCheck","disabled","_disabled","_openCloseAllSubscription","Subscription","EMPTY","EventEmitter","destroyed","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","unsubscribe","toggle","close","open","subscribe","i1","outputs","useValue","undefined","CdkAccordionModule","_class3","ɵmod","ɵinj","_c0","_class2_ng_template_5_Template","rf","ctx","_c1","_c2","_class4_span_4_Template","ctx_r0","_getExpandedState","_c3","_c4","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","trigger","state","style","transform","transition","animate","bodyExpansion","height","visibility","MAT_EXPANSION_PANEL","MatExpansionPanelContent","_template","_expansionPanel","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","hideToggle","_hideToggle","value","togglePosition","_togglePosition","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","super","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","distinctUntilChanged","x","y","fromState","toState","event","_hasSpacing","displayMode","ngAfterContentInit","_lazyContent","startWith","filter","_portal","take","TemplatePortal","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","DOCUMENT","ANIMATION_MODULE_TYPE","ɵcmp","contentQueries","dirIndex","_t","first","viewQuery","hostAttrs","hostVars","hostBindings","ngContentSelectors","decls","vars","consts","template","$event","dependencies","i2","styles","encapsulation","data","animation","changeDetection","MatExpansionPanelHeaderBase","_MatExpansionPanelHeaderMixinBase","mixinTabIndex","MatExpansionPanelHeader","_class4","panel","_element","_focusMonitor","tabIndex","_parentChangeSubscription","accordionHideToggleChange","parseInt","merge","focusVia","expandedHeight","collapsedHeight","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","origin","options","ngAfterViewInit","monitor","_handleHeaderFocus","stopMonitoring","i2$1","i3","MatExpansionPanelDescription","_class5","MatExpansionPanelTitle","_class6","MatAccordion","_class7","arguments","_ownHeaders","QueryList","show","_headers","headers","reset","header","notifyOnChanges","_keyManager","FocusKeyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","ɵ_class7_BaseFactory","MatExpansionModule","_class8","imports","CommonModule","MatCommonModule","PortalModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/accordion.mjs","./node_modules/@angular/material/fesm2022/expansion.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Input, EventEmitter, Optional, Inject, SkipSelf, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_ACCORDION = new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /** Emits when the state of the accordion changes */\n        this._stateChanges = new Subject();\n        /** Stream that emits true/false when openAll/closeAll is triggered. */\n        this._openCloseAllActions = new Subject();\n        /** A readonly id value to use for unique selection coordination. */\n        this.id = `cdk-accordion-${nextId$1++}`;\n        this._multi = false;\n    }\n    /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n    get multi() {\n        return this._multi;\n    }\n    set multi(multi) {\n        this._multi = coerceBooleanProperty(multi);\n    }\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    openAll() {\n        if (this._multi) {\n            this._openCloseAllActions.next(true);\n        }\n    }\n    /** Closes all enabled accordion items. */\n    closeAll() {\n        this._openCloseAllActions.next(false);\n    }\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._openCloseAllActions.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkAccordion, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkAccordion, selector: \"cdk-accordion, [cdkAccordion]\", inputs: { multi: \"multi\" }, providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }], exportAs: [\"cdkAccordion\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion, [cdkAccordion]',\n                    exportAs: 'cdkAccordion',\n                    providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }],\n                }]\n        }], propDecorators: { multi: [{\n                type: Input\n            }] } });\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    /** Whether the AccordionItem is expanded. */\n    get expanded() {\n        return this._expanded;\n    }\n    set expanded(expanded) {\n        expanded = coerceBooleanProperty(expanded);\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the AccordionItem is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(disabled) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /** Subscription to openAll/closeAll events. */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /** Event emitted every time the AccordionItem is closed. */\n        this.closed = new EventEmitter();\n        /** Event emitted every time the AccordionItem is opened. */\n        this.opened = new EventEmitter();\n        /** Event emitted when the AccordionItem is destroyed. */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * @docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /** The unique AccordionItem id. */\n        this.id = `cdk-accordion-child-${nextId++}`;\n        this._expanded = false;\n        this._disabled = false;\n        /** Unregister function for _expansionDispatcher. */\n        this._removeUniqueSelectionListener = () => { };\n        this._removeUniqueSelectionListener = _expansionDispatcher.listen((id, accordionId) => {\n            if (this.accordion &&\n                !this.accordion.multi &&\n                this.accordion.id === accordionId &&\n                this.id !== id) {\n                this.expanded = false;\n            }\n        });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /** Toggles the expanded state of the accordion item. */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /** Sets the expanded state of the accordion item to false. */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /** Sets the expanded state of the accordion item to true. */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkAccordionItem, deps: [{ token: CDK_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkAccordionItem, selector: \"cdk-accordion-item, [cdkAccordionItem]\", inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, providers: [\n            // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n            // registering to the same accordion.\n            { provide: CDK_ACCORDION, useValue: undefined },\n        ], exportAs: [\"cdkAccordionItem\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkAccordionItem, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                    exportAs: 'cdkAccordionItem',\n                    providers: [\n                        // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n                        // registering to the same accordion.\n                        { provide: CDK_ACCORDION, useValue: undefined },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: CdkAccordion, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_ACCORDION]\n                }, {\n                    type: SkipSelf\n                }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }]; }, propDecorators: { closed: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], destroyed: [{\n                type: Output\n            }], expandedChange: [{\n                type: Output\n            }], expanded: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\n\nclass CdkAccordionModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkAccordionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkAccordionModule, declarations: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkAccordionModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkAccordionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkAccordion, CdkAccordionItem],\n                    declarations: [CdkAccordion, CdkAccordionItem],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n","import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport * as i2 from '@angular/cdk/portal';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, SkipSelf, Input, Output, ContentChild, ViewChild, Host, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/collections';\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        // Clear the `visibility` while open, otherwise the content will be visible when placed in\n        // a parent that's `visibility: hidden`, because `visibility` doesn't apply to descendants\n        // that have a `visibility` of their own (see #27436).\n        state('expanded', style({ height: '*', visibility: '' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n};\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nconst MAT_EXPANSION_PANEL = new InjectionToken('MAT_EXPANSION_PANEL');\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    constructor(_template, _expansionPanel) {\n        this._template = _template;\n        this._expansionPanel = _expansionPanel;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionPanelContent, deps: [{ token: i0.TemplateRef }, { token: MAT_EXPANSION_PANEL, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatExpansionPanelContent, selector: \"ng-template[matExpansionPanelContent]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionPanelContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matExpansionPanelContent]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /** The position of the expansion indicator. */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /** An event emitted after the body's expansion animation happens. */\n        this.afterExpand = new EventEmitter();\n        /** An event emitted after the body's collapse animation happens. */\n        this.afterCollapse = new EventEmitter();\n        /** Stream that emits for changes in `@Input` properties. */\n        this._inputChanges = new Subject();\n        /** ID for the associated header element. Used for a11y labelling. */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /** Stream of body animation done events. */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe(event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /** Gets the expanded state string. */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n    close() {\n        this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n    open() {\n        this.expanded = true;\n    }\n    ngAfterContentInit() {\n        if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n            // Render the content as soon as the panel becomes open.\n            this.opened\n                .pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1))\n                .subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus() {\n        if (this._body) {\n            const focusedElement = this._document.activeElement;\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionPanel, deps: [{ token: MAT_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, host: { properties: { \"class.mat-expanded\": \"expanded\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"class.mat-expansion-panel-spacing\": \"_hasSpacing()\" }, classAttribute: \"mat-expansion-panel\" }, providers: [\n            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n            // to the same accordion.\n            { provide: MAT_ACCORDION, useValue: undefined },\n            { provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel },\n        ], queries: [{ propertyName: \"_lazyContent\", first: true, predicate: MatExpansionPanelContent, descendants: true }], viewQueries: [{ propertyName: \"_body\", first: true, predicate: [\"body\"], descendants: true }], exportAs: [\"matExpansionPanel\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{--mat-expansion-container-shape:4px;box-sizing:content-box;display:block;margin:0;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative;background:var(--mat-expansion-container-background-color);color:var(--mat-expansion-container-text-color);border-radius:var(--mat-expansion-container-shape)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:var(--mat-expansion-container-shape);border-top-left-radius:var(--mat-expansion-container-shape)}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:var(--mat-expansion-container-shape);border-bottom-left-radius:var(--mat-expansion-container-shape)}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible;font-family:var(--mat-expansion-container-text-font);font-size:var(--mat-expansion-container-text-size);font-weight:var(--mat-expansion-container-text-weight);line-height:var(--mat-expansion-container-text-line-height);letter-spacing:var(--mat-expansion-container-text-tracking)}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px;border-top-color:var(--mat-expansion-actions-divider-color)}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: i2.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionPanel, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel', exportAs: 'matExpansionPanel', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled', 'expanded'], outputs: ['opened', 'closed', 'expandedChange'], animations: [matExpansionAnimations.bodyExpansion], providers: [\n                        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                        // to the same accordion.\n                        { provide: MAT_ACCORDION, useValue: undefined },\n                        { provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel },\n                    ], host: {\n                        'class': 'mat-expansion-panel',\n                        '[class.mat-expanded]': 'expanded',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                    }, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{--mat-expansion-container-shape:4px;box-sizing:content-box;display:block;margin:0;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative;background:var(--mat-expansion-container-background-color);color:var(--mat-expansion-container-text-color);border-radius:var(--mat-expansion-container-shape)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:var(--mat-expansion-container-shape);border-top-left-radius:var(--mat-expansion-container-shape)}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:var(--mat-expansion-container-shape);border-bottom-left-radius:var(--mat-expansion-container-shape)}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible;font-family:var(--mat-expansion-container-text-font);font-size:var(--mat-expansion-container-text-size);font-weight:var(--mat-expansion-container-text-weight);line-height:var(--mat-expansion-container-text-line-height);letter-spacing:var(--mat-expansion-container-text-tracking)}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px;border-top-color:var(--mat-expansion-actions-divider-color)}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [MAT_ACCORDION]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                }, {\n                    type: Optional\n                }] }]; }, propDecorators: { hideToggle: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }], afterExpand: [{\n                type: Output\n            }], afterCollapse: [{\n                type: Output\n            }], _lazyContent: [{\n                type: ContentChild,\n                args: [MatExpansionPanelContent]\n            }], _body: [{\n                type: ViewChild,\n                args: ['body']\n            }] } });\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionPanelActionRow, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatExpansionPanelActionRow, selector: \"mat-action-row\", host: { classAttribute: \"mat-action-row\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionPanelActionRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-action-row',\n                    host: {\n                        class: 'mat-action-row',\n                    },\n                }]\n        }] });\n\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nclass MatExpansionPanelHeaderBase {\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase {\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n        super();\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        const accordionHideToggleChange = panel.accordion\n            ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])))\n            : EMPTY;\n        this.tabIndex = parseInt(tabIndex || '') || 0;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n            return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }))).subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /** Gets whether the panel is expanded. */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n    _getHeaderHeight() {\n        const isExpanded = this._isExpanded();\n        if (isExpanded && this.expandedHeight) {\n            return this.expandedHeight;\n        }\n        else if (!isExpanded && this.collapsedHeight) {\n            return this.collapsedHeight;\n        }\n        return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\n            if (origin && this.panel.accordion) {\n                this.panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionPanelHeader, deps: [{ token: MatExpansionPanel, host: true }, { token: i0.ElementRef }, { token: i2$1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: { tabIndex: \"tabIndex\", expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, host: { attributes: { \"role\": \"button\" }, listeners: { \"click\": \"_toggle()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.id\": \"panel._headerId\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"_getPanelId()\", \"attr.aria-expanded\": \"_isExpanded()\", \"attr.aria-disabled\": \"panel.disabled\", \"class.mat-expanded\": \"_isExpanded()\", \"class.mat-expansion-toggle-indicator-after\": \"_getTogglePosition() === 'after'\", \"class.mat-expansion-toggle-indicator-before\": \"_getTogglePosition() === 'before'\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"style.height\": \"_getHeaderHeight()\" }, classAttribute: \"mat-expansion-panel-header mat-focus-indicator\" }, usesInheritance: true, ngImport: i0, template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1);height:var(--mat-expansion-header-collapsed-state-height);font-family:var(--mat-expansion-header-text-font);font-size:var(--mat-expansion-header-text-size);font-weight:var(--mat-expansion-header-text-weight);line-height:var(--mat-expansion-header-text-line-height);letter-spacing:var(--mat-expansion-header-text-tracking)}.mat-expansion-panel-header.mat-expanded{height:var(--mat-expansion-header-expanded-state-height)}.mat-expansion-panel-header[aria-disabled=true]{color:var(--mat-expansion-header-disabled-state-text-color)}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-header-hover-state-layer-color)}@media(hover: none){.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-container-background-color)}}.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused{background:var(--mat-expansion-header-focus-state-layer-color)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title{color:var(--mat-expansion-header-text-color)}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-title,.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-description{color:inherit}.mat-expansion-panel-header-description{flex-grow:2;color:var(--mat-expansion-header-description-color)}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle;color:var(--mat-expansion-header-indicator-color)}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [matExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionPanelHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['tabIndex'], animations: [matExpansionAnimations.indicatorRotate], host: {\n                        'class': 'mat-expansion-panel-header mat-focus-indicator',\n                        'role': 'button',\n                        '[attr.id]': 'panel._headerId',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': '_getPanelId()',\n                        '[attr.aria-expanded]': '_isExpanded()',\n                        '[attr.aria-disabled]': 'panel.disabled',\n                        '[class.mat-expanded]': '_isExpanded()',\n                        '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                        '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[style.height]': '_getHeaderHeight()',\n                        '(click)': '_toggle()',\n                        '(keydown)': '_keydown($event)',\n                    }, template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1);height:var(--mat-expansion-header-collapsed-state-height);font-family:var(--mat-expansion-header-text-font);font-size:var(--mat-expansion-header-text-size);font-weight:var(--mat-expansion-header-text-weight);line-height:var(--mat-expansion-header-text-line-height);letter-spacing:var(--mat-expansion-header-text-tracking)}.mat-expansion-panel-header.mat-expanded{height:var(--mat-expansion-header-expanded-state-height)}.mat-expansion-panel-header[aria-disabled=true]{color:var(--mat-expansion-header-disabled-state-text-color)}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-header-hover-state-layer-color)}@media(hover: none){.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-container-background-color)}}.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused{background:var(--mat-expansion-header-focus-state-layer-color)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title{color:var(--mat-expansion-header-text-color)}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-title,.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-description{color:inherit}.mat-expansion-panel-header-description{flex-grow:2;color:var(--mat-expansion-header-description-color)}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle;color:var(--mat-expansion-header-indicator-color)}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\"] }]\n        }], ctorParameters: function () { return [{ type: MatExpansionPanel, decorators: [{\n                    type: Host\n                }] }, { type: i0.ElementRef }, { type: i2$1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }]; }, propDecorators: { expandedHeight: [{\n                type: Input\n            }], collapsedHeight: [{\n                type: Input\n            }] } });\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionPanelDescription, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatExpansionPanelDescription, selector: \"mat-panel-description\", host: { classAttribute: \"mat-expansion-panel-header-description\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionPanelDescription, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-description',\n                    host: {\n                        class: 'mat-expansion-panel-header-description',\n                    },\n                }]\n        }] });\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionPanelTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatExpansionPanelTitle, selector: \"mat-panel-title\", host: { classAttribute: \"mat-expansion-panel-header-title\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionPanelTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-title',\n                    host: {\n                        class: 'mat-expansion-panel-header-title',\n                    },\n                }]\n        }] });\n\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        /** Headers belonging to this accordion. */\n        this._ownHeaders = new QueryList();\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /** The position of the expansion indicator. */\n        this.togglePosition = 'after';\n    }\n    /** Whether the expansion indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle;\n    }\n    set hideToggle(show) {\n        this._hideToggle = coerceBooleanProperty(show);\n    }\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((headers) => {\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n            this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event) {\n        this._keyManager.onKeydown(event);\n    }\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._keyManager?.destroy();\n        this._ownHeaders.destroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAccordion, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatAccordion, selector: \"mat-accordion\", inputs: { multi: \"multi\", hideToggle: \"hideToggle\", displayMode: \"displayMode\", togglePosition: \"togglePosition\" }, host: { properties: { \"class.mat-accordion-multi\": \"this.multi\" }, classAttribute: \"mat-accordion\" }, providers: [\n            {\n                provide: MAT_ACCORDION,\n                useExisting: MatAccordion,\n            },\n        ], queries: [{ propertyName: \"_headers\", predicate: MatExpansionPanelHeader, descendants: true }], exportAs: [\"matAccordion\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-accordion',\n                    exportAs: 'matAccordion',\n                    inputs: ['multi'],\n                    providers: [\n                        {\n                            provide: MAT_ACCORDION,\n                            useExisting: MatAccordion,\n                        },\n                    ],\n                    host: {\n                        class: 'mat-accordion',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if multiple panel support is enabled.\n                        '[class.mat-accordion-multi]': 'this.multi',\n                    },\n                }]\n        }], propDecorators: { _headers: [{\n                type: ContentChildren,\n                args: [MatExpansionPanelHeader, { descendants: true }]\n            }], hideToggle: [{\n                type: Input\n            }], displayMode: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }] } });\n\nclass MatExpansionModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionModule, declarations: [MatAccordion,\n            MatExpansionPanel,\n            MatExpansionPanelActionRow,\n            MatExpansionPanelHeader,\n            MatExpansionPanelTitle,\n            MatExpansionPanelDescription,\n            MatExpansionPanelContent], imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule], exports: [MatAccordion,\n            MatExpansionPanel,\n            MatExpansionPanelActionRow,\n            MatExpansionPanelHeader,\n            MatExpansionPanelTitle,\n            MatExpansionPanelDescription,\n            MatExpansionPanelContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionModule, imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatExpansionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n                    exports: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                    declarations: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };\n"],"x_google_ignoreList":[0,1]}