{"version":3,"sources":["C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@angular/material/__ivy_ngcc__/fesm2015/menu.js"],"names":["_c0","_c1","_MatMenu_ng_template_0_Template","rf","ctx","_r2","$event","_handleKeydown","closed","emit","_onAnimationStart","_onAnimationDone","ctx_r0","panelId","_classList","_panelAnimationState","ariaLabel","ariaLabelledby","ariaDescribedby","matMenuAnimations","transformMenu","opacity","transform","fadeInItems","MAT_MENU_CONTENT","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_elementRef","document","_focusMonitor","_parentMenu","role","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","_document","origin","options","this","focusVia","_getHostElement","focus","next","monitor","stopMonitoring","removeItem","complete","disabled","nativeElement","event","preventDefault","stopPropagation","element","textNodeType","TEXT_NODE","output","childNodes","length","i","nodeType","textContent","trim","ɵfac","t","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","_checkDisabled","_handleMouseEnter","_getTabIndex","toString","inputs","disableRipple","exportAs","features","attrs","ngContentSelectors","decls","vars","consts","template","directives","encapsulation","changeDetection","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","overlapTrigger","xPosition","yPosition","backdropClass","menuPanelUid","_MatMenuBase","_ngZone","_defaultOptions","_xPosition","_yPosition","_directDescendantItems","_tabSubscription","EMPTY","_animationDone","overlayPanelClass","_overlapTrigger","_hasBackdrop","hasBackdrop","close","setPositionClasses","_updateDirectDescendants","_keyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","changes","pipe","items","map","item","focusedItem","updateActiveItem","destroy","unsubscribe","_item","keyCode","manager","parentMenu","direction","setFocusOrigin","onKeydown","lazyContent","onStable","_focusFirstItem","setFirstItemActive","activeItem","first","parentElement","getAttribute","setActiveItem","depth","elevation","Math","min","newElevation","customElevation","Object","keys","find","c","startsWith","_previousElevation","posX","posY","classes","_isAnimating","toState","activeItemIndex","scrollTop","_allItems","reset","filter","notifyOnChanges","value","previousPanelClass","_previousPanelClass","split","forEach","className","panelClass","ɵdir","contentQueries","dirIndex","_t","viewQuery","templateRef","classList","outputs","MatMenu","ɵMatMenu_BaseFactory","_MatMenu","elementRef","ngZone","defaultOptions","provide","useExisting","styles","data","animation","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","overlay","scrollStrategies","reposition","passiveEventListenerOptions","passive","MatMenuTrigger","_overlay","_element","_viewContainerRef","scrollStrategy","_menuItemInstance","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","addEventListener","triggersSubmenu","_scrollStrategy","_checkMenu","_handleHover","dispose","removeEventListener","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","_setPosition","positionStrategy","menu","attach","_getPortal","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","detach","_restoreFocus","_resetAnimation","_attached","_setIsMenuOpen","undefined","dir","_setMenuElevation","focusFirstItem","setElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","position","flexibleConnectedTo","withLockedPosition","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","button","toggleMenu","_portal","v","_menu","reason","_destroyMenu","_handleMousedown","_handleClick","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","ɵmod","ɵinj","providers","imports","MatMenuModule"],"mappings":"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","file":"default~app-administration-app-administration-module~apps-management-apps-management-module~content-~688b9b68.a4275576f6a79a69b237.js","sourcesContent":["import { FocusMonitor, FocusKeyManager, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, ChangeDetectorRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Input, HostListener, QueryList, EventEmitter, NgZone, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, group, query, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\n\nconst _c0 = [\"mat-menu-item\", \"\"];\nconst _c1 = [\"*\"];\nfunction _MatMenu_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n    ɵngcc0.ɵɵlistener(\"keydown\", function _MatMenu_ng_template_0_Template_div_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1._handleKeydown($event); })(\"click\", function _MatMenu_ng_template_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.closed.emit(\"click\"); })(\"@transformMenu.start\", function _MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4._onAnimationStart($event); })(\"@transformMenu.done\", function _MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5._onAnimationDone($event); });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n} }\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n                opacity: 1\n            }))),\n            animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),\n        ])),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\nMatMenuContent.ɵfac = function MatMenuContent_Factory(t) { return new (t || MatMenuContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatMenuContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatMenuContent, selectors: [[\"ng-template\", \"matMenuContent\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }])] });\nMatMenuContent.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationRef },\n    { type: Injector },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: ChangeDetectorRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatMenuContent, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matMenuContent]',\n                providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.Injector }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nfunction throwMatMenuMissingError() {\n    throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {\n}\nconst _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemMixinBase {\n    constructor(_elementRef, document, _focusMonitor, _parentMenu) {\n        // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n        super();\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        if (_parentMenu && _parentMenu.addItem) {\n            _parentMenu.addItem(this);\n        }\n        this._document = document;\n    }\n    /** Focuses the menu item. */\n    focus(origin = 'program', options) {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const element = this._elementRef.nativeElement;\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        let output = '';\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n        return output.trim();\n    }\n}\nMatMenuItem.ɵfac = function MatMenuItem_Factory(t) { return new (t || MatMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8)); };\nMatMenuItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatMenuItem, selectors: [[\"\", \"mat-menu-item\", \"\"]], hostAttrs: [1, \"mat-focus-indicator\"], hostVars: 10, hostBindings: function MatMenuItem_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) { return ctx._checkDisabled($event); })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() { return ctx._handleMouseEnter(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵclassProp(\"mat-menu-item\", true)(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, exportAs: [\"matMenuItem\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 2, vars: 2, consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"]], template: function MatMenuItem_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelement(1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n    } }, directives: [ɵngcc2.MatRipple], encapsulation: 2, changeDetection: 0 });\nMatMenuItem.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_PANEL,] }, { type: Optional }] }\n];\nMatMenuItem.propDecorators = {\n    role: [{ type: Input }],\n    _checkDisabled: [{ type: HostListener, args: ['click', ['$event'],] }],\n    _handleMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatMenuItem, [{\n        type: Component,\n        args: [{\n                selector: '[mat-menu-item]',\n                exportAs: 'matMenuItem',\n                inputs: ['disabled', 'disableRipple'],\n                host: {\n                    '[attr.role]': 'role',\n                    '[class.mat-menu-item]': 'true',\n                    '[class.mat-menu-item-highlighted]': '_highlighted',\n                    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.disabled]': 'disabled || null',\n                    'class': 'mat-focus-indicator'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\"\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc1.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_PANEL]\n            }, {\n                type: Optional\n            }] }]; }, { role: [{\n            type: Input\n        }], \n    /** Prevents the default element actions if it is disabled. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _checkDisabled: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }], \n    /** Emits to the hover stream. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleMouseEnter: [{\n            type: HostListener,\n            args: ['mouseenter']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Subscription to tab events on the menu panel */\n        this._tabSubscription = Subscription.EMPTY;\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Class or list of classes to be added to the overlay panel. */\n        this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n        /** Class to be added to the backdrop element. */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    /** Position of the menu in the X axis. */\n    get xPosition() { return this._xPosition; }\n    set xPosition(value) {\n        if (value !== 'before' && value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() { return this._yPosition; }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() { return this._overlapTrigger; }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() { return this.panelClass; }\n    set classList(classes) { this.panelClass = classes; }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused)))).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n    }\n    ngOnDestroy() {\n        this._directDescendantItems.destroy();\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n        }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable\n                .pipe(take(1))\n                .subscribe(() => this._focusFirstItem(origin));\n        }\n        else {\n            this._focusFirstItem(origin);\n        }\n    }\n    /**\n     * Actual implementation that focuses the first item. Needs to be separated\n     * out so we don't repeat the same logic in the public `focusFirstItem` method.\n     */\n    _focusFirstItem(origin) {\n        const manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive();\n        // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n        if (!manager.activeItem && this._directDescendantItems.length) {\n            let element = this._directDescendantItems.first._getHostElement().parentElement;\n            // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n            // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n            // because the panel is inside an `ng-template`. We work around it by starting from one of\n            // the items and walking up the DOM.\n            while (element) {\n                if (element.getAttribute('role') === 'menu') {\n                    element.focus();\n                    break;\n                }\n                else {\n                    element = element.parentElement;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(MAT_MENU_BASE_ELEVATION + depth, 24);\n        const newElevation = `mat-elevation-z${elevation}`;\n        const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n}\n_MatMenuBase.ɵfac = function _MatMenuBase_Factory(t) { return new (t || _MatMenuBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS)); };\n_MatMenuBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatMenuBase, contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_MENU_CONTENT, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allItems = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n    } }, viewQuery: function _MatMenuBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n    } }, inputs: { backdropClass: \"backdropClass\", xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { closed: \"closed\", close: \"close\" } });\n_MatMenuBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\n_MatMenuBase.propDecorators = {\n    _allItems: [{ type: ContentChildren, args: [MatMenuItem, { descendants: true },] }],\n    backdropClass: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    xPosition: [{ type: Input }],\n    yPosition: [{ type: Input }],\n    templateRef: [{ type: ViewChild, args: [TemplateRef,] }],\n    items: [{ type: ContentChildren, args: [MatMenuItem, { descendants: false },] }],\n    lazyContent: [{ type: ContentChild, args: [MAT_MENU_CONTENT,] }],\n    overlapTrigger: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    panelClass: [{ type: Input, args: ['class',] }],\n    classList: [{ type: Input }],\n    closed: [{ type: Output }],\n    close: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatMenuBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_DEFAULT_OPTIONS]\n            }] }]; }, { backdropClass: [{\n            type: Input\n        }], closed: [{\n            type: Output\n        }], close: [{\n            type: Output\n        }], xPosition: [{\n            type: Input\n        }], yPosition: [{\n            type: Input\n        }], overlapTrigger: [{\n            type: Input\n        }], hasBackdrop: [{\n            type: Input\n        }], panelClass: [{\n            type: Input,\n            args: ['class']\n        }], classList: [{\n            type: Input\n        }], _allItems: [{\n            type: ContentChildren,\n            args: [MatMenuItem, { descendants: true }]\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], templateRef: [{\n            type: ViewChild,\n            args: [TemplateRef]\n        }], items: [{\n            type: ContentChildren,\n            args: [MatMenuItem, { descendants: false }]\n        }], lazyContent: [{\n            type: ContentChild,\n            args: [MAT_MENU_CONTENT]\n        }] }); })();\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nclass MatMenu extends _MatMenuBase {\n}\nMatMenu.ɵfac = function MatMenu_Factory(t) { return ɵMatMenu_BaseFactory(t || MatMenu); };\nMatMenu.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatMenu, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatMenu_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatMenu);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatMenu, [{\n        type: Directive\n    }], null, null); })();\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n/** @docs-public MatMenu */\nclass _MatMenu extends MatMenu {\n    constructor(elementRef, ngZone, defaultOptions) {\n        super(elementRef, ngZone, defaultOptions);\n    }\n}\n_MatMenu.ɵfac = function _MatMenu_Factory(t) { return new (t || _MatMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS)); };\n_MatMenu.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: _MatMenu, selectors: [[\"mat-menu\"]], exportAs: [\"matMenu\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n            { provide: MatMenu, useExisting: _MatMenu }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]], template: function _MatMenu_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, _MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n    } }, directives: [ɵngcc3.NgClass], styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"], encapsulation: 2, data: { animation: [\n            matMenuAnimations.transformMenu,\n            matMenuAnimations.fadeInItems\n        ] }, changeDetection: 0 });\n_MatMenu.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatMenu, [{\n        type: Component,\n        args: [{\n                selector: 'mat-menu',\n                template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matMenu',\n                animations: [\n                    matMenuAnimations.transformMenu,\n                    matMenuAnimations.fadeInItems\n                ],\n                providers: [\n                    { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n                    { provide: MatMenu, useExisting: _MatMenu }\n                ],\n                styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Default top padding of the menu panel. */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger {\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, \n    // `MatMenu` is always used in combination with a `MatMenuTrigger`.\n    // tslint:disable-next-line: lightweight-tokens\n    _parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, \n    // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n    // @breaking-change 8.0.0\n    _focusMonitor) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._parentMenu = _parentMenu;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = () => this._openedBy = 'touch';\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = null;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() { return this.menu; }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() { return this._menu; }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu();\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n                    this._parentMenu.closed.emit(reason);\n                }\n            });\n        }\n    }\n    ngAfterContentInit() {\n        this._checkMenu();\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMenu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        if (this._menuOpen) {\n            return;\n        }\n        this._checkMenu();\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n        this._setPosition(overlayConfig.positionStrategy);\n        overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n            this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n        if (this.menu.lazyContent) {\n            this.menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu();\n        if (this.menu instanceof MatMenu) {\n            this.menu._startAnimation();\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin = 'program', options) {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu() {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        this._restoreFocus();\n        if (menu instanceof MatMenu) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false)\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            if (menu.lazyContent) {\n                menu.lazyContent.detach();\n            }\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n        this.menu.direction = this.dir;\n        this._setMenuElevation();\n        this._setIsMenuOpen(true);\n        this.menu.focusFirstItem(this._openedBy || 'program');\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation() {\n        if (this.menu.setElevation) {\n            let depth = 0;\n            let parentMenu = this.menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            this.menu.setElevation(depth);\n        }\n    }\n    /** Restores focus to the element that was focused before the menu was open. */\n    _restoreFocus() {\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (this.restoreFocus) {\n            if (!this._openedBy) {\n                // Note that the focus style will show up both for `program` and\n                // `keyboard` so we don't have to specify which one it is.\n                this.focus();\n            }\n            else if (!this.triggersSubmenu()) {\n                this.focus(this._openedBy);\n            }\n        }\n        this._openedBy = null;\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._highlighted = isOpen;\n        }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n    _checkMenu() {\n        if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuMissingError();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay() {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: this.menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(position) {\n        if (this.menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                this.menu.setPositionClasses(posX, posY);\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(positionStrategy) {\n        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        }\n        else if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMenu ? this._parentMenu.closed : of();\n        const hover = this._parentMenu ? this._parentMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : null;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        if (this.triggersSubmenu() && ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu()) {\n            return;\n        }\n        this._hoverSubscription = this._parentMenu._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal() {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\nMatMenuTrigger.ɵfac = function MatMenuTrigger_Factory(t) { return new (t || MatMenuTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(MatMenu, 8), ɵngcc0.ɵɵdirectiveInject(MatMenuItem, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\nMatMenuTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatMenuTrigger, selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]], hostAttrs: [\"aria-haspopup\", \"true\", 1, \"mat-menu-trigger\"], hostVars: 2, hostBindings: function MatMenuTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function MatMenuTrigger_mousedown_HostBindingHandler($event) { return ctx._handleMousedown($event); })(\"keydown\", function MatMenuTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"click\", function MatMenuTrigger_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.menuOpen || null)(\"aria-controls\", ctx.menuOpen ? ctx.menu.panelId : null);\n    } }, inputs: { restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"], _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, exportAs: [\"matMenuTrigger\"] });\nMatMenuTrigger.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_SCROLL_STRATEGY,] }] },\n    { type: MatMenu, decorators: [{ type: Optional }] },\n    { type: MatMenuItem, decorators: [{ type: Optional }, { type: Self }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: FocusMonitor }\n];\nMatMenuTrigger.propDecorators = {\n    _deprecatedMatMenuTriggerFor: [{ type: Input, args: ['mat-menu-trigger-for',] }],\n    menu: [{ type: Input, args: ['matMenuTriggerFor',] }],\n    menuData: [{ type: Input, args: ['matMenuTriggerData',] }],\n    restoreFocus: [{ type: Input, args: ['matMenuTriggerRestoreFocus',] }],\n    menuOpened: [{ type: Output }],\n    onMenuOpen: [{ type: Output }],\n    menuClosed: [{ type: Output }],\n    onMenuClose: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatMenuTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                host: {\n                    'class': 'mat-menu-trigger',\n                    'aria-haspopup': 'true',\n                    '[attr.aria-expanded]': 'menuOpen || null',\n                    '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                    '(mousedown)': '_handleMousedown($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(click)': '_handleClick($event)'\n                },\n                exportAs: 'matMenuTrigger'\n            }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_SCROLL_STRATEGY]\n            }] }, { type: MatMenu, decorators: [{\n                type: Optional\n            }] }, { type: MatMenuItem, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc1.FocusMonitor }]; }, { restoreFocus: [{\n            type: Input,\n            args: ['matMenuTriggerRestoreFocus']\n        }], menuOpened: [{\n            type: Output\n        }], onMenuOpen: [{\n            type: Output\n        }], menuClosed: [{\n            type: Output\n        }], onMenuClose: [{\n            type: Output\n        }], _deprecatedMatMenuTriggerFor: [{\n            type: Input,\n            args: ['mat-menu-trigger-for']\n        }], menu: [{\n            type: Input,\n            args: ['matMenuTriggerFor']\n        }], menuData: [{\n            type: Input,\n            args: ['matMenuTriggerData']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\nclass _MatMenuDirectivesModule {\n}\n_MatMenuDirectivesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatMenuDirectivesModule });\n_MatMenuDirectivesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatMenuDirectivesModule_Factory(t) { return new (t || _MatMenuDirectivesModule)(); }, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatMenuDirectivesModule, { declarations: function () { return [MatMenuTrigger, MatMenuContent]; }, exports: function () { return [MatMenuTrigger, MatMenuContent, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatMenuDirectivesModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n                declarations: [\n                    MatMenuTrigger,\n                    MatMenuContent,\n                ],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\nclass MatMenuModule {\n}\nMatMenuModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatMenuModule });\nMatMenuModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatMenuModule_Factory(t) { return new (t || MatMenuModule)(); }, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            CommonModule,\n            MatCommonModule,\n            MatRippleModule,\n            OverlayModule,\n            _MatMenuDirectivesModule,\n        ], CdkScrollableModule, MatCommonModule, _MatMenuDirectivesModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMenuModule, { declarations: function () { return [_MatMenu, MatMenuItem]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        MatRippleModule,\n        OverlayModule, _MatMenuDirectivesModule]; }, exports: function () { return [CdkScrollableModule, MatCommonModule, _MatMenu, MatMenuItem, _MatMenuDirectivesModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatMenuModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    MatRippleModule,\n                    OverlayModule,\n                    _MatMenuDirectivesModule,\n                ],\n                exports: [CdkScrollableModule, MatCommonModule, _MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n                declarations: [_MatMenu, MatMenuItem],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenu, _MatMenuBase, _MatMenuDirectivesModule, fadeInItems, matMenuAnimations, transformMenu, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵangular_material_src_material_menu_menu_a, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵangular_material_src_material_menu_menu_b, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵangular_material_src_material_menu_menu_c };\n\n//# sourceMappingURL=menu.js.map"],"sourceRoot":"webpack:///"}