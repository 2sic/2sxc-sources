{"version":3,"file":"projects_eav-ui_src_app_apps-management_add-app-from-folder_add-app-from-folder_component_ts--ecd9e6.1d89cbb71aee8076.js","mappings":"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","names":["AppNameShowComponent","agInit","params","this","name","value","tooltip","tooltipGetter","data","refresh","static","t","core","VBU","selectors","standalone","features","i0","decls","vars","consts","template","rf","ctx","MatIconModule","i1","TippyDirective","styles","CheckboxCellComponent","onChange","event","currentTarget","checked","$event","isDisabled","vm_r2","pendingApps","ctx_r2","gridOptions","AddAppFromFolderComponent_Conditional_0_Conditional_8_Template","AddAppFromFolderComponent_Conditional_0_Conditional_9_Template","_r1","closeDialog","install","length","installing","AddAppFromFolderComponent","BaseComponent","constructor","dialogRef","snackBar","super","hostClass","buildGridOptions","refreshApps$","Subject","inject","FeaturesService","isAddFromFolderEnabled","isEnabled","FeatureNames","AppSyncWithSiteFiles","appsListService","transient","AppsListService","ngOnInit","viewModel$","combineLatest","pipe","startWith","undefined","switchMap","getPendingApps","catchError","of","share","map","ngOnDestroy","complete","close","app","enabled","push","splice","indexOf","open","duration","installPendingApps","subscribe","error","next","defaultGridOptions","columnDefs","field","width","cellClass","sortable","cellRenderer","cellRendererParams","flex","sort","filter","pendingApp","ServerFolder","Folder","Version","Description","i2","hostVars","hostBindings","AddAppFromFolderComponent_Conditional_0_Template","tmp_0_0","MatDialogActions","MatButtonModule","i3","AsyncPipe","FeatureTextInfoComponent","SxcGridModule","i4","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","FieldShareConfigManagement","AppExportAssetsAdvanced","webApiAppRoot","ImportAppService","http","context","dnnContext","importApp","file","changedName","retryOnDuplicate","formData","FormData","append","post","$2sxc","apiUrl","zoneId","toString","result","Messages","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","_angular_core__WEBPACK_IMPORTED_MODULE_4__","jDH","factory","Éµfac"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { IdFieldParams } from '../../../shared/components/id-field/id-field.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-app-name-show',\r\n  templateUrl: './app-name-show.component.html',\r\n  styleUrls: ['./app-name-show.component.scss'],\r\n  standalone: true,\r\n  imports: [MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class AppNameShowComponent implements ICellRendererAngularComp {\r\n  name: string;\r\n  tooltip: string;\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.name = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"name-box\">\r\n  <span>{{ name }}</span>\r\n  <mat-icon class=\"info-icon\" [tippy]=\"tooltip\">info</mat-icon>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { CheckboxCellParams } from './checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-checkbox-cell',\r\n  templateUrl: './checkbox-cell.component.html',\r\n  styleUrls: ['./checkbox-cell.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class CheckboxCellComponent implements ICellRendererAngularComp {\r\n  params: ICellRendererParams & CheckboxCellParams;\r\n\r\n  agInit(params: ICellRendererParams & CheckboxCellParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  public onChange(event: any) {\r\n    this.params.onChange(this.params.data, event.currentTarget.checked);\r\n  }\r\n}\r\n","<div class=\"checkbox-box\">\r\n  <input class=\"checkbox-input\" type=\"checkbox\" [disabled]=\"params.isDisabled\" [checked]=\"params.value\" (change)=\"onChange($event)\">\r\n</div>\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Add App from Folder</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <app-feature-text-info [featureNameId]=\"'AppSyncWithSiteFiles'\"></app-feature-text-info>\r\n      <p>\r\n        Select an app from the apps-folder which has been copied there (or git-cloned) but not installed yet.\r\n      </p>\r\n      @if (vm.pendingApps?.length == 0) {\r\n        <p>\r\n          Nothing to show. All apps in the 2sxc folder are already installed.\r\n        </p>\r\n      }\r\n      @if (vm.pendingApps?.length > 0) {\r\n        <div>\r\n          <ag-grid-angular class=\"ag-theme-material eav-grid\" [rowData]=\"vm.pendingApps\"\r\n            [gridOptions]=\"gridOptions\">\r\n          </ag-grid-angular>\r\n        </div>\r\n      }\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button type=\"button\" mat-raised-button (click)=\"closeDialog()\">\r\n        Cancel\r\n      </button>\r\n      <button type=\"button\" mat-raised-button color=\"accent\" [disabled]=\"pendingApps.length === 0 || installing\"\r\n        (click)=\"install()\">\r\n        Install\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, HostBinding, OnDestroy, OnInit, inject } from \"@angular/core\";\r\nimport { MatDialogRef, MatDialogActions } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { catchError, combineLatest, map, Observable, of, share, startWith, Subject, switchMap } from \"rxjs\";\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from \"../../shared/constants/default-grid-options.constants\";\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { PendingApp } from \"../models/app.model\";\r\nimport { AppsListService } from \"../services/apps-list.service\";\r\nimport { AppNameShowComponent } from './app-name-show/app-name-show.component';\r\nimport { CheckboxCellComponent } from './checkbox-cell/checkbox-cell.component';\r\nimport { CheckboxCellParams } from './checkbox-cell/checkbox-cell.model';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { transient } from '../../core';\r\n\r\n@Component({\r\n  selector: 'app-add-app-from-folder',\r\n  templateUrl: './add-app-from-folder.component.html',\r\n  styleUrls: ['./add-app-from-folder.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    AsyncPipe,\r\n    FeatureTextInfoComponent,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class AddAppFromFolderComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  gridOptions = this.buildGridOptions();\r\n  pendingApps: PendingApp[] = [];\r\n  installing: boolean = false;\r\n\r\n  private refreshApps$ = new Subject<void>();\r\n\r\n  viewModel$: Observable<AddAppFromFolderViewModel>;\r\n\r\n  public features: FeaturesService = inject(FeaturesService);\r\n  private isAddFromFolderEnabled = this.features.isEnabled(FeatureNames.AppSyncWithSiteFiles);\r\n  private appsListService = transient(AppsListService);\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AddAppFromFolderComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = combineLatest([\r\n      this.refreshApps$.pipe(\r\n        startWith(undefined),\r\n        switchMap(() => this.appsListService.getPendingApps().pipe(catchError(() => of(undefined)))),\r\n        share()\r\n      )\r\n    ]).pipe(\r\n      map(([pendingApps]) => ({ pendingApps })),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refreshApps$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onChange(app: PendingApp, enabled: boolean) {\r\n    if (enabled)\r\n      this.pendingApps.push(app);\r\n    else\r\n      this.pendingApps.splice(this.pendingApps.indexOf(app), 1);\r\n  }\r\n\r\n  install(): void {\r\n    this.installing = true;\r\n    this.snackBar.open('Installing', undefined, { duration: 2000 });\r\n    this.appsListService.installPendingApps(this.pendingApps).subscribe({\r\n      error: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Failed to install app. Please check console for more information', undefined, { duration: 3000 });\r\n      },\r\n      next: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Installed app', undefined, { duration: 2000 });\r\n        this.closeDialog();\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          field: '',\r\n          width: 40,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          cellRenderer: CheckboxCellComponent,\r\n          cellRendererParams: (() => {\r\n            const params: CheckboxCellParams = {\r\n              isDisabled: !this.isAddFromFolderEnabled,\r\n              onChange: (app, enabled) => this.onChange(app, enabled),\r\n            };\r\n            return params;\r\n          }),\r\n        },\r\n        {\r\n          field: 'Name',\r\n          flex: 1,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          sort: 'asc',\r\n          filter: 'agTextColumnFilter',\r\n          cellRenderer: AppNameShowComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<PendingApp> = {\r\n              tooltipGetter: (pendingApp) => `Server folder: ${pendingApp.ServerFolder}\\nFolder: ${pendingApp.Folder}\\nVersion: ${pendingApp.Version}\\nDescription: ${pendingApp.Description}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ]\r\n    }\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\ninterface AddAppFromFolderViewModel {\r\n  pendingApps: PendingApp[];\r\n}\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  FieldShareConfigManagement: 'FieldShareConfigManagement',\r\n\r\n  AppExportAssetsAdvanced: 'AppExportAssetsAdvanced',\r\n  \r\n};\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}