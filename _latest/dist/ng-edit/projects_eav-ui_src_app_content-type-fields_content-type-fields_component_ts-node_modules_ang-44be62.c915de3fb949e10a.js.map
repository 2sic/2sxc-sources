{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_content-type-fields_component_ts-node_modules_ang-44be62.c915de3fb949e10a.js","mappings":"mNAAO,MAAMA,EAAmB,CAE9BC,eAAgB,kBAChBC,gBAAiB,mBAGjBC,cAAe,iBACfC,UAAW,aACXC,iBAAkB,qBAGlBC,gBAAiB,mBAEjBC,cAAe,WAGfC,aAAc,gBACdC,SAAU,YACVC,aAAc,gBAGdC,oBAAqB,wBACrBC,cAAe,iBACfC,YAAa,eAGbC,qBAAsB,yBAGtBC,iBAAkB,oBAClBC,iBAAkB,oBAGlBC,cAAe,iBACfC,eAAgB,kBAGhBC,cAAe,iBACfC,eAAgB,kBAChBC,oBAAqB,wBACrBC,qBAAsB,0BACtBC,WAAY,cACZC,qBAAsB,yBACtBC,cAAe,kBACfC,cAAe,iBAGfC,aAAc,gBACdC,aAAc,gBACdC,aAAc,gBAGdC,QAAS,oICzCJ,IAAMC,EAAoB,MAA3B,MAAOA,EAQXC,GACAC,GACAC,GACAC,GAEAC,cAVAC,KAAAC,cAAgBC,MAAMC,WAGtBH,KAAAI,UAASF,QAAe,GAExBF,MAAAL,KAAaU,OAAOC,KACpBN,MAAAJ,KAAoBS,OAAOE,OAC3BP,MAAAH,KAAqBQ,OAAOG,OAC5BR,MAAAF,KAAmBO,OAAOI,KAI1BT,KAAAU,WAAUC,MAAY,UAAW,IAAMX,MAAKF,EAAiBc,WAAWZ,KAAKC,kBAE7ED,KAAAa,QAAOF,MAAY,OAAQ,KACzB,MAAMG,EAAOd,KAAKU,UAClB,OAAY,MAARI,GACGd,KAAKI,WAAaU,GAAMC,YAAa,IAP9B,CAUhBC,aACEC,EAAkBjB,MAAKL,EAAYK,KAAKC,gBAAiBD,MAAKJ,EAAmBI,MAAKH,EACxF,CAACqB,SAAAlB,KAAA,mBAAAmB,iBAzBUzB,EAAoB,EAAAwB,SAAAlB,KAAA,UAAAoB,EAAAC,IAAA,MAApB3B,EAAoB4B,OAAA,CAAArB,cAAA,oBAAAG,OAAA,uBAApBV,CAAoB,KA4B3B,SAAUuB,EAAkBM,EAAmBC,EAAmBC,EAAoCC,GAC1GH,EAAOI,KAAKC,6BAA4B,CACtCC,WAAW,EACXC,KAAMN,EACNC,iBAAkBA,EAClBM,MAAO,UAGTL,GAAmBM,cACrB,wEC3CO,IAAMC,EAAgB,MAAvB,MAAOA,EAEXlC,YAAoBmC,GAAAlC,KAAAkC,UAAyB,CAE7CC,gBAAgBC,IACdD,OAAgBC,GAChBpC,KAAKkC,SAASP,KAAK,sBAAuB,KAAM,CAAEU,SAAU,KAC9D,CAACnB,SAAAlB,KAAA,mBAAAmB,iBAPUc,GAAgBK,MAAAC,MAAA,EAAArB,SAAAlB,KAAA,WAAAwC,EAAAC,IAAA,OAAhBR,EAAgBS,QAAhBT,EAAgBU,UAAAC,WADH,gBACbX,CAAgB,sDCF7B,IAYMY,EAAiB,MAAvB,MAAMA,EACFC,aAAaC,EAASC,GAClB,SAAUD,GAAWA,EAAQE,UAAYF,EAAQG,SAAYF,GAAQA,EAAKG,WAC9E,CACAjC,iBAAW,SAAAC,GAAA,WAAAA,GAAwF0B,EAAiB,EACpH3B,kBAZyFoB,MAAE,CAAAc,MAYYP,EAAiBH,QAAjBG,EAAiBF,UAAAC,WAAc,SACzI,OANKC,CAAiB,uCCbhB,MAAMQ,EAAe,CAC1BC,qBAAsB,uBACtBC,sBAAuB,wBACvBC,wBAAyB,0BACzBC,gBAAiB,kBACjBC,sBAAuB,wBACvBC,mBAAoB,qBACpBC,0BAA2B,4BAC3BC,WAAY,wBACZC,sBAAuB,wBACvBC,sBAAuB,wBACvBC,kCAAmC,oCACnCC,wBAAyB,0BACzBC,wBAAyB,0BAGzBC,iBAAkB,mBAClBC,cAAe,gBACfC,gBAAiB,kBACjBC,sBAAuB,wBACvBC,eAAgB,iBAChBC,iBAAkB,gHCnBgD,IAE9DC,EAAkB,MAAxB,MAAMA,EACFvD,iBAAW,SAAAC,GAAA,WAAAA,GAAwFsD,EAAkB,EACrHvD,iBADyFoB,KAAE,CAAAoC,KACSD,IAQpGvD,iBATyFoB,MAAE,CAAAqC,QAAA,CASuCC,IAC1HC,KACAC,IAAcF,OACzB,OAbKH,CAAkB,6KCFhBnC,MAAA,4BADFA,MAAA,cACEA,MAAA,EAAAyC,EAAA,sBACFzC,uCADiBA,cAAA,mBAAA0C,yBAKf1C,MAAA,4BADFA,MAAA,eACEA,MAAA,EAAA2C,EAAA,sBACF3C,uCADiBA,cAAA,mBAAA0C,yBAOrB1C,MAAA,GCFK,IAAM4C,EAAkB,MAAzB,MAAOA,EAIXnF,cAHAC,KAAAmF,WAAUjF,QAAe,GACzBF,KAAAoF,SAAU,CAEM,CAEhBC,gBACErF,KAAKoF,SAAWpF,KAAKoF,OACvB,CAAClE,SAAAlB,KAAA,mBAAAmB,iBARU+D,EAAkB,EAAAhE,SAAAlB,KAAA,UAAAsF,EAAAC,IAAA,MAAlBL,EAAkBM,UAAA,qBAAAlE,OAAA,CAAA6D,QAAA,eAAAM,mBAAAC,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,2EAAAC,SAAA,SAAAC,EAAAC,GAAA,KAAAD,EAAA,yBDd/BzD,MAAA,WAAsBA,MAAA,mBAAAA,aAAA2D,GAAA3D,MAAS0D,EAAAX,gBAAe,GAO1C/C,MALA,EAAA4D,EAAA,eAKA5D,CALe,EAAA6D,EAAA,iBAWnB7D,QAEAA,MAAA,EAAA8D,EAAA,yBAAA9D,qBAfgDA,MAAA,UAAAA,MAAA,EAAA+D,EAAAL,EAAAZ,UAC9C9C,eAAA,KAAAgE,EAAAN,EAAAb,WAAK,GAAL,IAAKmB,EAAD,sBCQE7B,IAAkBlC,QAClBgE,KACAC,MAAgBC,OAAA,+cAGXvB,CAAkB,4ECV/B,MAAMwB,EAAuB,wBAEtB,IAAMC,EAAqB,MAA5B,MAAOA,UAA6BC,IAExCC,iBAAiBC,GACf,OAAO9G,KAAK+G,gBAAyB,MACnCC,IAAKhH,KAAKiH,OAAOP,GACjBQ,OAAQ,CAAEJ,OAAQA,OAEtB,CAEAK,kBAAkBC,GAChB,MAAMC,KAAcC,OAAkB,IACtC,UAAWR,KAAUM,EAEnBpH,KAAKuH,aAAsBb,EAAsB,CAC/CQ,OAAQ,CAAEJ,YACTU,KAAK9G,IACN2G,EAAYI,OAAOC,GAAQ,IAAIA,EAAMhH,GAAQ,GAGjD,OAAO2G,CACT,CAACnG,SAAAlB,KAAA,4DApBU2G,KAAoBxF,GAApBwF,EAAoB,GAoB9B,GApB8BzF,SAAAlB,KAAA,WAAAwC,EAAAC,IAAA,OAApBkE,EAAoBjE,QAApBiE,EAAoBhE,mBAApBgE,CAAqB,wMCWxBrE,MADF,UACEA,CADwB,WACSA,MAAA,wBAAoCA,QAEnEA,MADF,UACEA,CAD+B,UACzBA,MAAA,wBAEVA,mCAJmCA,MAAA,GAAAA,MAAA,GAAAA,MAAA,4BAEzBA,MAAA,GAAAA,YAAA,IAAAqF,EAAAjH,UAAAK,UAAA,kFAORuB,MADF,UACEA,CADwB,WACSA,MAAA,WAAKA,QAEpCA,MADF,UACEA,CADyC,YACnCA,MAAA,mBAAAA,MAAAsF,GAAA,MAAAD,EAAArF,MAAA,UAAAA,MAASqF,EAAAE,UAAA1F,gBAA0BwF,EAAAjH,UAASoH,MAAM,GAAExF,MAAA,GAE9DA,qCAF8DA,MAAA,GAAAA,MAAAqF,EAAAjH,UAAAoH,+CAkB9DxF,MAAA,cAAyDA,MAAA,mBAAAA,MAAAyF,GAAA,MAAAJ,EAAArF,MAAA,UAAAA,MAASqF,EAAApG,OAAAyG,QAAc,GAAE1F,MAAA,WAAKA,iDA3CzFA,MAFJ,aAEIA,CAFM,oBAENA,CADe,oBACCA,MAAA,GAClBA,UACAA,MAAA,sBACEA,MAAA,6BAGEA,MADF,UACEA,CADwB,WACSA,MAAA,SAAGA,QAElCA,MADF,WACEA,CAD+B,aACzBA,MAAA,mBAAAA,MAAA2D,GAAA,MAAA0B,EAAArF,QAAA,OAAAA,MAASqF,EAAAE,UAAA1F,gBAA0BwF,EAAAjH,UAASoG,QAAQ,GAAExE,MAAA,IAEhEA,YAEAA,MAAA,GAAA2F,EAAA,aASA3F,MAAA,GAAA4F,EAAA,aAUE5F,MADF,WACEA,CADwB,YACSA,MAAA,uBAAgBA,QAE/CA,MADF,WACEA,CAD+B,WACzBA,MAAA,IAGZA,cAGIA,MAFJ,wBAEIA,CAF0B,SAE1BA,CAD0F,eAChFA,MAAA,kBAAWA,QACrBA,MAAA,sBACFA,QACAA,MAAA,GAAA6F,EAAA,gBAIJ7F,kCA9CoBA,MAAA,GAAAA,MAAAqF,EAAAjH,UAAA0H,MAGb9F,MAAA,GAAAA,MAAA,YAAAA,MAAA,IAAAqF,EAAAjH,UAAA2H,aAAA/F,OAK6DA,MAAA,GAAAA,MAAAqF,EAAAjH,UAAAoG,QAIhExE,cAAAqF,EAAAW,UAAAC,WAAA,OASAjG,cAAAqF,EAAAW,UAAAE,SAAA,OAYUlG,MAAA,GAAAA,MAAAqF,EAAAjH,UAAA+H,SAAAC,OAAA,KAAAf,EAAAjH,UAAA+H,SAAAE,SAKPrG,MAAA,GAAAA,MAAA,OAAAqF,EAAAjH,UAAAkI,KAAAtG,OAIHA,MAAA,GAAAA,MAAA,GAAAqF,EAAAW,UAAAO,UAAA,QCtBC,IAAMC,EAA6B,MAApC,MAAOA,EAGX/I,YAC+CgJ,EACnCxH,GADmCvB,KAAA+I,cACnC/I,KAAAuB,SAJZvB,KAAAgJ,SAAQ9I,SAOEF,KAAAsI,WAAU3H,MAAY,UAAW,IAAOX,KAAKgJ,SAAWhJ,KAAK+I,aAC7D/I,KAAAU,WAAUC,MAAY,UAAW,IAAMX,KAAKsI,WAAW5H,SACvDV,KAAA6H,aAAYoB,KAAUhH,IAJ5B,CAACf,SAAAlB,KAAA,mBAAAmB,iBANM2H,GAA6BxG,MAIlB4G,IAAe,GAAA5G,MAAAC,KAAA,EAAArB,SAAAlB,KAAA,UAAAsF,EAAAC,IAAA,MAJ1BuD,EAA6BtD,UAAA,iCAAAlE,OAAA,CAAA0H,MAAA,aAAArD,MAAA,EAAAC,KAAA,EAAAC,OAAA,4VAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GDvB1CzD,MAAA,EAAA6G,EAAA,uBAAA7G,MAAA0D,EAAAtF,UAAA,qBCgBQ0I,KAAaC,yBACbC,KAAeC,KACfC,KAAaC,KACbC,IACAC,IAAeC,MAAAC,cAAA,WAGVf,CAA6B,uCCnB1C,MAAMgB,EACFC,gBACAC,UACAC,iBACAC,YACAC,cAEAC,YAAa,EAEbC,QACAtK,YAAYgK,EAAiBC,EAAWC,EAAkBC,EAAaC,GACnEnK,KAAK+J,gBAAkBA,EACvB/J,KAAKgK,UAAYA,EACjBhK,KAAKiK,iBAAmBA,EACxBjK,KAAKkK,YAAcA,EACnBlK,KAAKmK,cAAgBA,CACzB,CAEAG,mBACI,MAAMC,EAAWvK,KAAKoK,WAChBI,EAASxK,KAAKiK,kBAAoBjK,KAAKkK,YACvCG,EAAUrK,KAAKqK,SAAWrK,KAAK+J,gBAC/BhH,EAAU/C,KAAKgK,UAAYhK,KAAKgK,UAAUjH,QAAU,KACpD0H,EAAWJ,GAASvH,aAAaC,EAASyH,KAAW,EACvDC,IAAaF,IACbvK,KAAKoK,WAAaK,EAClBzK,KAAKmK,cAAcO,OAE3B,0IC1BJ,MAAMC,EAAW,CACfC,kBAAkB,GASb,IAAMC,EAAqB,MAA5B,MAAOA,UAA6BC,IAIxC/K,YACSgL,EACAC,GACLC,QAFKjL,KAAA+K,SACA/K,KAAAgL,QAJThL,KAAAkL,OAAMC,MAAS,CAAEN,wBAAwBF,EAK5B,CAEb,YAAIS,GAAa,OAAOpL,KAAKgL,MAAMI,QAAU,CAE7C,OAAIpE,GAAQ,OAAOhH,KAAK+K,OAAO/D,GAAK,CAEpC,eAAIqE,GAAgB,OAAOrL,KAAK+K,OAAO/D,IAAIsE,MAAM,IAAM,CAEvDC,SAASC,GACP,OAAOxL,KAAKgL,MAAMI,SAASK,SAASC,IAAIF,EAC1C,CAEAG,UAA4BC,GAC1B,MAAMH,EAAWzL,KAAKgL,MAAMI,SAASK,SACrC,OAAOG,EAAKC,OAAO,CAACC,EAAKN,KACvBM,EAAIN,GAAOC,EAASC,IAAIF,GACjBM,GACN,GACL,CAEAC,cAAcP,GACZ,OAAOxL,KAAKgL,MAAMI,SAASY,cAAcN,IAAIF,EAC/C,CAEAS,eAAiCL,GAC/B,MAAMI,EAAgBhM,KAAKgL,MAAMI,SAASY,cAC1C,OAAOJ,EAAKC,OAAO,CAACC,EAAKN,KACvBM,EAAIN,GAAOQ,EAAcN,IAAIF,GACtBM,GACN,GACL,CAEAI,QAAmB,OAAOlM,KAAK+K,OAAOoB,uBAAuBC,QAAQF,KAAY,CAK1EtB,iBAAiByB,GACtB,MAAMC,EAAItM,KAAKkL,IAAIqB,KAAK,oBACxBvM,KAAKwM,cAAcC,IACjBzM,KAAK0M,qBAAqBC,UAAW7K,IACnCwK,EAAEM,EAAE,gBAAiB,CAAE9K,SAChBuK,OAGXC,EAAEO,KACJ,CAEOC,yBAAyBT,GAC9B,MAAMC,EAAItM,KAAKkL,IAAIqB,KAAK,oBACxBvM,KAAKwM,cAAcC,IACjBzM,MAAK+M,IAA6BJ,UAAU,EAAGT,YAC7CI,EAAEM,EAAE,gBAAiB,CAAEV,UACvBG,EAASH,EAAK,IAGlBI,EAAEO,KACJ,CAKOG,YAAY9F,GACjB,MAAM+F,EAAOjN,KAAK+K,OAAOmC,cAAc,CAAChG,GAAS,CAAEiG,WAAYnN,KAAKgL,QAEpE,OADiBhL,KAAK+K,OAAOqC,aAAaH,EAE5C,CAMOI,QAAQrG,EAAaoF,GAC1B,OAAOpM,KAAK+K,OAAOuC,SAAS,CAACtG,GAAMoF,EACrC,CAKOmB,YAAYC,EAAiBpB,GAClC,OAAOpM,KAAK+K,OAAOuC,SAASE,EAAU,IAAKpB,EAAQe,WAAYnN,KAAKgL,OACtE,CAEO0B,qBACL,OAAO1M,KAAK+K,OAAO0C,OAAOC,QACxBC,KAAOC,GAASA,aAAiBC,OAAa,EAC9CC,OAAY9N,KAAKgL,MAAMI,SAAS2C,aAAU,EAC1CC,KAAI,MAAQhO,KAAKgL,MAAMI,SAAS2C,aAAU,EAC1CE,QAAQ,EACRN,KAAO,EAAEO,EAAgBC,KAAiBD,IAAmBC,GAEjE,CAEApB,KACE,OAAO/M,KAAK+K,OAAO0C,OAAOC,QACxBC,KAAOC,GAASA,aAAiBC,OAAa,EAC9CO,KAAIR,IACF,MAAMtB,EAAItM,KAAKkL,IAAImD,GAAG,qBAAsB,CAC1CT,QACAG,WAAY/N,KAAKgL,MAAMI,SAAS2C,WAChCO,SAAUtO,KAAKgL,MAAMI,SACrBc,MAAOlM,KAAK+K,OAAOoB,wBAAwBC,OAAOF,QAEpDI,EAAEM,EAAE,gBAAiB,CAAEgB,UACvBtB,EAAEO,KAAG,IACN,EACDiB,OAAY9N,KAAKgL,MAAMI,SAAS2C,aAAU,EAC1CC,KAAI,MACFG,cAAenO,KAAKgL,MAAMI,SAAS2C,WACnC7B,MAAOlM,KAAK+K,OAAOoB,wBAAwBC,OAAOF,UAClD,EACF+B,QAAQ,EACRN,KAAO,EAAEjG,EAAM6G,KAAU7G,EAAKyG,cAAgBI,EAAKJ,cAAW,EAC9DH,KAAI,EAAEtG,EAAM6G,MAAI,CACdL,eAAgBxG,EAAKyG,YACrBA,YAAaI,EAAKJ,YAClBjC,MAAOqC,EAAKrC,SAGlB,CAAChL,SAAAlB,KAAA,mBAAAmB,iBA9HU0J,GAAoBvI,MAAAC,MAAAD,MAAAC,MAAA,EAAArB,SAAAlB,KAAA,WAAAwO,EAAA/L,IAAA,OAApBoI,EAAoBnI,QAApBmI,EAAoBlI,mBAApBkI,CAAqB,kUCK3B,IAAM4D,EAAqB,MAA5B,MAAOA,EAgBX1O,cAdAC,KAAA0O,eAAcC,OAAU,cAAe,CAAEC,KAAMC,QAC/C7O,KAAA8O,UAASC,OAAaC,KAAe,CAAEJ,KAAMC,QAC7C7O,KAAAiP,gBAAeF,OAAaG,IAAkB,CAAEN,KAAMC,QAG7C7O,KAAAmP,SAAWjP,MAAMC,SAA4B,IAC7CH,KAAAoP,QAAUlP,MAAMC,WAChBH,KAAAqP,UAAYnP,MAAMC,WAGlBH,KAAAsP,mBAAqB,GACrBtP,KAAAuP,mBAAqB,GACrBvP,KAAAwP,iBAAmB,MAI1BC,MAAO,KACWzP,KAAKoP,UAArB,MACMC,EAAYrP,KAAKqP,YACjBK,EAAgB1P,KAAK0O,eAAeiB,cAGrCD,MAGLE,MAAU,IAAM5P,MAAK6P,EAAcH,EAAeL,GAAU,EAEhE,CAOAQ,GAAcH,EAA4BL,GAExC,MAAMS,EAAW9P,KAAK8O,UAAUa,cAC1BI,EAAiB/P,KAAKiP,gBAAgBU,cACtCK,EAAWN,EAAcO,cAAc,mBAK7C,GAHAD,EAASE,UAAUC,OAAO,gBAA+B,IAAdd,IAGtCS,IAAaC,EAAgB,OAElCC,EAASI,MAAMC,KAAO,GAGtB,MAAMC,EAAatQ,MAAKuQ,EAAqBb,EAAeI,EAAUC,EAAgBC,EAAUX,GAGhGS,EAASM,MAAMC,KAAOC,EAAWE,UAAY,OAAOF,EAAWG,iBAAmB,MAElF,MAAMC,EAAYC,SAASV,cAAc,wBAAwBW,aAAeN,EAAWO,mBAAqBP,EAAWQ,mBAC3HhB,EAASM,MAAMM,UAAY,GAAGA,MAG9B,MAAMK,EAAiBT,EAAWU,eAAiBV,EAAWG,aAAeH,EAAWQ,mBAAqBR,EAAWO,mBAAqBP,EAAWW,cAExJjB,EAASI,MAAMC,KAAO,WAEtBL,GAAUE,UAAUC,OAAO,wBAAyBY,EACtD,CAGAR,GAAqBb,EAA4BI,EAAuBC,EAA6BC,EAAuBX,GAC1H,MAAMmB,EAAYV,EAASG,cAAc,YAAYW,cAAgB5Q,KAAKsP,mBAO1E,MAAO,CACLkB,YACAC,aARmBzQ,KAAKuP,mBAAsBF,EAAYmB,EAS1DQ,eARqBhB,EAASY,aAAe5Q,KAAKwP,iBASlDsB,mBARyBf,EAAemB,aASxCL,mBARyBnB,EAAcO,cAAc,uBAAuBW,cAAgB,EAS5FK,cAPoBvB,EAAcwB,aAStC,CAAChQ,SAAAlB,KAAA,mBAAAmB,iBAnFUsN,EAAqB,EAAAvN,SAAAlB,KAAA,UAAAwC,EAAA+C,IAAA,MAArBkJ,EAAqBjJ,UAAA,yBAAA2L,eAAA,SAAApL,EAAAC,EAAAoL,GAAA,EAAArL,qBAGViJ,KAAa,EAAUH,8BACjBK,IAAgB,EAAUL,4EAFPA,uSCvBjDvM,MAAA,aACEA,MAAA,GACAA,MAAA,KACAA,MAAA,KAEEA,MADF,UACEA,CAD0B,WAGxBA,MADA,WACAA,CADkD,YAGtDA,UACAA,MAAA,KACFA,eALYA,MAAA,GAAAA,MAAA,YAAA0D,EAAAmJ,WAAA9G,YAAA/F,OACAA,cAAA,YAAA0D,EAAAmJ,WAAAkC,KAAA/O,u0BDcCmM,CAAqB,+cEc9BnM,MAAA,YAA8EA,MAAA,mBAAAA,MAAAgP,GAAA,MAAAC,EAAAjP,QAAA,OAAAA,MAASiP,EAAAC,GAAG,kBAAiB,GACzGlP,MAAA,iBACEA,MAAA,GAEJA,kCAJwDA,MAAA,QAAAiP,EAAAE,aAEpDnP,MAAA,GAAAA,MAAA,IAAAiP,EAAAG,qBAAA,+CAKJpP,MAAA,YAAgGA,MAAA,mBAAAA,MAAAyF,GAAA,MAAAwJ,EAAAjP,QAAA,OAAAA,MAASiP,EAAAC,GAAG,kBAAiB,GAC3HlP,MAAA,iBACEA,MAAA,aAEJA,kCAJ0EA,MAAA,QAAAiP,EAAAE,uDAgB1EnP,MAAA,eAAgEA,MAAA,mBAAAA,MAAAqP,GAAA,MAAAJ,EAAAjP,QAAA,OAAAA,MAASiP,EAAAC,GAAG,UAAS,GACnFlP,MAAA,cAAUA,MAAA,iBAAWA,QACrBA,MAAA,UAAMA,MAAA,YACRA,UACAA,MAAA,eAAiFA,MAAA,mBAAAA,MAAAqP,GAAA,MAAAJ,EAAAjP,QAAA,OAAAA,MAASiP,EAAAC,GAAG,UAAS,GACpGlP,MAAA,cAAUA,MAAA,YAAMA,QAChBA,MAAA,UAAMA,MAAA,YACRA,kCAPsBA,MAAA,WAAAiP,EAAAK,MAAAC,SAAAC,eAIAxP,MAAA,GAAAA,MAAA,WAAAiP,EAAAK,MAAAC,SAAAE,eAAAR,EAAAK,MAAAI,UCrCnB,IAAMC,GAAiC,MAAxC,MAAOA,EAWXC,OAAOhL,GACLlH,KAAKkH,OAASA,EACdlH,KAAK4R,MAAQ5R,KAAKkH,OAAOpF,KACzB,MAAMqQ,EAAcnS,KAAK4R,MAAMC,SAASO,YAExCpS,KAAKqS,mBAAqBF,IAAgBnS,KAAK4R,MAAMU,YAAc3U,KAAiB0B,eAAiBW,KAAK4R,MAAMW,OAASC,KAAgBC,WACzIzS,KAAK0S,gBAAkB1S,KAAK4R,MAAMC,SAASc,gBAC3C3S,KAAK4S,cAAgB5S,KAAK4R,MAAMiB,SAAWC,OAAOlH,KAAK5L,KAAK4R,MAAMiB,UAAUlF,OAAOnC,GAAe,WAARA,GAAkBuH,OAAS,EAErH/S,KAAKgT,mBAAqBb,GAAenS,KAAK4R,MAAMqB,mBAAmBC,cACvElT,KAAKmT,eAAiBnT,KAAK4R,MAAMqB,mBAAmBG,SAAW,EAAI,CACrE,CAEAC,oBAAoBlD,GAClB,OAAOA,EAAS,YAAc,UAChC,CAIAsB,YACE,MAAM6B,EAAmB,6BACnBC,EAAKvT,KAAK4R,MAAM4B,YACtB,OAAKD,EACEA,EAAGE,MACN,qBAAuBzT,KAAK4R,MAAM8B,KAClCH,EAAGI,kBACD,YAAcJ,EAAGI,kBACjBL,EALUA,CAMlB,CAEA5B,qBACE,MAAM6B,EAAKvT,KAAK4R,MAAM4B,YACtB,OAAKD,EACEA,EAAGE,MACN,QACAF,EAAGI,kBAAoB,SAAW,GAHtB,EAIlB,CAEAvE,QAAQlI,GACN,OAAO,CACT,CAEAsK,GAAGoC,GACD5T,KAAKkH,OAAOsK,GAAGoC,EAAM5T,KAAK4R,MAC5B,CAAC1Q,SAAAlB,KAAA,mBAAAmB,iBAvDU8Q,EAAiC,EAAA/Q,SAAAlB,KAAA,UAAA6T,EAAAtO,IAAA,MAAjC0M,EAAiCzM,UAAA,sCAAAG,MAAA,GAAAC,KAAA,GAAAC,OAAA,k/BAAAC,SAAA,SAAAC,EAAAC,GAAA,KAAAD,EAAA,iBDvB5CzD,MAFF,UAEEA,CAF6B,WAI3BA,MAAA,mBAAAA,aAAA2D,GAAA3D,MAAA0D,EAAA0M,eAA0B1M,EAAAwL,GAAG,YAAc,GAAE,GAE7ClP,MAAA,gBAECA,MAAA,iBACHA,UAGAA,MAAA,WAGEA,MAAA,mBAAAA,aAAA2D,GAAA3D,MAAA0D,EAAAgN,kBAA6BhN,EAAAwL,GAAG,SAAW,GAAE,GAC7ClP,MAAA,gBAGGA,MAAA,yBACLA,UAGAA,MAAA,WAGEA,MAAA,mBAAAA,aAAA2D,GAAA3D,MAAA0D,EAAAqM,kBAA6BrM,EAAAwL,GAAG,eAAiB,GAAE,GACnDlP,MAAA,gBAEGA,MAAA,YACLA,UAWAA,MAPA,GAAAwR,GAAA,YAOAxR,CAPkC,GAAAyR,GAAA,aAiBhCzR,MADF,WACEA,CAD8F,eACpFA,MAAA,iBAEdA,YAGAA,MAAA,mBACEA,MAAA,GAAA0R,GAAA,uBAUF1R,kCAjEOA,oBAAA,0BAAA0D,EAAAqN,oBAAArN,EAAA0M,kBAIOpQ,QACRA,MADQ,WAAA0D,EAAA4M,cACRtQ,CADkC,oBAAA0D,EAAA0M,eAClCpQ,CADmH,kBAAA0D,EAAA4M,eAMlHtQ,MAAA,GAAAA,YAAA,0BAAA0D,EAAAqN,oBAAArN,EAAAgN,qBAEH1Q,MAAA,QAAAA,MAAA0D,EAAAgN,kBAAA,gEAEU1Q,QAEeA,MAFf,WAAA0D,EAAAmN,eAEe7Q,CAFY,kBAAA0D,EAAAmN,eAEZ7Q,CADW,oBAAA0D,EAAAgN,mBAMjC1Q,MAAA,GAAAA,YAAA,0BAAA0D,EAAAqN,oBAAArN,EAAAqM,qBAEH/P,MAAA,QAAAA,MAAA0D,EAAAqM,kBAAA,4DAEU/P,QACRA,MADQ,WAAA0D,EAAA4L,MAAAqC,YAAAC,MACR5R,CAD4C,oBAAA0D,EAAAqM,kBAC5C/P,CADgI,kBAAA0D,EAAA4L,MAAAqC,YAAAC,OAOpI5R,MAAA,GAAAA,MAAA,IAAA0D,EAAA0L,qBAAA,OAgBqEpP,MAAA,GAAAA,MAAA,oBAAA6R,mBChC/DC,KAAe7R,KACfiH,KAAaH,KACbgL,KAAc9K,KACd+K,KAAa7K,oBACb8K,MAAc9N,OAAA,8JAGTwL,CAAiC,8CCxB5C3P,MAAA,WAAiDA,MAAA,mBAAAA,MAAA2D,GAAA,MAAA0B,EAAArF,QAAA,OAAAA,MAASqF,EAAA6M,kBAAiB,GACzElS,MAAA,WAAkBA,MAAA,GAAWA,QAE3BA,MADF,UACEA,CADkC,cACxBA,MAAA,qBAEdA,oCAJoBA,MAAA,GAAAA,MAAAqF,EAAA8M,kCASlBnS,MADF,UACEA,CADoC,WACTA,MAAA,GAAWA,QAEpCA,MADF,UACEA,CAD2C,cACjCA,MAAA,qBAEdA,kCAJ6BA,MAAA,GAAAA,MAAAqF,EAAA8M,QCKxB,IAAMC,GAAmC,MAA1C,MAAOA,EAMXxC,OAAOhL,GACLlH,KAAKkH,OAASA,EACdlH,KAAKyU,MAAQvN,EAAOuN,MACpBzU,KAAK4R,MAAQ1K,EAAOpF,IACtB,CAEAsN,QAAQlI,GACN,OAAO,CACT,CAEAsN,kBACExU,KAAKkH,OAAOyN,kBAAkB3U,KAAK4R,MACrC,CAAC1Q,SAAAlB,KAAA,mBAAAmB,iBAlBUuT,EAAmC,EAAAxT,SAAAlB,KAAA,UAAA6T,EAAAtO,IAAA,MAAnCmP,EAAmClP,UAAA,yCAAAG,MAAA,EAAAC,KAAA,EAAAC,OAAA,qPAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDhBhDzD,MAAA,EAAAsS,GAAA,aASAtS,MAAA,EAAAuS,GAAA,oBATAvS,MAAA0D,EAAA4L,MAAAC,SAAAO,aAAA,KASA9P,cAAA0D,EAAA4L,MAAAC,SAAAO,YAAA,sBCGQgC,KAAe7R,KACfiH,KAAaH,MAAAQ,cAAA,WAGR6K,CAAmC,4BCd5CpS,MAAA,gBAA+BA,MAAA,eAASA,gCAGxCA,MAAA,gBAAoDA,MAAA,oBAAcA,SCM/D,IAAMwS,GAAiC,MAAxC,MAAOA,EAIX5C,OAAOhL,GACL,MAAM0K,EAAe1K,EAAOpF,KAC5B9B,KAAK+U,YAAcnD,EAAMoD,YACzBhV,KAAKiV,YAAcrD,EAAMsD,WAC3B,CAEA9F,QAAQlI,GACN,OAAO,CACT,CAAChG,SAAAlB,KAAA,mBAAAmB,iBAZU2T,EAAiC,EAAA5T,SAAAlB,KAAA,UAAA6T,EAAAtO,IAAA,MAAjCuP,EAAiCtP,UAAA,sCAAAG,MAAA,EAAAC,KAAA,EAAAC,OAAA,8FAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDX9CzD,MAAA,WACEA,MAAA,EAAA6S,GAAA,kBAGA7S,MAAA,EAAA8S,GAAA,kBAGF9S,eANEA,cAAA0D,EAAA+O,YAAA,MAGAzS,cAAA0D,EAAAiP,YAAA,sBCKYzL,KAAajH,MAAAsH,cAAA,WAEdiL,CAAiC,8CCR1CxS,MAAA,WAIEA,MAAA,mBAAAA,MAAA2D,GAAA,MAAA0B,EAAArF,QAAA,OAAAA,MAASqF,EAAA0N,WAAU,GAEnB/S,MAAA,cAAUA,MAAA,UACZA,kCAPKA,YAAA,oCAAAqF,EAAA2N,QAAA,GAAA3N,EAAA4N,iBAAA,uGAYHjT,MADF,UACEA,CAD2C,cACjCA,MAAA,GACZA,gCADYA,MAAA,GAAAA,MAAAqF,EAAA2N,QAAA,YCKT,IAAME,GAA+B,MAAtC,MAAOA,EAVbzV,cAgBEC,KAAAuV,kBAAmB,EAInBrD,OAAOhL,GACLlH,KAAKkH,OAASA,EACdlH,KAAKsV,QAAUpO,EAAOuN,MACtBzU,KAAK4R,MAAQ1K,EAAOpF,KAEpB9B,KAAKuV,kBAAoBE,IAAiBC,QAAQ1V,KAAK4R,MAAMU,UAC/D,CAEAlD,QAAQlI,GACN,OAAO,CACT,CAEAmO,WACMrV,KAAKuV,kBACPvV,KAAKkH,OAAOyO,WAAW3V,KAAK4R,MAChC,CAAC1Q,SAAAlB,KAAA,mBAAAmB,iBAzBUqU,EAA+B,EAAAtU,SAAAlB,KAAA,UAAA6T,EAAAtO,IAAA,MAA/BiQ,EAA+BhQ,UAAA,oCAAAG,MAAA,EAAAC,KAAA,EAAAC,OAAA,kLAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDpB5CzD,MAAA,WAYEA,MAXA,EAAAsT,GAAA,YAWAtT,CAVC,EAAAuT,GAAA,aAgBHvT,eAjBEA,cAAA0D,EAAA4L,MAAAC,SAAAiE,SAAA,qBCcM1B,KAAe7R,KACfiH,KAAaH,KACbkL,MAAc9N,OAAA,2PAGT+O,CAA+B,qBCLrC,IAAMO,GAA8B,MAArC,MAAOA,EAIX7D,OAAOhL,GACLlH,KAAKyU,MAAQvN,EAAOuN,MACpBzU,KAAKgW,QAAOC,MAAkBjW,KAAKyU,MACrC,CAEArF,QAAQlI,GACN,OAAO,CACT,CAAChG,SAAAlB,KAAA,mBAAAmB,iBAXU4U,EAA8B,EAAA7U,SAAAlB,KAAA,UAAA6T,EAAAtO,IAAA,MAA9BwQ,EAA8BvQ,UAAA,mCAAAG,MAAA,EAAAC,KAAA,EAAAC,OAAA,iCAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ICdzCzD,MADF,UACEA,CAD0C,cAChCA,MAAA,GACZA,iBAF4BA,MAAA,QAAA0D,EAAAyO,OAChBnS,MAAA,GAAAA,MAAA0D,EAAAgQ,sBDUJxM,KAAajH,KACbgS,MAAc1K,cAAA,WAGTkM,CAA8B,oJEJ3C,MAAMG,GACFC,aAAaC,EAAS3U,EAAkB4U,EAAoBC,EAAmBC,GAC3EH,EAAQI,iBAAiB,CAACC,EAAQC,EAAuBC,KACrD,IAAIC,EACAC,EACJ,GAA4B,MAAxBJ,EAAOK,cAAuB,CAC9B,MAAMC,EAAgBV,EAAmBI,EAAQC,EAAuBC,GACxEC,EAAOnV,EAAiBuV,mBAAmBD,EAAcE,YAAaF,EAAcG,QAASH,EAAcI,OAC3GN,EAAYO,IAAuBC,QACvC,MACyB,MAAhBV,GACLlV,EAAiB6V,OAAOZ,GACxBG,EAAYO,IAAuBG,UAGnCX,EAAOnV,EAAiBiK,IAAIgL,GAC5BjV,EAAiB+V,KAAKZ,EAAMD,GAC5BE,EAAYO,IAAuBK,OAEnClB,GACAA,EAAgB,CACZW,QAASN,GAAMM,QACfL,YACAJ,UACH,EAGb,CACAiB,SAAW,yCCvCgD,MAAAhS,GAAA,2CAAAW,GAAA,yCAAAsR,GAAA5R,EAAAC,GAAA,EAAAD,GAgC8BzD,MAAE,IAgkE5E,UAAAsV,GAAA7R,EAAAC,GAAA,EAAAD,IAhkE0EzD,MAAE,aAAFA,MAAE,KAAFA,cAAE,aAAFA,MAAE,IAAFA,CAwkE5D,KAxkE4DA,cAAE,aAAFA,MAAE,KAAFA,QA6kE/E,UAAAuV,GAAA9R,EAAAC,GAAA,EAAAD,GA7kE+EzD,MAAE,IAAFA,CA+kExD,IA/kEwDA,CAglE9D,IAhlE8DA,CAilExD,IACA,CA9lErC,MAAMwV,EAAY,IAAIC,MAAe,aAIrC,IAIMC,EAAU,MAAhB,MAAMA,EAEFlS,YAAWzF,OAAO4X,OAClBlY,cAAgB,CAChBmB,iBAAW,SAAAC,GAAA,WAAAA,GAAwF6W,EAAU,EAC7G9W,iBADyFoB,MAAE,CAAAoC,KACJsT,EAAUxS,UAAA,yBACpG,OANKwS,CAAU,KAiBVE,EAAgB,MAAtB,MAAMA,EAEFpS,YAAWzF,OAAO4X,OAClBlY,cAAgB,CAChBmB,iBAAW,SAAAC,GAAA,WAAAA,GAAwF+W,EAAgB,EACnHhX,iBAlByFoB,MAAE,CAAAoC,KAkBJwT,EAAgB1S,UAAA,+BAC1G,OANK0S,CAAgB,KAiBhBC,GAAgB,MAAtB,MAAMA,EAEFrS,YAAWzF,OAAO4X,OAClBlY,cAAgB,CAChBmB,iBAAW,SAAAC,GAAA,WAAAA,GAAwFgX,EAAgB,EACnHjX,iBAnCyFoB,MAAE,CAAAoC,KAmCJyT,EAAgB3S,UAAA,+BAC1G,OANK2S,CAAgB,KAiBhBC,EAAY,MAAlB,MAAMA,EACFC,UAAShY,OAAOyX,EAAW,CAAEQ,UAAU,IACvCC,mBAAoB,EAEpB,QAAInQ,GACA,OAAOpI,KAAKwY,KAChB,CACA,QAAIpQ,CAAKA,GACLpI,KAAKyY,cAAcrQ,EACvB,CACAoQ,MAEA,UAAIE,GACA,OAAO1Y,KAAK2Y,OAChB,CACA,UAAID,CAAOjE,GACHA,IAAUzU,KAAK2Y,UACf3Y,KAAK2Y,QAAUlE,EACfzU,KAAKuY,mBAAoB,EAEjC,CACAI,SAAU,EAMV,aAAIC,GACA,OAAO5Y,KAAK6Y,UAChB,CACA,aAAID,CAAUnE,GACNA,IAAUzU,KAAK6Y,aACf7Y,KAAK6Y,WAAapE,EAClBzU,KAAKuY,mBAAoB,EAEjC,CACAM,YAAa,EAEbC,KAEAC,WAEAC,WAMAC,qBAKAC,oBACAnZ,cAAgB,CAEhBoZ,mBACI,MAAMA,EAAmBnZ,KAAKuY,kBAC9B,OAAAvY,KAAKoZ,qBACED,CACX,CAEAC,qBACIpZ,KAAKuY,mBAAoB,CAC7B,CAQAc,4BACIrZ,KAAKkZ,oBAAsB,CAAC,cAAclZ,KAAKiZ,uBACnD,CAOAR,cAAchE,GAGNA,IACAzU,KAAKwY,MAAQ/D,EACbzU,KAAKiZ,qBAAuBxE,EAAM6E,QAAQ,gBAAiB,KAC3DtZ,KAAKqZ,4BAEb,CACAnY,iBAAW,SAAAC,GAAA,WAAAA,GAAwFiX,EAAY,EAC/GlX,iBA1IyFoB,MAAE,CAAAoC,KA0IJ0T,EAAY5S,UAAA,yBAAA2L,eAAA,SAAApL,EAAAC,EAAAoL,GAAwhB,GAAxhB,EAAArL,IA1IVzD,MAAE8O,EA0I4V4G,EAAU,GA1IxW1V,MAAE8O,EA0Imb8G,EAAgB,GA1Irc5V,MAAE8O,EA0IghB+G,GAAgB,MAAApS,EAAA,KAAAwT,EA1IliBjX,MAAEiX,EAAFjX,WAAE0D,EAAA8S,KAAAS,EAAAC,OAAFlX,MAAEiX,EAAFjX,WAAE0D,EAAA+S,WAAAQ,EAAAC,OAAFlX,MAAEiX,EAAFjX,WAAE0D,EAAAgT,WAAAO,EAAAC,MAAA,GAAAlY,OAAA,CAAA8G,KAAA,0BAAAsQ,OAAA,qBA0IiIe,OAAgBb,UAAA,2BAAyCa,QAAgBC,SAAA,CA1I5MpX,MA0I4N,CAAC,CAAEqX,QAAS,6BAA8BC,YAAaxB,QAC/W,OA5FKA,CAAY,KAuHlB,MAAMyB,GACF9Z,YAAY+Z,EAAWC,GACnBA,EAAWpK,cAAcO,UAAUzD,OAAOqN,EAAUZ,oBACxD,EAEJ,IACMc,GAAa,MAAnB,MAAMA,UAAsBH,GACxB9Z,cACIkL,OAAA,EAAM5K,OAAO+X,IAAY,EAAG/X,OAAOwO,OACvC,CACA3N,iBAAW,SAAAC,GAAA,WAAAA,GAAwF6Y,EAAa,EAChH9Y,iBAjLyFoB,MAAE,CAAAoC,KAiLJsV,EAAaxU,UAAA,kDAAAyU,UAAA,QAAsG,eAAc,qBAAAP,SAAA,CAjL/HpX,SAkL5F,OANK0X,CAAa,KAyCbE,GAAO,MAAb,MAAMA,UAAgBL,GAClB9Z,cACI,MAAM+Z,KAAYzZ,OAAO+X,GACnB2B,KAAa1Z,OAAOwO,OAC1B5D,MAAM6O,EAAWC,GACjB,MAAMI,EAAOL,EAAUzB,QAAQ+B,eAC3BD,GACAJ,EAAWpK,cAAc0K,aAAa,OAAQF,EAEtD,CACAjZ,iBAAW,SAAAC,GAAA,WAAAA,GAAwF+Y,EAAO,EAC1GhZ,iBAhOyFoB,MAAE,CAAAoC,KAgOJwV,EAAO1U,UAAA,oCAAAyU,UAAA,eAAAP,SAAA,CAhOLpX,SAiO5F,OAZK4X,CAAO,KAgCPI,GAAU,MAAhB,MAAMA,EACFxU,YAAWzF,OAAO4X,OAClBsC,YAAWla,OAAOma,OAElBC,QAEAC,eACA3a,cAAgB,CAChB4a,YAAYvE,GAGR,IAAKpW,KAAK0a,eAAgB,CACtB,MAAMD,EAAWrE,EAAQqE,SAAcrE,EAAQqE,QAAWG,cAAiB,GAC3E5a,KAAK0a,eAAiB1a,KAAKua,SAASM,KAAKJ,GAASK,SAClD9a,KAAK0a,eAAeK,KAAKN,EAC7B,CACJ,CAKAO,iBACI,OAAOhb,KAAK0a,eAAeK,KAAK/a,KAAKya,QACzC,CAEAQ,oBAAoBC,GAChB,OAAIlb,gBAAgBmb,EACTD,EAAOnC,WAAWjT,SAEzB9F,gBAAgBob,GACTF,EAAOlC,WAAWlT,SAGlBoV,EAAOpC,KAAKhT,QAE3B,CACA5E,iBAAW,SAAAC,GAAA,WAAAA,GAAwFmZ,EAAU,EAC7GpZ,iBA1RyFoB,MAAE,CAAAoC,KA0RJ4V,EAAUZ,SAAA,CA1RRpX,SA2R5F,OAtCKgY,CAAU,KA8CVa,EAAe,MAArB,MAAMA,UAAwBb,GAC1BjC,UAAShY,OAAOyX,EAAW,CAAEQ,UAAU,IACvCC,mBAAoB,EAEpB,UAAIG,GACA,OAAO1Y,KAAK2Y,OAChB,CACA,UAAID,CAAOjE,GACHA,IAAUzU,KAAK2Y,UACf3Y,KAAK2Y,QAAUlE,EACfzU,KAAKuY,mBAAoB,EAEjC,CACAI,SAAU,EACV5Y,cACIkL,OAAA,EAAM5K,OAAO4X,QAAW,EAAG5X,OAAOma,OACtC,CAGAG,YAAYvE,GACRnL,MAAM0P,YAAYvE,EACtB,CAEA+C,mBACI,MAAMA,EAAmBnZ,KAAKuY,kBAC9B,OAAAvY,KAAKoZ,qBACED,CACX,CAEAC,qBACIpZ,KAAKuY,mBAAoB,CAC7B,CACArX,iBAAW,SAAAC,GAAA,WAAAA,GAAwFga,EAAe,EAClHja,iBApUyFoB,MAAE,CAAAoC,KAoUJyW,EAAe3V,UAAA,4BAAAlE,OAAA,CAAAmZ,QAAA,gCAAA/B,OAAA,oCAAoJe,QAAgBC,SAAA,CApUjLpX,eAqU5F,OAlCK6Y,CAAe,KAiDfC,GAAe,MAArB,MAAMA,UAAwBd,GAC1BjC,UAAShY,OAAOyX,EAAW,CAAEQ,UAAU,IACvCC,mBAAoB,EAEpB,UAAIG,GACA,OAAO1Y,KAAK2Y,OAChB,CACA,UAAID,CAAOjE,GACHA,IAAUzU,KAAK2Y,UACf3Y,KAAK2Y,QAAUlE,EACfzU,KAAKuY,mBAAoB,EAEjC,CACAI,SAAU,EACV5Y,cACIkL,OAAA,EAAM5K,OAAO4X,QAAW,EAAG5X,OAAOma,OACtC,CAGAG,YAAYvE,GACRnL,MAAM0P,YAAYvE,EACtB,CAEA+C,mBACI,MAAMA,EAAmBnZ,KAAKuY,kBAC9B,OAAAvY,KAAKoZ,qBACED,CACX,CAEAC,qBACIpZ,KAAKuY,mBAAoB,CAC7B,CACArX,iBAAW,SAAAC,GAAA,WAAAA,GAAwFia,EAAe,EAClHla,iBArXyFoB,MAAE,CAAAoC,KAqXJ0W,EAAe5V,UAAA,4BAAAlE,OAAA,CAAAmZ,QAAA,gCAAA/B,OAAA,oCAAoJe,QAAgBC,SAAA,CArXjLpX,eAsX5F,OAlCK8Y,CAAe,KAkDfC,GAAS,MAAf,MAAMA,UAAkBf,GACpBjC,UAAShY,OAAOyX,EAAW,CAAEQ,UAAU,IAOvCgD,KACAvb,cAGIkL,OAAA,EAAM5K,OAAO4X,QAAW,EAAG5X,OAAOma,OACtC,CACAtZ,iBAAW,SAAAC,GAAA,WAAAA,GAAwFka,EAAS,EAC5Gna,iBArZyFoB,MAAE,CAAAoC,KAqZJ2W,EAAS7V,UAAA,sBAAAlE,OAAA,CAAAmZ,QAAA,iCAAAa,KAAA,4BAAA5B,SAAA,CArZPpX,SAsZ5F,OAhBK+Y,CAAS,KA+BTE,EAAa,MAAnB,MAAMA,EACFC,kBAAiBnb,OAAOE,OAExBkb,MAEAvE,QAQAhW,4BAA8B,KAC9BnB,cACIwb,EAAcG,qBAAuB1b,IACzC,CACA2b,cAGQJ,EAAcG,uBAAyB1b,OACvCub,EAAcG,qBAAuB,KAE7C,CACAxa,iBAAW,SAAAC,GAAA,WAAAA,GAAwFoa,EAAa,EAChHra,iBA9byFoB,MAAE,CAAAoC,KA8bJ6W,EAAa/V,UAAA,4BACvG,OA1BK+V,CAAa,KAkCbK,GAAY,MAAlB,MAAMA,EACF1a,iBAAW,SAAAC,GAAA,WAAAA,GAAwFya,EAAY,EAC/G1a,iBAzcyFoB,MAAE,CAAAoC,KAycJkX,EAAYpW,UAAA,gDAAAyU,UAAA,QAAoG,MAAK,oBAAAtU,MAAA,EAAAC,KAAA,EAAAC,OAAA,uBAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GAzcnHzD,MAAE,IAyc6N,EAAAuZ,aAAA,CAA6DN,GAAa1R,cAAA,IACrY,OAHK+R,CAAY,KA0CZE,GAAM,MAAZ,MAAMA,EACF5a,iBAAW,SAAAC,GAAA,WAAAA,GAAwF2a,EAAM,EACzG5a,iBAnfyFoB,MAAE,CAAAoC,KAmfJoX,EAAMtW,UAAA,kCAAAyU,UAAA,QAAsF,MAAK,aAAAtU,MAAA,EAAAC,KAAA,EAAAC,OAAA,uBAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GAnf/FzD,MAAE,IAmfkM,EAAAuZ,aAAA,CAA6DN,GAAa1R,cAAA,IAC1W,OAHKiS,CAAM,KAqBNC,GAAY,MAAlB,MAAMA,EACF9E,eAAc5W,OAAO4X,OACrB+D,kBAAoB,kBACpBjc,cAAgB,CAChBmB,iBAAW,SAAAC,GAAA,WAAAA,GAAwF4a,EAAY,EAC/G7a,iBA3gByFoB,MAAE,CAAAoC,KA2gBJqX,EAAYvW,UAAA,sCACtG,OANKuW,CAAY,KAsBlB,MAAME,GAAoB,CAAC,MAAO,SAAU,OAAQ,SAKpD,MAAMC,GACFC,mBACAC,cACAC,WACAC,8BACAC,UACAC,kBACAC,eACAC,eAAiB,IAAIC,QACrBC,gBAAkBC,YAAYC,eACxB,IAAID,WAAWC,eAAeC,GAAW/c,KAAKgd,mBAAmBD,IACjE,KACNE,oCAAsC,GACtCC,4BAA8B,KAC9BC,kBAAoB,GACpBC,eACAC,YAAa,EAgBbtd,YAAYoc,EAAoBC,EAAeC,GAAa,EAAMC,GAAgC,EAAMC,EAAWC,EAAmBC,GAClIzc,KAAKmc,mBAAqBA,EAC1Bnc,KAAKoc,cAAgBA,EACrBpc,KAAKqc,WAAaA,EAClBrc,KAAKsc,8BAAgCA,EACrCtc,KAAKuc,UAAYA,EACjBvc,KAAKwc,kBAAoBA,EACzBxc,KAAKyc,eAAiBA,EACtBzc,KAAKod,eAAiB,CAClBE,IAAO,GAAGlB,oBACVmB,OAAU,GAAGnB,uBACboB,KAAQ,GAAGpB,qBACXqB,MAAS,GAAGrB,sBAEpB,CAOAsB,uBAAuBC,EAAMC,IACrBA,EAAiBC,SAAS,SAAWD,EAAiBC,SAAS,WAC/D7d,KAAK8d,mCAAmCH,GAE5C,MAAMI,EAAkB,GACxB,UAAWC,KAAOL,EAGVK,EAAIC,WAAaD,EAAIE,cAGzBH,EAAgBI,KAAKH,KAAQI,MAAMC,KAAKL,EAAIM,YAGhDC,SAAgB,CACZC,MAAOA,KACH,UAAWC,KAAWV,EAClB/d,KAAK0e,mBAAmBD,EAASb,EAAgB,GAG1D,CACCe,SAAU3e,KAAKyc,gBAEvB,CAaAmC,oBAAoBjB,EAAMkB,EAAmBC,EAAiBC,GAAwB,EAAMC,GAAS,GAEjG,IAAKrB,EAAK5K,SACL/S,KAAKqc,aACJwC,EAAkBI,KAAK/S,GAASA,KAAU4S,EAAgBG,KAAK/S,GAASA,GAG1E,OAFAlM,KAAKwc,mBAAmB0C,qBAAqB,CAAEC,MAAO,UACtDnf,KAAKwc,mBAAmB4C,wBAAwB,CAAED,MAAO,KAI7D,MAAME,EAAW1B,EAAK,GAChB2B,EAAWD,EAASf,SAASvL,OAC7BwM,EAA2B,QAAnBvf,KAAKuc,UACbiD,EAAQD,EAAQ,QAAU,OAC1B1S,EAAM0S,EAAQ,OAAS,QACvBE,EAAkBZ,EAAkBa,aAAY,GAChDC,EAAiBb,EAAgBc,SAAQ,GAC/C,IAAIC,EACAC,GACAC,GACAf,GACAhf,KAAKggB,+BAA+B,CAChCrC,KAAM,IAAIA,GACVkB,kBAAmB,IAAIA,GACvBC,gBAAiB,IAAIA,MACxB,EAELP,OAAgB,CACZ0B,UAAWA,KACPJ,EAAa7f,KAAKkgB,eAAeb,EAAUN,GAC3Ce,GAAiB9f,KAAKmgB,+BAA+BN,EAAYhB,GACjEkB,GAAe/f,KAAKogB,6BAA6BP,EAAYf,EAAe,EAEhFN,MAAOA,KACH,UAAWR,KAAOL,EACd,QAAS0C,EAAI,EAAGA,EAAIf,EAAUe,IAAK,CAC/B,MAAMvH,GAAOkF,EAAIM,SAAS+B,GACtBxB,EAAkBwB,IAClBrgB,KAAKsgB,gBAAgBxH,GAAM0G,EAAOM,GAAeO,GAAIA,IAAMZ,GAE3DX,EAAgBuB,IAChBrgB,KAAKsgB,gBAAgBxH,GAAMjM,EAAKkT,GAAaM,GAAIA,IAAMV,EAE/D,CAEA3f,KAAKwc,mBAAqBqD,EAAWZ,KAAKsB,KAAOA,KACjDvgB,KAAKwc,kBAAkB0C,qBAAqB,CACxCC,OAA2B,IAApBM,EACD,GACAI,EACGW,MAAM,EAAGf,EAAkB,GAC3BzR,IAAI,CAACjM,EAAOoV,IAAW0H,EAAkB1H,GAASpV,EAAQ,QAEvE/B,KAAKwc,kBAAkB4C,wBAAwB,CAC3CD,OAA0B,IAAnBQ,EACD,GACAE,EACGW,MAAMb,GACN3R,IAAI,CAACjM,EAAOoV,IAAU2H,EAAgB3H,EAAQwI,GAAkB5d,EAAQ,MACxE0e,YACZ,GAGV,CACC9B,SAAU3e,KAAKyc,gBAEvB,CAYAiE,UAAUC,EAAaC,EAAcC,GAEjC,IAAK7gB,KAAKqc,WACN,OAKJ,MAAMsB,EAAoB,WAAbkD,EAAwBF,EAAYH,QAAQC,UAAYE,EAC/DG,EAAsB,WAAbD,EAAwBD,EAAaJ,QAAQC,UAAYG,EAElEG,EAAgB,GAChBC,EAAoB,GACpBC,EAAkB,IAGxB1C,SAAgB,CACZ0B,UAAWA,KACP,QAASiB,EAAW,EAAGC,EAAe,EAAGD,EAAWvD,EAAK5K,OAAQmO,IAAY,CACzE,IAAKJ,EAAOI,GACR,SAEJH,EAAcG,GAAYC,EAC1B,MAAMnD,EAAML,EAAKuD,GACjBD,EAAgBC,GAAYlhB,KAAKmc,mBAC3BiC,MAAMC,KAAKL,EAAIM,UACf,CAACN,GACP,MAAMoD,EAASphB,KAAKqhB,qBAAqBrD,GAAKoD,OAC9CD,GAAgBC,EAChBJ,EAAkBE,GAAYE,CAClC,GAEJ5C,MAAOA,KACH,MAAM8C,EAAmBR,EAAOpB,aAAY,GAC5C,QAASwB,EAAW,EAAGA,EAAWvD,EAAK5K,OAAQmO,IAAY,CACvD,IAAKJ,EAAOI,GACR,SAEJ,MAAMK,EAASR,EAAcG,GACvBM,EAAqBN,IAAaI,EACxC,UAAW7C,KAAWwC,EAAgBC,GAClClhB,KAAKsgB,gBAAgB7B,EAASoC,EAAUU,EAAQC,EAExD,CACiB,QAAbX,EACA7gB,KAAKwc,mBAAmBiF,wBAAwB,CAC5CtC,MAAO6B,EACPU,QAASX,EACTY,SAAUV,IAIdjhB,KAAKwc,mBAAmBoF,wBAAwB,CAC5CzC,MAAO6B,EACPU,QAASX,EACTY,SAAUV,GACb,GAGV,CACCtC,SAAU3e,KAAKyc,gBAEvB,CAOAoF,4BAA4BC,EAAclB,GACjC5gB,KAAKmc,uBAIVoC,OAAgB,CACZC,MAAOA,KACH,MAAMuD,EAAQD,EAAa7R,cAAc,SACrC8R,IACInB,EAAa3B,KAAK/S,IAAUA,GAC5BlM,KAAK0e,mBAAmBqD,EAAO,CAAC,WAGhC/hB,KAAKsgB,gBAAgByB,EAAO,SAAU,GAAG,GAAK,GAI3D,CACCpD,SAAU3e,KAAKyc,gBAEvB,CAEAuF,UACQhiB,KAAKkd,6BACL+E,aAAajiB,KAAKkd,6BAEtBld,KAAK4c,iBAAiBsF,aACtBliB,KAAKqd,YAAa,CACtB,CAMAqB,mBAAmBD,EAASb,GACxB,GAAKa,EAAQvO,UAAUiS,SAASniB,KAAKoc,eAArC,CAGA,UAAWgG,KAAOxE,EACda,EAAQrO,MAAMgS,GAAO,GACrB3D,EAAQvO,UAAUoH,OAAOtX,KAAKod,eAAegF,IAM5BnG,GAAkBgD,KAAKmD,IAAyC,IAAlCxE,EAAiBgC,QAAQwC,IAAe3D,EAAQrO,MAAMgS,IAErG3D,EAAQrO,MAAMiS,OAASriB,KAAKsiB,qBAAqB7D,IAIjDA,EAAQrO,MAAMiS,OAAS,GACnBriB,KAAKsc,gCACLmC,EAAQrO,MAAMyQ,SAAW,IAE7BpC,EAAQvO,UAAUoH,OAAOtX,KAAKoc,eApB9B,CAsBR,CAMAkE,gBAAgB7B,EAAS2D,EAAKG,EAAUC,GACpC/D,EAAQvO,UAAUzD,IAAIzM,KAAKoc,eACvBoG,GACA/D,EAAQvO,UAAUzD,IAAIzM,KAAKod,eAAegF,IAE9C3D,EAAQrO,MAAMgS,GAAO,GAAGG,MACxB9D,EAAQrO,MAAMiS,OAASriB,KAAKsiB,qBAAqB7D,GAC7Cze,KAAKsc,gCACLmC,EAAQrO,MAAMqS,SAAW,+CAEjC,CAYAH,qBAAqB7D,GACjB,MAAMiE,EAAmB,CACrBpF,IAAK,IACLC,OAAQ,GACRC,KAAM,EACNC,MAAO,GAEX,IAAI4E,EAAS,EAIb,UAAWD,KAAOnG,GACVwC,EAAQrO,MAAMgS,KACdC,GAAUK,EAAiBN,IAGnC,OAAOC,EAAS,GAAGA,IAAW,EAClC,CAEAnC,eAAelC,EAAKe,GAAwB,GACxC,IAAKA,GAAyB/e,KAAKmd,kBAAkBpK,OACjD,OAAO/S,KAAKmd,kBAEhB,MAAM0C,EAAa,GACb8C,EAAgB3E,EAAIM,SAC1B,QAAS+B,EAAI,EAAGA,EAAIsC,EAAc5P,OAAQsN,IAEtCR,EAAW1B,KAAKne,KAAKqhB,qBADRsB,EAActC,IACqBte,OAEpD,OAAA/B,KAAKmd,kBAAoB0C,EAClBA,CACX,CAMAM,+BAA+ByC,EAAQhC,GACnC,MAAMiC,EAAY,GAClB,IAAIC,EAAe,EACnB,QAASzC,EAAI,EAAGA,EAAIuC,EAAO7P,OAAQsN,IAC3BO,EAAaP,KACbwC,EAAUxC,GAAKyC,EACfA,GAAgBF,EAAOvC,IAG/B,OAAOwC,CACX,CAMAzC,6BAA6BwC,EAAQhC,GACjC,MAAMiC,EAAY,GAClB,IAAIC,EAAe,EACnB,QAASzC,EAAIuC,EAAO7P,OAAQsN,EAAI,EAAGA,IAC3BO,EAAaP,KACbwC,EAAUxC,GAAKyC,EACfA,GAAgBF,EAAOvC,IAG/B,OAAOwC,CACX,CAKAxB,qBAAqB5C,GACjB,MAAMsE,EAAa/iB,KAAK0c,eAAehR,IAAI+S,GAC3C,GAAIsE,EACA,OAAOA,EAEX,MAAMC,EAAavE,EAAQwE,wBACrBC,EAAO,CAAEnhB,MAAOihB,EAAWjhB,MAAOqf,OAAQ4B,EAAW5B,QAC3D,OAAKphB,KAAK4c,kBAGV5c,KAAK0c,eAAeyG,IAAI1E,EAASyE,GACjCljB,KAAK4c,gBAAgBwG,QAAQ3E,EAAS,CAAE4E,IAAK,gBACtCH,CACX,CAKAlD,+BAA+B9Y,GAC3BlH,KAAK8d,mCAAmC5W,EAAOyW,MAE1C3d,KAAKkd,6BACNld,KAAKid,oCAAoCkB,KAAKjX,EAEtD,CAEA4W,mCAAmCH,GAC/B,MAAM2F,EAAU,IAAIC,IAAI5F,GACxB,UAAWlW,KAAUzH,KAAKid,oCACtBxV,EAAOkW,KAAOlW,EAAOkW,KAAKhQ,OAAOqQ,IAAQsF,EAAQE,IAAIxF,IAEzDhe,KAAKid,oCAAsCjd,KAAKid,oCAAoCtP,OAAOlG,KAAYA,EAAOkW,KAAK5K,OACvH,CAEAiK,mBAAmBD,GACf,IAAI0G,GAAoB,EACxB,UAAWC,KAAS3G,EAAS,CACzB,MAAM4G,EAAWD,EAAME,eAAe7Q,OAChC,CACEhR,MAAO2hB,EAAME,cAAc,GAAGC,WAC9BzC,OAAQsC,EAAME,cAAc,GAAGE,WAEjC,CACE/hB,MAAO2hB,EAAMK,YAAYhiB,MACzBqf,OAAQsC,EAAMK,YAAY3C,QAE9BuC,EAAS5hB,QAAU/B,KAAK0c,eAAehR,IAAIgY,EAAMM,SAASjiB,OAC1DkiB,GAAOP,EAAMM,UACbP,GAAoB,GAExBzjB,KAAK0c,eAAeyG,IAAIO,EAAMM,OAAQL,EAC1C,CACIF,GAAqBzjB,KAAKid,oCAAoClK,SAC1D/S,KAAKkd,6BACL+E,aAAajiB,KAAKkd,6BAEtBld,KAAKkd,4BAA8BgH,WAAW,KAC1C,IAAIlkB,KAAKqd,WAGT,WAAW5V,KAAUzH,KAAKid,oCACtBjd,KAAK4e,oBAAoBnX,EAAOkW,KAAMlW,EAAOoX,kBAAmBpX,EAAOqX,iBAAiB,GAAM,GAElG9e,KAAKid,oCAAsC,GAC3Cjd,KAAKkd,4BAA8B,OACpC,GAEX,EAEJ,SAAS+G,GAAOxF,GACZ,MAAO,CAAC,WAAY,kBAAmB,mBAAmBQ,KAAKkF,GAAS1F,EAAQvO,UAAUiS,SAASgC,GACvG,CA+DA,MAAMC,GAA8B,IAAIrM,MAAe,WAEvD,IAmBMsM,GAAa,MAAnB,MAAMA,EACFC,iBAAgBjkB,OAAOE,OACvBwZ,cAAa1Z,OAAOwO,OACpB9O,cACI,MAAMwkB,KAAQlkB,OAAOyX,GACrByM,EAAMC,WAAaxkB,KACnBukB,EAAME,iBACV,CACAvjB,iBAAW,SAAAC,GAAA,WAAAA,GAAwFkjB,EAAa,EAChHnjB,iBA3kCyFoB,MAAE,CAAAoC,KA2kCJ2f,EAAa7e,UAAA,wBACvG,OAVK6e,CAAa,KAqBbK,GAAe,MAArB,MAAMA,EACFJ,iBAAgBjkB,OAAOE,OACvBwZ,cAAa1Z,OAAOwO,OACpB9O,cACI,MAAMwkB,KAAQlkB,OAAOyX,GACrByM,EAAMI,iBAAmB3kB,KACzBukB,EAAME,iBACV,CACAvjB,iBAAW,SAAAC,GAAA,WAAAA,GAAwFujB,EAAe,EAClHxjB,iBAhmCyFoB,MAAE,CAAAoC,KAgmCJggB,EAAelf,UAAA,8BACzG,OAVKkf,CAAe,KAqBfE,GAAe,MAArB,MAAMA,EACFN,iBAAgBjkB,OAAOE,OACvBwZ,cAAa1Z,OAAOwO,OACpB9O,cACI,MAAMwkB,KAAQlkB,OAAOyX,GACrByM,EAAMM,iBAAmB7kB,KACzBukB,EAAME,iBACV,CACAvjB,iBAAW,SAAAC,GAAA,WAAAA,GAAwFyjB,EAAe,EAClH1jB,iBArnCyFoB,MAAE,CAAAoC,KAqnCJkgB,EAAepf,UAAA,8BACzG,OAVKof,CAAe,KAsBfE,GAAe,MAArB,MAAMA,EACFR,iBAAgBjkB,OAAOE,OACvBwZ,cAAa1Z,OAAOwO,OACpB9O,cACI,MAAMwkB,KAAQlkB,OAAOyX,GACrByM,EAAMQ,iBAAmB/kB,KACzBukB,EAAME,iBACV,CACAvjB,iBAAW,SAAAC,GAAA,WAAAA,GAAwF2jB,EAAe,EAClH5jB,iBA3oCyFoB,MAAE,CAAAoC,KA2oCJogB,EAAetf,UAAA,8BACzG,OAVKsf,CAAe,KAuBfE,GAAQ,MAAd,MAAMA,EACFzK,YAAWla,OAAOma,OAClByK,sBAAqB5kB,OAAOG,OAC5B0kB,eAAc7kB,OAAOwO,OACrBsW,QAAO9kB,OAAO+kB,KAAgB,CAAE9M,UAAU,IAC1C+M,aAAYhlB,OAAOilB,MACnBC,iBAAgBllB,OAAOmlB,KACvBC,kBAAiBplB,OAAOqlB,OACxBC,8BAA6BtlB,OAAO+jB,GAA6B,CAAE9L,UAAU,EAAMsN,UAAU,IAC7FC,aAAYxlB,OAAOylB,OAEnBC,MAEAC,WAAa,IAAIC,KAEjBC,YAEAC,0BAMAC,kBAAoB,IAAIC,IAKxBC,SAMAC,eAMAC,eAEAC,YAEAC,eAMAC,kBAAoB,IAAIpD,IAMxBqD,eAAiB,IAAIrD,IAMrBsD,qBAAuB,IAAItD,IAM3BuD,qBAAuB,IAAIvD,IAE3BwD,iBAKAC,sBAAuB,EAKvBC,sBAAuB,EAKvBC,8BAA+B,EAM/BC,6BAA8B,EAc9BC,qBAAuB,IAAIf,IAE3BlK,mBAKAkL,cAKAC,eAAiB,mBAMjBC,8BAA+B,EAE/BC,UAEAC,qBAAsB,EAEtBC,gBAAiB,EAEjBC,iBAAkB,EAElBvN,eAEI,QAA+BwN,IAA3B5nB,KAAK6nB,kBAAiC,CAGtC,MAAMC,EAAY9nB,KAAKklB,YAAYvV,cAAcoY,aAAa,QAC9D,MAAqB,SAAdD,GAAsC,aAAdA,EAA2B,WAAa,MAC3E,CACA,OAAO9nB,KAAK6nB,iBAChB,CACAA,uBAAoBD,EAOpB,WAAII,GACA,OAAOhoB,KAAKioB,UAChB,CACA,WAAID,CAAQ3Z,GAIRrO,KAAKioB,WAAa5Z,CACtB,CACA4Z,WAqBA,cAAIC,GACA,OAAOloB,KAAKmoB,WAChB,CACA,cAAID,CAAWA,GACPloB,KAAKmoB,cAAgBD,GACrBloB,KAAKooB,kBAAkBF,EAE/B,CACAC,YAOA,yBAAIE,GACA,OAAOroB,KAAKsoB,sBAChB,CACA,yBAAID,CAAsB5T,GACtBzU,KAAKsoB,uBAAyB7T,EAG1BzU,KAAKwkB,YAAcxkB,KAAKwkB,WAAWF,cAAcvR,SACjD/S,KAAKuoB,uBACLvoB,KAAKwoB,2BAEb,CACAF,wBAAyB,EAKzB,eAAIG,GACA,OAAOzoB,KAAK0oB,YAChB,CACA,eAAID,CAAYhU,GACZzU,KAAK0oB,aAAejU,EAEpBzU,KAAKmnB,6BAA8B,EACnCnnB,KAAKknB,8BAA+B,CACxC,CACAwB,cAAe,EAKfC,eAAiB,IAAIC,MASrBC,WAAa,IAAIC,KAAgB,CAC7BtJ,MAAO,EACP3S,IAAKkc,OAAOC,YAGhBxE,WACAG,iBACAE,iBACAE,iBAKAkE,mBAEAC,gBAEAC,sBAEAC,sBAEAC,WACAC,aAAYjpB,OAAOkpB,OACnBxpB,eAEI,EADaM,OAAO,IAAImpB,MAAmB,QAAS,CAAElR,UAAU,KAE5DtY,KAAKklB,YAAYvV,cAAc0K,aAAa,OAAQ,SAExDra,KAAKwnB,WAAaxnB,KAAKqlB,UAAUoE,UACjCzpB,KAAKmc,mBAAiE,UAA5Cnc,KAAKklB,YAAYvV,cAAc+Z,SAIzD1pB,KAAKymB,YAAczmB,KAAKua,SAASM,KAAK,IAAIC,OAAO,CAAC6O,EAAIC,IAC3C5pB,KAAKgoB,QAAUhoB,KAAKgoB,QAAQ4B,EAAQC,UAAWD,EAAQ9nB,MAAQ8nB,EAE9E,CACAE,WACI9pB,KAAK+pB,qBACL/pB,KAAKylB,eACAuE,SACAtc,QAAKuc,MAAUjqB,KAAKgmB,aACpBrZ,UAAU,KACX3M,KAAKmnB,6BAA8B,GAE3C,CACA+C,qBACIlqB,KAAK2nB,iBAAkB,CAC3B,CACAwC,wBAEQnqB,KAAKoqB,cACLpqB,KAAKqqB,SAEb,CACA1O,cACI3b,KAAKqnB,eAAerF,UACpB,CACIhiB,KAAKwkB,YAAYF,cACjBtkB,KAAK2kB,kBAAkBL,cACvBtkB,KAAK6kB,kBAAkBP,cACvBtkB,KAAKonB,qBACLpnB,KAAK2mB,kBACL3mB,KAAK4mB,eACL5mB,KAAK6mB,qBACL7mB,KAAK8mB,qBACL9mB,KAAKomB,mBACPkE,QAASC,IACPA,GAAKC,OAAM,GAEfxqB,KAAKumB,eAAiB,GACtBvmB,KAAKwmB,eAAiB,GACtBxmB,KAAK0mB,eAAiB,KACtB1mB,KAAKgmB,WAAWtb,OAChB1K,KAAKgmB,WAAWyE,YAAS,EACrBC,MAAa1qB,KAAKkoB,aAClBloB,KAAKkoB,WAAWhG,WAAWliB,KAEnC,CAWA2qB,aACI3qB,KAAKkmB,YAAclmB,KAAK4qB,oBACxB,MAAMxU,EAAUpW,KAAKymB,YAAY1L,KAAK/a,KAAKkmB,aAC3C,IAAK9P,EAGD,OAFApW,KAAK6qB,wBACL7qB,KAAK2oB,eAAeje,OAGxB,MAAM4Z,EAAgBtkB,KAAKwkB,WAAWF,cACtCtkB,KAAKulB,cAAcpP,aAAaC,EAASkO,EAAe,CAAC7N,EAAQqU,EAAwBnU,IAAiB3W,KAAK+qB,qBAAqBtU,EAAOuU,KAAMrU,GAAeF,GAAUA,EAAOuU,KAAKlpB,KAAOkoB,IACrLA,EAAOnT,YAAcO,IAAuBC,UAAY2S,EAAO9S,SAC/DlX,KAAKirB,2BAA2BjB,EAAOvT,OAAOuU,KAAKE,OAAQlB,EAAO9S,QAAO,GAIjFlX,KAAKmrB,yBAGL/U,EAAQgV,sBAAuB3U,IACX6N,EAAc5Y,IAAI+K,EAAOE,cACjCO,QAAQmU,UAAY5U,EAAOuU,KAAKlpB,OAE5C9B,KAAK6qB,mBACL7qB,KAAK2oB,eAAeje,OACpB1K,KAAKwoB,0BACT,CAEA8C,aAAaxR,GACT9Z,KAAK2mB,kBAAkBla,IAAIqN,EAC/B,CAEAyR,gBAAgBzR,GACZ9Z,KAAK2mB,kBAAkB6E,OAAO1R,EAClC,CAEA2R,UAAUP,GACNlrB,KAAK4mB,eAAena,IAAIye,EAC5B,CAEAQ,aAAaR,GACTlrB,KAAK4mB,eAAe4E,OAAON,EAC/B,CAEAS,gBAAgBC,GACZ5rB,KAAK6mB,qBAAqBpa,IAAImf,GAC9B5rB,KAAKgnB,sBAAuB,CAChC,CAEA6E,mBAAmBD,GACf5rB,KAAK6mB,qBAAqB2E,OAAOI,GACjC5rB,KAAKgnB,sBAAuB,CAChC,CAEA8E,gBAAgBC,GACZ/rB,KAAK8mB,qBAAqBra,IAAIsf,GAC9B/rB,KAAKinB,sBAAuB,CAChC,CAEA+E,mBAAmBD,GACf/rB,KAAK8mB,qBAAqB0E,OAAOO,GACjC/rB,KAAKinB,sBAAuB,CAChC,CAEAgF,aAAaC,GACTlsB,KAAK+mB,iBAAmBmF,CAC5B,CAQAC,8BACI,MAAMC,EAAapsB,KAAKqsB,iBAAiBrsB,KAAK2kB,kBAI9C,GAAI3kB,KAAKmc,mBAAoB,CACzB,MAAMmQ,EAAQC,GAAoBvsB,KAAK2kB,iBAAkB,SACrD2H,IACAA,EAAMlc,MAAMoc,QAAUJ,EAAWrZ,OAAS,GAAK,OAEvD,CACA,MAAM6N,EAAe5gB,KAAKumB,eAAevY,IAAIuc,GAAOA,EAAI7R,QACxD1Y,KAAKqnB,cAAc3J,uBAAuB0O,EAAY,CAAC,QACvDpsB,KAAKqnB,cAAc3G,UAAU0L,EAAYxL,EAAc,OAEvD5gB,KAAKumB,eAAe+D,QAAQC,GAAOA,EAAInR,qBAC3C,CAQAqT,8BACI,MAAMC,EAAa1sB,KAAKqsB,iBAAiBrsB,KAAK6kB,kBAI9C,GAAI7kB,KAAKmc,mBAAoB,CACzB,MAAM4F,EAAQwK,GAAoBvsB,KAAK6kB,iBAAkB,SACrD9C,IACAA,EAAM3R,MAAMoc,QAAUE,EAAW3Z,OAAS,GAAK,OAEvD,CACA,MAAM6N,EAAe5gB,KAAKwmB,eAAexY,IAAIuc,GAAOA,EAAI7R,QACxD1Y,KAAKqnB,cAAc3J,uBAAuBgP,EAAY,CAAC,WACvD1sB,KAAKqnB,cAAc3G,UAAUgM,EAAY9L,EAAc,UACvD5gB,KAAKqnB,cAAcxF,4BAA4B7hB,KAAKklB,YAAYvV,cAAeiR,GAE/E5gB,KAAKwmB,eAAe8D,QAAQC,GAAOA,EAAInR,qBAC3C,CAQAoP,2BACI,MAAM4D,EAAapsB,KAAKqsB,iBAAiBrsB,KAAK2kB,kBACxCgI,EAAW3sB,KAAKqsB,iBAAiBrsB,KAAKwkB,YACtCkI,EAAa1sB,KAAKqsB,iBAAiBrsB,KAAK6kB,mBAKzC7kB,KAAKmc,qBAAuBnc,KAAK0oB,cAAiB1oB,KAAKknB,gCAGxDlnB,KAAKqnB,cAAc3J,uBAAuB,IAAI0O,KAAeO,KAAaD,GAAa,CAAC,OAAQ,UAChG1sB,KAAKknB,8BAA+B,GAGxCkF,EAAW9B,QAAQ,CAACsC,EAAWvM,KAC3BrgB,KAAK6sB,uBAAuB,CAACD,GAAY5sB,KAAKumB,eAAelG,GAAE,GAGnErgB,KAAKsmB,SAASgE,QAAQY,IAElB,MAAMvN,EAAO,GACb,QAAS0C,EAAI,EAAGA,EAAIsM,EAAS5Z,OAAQsN,IAC7BrgB,KAAKkmB,YAAY7F,GAAG6K,SAAWA,GAC/BvN,EAAKQ,KAAKwO,EAAStM,IAG3BrgB,KAAK6sB,uBAAuBlP,EAAMuN,EAAM,GAG5CwB,EAAWpC,QAAQ,CAACwC,EAAWzM,KAC3BrgB,KAAK6sB,uBAAuB,CAACC,GAAY9sB,KAAKwmB,eAAenG,GAAE,GAGnEjC,MAAMC,KAAKre,KAAKomB,kBAAkB2G,UAAUzC,QAAQC,GAAOA,EAAInR,qBACnE,CAEAqL,mBAMSzkB,KAAK0nB,gBACN1nB,KAAKwkB,YACLxkB,KAAK2kB,kBACL3kB,KAAK6kB,kBACL7kB,KAAK+kB,mBACL/kB,KAAK0nB,gBAAiB,EAGlB1nB,KAAKoqB,cACLpqB,KAAKqqB,UAGjB,CAEAD,aACI,OAAOpqB,KAAK0nB,gBAAkB1nB,KAAK2nB,eACvC,CAEA0C,UAEIrqB,KAAKgtB,gBACLhtB,KAAKitB,mBAUL,MAAMC,EADiBltB,KAAKmtB,yBACantB,KAAKgnB,sBAAwBhnB,KAAKinB,qBAE3EjnB,KAAKknB,6BAA+BlnB,KAAKknB,8BAAgCgG,EACzEltB,KAAKmnB,4BAA8B+F,EAE/BltB,KAAKgnB,uBACLhnB,KAAKotB,yBACLptB,KAAKgnB,sBAAuB,GAG5BhnB,KAAKinB,uBACLjnB,KAAKqtB,yBACLrtB,KAAKinB,sBAAuB,GAI5BjnB,KAAKkoB,YAAcloB,KAAKsmB,SAASvT,OAAS,IAAM/S,KAAKmmB,0BACrDnmB,KAAKstB,wBAEAttB,KAAKknB,8BAGVlnB,KAAKwoB,2BAETxoB,KAAKutB,oBACT,CAMA3C,oBACI,MAAMD,EAAa,GAGb6C,EAAuBxtB,KAAKonB,qBAElC,GADApnB,KAAKonB,qBAAuB,IAAIf,KAC3BrmB,KAAK+lB,MACN,OAAO4E,EAIX,QAAStK,EAAI,EAAGA,EAAIrgB,KAAK+lB,MAAMhT,OAAQsN,IAAK,CACxC,IAAIve,EAAO9B,KAAK+lB,MAAM1F,GACtB,MAAMoN,EAAoBztB,KAAK0tB,sBAAsB5rB,EAAMue,EAAGmN,EAAqB9hB,IAAI5J,IAClF9B,KAAKonB,qBAAqB5D,IAAI1hB,IAC/B9B,KAAKonB,qBAAqBjE,IAAIrhB,EAAM,IAAI6a,SAE5C,QAASgR,EAAI,EAAGA,EAAIF,EAAkB1a,OAAQ4a,IAAK,CAC/C,IAAIC,EAAYH,EAAkBE,GAClC,MAAME,EAAQ7tB,KAAKonB,qBAAqB1b,IAAIkiB,EAAU9rB,MAClD+rB,EAAMrK,IAAIoK,EAAU1C,QACpB2C,EAAMniB,IAAIkiB,EAAU1C,QAAQ/M,KAAKyP,GAGjCC,EAAM1K,IAAIyK,EAAU1C,OAAQ,CAAC0C,IAEjCjD,EAAWxM,KAAKyP,EACpB,CACJ,CACA,OAAOjD,CACX,CAMA+C,sBAAsB5rB,EAAM+nB,EAAWgE,GAEnC,OADgB7tB,KAAK8tB,YAAYhsB,EAAM+nB,GACxB7b,IAAIkd,IACf,MAAM6C,EAAmBF,GAASA,EAAMrK,IAAI0H,GAAU2C,EAAMniB,IAAIwf,GAAU,GAC1E,GAAI6C,EAAiBhb,OAAQ,CACzB,MAAM6W,EAAUmE,EAAiBC,QACjCpE,SAAQC,UAAYA,EACbD,CACX,CAEI,MAAO,CAAE9nB,OAAMopB,SAAQrB,YAAU,EAG7C,CAEAoD,mBACIjtB,KAAKomB,kBAAkBoE,QACJyD,GAAiBjuB,KAAKkuB,YAAYluB,KAAKipB,oBAAqBjpB,KAAK2mB,mBACzE2D,QAAQxQ,IACX9Z,KAAKomB,kBAAkB5C,IAAI1J,EAAU1R,MAIzCpI,KAAKomB,kBAAkBjD,IAAIrJ,EAAU1R,KAAM0R,EAAS,EAE5D,CAEAkT,gBACIhtB,KAAKumB,eAAiB0H,GAAiBjuB,KAAKkuB,YAAYluB,KAAKmpB,uBAAwBnpB,KAAK6mB,sBAC1F7mB,KAAKwmB,eAAiByH,GAAiBjuB,KAAKkuB,YAAYluB,KAAKopB,uBAAwBppB,KAAK8mB,sBAC1F9mB,KAAKsmB,SAAW2H,GAAiBjuB,KAAKkuB,YAAYluB,KAAKkpB,iBAAkBlpB,KAAK4mB,gBAE9E,MAAMuH,EAAiBnuB,KAAKsmB,SAAS3Y,OAAO4c,IAAQA,EAAIjP,MAMxDtb,KAAK0mB,eAAiByH,EAAe,EACzC,CAMAhB,wBACI,MAAMiB,EAAqBA,CAACtiB,EAAKye,KAG7B,MAAMxP,IAASwP,EAAIvP,iBACnB,OAAOlP,GAAOiP,GAGZsT,EAAqBruB,KAAKsmB,SAASza,OAAOuiB,GAAoB,GAChEC,GACAruB,KAAKuoB,uBAGT,MAAM+F,EAAuBtuB,KAAKumB,eAAe1a,OAAOuiB,GAAoB,GACxEE,GACAtuB,KAAKotB,yBAET,MAAMmB,EAAuBvuB,KAAKwmB,eAAe3a,OAAOuiB,GAAoB,GAC5E,OAAIG,GACAvuB,KAAKqtB,yBAEFgB,GAAsBC,GAAwBC,CACzD,CAMAnG,kBAAkBF,GACdloB,KAAK+lB,MAAQ,MACT2E,MAAa1qB,KAAKkoB,aAClBloB,KAAKkoB,WAAWhG,WAAWliB,MAG3BA,KAAKmmB,4BACLnmB,KAAKmmB,0BAA0BqI,cAC/BxuB,KAAKmmB,0BAA4B,MAEhC+B,IACGloB,KAAKymB,aACLzmB,KAAKymB,YAAY1L,KAAK,IAEtB/a,KAAKwkB,YACLxkB,KAAKwkB,WAAWF,cAAckG,SAGtCxqB,KAAKmoB,YAAcD,CACvB,CAEAoF,wBAEI,IAAKttB,KAAKkoB,WACN,OAEJ,IAAIuG,GACJ,EAAI/D,MAAa1qB,KAAKkoB,YAClBuG,EAAazuB,KAAKkoB,WAAWwG,QAAQ1uB,OAAI,EAEpC2uB,MAAa3uB,KAAKkoB,YACvBuG,EAAazuB,KAAKkoB,WAEb9J,MAAMwQ,QAAQ5uB,KAAKkoB,cACxBuG,KAAaI,MAAG7uB,KAAKkoB,aAKzBloB,KAAKmmB,0BAA4BsI,EAC5B/gB,QAAKuc,MAAUjqB,KAAKgmB,aACpBrZ,UAAU7K,IACX9B,KAAK+lB,MAAQjkB,GAAQ,GACrB9B,KAAK2qB,YAAW,EAExB,CAKAyC,yBAEQptB,KAAK2kB,iBAAiBL,cAAcvR,OAAS,GAC7C/S,KAAK2kB,iBAAiBL,cAAckG,QAExCxqB,KAAKumB,eAAe+D,QAAQ,CAACC,EAAKlK,IAAMrgB,KAAK8uB,WAAW9uB,KAAK2kB,iBAAkB4F,EAAKlK,IACpFrgB,KAAKmsB,6BACT,CAKAkB,yBAEQrtB,KAAK6kB,iBAAiBP,cAAcvR,OAAS,GAC7C/S,KAAK6kB,iBAAiBP,cAAckG,QAExCxqB,KAAKwmB,eAAe8D,QAAQ,CAACC,EAAKlK,IAAMrgB,KAAK8uB,WAAW9uB,KAAK6kB,iBAAkB0F,EAAKlK,IACpFrgB,KAAKysB,6BACT,CAEAI,uBAAuBlP,EAAMuN,GACzB,MAAM6D,EAAa3Q,MAAMC,KAAK6M,GAAQzQ,SAAW,IAAIzM,IAAIghB,GACnChvB,KAAKomB,kBAAkB1a,IAAIsjB,IAM3CnQ,EAAoBkQ,EAAW/gB,IAAI8L,GAAaA,EAAUpB,QAC1DoG,EAAkBiQ,EAAW/gB,IAAI8L,GAAaA,EAAUlB,WAC9D5Y,KAAKqnB,cAAczI,oBAAoBjB,EAAMkB,EAAmBC,GAAkB9e,KAAK0oB,cAAgB1oB,KAAKmnB,4BAChH,CAEAkF,iBAAiB4C,GACb,MAAMC,EAAe,GACrB,QAAS7O,EAAI,EAAGA,EAAI4O,EAAU3K,cAAcvR,OAAQsN,IAAK,CACrD,MAAM8O,EAAUF,EAAU3K,cAAc5Y,IAAI2U,GAC5C6O,EAAa/Q,KAAKgR,EAAQC,UAAU,GACxC,CACA,OAAOF,CACX,CAOApB,YAAYhsB,EAAM+nB,GACd,GAA4B,GAAxB7pB,KAAKsmB,SAASvT,OACd,MAAO,CAAC/S,KAAKsmB,SAAS,IAE1B,IAAI+I,EAAU,GACd,GAAIrvB,KAAKqoB,sBACLgH,EAAUrvB,KAAKsmB,SAAS3Y,OAAO4c,IAAQA,EAAIjP,MAAQiP,EAAIjP,KAAKuO,EAAW/nB,QAEtE,CACD,IAAIopB,EAASlrB,KAAKsmB,SAASzL,KAAK0P,GAAOA,EAAIjP,MAAQiP,EAAIjP,KAAKuO,EAAW/nB,KAAU9B,KAAK0mB,eAClFwE,GACAmE,EAAQlR,KAAK+M,EAErB,CACI,OAGGmE,CACX,CACAtE,qBAAqB6C,EAAWzW,GAG5B,MAAO,CACHF,YAHW2W,EAAU1C,OAGDplB,SACpBoR,QAHY,CAAEmU,UAAWuC,EAAU9rB,MAInCqV,QAER,CAMA2X,WAAWQ,EAAQpE,EAAQ/T,EAAOD,EAAU,CAAC,GAEzC,MAAMN,EAAO0Y,EAAOhL,cAActN,mBAAmBkU,EAAOplB,SAAUoR,EAASC,GAC/E,OAAAnX,KAAKirB,2BAA2BC,EAAQhU,GACjCN,CACX,CACAqU,2BAA2BC,EAAQhU,GAC/B,QAASqY,KAAgBvvB,KAAKwvB,kBAAkBtE,GACxC3P,EAAcG,sBACdH,EAAcG,qBAAqBF,eAAexE,mBAAmBuY,EAAcrY,GAG3FlX,KAAKilB,mBAAmBjjB,cAC5B,CAKAmpB,yBACI,MAAM7G,EAAgBtkB,KAAKwkB,WAAWF,cACtC,QAASmL,EAAc,EAAGC,EAAQpL,EAAcvR,OAAQ0c,EAAcC,EAAOD,IAAe,CAExF,MAAMvY,EADUoN,EAAc5Y,IAAI+jB,GACVvY,QACxBA,EAAQwY,MAAQA,EAChBxY,EAAQsC,MAAwB,IAAhBiW,EAChBvY,EAAQyY,KAAOF,IAAgBC,EAAQ,EACvCxY,EAAQ0Y,KAAOH,EAAc,GAAM,EACnCvY,EAAQ2Y,KAAO3Y,EAAQ0Y,KACnB5vB,KAAKqoB,uBACLnR,EAAQ2S,UAAY7pB,KAAKkmB,YAAYuJ,GAAa5F,UAClD3S,EAAQuY,YAAcA,GAGtBvY,EAAQC,MAAQnX,KAAKkmB,YAAYuJ,GAAa5F,SAEtD,CACJ,CAEA2F,kBAAkBtE,GACd,OAAKA,GAAWA,EAAOzQ,QAGhB2D,MAAMC,KAAK6M,EAAOzQ,QAASqV,IAC9B,MAAM5U,EAASlb,KAAKomB,kBAAkB1a,IAAIokB,GAI1C,OAAO5E,EAAOjQ,oBAAoBC,EAAM,GAPjC,EASf,CAMAqN,uBACIvoB,KAAKymB,YAAY1L,KAAK,IACtB/a,KAAKwkB,WAAWF,cAAckG,QAC9BxqB,KAAK2qB,YACT,CAMA4C,qBACI,MAAMwC,EAAqBA,CAACjkB,EAAKkkB,IACtBlkB,GAAOkkB,EAAE7W,mBAKhBnZ,KAAKumB,eAAe1a,OAAOkkB,GAAoB,IAC/C/vB,KAAKmsB,8BAELnsB,KAAKwmB,eAAe3a,OAAOkkB,GAAoB,IAC/C/vB,KAAKysB,8BAELrO,MAAMC,KAAKre,KAAKomB,kBAAkB2G,UAAUlhB,OAAOkkB,GAAoB,KACvE/vB,KAAKknB,8BAA+B,EACpClnB,KAAKwoB,2BAEb,CAMAuB,qBAEI/pB,KAAKqnB,cAAgB,IAAInL,GAAalc,KAAKmc,mBAAoBnc,KAAKsnB,eAAgBtnB,KAAKqlB,UAAUoE,UAAWzpB,KAAKunB,6BADjGvnB,KAAKmlB,KAAOnlB,KAAKmlB,KAAK1Q,MAAQ,MAC4GzU,KAAK2lB,2BAA4B3lB,KAAKspB,YACjMtpB,KAAKmlB,KAAOnlB,KAAKmlB,KAAK6E,UAAS6E,SAC3BnhB,QAAKuc,MAAUjqB,KAAKgmB,aACpBrZ,UAAU8H,IACXzU,KAAKqnB,cAAc9K,UAAY9H,EAC/BzU,KAAKwoB,0BAAyB,EAEtC,CAEA0F,YAAY+B,GACR,OAAOA,EAAMtiB,OAAOqd,IAASA,EAAK3S,QAAU2S,EAAK3S,SAAWrY,KAChE,CAEA6qB,mBACI,MAAMqB,EAAYlsB,KAAK+mB,kBAAoB/mB,KAAKqpB,WAChD,IAAK6C,EACD,OAEJ,MAAMgE,EAAsD,IAAzClwB,KAAKwkB,WAAWF,cAAcvR,OACjD,GAAImd,IAAelwB,KAAKynB,oBACpB,OAEJ,MAAM0I,EAAYnwB,KAAK+kB,iBAAiBT,cACxC,GAAI4L,EAAY,CACZ,MAAMtZ,EAAOuZ,EAAUnZ,mBAAmBkV,EAAUjV,aAC9CmZ,EAAWxZ,EAAKwY,UAAU,GAGF,IAA1BxY,EAAKwY,UAAUrc,QAAgBqd,GAAUnS,WAAaje,KAAK6lB,UAAU3H,eACrEkS,EAAS/V,aAAa,OAAQ,OAC9B+V,EAASlgB,UAAUzD,IAAIyf,EAAUlQ,mBAEzC,MAEImU,EAAU3F,QAEdxqB,KAAKynB,oBAAsByI,EAC3BlwB,KAAKilB,mBAAmBjjB,cAC5B,CACAd,iBAAW,SAAAC,GAAA,WAAAA,GAAwF6jB,EAAQ,EAC3G9jB,iBAljEyFoB,MAAE,CAAAoC,KAkjEJsgB,EAAQxf,UAAA,yCAAA2L,eAAA,SAAApL,EAAAC,EAAAoL,GAK0U,GAL1U,EAAArL,IAljENzD,MAAE8O,EAujEpB2K,GAAY,GAvjEMzZ,MAAE8O,EAujEgEgH,EAAY,GAvjE9E9V,MAAE8O,EAujEiJiK,GAAS,GAvjE5J/Y,MAAE8O,EAujEqO+J,EAAe,GAvjEtP7Y,MAAE8O,EAujE+TgK,GAAe,MAAArV,EAAA,KAAAwT,EAvjEhVjX,MAAEiX,EAAFjX,WAAE0D,EAAAqjB,WAAA9P,EAAAC,OAAFlX,MAAEiX,EAAFjX,WAAE0D,EAAAijB,mBAAA1P,GAAFjX,MAAEiX,EAAFjX,WAAE0D,EAAAkjB,gBAAA3P,GAAFjX,MAAEiX,EAAFjX,WAAE0D,EAAAmjB,sBAAA5P,GAAFjX,MAAEiX,EAAFjX,WAAE0D,EAAAojB,sBAAA7P,EAAA,GAAAU,UAAA,gBAAAoW,SAAA,EAAAC,aAAA,SAAAvqB,EAAAC,GAAA,EAAAD,GAAFzD,MAAE,yBAAA0D,EAAAyiB,YAkjEI,EAAAnnB,OAAA,CAAA0mB,QAAA,UAAAE,WAAA,aAAAG,sBAAA,mDAAiM5O,OAAgBgP,YAAA,+BAA+ChP,QAAgB8W,QAAA,CAAA5H,eAAA,kBAAA6H,SAAA,aAAA9W,SAAA,CAljEtRpX,MAkjE2b,CAC5gB,CAAEqX,QAAS7B,EAAW8B,YAAaoL,GACnC,CAAErL,QAAS6L,IAAyBiL,SAAUva,IAE9C,CAAEyD,QAASyK,GAA6BsM,SAAU,SACrDjrB,mBAAAY,GAAAV,MAAA,EAAAC,KAAA,EAAAC,OAAA,4GAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IAvjEoFzD,MAAEoD,IAAFpD,MAAE,GAAFA,MAAE,KAAFA,MAAE,EAAAqV,GAAA,KAAFrV,MAAE,EAAAsV,GAAA,IAAFtV,CAmkE/D,EAAAuV,GAAA,MAWjB,EAAA9R,IA9kEgFzD,MAAE,GAAFA,MAAE0D,EAAAwhB,UAAA,MAAFllB,cAAE0D,EAAAmW,mBAAA,KAmlE1F,EAAAN,aAAA,CACqH6I,GAA6EL,GAAqES,GAA6EF,IAAene,OAAA,kDAAAoD,cAAA,IACvW,OA57BKmb,CAAQ,KAsgCd,SAASiJ,GAAiB0C,EAAOxN,GAC7B,OAAOwN,EAAMC,OAAOxS,MAAMC,KAAK8E,GACnC,CAKA,SAASoJ,GAAoB+C,EAAQuB,GACjC,MAAMC,EAAmBD,EAAQE,cACjC,IAAIC,EAAU1B,EAAOhL,cAAc7F,QAAQ9O,cAC3C,KAAOqhB,GAAS,CAEZ,MAAMtH,EAAgC,IAArBsH,EAAQ/S,SAAiB+S,EAAQtH,SAAW,KAC7D,GAAIA,IAAaoH,EACb,OAAOE,EAEN,GAAiB,UAAbtH,EAEL,MAEJsH,EAAUA,EAAQC,UACtB,CACA,OAAO,IACX,CAwLE,IACIC,GAAc,MAApB,MAAMA,EACFhwB,iBAAW,SAAAC,GAAA,WAAAA,GAAwF+vB,EAAc,EACjHhwB,iBAj3EyFoB,KAAE,CAAAoC,KAi3ESwsB,IA2CpGhwB,iBA55EyFoB,MAAE,CAAAqC,QAAA,CA45EmCwsB,SACjI,OA9CKD,CAAc,oECp4EpB,MAAAxrB,GAAA,2CAAAW,GAAA,yCAAA+qB,GAAArrB,EAAAC,GAAA,EAAAD,GAK6FzD,MAAE,IAiC5E,UAAA+uB,GAAAtrB,EAAAC,GAAA,EAAAD,IAjC0EzD,MAAE,aAAFA,MAAE,KAAFA,cAAE,aAAFA,MAAE,IAAFA,CAyC5D,KAzC4DA,cAAE,aAAFA,MAAE,KAAFA,QA8C/E,UAAAgvB,GAAAvrB,EAAAC,GAAA,EAAAD,GA9C+EzD,MAAE,IAAFA,CAgDxD,IAhDwDA,CAiD9D,IAjD8DA,CAkDxD,IACA,CAoV/B,IA7XAivB,GAAQ,MAAd,MAAMA,UAAiBvM,GAEnBsC,eAAiB,uBAEjBC,8BAA+B,EAC/BrmB,iBAAW,UAAAswB,EAAA,gBAAArwB,GAAA,OAAAqwB,MAf8ElvB,MAeUivB,KAAQpwB,GAARowB,EAAQ,GAAhG,GACXrwB,iBAhByFoB,MAAE,CAAAoC,KAgBJ6sB,EAAQ/rB,UAAA,yCAAAyU,UAAA,4CAAAoW,SAAA,EAAAC,aAAA,SAAAvqB,EAAAC,GAAA,EAAAD,GAhBNzD,MAAE,yBAAA0D,EAAAyiB,YAgBI,EAAA+H,SAAA,aAAA9W,SAAA,CAhBNpX,MAgBgN,CACjS,CAAEqX,QAASqL,GAAUpL,YAAa2X,GAClC,CAAE5X,QAAS7B,EAAW8B,YAAa2X,GAGnC,CAAE5X,QAAS6L,IAAyBiL,SAAUva,IAE9C,CAAEyD,QAASyK,GAA6BsM,SAAU,QAvB+BpuB,OAAEmD,mBAAAY,GAAAV,MAAA,EAAAC,KAAA,EAAAC,OAAA,4JAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IAAFzD,MAAEoD,IAAFpD,MAAE,GAAFA,MAAE,KAAFA,MAAE,EAAA8uB,GAAA,KAAF9uB,MAAE,EAAA+uB,GAAA,IAAF/uB,CAoC/D,EAAAgvB,GAAA,MAWjB,EAAAvrB,IA/CgFzD,MAAE,GAAFA,MAAE0D,EAAAwhB,UAAA,MAAFllB,cAAE0D,EAAAmW,mBAAA,KAoD1F,EAAAN,aAAA,CACqrK6I,GAA6EL,GAAqES,GAA6EF,IAAene,OAAA,knKAAAoD,cAAA,IACv6K,OA5CK0nB,CAAQ,KA8FRE,GAAU,MAAhB,MAAMA,UAAmBzZ,EACrB9W,iBAAW,UAAAwwB,EAAA,gBAAAvwB,GAAA,OAAAuwB,MAzG8EpvB,MAyGUmvB,KAAUtwB,GAAVswB,EAAU,GAAlG,GACXvwB,iBA1GyFoB,MAAE,CAAAoC,KA0GJ+sB,EAAUjsB,UAAA,uBAAAkU,SAAA,CA1GRpX,MA0GmE,CAAC,CAAEqX,QAAS3B,EAAY4B,YAAa6X,KA1GxGnvB,SA2G5F,OAHKmvB,CAAU,KAeVE,GAAgB,MAAtB,MAAMA,UAAyBzZ,EAC3BhX,iBAAW,UAAA0wB,EAAA,gBAAAzwB,GAAA,OAAAywB,MAxH8EtvB,MAwHUqvB,KAAgBxwB,GAAhBwwB,EAAgB,GAAxG,GACXzwB,iBAzHyFoB,MAAE,CAAAoC,KAyHJitB,EAAgBnsB,UAAA,6BAAAkU,SAAA,CAzHdpX,MAyH+E,CAAC,CAAEqX,QAASzB,EAAkB0B,YAAa+X,KAzH1HrvB,SA0H5F,OAHKqvB,CAAgB,KA8BhBE,GAAY,MAAlB,MAAMA,UAAqBzZ,EAEvB,QAAIhQ,GACA,OAAOpI,KAAKwY,KAChB,CACA,QAAIpQ,CAAKA,GACLpI,KAAKyY,cAAcrQ,EACvB,CAOAiR,4BACIpO,MAAMoO,4BACNrZ,KAAKkZ,oBAAoBiF,KAAK,cAAcne,KAAKiZ,uBACrD,CACA/X,iBAAW,UAAA4wB,EAAA,gBAAA3wB,GAAA,OAAA2wB,MAvK8ExvB,MAuKUuvB,KAAY1wB,GAAZ0wB,EAAY,GAApG,GACX3wB,iBAxKyFoB,MAAE,CAAAoC,KAwKJmtB,EAAYrsB,UAAA,yBAAAlE,OAAA,CAAA8G,KAAA,2BAAAsR,SAAA,CAxKVpX,MAwKmH,CACpM,CAAEqX,QAASvB,EAAcwB,YAAaiY,GACtC,CAAElY,QAAS,6BAA8BC,YAAaiY,KA1K2BvvB,SA4K5F,OAvBKuvB,CAAY,KAsCZE,GAAa,MAAnB,MAAMA,UAAsB/X,GACxB9Y,iBAAW,UAAA8wB,EAAA,gBAAA7wB,GAAA,OAAA6wB,MA5L8E1vB,MA4LUyvB,KAAa5wB,GAAb4wB,EAAa,GAArG,GACX7wB,iBA7LyFoB,MAAE,CAAAoC,KA6LJqtB,EAAavsB,UAAA,kDAAAyU,UAAA,QAAsG,eAAc,uDAAAP,SAAA,CA7L/HpX,SA8L5F,OAHKyvB,CAAa,KA6BbE,GAAO,MAAb,MAAMA,UAAgB/X,GAClBhZ,iBAAW,UAAAgxB,EAAA,gBAAA/wB,GAAA,OAAA+wB,MAzN8E5vB,MAyNU2vB,KAAO9wB,GAAP8wB,EAAO,GAA/F,GACX/wB,iBA1NyFoB,MAAE,CAAAoC,KA0NJutB,EAAOzsB,UAAA,oCAAAyU,UAAA,0CAAAP,SAAA,CA1NLpX,SA2N5F,OAHK2vB,CAAO,KAoBPE,GAAe,MAArB,MAAMA,UAAwBhX,EAC1Bja,iBAAW,UAAAkxB,EAAA,gBAAAjxB,GAAA,OAAAixB,MA7O8E9vB,MA6OU6vB,KAAehxB,GAAfgxB,EAAe,GAAvG,GACXjxB,iBA9OyFoB,MAAE,CAAAoC,KA8OJytB,EAAe3sB,UAAA,4BAAAlE,OAAA,CAAAmZ,QAAA,gCAAA/B,OAAA,oCAAoJe,QAAgBC,SAAA,CA9OjLpX,MA8OiM,CAAC,CAAEqX,QAASwB,EAAiBvB,YAAauY,KA9O3O7vB,SA+O5F,OAHK6vB,CAAe,KAuCfE,GAAS,MAAf,MAAMA,UAAkBhX,GACpBna,iBAAW,UAAAoxB,EAAA,gBAAAnxB,GAAA,OAAAmxB,MApR8EhwB,MAoRU+vB,KAASlxB,GAATkxB,EAAS,GAAjG,GACXnxB,iBArRyFoB,MAAE,CAAAoC,KAqRJ2tB,EAAS7sB,UAAA,sBAAAlE,OAAA,CAAAmZ,QAAA,iCAAAa,KAAA,4BAAA5B,SAAA,CArRPpX,MAqRwJ,CAAC,CAAEqX,QAAS0B,GAAWzB,YAAayY,KArR5L/vB,SAsR5F,OAHK+vB,CAAS,KAgBTE,GAAY,MAAlB,MAAMA,UAAqB3W,GACvB1a,iBAAW,UAAAsxB,EAAA,gBAAArxB,GAAA,OAAAqxB,MApS8ElwB,MAoSUiwB,KAAYpxB,GAAZoxB,EAAY,GAApG,GACXrxB,iBArSyFoB,MAAE,CAAAoC,KAqSJ6tB,EAAY/sB,UAAA,gDAAAyU,UAAA,QAAoG,MAAK,qDAAAuW,SAAA,iBAAA9W,SAAA,CArSnHpX,MAqSqM,CAAC,CAAEqX,QAASiC,GAAchC,YAAa2Y,KArS5OjwB,OAAEqD,MAAA,EAAAC,KAAA,EAAAC,OAAA,uBAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GAAFzD,MAAE,IAqSkX,EAAAuZ,aAAA,CAA6DN,GAAa1R,cAAA,IAC1hB,OAHK0oB,CAAY,KA8CZE,GAAM,MAAZ,MAAMA,UAAe3W,GACjB5a,iBAAW,UAAAwxB,EAAA,gBAAAvxB,GAAA,OAAAuxB,MAlV8EpwB,MAkVUmwB,KAAMtxB,GAANsxB,EAAM,GAA9F,GACXvxB,iBAnVyFoB,MAAE,CAAAoC,KAmVJ+tB,EAAMjtB,UAAA,kCAAAyU,UAAA,QAAsF,MAAK,uCAAAuW,SAAA,WAAA9W,SAAA,CAnV/FpX,MAmVmK,CAAC,CAAEqX,QAASmC,GAAQlC,YAAa6Y,KAnVpMnwB,OAAEqD,MAAA,EAAAC,KAAA,EAAAC,OAAA,uBAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GAAFzD,MAAE,IAmV8T,EAAAuZ,aAAA,CAA6DN,GAAa1R,cAAA,IACte,OAHK4oB,CAAM,KA2GNE,GAAc,MAApB,MAAMA,EACFzxB,iBAAW,SAAAC,GAAA,WAAAA,GAAwFwxB,EAAc,EACjHzxB,iBA9byFoB,KAAE,CAAAoC,KA8bSiuB,IA2CpGzxB,iBAzeyFoB,MAAE,CAAAqC,QAAA,CAyemCC,KAAiBssB,GAAgBtsB,QAClK,OA9CK+tB,CAAc,KAyEpB,MAAMC,WAA2BC,KAE7B9M,MAEA+M,YAAc,IAAIhK,KAAgB,IAElCiK,QAAU,IAAIjK,KAAgB,IAE9BkK,qBAAuB,IAAI/M,KAK3BgN,2BAA6B,KAO7BC,aAEA,QAAIpxB,GACA,OAAO9B,KAAK+lB,MAAMtR,KACtB,CACA,QAAI3S,CAAKA,GACLA,EAAOsc,MAAMwQ,QAAQ9sB,GAAQA,EAAO,GACpC9B,KAAK+lB,MAAMrb,KAAK5I,GAGX9B,KAAKizB,4BACNjzB,KAAKmzB,YAAYrxB,EAEzB,CAKA,UAAI6L,GACA,OAAO3N,KAAK+yB,QAAQte,KACxB,CACA,UAAI9G,CAAOA,GACP3N,KAAK+yB,QAAQroB,KAAKiD,GAGb3N,KAAKizB,4BACNjzB,KAAKmzB,YAAYnzB,KAAK8B,KAE9B,CAKA,QAAIsxB,GACA,OAAOpzB,KAAKqzB,KAChB,CACA,QAAID,CAAKA,GACLpzB,KAAKqzB,MAAQD,EACbpzB,KAAKszB,2BACT,CACAD,MAWA,aAAIE,GACA,OAAOvzB,KAAKwzB,UAChB,CACA,aAAID,CAAUA,GACVvzB,KAAKwzB,WAAaD,EAClBvzB,KAAKszB,2BACT,CACAE,WAUAC,oBAAsBA,CAAC3xB,EAAM4xB,KACzB,MAAMjf,EAAQ3S,EAAK4xB,GACnB,MAAIC,MAAelf,GAAQ,CACvB,MAAMmf,EAAc7K,OAAOtU,GAG3B,OAAOmf,EA5GM,iBA4G2BA,EAAcnf,CAC1D,CACA,OAAOA,GAWXof,SAAWA,CAAC/xB,EAAMsxB,KACd,MAAMU,EAASV,EAAKU,OACdvX,EAAY6W,EAAK7W,UACvB,OAAKuX,GAAuB,IAAbvX,EAGRza,EAAKsxB,KAAK,CAACxmB,EAAGmnB,KACjB,IAAIC,EAASh0B,KAAKyzB,oBAAoB7mB,EAAGknB,GACrCG,EAASj0B,KAAKyzB,oBAAoBM,EAAGD,GAIzC,MAAMI,SAAoBF,EACpBG,SAAoBF,EACtBC,IAAeC,IACI,WAAfD,IACAF,GAAU,IAEK,WAAfG,IACAF,GAAU,KAOlB,IAAIG,EAAmB,EACvB,OAAc,MAAVJ,GAA4B,MAAVC,EAEdD,EAASC,EACTG,EAAmB,EAEdJ,EAASC,IACdG,GAAmB,GAGR,MAAVJ,EACLI,EAAmB,EAEJ,MAAVH,IACLG,GAAmB,GAEhBA,GAAiC,OAAb7X,EAAqB,GAAI,KAtC7Cza,CAuCV,EAYLuyB,gBAAkBA,CAACvyB,EAAM6L,KAErB,MAAM2mB,EAAoB3mB,EAAO4mB,OAAOC,cAExC,OAAO1hB,OAAOia,OAAOjrB,GAAMmd,KAAKxK,GAAS,GAAGA,IAAQ+f,cAAc3W,SAASyW,GAAkB,EAEjGv0B,YAAY00B,EAAc,IACtBxpB,QACAjL,KAAK+lB,MAAQ,IAAI+C,KAAgB2L,GACjCz0B,KAAKszB,2BACT,CAMAA,4BAOI,MAAMoB,EAAa10B,KAAKqzB,SAClBsB,MAAM30B,KAAKqzB,MAAMqB,WAAY10B,KAAKqzB,MAAMuB,cAAW,EACnD/F,MAAG,MACHgG,EAAa70B,KAAKwzB,cAClBmB,MAAM30B,KAAKwzB,WAAWsB,KAAM90B,KAAKgzB,qBAAsBhzB,KAAKwzB,WAAWoB,cAAW,EAClF/F,MAAG,MAGHqE,KAAe6B,MAAc,CAFhB/0B,KAAK+lB,MAEwB/lB,KAAK+yB,UAAUrlB,QAAKM,MAAI,EAAElM,KAAU9B,KAAKmzB,YAAYrxB,KAE/FkzB,KAAcD,MAAc,CAAC7B,EAAcwB,IAAahnB,QAAKM,MAAI,EAAElM,KAAU9B,KAAKi1B,WAAWnzB,KAE7FozB,KAAgBH,MAAc,CAACC,EAAaH,IAAannB,QAAKM,MAAI,EAAElM,KAAU9B,KAAKm1B,UAAUrzB,KAEnG9B,KAAKizB,4BAA4BzE,cACjCxuB,KAAKizB,2BAA6BiC,EAAcvoB,UAAU7K,GAAQ9B,KAAK8yB,YAAYpoB,KAAK5I,GAC5F,CAMAqxB,YAAYrxB,GAIR,OAAA9B,KAAKkzB,aACc,MAAflzB,KAAK2N,QAAkC,KAAhB3N,KAAK2N,OACtB7L,EACAA,EAAK6L,OAAOynB,GAAOp1B,KAAKq0B,gBAAgBe,EAAKp1B,KAAK2N,SACxD3N,KAAKuzB,WACLvzB,KAAKq1B,iBAAiBr1B,KAAKkzB,aAAangB,QAErC/S,KAAKkzB,YAChB,CAMA+B,WAAWnzB,GAEP,OAAK9B,KAAKozB,KAGHpzB,KAAK6zB,SAAS/xB,EAAK0e,QAASxgB,KAAKozB,MAF7BtxB,CAGf,CAKAqzB,UAAUrzB,GACN,IAAK9B,KAAKuzB,UACN,OAAOzxB,EAEX,MAAMwzB,EAAat1B,KAAKuzB,UAAUgC,UAAYv1B,KAAKuzB,UAAUiC,SAC7D,OAAO1zB,EAAK0e,MAAM8U,EAAYA,EAAat1B,KAAKuzB,UAAUiC,SAC9D,CAMAH,iBAAiBI,GACbC,QAAQC,UAAUnuB,KAAK,KACnB,MAAM+rB,EAAYvzB,KAAKuzB,UACvB,GAAKA,IAGLA,EAAUxgB,OAAS0iB,EAEflC,EAAUgC,UAAY,GAAG,CACzB,MAAMK,EAAgBC,KAAKC,KAAKvC,EAAUxgB,OAASwgB,EAAUiC,UAAY,GAAK,EACxEO,EAAeF,KAAKG,IAAIzC,EAAUgC,UAAWK,GAC/CG,IAAiBxC,EAAUgC,YAC3BhC,EAAUgC,UAAYQ,EAGtB/1B,KAAKgzB,qBAAqBtoB,OAElC,GAER,CAKAgkB,UACI,OAAK1uB,KAAKizB,4BACNjzB,KAAKszB,4BAEFtzB,KAAK8yB,WAChB,CAKA5Q,aACIliB,KAAKizB,4BAA4BzE,cACjCxuB,KAAKizB,2BAA6B,IACtC,kOCzxB+C3wB,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,kBAAiBA,qCAC3DA,MAAA,WAA6DA,MAAA,GAA2BA,kCAA3BA,cAAA,IAAA2zB,EAAAC,YAAAC,KAAA,6BAItB7zB,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,UAASA,qCACnDA,MAAA,WAA6DA,MAAA,GAAqBA,kCAArBA,cAAA,IAAA8zB,EAAAC,WAAA,6BAItB/zB,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,UAASA,qCACnDA,MAAA,WAA6DA,MAAA,GAAeA,kCAAfA,cAAA,IAAAg0B,EAAA/jB,KAAA,6BAItBjQ,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,WAAUA,oDACSA,MAA7D,UAA6DA,CAAD,eACxDA,MAAA,yBAAAi0B,EAAAj0B,MAAAqP,GAAA0Z,UAAAmL,EAAAl0B,QAAA,OAAAA,MAASk0B,EAAAC,YAAAF,GAAkB,GAAEj0B,MAAA,YAAgBA,iCAGnDA,MAAA,iCACAA,MAAA,kCAQ2CA,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,cAAaA,qCASjDA,MAAA,uBAAiCA,MAAA,GAAoBA,+BAArCA,MAAA,cAAiBA,cAAAk0B,EAAAE,2CAGjCp0B,MAAA,uBACEA,MAAA,GACFA,wCAFgBA,MAAA,cACdA,cAAA,IAAAq0B,EAAAC,OAAAC,cAAA,gCALJv0B,MAAA,EAAAw0B,GAAA,yBAGAx0B,MAAA,EAAAy0B,GAAA,wDAHAz0B,MAAAq0B,EAAAC,OAAAI,QAAA,MAGA10B,cAAAq0B,EAAAC,OAAAC,cAAA,gDARAv0B,MAFJ,UAEIA,CAFmE,sBAEnEA,CADwD,eAC7CA,MAAA,cAAQA,QACnBA,MAAA,gBAA6CA,MAAA,yBAAA20B,GAAA,MAAAC,EAAA50B,MAAA60B,GAAA9L,UAAA/oB,aAAA40B,EAAAE,QAAAH,KAAAC,EAAAE,QAAAH,GAAA30B,MAAA20B,EAAA,GAE/C30B,UACAA,MAAA,EAAA+0B,GAAA,KAUF/0B,mEAboBA,MAAA,GAAAA,MAAA,UAAAk0B,EAAAc,kBAA6Bh1B,MAAA,UAAA40B,EAAAE,SACxB90B,MADmD,oBAAAi1B,EACnDj1B,CAD4E,mBAAAk0B,EAAAK,iBAGnGv0B,MAAA,GAAAA,MAAAq0B,EAAAC,OAAA,8BAcqCt0B,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,YAAWA,qCACrDA,MAAA,WAA0FA,MAAA,GACLA,kCADKA,cAAA,IAAAk1B,EAAA5lB,MAAAskB,YAAAC,KAAA,IAAAqB,EAAA5lB,MAAAykB,WAAA,KAAAmB,EAAA5lB,MAAAW,KAAA,8BAKnDjQ,MAAvC,UAAuCA,CAAD,OAAIA,MAAA,YAAWA,oDACOA,MAA5D,UAA4DA,CAAD,eACvDA,MAAA,yBAAAm1B,EAAAn1B,MAAAo1B,GAAArM,UAAAmL,EAAAl0B,QAAA,OAAAA,MAASk0B,EAAAmB,YAAAF,GAAiB,GAAEn1B,MAAA,YAAgBA,iCAGlDA,MAAA,iCACAA,MAAA,WC5CL,IAAMs1B,GAAoB,MAA3B,MAAOA,UAA4BC,KAIvCC,GAEAC,GAIAh4B,YACkCi4B,EACtBz2B,EACFW,EAEA+1B,EACAx2B,EACAC,GAERuJ,QARgCjL,KAAAg4B,aACtBh4B,KAAAuB,SACFvB,KAAAkC,WAEAlC,KAAAi4B,YACAj4B,KAAAyB,mBACAzB,KAAA0B,oBAhBgB1B,KAAAk4B,UAAY,mBAGtCl4B,MAAA83B,KAAYz3B,OAAOI,MAEnBT,MAAA+3B,KAAyB9uB,KAAUkvB,KAEnCn4B,KAAAgE,kCAAoCX,KAAaW,kCAwBjDhE,KAAAo4B,eAA2B,CAAC,cAAe,OAAQ,OAAQ,SAC3Dp4B,KAAAq4B,gBAA4B,CAAC,UAAW,SAAU,UAExCr4B,KAAAs4B,gBAAkB,IAAI1F,GAA0B,IAChD5yB,KAAAu4B,eAAiB,IAAI3F,GAAiC,IACtD5yB,KAAAs3B,iBAAmBA,KACnBt3B,KAAA02B,eAAiBA,KAE3B12B,MAAAw4B,EAAuBx4B,MAAK+3B,EAAuBU,mBAAmBhkB,MAEtEzU,KAAA62B,iBAAgB6B,MAAS,KACvB,MAAMC,EAAW34B,MAAKw4B,IACtB,OAAOI,KAAgCC,cAAcF,EAAU34B,KAAKg4B,WAAWc,eAAc,GAGrF94B,KAAA+4B,UAASC,OAAU,UAAU,GAEvCh5B,MAAAi5B,EAA8Bj5B,MAAK83B,EAAU/2B,UAAUsC,KAAaW,mCA7BlEhE,KAAKuB,OAAO23B,cAAe,EAC3Bl5B,KAAKwM,cAAcC,IACjBzM,KAAKuB,OAAO43B,gBAAgBxsB,UAAU,MAChC3M,KAAKgD,KAAKo2B,OAASp5B,KAAKu4B,eAAez2B,KAAKiR,OAAS,KACrCsmB,QAAQ,0EAG5Br5B,KAAKuB,OAAOyG,OAAK,GAGvB,CAUAwwB,GASAS,GAEAnP,WAEE9pB,MAAK+3B,EAAuBuB,4BAA4B9xB,KAAK+xB,IAC3Dv5B,KAAKs4B,gBAAgBx2B,KAAOy3B,GAGhC,CAEA9C,YAAY7kB,GACV5R,KAAKu4B,eAAez2B,KAAO,IAAI9B,KAAKu4B,eAAez2B,KAAM,CAAEs1B,QAASxlB,EAAMykB,WAAYzkB,SACxF,CAEA+lB,YAAY/lB,GACV,MAAM2mB,EAAiBv4B,KAAKu4B,eAAez2B,KAC3Cy2B,EAAeiB,OAAOjB,EAAe3Y,QAAQhO,GAAQ,GACrD5R,KAAKu4B,eAAez2B,KAAO,IAAIy2B,EACjC,CAGAkB,OACOz5B,MAAKi5B,KAGRj5B,KAAK+4B,OAAO5V,KAAI,GAChBnjB,KAAKkC,SAASP,KAAK,cAAW,EAC9BktB,SAAM7uB,KAAKu4B,eAAez2B,MAAM4L,QAC9BC,MAAO+rB,KAAkBA,EAAatC,UAAO,EAC7CuC,MAAUD,GACR15B,MAAK+3B,EAAuB6B,kBAC1B55B,KAAKg4B,WAAW6B,YAAYC,GAC5BJ,EAAa9nB,MAAMskB,YAAY4D,GAC/BJ,EAAa9nB,MAAM8B,KACnBgmB,EAAatC,SACb1pB,QAAKqsB,MAAWC,MAAKnL,MAAG,UAAO,EAEnCoL,SACAttB,UAAUqtB,IACVh6B,KAAK+4B,OAAO5V,KAAI,GAChBnjB,KAAKkC,SAASP,KAAK,QAAS,KAAM,CAAEU,SAAU,MAC9CrC,KAAKuB,OAAOyG,OAAK,KAClB,EAnBD/G,MAAkBjB,KAAKi4B,UAAW50B,KAAaW,kCAAmChE,KAAKyB,iBAAkBzB,KAAK0B,kBAqBlH,CAACR,SAAAlB,KAAA,mBAAAmB,iBA7FUy2B,GAAmBt1B,MAWpB4G,KAAe5G,MAAAC,KAAAD,MAAA+G,OAAA/G,MAAAC,KAAAD,0BAAA,EAAApB,SAAAlB,KAAA,UAAA6T,EAAAtO,IAAA,MAXdqyB,EAAmBpyB,UAAA,iCAAA00B,UAAA,SAAAn0B,EAAAC,MAAA,EAAAD,cAEDo0B,iGAFlB73B,MAAA,YAAA0D,EAAAkyB,kxCDzCT51B,MAFJ,UAEIA,CAFqC,UAErCA,CAD6B,WAE3BA,MAAA,wBAEJA,UAEEA,MADF,UACEA,CAD8B,OAE5BA,MAAA,2OAEFA,QACAA,MAAA,OACEA,MAAA,0BAAmBA,MAAA,aAAQA,MAAA,+BAAwBA,QAASA,MAAA,gDAAyCA,MAAA,aAAQA,MAAA,kBAAWA,QAASA,MAAA,sCACnIA,QACAA,MAAA,QACEA,MAAA,0BACAA,MAAA,SACAA,MAAA,SACEA,MAAA,6GAEJA,UAGIA,MAFJ,WAEIA,CAFwB,gBAExBA,CADmC,cAEjCA,MAAA,MAEEA,MADA,GAAA83B,GAAA,YACA93B,CADsC,GAAA+3B,GAAA,qBAIxC/3B,MAAA,OAEEA,MADA,GAAAg4B,GAAA,YACAh4B,CADsC,GAAAi4B,GAAA,qBAIxCj4B,MAAA,OAEEA,MADA,GAAAk4B,GAAA,YACAl4B,CADsC,GAAAm4B,GAAA,qBAIxCn4B,MAAA,OAEEA,MADA,GAAAo4B,GAAA,YACAp4B,CADsC,GAAAq4B,GAAA,qBAMxCr4B,MADA,GAAAs4B,GAAA,YACAt4B,CADqD,GAAAu4B,GAAA,aAGzDv4B,UAIIA,MAFJ,iBAEIA,CAFkC,iBAElCA,CADqB,cAEnBA,MAAA,OAEEA,MADA,GAAAw4B,GAAA,YACAx4B,CADsC,GAAAy4B,GAAA,qBAoBxCz4B,MAAA,OAEEA,MADA,GAAA04B,GAAA,YACA14B,CADsC,GAAA24B,GAAA,qBAKxC34B,MAAA,OAEEA,MADA,GAAA44B,GAAA,YACA54B,CADsC,GAAA64B,GAAA,qBAMxC74B,MADA,GAAA84B,GAAA,YACA94B,CADsD,GAAA+4B,GAAA,aAK9D/4B,cAIEA,MADF,8BACEA,CADyF,SAEvFA,MAAA,oFAEJA,UAIEA,MADF,2BACEA,CAD8B,gBACUA,MAAA,mBAAAA,aAAA2D,GAAA3D,MAAS0D,EAAAzE,OAAAyG,QAAc,GAAE1F,MAAA,aAAMA,QACvEA,MAAA,gBACiFA,MAAA,mBAAAA,aAAA2D,GAAA3D,MAAS0D,EAAAyzB,OAAM,GAC9Fn3B,MAAA,aAGNA,wCAzGIA,MAAA,GAAAA,MAAA,IAAAA,MAAA,sEAYAA,MAAA,IAAAA,MAAA,IAAAA,MAAA,0DAQmBA,MAAA,GAAAA,MAAA,aAAA0D,EAAAsyB,iBAsBKh2B,MAAA,IAAAA,MAAA,kBAAA0D,EAAAoyB,gBACa91B,cAAA,mBAAA0D,EAAAoyB,gBAMhB91B,MAAA,GAAAA,MAAA,aAAA0D,EAAAuyB,gBAkCKj2B,MAAA,IAAAA,MAAA,kBAAA0D,EAAAqyB,iBACa/1B,cAAA,mBAAA0D,EAAAqyB,iBAOlB/1B,QAAoDA,MAApD,gBAAA0D,EAAAhC,kCAAoD1B,CAAD,aAUtEA,MAAA,GAAAA,MAAA,YAAAg5B,EAAAt4B,KAAAu4B,OAAA,GAAAv1B,EAAAuyB,eAAAz2B,KAAAiR,QAAA/M,EAAA+yB,0BC1EJ3vB,MAAaG,MACbopB,GAAclpB,8BACdH,KAAeM,KACf4xB,KAAWC,mCACXh3B,KAAkBi3B,UAClBC,MAAcC,MACdhD,KACA1pB,IACAvF,IAAekyB,KACfC,KACA52B,MAAkBuB,OAAA,w+BAGTmxB,CAAoB,6CC1CrBmE,EAAZ,SAAYA,GACVA,WAAAC,KAAA,UACAD,IAAAE,QAAA,aACAF,IAAAG,WAAA,gBAHUH,CAIZ,CAJA,CAAYA,GAAmB,mHCmBvBz5B,MAAA,6BARAA,MAAA,OACEA,MAAA,wJAEFA,QACAA,MAAA,SACEA,MAAA,0BAAmBA,MAAA,YAAQA,MAAA,GAC7BA,UACAA,MAAA,QAAIA,MAAA,kBAAYA,QAChBA,MAAA,EAAA65B,GAAA,wDAH6B75B,MAAA,GAAAA,MAAAqF,EAAAqwB,WAAAtkB,MAGdpR,MAAA,GAAAA,MAAA,mBAAA85B,8BAQT95B,MAAA,QAAIA,MAAA,GAAgBA,kCAAhBA,cAAA+5B,EAAA5R,qCAFRnoB,MAAA,QACEA,MAAA,EAAAg6B,GAAA,cAAAC,IAGFj6B,+BAHEA,cAAAqF,EAAA60B,oCAKJl6B,MAAA,6BAOMA,MAAA,QAAIA,MAAA,GAAOA,kCAAPA,cAAAm6B,8BAJRn6B,MAAA,QAAIA,MAAA,+BAAyBA,QAC7BA,MAAA,OAAGA,MAAA,yFAAmFA,QACtFA,MAAA,QACEA,MAAA,EAAAo6B,GAAA,cAAAp6B,OAGFA,+BAHEA,MAAA,GAAAA,MAAAqF,EAAAg1B,2CAfJr6B,MAAA,OAAGA,MAAA,oFAA8EA,QACjFA,MAAA,QAAIA,MAAA,8BAAwBA,QAC5BA,MAAA,EAAAs6B,GAAA,UAOAt6B,MAAA,EAAAu6B,GAAA,sBAEAv6B,MAAA,EAAAw6B,GAAA,uCATAx6B,MAAA,GAAAA,MAAAqF,EAAA+R,SAAA3Y,UAAA4G,EAAAo1B,oBAAA,KAOez6B,cAAA,mBAAA85B,GAEf95B,cAAAqF,EAAAg1B,eAAA5pB,OAAA,8BAuCMzQ,MAAA,OAAGA,MAAA,6FAAuFA,gCAkB9CA,MAAtC,UAAsCA,CAAA,OAAGA,MAAA,kBAAgBA,qCACzDA,MAAA,WAAqCA,MAAA,GAA4BA,kCAA5BA,cAAA06B,EAAA9G,YAAAC,8BAIC7zB,MAAtC,UAAsCA,CAAA,OAAGA,MAAA,UAAQA,qCACjDA,MAAA,WAAqCA,MAAA,GAAsBA,kCAAtBA,cAAA26B,EAAA5G,oCAIC/zB,MAAtC,UAAsCA,CAAA,OAAGA,MAAA,UAAQA,qCACjDA,MAAA,WAAqCA,MAAA,GAAgBA,kCAAhBA,cAAA46B,EAAA3qB,6BAGvCjQ,MAAA,oDAEAA,MAAA,WAIEA,MAAA,yBAAA66B,EAAA76B,MAAA86B,GAAA/R,UAAA1jB,EAAArF,MAAA,UAAAA,MAASqF,EAAA+xB,aAAAyD,GAAiB,GAC3B76B,+CAFCA,MAAA,UAAAA,MAAA,EAAAoD,GAAAiC,EAAAG,OAAAq1B,EAAAzpB,kCAlCNpR,MAAA,OACEA,MAAA,yHACAA,MAAA,QACFA,QAEEA,MADF,OACEA,CADE,QACEA,MAAA,oGAA8FA,QAClGA,MAAA,QACEA,MAAA,6IAGJA,UAEEA,MADF,gBACEA,CADmC,cAGjCA,MAAA,OAEEA,MADA,GAAA+6B,GAAA,YACA/6B,CADsC,GAAAg7B,GAAA,qBAIxCh7B,MAAA,OAEEA,MADA,GAAAi7B,GAAA,YACAj7B,CADsC,GAAAk7B,GAAA,qBAIxCl7B,MAAA,OAEEA,MADA,GAAAm7B,GAAA,YACAn7B,CADsC,GAAAo7B,GAAA,qBAMxCp7B,MAFA,GAAAq7B,GAAA,YAEAr7B,CAFqD,GAAAs7B,GAAA,aASzDt7B,iCA1BmBA,MAAA,GAAAA,MAAA,aAAAqF,EAAA2wB,mBAiBKh2B,MAAA,IAAAA,MAAA,kBAAAqF,EAAAywB,gBAIG91B,cAAA,mBAAAqF,EAAAywB,0DAhEjC91B,MAAA,OAAGA,MAAA,yEAAmEA,QAEpEA,MADF,OACEA,CADE,QACEA,MAAA,sBAAgBA,MAAA,YAAQA,MAAA,WAAKA,QAASA,MAAA,mDAA6CA,QACvFA,MAAA,QAAIA,MAAA,mBAAaA,MAAA,aAAQA,MAAA,cAAOA,QAAUA,MAAA,4DAC5CA,UACAA,MAAA,SAEEA,MADF,SACEA,CADG,eAMDA,MAAA,mBAAAA,MAAAu7B,GAAA,MAAAl2B,EAAArF,QAAA,OAAAA,MAASqF,EAAAm2B,WAAU,GAEnBx7B,MAAA,cACFA,QAEAA,MAAA,eAKEA,MAAA,mBAAAA,MAAAu7B,GAAA,MAAAl2B,EAAArF,QAAA,OAAAA,MAASqF,EAAAo2B,eAAc,GAEvBz7B,MAAA,gBACFA,QAKEA,MAHA,GAAA07B,GAAA,QAGA17B,CAHqC,GAAA27B,GAAA,MA6CzC37B,sCA7DIA,MAAA,IAAAA,MAAA,QAAAqF,EAAAuE,OAAAvE,EAAAu2B,oBAAAjC,QAAA,aAUA35B,MAAA,GAAAA,MAAA,QAAAqF,EAAAuE,OAAAvE,EAAAu2B,oBAAAhC,WAAA,aAKF55B,MAAA,GAAAA,OAAA67B,EAAAx2B,EAAAuE,SAAAvE,EAAAu2B,oBAAAjC,QAAA,GAAAkC,IAAAx2B,EAAAu2B,oBAAAhC,WAAA,iDAyDJ55B,MAAA,eAAyEA,MAAA,mBAAAA,MAAA87B,GAAA,MAAAz2B,EAAArF,QAAA,OAAAA,MAASqF,EAAApG,OAAAyG,QAAc,GAAE1F,MAAA,YAAMA,QACxGA,MAAA,eAAwFA,MAAA,mBAAAA,MAAA87B,GAAA,MAAAz2B,EAAArF,QAAA,OAAAA,MAASqF,EAAA8xB,OAAM,GACrGn3B,MAAA,UAAMA,MAAA,UACRA,qCAWIA,MAAA,QACEA,MAAA,aAAMA,MAAA,YAAQA,MAAA,GAAgBA,QAC9BA,MAAA,QACAA,MAAA,qBAAcA,MAAA,YAAQA,MAAA,GAA4BA,QAClDA,MAAA,QACAA,MAAA,cAAOA,MAAA,aAAQA,MAAA,IAAsBA,QAAUA,MAAA,IACjDA,kCALgBA,MAAA,GAAAA,MAAA+7B,EAAA3qB,MAEQpR,MAAA,GAAAA,MAAA+7B,EAAAnI,YAAAC,MAEP7zB,MAAA,GAAAA,MAAA+7B,EAAAhI,YAAgC/zB,cAAA,KAAA+7B,EAAAC,YAAA,iCAPrDh8B,MAAA,QACEA,MAAA,EAAAi8B,GAAA,eAAAC,IASFl8B,+BATEA,cAAAqF,EAAA82B,mCAWFn8B,MAAA,QAAKA,MAAA,sFAA+EA,kCADpFA,MAZF,EAAAo8B,GAAA,SAYEp8B,CAZsB,EAAAq8B,GAAA,gCAAxBr8B,MAAAqF,EAAA82B,UAAA1rB,OAAA,gCAgBAzQ,MAAA,QACEA,MAAA,0EACAA,MAAA,QACAA,MAAA,GACAA,MAAA,8BAAiFA,MAAA,QACnFA,+BAFEA,MAAA,GAAAA,MAAA,IAAAqF,EAAAo1B,gBAAA,KACuBz6B,cAAA,gBAAAqF,EAAAo1B,2CALzBz6B,MAhBF,EAAAs8B,GAAA,IAgBEt8B,CAhB2C,EAAAu8B,GAAA,+BAA7Cv8B,MAAAqF,EAAA+R,SAAA3Y,UAAA4G,EAAAo1B,mBAAA,MCtHF,MAAMpyB,GAAW,CACfm0B,KAAK,EACL/+B,aAAa,GAqBR,IAAMg/B,GAA6B,MAApC,MAAOA,EAIXhH,GAEAh4B,YACkCi4B,EACzBte,EACGnY,GAFsBvB,KAAAg4B,aACzBh4B,KAAA0Z,WACG1Z,KAAAuB,SAPZvB,KAAAkL,OAAMC,OAAS,CAAE4zB,iCAAiCp0B,IAElD3K,MAAA+3B,KAAyB9uB,KAAUkvB,KAoBnCn4B,KAAA+8B,gBAAkB15B,KAAaW,kCAE/BhE,KAAAy+B,WAAUzF,OAAmB,UAAW,IAExCh5B,KAAAo4B,eAA2B,CAAC,cAAe,OAAQ,QAEnDp4B,KAAAkM,MAA6B6vB,EAAoBC,KAGjDh8B,KAAAk+B,oBAAsBnC,EACtB/7B,KAAA8H,KAAe,KAEf9H,KAAAs4B,mBAAkBhxB,YAAgBsgB,GAGlC5nB,KAAAg/B,mBACE,MAAMC,EAAOj/B,KAAKg4B,WAAWxkB,YAE7B,OADuByrB,IAAUA,EAAKxrB,OAAUwrB,EAAKtrB,mBAGjDsrB,EAAKxrB,MACHsoB,EAAoBE,QACpBF,EAAoBG,WAHtBH,EAAoBC,IAI1B,EARAgD,GAWAh/B,KAAAk/B,MAAgB,4BAA8Bl/B,KAAKk+B,oBAAoBl+B,KAAKg/B,cAG5Eh/B,MAAAm/B,KAAgBx+B,OAAY,eAAgB,KAE1C,MAAMy+B,EADQp/B,KAAKg4B,WAAWxkB,YAAYG,kBAAkBrI,MAAM,KACrC0C,IAAIyc,KAC/BA,WAEA3iB,KAAM2iB,EAAS4U,UAAU,EAAG,IAE5Bj3B,KAAMqiB,EAAS4U,UAAU,OAE3B,SAAOC,MAAQF,EAAgBG,GAhFb,yCAgFkBA,EAAEz3B,KAAyB,OAAS,WAAU,GAIpF9H,KAAA28B,gBAAeh8B,OAAY,eAAgB,IAAMX,MAAKm/B,IAAgBK,MAAMxxB,IAAIyxB,GAAKA,EAAEr3B,OAAS,IAGhGpI,KAAAw8B,aAAY77B,OAAY,YAAa,IAAMX,MAAKm/B,IAAgBO,UAAY,IA1DhE1/B,KAAKkL,IAAIqB,KAAK,cAAe,CAAEyrB,eAAzC,MAEMiH,EAAOjH,EAAWxkB,YACpByrB,IACEA,EAAKxrB,MACPzT,MAAK+3B,EAAuB4H,eAAe3H,EAAW8B,IACnDtyB,KAAK+xB,GAAUv5B,KAAKy+B,QAAQtb,IAAIoW,IAC5B0F,EAAKtrB,mBACZ3T,MAAK+3B,EAAuB6H,aAAa5H,EAAW8B,IACjDtyB,KAAK+xB,GAAUv5B,KAAKy+B,QAAQtb,IAAIoW,IAEzC,CA+BA4F,GAkBArB,WACE99B,KAAK8H,KAAO,KACZ9H,KAAKkM,MAAQ6vB,EAAoBE,OACnC,CAEA8B,eACE/9B,KAAK8H,KAAO,KACZ9H,KAAKkM,MAAQ6vB,EAAoBG,WAGjCl8B,MAAK+3B,EAAuB8H,sBAAsB7/B,KAAKg4B,WAAWsG,aAC/D92B,KAAK+xB,GAAUv5B,KAAKs4B,gBAAgBnV,IAAIoW,GAC7C,CAEAG,aAAa9nB,GACX5R,KAAK8H,KAAO8J,EAAM8B,IACpB,CAEA+lB,OACMz5B,KAAKkM,OAAS6vB,EAAoBE,QACpCj8B,MAAK+3B,EAAuB+H,MAAM9/B,KAAKg4B,WAAW8B,IAC/CntB,UAAU,IAAM3M,KAAKuB,OAAOyG,SACtBhI,KAAKkM,OAAS6vB,EAAoBG,YAC3Cl8B,MAAK+3B,EAAuBgI,QAAQ//B,KAAKg4B,WAAW8B,GAAI95B,KAAK8H,MAC1D6E,UAAU,IAAM3M,KAAKuB,OAAOyG,QAEnC,CAAC9G,SAAAlB,KAAA,mBAAAmB,iBAjGU49B,GAA6Bz8B,MAO9B4G,KAAe5G,MAAAC,MAAAD,MAAA+G,KAAA,EAAAnI,SAAAlB,KAAA,UAAA6T,EAAAtO,IAAA,MAPdw5B,EAA6Bv5B,UAAA,kCAAAG,MAAA,GAAAC,KAAA,EAAAC,OAAA,89BAAAC,SAAA,SAAAC,EAAAC,GAAA,KAAAD,EAAA,iBDzCtCzD,MAFJ,UAEIA,CAFqC,UAErCA,CAD6B,WAE3BA,MAAA,wBACFA,QACAA,MAAA,cAA6CA,MAAA,mBAAAA,aAAA2D,GAAA3D,MAAS0D,EAAAzE,OAAAyG,QAAc,GAClE1F,MAAA,cAAUA,MAAA,WAEdA,YACAA,MAAA,WAmCIA,MAjCA,EAAA09B,GAAA,IAiCA19B,CAjCqC,GAAA29B,GAAA,IAiCrC39B,CAtBwC,GAAA49B,GAAA,MAkG5C59B,QAGEA,MADF,6BACEA,CADuE,SAClEA,MAAA,oFACPA,UAEAA,MAAA,YACEA,MAAA,GAAA69B,GAAA,KAOJ79B,UAGAA,MAAA,GAAA89B,GAAA,yBAAA99B,qBAtIMA,MAAA,GAAAA,MAAA,IAAAA,MAAA,IAAA0D,EAAAk5B,OAAA,KAOF58B,MAAA,GAAAA,OAAAgE,EAAAN,EAAAg5B,gBAAAh5B,EAAAk4B,oBAAAjC,QAAA,EAAA31B,IAAAN,EAAAk4B,oBAAAhC,WAAA,GAAA51B,IAAAN,EAAAk4B,oBAAAlC,KAAA,OAgHqB15B,MAAA,GAAkCA,MAAlC,gBAAA0D,EAAA+2B,gBAAkCz6B,CAAD,aAKtDA,MAAA,GAAAA,MAAA0D,EAAAg5B,cAAAh5B,EAAAk4B,oBAAAlC,KAAA,uBC/FA1yB,KAAeC,UACfC,KAAaC,KACbL,MAAaQ,MACb+oB,GAAc8I,8BACdl1B,KACAC,KACAmD,IAAe+xB,KACfI,KACAuE,MAAwB55B,OAAA,gZAGfs4B,CAA6B,oHCjCpCz8B,MAAA,uBASEA,MALA,wBAAA20B,GAAA30B,MAAA2D,GAAA,MAAA0B,EAAArF,QAAA,OAAAA,MAAgBqF,EAAA24B,eAAArJ,GAAsB,EAKtC30B,CALuC,sBAAA20B,GAAA30B,MAAA2D,GAAA,MAAA0B,EAAArF,QAAA,OAAAA,MACzBqF,EAAA44B,aAAAtJ,GAAoB,EAIlC30B,CAJmC,uBAAA20B,GAAA30B,MAAA2D,GAAA,MAAA0B,EAAArF,QAAA,OAAAA,MACpBqF,EAAA64B,cAAAvJ,GAAqB,EAGpC30B,CAHqC,qBAAA20B,GAAA30B,MAAA2D,GAAA,MAAA0B,EAAArF,QAAA,OAAAA,MACxBqF,EAAA84B,YAAAxJ,GAAmB,EAEhC30B,CAFiC,uBAAA20B,GAAA30B,MAAA2D,GAAA,MAAA0B,EAAArF,QAAA,OAAAA,MAClBqF,EAAA+4B,cAAAzJ,GAAqB,EACpC30B,CADqC,yBAAA20B,GAAA30B,MAAA2D,GAAA,MAAA0B,EAAArF,QAAA,OAAAA,MACpBqF,EAAAg5B,gBAAA1J,GAAuB,GAM1C30B,gCALEA,MARA,UAAAqF,EAAA4xB,SAQAj3B,CARoB,cAAAqF,EAAAi5B,YAQpBt+B,CAP2B,UAAAA,MAAA,EAAAoD,GAAAiC,EAAAk5B,YAAAl5B,EAAAm5B,iBCsC5B,IAAMC,GAA0B,MAAjC,MAAOA,EAEXC,GACAC,GACAlJ,GAEAh4B,YACYwB,EACFW,EACA+1B,EACAx2B,GAHEzB,KAAAuB,SACFvB,KAAAkC,WACAlC,KAAAi4B,YACAj4B,KAAAyB,mBARVzB,MAAAghC,KAAgB/3B,KAAU4B,MAC1B7K,MAAAihC,KAAmBh4B,KAAUi4B,KAC7BlhC,MAAA+3B,KAAyB9uB,KAAUkvB,KASnCn4B,MAAAmhC,EAAyBnhC,MAAKghC,EAAcz1B,SAAS,yBAGrDvL,KAAAoP,WAAU9H,OAAO,GAGjBtH,MAAAohC,EAAgC,CAC9BC,MAAO,CACLh5B,YAAa,gDACbgJ,KAAM,+FAERiwB,QAAS,CACPj5B,YAAa,oGACbgJ,KAAM,wNAIVrR,KAAAuhC,cAAa7I,MAAS,IAEI,IADX14B,KAAKu5B,UACLxmB,OAAe/S,MAAKohC,EAAeC,MAAQrhC,MAAKohC,EAAeE,SAG9EthC,KAAA65B,YAAc75B,MAAKihC,EAAiBO,QAAQxhC,MAAKmhC,GAAwB1sB,MAEzEzU,KAAAu5B,UAASjyB,YAAgBsgB,GAEzB5nB,KAAA4gC,YAAc5gC,MAAKyhC,IACnBzhC,KAAA6gC,aAAc,EACd7gC,KAAA8gC,eAAgB,EAIhB9gC,MAAA0hC,GAAqB,CAlCjB,CAEJP,GAMAC,GAwBAO,GACAC,GACAF,GAGA5X,WACE9pB,MAAK6hC,IACL7hC,MAAKghC,EAAcp2B,iBAAiB,IAAM5K,MAAK6hC,IACjD,CAEApB,YAAYv5B,GACVlH,MAAK2hC,EAAWz6B,EAAO46B,IACvB9hC,MAAK4hC,EAAa16B,EAAO66B,SAC3B,CAEAzB,eAAetG,GACbh6B,MAAK2hC,EAASK,4BAA2B,EAC3C,CAEAzB,aAAavG,GACXh6B,MAAK2hC,EAASM,oBAAmB,GACjC,MAAMC,EAAUliC,KAAKu5B,SAASvrB,IAAI4D,GAASA,EAAMkoB,IACjD95B,MAAK+3B,EAAuBoK,QAAQD,EAASliC,KAAK65B,eAAeltB,UAAU,KACzE3M,MAAK6hC,EAAa,KAChB7hC,MAAK2hC,EAASK,4BAA2B,GACzChiC,MAAK2hC,EAASM,oBAAmB,EAAK,EACvC,EAEL,CAEAzB,cAAc5yB,GACZ,MAAMw0B,EAAWx0B,EAAMw0B,SACvB,IAAKA,EAAU,OACf,MAAMC,EAAaz0B,EAAM00B,KACzB,GAAID,IAAeD,EAAU,OAE7B,MAAMG,EAAY,IAAIviC,KAAKu5B,UACrBiJ,EAAYD,EAAU3iB,QAAQyiB,EAAWvgC,MACzC2gC,EAAUF,EAAU3iB,QAAQwiB,EAAStgC,MACrC4gC,EAAY1iC,MAAK2iC,EAAaJ,EAAWC,EAAWC,GAC1DziC,KAAKu5B,OAAOpW,IAAIuf,GAChB1iC,MAAK2hC,EAASiB,kBAChB,CAEAD,GAAaE,EAAcL,EAAmBC,GAC5C,MAAMhkB,EAAUokB,EAAIL,GACpBK,SAAIrJ,OAAOgJ,EAAW,GACtBK,EAAIrJ,OAAOiJ,EAAS,EAAGhkB,GAChB,IAAIokB,EACb,CAEAnC,cAAc1G,GACZ,MAAM8I,EAAe9iC,MAAK4hC,EAAWmB,iBACrC/iC,KAAK6gC,YAAciC,EAAa7jB,KAAK/S,GAAuB,MAAdA,EAAMknB,MACpDpzB,MAAKgjC,GACP,CAEArC,gBAAgB3G,GACd,MAAMiJ,EAAcjjC,MAAK2hC,EAASuB,iBAC5BC,EAAiBrwB,OAAOlH,KAAKq3B,GACnCjjC,KAAK8gC,cAAgBqC,EAAepwB,OAAS,EAC7C/S,MAAKgjC,GACP,CAEAA,KACE,MAAMI,EAAiBpjC,KAAK6gC,aAAe7gC,KAAK8gC,cAC5CsC,IAAmBpjC,MAAK0hC,GAC1B1hC,MAAK0hC,GAAqB,EAC1B1hC,MAAK2hC,EAASM,oBAAmB,KACvBmB,GAAkBpjC,MAAK0hC,IACjC1hC,MAAK0hC,GAAqB,EAC1B1hC,MAAK2hC,EAASM,oBAAmB,GAErC,CAEAx1B,MACEzM,MAAKghC,EAAczzB,YAAY,CAAC,OAAOvN,MAAKmhC,KAC9C,CAEAkC,iBACErjC,KAAKi4B,UAAUt2B,KAAKi2B,GAAqB,CACvC/1B,WAAW,EACXE,MAAO,SACPD,KAAM,CAAE+3B,YAAa75B,KAAK65B,cAAef,eAAgB94B,KAAKu5B,UAC9D93B,iBAAkBzB,KAAKyB,mBACtB6hC,cAAc32B,UAAU,IAAM3M,MAAK6hC,IACxC,CAEA0B,GAAkBr8B,GAChB,MAAMs8B,EAAYt8B,EAAOpF,KAAKwQ,UAE9B,GAAImD,IAAiBguB,kBAAkBD,GACrC,OAAOt8B,EAAOuN,MAEhB,IAAIivB,GAAc,EAClB,UAAW9xB,KAAS5R,KAAKu5B,SACvB,GAAI9jB,IAAiBkuB,aAAaH,GAChCE,GAAc,OAGhB,GAAIjuB,IAAiBmuB,WAAWJ,GAC9BE,GAAc,OAGhB,GAAI9xB,EAAMykB,aAAenvB,EAAOpF,KAAKu0B,WACnC,MAGJ,OAAOqN,EAAc,6BAA6Bx8B,EAAOuN,eAAiBvN,EAAOuN,KACnF,CAEAotB,GAAax1B,GACXrM,MAAK+3B,EAAuB8L,iBAAiB7jC,MAAKmhC,GAAwB35B,KAAK+xB,IAC7Ev5B,KAAKu5B,OAAOpW,IAAIoW,GAEdltB,KAAQ,EAEd,CAEAy3B,GAAmBlyB,GAEjB,GAAIA,EAAM4B,aAAaG,kBAAmB,CACxC,IAAKb,OAAOlH,KAAKgG,EAAMmyB,aAAahxB,OAElC,YADA/S,KAAKkC,SAASP,KAAK,qEAAsE,KAAM,CAAEU,SAAU,MAG7GrC,KAAKkC,SAASP,KAAK,oGAAqG,KAAM,CAAEU,SAAU,KAC5I,CAGIuP,EAAM4B,aAAaC,OACrBzT,KAAKkC,SAASP,KAAK,mFAAoF,KAAM,CAAEU,SAAU,MAE3H,MAAMW,EAAiB,CACrBitB,MAAOnd,OAAOlH,KAAKgG,EAAMmyB,aAAa/1B,IAAKg2B,GAAMhkC,MAAKikC,EAAsBryB,EAAOoyB,KAG/EE,KAAUC,KAAiBnhC,GACjChD,MAAKghC,EAAczzB,YAAY,CAAC,QAAQ22B,KAC1C,CAEAD,GAAsBryB,EAAcwyB,GAElC,MAAMC,EAAiBD,EAAa9qB,QAAQ,IAAK,IAC3CgrB,GAAmB,IAAMF,GAAc9qB,QAAQ,KAAM,KAGrDirB,EAAa3yB,EAAMiB,SAASwxB,GAClC,OAAqB,MAAdE,EACHC,IAASC,OAAOF,EAAWzK,IAC3B,IACG0K,IAASE,YAAY9yB,EAAMkoB,GAAIwK,EAAiBK,KAAaC,SAASC,WACzEC,QAAS,CAAE3O,KAAMvkB,EAAMykB,YAE7B,CAGA0O,GAAUnzB,GACR5R,KAAKkC,SAASP,KAAK,oBACnB3B,MAAK+3B,EAAuB1iB,SAASzD,EAAO5R,KAAK65B,eAAeltB,UAAU,KACxE3M,KAAKkC,SAASP,KAAK,YAAa,KAAM,CAAEU,SAAU,MAClDrC,MAAK6hC,GAAY,EAErB,CAEAmD,GAAiBpzB,GACf5R,MAAKghC,EAAczzB,YAAY,CAAC,UAAUvN,MAAKmhC,KAA0BvvB,EAAMkoB,gBACjF,CAEAmL,GAAQrzB,GACN5R,MAAKghC,EAAczzB,YAAY,CAAC,UAAUvN,MAAKmhC,KAA0BvvB,EAAMkoB,WACjF,CAEAoL,GAAQtzB,GACDynB,QAAQ,oCAAoCznB,EAAMykB,gBAAgBzkB,EAAMkoB,UAC7E95B,KAAKkC,SAASP,KAAK,eACnB3B,MAAK+3B,EAAuBvM,OAAO5Z,EAAO5R,KAAK65B,eAAeltB,UAAU,KACtE3M,KAAKkC,SAASP,KAAK,UAAW,KAAM,CAAEU,SAAU,MAChDrC,MAAK6hC,GAAY,GAErB,CAEAsD,GAAiBvzB,GACf5R,MAAKghC,EAAczzB,YAAY,CAAC63B,IAAgBC,gBAAgBzzB,EAAMkoB,KACxE,CAEAwL,GAAwB1zB,GACtB,MAAM2zB,EAAY3zB,EAAMqB,mBACxB,GAAgC,GAA5BsyB,GAAWryB,cACb,MAAM,IAAIsyB,MAAM,6DAElB,MAAMC,EAAiCF,EAAUnyB,SAC7CoxB,IAASC,OAAOc,EAAUnyB,UAC1BoxB,IAASE,YAAY9yB,EAAMkoB,GAAIyL,EAAUG,SAAUf,KAAaC,SAASC,WACvEX,KAAUC,KAAiB,CAAElU,MAAO,CAACwV,KAC3CzlC,MAAKghC,EAAczzB,YAAY,CAAC,QAAQ22B,KAC1C,CAEAyB,GAAc/zB,GACZ,MAAM5K,EAAM4+B,IAAaP,gBACvBzzB,EAAMkoB,GACN,uBAAuBloB,EAAMykB,eAAezkB,EAAMkoB,OAEpD95B,MAAKghC,EAAczzB,YAAY,CAACvG,GAClC,CAEA6+B,GAAgBj0B,GACkB5R,KAAKi4B,UAAUt2B,KAAKo9B,GAA+B,CACjFl9B,WAAW,EACXE,MAAO,QACPD,KAAM8P,EACNnQ,iBAAkBzB,KAAKyB,mBAED6hC,cAAc32B,UAAU,IAAM3M,MAAK6hC,IAC7D,CAIAJ,KAgGE,MA/FiC,IAC5BqE,IACHC,YAAY7+B,GACV,MAAM0K,EAAe1K,EAAOpF,KACtBkkC,EAAqB,GAC3B,OAAIp0B,EAAMC,SAASo0B,aAAeD,EAAS7nB,KAAK,oBAC5C1I,IAAiBkuB,aAAa/xB,EAAMU,YAAc0zB,EAAS7nB,KAAK,mBAChE1I,IAAiBmuB,WAAWhyB,EAAMU,YAAc0zB,EAAS7nB,KAAK,iBAC3D6nB,CACT,EACAjX,WAAY,CACV,CACEmX,SAAS,EACTnkC,MAAO,GACPokC,UAAW,kCAAkC76B,MAAM,MAErD,CACEsG,MAAO,QACP7P,MAAO,GACPokC,UAAW,yCAAyC76B,MAAM,KAC1D86B,YAAcC,GAAuBA,EAAEvkC,KAAKkQ,QAC5Cs0B,aAAc9wB,GACd+wB,mBAA4B,CAC1B5wB,WAAa/D,GAAU5R,MAAK+kC,EAAUnzB,KAG1C,IACK40B,IAAkBC,gBACrBC,WAAY,OACZ90B,MAAO,aACP+0B,cAAgBN,GAAuBrmC,MAAK8jC,EAAmBuC,EAAEvkC,MACjEwkC,aAAep/B,GAAgClH,MAAKujC,EAAkBr8B,IAExE,IACKs/B,IAAkBI,UACrBh1B,MAAO,OACP7P,MAAO,GACPqkC,YAAcC,GAAuBA,EAAEvkC,KAAKyQ,KAC5C+zB,aAAcvwB,IAEhB,IACKywB,IAAkBI,UACrBF,WAAY,QACZ90B,MAAO,YACP7P,MAAO,IACPokC,UAAYE,IAA0BA,EAAEvkC,KAAK+P,SAASO,YAAc,wBAA0B,+BAAgC9G,MAAM,KACpI86B,YAAcC,GAAuBA,EAAEvkC,KAAKwQ,UAAU+sB,UAAUgH,EAAEvkC,KAAKwQ,UAAUsN,QAAQ,KAAO,GAChG0mB,aAAc5xB,GACd6xB,mBAA4B,CAC1B5xB,kBAAoB/C,GAAU5R,MAAKglC,EAAiBpzB,KAGxD,CACEA,MAAO,QACPvB,KAAM,EACNw2B,SAAU,IACVV,UAAW,aACXW,UAAU,EACVn5B,OAAQ,qBACRy4B,YAAcC,GAAuBA,EAAEvkC,KAAK+Q,UAAUk0B,KAAK5Q,MAE7D,CACEvkB,MAAO,UACP7P,MAAO,GACPilC,YAAa,QACbb,UAAW,aACXG,aAAcxxB,IAEhB,CACElD,MAAO,QACPvB,KAAM,EACNw2B,SAAU,IACVV,UAAW,aACXW,UAAU,EACVn5B,OAAQ,qBACRy4B,YAAcC,GAAuBA,EAAEvkC,KAAK+Q,UAAUk0B,KAAKE,OAE7D,IACKT,IAAkBU,oBACrBZ,aAAcr0B,GACds0B,mBAA4B,CAC1B/0B,GAAIA,CAACoC,EAAMhC,KACT,OAAQgC,GACN,IAAK,SAAU5T,MAAKilC,EAAQrzB,GAAQ,MACpC,IAAK,SAAU5R,MAAKklC,EAAQtzB,GAAQ,MACpC,IAAK,cAAe5R,MAAKmlC,EAAiBvzB,GAAQ,MAClD,IAAK,WAAY5R,MAAK2lC,EAAc/zB,GAAQ,MAC5C,IAAK,iBAAkB5R,MAAK6lC,EAAgBj0B,GAAQ,MACpD,IAAK,QAAS5R,MAAKslC,EAAwB1zB,GAC7C,KAOZ,CAAC1Q,SAAAlB,KAAA,mBAAAmB,iBAtWU4/B,GAA0Bz+B,MAAAC,KAAAD,MAAA+G,OAAA/G,MAAAC,KAAAD,aAAA,EAAApB,SAAAlB,KAAA,UAAA6T,EAAAtO,IAAA,MAA1Bw7B,EAA0Bv7B,UAAA,8BAAAG,MAAA,GAAAC,KAAA,EAAAC,OAAA,kpBAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,IDhDjCzD,MAHN,UAGMA,CAHuD,yBAGvDA,CAFoH,UAEpHA,CAD+C,WACTA,MAAA,GAAsDA,QAC5FA,MAAA,cAA6CA,MAAA,0BAAS0D,EAAAzE,OAAAyG,OAAc,GAClE1F,MAAA,cAAUA,MAAA,WAEdA,YAEAA,MAAA,EAAA6kC,GAAA,yBAoBE7kC,MAFF,yBAEEA,CAF8B,eAEUA,MAAA,0BAAS0D,EAAAq9B,gBAAgB,GAAE/gC,MAAA,0BAAsDA,QAEzHA,MAAA,eAMEA,MAAA,0BAAS0D,EAAAyG,KAAK,GAEdnK,MAAA,eAAUA,MAAA,UAIlBA,gBAEAA,MAAA,oCA5C2CA,QAAgDA,MAAhD,WAAA0D,EAAAu7B,aAAgDj/B,CAAvB,UAAA0D,EAAAoJ,UAAuB9M,CAAD,mBAAAgE,EAAAN,EAAAuzB,UAAA,KAAAjzB,EAAAyM,QAE9CzQ,MAAA,GAAAA,MAAA,WAAA8kC,EAAAphC,EAAA6zB,eAAA,KAAAuN,EAAAC,SAAA,OAAAD,EAAAphC,EAAA6zB,eAAA,KAAAuN,EAAAjR,MAAA,SAMxC7zB,MAAA,GAAAA,OAAA,OAAA67B,EAAAn4B,EAAAuzB,UAAA,KAAA4E,EAAAprB,QAAA,QAoBqEzQ,MAAA,GAAAA,YAAA,4CAOjEA,MAAA,GAAAA,MAAA,iBAAA0D,EAAA6zB,eAAA7zB,EAAA6zB,cAAAhoB,SAAAiE,0BCIJxM,KAAeC,eACfC,KAAaC,KACb69B,KACA/gC,KACA2I,IACAq4B,IACAC,IAAa59B,MACbD,IAAe8xB,KACfhtB,KAAqB5E,cAAA,WAGZk3B,CAA0B,wLClDrCz+B,MAAA,gCAA+BA,MAAA,mBAAAA,MAAA2D,GAAA,MAAA0B,EAAArF,QAAA,OAAAA,MAASqF,EAAA3G,aAAY,GAElDsB,MAAA,cAAuCA,MAAA,GAAYA,QAGjDA,MADF,UACEA,CADqC,WACAA,MAAA,wBAAgDA,QACrFA,MAAA,WAAwCA,MAAA,yBAA+CA,QACvFA,MAAA,IAEJA,kCATsDA,MAAA,QAAAA,MAAA,uBAAAqF,EAAAjH,YAE1C4B,MAAA,GAAAA,YAAA,aAAAqF,EAAAqO,SAA6B1T,cAAAqF,EAAAqO,QAGA1T,MAAA,GAAAA,YAAA,sCACGA,MAAA,GAAAA,YAAA,uCCUvC,IAAMw5B,EAAyB,MAAhC,MAAOA,UAAiCp8B,IAI5CK,cACEkL,QAJFjL,KAAAynC,UAASvnC,QAAe,GAOxBF,KAAAgW,QAAOrV,MAAY,OAAQ,IAAMX,KAAKynC,SAAW,OAAS,UAF1D,CAACvmC,SAAAlB,KAAA,mBAAAmB,iBANU26B,EAAwB,EAAA56B,SAAAlB,KAAA,UAAAwC,EAAA+C,IAAA,MAAxBu2B,EAAwBt2B,UAAA,4BAAAlE,OAAA,CAAAmmC,OAAA,cAAA/tB,SAAA,CAAApX,OAAAmD,mBAAAC,EAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,6KAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,YDjBrCzD,MAAA,EAAAolC,EAAA,qBAAAplC,MAAA0D,EAAAnF,OAAA,qBCYI2I,KAAajH,KACboH,IAAeN,KACfkL,KAAc9N,OAAA,8oBAGLq1B,CAAyB,wPChBpCx5B,MAAA,uCAA4BA,MAAA,QAAAA,MAAA,EAAAoD,EAAAM,ICcvB,IAAMpE,EAA0B,MAAjC,MAAOA,EACX+lC,GAGA5nC,YACkCi4B,EACtBz2B,EACFyJ,GAFwBhL,KAAAg4B,aACtBh4B,KAAAuB,SACFvB,KAAAgL,QANVhL,MAAA2nC,KAAoB1+B,KAAUtC,KAC9B3G,KAAAwB,aAAY8F,OAAe,IAcjBtH,KAAA6H,aAAYoB,KAAUhH,IAR5B,CAEJ6nB,WACE9pB,KAAKwB,UAAU2hB,IAAInjB,KAAKgL,MAAMI,SAAStJ,KAAKN,WAAgBxB,KAAKg4B,YAAc,IAC/Eh4B,KAAK4nC,eAAiB5nC,MAAK2nC,EAAkB9gC,iBAAiB7G,KAAKwB,WAAWiT,KAChF,CAACvT,SAAAlB,KAAA,mBAAAmB,iBAbUS,GAA0BU,MAK3B4G,KAAe5G,MAAAC,KAAAD,MAAA+G,MAAA,EAAAnI,SAAAlB,KAAA,UAAAwC,EAAA+C,IAAA,MALd3D,EAA0B4D,UAAA,8BAAAG,MAAA,EAAAC,KAAA,EAAAC,OAAA,cAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,GDfvCzD,MAAA,EAAAulC,EAAA,+CAAAvlC,OAAAwlC,EAAA9hC,EAAA4hC,kBAAA,KAAAE,mBCYQh/B,KAA6Be,cAAA,WAGxBjI,CAA0B","names":["InputTypeCatalog","BooleanDefault","BooleanTristate","CustomDefault","CustomGps","CustomJsonEditor","DateTimeDefault","DefaultSuffix","EmptyDefault","EmptyEnd","EmptyMessage","EntityContentBlocks","EntityDefault","EntityQuery","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","NumberDefault","NumberDropdown","StringDefault","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","StringWysiwyg","EntityPicker","StringPicker","NumberPicker","Unknown","FeatureComponentBase","#matDialog","#viewContainerRef","#changeDetectorRef","#featuresService","constructor","this","featureNameId","input","required","showIf","inject","MatDialog","ViewContainerRef","ChangeDetectorRef","FeaturesService","feature","computedObj","getCurrent","show","feat","isEnabled","openDialog","openFeatureDialog","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_5__","FsC","inputs","dialog","featureId","viewContainerRef","changeDetectorRef","open","FeatureInfoDialogComponent","autoFocus","data","width","markForCheck","ClipboardService","snackBar","copyToClipboard","text","duration","i0","i1","_angular_core__WEBPACK_IMPORTED_MODULE_1__","jDH","factory","ɵfac","providedIn","ErrorStateMatcher","isErrorState","control","form","invalid","touched","submitted","token","FeatureNames","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","ContentTypeFieldsReuseDefinitions","AppExportAssetsAdvanced","DataExportImportBundles","PickerUiCheckbox","PickerUiRadio","PickerSourceCsv","PickerSourceAppAssets","PickerFormulas","PickerUiMoreInfo","MatFormFieldModule","type","imports","MatCommonModule","ObserversModule","MatFormField","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","FieldHintComponent","isError","isShort","toggleIsShort","_angular_core__WEBPACK_IMPORTED_MODULE_0__","VBU","selectors","ngContentSelectors","_c0","decls","vars","consts","template","rf","ctx","_r1","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","NgClass","NgTemplateOutlet","styles","webApiFeatureDetails","FeatureDetailService","HttpServiceBaseSignal","getFeatureDetail","nameId","newHttpResource","url","apiUrl","params","getFeatureDetails","nameIds","featureList","signal","fetchPromise","then","update","prev","ctx_r1","_r3","clipboard","guid","_r4","close","FeatureDetailsDialogComponent_Conditional_0_Conditional_13_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_14_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_26_Template","name","description","mySpecs","showStatus","showGuid","security","Impact","Message","link","showClose","FeatureDetailsDialogComponent","dialogSpecs","specs","transient","MAT_DIALOG_DATA","FeatureDetailsDialogComponent_Conditional_0_Template","MatCardModule","i2","MatButtonModule","i3","MatIconModule","i4","SafeHtmlPipe","TranslateModule","i5","encapsulation","_ErrorStateTracker","_defaultMatcher","ngControl","_parentFormGroup","_parentForm","_stateChanges","errorState","matcher","updateErrorState","oldState","parent","newState","next","logSpecs","doOnDialogClosed","DialogRoutingService","ServiceBase","router","route","super","log","classLog","snapshot","urlSegments","split","getParam","key","paramMap","get","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","fnIf","subscriptions","add","childDialogClosed$","subscribe","a","end","doOnDialogClosedWithData","#childDialogClosedWithData","urlSubRoute","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","navRelative","commands","events","pipe","filter","event","NavigationEnd","startWith","firstChild","map","pairwise","hadChildBefore","hasChildNow","tap","fn","snapShot","curr","_angular_core__WEBPACK_IMPORTED_MODULE_8__","GridWithHelpComponent","gridWrapper","viewChild","read","ElementRef","agGrid","contentChild","AgGridAngular","dialogAction","MatDialogActions","helpText","refresh","rowLength","DEFAULT_ROW_HEIGHT","GRID_HEADER_HEIGHT","HELP_CARD_BUFFER","effect","gridWrapperEl","nativeElement","untracked","#updateLayout","agGridEl","dialogActionEl","helpCard","querySelector","classList","toggle","style","flex","dimensions","#calculateDimensions","rowHeight","agGridHeight","maxHeight","document","clientHeight","dialogHeaderHeight","dialogActionHeight","shouldHideHelp","helpCardHeight","wrapperHeight","offsetHeight","contentQueries","dirIndex","hint","_r2","ctx_r2","do","shareText","shareOrInheritIcon","_r5","field","EditInfo","DisableRename","DisableDelete","IsTitle","ContentTypeFieldsActionsComponent","agInit","disableEdit","DisableEdit","enablePermissions","InputType","Type","DataTypeCatalog","Hyperlink","enableMetadata","DisableMetadata","metadataCount","Metadata","Object","length","enableImageConfig","imageConfiguration","isRecommended","imgConfigCount","entityId","highlightOrDisabled","clickToConfigure","ss","SysSettings","Share","Guid","InheritMetadataOf","verb","debug_node_JnOYh9kg","ContentTypeFieldsActionsComponent_Conditional_10_Template","ContentTypeFieldsActionsComponent_Conditional_11_Template","ContentTypeFieldsActionsComponent_ng_template_17_Template","Permissions","Count","menu_r6","MatRippleModule","MatBadgeModule","MatMenuModule","TippyDirective","changeInputType","value","ContentTypeFieldsInputTypeComponent","onChangeInputType","ContentTypeFieldsInputTypeComponent_Conditional_0_Template","ContentTypeFieldsInputTypeComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ContentTypeFieldsSpecialComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent_Conditional_2_Template","setTitle","isTitle","suitableForTitle","ContentTypeFieldsTitleComponent","InputTypeHelpers","isEmpty","onSetTitle","ContentTypeFieldsTitleComponent_Conditional_1_Template","ContentTypeFieldsTitleComponent_Conditional_2_Template","ReadOnly","ContentTypeFieldsTypeComponent","icon","calculateTypeIcon","_DisposeViewRepeaterStrategy","applyChanges","changes","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","currentIndex","view","operation","previousIndex","insertContext","createEmbeddedView","templateRef","context","index","_ViewRepeaterOperation","INSERTED","remove","REMOVED","move","MOVED","detach","CdkTable_Conditional_2_Template","CdkTable_Conditional_3_Template","CdkTable_Conditional_4_Template","CDK_TABLE","InjectionToken","CdkCellDef","TemplateRef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","_table","optional","_hasStickyChanged","_name","_setNameInput","sticky","_sticky","stickyEnd","_stickyEnd","cell","headerCell","footerCell","cssClassFriendlyName","_columnCssClassName","hasStickyChanged","resetStickyChanged","_updateColumnCssClassName","replace","_t","first","booleanAttribute","features","provide","useExisting","BaseCdkCell","columnDef","elementRef","CdkHeaderCell","hostAttrs","CdkCell","role","_getCellRole","setAttribute","BaseRowDef","_differs","IterableDiffers","columns","_columnsDiffer","ngOnChanges","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","when","CdkCellOutlet","_viewContainer","cells","mostRecentCellOutlet","ngOnDestroy","CdkHeaderRow","dependencies","CdkRow","CdkNoDataRow","_contentClassName","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","_isBrowser","_needsPositionStickyOnElement","direction","_positionListener","_tableInjector","_elemSizeCache","WeakMap","_resizeObserver","globalThis","ResizeObserver","entries","_updateCachedSizes","_updatedStickyColumnsParamsToReplay","_stickyColumnsReplayTimeout","_cachedCellWidths","_borderCellCss","_destroyed","top","bottom","left","right","clearStickyPositioning","rows","stickyDirections","includes","_removeFromStickyColumnReplayQueue","elementsToClear","row","nodeType","ELEMENT_NODE","push","Array","from","children","afterNextRender","write","element","_removeStickyStyle","injector","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","replay","some","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","isRtl","start","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","cellWidths","startPositions","endPositions","_updateStickyColumnReplayQueue","earlyRead","_getCellWidths","_getStickyStartColumnPositions","_getStickyEndColumnPositions","i","_addStickyStyle","w","slice","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","height","_retrieveElementSize","borderedRowIndex","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","destroy","clearTimeout","disconnect","contains","dir","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","firstRowCells","widths","positions","nextPosition","cachedSize","clientRect","getBoundingClientRect","size","set","observe","box","rowsSet","Set","has","needsColumnUpdate","entry","newEntry","borderBoxSize","inlineSize","blockSize","contentRect","target","isCell","setTimeout","klass","STICKY_POSITIONING_LISTENER","DataRowOutlet","viewContainer","table","_rowOutlet","_outletAssigned","HeaderRowOutlet","_headerRowOutlet","FooterRowOutlet","_footerRowOutlet","NoDataRowOutlet","_noDataRowOutlet","CdkTable","_changeDetectorRef","_elementRef","_dir","Directionality","_platform","Platform","_viewRepeater","_VIEW_REPEATER_STRATEGY","_viewportRuler","ViewportRuler","_stickyPositioningListener","skipSelf","_document","DOCUMENT","_data","_onDestroy","Subject","_renderRows","_renderChangeSubscription","_columnDefsByName","Map","_rowDefs","_headerRowDefs","_footerRowDefs","_dataDiffer","_defaultRowDef","_customColumnDefs","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_customNoDataRow","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","_stickyStyler","stickyCssClass","needsPositionStickyOnElement","_isServer","_isShowingNoDataRow","_hasAllOutlets","_hasInitialized","undefined","_cellRoleInternal","tableRole","getAttribute","trackBy","_trackByFn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_multiTemplateDataRows","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","_fixedLayout","contentChanged","EventEmitter","viewChange","BehaviorSubject","Number","MAX_VALUE","_contentColumnDefs","_contentRowDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_noDataRow","_injector","Injector","HostAttributeToken","isBrowser","nodeName","_i","dataRow","dataIndex","ngOnInit","_setupStickyStyler","change","takeUntil","ngAfterContentInit","ngAfterContentChecked","_canRender","_render","forEach","def","clear","complete","isDataSource","renderRows","_getAllRenderRows","_updateNoDataRow","_adjustedPreviousIndex","_getEmbeddedViewArgs","item","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","$implicit","addColumnDef","removeColumnDef","delete","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","closestTableSection","display","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","_cacheRowDefs","_cacheColumnDefs","rowDefsChanged","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_observeRenderChanges","_checkStickyStates","prevCachedRenderRows","renderRowsForData","_getRenderRowsForData","j","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeArrayAndSet","_getOwnDefs","defaultRowDefs","columnsDiffReducer","dataColumnsChanged","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isObservable","isArray","of","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","outlet","cellTemplate","_getCellTemplates","renderIndex","count","last","even","odd","columnId","stickyCheckReducer","d","items","shouldShow","container","rootNode","hostVars","hostBindings","outputs","exportAs","useClass","useValue","array","concat","section","uppercaseSection","toUpperCase","current","parentNode","CdkTableModule","ScrollingModule","MatTable_Conditional_2_Template","MatTable_Conditional_3_Template","MatTable_Conditional_4_Template","MatTable","ɵMatTable_BaseFactory","MatCellDef","ɵMatCellDef_BaseFactory","MatHeaderCellDef","ɵMatHeaderCellDef_BaseFactory","MatColumnDef","ɵMatColumnDef_BaseFactory","MatHeaderCell","ɵMatHeaderCell_BaseFactory","MatCell","ɵMatCell_BaseFactory","MatHeaderRowDef","ɵMatHeaderRowDef_BaseFactory","MatRowDef","ɵMatRowDef_BaseFactory","MatHeaderRow","ɵMatHeaderRow_BaseFactory","MatRow","ɵMatRow_BaseFactory","MatTableModule","MatTableDataSource","DataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","filteredData","_filterData","sort","_sort","_updateChangeSubscription","paginator","_paginator","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","active","b","valueA","valueB","valueAType","valueBType","comparatorResult","filterPredicate","transformedFilter","trim","toLowerCase","initialData","sortChange","merge","initialized","pageChange","page","combineLatest","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","lastPageIndex","Math","ceil","newPageIndex","min","field_r2","ContentType","Name","field_r3","StaticName","field_r4","field_r6","ctx_r6","selectField","fieldNameError","newName_r10","errors","reservedNames","FieldSharingAddMany_td_45_Conditional_6_Conditional_0_Template","FieldSharingAddMany_td_45_Conditional_6_Conditional_1_Template","pattern","$event","item_r9","_r8","newName","FieldSharingAddMany_td_45_Conditional_6_Template","fieldNamePattern","i_r11","item_r12","item_r14","_r13","removeField","FieldSharingAddMany","BaseComponent","#features","#contentTypesFieldsSvc","dialogData","matDialog","hostClass","ContentTypesFieldsService","optionsColumns","selectedColumns","shareableFields","selectedFields","#reservedNamesSystem","getReservedNames","computed","reserved","ReservedNamesValidatorDirective","mergeReserved","existingFields","saving","signalObj","#fieldShareConfigManagement","disableClose","backdropClick","dirty","confirm","getShareableFieldsPromise","fields","splice","save","inheritField","concatMap","addInheritedField","contentType","Id","catchError","_","toArray","viewQuery","NgForm","FieldSharingAddMany_th_26_Template","FieldSharingAddMany_td_27_Template","FieldSharingAddMany_th_29_Template","FieldSharingAddMany_td_30_Template","FieldSharingAddMany_th_32_Template","FieldSharingAddMany_td_33_Template","FieldSharingAddMany_th_35_Template","FieldSharingAddMany_td_36_Template","FieldSharingAddMany_tr_37_Template","FieldSharingAddMany_tr_38_Template","FieldSharingAddMany_th_44_Template","FieldSharingAddMany_td_45_Template","FieldSharingAddMany_th_47_Template","FieldSharingAddMany_td_48_Template","FieldSharingAddMany_th_50_Template","FieldSharingAddMany_td_51_Template","FieldSharingAddMany_tr_52_Template","FieldSharingAddMany_tr_53_Template","ngForm_r15","valid","FormsModule","i6","i7","MatInputModule","i8","i9","FeatureTextInfoComponent","SharingOrInheriting","None","Sharing","Inheriting","ShareOrInheritDialogComponent_Case_9_ng_container_8_Template","detailsOrWarning_r3","s_r4","ShareOrInheritDialogComponent_Case_10_Conditional_4_For_2_Template","_forTrack0","inherited","s_r5","ShareOrInheritDialogComponent_Case_10_Conditional_6_For_6_Template","notInherited","ShareOrInheritDialogComponent_Case_10_Conditional_4_Template","ShareOrInheritDialogComponent_Case_10_ng_container_5_Template","ShareOrInheritDialogComponent_Case_10_Conditional_6_Template","requiredFeature","field_r7","field_r8","field_r9","row_r11","_r10","ShareOrInheritDialogComponent_Case_11_Case_20_th_11_Template","ShareOrInheritDialogComponent_Case_11_Case_20_td_12_Template","ShareOrInheritDialogComponent_Case_11_Case_20_th_14_Template","ShareOrInheritDialogComponent_Case_11_Case_20_td_15_Template","ShareOrInheritDialogComponent_Case_11_Case_20_th_17_Template","ShareOrInheritDialogComponent_Case_11_Case_20_td_18_Template","ShareOrInheritDialogComponent_Case_11_Case_20_tr_19_Template","ShareOrInheritDialogComponent_Case_11_Case_20_tr_20_Template","_r6","setShare","startInherit","ShareOrInheritDialogComponent_Case_11_Case_19_Template","ShareOrInheritDialogComponent_Case_11_Case_20_Template","sharingOrInheriting","tmp_4_0","_r12","field_r13","AttributeId","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Conditional_0_For_2_Template","_forTrack1","details","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Conditional_0_Template","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Conditional_1_Template","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Template","ShareOrInheritDialogComponent_ng_template_17_Conditional_1_Template","all","ShareOrInheritDialogComponent","initialState","sysS","title","#inheritsInfo","withFieldNames","substring","groupBy","g","none","n","inherits","getDescendants","getAncestors","getShareableFieldsFor","share","inherit","ShareOrInheritDialogComponent_Case_9_Template","ShareOrInheritDialogComponent_Case_10_Template","ShareOrInheritDialogComponent_Case_11_Template","ShareOrInheritDialogComponent_Conditional_16_Template","ShareOrInheritDialogComponent_ng_template_17_Template","FeatureIconTextComponent","onRowDragEnter","onRowDragEnd","onRowDragMove","onGridReady","onSortChanged","onFilterChanged","gridOptions","sortApplied","filterApplied","ContentTypeFieldsComponent","#dialogRouter","#contentTypesSvc","ContentTypesService","#contentTypeStaticName","#helpTextConst","empty","content","uxHelpText","getType","#buildGridOptions","#rowDragSuppressed","#gridApi","#columnApi","#fetchFields","api","columnApi","setEnableCellTextSelection","setSuppressRowDrag","idArray","reOrder","overNode","movingNode","node","newFields","fromIndex","toIndex","reordered","#moveInArray","clearFocusedCell","arr","columnStates","getColumnState","#suppressRowDrag","filterModel","getFilterModel","fieldsFiltered","shouldSuppress","addSharedField","afterClosed","#nameCellRenderer","inputType","endsPreviousGroup","isGroupOpen","isGroupStart","isGroupEnd","getFieldsPromise","#editFieldMetadata","ConfigTypes","t","#createItemDefinition","formUrl","convertFormToUrl","metadataType","keyForMdLookup","newItemTypeName","existingMd","EditPrep","editId","newMetadata","eavConstants","metadata","attribute","Prefill","#setTitle","#changeInputType","#rename","#delete","#openPermissions","GoToPermissions","getUrlAttribute","#openImageConfiguration","imgConfig","Error","itemIdentifier","typeName","#openMetadata","GoToMetadata","#shareOrInherit","defaultGridOptions","getRowClass","rowClass","DisableSort","rowDrag","cellClass","valueGetter","p","cellRenderer","cellRendererParams","ColumnDefinitions","TextWidePrimary","headerName","onCellClicked","ItemsText","minWidth","sortable","All","headerClass","Notes","ActionsPinnedRight5","ContentTypeFieldsComponent_Conditional_8_Template","tmp_3_0","Label","RouterOutlet","ToggleDebugDirective","SxcGridModule","asInfo","FeatureTextInfoComponent_Conditional_0_Template","#featureDetailSvc","featureDetails","FeatureInfoDialogComponent_Conditional_0_Template","tmp_0_0"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/services/clipboard.service.ts","./node_modules/@angular/material/fesm2022/error-options-DCNQlTOA.mjs","./projects/eav-ui/src/app/features/feature-names.ts","./node_modules/@angular/material/fesm2022/module-DzZHEh7B.mjs","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./node_modules/@angular/material/fesm2022/error-state-Dtb1IHM-.mjs","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/ag-grid/grid-with-help/grid-with-help.component.ts","./projects/eav-ui/src/app/shared/ag-grid/grid-with-help/grid-with-help.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.html","./node_modules/@angular/cdk/fesm2022/dispose-view-repeater-strategy-Cvpav0PR.mjs","./node_modules/@angular/cdk/fesm2022/table.mjs","./node_modules/@angular/material/fesm2022/table.mjs","./projects/eav-ui/src/app/content-type-fields/field-sharing-add-many/field-sharing-add-many.component.html","./projects/eav-ui/src/app/content-type-fields/field-sharing-add-many/field-sharing-add-many.component.ts","./projects/eav-ui/src/app/content-type-fields/field-sharing-configure/field-sharing-configure.enums.ts","./projects/eav-ui/src/app/content-type-fields/field-sharing-configure/field-sharing-configure.component.html","./projects/eav-ui/src/app/content-type-fields/field-sharing-configure/field-sharing-configure.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts"],"sourcesContent":["export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { ChangeDetectorRef, Directive, ViewContainerRef, inject, input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { FeaturesService } from '../features.service';\r\n\r\n/**\r\n * Base component for various UI components which inform that a feature is not enabled.\r\n * It's meant to show the indicator/warning, and open a dialog with more information about the feature.\r\n */\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n\r\n  /** Feature NameId to check */\r\n  featureNameId = input.required<string>();\r\n\r\n  /** When to show it - typically when it is _not_ enabled (default) */\r\n  showIf = input<boolean>(false);\r\n\r\n  #matDialog = inject(MatDialog);\r\n  #viewContainerRef = inject(ViewContainerRef);\r\n  #changeDetectorRef = inject(ChangeDetectorRef);\r\n  #featuresService = inject(FeaturesService);\r\n\r\n  constructor() { }\r\n\r\n  feature = computedObj('feature', () => this.#featuresService.getCurrent(this.featureNameId()));\r\n\r\n  show = computedObj('show', () => {\r\n    const feat = this.feature();\r\n    if (feat == null) return false;\r\n    return this.showIf() == (feat?.isEnabled ?? false);\r\n  })\r\n\r\n  openDialog() {\r\n    openFeatureDialog(this.#matDialog, this.featureNameId(), this.#viewContainerRef, this.#changeDetectorRef);\r\n  }\r\n}\r\n\r\nexport function openFeatureDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n  dialog.open(FeatureInfoDialogComponent, {\r\n    autoFocus: false,\r\n    data: featureId,\r\n    viewContainerRef: viewContainerRef,\r\n    width: '400px',\r\n  });\r\n\r\n  changeDetectorRef?.markForCheck();\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../helpers/copy-to-clipboard.helper';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClipboardService {\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}","import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\nclass ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, decorators: [{\n            type: Injectable\n        }] });\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nclass ErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nexport { ErrorStateMatcher as E, ShowOnDirtyErrorStateMatcher as S };\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  ContentTypeFieldsReuseDefinitions: 'ContentTypeFieldsReuseDefinitions',\r\n  AppExportAssetsAdvanced: 'AppExportAssetsAdvanced',\r\n  DataExportImportBundles: 'DataExportImportBundles',\r\n\r\n  // Picker features\r\n  PickerUiCheckbox: 'PickerUiCheckbox',\r\n  PickerUiRadio: 'PickerUiRadio',\r\n  PickerSourceCsv: 'PickerSourceCsv',\r\n  PickerSourceAppAssets: 'PickerSourceAppAssets',\r\n  PickerFormulas: 'PickerFormulas',\r\n  PickerUiMoreInfo: 'PickerUiMoreInfo',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { ObserversModule } from '@angular/cdk/observers';\nimport * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nimport { j as MatFormField, M as MatLabel, b as MatError, c as MatHint, e as MatPrefix, g as MatSuffix } from './form-field-C9DZXojn.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\n\nclass MatFormFieldModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            ObserversModule,\n            MatFormField,\n            MatLabel,\n            MatError,\n            MatHint,\n            MatPrefix,\n            MatSuffix], exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            ObserversModule,\n            MatFormField, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        ObserversModule,\n                        MatFormField,\n                        MatLabel,\n                        MatError,\n                        MatHint,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                    exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule],\n                }]\n        }] });\n\nexport { MatFormFieldModule as M };\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n    selector: 'app-field-hint',\r\n    templateUrl: './field-hint.component.html',\r\n    styleUrls: ['./field-hint.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        NgClass,\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Injectable, signal, Signal } from '@angular/core';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { Feature } from '../models';\r\n\r\nconst webApiFeatureDetails = \"admin/feature/details\";\r\n@Injectable()\r\nexport class FeatureDetailService extends HttpServiceBaseSignal {\r\n  \r\n  getFeatureDetail(nameId: Signal<string>) {\r\n    return this.newHttpResource<Feature>(() => ({\r\n      url: this.apiUrl(webApiFeatureDetails),\r\n      params: { nameId: nameId() },\r\n    }));\r\n  }\r\n\r\n  getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n    const featureList = signal<Feature[]>([]);\r\n    for (const nameId of nameIds) {\r\n\r\n      this.fetchPromise<Feature>(webApiFeatureDetails, {\r\n        params: { nameId }\r\n      }).then(feature => {\r\n        featureList.update(prev => [...prev, feature]);\r\n      });\r\n    }\r\n    return featureList;\r\n  }\r\n}\r\n","@if (feature()) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ feature().name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"feature().description | safeHtml\"></p>\r\n      <!-- Name ID -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">ID:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span (click)=\"clipboard.copyToClipboard(feature().nameId)\">{{ feature().nameId }}</span>\r\n        </div>\r\n      </div>\r\n      <!-- Status -->\r\n      @if (mySpecs().showStatus) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">{{ 'Features.Status' | translate }}:</div>\r\n          <div class=\"eav-info-row__value\">\r\n            <span>{{ (feature().isEnabled ? 'Features.Active' : 'Features.NotActive') | translate }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- GUID -->\r\n      @if (mySpecs().showGuid) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">GUID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span (click)=\"clipboard.copyToClipboard(feature().guid)\">{{ feature().guid }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- Security Rating -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Security Rating:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ feature().security.Impact + ': ' + feature().security.Message }}</span>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <a [href]=\"feature().link\" target=\"_blank\" mat-raised-button class=\"eav-card-action-button\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n        Find out more\r\n      </a>\r\n      @if (mySpecs().showClose != false) {\r\n        <button mat-raised-button class=\"eav-card-action-button\" (click)=\"dialog.close()\">Close</button>\r\n      }\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, Inject, input, Optional } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core/transient';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { computedObj } from '../../../shared/signals/signal.utilities';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\n\r\n@Component({\r\n    selector: 'app-feature-details-dialog',\r\n    templateUrl: './feature-details-dialog.component.html',\r\n    imports: [\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        SafeHtmlPipe,\r\n        TranslateModule,\r\n    ]\r\n})\r\nexport class FeatureDetailsDialogComponent {\r\n  specs = input<FeatureDetailsDialogData>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_DIALOG_DATA) private dialogSpecs: FeatureDetailsDialogData,\r\n    protected dialog: MatDialogRef<FeatureDetailsDialogComponent>,\r\n  ) { }\r\n\r\n  protected mySpecs = computedObj('mySpecs', () =>  this.specs() ?? this.dialogSpecs );\r\n  protected feature = computedObj('feature', () => this.mySpecs()?.feature);\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","/**\n * Class that tracks the error state of a component.\n * @docs-private\n */\nclass _ErrorStateTracker {\n    _defaultMatcher;\n    ngControl;\n    _parentFormGroup;\n    _parentForm;\n    _stateChanges;\n    /** Whether the tracker is currently in an error state. */\n    errorState = false;\n    /** User-defined matcher for the error state. */\n    matcher;\n    constructor(_defaultMatcher, ngControl, _parentFormGroup, _parentForm, _stateChanges) {\n        this._defaultMatcher = _defaultMatcher;\n        this.ngControl = ngControl;\n        this._parentFormGroup = _parentFormGroup;\n        this._parentForm = _parentForm;\n        this._stateChanges = _stateChanges;\n    }\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const matcher = this.matcher || this._defaultMatcher;\n        const control = this.ngControl ? this.ngControl.control : null;\n        const newState = matcher?.isErrorState(control, parent) ?? false;\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this._stateChanges.next();\n        }\n    }\n}\n\nexport { _ErrorStateTracker as _ };\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe((data: unknown) => {\r\n        l.a('Dialog closed', { data });\r\n        return callback();\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  public doOnDialogClosedWithData(callback: (data: any) => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.#childDialogClosedWithData().subscribe(({ state }) => {\r\n        l.a('Dialog closed', { state });\r\n        callback(state);\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n  #childDialogClosedWithData() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      tap(event => {\r\n        const l = this.log.fn(\"childDialogClosed$\", {\r\n          event,\r\n          firstChild: this.route.snapshot.firstChild,\r\n          snapShot: this.route.snapshot,\r\n          state: this.router.getCurrentNavigation()?.extras.state,\r\n        });\r\n        l.a('NavigationEnd', { event });\r\n        l.end();\r\n      }),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => ({\r\n        hasChildNow: !!this.route.snapshot.firstChild,\r\n        state: this.router.getCurrentNavigation()?.extras.state,\r\n      })),\r\n      pairwise(),\r\n      filter(([prev, curr]) => prev.hasChildNow && !curr.hasChildNow),\r\n      map(([prev, curr]) => ({\r\n        hadChildBefore: prev.hasChildNow,\r\n        hasChildNow: curr.hasChildNow,\r\n        state: curr.state\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { AgGridAngular } from '@ag-grid-community/angular';\r\nimport { Component, contentChild, effect, ElementRef, input, untracked, viewChild } from '@angular/core';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\n\r\nexport interface HelpTextConst {\r\n  empty: GridWithHelpInput;\r\n  content: GridWithHelpInput;\r\n}\r\n\r\nexport interface GridWithHelpInput {\r\n  description: string;\r\n  hint: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-grid-with-help',\r\n  imports: [],\r\n  templateUrl: './grid-with-help.component.html',\r\n  styleUrl: './grid-with-help.component.scss'\r\n})\r\n\r\nexport class GridWithHelpComponent {\r\n  // ViewChild and ContentChild references - Access to DOM elements\r\n  gridWrapper = viewChild(\"gridWrapper\", { read: ElementRef });\r\n  agGrid = contentChild(AgGridAngular, { read: ElementRef });\r\n  dialogAction = contentChild(MatDialogActions, { read: ElementRef });\r\n\r\n  // Input properties - Required data from parent component\r\n  readonly helpText = input.required<GridWithHelpInput>({});\r\n  readonly refresh = input.required<number>();\r\n  readonly rowLength = input.required<number>();\r\n\r\n  // Constants - Fixed values for layout calculations\r\n  readonly DEFAULT_ROW_HEIGHT = 47; // Default height for AG Grid rows in pixels\r\n  readonly GRID_HEADER_HEIGHT = 64; // Height of AG Grid header in pixels\r\n  readonly HELP_CARD_BUFFER = 12;   // Additional buffer space for help card in pixels\r\n\r\n  constructor() {\r\n    // Effect that reacts to changes in refresh and rowLength signals\r\n    effect(() => {\r\n      const refresh = this.refresh();\r\n      const rowLength = this.rowLength();\r\n      const gridWrapperEl = this.gridWrapper()?.nativeElement;\r\n\r\n      // Early return if grid wrapper element is not available\r\n      if (!gridWrapperEl) return;\r\n\r\n      // Untracked execution to prevent unnecessary effect re-runs during layout updates\r\n      untracked(() => this.#updateLayout(gridWrapperEl, rowLength));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Main layout update method - Handles the dynamic sizing and positioning of grid and help card\r\n   * @param gridWrapperEl - The main container element\r\n   * @param rowLength - Number of rows in the grid\r\n   */\r\n  #updateLayout(gridWrapperEl: HTMLElement, rowLength: number): void {\r\n    // Get references to essential DOM elements\r\n    const agGridEl = this.agGrid()?.nativeElement;\r\n    const dialogActionEl = this.dialogAction()?.nativeElement;\r\n    const helpCard = gridWrapperEl.querySelector('.help-info-card') as HTMLElement;\r\n\r\n    helpCard.classList.toggle('center-center', rowLength === 0);\r\n\r\n    // Early return if critical elements are missing\r\n    if (!agGridEl || !dialogActionEl) return;\r\n\r\n    helpCard.style.flex = \"\";\r\n\r\n    // Calculate all necessary dimensions for layout\r\n    const dimensions = this.#calculateDimensions(gridWrapperEl, agGridEl, dialogActionEl, helpCard, rowLength);\r\n\r\n    // Set AG Grid height based on row count and maximum height to prevent overflow\r\n    agGridEl.style.flex = dimensions.rowHeight ? `0 0 ${dimensions.agGridHeight}px` : '0px';\r\n    // TODO: 2dg, discus with 2ro, style not have a calc () fn\r\n    const maxHeight = document.querySelector('.mat-sidenav-content').clientHeight - dimensions.dialogHeaderHeight - dimensions.dialogActionHeight;\r\n    agGridEl.style.maxHeight = `${maxHeight}px`;\r\n\r\n    // Determine if help card should be hidden when content exceeds available space\r\n    const shouldHideHelp = dimensions.helpCardHeight + dimensions.agGridHeight + dimensions.dialogActionHeight + dimensions.dialogHeaderHeight > dimensions.wrapperHeight;\r\n\r\n    helpCard.style.flex = \"1 1 auto\";\r\n    // Remove Help card from layout if it should be hidden\r\n    helpCard?.classList.toggle('hidden-help-info-card', shouldHideHelp);\r\n  }\r\n\r\n  // Calculate dimensions for AG Grid and help card based on current layout\r\n  #calculateDimensions(gridWrapperEl: HTMLElement, agGridEl: HTMLElement, dialogActionEl: HTMLElement, helpCard: HTMLElement, rowLength: number) {\r\n    const rowHeight = agGridEl.querySelector('.ag-row')?.clientHeight ?? this.DEFAULT_ROW_HEIGHT;\r\n    const agGridHeight = this.GRID_HEADER_HEIGHT + (rowLength * rowHeight);\r\n    const helpCardHeight = helpCard.clientHeight + this.HELP_CARD_BUFFER;\r\n    const dialogActionHeight = dialogActionEl.offsetHeight;\r\n    const dialogHeaderHeight = gridWrapperEl.querySelector('.eav-dialog-header')?.clientHeight ?? 0;\r\n    // Get total available wrapper height\r\n    const wrapperHeight = gridWrapperEl.offsetHeight;\r\n    return {\r\n      rowHeight,\r\n      agGridHeight,\r\n      helpCardHeight,\r\n      dialogActionHeight,\r\n      dialogHeaderHeight,\r\n      wrapperHeight\r\n    };\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"grid-wrapper-dynamic\" #gridWrapper>\r\n  <ng-content select=\"[eav-dialog-header]\"></ng-content>\r\n  <ng-content select=\"[eav-dialog-content]\"> </ng-content>\r\n  <ng-content select=\"ag-grid-angular\"></ng-content>\r\n  <div class=\"help-info-card\">\r\n    <div class=\"help-info-card-text\">\r\n      <span [innerHTML]=\"helpText().description\"></span>\r\n      <span [innerHTML]=\"helpText().hint\"></span>\r\n    </div>\r\n  </div>\r\n  <ng-content select=\"mat-dialog-actions\"></ng-content>\r\n</div>\r\n","<div class=\"actions-component\">\r\n  <!-- Metadata Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableMetadata) }}\"\r\n    matRipple tippy=\"Metadata\"\r\n    (click)=\"enableMetadata ? do('metadata') : ''\"\r\n  >\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enableMetadata\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n    >local_offer</mat-icon>\r\n  </div>\r\n\r\n  <!-- Image Config Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableImageConfig) }}\"\r\n    matRipple\r\n    tippy=\"{{ enableImageConfig ? 'Image Configuration' : 'no image configuration for this field' }}\"\r\n    (click)=\"enableImageConfig ? do('image') : ''\">\r\n    <mat-icon [matBadge]=\"imgConfigCount\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!imgConfigCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      matBadgeColor=\"accent\" [matBadgeDisabled]=\"!enableImageConfig\"\r\n      >filter_center_focus</mat-icon>\r\n  </div>\r\n\r\n  <!-- Permissions Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enablePermissions) }}\"\r\n    matRipple\r\n    tippy=\"{{ enablePermissions ? 'Permissions' : 'no permissions to configure on this field' }}\"\r\n    (click)=\"enablePermissions ? do('permissions') : ''\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enablePermissions\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      >person</mat-icon>\r\n  </div>\r\n\r\n\r\n  <!-- Share Button -->\r\n  @if (shareOrInheritIcon() != '') {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\">\r\n        {{ shareOrInheritIcon() }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled eav-hover-icon-div\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\" class=\"eav-hover-icon disabled\">\r\n        share\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <!-- More Button -->\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<!-- More Menu -->\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableRename\" (click)=\"do('rename')\">\r\n      <mat-icon>text_fields</mat-icon>\r\n      <span>Rename</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableDelete || field.IsTitle\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { InputTypeCatalog } from '../../shared/fields/input-type-catalog';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsActions, ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-actions',\r\n    templateUrl: './content-type-fields-actions.component.html',\r\n    styleUrls: ['./content-type-fields-actions.component.scss'],\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatBadgeModule,\r\n        MatMenuModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentTypeFieldsActionsComponent implements ICellRendererAngularComp {\r\n  field: Field;\r\n  metadataCount: number;\r\n  enablePermissions: boolean;\r\n  enableMetadata: boolean;\r\n\r\n  enableImageConfig: boolean;\r\n  imgConfigCount: number;\r\n  private params: ICellRendererParams & ContentTypeFieldsActionsParams;\r\n\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsActionsParams): void {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    const disableEdit = this.field.EditInfo.DisableEdit;\r\n\r\n    this.enablePermissions = !disableEdit && (this.field.InputType === InputTypeCatalog.StringWysiwyg || this.field.Type === DataTypeCatalog.Hyperlink);\r\n    this.enableMetadata = !this.field.EditInfo.DisableMetadata;\r\n    this.metadataCount = this.field.Metadata ? Object.keys(this.field.Metadata).filter(key => key !== 'merged').length : 0;\r\n\r\n    this.enableImageConfig = !disableEdit && this.field.imageConfiguration.isRecommended;\r\n    this.imgConfigCount = this.field.imageConfiguration.entityId ? 1 : 0;\r\n  }\r\n\r\n  highlightOrDisabled(toggle: boolean): string {\r\n    return toggle ? 'highlight' : 'disabled';\r\n  }\r\n\r\n  // #region Sharing Info for better icons #SharedFieldDefinition\r\n\r\n  shareText(): string {\r\n    const clickToConfigure = 'click to configure sharing';\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return clickToConfigure;\r\n    return ss.Share\r\n      ? 'shared enabled as ' + this.field.Guid\r\n      : ss.InheritMetadataOf\r\n        ? 'inherits ' + ss.InheritMetadataOf\r\n        : clickToConfigure;\r\n  }\r\n\r\n  shareOrInheritIcon(): string {\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return '';\r\n    return ss.Share\r\n      ? 'share'\r\n      : ss.InheritMetadataOf ? 'adjust' : '';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentTypeFieldsActions): void {\r\n    this.params.do(verb, this.field);\r\n  }\r\n\r\n}\r\n","@if (!field.EditInfo.DisableEdit) {\r\n  <div matRipple class=\"input-component highlight\" (click)=\"changeInputType()\">\r\n    <div class=\"text\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n@if (field.EditInfo.DisableEdit) {\r\n  <div class=\"input-component disabled\">\r\n    <div class=\"text disabled\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type.models';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-input-type',\r\n    templateUrl: './content-type-fields-input-type.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n    ]\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  field: Field;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsInputTypeParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsInputTypeParams): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  changeInputType(): void {\r\n    this.params.onChangeInputType(this.field);\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  @if (hasFormulas) {\r\n    <mat-icon tippy=\"Has Formulas\">functions</mat-icon>\r\n  }\r\n  @if (isEphemeral) {\r\n    <mat-icon tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Field } from '../../shared/fields/field.model';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-special',\r\n    templateUrl: './content-type-fields-special.component.html',\r\n    imports: [MatIconModule,]\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  @if (!field.EditInfo.ReadOnly)\r\n  {\r\n    <div class=\"eav-grid-action-button highlight {{ isTitle ? '' : suitableForTitle ? 'hover-only' : 'no-button' }}\"\r\n      [attr.disabled]=\"isTitle || !suitableForTitle\"\r\n      matRipple\r\n      tippy=\"Use as title field\"\r\n      (click)=\"setTitle()\"\r\n    >\r\n      <mat-icon>star</mat-icon>\r\n    </div>\r\n  }\r\n  @else\r\n  {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>{{ isTitle ? 'star' : '' }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { InputTypeHelpers } from '../../shared/fields/input-type-helpers';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title.models';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-title',\r\n    templateUrl: './content-type-fields-title.component.html',\r\n    styleUrls: ['./content-type-fields-title.component.scss'],\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n\r\n  isTitle: boolean;\r\n\r\n  field: Field;\r\n\r\n  suitableForTitle = true;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsTitleParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsTitleParams): void {\r\n    this.params = params;\r\n    this.isTitle = params.value;\r\n    this.field = params.data;\r\n\r\n    this.suitableForTitle = !InputTypeHelpers.isEmpty(this.field.InputType)\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  setTitle(): void {\r\n    if (this.suitableForTitle)\r\n      this.params.onSetTitle(this.field);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-type',\r\n    templateUrl: './content-type-fields-type.component.html',\r\n    imports: [\r\n        MatIconModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","import { a as _ViewRepeaterOperation } from './recycle-view-repeater-strategy-SfuyU210.mjs';\n\n/**\n * A repeater that destroys views when they are removed from a\n * `ViewContainerRef`. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = _ViewRepeaterOperation.INSERTED;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = _ViewRepeaterOperation.REMOVED;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = _ViewRepeaterOperation.MOVED;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() { }\n}\n\nexport { _DisposeViewRepeaterStrategy as _ };\n","import { i as isDataSource } from './data-source-D34wiQZj.mjs';\nexport { D as DataSource } from './data-source-D34wiQZj.mjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, TemplateRef, Directive, booleanAttribute, Input, ContentChild, ElementRef, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, afterNextRender, ChangeDetectorRef, DOCUMENT, EventEmitter, Injector, HostAttributeToken, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { b as _VIEW_REPEATER_STRATEGY, _ as _RecycleViewRepeaterStrategy, a as _ViewRepeaterOperation } from './recycle-view-repeater-strategy-SfuyU210.mjs';\nimport { _ as _DisposeViewRepeaterStrategy } from './dispose-view-repeater-strategy-Cvpav0PR.mjs';\nimport { D as Directionality } from './directionality-CChdj3az.mjs';\nimport { P as Platform } from './platform-DNDzkVcI.mjs';\nimport { ViewportRuler, ScrollingModule } from './scrolling.mjs';\nimport '@angular/common';\nimport './element-x4z00URv.mjs';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /** @docs-private */\n    template = inject(TemplateRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkCellDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkCellDef, isStandalone: true, selector: \"[cdkCellDef]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellDef]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /** @docs-private */\n    template = inject(TemplateRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderCellDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkHeaderCellDef, isStandalone: true, selector: \"[cdkHeaderCellDef]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderCellDef]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /** @docs-private */\n    template = inject(TemplateRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterCellDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkFooterCellDef, isStandalone: true, selector: \"[cdkFooterCellDef]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterCellDef]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    _hasStickyChanged = false;\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    _name;\n    /** Whether the cell is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _sticky = false;\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(value) {\n        if (value !== this._stickyEnd) {\n            this._stickyEnd = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _stickyEnd = false;\n    /** @docs-private */\n    cell;\n    /** @docs-private */\n    headerCell;\n    /** @docs-private */\n    footerCell;\n    /**\n     * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n     * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n     * do not match are replaced by the '-' character.\n     */\n    cssClassFriendlyName;\n    /**\n     * Class name for cells in this column.\n     * @docs-private\n     */\n    _columnCssClassName;\n    constructor() { }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkColumnDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkColumnDef, isStandalone: true, selector: \"[cdkColumnDef]\", inputs: { name: [\"cdkColumnDef\", \"name\"], sticky: [\"sticky\", \"sticky\", booleanAttribute], stickyEnd: [\"stickyEnd\", \"stickyEnd\", booleanAttribute] }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], sticky: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], stickyEnd: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor() {\n        super(inject(CdkColumnDef), inject(ElementRef));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderCell, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkHeaderCell, isStandalone: true, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor() {\n        const columnDef = inject(CdkColumnDef);\n        const elementRef = inject(ElementRef);\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterCell, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkFooterCell, isStandalone: true, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor() {\n        const columnDef = inject(CdkColumnDef);\n        const elementRef = inject(ElementRef);\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkCell, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkCell, isStandalone: true, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    template = inject(TemplateRef);\n    _differs = inject(IterableDiffers);\n    /** The columns to be displayed on this row. */\n    columns;\n    /** Differ used to check if any changes were made to the columns. */\n    _columnsDiffer;\n    constructor() { }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: BaseRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: BaseRowDef, isStandalone: true, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [] });\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends BaseRowDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    _hasStickyChanged = false;\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _sticky = false;\n    constructor() {\n        super(inject(TemplateRef), inject(IterableDiffers));\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkHeaderRowDef, isStandalone: true, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkHeaderRowDef' }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkHeaderRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends BaseRowDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    _hasStickyChanged = false;\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _sticky = false;\n    constructor() {\n        super(inject(TemplateRef), inject(IterableDiffers));\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkFooterRowDef, isStandalone: true, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkFooterRowDef' }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkFooterRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    /**\n     * Function that should return true if this row template should be used for the provided index\n     * and row data. If left undefined, this row will be considered the default row template to use\n     * when no other when functions return true for the data.\n     * For every row, there must be at least one when function that passes or an undefined to default.\n     */\n    when;\n    constructor() {\n        // TODO(andrewseguin): Add an input for providing a switch function to determine\n        //   if this template should be used.\n        super(inject(TemplateRef), inject(IterableDiffers));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkRowDef, isStandalone: true, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: [\n                        { name: 'columns', alias: 'cdkRowDefColumns' },\n                        { name: 'when', alias: 'cdkRowDefWhen' },\n                    ],\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    _viewContainer = inject(ViewContainerRef);\n    /** The ordered list of cells to render within this outlet's view container */\n    cells;\n    /** The data context to be provided to each cell */\n    context;\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static mostRecentCellOutlet = null;\n    constructor() {\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkCellOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkCellOutlet, isStandalone: true, selector: \"[cdkCellOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkHeaderRow, isStandalone: true, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkFooterRow, isStandalone: true, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkRow, isStandalone: true, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    templateRef = inject(TemplateRef);\n    _contentClassName = 'cdk-no-data-row';\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkNoDataRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkNoDataRow, isStandalone: true, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Directions that can be used when setting sticky positioning.\n * @docs-private\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    _isNativeHtmlTable;\n    _stickCellCss;\n    _isBrowser;\n    _needsPositionStickyOnElement;\n    direction;\n    _positionListener;\n    _tableInjector;\n    _elemSizeCache = new WeakMap();\n    _resizeObserver = globalThis?.ResizeObserver\n        ? new globalThis.ResizeObserver(entries => this._updateCachedSizes(entries))\n        : null;\n    _updatedStickyColumnsParamsToReplay = [];\n    _stickyColumnsReplayTimeout = null;\n    _cachedCellWidths = [];\n    _borderCellCss;\n    _destroyed = false;\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     * @param _tableInjector The table's Injector.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, _isBrowser = true, _needsPositionStickyOnElement = true, direction, _positionListener, _tableInjector) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this.direction = direction;\n        this._positionListener = _positionListener;\n        this._tableInjector = _tableInjector;\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        if (stickyDirections.includes('left') || stickyDirections.includes('right')) {\n            this._removeFromStickyColumnReplayQueue(rows);\n        }\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row, ...Array.from(row.children));\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        afterNextRender({\n            write: () => {\n                for (const element of elementsToClear) {\n                    this._removeStickyStyle(element, stickyDirections);\n                }\n            },\n        }, {\n            injector: this._tableInjector,\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     * @param replay Whether to enqueue this call for replay after a ResizeObserver update.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true, replay = true) {\n        // Don't cache any state if none of the columns are sticky.\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            this._positionListener?.stickyColumnsUpdated({ sizes: [] });\n            this._positionListener?.stickyEndColumnsUpdated({ sizes: [] });\n            return;\n        }\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const isRtl = this.direction === 'rtl';\n        const start = isRtl ? 'right' : 'left';\n        const end = isRtl ? 'left' : 'right';\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        let cellWidths;\n        let startPositions;\n        let endPositions;\n        if (replay) {\n            this._updateStickyColumnReplayQueue({\n                rows: [...rows],\n                stickyStartStates: [...stickyStartStates],\n                stickyEndStates: [...stickyEndStates],\n            });\n        }\n        afterNextRender({\n            earlyRead: () => {\n                cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n                startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n                endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n            },\n            write: () => {\n                for (const row of rows) {\n                    for (let i = 0; i < numCells; i++) {\n                        const cell = row.children[i];\n                        if (stickyStartStates[i]) {\n                            this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                        }\n                        if (stickyEndStates[i]) {\n                            this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                        }\n                    }\n                }\n                if (this._positionListener && cellWidths.some(w => !!w)) {\n                    this._positionListener.stickyColumnsUpdated({\n                        sizes: lastStickyStart === -1\n                            ? []\n                            : cellWidths\n                                .slice(0, lastStickyStart + 1)\n                                .map((width, index) => (stickyStartStates[index] ? width : null)),\n                    });\n                    this._positionListener.stickyEndColumnsUpdated({\n                        sizes: firstStickyEnd === -1\n                            ? []\n                            : cellWidths\n                                .slice(firstStickyEnd)\n                                .map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null)\n                                .reverse(),\n                    });\n                }\n            },\n        }, {\n            injector: this._tableInjector,\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        afterNextRender({\n            earlyRead: () => {\n                for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n                    if (!states[rowIndex]) {\n                        continue;\n                    }\n                    stickyOffsets[rowIndex] = stickyOffset;\n                    const row = rows[rowIndex];\n                    elementsToStick[rowIndex] = this._isNativeHtmlTable\n                        ? Array.from(row.children)\n                        : [row];\n                    const height = this._retrieveElementSize(row).height;\n                    stickyOffset += height;\n                    stickyCellHeights[rowIndex] = height;\n                }\n            },\n            write: () => {\n                const borderedRowIndex = states.lastIndexOf(true);\n                for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                    if (!states[rowIndex]) {\n                        continue;\n                    }\n                    const offset = stickyOffsets[rowIndex];\n                    const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                    for (const element of elementsToStick[rowIndex]) {\n                        this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                    }\n                }\n                if (position === 'top') {\n                    this._positionListener?.stickyHeaderRowsUpdated({\n                        sizes: stickyCellHeights,\n                        offsets: stickyOffsets,\n                        elements: elementsToStick,\n                    });\n                }\n                else {\n                    this._positionListener?.stickyFooterRowsUpdated({\n                        sizes: stickyCellHeights,\n                        offsets: stickyOffsets,\n                        elements: elementsToStick,\n                    });\n                }\n            },\n        }, {\n            injector: this._tableInjector,\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        afterNextRender({\n            write: () => {\n                const tfoot = tableElement.querySelector('tfoot');\n                if (tfoot) {\n                    if (stickyStates.some(state => !state)) {\n                        this._removeStickyStyle(tfoot, ['bottom']);\n                    }\n                    else {\n                        this._addStickyStyle(tfoot, 'bottom', 0, false);\n                    }\n                }\n            },\n        }, {\n            injector: this._tableInjector,\n        });\n    }\n    /** Triggered by the table's OnDestroy hook. */\n    destroy() {\n        if (this._stickyColumnsReplayTimeout) {\n            clearTimeout(this._stickyColumnsReplayTimeout);\n        }\n        this._resizeObserver?.disconnect();\n        this._destroyed = true;\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        if (!element.classList.contains(this._stickCellCss)) {\n            return;\n        }\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            const cell = firstRowCells[i];\n            cellWidths.push(this._retrieveElementSize(cell).width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Retreives the most recently observed size of the specified element from the cache, or\n     * meaures it directly if not yet cached.\n     */\n    _retrieveElementSize(element) {\n        const cachedSize = this._elemSizeCache.get(element);\n        if (cachedSize) {\n            return cachedSize;\n        }\n        const clientRect = element.getBoundingClientRect();\n        const size = { width: clientRect.width, height: clientRect.height };\n        if (!this._resizeObserver) {\n            return size;\n        }\n        this._elemSizeCache.set(element, size);\n        this._resizeObserver.observe(element, { box: 'border-box' });\n        return size;\n    }\n    /**\n     * Conditionally enqueue the requested sticky update and clear previously queued updates\n     * for the same rows.\n     */\n    _updateStickyColumnReplayQueue(params) {\n        this._removeFromStickyColumnReplayQueue(params.rows);\n        // No need to replay if a flush is pending.\n        if (!this._stickyColumnsReplayTimeout) {\n            this._updatedStickyColumnsParamsToReplay.push(params);\n        }\n    }\n    /** Remove updates for the specified rows from the queue. */\n    _removeFromStickyColumnReplayQueue(rows) {\n        const rowsSet = new Set(rows);\n        for (const update of this._updatedStickyColumnsParamsToReplay) {\n            update.rows = update.rows.filter(row => !rowsSet.has(row));\n        }\n        this._updatedStickyColumnsParamsToReplay = this._updatedStickyColumnsParamsToReplay.filter(update => !!update.rows.length);\n    }\n    /** Update _elemSizeCache with the observed sizes. */\n    _updateCachedSizes(entries) {\n        let needsColumnUpdate = false;\n        for (const entry of entries) {\n            const newEntry = entry.borderBoxSize?.length\n                ? {\n                    width: entry.borderBoxSize[0].inlineSize,\n                    height: entry.borderBoxSize[0].blockSize,\n                }\n                : {\n                    width: entry.contentRect.width,\n                    height: entry.contentRect.height,\n                };\n            if (newEntry.width !== this._elemSizeCache.get(entry.target)?.width &&\n                isCell(entry.target)) {\n                needsColumnUpdate = true;\n            }\n            this._elemSizeCache.set(entry.target, newEntry);\n        }\n        if (needsColumnUpdate && this._updatedStickyColumnsParamsToReplay.length) {\n            if (this._stickyColumnsReplayTimeout) {\n                clearTimeout(this._stickyColumnsReplayTimeout);\n            }\n            this._stickyColumnsReplayTimeout = setTimeout(() => {\n                if (this._destroyed) {\n                    return;\n                }\n                for (const update of this._updatedStickyColumnsParamsToReplay) {\n                    this.updateStickyColumns(update.rows, update.stickyStartStates, update.stickyEndStates, true, false);\n                }\n                this._updatedStickyColumnsParamsToReplay = [];\n                this._stickyColumnsReplayTimeout = null;\n            }, 0);\n        }\n    }\n}\nfunction isCell(element) {\n    return ['cdk-cell', 'cdk-header-cell', 'cdk-footer-cell'].some(klass => element.classList.contains(klass));\n}\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkRecycleRows, isStandalone: true, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._rowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DataRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: DataRowOutlet, isStandalone: true, selector: \"[rowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[rowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._headerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: HeaderRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: HeaderRowOutlet, isStandalone: true, selector: \"[headerRowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[headerRowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._footerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: FooterRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: FooterRowOutlet, isStandalone: true, selector: \"[footerRowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[footerRowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._noDataRowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: NoDataRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: NoDataRowOutlet, isStandalone: true, selector: \"[noDataRowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[noDataRowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    _differs = inject(IterableDiffers);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dir = inject(Directionality, { optional: true });\n    _platform = inject(Platform);\n    _viewRepeater = inject(_VIEW_REPEATER_STRATEGY);\n    _viewportRuler = inject(ViewportRuler);\n    _stickyPositioningListener = inject(STICKY_POSITIONING_LISTENER, { optional: true, skipSelf: true });\n    _document = inject(DOCUMENT);\n    /** Latest data provided by the data source. */\n    _data;\n    /** Subject that emits when the component has been destroyed. */\n    _onDestroy = new Subject();\n    /** List of the rendered rows as identified by their `RenderRow` object. */\n    _renderRows;\n    /** Subscription that listens for the data provided by the data source. */\n    _renderChangeSubscription;\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n    _columnDefsByName = new Map();\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n     */\n    _rowDefs;\n    /**\n     * Set of all header row definitions that can be used by this table. Populated by the rows\n     * gathered by using `ContentChildren` as well as any custom row definitions added to\n     * `_customHeaderRowDefs`.\n     */\n    _headerRowDefs;\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to\n     * `_customFooterRowDefs`.\n     */\n    _footerRowDefs;\n    /** Differ used to find the changes in the data provided by the data source. */\n    _dataDiffer;\n    /** Stores the row definition that does not have a when predicate. */\n    _defaultRowDef;\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     */\n    _customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     */\n    _customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     */\n    _customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     */\n    _customFooterRowDefs = new Set();\n    /** No data row that was defined outside of the direct content children of the table. */\n    _customNoDataRow;\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    _headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    _footerRowDefChanged = true;\n    /**\n     * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n     * change.\n     */\n    _stickyColumnStylesNeedReset = true;\n    /**\n     * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n     * `false`, cached values will be used instead. This is only applicable to tables with\n     * `_fixedLayout` enabled. For other tables, cell widths will always be recalculated.\n     */\n    _forceRecalculateCellWidths = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n    _cachedRenderRowsMap = new Map();\n    /** Whether the table is applied to a native `<table>`. */\n    _isNativeHtmlTable;\n    /**\n     * Utility class that is responsible for applying the appropriate sticky positioning styles to\n     * the table's rows and cells.\n     */\n    _stickyStyler;\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n     * table subclasses.\n     */\n    stickyCssClass = 'cdk-table-sticky';\n    /**\n     * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n     * the position is set in a selector associated with the value of stickyCssClass. May be\n     * overridden by table subclasses\n     */\n    needsPositionStickyOnElement = true;\n    /** Whether the component is being rendered on the server. */\n    _isServer;\n    /** Whether the no data row is currently showing anything. */\n    _isShowingNoDataRow = false;\n    /** Whether the table has rendered out all the outlets for the first time. */\n    _hasAllOutlets = false;\n    /** Whether the table is done initializing. */\n    _hasInitialized = false;\n    /** Aria role to apply to the table's cells based on the table's own role. */\n    _getCellRole() {\n        // Perform this lazily in case the table's role was updated by a directive after construction.\n        if (this._cellRoleInternal === undefined) {\n            // Note that we set `role=\"cell\"` even on native `td` elements,\n            // because some browsers seem to require it. See #29784.\n            const tableRole = this._elementRef.nativeElement.getAttribute('role');\n            return tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n        }\n        return this._cellRoleInternal;\n    }\n    _cellRoleInternal = undefined;\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    _trackByFn;\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    _dataSource;\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(value) {\n        this._multiTemplateDataRows = value;\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    _multiTemplateDataRows = false;\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(value) {\n        this._fixedLayout = value;\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    _fixedLayout = false;\n    /**\n     * Emits when the table completes rendering a set of data rows based on the latest data from the\n     * data source, even if the set of rows is empty.\n     */\n    contentChanged = new EventEmitter();\n    // TODO(andrewseguin): Remove max value as the end index\n    //   and instead calculate the view on init and scroll.\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * @docs-private\n     */\n    viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE,\n    });\n    // Outlets in the table's template where the header, data rows, and footer will be inserted.\n    _rowOutlet;\n    _headerRowOutlet;\n    _footerRowOutlet;\n    _noDataRowOutlet;\n    /**\n     * The column definitions provided by the user that contain what the header, data, and footer\n     * cells should render for each column.\n     */\n    _contentColumnDefs;\n    /** Set of data row definitions that were provided to the table as content children. */\n    _contentRowDefs;\n    /** Set of header row definitions that were provided to the table as content children. */\n    _contentHeaderRowDefs;\n    /** Set of footer row definitions that were provided to the table as content children. */\n    _contentFooterRowDefs;\n    /** Row definition that will only be rendered if there's no data in the table. */\n    _noDataRow;\n    _injector = inject(Injector);\n    constructor() {\n        const role = inject(new HostAttributeToken('role'), { optional: true });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentInit() {\n        this._hasInitialized = true;\n    }\n    ngAfterContentChecked() {\n        // Only start re-rendering in `ngAfterContentChecked` after the first render.\n        if (this._canRender()) {\n            this._render();\n        }\n    }\n    ngOnDestroy() {\n        this._stickyStyler?.destroy();\n        [\n            this._rowOutlet?.viewContainer,\n            this._headerRowOutlet?.viewContainer,\n            this._footerRowOutlet?.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach((def) => {\n            def?.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        this.contentChanged.next();\n        this.updateStickyColumnStyles();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const thead = closestTableSection(this._headerRowOutlet, 'thead');\n            if (thead) {\n                thead.style.display = headerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const tfoot = closestTableSection(this._footerRowOutlet, 'tfoot');\n            if (tfoot) {\n                tfoot.style.display = footerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /** Invoked whenever an outlet is created and has been assigned to the table. */\n    _outletAssigned() {\n        // Trigger the first render once all outlets have been assigned. We do it this way, as\n        // opposed to waiting for the next `ngAfterContentChecked`, because we don't know when\n        // the next change detection will happen.\n        // Also we can't use queries to resolve the outlets, because they're wrapped in a\n        // conditional, so we have to rely on them being assigned via DI.\n        if (!this._hasAllOutlets &&\n            this._rowOutlet &&\n            this._headerRowOutlet &&\n            this._footerRowOutlet &&\n            this._noDataRowOutlet) {\n            this._hasAllOutlets = true;\n            // In some setups this may fire before `ngAfterContentInit`\n            // so we need a check here. See #28538.\n            if (this._canRender()) {\n                this._render();\n            }\n        }\n    }\n    /** Whether the table has all the information to start rendering. */\n    _canRender() {\n        return this._hasAllOutlets && this._hasInitialized;\n    }\n    /** Renders the table if its state has changed. */\n    _render() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        if (!this._data) {\n            return renderRows;\n        }\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => {\n            // The differ should be run for every column, even if `acc` is already\n            // true (see #29922)\n            const diff = !!def.getColumnsDiff();\n            return acc || diff;\n        };\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            if (this._rowOutlet) {\n                this._rowOutlet.viewContainer.clear();\n            }\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef?.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, this._platform.isBrowser, this.needsPositionStickyOnElement, direction, this._stickyPositioningListener, this._injector);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n        this._changeDetectorRef.markForCheck();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTable, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.0.0\", type: CdkTable, isStandalone: true, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: [\"multiTemplateDataRows\", \"multiTemplateDataRows\", booleanAttribute], fixedLayout: [\"fixedLayout\", \"fixedLayout\", booleanAttribute] }, outputs: { contentChanged: \"contentChanged\" }, host: { properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], fixedLayout: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], contentChanged: [{\n                type: Output\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n/**\n * Finds the closest table section to an outlet. We can't use `HTMLElement.closest` for this,\n * because the node representing the outlet is a comment.\n */\nfunction closestTableSection(outlet, section) {\n    const uppercaseSection = section.toUpperCase();\n    let current = outlet.viewContainer.element.nativeElement;\n    while (current) {\n        // 1 is an element node.\n        const nodeName = current.nodeType === 1 ? current.nodeName : null;\n        if (nodeName === uppercaseSection) {\n            return current;\n        }\n        else if (nodeName === 'TABLE') {\n            // Stop traversing past the `table` node.\n            break;\n        }\n        current = current.parentNode;\n    }\n    return null;\n}\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    _table = inject(CdkTable, { optional: true });\n    _options = inject(TEXT_COLUMN_OPTIONS, { optional: true });\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    _name;\n    /**\n     * Text label that should be used for the column header. If this property is not\n     * set, the header text will default to the column name with its first letter capitalized.\n     */\n    headerText;\n    /**\n     * Accessor function to retrieve the data rendered for each cell. If this\n     * property is not set, the data cells will render the value found in the data's property matching\n     * the column's name. For example, if the column is named `id`, then the rendered value will be\n     * value defined by the data's `id` property.\n     */\n    dataAccessor;\n    /** Alignment of the cell values. */\n    justify = 'start';\n    /** @docs-private */\n    columnDef;\n    /**\n     * The column cell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * @docs-private\n     */\n    cell;\n    /**\n     * The column headerCell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * @docs-private\n     */\n    headerCell;\n    constructor() {\n        this._options = this._options || {};\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTextColumn, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkTextColumn, isStandalone: true, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"cdkColumnDef\", \"sticky\", \"stickyEnd\"] }, { kind: \"directive\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { kind: \"directive\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }, { kind: \"directive\", type: CdkCellDef, selector: \"[cdkCellDef]\" }, { kind: \"directive\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    imports: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n                }]\n        }], ctorParameters: () => [], propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule, CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet], exports: [CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule, ...EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_POSITIONING_LISTENER, TEXT_COLUMN_OPTIONS };\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, booleanAttribute, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE, STICKY_POSITIONING_LISTENER, HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CdkCellOutlet, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy, DataSource } from '@angular/cdk/collections';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { map } from 'rxjs/operators';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/bidi';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass MatRecycleRows {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatRecycleRows, isStandalone: true, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\nclass MatTable extends CdkTable {\n    /** Overrides the sticky CSS class set by the `CdkTable`. */\n    stickyCssClass = 'mat-mdc-table-sticky';\n    /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n    needsPositionStickyOnElement = false;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTable, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.0.0\", type: MatTable, isStandalone: true, selector: \"mat-table, table[mat-table]\", host: { properties: { \"class.mdc-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-mdc-table mdc-data-table__table\" }, providers: [\n            { provide: CdkTable, useExisting: MatTable },\n            { provide: CDK_TABLE, useExisting: MatTable },\n            // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n            //  is only included in the build if used.\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, isInline: true, styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:var(--mat-table-header-container-height, 56px)}mat-row{min-height:var(--mat-table-row-item-container-height, 52px)}mat-footer-row{min-height:var(--mat-table-footer-container-height, 52px)}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-sys-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-sys-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-sys-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-sys-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-sys-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-sys-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-sys-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mdc-data-table__row:last-child>.mat-mdc-header-cell{border-bottom:none}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child>.mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\\n\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, host: {\n                        'class': 'mat-mdc-table mdc-data-table__table',\n                        '[class.mdc-table-fixed-layout]': 'fixedLayout',\n                    }, providers: [\n                        { provide: CdkTable, useExisting: MatTable },\n                        { provide: CDK_TABLE, useExisting: MatTable },\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                        //  is only included in the build if used.\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:var(--mat-table-header-container-height, 56px)}mat-row{min-height:var(--mat-table-row-item-container-height, 52px)}mat-footer-row{min-height:var(--mat-table-footer-container-height, 52px)}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-sys-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-sys-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-sys-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-sys-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-sys-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-sys-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-sys-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mdc-data-table__row:last-child>.mat-mdc-header-cell{border-bottom:none}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child>.mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\\n\"] }]\n        }] });\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatCellDef, isStandalone: true, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatCellDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }],\n                }]\n        }] });\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatHeaderCellDef, isStandalone: true, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }],\n                }]\n        }] });\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatFooterCellDef, isStandalone: true, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }],\n                }]\n        }] });\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatColumnDef, isStandalone: true, selector: \"[matColumnDef]\", inputs: { name: [\"matColumnDef\", \"name\"] }, providers: [\n            { provide: CdkColumnDef, useExisting: MatColumnDef },\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n        ], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matColumnDef]',\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n                    ],\n                }]\n        }], propDecorators: { name: [{\n                type: Input,\n                args: ['matColumnDef']\n            }] } });\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatHeaderCell, isStandalone: true, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-mdc-header-cell mdc-data-table__header-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }] });\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatFooterCell, isStandalone: true, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { classAttribute: \"mat-mdc-footer-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-mdc-footer-cell mdc-data-table__cell',\n                    },\n                }]\n        }] });\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatCell, isStandalone: true, selector: \"mat-cell, td[mat-cell]\", host: { classAttribute: \"mat-mdc-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-mdc-cell mdc-data-table__cell',\n                    },\n                }]\n        }] });\n\n// We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatHeaderRowDef, isStandalone: true, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matHeaderRowDef' },\n                        { name: 'sticky', alias: 'matHeaderRowDefSticky', transform: booleanAttribute },\n                    ],\n                }]\n        }] });\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatFooterRowDef, isStandalone: true, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matFooterRowDef' },\n                        { name: 'sticky', alias: 'matFooterRowDefSticky', transform: booleanAttribute },\n                    ],\n                }]\n        }] });\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatRowDef, isStandalone: true, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatRowDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matRowDefColumns' },\n                        { name: 'when', alias: 'matRowDefWhen' },\n                    ],\n                }]\n        }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatHeaderRow, isStandalone: true, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-header-row mdc-data-table__header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-header-row, tr[mat-header-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-header-row mdc-data-table__header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatFooterRow, isStandalone: true, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-footer-row mdc-data-table__row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-footer-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatRow, isStandalone: true, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-row mdc-data-table__row\" }, providers: [{ provide: CdkRow, useExisting: MatRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-row, tr[mat-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n    _contentClassName = 'mat-mdc-no-data-row';\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatNoDataRow, isStandalone: true, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matNoDataRow]',\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }],\n                }]\n        }] });\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatTextColumn, isStandalone: true, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"matColumnDef\"] }, { kind: \"directive\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: MatCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: MatCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-text-column',\n                    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    imports: [MatColumnDef, MatHeaderCellDef, MatHeaderCell, MatCellDef, MatCell],\n                }]\n        }] });\n\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    MatRecycleRows,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn], exports: [MatCommonModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CdkTableModule, ...EXPORTED_DECLARATIONS],\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends DataSource {\n    /** Stream that emits when a new data array is set on the data source. */\n    _data;\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n    _renderData = new BehaviorSubject([]);\n    /** Stream that emits when a new filter string is set on the data source. */\n    _filter = new BehaviorSubject('');\n    /** Used to react to internal changes of the paginator that are made by the data source itself. */\n    _internalPageChanges = new Subject();\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n    _renderChangesSubscription = null;\n    /**\n     * The filtered set of data that has been matched by the filter string, or all the data if there\n     * is no filter. Useful for knowing the set of data the table represents.\n     * For example, a 'selectAll()' function would likely want to select the set of filtered data\n     * shown to the user rather than all the data.\n     */\n    filteredData;\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() {\n        return this._data.value;\n    }\n    set data(data) {\n        data = Array.isArray(data) ? data : [];\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() {\n        return this._filter.value;\n    }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() {\n        return this._sort;\n    }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    _sort;\n    /**\n     * Instance of the paginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the paginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() {\n        return this._paginator;\n    }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    _paginator;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n    sortingDataAccessor = (data, sortHeaderId) => {\n        const value = data[sortHeaderId];\n        if (_isNumberValue(value)) {\n            const numberValue = Number(value);\n            // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we leave them as strings.\n            // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n            return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n        }\n        return value;\n    };\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n    sortData = (data, sort) => {\n        const active = sort.active;\n        const direction = sort.direction;\n        if (!active || direction == '') {\n            return data;\n        }\n        return data.sort((a, b) => {\n            let valueA = this.sortingDataAccessor(a, active);\n            let valueB = this.sortingDataAccessor(b, active);\n            // If there are data in the column that can be converted to a number,\n            // it must be ensured that the rest of the data\n            // is of the same type so as not to order incorrectly.\n            const valueAType = typeof valueA;\n            const valueBType = typeof valueB;\n            if (valueAType !== valueBType) {\n                if (valueAType === 'number') {\n                    valueA += '';\n                }\n                if (valueBType === 'number') {\n                    valueB += '';\n                }\n            }\n            // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n            // one value exists while the other doesn't. In this case, existing value should come last.\n            // This avoids inconsistent results when comparing values to undefined/null.\n            // If neither value exists, return 0 (equal).\n            let comparatorResult = 0;\n            if (valueA != null && valueB != null) {\n                // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                if (valueA > valueB) {\n                    comparatorResult = 1;\n                }\n                else if (valueA < valueB) {\n                    comparatorResult = -1;\n                }\n            }\n            else if (valueA != null) {\n                comparatorResult = 1;\n            }\n            else if (valueB != null) {\n                comparatorResult = -1;\n            }\n            return comparatorResult * (direction == 'asc' ? 1 : -1);\n        });\n    };\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @returns Whether the filter matches against the data\n     */\n    filterPredicate = (data, filter) => {\n        // Transform the filter by converting it to lowercase and removing whitespace.\n        const transformedFilter = filter.trim().toLowerCase();\n        // Loops over the values in the array and returns true if any of them match the filter string\n        return Object.values(data).some(value => `${value}`.toLowerCase().includes(transformedFilter));\n    };\n    constructor(initialData = []) {\n        super();\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort\n            ? merge(this._sort.sortChange, this._sort.initialized)\n            : of(null);\n        const pageChange = this._paginator\n            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)\n            : of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterPredicate function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterPredicate.\n        // May be overridden for customization.\n        this.filteredData =\n            this.filter == null || this.filter === ''\n                ? data\n                : data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided paginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn };\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ \"SharingOrInheriting.TitleAddFieldsWhichInherit\" | translate}} (new v18)\r\n    </div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <p>\r\n      Shared fields allow you to compose a content-type using fields which were defined in another content-type.\r\n      These fields exist on this content-type, but use the definition incl. label and all other specs from the original field.\r\n    </p>\r\n    <p>\r\n      This is a bit like <strong>Content-Type Inheritance</strong>, but instead of inheritance we're using <strong>composition</strong>, which is much more powerful.\r\n    </p>\r\n    <p>\r\n      {{ \"SharingOrInheriting.PickFieldsToInheritFrom\" | translate }}\r\n      <br>\r\n      <em>\r\n        Note that if this app doesn't have published/shared field definitions, the list below will be empty.\r\n      </em>\r\n    </p>\r\n    <div class=\"eav-tables-div\">\r\n      <mat-card class=\"eav-table-div-left\">\r\n        <table mat-table [dataSource]=\"shareableFields\">\r\n          <ng-container matColumnDef=\"contentType\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Content Type</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.ContentType.Name}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Name</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.StaticName}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"type\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Type</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.Type}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"share\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Share</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> <button mat-raised-button type=\"button\"\r\n                (click)=\"selectField(field)\">Select</button> </td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"optionsColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: optionsColumns;\"></tr>\r\n        </table>\r\n      </mat-card>\r\n\r\n      <mat-card class=\"eav-table-div-right\">\r\n        <form #ngForm=\"ngForm\">\r\n          <table mat-table [dataSource]=\"selectedFields\">\r\n            <ng-container matColumnDef=\"newName\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>New Name</b> </th>\r\n              <td mat-cell *matCellDef=\"let item; index as i\" class=\"eav-table-cell\">\r\n                <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                  <mat-label>New Name</mat-label>\r\n                  <input matInput [pattern]=\"fieldNamePattern\" [(ngModel)]=\"item.newName\" [name]=\"'StaticName' + i\"\r\n                    #newName=\"ngModel\" [appReservedNames]=\"reservedNames()\">\r\n                </mat-form-field>\r\n                @if (newName.errors) {\r\n                  @if (newName.errors.pattern) {\r\n                    <app-field-hint [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                  }\r\n                  @if (newName.errors.reservedNames) {\r\n                    <app-field-hint [isError]=\"true\">\r\n                      {{ newName.errors.reservedNames }}\r\n                    </app-field-hint>\r\n                  }\r\n                }\r\n              </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"source\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>Source</b> </th>\r\n              <td mat-cell *matCellDef=\"let item\" style=\"word-break:break-all;\" class=\"eav-table-cell\"> {{\r\n                item.field.ContentType.Name }}/{{ item.field.StaticName }} ({{ item.field.Type }}) </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"remove\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>Remove</b> </th>\r\n              <td mat-cell *matCellDef=\"let item\" class=\"eav-table-cell\"> <button mat-raised-button type=\"button\"\r\n                  (click)=\"removeField(item)\">Remove</button> </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"selectedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: selectedColumns;\"></tr>\r\n          </table>\r\n        </form>\r\n      </mat-card>\r\n    </div>\r\n\r\n    <!-- Show feature warning -->\r\n    <app-feature-text-info [featureNameId]=\"ContentTypeFieldsReuseDefinitions\" [asInfo]=\"true\">\r\n      <em>\r\n        Even if the feature is not licensed, it will always work but show warnings.\r\n      </em>\r\n    </app-feature-text-info>\r\n\r\n    <!-- Save buttons -->\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button type=\"button\" (click)=\"dialog.close()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" class=\"eav-action-button\"\r\n        [disabled]=\"!ngForm.form.valid || selectedFields.data.length == 0 || saving()\" (click)=\"save()\">\r\n        Save\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n","import { ChangeDetectorRef, Component, HostBinding, Inject, OnInit, ViewChild, ViewContainerRef, computed, inject } from '@angular/core';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { catchError, concatMap, filter, of, toArray } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { openFeatureDialog } from '../../features/shared/base-feature.component';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { signalObj } from '../../shared/signals/signal.utilities';\r\nimport { ReservedNamesValidatorDirective } from '../edit-content-type-fields/reserved-names.directive';\r\n\r\n@Component({\r\n  selector: 'app-field-sharing-add-many',\r\n  templateUrl: './field-sharing-add-many.component.html',\r\n  styleUrls: ['./field-sharing-add-many.component.scss'],\r\n  imports: [\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    ReservedNamesValidatorDirective,\r\n    MatDialogActions,\r\n    TranslateModule,\r\n    FeatureTextInfoComponent,\r\n    FieldHintComponent,\r\n  ]\r\n})\r\nexport class FieldSharingAddMany extends BaseComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n\r\n  #features = inject(FeaturesService);\r\n\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  ContentTypeFieldsReuseDefinitions = FeatureNames.ContentTypeFieldsReuseDefinitions;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: { contentType: ContentType, existingFields: Field[] },\r\n    protected dialog: MatDialogRef<FieldSharingAddMany>,\r\n    private snackBar: MatSnackBar,\r\n    // All this is just for the feature dialog\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n    this.dialog.disableClose = true;\r\n    this.subscriptions.add(\r\n      this.dialog.backdropClick().subscribe(() => {\r\n        if (this.form.dirty || this.selectedFields.data.length > 0) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) return;\r\n        }\r\n        this.dialog.close();\r\n      })\r\n    );\r\n  }\r\n\r\n  optionsColumns: string[] = ['contentType', 'name', 'type', 'share'];\r\n  selectedColumns: string[] = ['newName', 'source', 'remove'];\r\n\r\n  protected shareableFields = new MatTableDataSource<Field>([]);\r\n  protected selectedFields = new MatTableDataSource<NewNameField>([]);\r\n  protected fieldNamePattern = fieldNamePattern;\r\n  protected fieldNameError = fieldNameError;\r\n\r\n  #reservedNamesSystem = this.#contentTypesFieldsSvc.getReservedNames().value;\r\n\r\n  reservedNames = computed(() => {\r\n    const reserved = this.#reservedNamesSystem();\r\n    return ReservedNamesValidatorDirective.mergeReserved(reserved, this.dialogData.existingFields);\r\n  });\r\n\r\n  protected saving = signalObj('saving', false);\r\n\r\n  #fieldShareConfigManagement = this.#features.isEnabled[FeatureNames.ContentTypeFieldsReuseDefinitions];\r\n\r\n  ngOnInit() {\r\n\r\n    this.#contentTypesFieldsSvc.getShareableFieldsPromise().then(fields => {\r\n      this.shareableFields.data = fields;\r\n    });\r\n\r\n  }\r\n\r\n  selectField(field: Field) {\r\n    this.selectedFields.data = [...this.selectedFields.data, { newName: field.StaticName, field }];\r\n  }\r\n\r\n  removeField(field: NewNameField) {\r\n    const selectedFields = this.selectedFields.data;\r\n    selectedFields.splice(selectedFields.indexOf(field), 1);\r\n    this.selectedFields.data = [...selectedFields];\r\n  }\r\n\r\n  // When API gets created we will need to send the selected fields to the API\r\n  save() {\r\n    if (!this.#fieldShareConfigManagement()) {\r\n      openFeatureDialog(this.matDialog, FeatureNames.ContentTypeFieldsReuseDefinitions, this.viewContainerRef, this.changeDetectorRef);\r\n    } else {\r\n      this.saving.set(true);\r\n      this.snackBar.open('Saving...');\r\n      of(...this.selectedFields.data).pipe(\r\n        filter(inheritField => !!inheritField.newName),\r\n        concatMap(inheritField =>\r\n          this.#contentTypesFieldsSvc.addInheritedField(\r\n            this.dialogData.contentType.Id,\r\n            inheritField.field.ContentType.Id,\r\n            inheritField.field.Guid,\r\n            inheritField.newName\r\n          ).pipe(catchError(_ => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(_ => {\r\n        this.saving.set(false);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.dialog.close();\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport interface AppSharingFieldsViewModel {\r\n  shareableFields: Field[];\r\n  selectedFields: Field[];\r\n}\r\n\r\ninterface NewNameField {\r\n  newName: string;\r\n  field: Field;\r\n}\r\n","\r\nexport enum SharingOrInheriting {\r\n  None,\r\n  Sharing,\r\n  Inheriting\r\n}\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ title | translate }}\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"dialog.close()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    @switch (initialState) {\r\n      @case (sharingOrInheriting.Sharing) {\r\n        <p>\r\n          This field is published so it can be shared by other Content Types. As such you cannot configure anything here, but just review\r\n          the information.\r\n        </p>\r\n        <div>\r\n          Global Identifier: <strong>{{ dialogData.Guid }}</strong>\r\n        </div>\r\n        <h4>Inherited by</h4>\r\n        <ng-container *ngTemplateOutlet=\"detailsOrWarning\"></ng-container>\r\n      }\r\n      @case (sharingOrInheriting.Inheriting) {\r\n        <p>This field is inheriting it's definition from another previously shared field.</p>\r\n        <h4>Inherits Definition from</h4>\r\n        @if (!features.isEnabled[requiredFeature]()) {\r\n          <ol>\r\n            @for (s of inherited(); track s.complete) {\r\n              <li>{{ s.complete }}</li>\r\n            }\r\n          </ol>\r\n        }\r\n        <ng-container *ngTemplateOutlet=\"detailsOrWarning\"></ng-container>\r\n\r\n        @if (notInherited().length) {\r\n          <h4>Not Inherited Definitions</h4>\r\n          <p>The following definitions are not inherited, so you can specify them on this field:</p>\r\n          <ol>\r\n            @for (s of notInherited(); track s) {\r\n              <li>{{ s }}</li>\r\n            }\r\n          </ol>\r\n        }\r\n      }\r\n      @case (sharingOrInheriting.None) {\r\n        <p>This field is currently not shared or inherited. You can choose to:</p>\r\n        <ul>\r\n          <li>Make it public (<strong>share</strong>) so it can be re-used by other Content Types</li>\r\n          <li>Change it to <strong>inherit</strong> it's definition from another previously shared field</li>\r\n        </ul>\r\n        <br />\r\n        <div>\r\n          <button\r\n            mat-raised-button\r\n            type=\"button\"\r\n            class=\"eav-dialog-action-button\"\r\n            [color]=\"state == sharingOrInheriting.Sharing ? 'accent' : ''\"\r\n            (click)=\"setShare()\"\r\n          >\r\n            Share\r\n          </button>\r\n\r\n          <button\r\n            mat-raised-button\r\n            type=\"button\"\r\n            class=\"eav-dialog-action-button\"\r\n            [color]=\"state == sharingOrInheriting.Inheriting ? 'accent' : ''\"\r\n            (click)=\"startInherit()\"\r\n          >\r\n            Inherit\r\n          </button>\r\n          @switch (state) {\r\n            @case (sharingOrInheriting.Sharing) {\r\n              <p>This will share the field definition for others to use. Save to complete the operation.</p>\r\n            }\r\n            @case (sharingOrInheriting.Inheriting) {\r\n              <p>\r\n                The following fields have the same data type and share their definitions. Select one to inherit from. Some notes:\r\n                <br />\r\n              </p>\r\n              <ul>\r\n                <li>Inheriting will remove/ignore all current definition of this field such as label, hidden, etc.</li>\r\n                <li>\r\n                  If the field you want to inherit the definition from is missing from this list, it's either a different data type or it's\r\n                  not shared.\r\n                </li>\r\n              </ul>\r\n              <mat-card class=\"my-options-wrapper\">\r\n                <table mat-table [dataSource]=\"shareableFields()\" class=\"mat-elevation-z8\">\r\n                  <!-- Column Definition \"Content Type\" -->\r\n                  <ng-container matColumnDef=\"contentType\">\r\n                    <th mat-header-cell *matHeaderCellDef><b>Content Type</b></th>\r\n                    <td mat-cell *matCellDef=\"let field\">{{ field.ContentType.Name }}</td>\r\n                  </ng-container>\r\n                  <!-- Column Definition \"Name\" -->\r\n                  <ng-container matColumnDef=\"name\">\r\n                    <th mat-header-cell *matHeaderCellDef><b>Name</b></th>\r\n                    <td mat-cell *matCellDef=\"let field\">{{ field.StaticName }}</td>\r\n                  </ng-container>\r\n                  <!-- Column Definition \"Type\" -->\r\n                  <ng-container matColumnDef=\"type\">\r\n                    <th mat-header-cell *matHeaderCellDef><b>Type</b></th>\r\n                    <td mat-cell *matCellDef=\"let field\">{{ field.Type }}</td>\r\n                  </ng-container>\r\n                  <!-- Header Row -->\r\n                  <tr mat-header-row *matHeaderRowDef=\"optionsColumns\"></tr>\r\n                  <!-- Repeater for each row -->\r\n                  <tr\r\n                    mat-row\r\n                    *matRowDef=\"let row; columns: optionsColumns\"\r\n                    [ngClass]=\"{ 'my-selected': guid === row.Guid }\"\r\n                    (click)=\"inheritField(row)\"\r\n                  ></tr>\r\n                </table>\r\n              </mat-card>\r\n            }\r\n          }\r\n        </div>\r\n      }\r\n    }\r\n  </div>\r\n\r\n  <app-feature-text-info [featureNameId]=\"requiredFeature\" [asInfo]=\"true\">\r\n    <em> Even if the feature is not licensed, it will always work but show warnings. </em>\r\n  </app-feature-text-info>\r\n\r\n  <div class=\"my-actions\">\r\n    @if (initialState == sharingOrInheriting.None) {\r\n      <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\" (click)=\"dialog.close()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\" class=\"eav-dialog-action-button\" (click)=\"save()\">\r\n        <span>Save</span>\r\n      </button>\r\n    }\r\n  </div>\r\n</div>\r\n\r\n<!-- Reusable part showing a list of ancestors or descendants - or showing a license warning to see more -->\r\n<ng-template #detailsOrWarning>\r\n  @if (features.isEnabled[requiredFeature]()) {\r\n    @if (details().length) {\r\n      <ul>\r\n        @for (field of details(); track field.AttributeId) {\r\n          <li>\r\n            Guid: <strong>{{ field.Guid }}</strong>\r\n            <br />\r\n            Content Type: <strong>{{ field.ContentType.Name }}</strong>\r\n            <br />\r\n            Field: <strong>{{ field.StaticName }}</strong> ({{ field.AttributeId }})\r\n          </li>\r\n        }\r\n      </ul>\r\n    } @else {\r\n      <em> No details available. This field probably does not have any inheriting fields. </em>\r\n    }\r\n  } @else {\r\n    <em>\r\n      You can get more details about the parents by enabling the feature\r\n      <br />\r\n      {{ requiredFeature }}\r\n      <app-feature-icon-text [featureNameId]=\"requiredFeature\"></app-feature-icon-text>.\r\n    </em>\r\n  }\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Inject, signal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport groupBy from 'lodash-es/groupBy';\r\nimport { transient } from '../../../../../core/transient';\r\nimport { FeatureIconTextComponent } from '../../features/feature-icon-text/feature-icon-text.component';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { classLog } from '../../shared/logging';\r\nimport { computedObj, signalObj } from '../../shared/signals/signal.utilities';\r\nimport { SharingOrInheriting } from './field-sharing-configure.enums';\r\n\r\nconst logSpecs = {\r\n  all: true,\r\n  constructor: true,\r\n}\r\n\r\nconst noInheritGuid = '00000000-0000-0000-0000-000000000000';\r\n\r\n@Component({\r\n  selector: 'app-field-sharing-configure',\r\n  templateUrl: './field-sharing-configure.component.html',\r\n  styleUrls: ['./field-sharing-configure.component.scss'],\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    NgClass,\r\n    NgTemplateOutlet,\r\n    TranslateModule,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconTextComponent,\r\n  ]\r\n})\r\nexport class ShareOrInheritDialogComponent {\r\n\r\n  log = classLog({ ShareOrInheritDialogComponent }, logSpecs);\r\n\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: Field,\r\n    public features: FeaturesService,\r\n    protected dialog: MatDialogRef<ShareOrInheritDialogComponent>,\r\n  ) {\r\n    const l = this.log.fnIf('constructor', { dialogData });\r\n\r\n    const sysS = dialogData.SysSettings;\r\n    if (sysS) {\r\n      if (sysS.Share)\r\n        this.#contentTypesFieldsSvc.getDescendants(dialogData.Id)\r\n          .then(fields => this.details.set(fields));\r\n      else if (sysS.InheritMetadataOf)\r\n        this.#contentTypesFieldsSvc.getAncestors(dialogData.Id)\r\n          .then(fields => this.details.set(fields));\r\n    }\r\n  }\r\n\r\n  requiredFeature = FeatureNames.ContentTypeFieldsReuseDefinitions;\r\n\r\n  details = signalObj<Field[]>('details', []);\r\n\r\n  optionsColumns: string[] = ['contentType', 'name', 'type'];\r\n  message: string;\r\n  state: SharingOrInheriting = SharingOrInheriting.None;\r\n\r\n  // Constants for the UI\r\n  sharingOrInheriting = SharingOrInheriting;\r\n  guid: string = null;\r\n\r\n  shareableFields = signal<Field[]>(undefined);\r\n\r\n  // Figure out the initial state how at the time of opening the dialog\r\n  initialState: SharingOrInheriting = (() => {\r\n    const sysS = this.dialogData.SysSettings;\r\n    const notConfigured = !sysS || (!sysS.Share && !sysS.InheritMetadataOf);\r\n    return notConfigured\r\n      ? SharingOrInheriting.None\r\n      : sysS.Share\r\n        ? SharingOrInheriting.Sharing\r\n        : SharingOrInheriting.Inheriting;\r\n  })();\r\n\r\n  // Assemble i18n title part, using the current state name\r\n  title: string = 'SharingOrInheriting.Title' + this.sharingOrInheriting[this.initialState];\r\n\r\n  /** Prepare info about inheritance, which is kind of compacted into a string */\r\n  #inheritsInfo = computedObj('inheritsInfo', () => {\r\n    const parts = this.dialogData.SysSettings.InheritMetadataOf.split(',');\r\n    const withFieldNames = parts.map(complete => ({\r\n      complete,\r\n      // Guid, required, could be empty-guid\r\n      guid: complete.substring(0, 36),\r\n      // Field name, optional; only required if it's the no-inherit guid\r\n      name: complete.substring(36),\r\n    }));\r\n    return groupBy(withFieldNames, g => g.guid === noInheritGuid ? 'none' : 'inherits');\r\n  });\r\n\r\n  /** Metadata content-type names which are not inherited */\r\n  notInherited = computedObj('notInherited', () => this.#inheritsInfo().none?.map(n => n.name) ?? []);\r\n\r\n  /** Metadata items which are inherited */\r\n  inherited = computedObj('inherited', () => this.#inheritsInfo().inherits ?? []);\r\n\r\n  setShare() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Sharing;\r\n  }\r\n\r\n  startInherit() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Inheriting;\r\n\r\n    // Load possible fields which match the current field type\r\n    this.#contentTypesFieldsSvc.getShareableFieldsFor(this.dialogData.AttributeId)\r\n      .then(fields => this.shareableFields.set(fields));\r\n  }\r\n\r\n  inheritField(field: Field) {\r\n    this.guid = field.Guid;\r\n  }\r\n\r\n  save() {\r\n    if (this.state == SharingOrInheriting.Sharing) {\r\n      this.#contentTypesFieldsSvc.share(this.dialogData.Id)\r\n        .subscribe(() => this.dialog.close());\r\n    } else if (this.state == SharingOrInheriting.Inheriting) {\r\n      this.#contentTypesFieldsSvc.inherit(this.dialogData.Id, this.guid)\r\n        .subscribe(() => this.dialog.close());\r\n    }\r\n  }\r\n\r\n}\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n  <app-grid-with-help style=\"height: 100%\" [helpText]=\"uxHelpText()\" [refresh]=\"refresh()\" [rowLength]=\"fields()?.length\">\r\n    <div class=\"eav-dialog-header\" eav-dialog-header>\r\n      <div class=\"eav-dialog-header__title\">{{ contentType()?.Label || contentType()?.Name }} Data</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"dialog.close()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    @if (fields()?.length > 0) {\r\n      <ag-grid-angular\r\n        class=\"ag-theme-material eav-dialog-content\"\r\n        [rowData]=\"fields()\"\r\n        [gridOptions]=\"gridOptions\"\r\n        (rowDragEnter)=\"onRowDragEnter($event)\"\r\n        (rowDragEnd)=\"onRowDragEnd($event)\"\r\n        (rowDragMove)=\"onRowDragMove($event)\"\r\n        (gridReady)=\"onGridReady($event)\"\r\n        (sortChanged)=\"onSortChanged($event)\"\r\n        (filterChanged)=\"onFilterChanged($event)\"\r\n        [ngClass]=\"{\r\n          'grid-sorted': sortApplied,\r\n          'grid-filtered': filterApplied,\r\n        }\"\r\n      >\r\n      </ag-grid-angular>\r\n    }\r\n    <mat-dialog-actions align=\"end\">\r\n      <!-- @if (isDebug()) { -->\r\n      <button mat-raised-button type=\"button\" (click)=\"addSharedField()\">{{ 'SharingOrInheriting.AddSharedField' | translate }}</button>\r\n      <!-- } -->\r\n      <button\r\n        mat-fab\r\n        mat-elevation-z24\r\n        class=\"grid-fab\"\r\n        tippy=\"Add fields\"\r\n        [disabled]=\"contentType() == null || contentType().EditInfo.ReadOnly\"\r\n        (click)=\"add()\"\r\n      >\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </app-grid-with-help>\r\n</div>\r\n\r\n<router-outlet></router-outlet>\r\n","import { ColumnApi, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowClassParams, RowDragEvent, SortChangedEvent } from '@ag-grid-community/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { Component, computed, OnInit, signal, ViewContainerRef } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../core';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { GridWithHelpComponent, HelpTextConst } from '../shared/ag-grid/grid-with-help/grid-with-help.component';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { ContentTypesFieldsService } from '../shared/fields/content-types-fields.service';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { InputTypeHelpers } from '../shared/fields/input-type-helpers';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep, ItemAddIdentifier, ItemEditIdentifier, ItemIdentifier } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { ContentTypeFieldsActionsComponent } from './content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsInputTypeComponent } from './content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type/content-type-fields-input-type.models';\r\nimport { ContentTypeFieldsSpecialComponent } from './content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title/content-type-fields-title.models';\r\nimport { ContentTypeFieldsTypeComponent } from './content-type-fields-type/content-type-fields-type.component';\r\nimport { FieldSharingAddMany } from './field-sharing-add-many/field-sharing-add-many.component';\r\nimport { ShareOrInheritDialogComponent } from './field-sharing-configure/field-sharing-configure.component';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    NgClass,\r\n    MatDialogActions,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n    TranslateModule,\r\n    GridWithHelpComponent,\r\n  ]\r\n})\r\nexport class ContentTypeFieldsComponent implements OnInit {\r\n\r\n  #dialogRouter = transient(DialogRoutingService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    protected dialog: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef, // for dependency injection in the dialog\r\n  ) { }\r\n\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n\r\n  /** Signal to trigger reloading of data */\r\n  refresh = signal(0);\r\n\r\n  // UI Help Text for the UX Help Info Card\r\n  #helpTextConst: HelpTextConst = {\r\n    empty: {\r\n      description: '<p><b>This is where you manage Fields</b></p>',\r\n      hint: \"<p>Click the (+) in the bottom right corner to create your first Field (think: column).</p>\"\r\n    },\r\n    content: {\r\n      description: '<p><b>These are the Fields of this Content-Type</b> <br>They are similar to database columns.</p>',\r\n      hint: '<p>Click on the <em>Name</em> to configure it or on the <em>Input</em> to change the type. <br><br>You can also create new fields, share field definitions, manage field metadata/permissions or rename fields.</p>'\r\n    }\r\n  };\r\n\r\n  uxHelpText = computed(() => {\r\n    const data = this.fields();\r\n    return data?.length === 0 ? this.#helpTextConst.empty : this.#helpTextConst.content;\r\n  })\r\n\r\n  contentType = this.#contentTypesSvc.getType(this.#contentTypeStaticName).value;\r\n\r\n  fields = signal<Field[]>(undefined);\r\n\r\n  gridOptions = this.#buildGridOptions();\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n\r\n  #gridApi: GridApi;\r\n  #columnApi: ColumnApi;\r\n  #rowDragSuppressed = false;\r\n\r\n\r\n  ngOnInit() {\r\n    this.#fetchFields();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.#fetchFields());\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApi = params.api;\r\n    this.#columnApi = params.columnApi;\r\n  }\r\n\r\n  onRowDragEnter(_: RowDragEvent) {\r\n    this.#gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(_: RowDragEvent) {\r\n    this.#gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields().map(field => field.Id);\r\n    this.#contentTypesFieldsSvc.reOrder(idArray, this.contentType()).subscribe(() => {\r\n      this.#fetchFields(() => {\r\n        this.#gridApi.setEnableCellTextSelection(true);\r\n        this.#gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const overNode = event.overNode as { data: Field };\r\n    if (!overNode) return;\r\n    const movingNode = event.node as { data: Field };\r\n    if (movingNode === overNode) return;\r\n\r\n    const newFields = [...this.fields()];\r\n    const fromIndex = newFields.indexOf(movingNode.data);\r\n    const toIndex = newFields.indexOf(overNode.data);\r\n    const reordered = this.#moveInArray(newFields, fromIndex, toIndex);\r\n    this.fields.set(reordered);\r\n    this.#gridApi.clearFocusedCell();\r\n  }\r\n\r\n  #moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n    return [...arr];\r\n  }\r\n\r\n  onSortChanged(_: SortChangedEvent) {\r\n    const columnStates = this.#columnApi.getColumnState();\r\n    this.sortApplied = columnStates.some(state => state.sort != null);\r\n    this.#suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(_: FilterChangedEvent) {\r\n    const filterModel = this.#gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.#suppressRowDrag();\r\n  }\r\n\r\n  #suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.#rowDragSuppressed) {\r\n      this.#rowDragSuppressed = true;\r\n      this.#gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.#rowDragSuppressed) {\r\n      this.#rowDragSuppressed = false;\r\n      this.#gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.#dialogRouter.navRelative([`add/${this.#contentTypeStaticName}`]);\r\n  }\r\n\r\n  addSharedField() {\r\n    this.matDialog.open(FieldSharingAddMany, {\r\n      autoFocus: false,\r\n      width: '1600px',\r\n      data: { contentType: this.contentType(), existingFields: this.fields() },\r\n      viewContainerRef: this.viewContainerRef, // for dependency injection in the dialog\r\n    }).afterClosed().subscribe(() => this.#fetchFields());\r\n  }\r\n\r\n  #nameCellRenderer(params: Omit<ICellRendererParams, 'data'> & { data: Field }) {\r\n    const inputType = params.data.InputType;\r\n\r\n    if (InputTypeHelpers.endsPreviousGroup(inputType))\r\n      return params.value;\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields()) {\r\n      if (InputTypeHelpers.isGroupStart(inputType)) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (InputTypeHelpers.isGroupEnd(inputType)) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === params.data.StaticName)\r\n        break;\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  #fetchFields(callback?: () => void) {\r\n    this.#contentTypesFieldsSvc.getFieldsPromise(this.#contentTypeStaticName).then(fields => {\r\n      this.fields.set(fields);\r\n      if (callback != null)\r\n        callback();\r\n    });\r\n  }\r\n\r\n  #editFieldMetadata(field: Field) {\r\n    // If this field is inherited and therefor has no own metadata, show a snackbar and exit\r\n    if (field.SysSettings?.InheritMetadataOf) {\r\n      if (!Object.keys(field.ConfigTypes).length) {\r\n        this.snackBar.open('This field inherits all configuration so there is nothing to edit.', null, { duration: 3000 });\r\n        return;\r\n      }\r\n      this.snackBar.open('This field inherits some configuration. Edit will only show configuration which is not inherited.', null, { duration: 5000 });\r\n    }\r\n\r\n    // if this field is shared/can-be-inherited, show warning so the user is aware of it\r\n    if (field.SysSettings?.Share)\r\n      this.snackBar.open('This field is shared, so changing it will affect all other fields inheriting it.', null, { duration: 5000 });\r\n\r\n    const form: EditForm = {\r\n      items: Object.keys(field.ConfigTypes).map((t) => this.#createItemDefinition(field, t))\r\n    };\r\n    // console.warn('2dm - editFieldMetadata', field.ConfigTypes, form);\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #createItemDefinition(field: Field, metadataType: string): ItemAddIdentifier | ItemEditIdentifier {\r\n    // The keys could start with an @ but may not, and in some cases we need it, others we don't\r\n    const keyForMdLookup = metadataType.replace('@', '');\r\n    const newItemTypeName = ('@' + metadataType).replace('@@', '@');\r\n\r\n    // Is an item of this type already loaded? Then just edit it, otherwise request new as Metadata\r\n    const existingMd = field.Metadata[keyForMdLookup];\r\n    return existingMd != null\r\n      ? EditPrep.editId(existingMd.Id) // if defined, return the entity-number to edit\r\n      : {\r\n        ...EditPrep.newMetadata(field.Id, newItemTypeName, eavConstants.metadata.attribute),\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n\r\n  #setTitle(field: Field) {\r\n    this.snackBar.open('Setting title...');\r\n    this.#contentTypesFieldsSvc.setTitle(field, this.contentType()).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.#fetchFields();\r\n    });\r\n  }\r\n\r\n  #changeInputType(field: Field) {\r\n    this.#dialogRouter.navRelative([`update/${this.#contentTypeStaticName}/${field.Id}/inputType`]);\r\n  }\r\n\r\n  #rename(field: Field) {\r\n    this.#dialogRouter.navRelative([`update/${this.#contentTypeStaticName}/${field.Id}/name`]);\r\n  }\r\n\r\n  #delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.#contentTypesFieldsSvc.delete(field, this.contentType()).subscribe(() => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.#fetchFields();\r\n    });\r\n  }\r\n\r\n  #openPermissions(field: Field) {\r\n    this.#dialogRouter.navRelative([GoToPermissions.getUrlAttribute(field.Id)]);\r\n  }\r\n\r\n  #openImageConfiguration(field: Field) {\r\n    const imgConfig = field.imageConfiguration;\r\n    if (imgConfig?.isRecommended != true)\r\n      throw new Error('This field does not expect to have an image configuration');\r\n\r\n    const itemIdentifier: ItemIdentifier = imgConfig.entityId\r\n      ? EditPrep.editId(imgConfig.entityId)\r\n      : EditPrep.newMetadata(field.Id, imgConfig.typeName, eavConstants.metadata.attribute);\r\n    const formUrl = convertFormToUrl({ items: [itemIdentifier] });\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #openMetadata(field: Field) {\r\n    const url = GoToMetadata.getUrlAttribute(\r\n      field.Id,\r\n      `Metadata for Field: ${field.StaticName} (${field.Id})`,\r\n    );\r\n    this.#dialogRouter.navRelative([url]);\r\n  }\r\n\r\n  #shareOrInherit(field: Field) {\r\n    const shareOrInheritDialogRef = this.matDialog.open(ShareOrInheritDialogComponent, {\r\n      autoFocus: false,\r\n      width: '800px',\r\n      data: field,\r\n      viewContainerRef: this.viewContainerRef, // for dependency injection in the dialog\r\n    });\r\n    shareOrInheritDialogRef.afterClosed().subscribe(() => this.#fetchFields());\r\n  }\r\n\r\n  //#region Grid Options\r\n\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      getRowClass(params: RowClassParams) {\r\n        const field: Field = params.data;\r\n        const rowClass: string[] = [];\r\n        if (field.EditInfo.DisableSort) { rowClass.push('disable-row-drag'); }\r\n        if (InputTypeHelpers.isGroupStart(field.InputType)) { rowClass.push('group-start-row'); }\r\n        if (InputTypeHelpers.isGroupEnd(field.InputType)) { rowClass.push('group-end-row'); }\r\n        return rowClass;\r\n      },\r\n      columnDefs: [\r\n        {\r\n          rowDrag: true,\r\n          width: 18,\r\n          cellClass: 'no-select no-padding no-outline'.split(' '),\r\n        },\r\n        {\r\n          field: 'Title',\r\n          width: 42,\r\n          cellClass: 'secondary-action no-padding no-outline'.split(' '),\r\n          valueGetter: (p: { data: Field }) => p.data.IsTitle,\r\n          cellRenderer: ContentTypeFieldsTitleComponent,\r\n          cellRendererParams: (() => ({\r\n            onSetTitle: (field) => this.#setTitle(field),\r\n          } satisfies ContentTypeFieldsTitleParams))(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWidePrimary,\r\n          headerName: 'Name',\r\n          field: 'StaticName',\r\n          onCellClicked: (p: { data: Field }) => this.#editFieldMetadata(p.data),\r\n          cellRenderer: (params: ICellRendererParams) => this.#nameCellRenderer(params),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          field: 'Type',\r\n          width: 70,\r\n          valueGetter: (p: { data: Field }) => p.data.Type,\r\n          cellRenderer: ContentTypeFieldsTypeComponent,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          headerName: 'Input',\r\n          field: 'InputType',\r\n          width: 160,\r\n          cellClass: (p: { data: Field }) => `${p.data.EditInfo.DisableEdit ? 'no-outline no-padding' : 'secondary-action no-padding'}`.split(' '),\r\n          valueGetter: (p: { data: Field }) => p.data.InputType.substring(p.data.InputType.indexOf('-') + 1),\r\n          cellRenderer: ContentTypeFieldsInputTypeComponent,\r\n          cellRendererParams: (() => ({\r\n            onChangeInputType: (field) => this.#changeInputType(field),\r\n          } satisfies ContentTypeFieldsInputTypeParams))(),\r\n        },\r\n        {\r\n          field: 'Label',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (p: { data: Field }) => p.data.Metadata?.All?.Name,\r\n        },\r\n        {\r\n          field: 'Special',\r\n          width: 66,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          cellRenderer: ContentTypeFieldsSpecialComponent,\r\n        },\r\n        {\r\n          field: 'Notes',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (p: { data: Field }) => p.data.Metadata?.All?.Notes,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight5,\r\n          cellRenderer: ContentTypeFieldsActionsComponent,\r\n          cellRendererParams: (() => ({\r\n            do: (verb, field) => {\r\n              switch (verb) {\r\n                case 'rename': this.#rename(field); break;\r\n                case 'delete': this.#delete(field); break;\r\n                case 'permissions': this.#openPermissions(field); break;\r\n                case 'metadata': this.#openMetadata(field); break;\r\n                case 'shareOrInherit': this.#shareOrInherit(field); break;\r\n                case 'image': this.#openImageConfiguration(field); break;\r\n              }\r\n            }\r\n          } satisfies ContentTypeFieldsActionsParams))(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","@if (show()) {\r\n  <div class=\"feature-text-info\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: feature()\">\r\n    <!-- Icon column -->\r\n    <mat-icon class=\"icon icon-{{icon()}}\">{{ icon() }}</mat-icon>\r\n    <!-- Text column -->\r\n    <div class=\"feature-text-info-content\">\r\n      <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n      <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n}\r\n","import { Component, input } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss'],\r\n  imports: [\r\n    MatIconModule,\r\n    TranslateModule,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  asInfo = input<boolean>(false);\r\n\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  icon = computedObj('icon', () => this.asInfo() ? 'info' : 'warning');\r\n}\r\n","@if (featureDetails(); as feature) {\r\n  <app-feature-details-dialog [specs]=\"{ feature: feature, showGuid: false, showStatus: true, showClose: true }\"></app-feature-details-dialog>\r\n}\r\n","import { Component, Inject, OnInit, signal } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { transient } from \"projects/core\";\r\nimport { FeatureDetailsDialogComponent } from \"../../apps-management/licence-info/feature-details-dialog/feature-details-dialog.component\";\r\nimport { ClipboardService } from \"../../shared/services/clipboard.service\";\r\nimport { FeatureDetailService } from \"../services/feature-detail.service\";\r\n\r\n@Component({\r\n    selector: 'app-feature-info-dialog',\r\n    templateUrl: './feature-info-dialog.component.html',\r\n    imports: [\r\n        FeatureDetailsDialogComponent\r\n    ]\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  #featureDetailSvc = transient(FeatureDetailService);\r\n  featureId = signal<string>('');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    protected dialog: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.featureId.set(this.route.snapshot.data['featureId'] || this.dialogData || '');\r\n    this.featureDetails = this.#featureDetailSvc.getFeatureDetail(this.featureId).value;\r\n  }\r\n\r\n  protected featureDetails: any;\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n"],"x_google_ignoreList":[3,5,11,25,26,27]}