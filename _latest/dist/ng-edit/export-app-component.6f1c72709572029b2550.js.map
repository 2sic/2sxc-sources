{"version":3,"sources":["./src/app/app-administration/sub-dialogs/export-app/export-app.component.html","./src/app/app-administration/sub-dialogs/export-app/export-app.component.ts"],"names":["Name","Guid","Version","dialogRef","exportAppService","zone","hostClass","includeContentGroups","resetAppGuid","appInfo$","isExporting$","templateVars$","this","pipe","appInfo","isExporting","subscription","ngOnInit","getAppInfo","subscribe","next","ngOnDestroy","complete","unsubscribe","closeDialog","close","exportApp","exportAppWindow","add","event","run","exportGit","exportForVersionControl","res","alert","error","ExportAppComponent"],"mappings":"mWAME,yB,qCAOA,iBACE,eAA2B,gBAAK,OAChC,gBACE,aAAI,QAA6B,OACjC,aAAI,QAA6B,OACjC,aAAI,QAAmC,OACzC,OAEA,gBAA2B,oBAAQ,OACnC,iBACE,cAAI,SAAyC,OAC7C,cAAI,SAA2C,OAC/C,cACE,SAEF,OACA,cAAI,SAAyD,OAC7D,cAAI,SAA6D,OACnE,OAEA,kBACE,kBACE,2BAAc,mFACZ,mBACE,sJAEF,OACF,OACF,OACA,kBACE,2BAAc,2EACZ,mBACE,8HAEF,OACF,OACF,OACF,OACF,O,mCAnCQ,gCAAAA,KAAA,IACA,gCAAAC,KAAA,IACA,mCAAAC,QAAA,IAKA,qDACA,uDAEF,0IAGE,qEACA,yEAKY,+CAAkC,0CAQlC,uCAA0B,mD,qCA3ChD,QAEE,gBACE,gBAA8B,qBAAU,OAC1C,OAEA,8BAEA,cACE,qCAAyB,aAAI,cAAG,OAAM,uFACf,eAAkE,qBAAS,OAAI,cACxG,OAEA,yBAwCA,iBACE,oBAAwD,gEACtD,oBACF,OACA,oBAAwD,8DACtD,+CACF,OACA,oBAAuE,8DACrE,wBACF,OACF,OACF,O,qBA1De,mCAO+C,+BAyChC,uCAGA,uCAGe,wCCnD7C,iBAmBE,WAAoBC,EAAqDC,EAA4CC,GAAjG,KAAAF,YAAqD,KAAAC,mBAA4C,KAAAC,OAZ3F,KAAAC,UAAY,mBAEtC,KAAAC,sBAAuB,EACvB,KAAAC,cAAe,EACP,KAAAC,SAAW,IAAI,IAAyB,MACxC,KAAAC,aAAe,IAAI,KAAgB,GAC3C,KAAAC,cAAgB,YAAc,CAACC,KAAKH,SAAUG,KAAKF,eAAeG,KAChE,aAAI,SAAC,G,IAAA,mBAA2B,OAAGC,QAA7B,KAAsCC,YAA7B,UAGT,KAAAC,aAAe,IAAI,I,OAI3B,YAAAC,SAAA,sBACEL,KAAKR,iBAAiBc,aAAaC,WAAU,SAAAL,GAC3C,EAAKL,SAASW,KAAKN,OAIvB,YAAAO,YAAA,WACET,KAAKH,SAASa,WACdV,KAAKF,aAAaY,WAClBV,KAAKI,aAAaO,eAGpB,YAAAC,YAAA,WACEZ,KAAKT,UAAUsB,SAGjB,YAAAC,UAAA,sBACEd,KAAKF,aAAaU,MAAK,GACvB,IAAMO,EAAkBf,KAAKR,iBAAiBsB,UAAUd,KAAKL,qBAAsBK,KAAKJ,cACxFI,KAAKI,aAAaY,IAChB,YAAUD,EAAiB,QAAQd,KAAK,YAAK,IAAIM,WAAU,SAAAU,GACzD,EAAKxB,KAAKyB,KAAI,WAAQ,EAAKpB,aAAaU,MAAK,WAKnD,YAAAW,UAAA,sBACEnB,KAAKF,aAAaU,MAAK,GACvBR,KAAKR,iBAAiB4B,wBAAwBpB,KAAKL,qBAAsBK,KAAKJ,cAAcW,UAAU,CACpGC,KAAM,SAAAa,GACJ,EAAKvB,aAAaU,MAAK,GACvBc,MAAM,4CAERC,MAAO,SAACA,GACN,EAAKzB,aAAaU,MAAK,O,sCAjDlBgB,GAAkB,gC,uBAAlBA,EAAkB,0E,qwBDf/B,gC,sBAAc,wC,gdCSd","file":"export-app-component.6f1c72709572029b2550.js","sourcesContent":["<ng-container *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Export app</div>\r\n  </div>\r\n\r\n  <mat-spinner *ngIf=\"data.isExporting\" mode=\"indeterminate\" diameter=\"20\" color=\"accent\"></mat-spinner>\r\n\r\n  <p class=\"dialog-description\">\r\n    Pack the entire app to a <em>zip</em> folder which can be imported again to another site.\r\n    For further help visit <a href=\"https://2sxc.org/en/help?tag=export-app\" target=\"_blank\">2sxc Help</a>.\r\n  </p>\r\n\r\n  <div class=\"dialog-component-content fancy-scrollbar-light\" *ngIf=\"data.appInfo\">\r\n    <p class=\"app-info__title\">Specs</p>\r\n    <ul class=\"app-info__content\">\r\n      <li>Name: {{ data.appInfo.Name }}</li>\r\n      <li>Guid: {{ data.appInfo.Guid }}</li>\r\n      <li>Version: {{ data.appInfo.Version }}</li>\r\n    </ul>\r\n\r\n    <p class=\"app-info__title\">Contains</p>\r\n    <ul class=\"app-info__content\">\r\n      <li>{{ data.appInfo.EntitiesCount }} entities</li>\r\n      <li>{{ data.appInfo.LanguagesCount }} languages</li>\r\n      <li>\r\n        {{ data.appInfo.TemplatesCount }} templates (Token: {{ data.appInfo.HasTokenTemplates }}, Razor:\r\n        {{ data.appInfo.HasRazorTemplates }})\r\n      </li>\r\n      <li>{{ data.appInfo.TransferableFilesCount }} files to export</li>\r\n      <li>{{ data.appInfo.FilesCount }} files in the app folder totally</li>\r\n    </ul>\r\n\r\n    <div class=\"options-wrapper\">\r\n      <div class=\"option-box\">\r\n        <mat-checkbox [(ngModel)]=\"includeContentGroups\" [disabled]=\"resetAppGuid || data.isExporting\">\r\n          <span class=\"option-box__text\">\r\n            Include all content-groups to re-import the app in an exact copy of this site.\r\n            Only select this option when you copy an entire DNN site.\r\n          </span>\r\n        </mat-checkbox>\r\n      </div>\r\n      <div class=\"option-box\">\r\n        <mat-checkbox [(ngModel)]=\"resetAppGuid\" [disabled]=\"includeContentGroups || data.isExporting\">\r\n          <span class=\"option-box__text\">\r\n            Reset the app GUID to zero. You only need this option for special tutorial apps,\r\n            and usually must not select it.\r\n          </span>\r\n        </mat-checkbox>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button mat-raised-button [disabled]=\"data.isExporting\" (click)=\"closeDialog()\">\r\n      Cancel\r\n    </button>\r\n    <button mat-raised-button [disabled]=\"data.isExporting\" (click)=\"exportGit()\">\r\n      Export Data for Github versioning\r\n    </button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"data.isExporting\" (click)=\"exportApp()\">\r\n      Export App\r\n    </button>\r\n  </div>\r\n</ng-container>\r\n","import { Component, OnInit, HostBinding, ChangeDetectionStrategy, OnDestroy, NgZone } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { BehaviorSubject, combineLatest, fromEvent, Subscription } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\n\r\nimport { AppInfo } from '../../models/app-info.model';\r\nimport { ExportAppService } from '../../services/export-app.service';\r\n\r\n@Component({\r\n  selector: 'app-export-app',\r\n  templateUrl: './export-app.component.html',\r\n  styleUrls: ['./export-app.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ExportAppComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  includeContentGroups = false;\r\n  resetAppGuid = false;\r\n  private appInfo$ = new BehaviorSubject<AppInfo>(null);\r\n  private isExporting$ = new BehaviorSubject(false);\r\n  templateVars$ = combineLatest([this.appInfo$, this.isExporting$]).pipe(\r\n    map(([appInfo, isExporting]) => ({ appInfo, isExporting })),\r\n  );\r\n\r\n  private subscription = new Subscription();\r\n\r\n  constructor(private dialogRef: MatDialogRef<ExportAppComponent>, private exportAppService: ExportAppService, private zone: NgZone) { }\r\n\r\n  ngOnInit() {\r\n    this.exportAppService.getAppInfo().subscribe(appInfo => {\r\n      this.appInfo$.next(appInfo);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.appInfo$.complete();\r\n    this.isExporting$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportApp() {\r\n    this.isExporting$.next(true);\r\n    const exportAppWindow = this.exportAppService.exportApp(this.includeContentGroups, this.resetAppGuid);\r\n    this.subscription.add(\r\n      fromEvent(exportAppWindow, 'load').pipe(take(1)).subscribe(event => {\r\n        this.zone.run(() => { this.isExporting$.next(false); });\r\n      })\r\n    );\r\n  }\r\n\r\n  exportGit() {\r\n    this.isExporting$.next(true);\r\n    this.exportAppService.exportForVersionControl(this.includeContentGroups, this.resetAppGuid).subscribe({\r\n      next: res => {\r\n        this.isExporting$.next(false);\r\n        alert('Done - please check your \\'.data\\' folder');\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.isExporting$.next(false);\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}