{"version":3,"file":"default-projects_eav-ui_src_app_edit_form_form-config_service_ts-projects_eav-ui_src_app_edit-b26668.72dc82151fcccf35.js","mappings":"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","names":["FieldState","constructor","name","config","group","settings","basics","ui","uiValue","translationState","pickerData","this","#reqFeaturesMy","signalObj","#reqFeaturesFromSettings","setting","requiredFeatures","computedObj","merged","Array","from","Set","#pickerData","Error","requireFeature","feature","current","includes","set","i0","PagePickerComponent_Conditional_12_For_2_ng_container_0_Template","pageAndChildren_r3","_c0","page_r2","PagePickerComponent_Conditional_12_For_2_Template","ctx_r3","tree","page_r6","path","_r5","$implicit","select","PagePickerComponent_Conditional_13_For_3_Conditional_6_Template","PagePickerComponent_Conditional_13_For_3_Conditional_10_Template","PagePickerComponent_Conditional_13_For_3_Conditional_11_Template","id","selected","isVisible","isClickable","PagePickerComponent_Conditional_13_Conditional_1_Template","PagePickerComponent_Conditional_13_For_3_Template","filteredSearch","length","_r8","page_r9","page","toggle","toggled","PagePickerComponent_ng_template_14_Conditional_12_For_2_ng_container_0_Template","child_r10","PagePickerComponent_ng_template_14_Conditional_12_For_2_Template","children","PagePickerComponent_ng_template_14_Conditional_2_Template","PagePickerComponent_ng_template_14_Conditional_3_Template","_r7","PagePickerComponent_ng_template_14_Conditional_10_Template","PagePickerComponent_ng_template_14_Conditional_11_Template","PagePickerComponent_ng_template_14_Conditional_12_Template","PagePickerComponent","dialogData","dialogRef","translate","filterText","signal","searchItems","computed","filter","item","toLocaleLowerCase","queryService","transient","QueryService","ngOnInit","parseSelectedPageId","fetchPages","setFilter","window","confirm","instant","closeDialog","pageId","ArrayHelpers","toggleInArray","close","find","i","result","toString","stream","getAvailableEntities","subscribe","next","data","console","error","pages","buildPageSearch","map","Path","trim","replace","startsWith","substring","split","slice","join","Id","Name","Visible","Clickable","buildPageTree","items","parentId","ParentId","push","parent","prefix","fieldValue","controls","fieldName","value","parseInt","static","t","MAT_DIALOG_DATA","i1","i2","core","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","$event","_r1","PagePickerComponent_Conditional_12_Template","PagePickerComponent_Conditional_13_Template","PagePickerComponent_ng_template_14_Template","MatFormFieldModule","i3","MatInputModule","i4","FormsModule","i5","NgTemplateOutlet","NgClass","ExtendedModule","i6","MatIconModule","i7","MatDialogActions","TranslateModule","TippyDirective","styles","PagePicker","open","dialog","viewContainerRef","changeDetectorRef","callback","autoFocus","height","width","afterClosed","pipe","take","markForCheck","FormConfigService","log","classLog","configSignal","context","inject","Context","languageService","FormLanguageService","initFormConfig","dialogContext","formId","isParentDialog","itemGuids","createMode","isCopy","enableHistory","languages","initial","Language","Current","primary","Primary","list","List","zoneId","appId","appRoot","App","Url","appSharedRoot","SharedUrl","moduleId","partOfPage","sessionStorage","getItem","keyPartOfPage","partOfPageDefault","portalRoot","Site","tabId","systemRoot","location","pathname","versioningOptions","getVersioningOptions","keyPublishing","enableFormulaSave","Enable","FormulaSave","overrideEditRestrictions","OverrideEditRestrictions","language","getSignal","publishing","allowAll","show","hide","branch","publish","language$","_language$","getLanguage$","_angular_core__WEBPACK_IMPORTED_MODULE_4__","jDH","factory","ɵfac","logSpecs","getReader","getReaderSignal","SignalStoreObservableBase","super","getId","sanitizeAdd","FormLanguage","empty","#entityReaderCache","ComputedCacheHelper","#signalsHideHeaderCache","addForm","hideHeader","add","setCurrent","newLanguage","update","getEntityReader","l","fnIf","sig","getOrCreateWithInfo","EntityReader","rSilent","isNew","cache$","languageInstances","mapUntilChanged","m","shareReplay","getHideHeaderSignal","getOrCreate","cache","updateHideHeader","_angular_core__WEBPACK_IMPORTED_MODULE_8__","providedIn","bothPrimary","original","diffCurrent","DimensionReader","dimensions","hasCurrentWrite","d","Value","hasCurrentReadOnly","currentRO","undefined","hasCurrent","all","FieldReader","field","#noData","#field","#language","#values","Values","ofLanguage","currentOrDefault","currentOrDefaultOrAny","val","Dimensions","hasPrimary","hasCurrentReadonly","hasEditableValues","#valuesEditableOf","countEditable","countEditableWithContents","v","currentEditable","dimension","x","isEditableOrReadonlyTranslationExist","getBestValue","attributeValues","defaultValue","flatten","metadataItem","flattenAll","metadataItems","Type","values","Object","entries","Attributes","currentValues","itemAttributes","reduce","acc","initSignal","FieldsFind","FieldUnwrap","FieldMask","ServiceBase","#fieldState","#formConfig","injector","#controls","#fieldConfig","#maskSignal","#mask","#fieldsUsedInMask","#extractFieldNames","a","initPreClean","overloadPreCleanValues","preClean","init","mask","extendName","#updateMaskFinal","r","logChanges","enabled","effect","#watchAllFields","#onChange","#process","hasPlaceholders","lowercaseInsideSquareBrackets","_","toLowerCase","entityGuid","entityId","forEach","e","replaceValue","cleaned","matches","match","token","key","maybeNew","control","valueSub","valueChanges","subscriptions","_angular_core__WEBPACK_IMPORTED_MODULE_3__","ContentTypeSettingsHelpers","getDefaultSettings","reader","contentType","itemHeader","defaultSettings","Metadata","Description","EditInstructions","Features","Label","ListInstructions","Notes","Icon","Link","_itemTitle","getTitle","_slotCanBeEmpty","IsEmptyAllowed","_slotIsEmpty","IsEmpty","type","metadata","label","FileTypeHelpers","defaultIcon","customExtensions","doc","docx","xls","xlsx","ppt","pptx","pdf","mp3","avi","mpg","mpeg","mov","mp4","zip","rar","txt","html","css","xml","xsl","matExtensions","vcf","getExtension","filename","lastIndexOf","getIconClass","ext","isKnownType","isImage","isImgRegex","test","FieldDefaults","inputType","getDefaultOrPrefillValue","onlyPrefill","fn","prefillRaw","Prefill","rNull","DefaultValue","InputTypeCatalog","BooleanDefault","BooleanTristate","DateTimeDefault","Date","toJSON","NumberDefault","NumberDropdown","NumberPicker","isNaN","Number","EntityDefault","EntityQuery","EntityContentBlocks","EntityPicker","guids","guid","JSON","stringify","parse","SanitizeHelper","removeFromStart","sanitized","charToRemove","removeFromEnd","cleanBadPath","goodChar","sanitizePath","sanitizeName","SignalStoreBase","#cache","#list","#itemSignalsCache","end","addMany","before","get","newItem","g","remove","updatedStore","clearCache","getAll","getMany","ids","getManySignal","getAllSignal","#cache$","toObservable","#list$","list$","getList$","getMany$","obj","CustomDefault","CustomGps","CustomJsonEditor","DefaultSuffix","EmptyDefault","EmptyEnd","EmptyMessage","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","StringDefault","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","StringWysiwyg","StringPicker","Unknown","array","index","indexOf","splice","distinctUntilChanged","mapUntilObjChanged","isEqual","applyCssPrefixes","target","display","order","INLINE","LAYOUT_VALUES","buildLayoutCSS","direction","wrap","isInline","validateValue","buildCSS","inline","validateWrapValue","isFlowHorizontal","flow","extendObject","dest","sources","TypeError","source","hasOwnProperty","BROWSER_PROVIDER","provide","APP_BOOTSTRAP_LISTENER","useFactory","removeStyles","_document","platformId","isPlatformBrowser","elements","querySelectorAll","CLASS_NAME","classRegex","el","classList","contains","parentNode","removeChild","className","deps","DOCUMENT","PLATFORM_ID","multi","CoreModule","ɵmod","ɵinj","providers","MediaChange","mediaQuery","mqAlias","suffix","priority","property","clone","StylesheetMap","stylesheet","Map","addStyleToElement","element","style","clearStyles","clear","getStyleForElement","styleName","ɵprov","DEFAULT_CONFIG","addFlexToParent","addOrientationBps","disableDefaultBps","disableVendorPrefixes","serverLoaded","useColumnBasisZero","printWithBreakpoints","mediaTriggerAutoRestore","ssrObserveBreakpoints","multiplier","defaultUnit","detectLayoutDisplay","LAYOUT_CONFIG","InjectionToken","SERVER_TOKEN","BREAKPOINT","mergeAlias","alias","StyleBuilder","shouldCache","sideEffect","_input","_styles","_parent","StyleUtils","_serverStylesheet","_serverModuleLoaded","_platformId","layoutConfig","applyStyleToElement","_applyMultiValueStyleToElement","applyStyleToElements","getFlowDirection","query","lookupStyle","lookupInlineStyle","isPlatformServer","hasWrap","lookupAttributeValue","attribute","getAttribute","getPropertyValue","getServerStyle","readStyleAttribute","inlineOnly","getComputedStyle","keys","sort","isArray","setProperty","setServerStyle","styleValue","styleMap","writeStyleAttribute","styleAttrValue","setAttribute","styleAttribute","styleList","colonIndex","substr","sortDescendingPriority","b","sortAscendingPriority","MatchMedia","_zone","BehaviorSubject","registry","pendingRemoveListenerFns","_observable$","asObservable","activations","results","mql","isActive","registerQuery","some","observe","mqList","filterOthers","matchMedia$","change","registration$","Observable","observer","lastChange","pop","complete","merge","buildQueryCss","mediaQueries","it","ALL_STYLES","styleEl","createElement","styleSheet","appendChild","createTextNode","head","mq","onMQLEvent","run","buildMQL","addListener","removeListener","ngOnDestroy","constructMql","isBrowser","matchMedia","buildMockMql","et","EventTarget","media","addEventListener","dispatchEvent","onchange","DEFAULT_BREAKPOINTS","overlapping","HANDSET_PORTRAIT","HANDSET_LANDSCAPE","TABLET_PORTRAIT","TABLET_LANDSCAPE","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","HANDSET","TABLET","WEB","ORIENTATION_BREAKPOINTS","ALIAS_DELIMITERS","firstUpperCase","part","first","charAt","remainder","toUpperCase","BREAKPOINTS","breakpoints","bpFlattenArray","concat","apply","mergeByAlias","defaults","custom","dict","bp","validateSuffixes","camelCase","k","BreakPointRegistry","findByMap","findByAlias","findWithPredicate","findByQuery","overlappings","aliases","suffixes","searchFn","response","PRINT","BREAKPOINT_PRINT","PrintHook","registeredBeforeAfterPrintHooks","isPrintingBeforeAfterEvent","beforePrintEventListeners","afterPrintEventListeners","formerActivations","isPrinting","queue","PrintQueue","deactivations","withPrintQuery","queries","isPrintEvent","printAlias","printBreakPoints","getEventBreakpoints","updateEvent","event","registerBeforeAfterPrintHooks","defaultView","beforePrintListener","startPrinting","updateStyles","afterPrintListener","stopPrinting","interceptEvents","collectActivations","blockPropagation","bpList","activatedBreakpoints","addPrintBreakpoints","hasFormerBp","wasActivated","removeEventListener","printBreakpoints","addBreakpoint","isPrintBreakPoint","MediaMarshaller","hook","_useFallbacks","_activatedBreakpoints","elementMap","elementKeyMap","WeakMap","watcherMap","updateMap","clearMap","subject","Subject","observeActivations","activatedAlias","bps","useFallbacks","onMediaChange","mc","bpIndex","updateFn","clearFn","extraTriggers","initBuilderMap","buildElementKeyMap","watchExtraTriggers","getValue","bpMap","getActivatedValues","hasValue","setValue","updateElement","trackValue","keyMap","valueMap","delete","clearElement","builders","releaseElement","s","unsubscribe","triggerUpdate","triggers","watchers","newSubscription","currentValue","has","lastHope","tap","bind","input","oldMap","BaseDirective2","elementRef","styleBuilder","styler","marshal","DIRECTIVE_KEY","inputs","mru","destroySubject","styleCache","parentElement","nativeElement","activatedValue","ngOnChanges","changes","updateWithValue","addStyles","builder","useCache","genStyles","buildStyles","getFlexFlowDirection","addIfMissing","hasInlineValue","ɵdir","validateBasis","basis","grow","shrink","parts","j","_validateCalcValue","calc","MULTIPLIER_SUFFIX","multiply","transformValue","possibleValue","numberValue","endsWith","unit","ClassDirective","iterableDiffers","keyValueDiffers","renderer2","ngClassInstance","klass","ngClass","ngDoCheck","None","inputs$2","DefaultClassDirective","arguments","ɵDefaultClassDirective_BaseFactory","ShowHideStyleBuilder","isServer","ɵShowHideStyleBuilder_BaseFactory","ShowHideDirective","serverModuleLoaded","hasLayout","hasFlexChild","ngAfterViewInit","trackExtraTriggers","DISPLAY_MAP","getDisplayStyle","inputKey","inputValue","shouldShow","coerceBooleanProperty","takeUntil","inputs$1","DefaultShowHideDirective","ɵDefaultShowHideDirective_BaseFactory","fxShow","fxHide","NgStyleKeyValue","noQuotes","getType","what","stringToKeyValue","vals","keyValuesToMap","entry","StyleDirective","sanitizer","differs","ngStyleInstance","NgStyle","fallbackStyles","buildStyleMap","ngStyle","sanitize","SecurityContext","STYLE","buildMapFromList","buildRawList","delimiter","String","buildMapFromSet","buildMapFromList$1","i2$1","DefaultStyleDirective","ɵDefaultStyleDirective_BaseFactory","imports"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/edit/fields/field-state.ts","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.component.html","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.component.ts","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.helpers.ts","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.helper.ts","./projects/eav-ui/src/app/edit/form/form-config.service.ts","./projects/eav-ui/src/app/edit/form/form-language.service.ts","./projects/eav-ui/src/app/edit/form/form-languages.model.ts","./projects/eav-ui/src/app/edit/localization/dimension-reader.ts","./projects/eav-ui/src/app/edit/localization/field-reader.ts","./projects/eav-ui/src/app/edit/shared/helpers/entity-reader.ts","./projects/eav-ui/src/app/edit/shared/helpers/field-mask.helper.ts","./projects/eav-ui/src/app/edit/state/fields-settings.helpers.ts","./projects/eav-ui/src/app/edit/shared/adam/file-type.helpers.ts","./projects/eav-ui/src/app/edit/shared/input-types/input-field.helpers.ts","./projects/eav-ui/src/app/edit/shared/helpers/sanitize.helper.ts","./projects/eav-ui/src/app/edit/shared/store/signal-store-base.ts","./projects/eav-ui/src/app/edit/shared/store/signal-store-observable-base.ts","./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./projects/eav-ui/src/app/shared/helpers/array.helpers.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts","./node_modules/@angular/flex-layout/fesm2020/angular-flex-layout-_private-utils.mjs","./node_modules/@angular/flex-layout/fesm2020/angular-flex-layout-core.mjs","./node_modules/@angular/flex-layout/fesm2020/angular-flex-layout-extended.mjs"],"sourcesContent":["import { FieldSettings, FieldValue } from '../../../../../edit-types';\r\nimport { UntypedFormGroup } from '@angular/forms';\r\nimport { Signal } from '@angular/core';\r\nimport { FieldConfigSet } from './field-config-set.model';\r\nimport { BasicControlSettings } from '../../../../../edit-types/src/BasicControlSettings';\r\nimport { UiControl } from '../shared/controls/ui-control';\r\nimport { PickerData } from './picker/picker-data';\r\nimport { TranslationState } from '../localization/translate-state.model';\r\nimport { computedObj, signalObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { Of } from '../../core';\r\n\r\n/**\r\n * This is provided / injected at the fields-builder for every single field.\r\n * So any control or service within that field, which requests this service, will get one containing exactly that fields.\r\n */\r\nexport class FieldState<T extends FieldValue = FieldValue> {\r\n  constructor(\r\n    /** The fields technical name to access settings etc. */\r\n    public name: string,\r\n\r\n    /** Field configuration, incl. a lot of unchanging values and access to adam, dropzone etc. */\r\n    public config: FieldConfigSet,\r\n\r\n    /** The form group containing the field - rarely relevant, as you should use the control in most cases */\r\n    public group: UntypedFormGroup,\r\n\r\n    /** The settings as a signal - use this for most cases */\r\n    public settings: Signal<FieldSettings>,\r\n\r\n    /** The basic settings - use this for most cases as it will change less than the settings signal */\r\n    public basics: Signal<BasicControlSettings>,\r\n\r\n    /**\r\n     * The UI control (actually it's the virtual UI control), since it's a reactive form control.\r\n     * Note: e just introduced uiValue below, which should be used in most cases\r\n     */\r\n    public ui: Signal<UiControl>,\r\n\r\n    /** The value of the field in the UI control as a signal */\r\n    public uiValue: Signal<T>,\r\n\r\n    public translationState: Signal<TranslationState>,\r\n\r\n    pickerData: PickerData,\r\n  ) {\r\n    this.#pickerData = pickerData;\r\n  }\r\n\r\n  get pickerData(): PickerData {\r\n    if (this.#pickerData)\r\n      return this.#pickerData;\r\n    throw new Error(`PickerData was not initialized for the field: ${this.name}`);\r\n  }\r\n  #pickerData: PickerData;\r\n\r\n  /**\r\n   * Cool helper to just get a single value-signal from the settings.\r\n   * It will automatically\r\n   * - ensure that you only use valid keys\r\n   * - return a signal with that name\r\n   * - the signal will be correctly typed as the setting value is typed\r\n   * @param name property name of a FieldSettings\r\n   * @returns the signal for that property, with isEqual change detection and name\r\n   */\r\n  setting<K extends keyof FieldSettings>(name: K): Signal<FieldSettings[K]> {\r\n    return computedObj(name, () => this.settings()[name]);\r\n  }\r\n\r\n  //#region Required Features\r\n\r\n  #reqFeaturesMy = signalObj<Of<typeof FeatureNames>[]>('requiredFeatures', []);\r\n  #reqFeaturesFromSettings = this.setting('requiredFeatures');\r\n\r\n  requiredFeatures = computedObj('requiredFeatures', () => {\r\n    const merged = [\r\n      ...this.#reqFeaturesMy(),\r\n      ...this.#reqFeaturesFromSettings() ?? [],\r\n    ];\r\n    // make distinct\r\n    return Array.from(new Set(merged));\r\n  });\r\n\r\n  requireFeature(feature: Of<typeof FeatureNames>) {\r\n    const current = this.#reqFeaturesMy();\r\n    if (!current.includes(feature))\r\n      this.#reqFeaturesMy.set([...current, feature]);\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ 'Fields.Hyperlink.PagePicker.Title' | translate }}</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <div class=\"page-search-box\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n        <mat-label>Search</mat-label>\r\n        <input matInput [ngModel]=\"filterText()\" (ngModelChange)=\"setFilter($event)\">\r\n      </mat-form-field>\r\n    </div>\r\n    <div class=\"page-tree-box\">\r\n      @if (!filterText()) {\r\n      <ul>\r\n        @for (page of tree(); track page) {\r\n        <ng-container *ngTemplateOutlet=\"pageAndChildren; context: {page: page}\"></ng-container>\r\n        }\r\n      </ul>\r\n      }\r\n      @if (filterText()) {\r\n      <ul>\r\n        @if (filteredSearch().length === 0) {\r\n        <li>\r\n          <div class=\"page-row\">\r\n            <div class=\"no-toggle\"></div>\r\n            <div>No results</div>\r\n          </div>\r\n        </li>\r\n        }\r\n        @for (page of filteredSearch(); track page) {\r\n        <li>\r\n          <div class=\"page-row\">\r\n            <div class=\"no-toggle\"></div>\r\n            <div class=\"page-label\" [ngClass]=\"page.id === selected ? 'selected' : ''\" (click)=\"select(page)\">\r\n              <div class=\"page-icon-and-text\">\r\n                <mat-icon class=\"page-icon\" svgIcon=\"file\"></mat-icon>\r\n                @if (page.path) {\r\n                <span class=\"page-path\" [tippy]=\"page.path\">{{ page.path }}&nbsp;>&nbsp;</span>\r\n                }\r\n                <span class=\"page-name\" [tippy]=\"page.name\">{{ page.name }}</span>\r\n              </div>\r\n              <div class=\"page-icons\">\r\n                @if (!page.isVisible) {\r\n                <mat-icon class=\"page-visible-clickable-icon\">visibility_off</mat-icon>\r\n                }\r\n                @if (!page.isClickable) {\r\n                <mat-icon class=\"page-visible-clickable-icon\">cancel</mat-icon>\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </li>\r\n        }\r\n      </ul>\r\n      }\r\n    </div>\r\n    <ng-template #pageAndChildren let-page=\"page\">\r\n      <li>\r\n        <div class=\"page-row\">\r\n          @if (page.children.length === 0) {\r\n          <div class=\"no-toggle\"></div>\r\n          }\r\n          @if (page.children.length > 0) {\r\n          <mat-icon class=\"page-toggle\" (click)=\"toggle(page.id)\">\r\n            {{ toggled.includes(page.id) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n          </mat-icon>\r\n          }\r\n          <div class=\"page-label\" [ngClass]=\"page.id === selected ? 'selected' : ''\" (click)=\"select(page)\">\r\n            <div class=\"page-icon-and-text\">\r\n              <mat-icon class=\"page-icon\" svgIcon=\"file\"></mat-icon>\r\n              <span>{{ page.name }}</span>\r\n            </div>\r\n            <div class=\"page-icons\">\r\n              @if (!page.isVisible) {\r\n              <mat-icon class=\"page-visible-clickable-icon\">visibility_off</mat-icon>\r\n              }\r\n              @if (!page.isClickable) {\r\n              <mat-icon class=\"page-visible-clickable-icon\">cancel</mat-icon>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n        @if (page.children.length > 0 && toggled.includes(page.id)) {\r\n        <ul>\r\n          @for (child of page.children; track child) {\r\n          <ng-container *ngTemplateOutlet=\"pageAndChildren; context: {page: child}\"></ng-container>\r\n          }\r\n        </ul>\r\n        }\r\n      </li>\r\n    </ng-template>\r\n  </div>\r\n  <mat-dialog-actions>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { Component, computed, Inject, OnInit, signal } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogActions } from '@angular/material/dialog';\r\nimport { TranslateService, TranslateModule } from '@ngx-translate/core';\r\nimport { FieldValue, PagePickerResult } from '../../../../../../edit-types';\r\nimport { buildPageSearch, buildPageTree } from './page-picker.helpers';\r\nimport { PageEntity, PagePickerDialogData, PageSearchItem, PageTreeItem } from './page-picker.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { ExtendedModule } from '@angular/flex-layout/extended';\r\nimport { NgTemplateOutlet, NgClass } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { ArrayHelpers } from '../../../shared/helpers/array.helpers';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { transient } from '../../../core';\r\nimport { QueryService } from '../../../shared/services/query.service';\r\n\r\n@Component({\r\n  selector: 'app-page-picker',\r\n  templateUrl: './page-picker.component.html',\r\n  styleUrls: ['./page-picker.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    FormsModule,\r\n    NgTemplateOutlet,\r\n    NgClass,\r\n    ExtendedModule,\r\n    MatIconModule,\r\n    MatDialogActions,\r\n    TranslateModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class PagePickerComponent implements OnInit {\r\n  selected: number;\r\n  toggled: number[];\r\n\r\n  filterText = signal<string>('');\r\n  searchItems = signal<PageSearchItem[]>([]);\r\n  tree = signal<PageTreeItem[]>([]);\r\n\r\n  filteredSearch = computed(() => {\r\n    const filterText = this.filterText();\r\n    const searchItems = this.searchItems();\r\n    return searchItems.filter(item => item.name.toLocaleLowerCase().includes(filterText.toLocaleLowerCase()));\r\n  });\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: PagePickerDialogData,\r\n    private dialogRef: MatDialogRef<PagePickerComponent>,\r\n    private translate: TranslateService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.selected = this.parseSelectedPageId();\r\n    this.toggled = [];\r\n\r\n    this.fetchPages();\r\n  }\r\n\r\n  setFilter(filterText: string): void {\r\n    this.filterText.set(filterText);\r\n  }\r\n\r\n  select(page: PageTreeItem | PageSearchItem): void {\r\n    // filters out pages without parent (broken)\r\n    if (page.id == null) return;\r\n    if (!page.isClickable || !page.isVisible) {\r\n      const ok = window.confirm(this.translate.instant('Fields.Hyperlink.PagePicker.HiddenOrSystemPageWarning'));\r\n      if (!ok) return;\r\n    }\r\n    this.closeDialog(page.id);\r\n  }\r\n\r\n  toggle(pageId: number): void {\r\n    ArrayHelpers.toggleInArray(pageId, this.toggled);\r\n  }\r\n\r\n  private closeDialog(pageId?: number): void {\r\n    if (pageId == null) {\r\n      this.dialogRef.close();\r\n      return;\r\n    }\r\n\r\n    const page = this.searchItems().find(i => i.id === pageId);\r\n    const result: PagePickerResult = {\r\n      id: page.id.toString(),\r\n      name: page.name,\r\n    };\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  private fetchPages(): void {\r\n    const stream = 'Default';\r\n    const params = 'includehidden=true';\r\n    this.queryService.getAvailableEntities(`System.Pages/Default`, params, null).subscribe({\r\n      next: (data) => {\r\n        if (!data) {\r\n          console.error(this.translate.instant('Fields.Picker.QueryErrorNoData'));\r\n          return;\r\n        }\r\n        if (!data[stream]) {\r\n          console.error(this.translate.instant('Fields.Picker.QueryStreamNotFound') + ' ' + stream);\r\n          return;\r\n        }\r\n        const pages = data[stream] as PageEntity[];\r\n        const searchItems = buildPageSearch(pages);\r\n        this.searchItems.set(searchItems);\r\n        const tree = buildPageTree(pages);\r\n        this.tree.set(tree);\r\n      },\r\n      error: (error) => {\r\n        console.error(error);\r\n        console.error(`${this.translate.instant('Fields.Picker.QueryError')} - ${error.data}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  private parseSelectedPageId(): number {\r\n    const prefix = 'page:';\r\n    let fieldValue: FieldValue = this.dialogData.group.controls[this.dialogData.config.fieldName].value;\r\n    if (typeof fieldValue !== 'string') return;\r\n\r\n    fieldValue = fieldValue.trim().toLocaleLowerCase();\r\n    if (!fieldValue.startsWith(prefix)) return;\r\n\r\n    try {\r\n      const id = parseInt(fieldValue.split(prefix)[1], 10);\r\n      return id;\r\n    } catch {\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import { PageEntity, PageSearchItem, PageTreeItem } from './page-picker.models';\r\n\r\nexport function buildPageSearch(pages: PageEntity[]): PageSearchItem[] {\r\n  if (!pages) { return []; }\r\n\r\n  const items = pages.map(page => {\r\n    let path = page.Path.trim().replace(/\\\\/g, '/').replace(/\\/\\//g, '/');\r\n    if (path.startsWith('/')) {\r\n      path = path.substring(1);\r\n    }\r\n    path = path.split('/').slice(0, -1).join(' > ');\r\n\r\n    const item: PageSearchItem = {\r\n      id: page.Id,\r\n      name: page.Name,\r\n      path,\r\n      isVisible: page.Visible,\r\n      isClickable: page.Clickable,\r\n    };\r\n    return item;\r\n  });\r\n\r\n  return items;\r\n}\r\n\r\nexport function buildPageTree(pages: PageEntity[]): PageTreeItem[] {\r\n  if (!pages) { return []; }\r\n\r\n  const items = pages.map(page => {\r\n    const item: PageTreeItem = {\r\n      children: [],\r\n      id: page.Id,\r\n      name: page.Name,\r\n      parentId: page.ParentId,\r\n      isVisible: page.Visible,\r\n      isClickable: page.Clickable,\r\n    };\r\n    return item;\r\n  });\r\n\r\n  const tree: PageTreeItem[] = [];\r\n  for (const item of items) {\r\n    if (item.parentId === -1) {\r\n      tree.push(item);\r\n      continue;\r\n    }\r\n\r\n    const parent = items.find(i => i.id === item.parentId);\r\n    if (!parent) {\r\n      tree.push(item);\r\n    } else {\r\n      parent.children.push(item);\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n","import { ChangeDetectorRef, ViewContainerRef } from '@angular/core';\r\nimport { UntypedFormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { take } from 'rxjs';\r\nimport { PagePickerResult } from '../../../../../../edit-types';\r\nimport { PagePickerComponent } from './page-picker.component';\r\nimport { PagePickerDialogData } from './page-picker.models';\r\nimport { FieldConfigSet } from '../field-config-set.model';\r\n\r\nexport class PagePicker {\r\n  static open(\r\n    config: FieldConfigSet,\r\n    group: UntypedFormGroup,\r\n    dialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    changeDetectorRef: ChangeDetectorRef,\r\n    callback: (value: PagePickerResult) => void,\r\n  ): void {\r\n    const dialogData: PagePickerDialogData = {\r\n      config,\r\n      group,\r\n    };\r\n    const dialogRef = dialog.open(PagePickerComponent, {\r\n      autoFocus: false,\r\n      data: dialogData,\r\n      viewContainerRef,\r\n      height: '80%',\r\n      width: '650px',\r\n    });\r\n\r\n    dialogRef.afterClosed().pipe(take(1)).subscribe((value: PagePickerResult) => {\r\n      callback(value);\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","import { Injectable, Signal, inject, signal } from '@angular/core';\r\nimport { DialogContext } from '../../app-administration/models';\r\nimport { keyPartOfPage, keyPublishing, partOfPageDefault } from '../../shared/constants/session.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { EditSettings } from '../dialog/main/edit-dialog-main.models';\r\nimport { Observable } from 'rxjs';\r\nimport { FormLanguageService } from './form-language.service';\r\nimport { FormLanguageComplete, FormLanguagesConfig } from './form-languages.model';\r\nimport { FormConfiguration, VersioningOptions } from './form-configuration.model';\r\nimport { classLog } from '../../shared/logging';\r\n\r\nexport const webApiEditRoot = 'cms/edit/';\r\n\r\n/**\r\n * Service which tell us about a single edit-form configuration.\r\n * It contains multiple entities.\r\n *\r\n * Things such as language, IDs shown on it, edit-settings etc.\r\n */\r\n@Injectable()\r\nexport class FormConfigService {\r\n  \r\n  log = classLog({FormConfigService});\r\n  \r\n  /** no constructor */\r\n  constructor() { }\r\n\r\n  /**\r\n   * Important! These are constants that form was loaded with.\r\n   * They are initialized in the main edit-form.\r\n   * They do not change while form is running\r\n   */\r\n  config: FormConfiguration;\r\n\r\n  // WIP, null at first\r\n  configSignal = signal<FormConfiguration>(null);\r\n\r\n  /**\r\n   * Current form language information\r\n   */\r\n  language: Signal<FormLanguageComplete>;\r\n\r\n  /**\r\n   * Current edit settings\r\n   * Note: Clean use - only used by classes that inject this themselves\r\n   */\r\n  settings: EditSettings;\r\n\r\n  /**\r\n   * Form language configuration, not meant to change during runtime...\r\n   */\r\n  languages: FormLanguagesConfig;\r\n\r\n  /** Used to fetch form data and fill up eavConfig. Do not use anywhere else */\r\n  private context = inject(Context);\r\n  private languageService = inject(FormLanguageService);\r\n\r\n  /** Create EavConfiguration from sessionStorage */\r\n  initFormConfig(\r\n    dialogContext: DialogContext,\r\n    formId: number,\r\n    isParentDialog: boolean,\r\n    itemGuids: string[],\r\n    createMode: boolean,\r\n    isCopy: boolean,\r\n    enableHistory: boolean,\r\n    settings: EditSettings\r\n  ) {\r\n    this.settings = settings;\r\n    this.languages = {\r\n      initial: dialogContext.Language.Current,\r\n      primary: dialogContext.Language.Primary,\r\n      list: dialogContext.Language.List,\r\n    };\r\n    this.config = {\r\n      zoneId: this.context.zoneId,\r\n      appId: this.context.appId,\r\n      appRoot: dialogContext.App.Url,\r\n      appSharedRoot: dialogContext.App.SharedUrl,\r\n      moduleId: this.context.moduleId?.toString(),\r\n      partOfPage: sessionStorage.getItem(keyPartOfPage) ?? partOfPageDefault,\r\n      portalRoot: dialogContext.Site.Url,\r\n      tabId: this.context.tabId?.toString(),\r\n      systemRoot: window.location.pathname.split('/dist/')[0] + '/',\r\n      versioningOptions: this.getVersioningOptions(\r\n        sessionStorage.getItem(keyPartOfPage) === 'true',\r\n        sessionStorage.getItem(keyPublishing)\r\n      ),\r\n      formId,\r\n      isParentDialog,\r\n      itemGuids,\r\n      createMode,\r\n      isCopy,\r\n      enableHistory,\r\n      enableFormulaSave: dialogContext.Enable.FormulaSave ?? false,\r\n      overrideEditRestrictions: dialogContext.Enable.OverrideEditRestrictions ?? false,\r\n      dialogContext,\r\n      settings,\r\n    };\r\n    this.configSignal.set(this.config);\r\n    this.language = this.languageService.getSignal(this.config.formId);\r\n  }\r\n\r\n  private getVersioningOptions(\r\n    partOfPage: boolean,\r\n    publishing: string\r\n  ): VersioningOptions {\r\n\r\n    const allowAll: VersioningOptions = { show: true, hide: true, branch: true };\r\n\r\n    if (!partOfPage)\r\n      return allowAll;\r\n\r\n    const publish = publishing || '';\r\n    switch (publish) {\r\n      case '':\r\n      case 'DraftOptional':\r\n        return allowAll;\r\n      case 'DraftRequired':\r\n        // Note: the key 'show' should not be added, as the code later picks the first property to set the default\r\n        // Branch should also be first, as it's the preferred option\r\n        return { branch: true, hide: true };\r\n      case 'DraftForbidden':\r\n        return { show: true };\r\n      default: {\r\n        console.error(`Invalid versioning requirements: ${publish}`);\r\n        return {};\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the language observable for the form - it will keep track of the current language as it changes.\r\n   * TODO: try to use the signal as much as possible\r\n    // TODO:: @2dg Question Languages as Signal\r\n   */\r\n  get language$(): Observable<FormLanguageComplete> {\r\n    return this._language$ ??= this.languageService.getLanguage$(this.config.formId);\r\n  }\r\n  private _language$: Observable<FormLanguageComplete>;\r\n\r\n}\r\n","import { Injectable, Signal } from '@angular/core';\r\nimport { map, Observable, shareReplay } from 'rxjs';\r\nimport { EntityReader } from '../shared/helpers';\r\nimport { mapUntilChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { FormLanguage, FormLanguageComplete } from './form-languages.model';\r\nimport { SignalStoreObservableBase } from '../shared/store/signal-store-observable-base';\r\nimport { ComputedCacheHelper } from '../../shared/signals/computed-cache';\r\nimport { classLog } from '../../shared/logging';\r\n\r\nconst logSpecs = {\r\n  getReader: false,\r\n  getReaderSignal: false,\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FormLanguageService extends SignalStoreObservableBase<number, FormLanguageInStore> {\r\n\r\n  constructor() {\r\n    super(classLog({FormLanguageService}, logSpecs));\r\n  }\r\n\r\n  protected override getId = (item: FormLanguageInStore) => item.formId;\r\n\r\n  protected override sanitizeAdd = (item: FormLanguageInStore) => ({\r\n    ...FormLanguage.empty,\r\n    initial: item.current,\r\n    ...item\r\n  });\r\n\r\n  addForm(formId: number, primary: string, current: string, hideHeader: boolean): void {\r\n    this.add({\r\n      formId,\r\n      current,\r\n      initial: current,\r\n      primary,\r\n      hideHeader,\r\n    } satisfies FormLanguageInStore);\r\n  }\r\n\r\n  setCurrent(formId: number, newLanguage: string): void {\r\n    this.update(formId, { current: newLanguage } satisfies Partial<FormLanguageInStore>);\r\n  }\r\n\r\n  /**\r\n   * Get an EntityReader for the current form.\r\n   * ATM used in fields settings service.\r\n   * \r\n   * If the form doesn't exist, the reader returned will not have the correct languages specified.\r\n   * This is to avoid errors when the form is not yet loaded or is being unloaded.\r\n   */\r\n  getEntityReader(formId: number): Signal<EntityReader> {\r\n    const l = this.log.fnIf('getReader', { formId });\r\n    // Place creation of the language signal here to avoid creating it multiple times\r\n    const sig = this.#entityReaderCache.getOrCreateWithInfo(formId, () => {\r\n      const language = this.getSignal(formId)() ?? FormLanguage.empty();\r\n      const l2 = this.log.fnIf('getReaderSignal', { language });\r\n      return new EntityReader(language);\r\n    });\r\n    return l.rSilent(sig.signal, `isNew: ${sig.isNew}`);\r\n  }\r\n  #entityReaderCache = new ComputedCacheHelper<number, EntityReader>('entityReader');\r\n\r\n  // use in form config service for language$()\r\n  getLanguage$(formId: number): Observable<FormLanguageComplete> {\r\n    return this.cache$.pipe(\r\n      map(languageInstances => languageInstances[formId]),\r\n      mapUntilChanged(m => m),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  /** Get hideHeader for the form. Fix for safari and mobile browsers */\r\n  getHideHeaderSignal(formId: number): Signal<boolean> {\r\n    return this.#signalsHideHeaderCache.getOrCreate(formId, () => this.cache()[formId]?.hideHeader ?? false);\r\n  }\r\n  #signalsHideHeaderCache = new ComputedCacheHelper<number, boolean>('hideHeader');\r\n\r\n\r\n  /** Update hideHeader for the form. Fix for safari and mobile browsers */\r\n  updateHideHeader(formId: number, hideHeader: boolean): void {\r\n    this.update(formId, { hideHeader } satisfies Partial<FormLanguageInStore>);\r\n  }\r\n}\r\n\r\nexport interface FormLanguageInStore extends FormLanguageComplete {\r\n  formId: number;\r\n  hideHeader: boolean;\r\n}\r\n","import { Language } from '../../shared/models/language.model';\r\n\r\nexport { Language } from '../../shared/models/language.model';\r\n\r\nexport class FormLanguage\r\n{\r\n  /** The current language of the system / UI. */\r\n  current: string;\r\n\r\n  /** The primary language of the system.\r\n   * Important, because the primary language must be filled in before all other languages.\r\n   */\r\n  primary: string;\r\n\r\n  /**\r\n   * In some cases we want both to be primary, but it's not clear why.\r\n   * I think it's just because we want certain tests to only use one value, but the test is meant for 2 values.\r\n   */\r\n  static bothPrimary(original: FormLanguage): FormLanguage {\r\n    return {\r\n      current: original.primary,\r\n      primary: original.primary\r\n    };\r\n  }\r\n\r\n  static diffCurrent(original: FormLanguage, current: string): FormLanguage {\r\n    return {\r\n      current: current,\r\n      primary: original.primary\r\n    };\r\n  }\r\n\r\n  static empty(): FormLanguageComplete {\r\n    return {\r\n      current: '',\r\n      primary: '',\r\n      initial: '',\r\n    };\r\n  }\r\n}\r\n\r\nexport class FormLanguageComplete extends FormLanguage {\r\n  /** initial language of the UI */\r\n  initial: string;\r\n}\r\n\r\nexport interface FormLanguagesConfig\r\n{\r\n  initial: string;\r\n  primary: string;\r\n  list: Language[];\r\n}\r\n\r\n","import { FormLanguage } from '../form/form-languages.model';\r\nimport { EavDimension } from '../shared/models/eav';\r\n\r\n\r\nexport class DimensionReader {\r\n  constructor(private dimensions: EavDimension[], private language: FormLanguage) { }\r\n\r\n  get hasCurrentWrite(): boolean {\r\n    const match = this.dimensions.find(d => d.Value === this.language.current\r\n      || (this.language.current === this.language.primary && d.Value === '*'));\r\n    return !!match;\r\n  }\r\n\r\n  get hasCurrentReadOnly(): boolean {\r\n    const currentRO = `~${this.language.current}`;\r\n    return this.dimensions.find(d => d.Value === currentRO) !== undefined;\r\n  }\r\n\r\n  get hasCurrent(): boolean {\r\n    const match = this.dimensions.find(d => d.Value === this.language.current\r\n      || d.Value === `~${this.language.current}`\r\n      || (this.language.current === this.language.primary && d.Value === '*'));\r\n    return !!match;\r\n  }\r\n}\r\n","import { FormLanguage } from '../form/form-languages.model';\r\nimport { EavField, EavValue } from '../shared/models/eav';\r\nimport { DimensionReader } from './dimension-reader';\r\nimport { classLog } from '../../shared/logging';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  constructor: false,\r\n};\r\n\r\nexport class FieldReader<T = any> {\r\n  \r\n  log = classLog({FieldReader}, logSpecs);\r\n\r\n  constructor(field: EavField<T>, language: string);\r\n  constructor(field: EavField<T>, language: FormLanguage);\r\n  constructor(field: EavField<T>, language: FormLanguage | string) {\r\n    this.log.fnIf('constructor', { field, language });\r\n    this.#field = field;\r\n    this.#language = typeof language === 'string' ? { current: language, primary: language } : language;\r\n    this.#values = field?.Values ?? [];\r\n    this.#noData = !field || !field.Values || field.Values.length === 0;\r\n  }\r\n\r\n  #noData = true;\r\n\r\n  #field: EavField<T>;\r\n  /** Values - never empty for read-safety */\r\n  #values: EavValue<T>[];\r\n  #language: FormLanguage;\r\n\r\n  get current(): EavValue<T> | null {\r\n    return this.ofLanguage(this.#language); // first match if any is the one we're looking for\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Priority:\r\n   * 1. value for current language\r\n   * 2. value for all languages\r\n   * 3. value for default language\r\n   *\r\n   * @readonly\r\n   * @type {EavValue<T>}\r\n   * @memberof FieldReader\r\n   */\r\n  get currentOrDefault(): EavValue<T> {\r\n    if (this.#noData) return null;\r\n    return this.current\r\n      // note that having both languages primary will also result in checking the '*' dimension\r\n      ?? this.ofLanguage(FormLanguage.bothPrimary(this.#language));\r\n  }\r\n\r\n  /**\r\n   * Priority:\r\n   * 1. value for current language\r\n   * 2. value for all languages\r\n   * 3. value for default language\r\n   * 4. first/any value in the system\r\n   */\r\n  get currentOrDefaultOrAny(): EavValue<T> | null {\r\n    if (this.#noData) return null;\r\n    return this.currentOrDefault ?? this.#values[0] ?? null;\r\n  }\r\n\r\n\r\n  ofLanguage(language: FormLanguage): EavValue<T> | null {\r\n    if (this.#noData) return null;\r\n    return this.#values.filter(val => new DimensionReader(val.Dimensions, language).hasCurrent)[0] ?? null;\r\n  }\r\n\r\n  /** Check if there is a value on the specified primary language or on the '*' dimension */\r\n  get hasPrimary(): boolean {\r\n    if (this.#noData) return false;\r\n    const primary = this.#language.primary;\r\n    return this.#values.filter(val => val.Dimensions.find(d => d.Value === primary || d.Value === '*')).length > 0;\r\n  }\r\n\r\n  get hasCurrentReadonly(): boolean {\r\n    if (this.#noData) return false;\r\n    return this.#values.filter(val => new DimensionReader(val.Dimensions, this.#language).hasCurrentReadOnly).length > 0;\r\n  }\r\n\r\n  /** A value in specified Language is editable, if assigned to current language or to '*' (but only when on default-language) */\r\n  get hasEditableValues(): boolean {\r\n    if (this.#noData) return false;\r\n    return this.#valuesEditableOf().length > 0;\r\n  }\r\n\r\n  /** Number of editable translatable fields that */\r\n  countEditable(): number {\r\n    return this.#valuesEditableOf().length;\r\n  }\r\n\r\n  /** Number of editable translatable fields that have some content (not empty/null) */\r\n  countEditableWithContents(): number {\r\n    return this.#valuesEditableOf().filter(v => v.Value != \"\" && v.Value != null)?.length;\r\n  }\r\n\r\n  /**\r\n   * Values of a field are for the current language,\r\n   * if they are assigned to the current language or to '*' (but only when the current-language is also the primary-language)\r\n   */\r\n  #valuesEditableOf(language?: FormLanguage): EavValue<T>[] {\r\n    if (this.#noData) return [];\r\n    language ??= this.#language;\r\n    return this.#values.filter(val => new DimensionReader(val.Dimensions, language).hasCurrentWrite);\r\n  }\r\n\r\n  /** Value of current language which is editable. `null` if not found. */\r\n  get currentEditable(): EavValue<T> {\r\n    if (this.#noData) return null;\r\n    const dimension = this.#language.current;\r\n    return this.#values.find(v => v.Dimensions.find(x => x.Value === dimension)) ?? null;\r\n  }\r\n\r\n  isEditableOrReadonlyTranslationExist(): boolean {\r\n    if (this.#noData) return false;\r\n    return this.#valuesEditableOf().length > 0;\r\n  }\r\n\r\n}\r\n","import { EavEntity, EavEntityAttributes, EavField } from '../models/eav';\r\nimport { ItemValuesOfLanguage } from '../../state/item-values-of-language.model';\r\nimport { FormLanguage } from '../../form/form-languages.model';\r\nimport { classLog } from '../../../shared/logging';\r\nimport { FieldReader } from '../../localization/field-reader';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  constructor: false,\r\n};\r\n\r\nexport class EntityReader implements FormLanguage {\r\n  \r\n  log = classLog({EntityReader}, logSpecs);\r\n\r\n  /** @inheritdoc */\r\n  public current: string;\r\n  /** @inheritdoc */\r\n  public primary: string;\r\n\r\n  constructor(formLanguage: FormLanguage);\r\n  constructor(current: string, primary: string);\r\n  constructor(current: FormLanguage | string, primary?: string) {\r\n    this.log.fnIf('constructor', { current, primary });\r\n    if (typeof current === 'string') {\r\n      this.current = current;\r\n      this.primary = primary;\r\n    } else {\r\n      this.current = current.current;\r\n      this.primary = current.primary;\r\n    }\r\n  }\r\n\r\n  // WIP - to make code clearer, this is what should be used from now on\r\n  // But we'll probably end up calling this from the EntityReader only, so it should be straight forward\r\n  getBestValue<T>(attributeValues: EavField<T>, defaultValue: T = null): T {\r\n    const fieldReader = new FieldReader<T>(attributeValues, this);\r\n    return fieldReader.currentOrDefaultOrAny?.Value ?? defaultValue;\r\n    // return LocalizationHelpers.translate<T>(this, attributeValues as EavField<T>, defaultValue);\r\n  }\r\n\r\n  public flatten<T>(metadataItem: EavEntity): T {\r\n    return this.flattenAll<T>([metadataItem]);\r\n  }\r\n\r\n  public flattenAll<T>(metadataItems: EavEntity[]): T {\r\n    if (metadataItems == null || metadataItems.length === 0 || metadataItems[0] == null)\r\n      return {} as T;\r\n\r\n    const merged: Record<string, any> = {};\r\n    // copy metadata settings which are not @All\r\n    for (const item of metadataItems) {\r\n      if (item.Type.Id === '@All') continue;\r\n\r\n      for (const [name, values] of Object.entries(item.Attributes)) {\r\n        const value = this.getBestValue(values);\r\n        merged[name] = value;\r\n      }\r\n    }\r\n\r\n    // copy @All metadata settings, overwriting previous settings\r\n    for (const item of metadataItems) {\r\n      if (item.Type.Id !== '@All') continue;\r\n\r\n      for (const [name, values] of Object.entries(item.Attributes)) {\r\n        const value = this.getBestValue(values);\r\n        // do not overwrite previous settings if @All is empty\r\n        const exists = merged[name] != null;\r\n        const emptyAll = value == null || value === '';\r\n        if (exists && emptyAll) continue;\r\n\r\n        merged[name] = value;\r\n      }\r\n    }\r\n\r\n    return merged as T;\r\n  }\r\n\r\n  currentValues(itemAttributes: EavEntityAttributes): ItemValuesOfLanguage {\r\n\r\n    const formValues: ItemValuesOfLanguage = Object.entries(itemAttributes)\r\n      .reduce((acc, [name, values]) => {\r\n        acc[name] = this.getBestValue(values);\r\n        return acc;\r\n      }, {} as ItemValuesOfLanguage);\r\n\r\n    return formValues;\r\n  }\r\n\r\n}\r\n","import { ServiceBase } from '../../../shared/services/service-base';\r\nimport { Injectable, inject, signal, Injector, effect, computed, Signal } from '@angular/core';\r\nimport { FieldState } from '../../fields/field-state';\r\nimport { FormConfigService } from '../../form/form-config.service';\r\nimport { classLog } from '../../../shared/logging';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  initSignal: false,\r\n}\r\n\r\nconst FieldsFind = /\\[.*?\\]/ig;\r\nconst FieldUnwrap = /[\\[\\]]/ig;\r\n\r\n/**\r\n * Create a new FieldMask instance and access result with resolve\r\n * @example\r\n * const mask = new FieldMask(\"[FirstName]\", formGroup.controls);\r\n * const maskValue = mask.resolve();\r\n *\r\n * @param mask a string like \"[FirstName] [LastName]\"\r\n * @param model usually FormGroup controls, passed into here\r\n * @param overloadPreCleanValues a function which will \"scrub\" the found field-values\r\n */\r\n@Injectable()\r\nexport class FieldMask extends ServiceBase /* for field-change subscription */ {\r\n  \r\n  log = classLog({FieldMask}, logSpecs);\r\n\r\n  #fieldState = inject(FieldState);\r\n  #formConfig = inject(FormConfigService);\r\n\r\n  constructor(private injector: Injector) {\r\n    super();\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  /**\r\n   * The result of the mask as a signal, for external use/subscribing.\r\n   */\r\n  public result = signal<string>('');\r\n\r\n  #controls = this.#fieldState.group.controls;\r\n  #fieldConfig = this.#fieldState.config;\r\n\r\n  /**\r\n   * The mask as a signal.\r\n   * This allows us to use a simple value or a possibly runtime-changing mask. \r\n   */\r\n  #maskSignal = signal<Signal<string>>(signal<string>(''));\r\n\r\n  /**\r\n   * The final mask to use - either picking the signal or the text\r\n   * TODO: we should be able to simplify this to just use a signal\r\n   */\r\n  #mask = computed(() => this.#maskSignal()());\r\n\r\n  /** Fields used in the mask */\r\n  #fieldsUsedInMask = computed(() => this.#extractFieldNames(this.#mask()));\r\n\r\n  // #fieldValuesSignals = inject(FieldsSettingsService).fieldValues;\r\n\r\n  // // TODO create a multi-field signal?\r\n\r\n  // public result2 = computed(() => {\r\n  //   // listen to all the fields for changes\r\n  //   this.#fieldsUsedInMask().forEach(field => {\r\n\r\n  //   });\r\n  // });\r\n\r\n\r\n  /**\r\n   * Attach any processing events before the mask is resolved the first time\r\n   */\r\n  public initPreClean(overloadPreCleanValues: (key: string, value: string) => string): this {\r\n    this.log.a('initPreClean');\r\n    this.preClean = overloadPreCleanValues;\r\n    return this;\r\n  }\r\n\r\n  public init(name: string, mask: string): this {\r\n    return this.initSignal(name, signal(mask));\r\n  }\r\n\r\n  public initSignal(name: string, mask: Signal<string>): this {\r\n    this.log.extendName(`-${name}`);\r\n    const l = this.log.fnIf('initSignal', { name, mask });\r\n    this.#maskSignal.set(mask);\r\n    this.#updateMaskFinal();\r\n    return l.r(this, 'first result:' + this.result());\r\n  }\r\n\r\n  /**\r\n   * Activate an aggressive change logger to debug what's happening.\r\n   * Should only be used in development, as it will log a lot of data to the console.\r\n   */\r\n  public logChanges(): this {\r\n    // use logger, but if not enabled, create new just for this\r\n    const l = this.log.enabled ? this.log : classLog({FieldMask});\r\n    effect(() => l.a(`Mask '${this.#mask()}' value changed to: ${this.result()}`), { injector: this.injector });\r\n    return this;\r\n  }\r\n\r\n  #updateMaskFinal() {\r\n    // bind auto-watch only if needed...\r\n    // otherwise it's just on-demand\r\n    this.#watchAllFields();\r\n    this.#onChange();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Process a mask to the get the final value\r\n   */\r\n  #process(): string {\r\n\r\n    // if no mask, exit early\r\n    if (!hasPlaceholders(this.#mask()))\r\n      return this.#mask();\r\n\r\n    let value = lowercaseInsideSquareBrackets(this.#mask());\r\n\r\n    if (this.#formConfig != null)\r\n      value = value\r\n        .replace('[app:appid]', this.#formConfig.config.appId.toString())\r\n        .replace('[app:zoneid]', this.#formConfig.config.zoneId.toString());\r\n\r\n    if (this.#fieldConfig != null)\r\n      value = value\r\n        .replace('[guid]', this.#fieldConfig.entityGuid)\r\n        .replace('[id]', this.#fieldConfig.entityId.toString());\r\n\r\n    this.#fieldsUsedInMask().forEach((e, i) => {\r\n      const replaceValue = this.#controls?.[e]?.value ?? '';\r\n      const cleaned = this.preClean(e, replaceValue);\r\n      value = value.replace('[' + e.toLowerCase() + ']', cleaned);\r\n    });\r\n    return value;\r\n  }\r\n\r\n  /** Retrieves a list of all fields used in the mask */\r\n  #extractFieldNames(mask: string): string[] {\r\n    // exit early if mask very simple or not a mask\r\n    if (!mask || !hasPlaceholders(mask))\r\n      return [];\r\n\r\n    const matches = mask.match(FieldsFind);\r\n    \r\n    // TODO: ask is this good\r\n    if (!matches)\r\n      return [mask];\r\n    \r\n    const fields: string[] = matches.map(token => token.replace(FieldUnwrap, ''));\r\n    return fields;\r\n  }\r\n\r\n  /**\r\n   * Default preClean function, if no other function was specified for this\r\n   * Will be replaced if need be.\r\n   */\r\n  private preClean(key: string, value: string): string { return value; }\r\n\r\n  /** Change-event - will only fire if it really changes */\r\n  #onChange() {\r\n    const maybeNew = this.#process();\r\n    this.result.set(maybeNew);\r\n  }\r\n\r\n  /**\r\n   * Add watcher and execute onChange.\r\n   * Uses observables, since that's what angular provides on valueChanges.\r\n   */\r\n  #watchAllFields() {\r\n    // add a watch for each field in the field-mask\r\n    this.#fieldsUsedInMask().forEach(field => {\r\n      const control = this.#controls[field];\r\n      if (!control) return;\r\n      const valueSub = control.valueChanges.subscribe(_ => this.#onChange());\r\n      this.subscriptions.add(valueSub);\r\n    });\r\n  }\r\n}\r\n\r\n\r\nfunction hasPlaceholders(mask: string): boolean {\r\n  return (mask ?? '').includes('[');\r\n}\r\n\r\n/** used for query parameters */\r\nfunction lowercaseInsideSquareBrackets(value: string) {\r\n  return value.replace(/\\[([^\\]]+)\\]/g, (_, group) => `[${group.toLowerCase()}]`);\r\n}\r\n","import { EntityReader } from '../shared/helpers';\r\nimport { ItemIdentifierEditConfig } from '../../shared/models/edit-form.model';\r\nimport { EavContentType } from '../shared/models/eav';\r\nimport { FieldReader } from '../localization/field-reader';\r\nimport { ContentTypeSettings } from './content-type-settings.model';\r\nimport { FormLanguage } from '../form/form-languages.model';\r\n\r\nexport class ContentTypeSettingsHelpers {\r\n\r\n  /**\r\n   * Initialize the default settings of a ContentType to ensure everything is set or empty-string etc.\r\n   * @returns \r\n   */\r\n  static getDefaultSettings(reader: EntityReader, contentType: EavContentType, itemHeader: ItemIdentifierEditConfig): ContentTypeSettings {\r\n    const metadata = reader.flattenAll<ContentTypeSettings>(contentType.Metadata);\r\n    const defaultSettings = { ...metadata };\r\n    defaultSettings.Description ??= '';\r\n    defaultSettings.EditInstructions ??= '';\r\n    defaultSettings.Features ??= '';\r\n    defaultSettings.Label ??= '';\r\n    defaultSettings.ListInstructions ??= '';\r\n    defaultSettings.Notes ??= '';\r\n    defaultSettings.Icon ??= '';\r\n    defaultSettings.Link ??= '';\r\n    defaultSettings._itemTitle = this.getTitle(contentType, reader);\r\n    defaultSettings._slotCanBeEmpty = itemHeader.IsEmptyAllowed ?? false;\r\n    defaultSettings._slotIsEmpty = itemHeader.IsEmpty ?? false;\r\n    return defaultSettings;\r\n  }\r\n\r\n  static getTitle(contentType: EavContentType, language: FormLanguage): string {\r\n    try {\r\n      // xx ContentType is a historic bug and should be fixed when JSONs are rechecked\r\n      const type = contentType.Metadata.find(metadata => metadata.Type.Name === 'ContentType' || metadata.Type.Name === 'xx ContentType');\r\n      let label = (type)\r\n        ? new FieldReader(type.Attributes.Label, language).currentOrDefault?.Value\r\n        : null;\r\n      label = label || contentType.Name;\r\n      return label;\r\n    } catch (error) {\r\n      return contentType.Name;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n","export class FileTypeHelpers {\r\n  private static defaultIcon = 'file';\r\n  private static customExtensions: Record<string, string> = {\r\n    doc: 'file-word',\r\n    docx: 'file-word',\r\n    xls: 'file-excel',\r\n    xlsx: 'file-excel',\r\n    ppt: 'file-powerpoint',\r\n    pptx: 'file-powerpoint',\r\n    pdf: 'file-pdf',\r\n    mp3: 'file-audio',\r\n    avi: 'file-video',\r\n    mpg: 'file-video',\r\n    mpeg: 'file-video',\r\n    mov: 'file-video',\r\n    mp4: 'file-video',\r\n    zip: 'file-archive',\r\n    rar: 'file-archive',\r\n    txt: 'file-text',\r\n    html: 'file-code',\r\n    css: 'file-code',\r\n    xml: 'file-code',\r\n    xsl: 'file-code',\r\n  };\r\n  private static matExtensions: Record<string, string> = {\r\n    vcf: 'person',\r\n  };\r\n\r\n  static getExtension(filename: string) {\r\n    return filename.substring(filename.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n  }\r\n\r\n  static getIconClass(filename: string) {\r\n    const ext = this.getExtension(filename);\r\n    return this.matExtensions[ext] || this.customExtensions[ext] || this.defaultIcon;\r\n  }\r\n\r\n  static isKnownType(filename: string) {\r\n    return this.matExtensions[this.getExtension(filename)] != null;\r\n  }\r\n\r\n  static isImage(filename: string) {\r\n    return this.isImgRegex().test(filename);\r\n  }\r\n\r\n  private static isImgRegex() {\r\n    return /(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*\\.(?:jpg|jpeg|gif|png|webp))(?:\\?([^#]*))?(?:#(.*))?/i;\r\n  }\r\n}\r\n","import { FieldSettings, FieldValue } from '../../../../../../edit-types';\r\nimport { InputTypeStrict, InputTypeCatalog } from '../../../shared/fields/input-type-catalog';\r\nimport { classLog } from '../../../shared/logging';\r\nimport { ItemIdentifierShared } from '../../../shared/models/edit-form.model';\r\n\r\n/**\r\n * Get the field initial / default value, incl. the prefilled value if available.\r\n */\r\nexport class FieldDefaults {\r\n\r\n  log = classLog({FieldDefaults});\r\n\r\n  constructor(\r\n    private name: string,\r\n    private inputType: InputTypeStrict,\r\n    private settings: FieldSettings,\r\n    private itemHeader?: Pick<ItemIdentifierShared, \"Prefill\">,\r\n  ) { }\r\n\r\n  /** Include itemHeader if you need data from prefill, and set onlyPrefill if you only need parsed prefill */\r\n  getDefaultOrPrefillValue(onlyPrefill?: boolean): FieldValue {\r\n    \r\n    const inputType = this.inputType;\r\n    const name = this.name;\r\n    const settings = this.settings;\r\n    const itemHeader = this.itemHeader;\r\n    const l = this.log.fn('parseDefaultValue', { name, inputType, settings, itemHeader, onlyPrefill });\r\n\r\n    const prefillRaw = itemHeader?.Prefill?.[name];\r\n    if (onlyPrefill && prefillRaw === undefined)\r\n      return l.rNull('only prefill, but no prefill data found');\r\n\r\n    let defaultValue = prefillRaw?.toString() ?? settings.DefaultValue;\r\n\r\n    l.values({ defaultValue });\r\n\r\n    switch (inputType) {\r\n      case InputTypeCatalog.BooleanDefault:\r\n        return defaultValue?.toLowerCase() === 'true';\r\n      case InputTypeCatalog.BooleanTristate:\r\n        return defaultValue != null && defaultValue !== ''\r\n          ? defaultValue.toLowerCase() === 'true'\r\n          : null;\r\n      case InputTypeCatalog.DateTimeDefault:\r\n        return defaultValue != null && defaultValue !== ''\r\n          ? new Date(defaultValue).toJSON()\r\n          : null;\r\n      case InputTypeCatalog.NumberDefault:\r\n      case InputTypeCatalog.NumberDropdown:\r\n      case InputTypeCatalog.NumberPicker:\r\n        return defaultValue != null && defaultValue !== ''\r\n          ? !isNaN(Number(defaultValue)) ? Number(defaultValue) : null\r\n          : null;\r\n      case InputTypeCatalog.EntityDefault:\r\n      case InputTypeCatalog.EntityQuery:\r\n      case InputTypeCatalog.EntityContentBlocks:\r\n      case InputTypeCatalog.EntityPicker:\r\n        // Empty - return []\r\n        if (defaultValue == null || defaultValue === '')\r\n          return [];\r\n\r\n        // string has { } characters, we must switch them to quotes for parsing below\r\n        // 2024-06-01 2dm not sure why this is an option..., maybe some interim encoding?\r\n        if (defaultValue.includes('{'))\r\n          defaultValue = defaultValue.replace(/[\\{\\}]/g, '\\\"');\r\n\r\n        // list but no array, add brackets\r\n        if (defaultValue.includes(',') && !defaultValue.includes('[')) {\r\n          const guids = defaultValue.split(',').map(guid => guid.trim());\r\n          defaultValue = JSON.stringify(guids);\r\n        }\r\n\r\n        // Finally parse\r\n        return defaultValue.startsWith('[') // an array with guid strings\r\n          ? JSON.parse(defaultValue) // if it's a string containing an array\r\n          : [defaultValue.replace(/\"/g, '')]; // just a guid string, but might have quotes\r\n      default:\r\n        return defaultValue ?? '';\r\n    }\r\n  }\r\n}\r\n","export class SanitizeHelper {\r\n\r\n  private static removeFromStart(sanitized: string, charToRemove: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(0, 1) === charToRemove) {\r\n      sanitized = sanitized.substring(1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private static removeFromEnd(sanitized: string, charToRemove: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(sanitized.length - 1, sanitized.length) === charToRemove) {\r\n      sanitized = sanitized.substring(0, sanitized.length - 1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private static cleanBadPath(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    const goodChar = '_';\r\n    const illegalRe = /[\\?<>\\\\:\\*\\|\":]/g;\r\n    const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\r\n    const reservedRe = /^\\.+$/;\r\n    const windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\r\n    const windowsTrailingRe = /[\\. ]+$/;\r\n    return sanitized\r\n      .replace(illegalRe, goodChar)\r\n      .replace(controlRe, goodChar)\r\n      .replace(reservedRe, goodChar)\r\n      .replace(windowsReservedRe, goodChar)\r\n      .replace(windowsTrailingRe, goodChar);\r\n  }\r\n\r\n  // sanitize path\r\n  static sanitizePath(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // remove slashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\/');\r\n\r\n    // remove slashed form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\/');\r\n\r\n    // remove backslashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\\\');\r\n\r\n    // remove backslashes form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\\\');\r\n\r\n    // replace bad\r\n    sanitized = this.cleanBadPath(sanitized);\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  // sanitize file or folder name\r\n  static sanitizeName(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // in addition to all path validation rules\r\n    // slashes are not valid in file or folder name\r\n    const replacement = '_';\r\n    const illegalRe = /\\//g;\r\n    return this.sanitizePath(sanitized).replace(illegalRe, replacement);\r\n  }\r\n}\r\n","import { Signal } from '@angular/core';\r\nimport { ComputedCacheHelper } from '../../../shared/signals/computed-cache';\r\nimport { computedObj, signalObj } from '../../../shared/signals/signal.utilities';\r\nimport { classLog, ClassLogger } from '../../../shared/logging';\r\n\r\n/**\r\n * Signal based store for any kind of data which is accessed by a key.\r\n * - The data type is generic.\r\n * - The key type can be customized.\r\n * - Standard get/add/remove methods exist, and can be augmented by the inheriting store.\r\n */\r\nexport abstract class SignalStoreBase<TKey extends string | number, TValue> {\r\n  \r\n  protected log: ClassLogger;\r\n\r\n  constructor(log: ClassLogger) {\r\n    this.log = log ?? classLog({SignalStoreBase});\r\n    this.log.a('SignalStoreBase created');\r\n    this.name = this.log.name;\r\n  }\r\n  \r\n  /** Main Cache */\r\n  #cache = signalObj<Record<TKey, TValue>>('cache', {} as Record<TKey, TValue>);\r\n\r\n  /** Cached version of the list, with the latest object-values */\r\n  #list = computedObj('list', () => Object.values(this.#cache()) as TValue[]);\r\n\r\n  /** Cache for the inheriting classes, but as read-only */\r\n  protected get cache(): Signal<Record<TKey, TValue>> { return this.#cache; }\r\n\r\n  /** List for the inheriting classes, but as read-only */\r\n  protected get list(): Signal<TValue[]> { return this.#list; }\r\n\r\n  /**\r\n   * Function to get the key / id for storing in the cache.\r\n   * Default is to get the 'id' property of the item.\r\n   * This should be overriden in the inheriting class.\r\n   */\r\n  protected getId: (item: TValue) => TKey = (item) => (item as any).id as TKey;\r\n\r\n  protected sanitizeAdd: (item: TValue) => TValue = (item) => item;\r\n\r\n  name: string;\r\n\r\n\r\n  //#region Add / Update / Remove / Clear Cache\r\n\r\n  add(item: TValue): void {\r\n    const l = this.log.fn('add', { item });\r\n    if (!item)\r\n      return l.end('item is null');\r\n\r\n    // add to signal\r\n    this.#cache.set({\r\n      ...this.#cache(),\r\n      [this.getId(item)]: this.sanitizeAdd(item)\r\n    });\r\n    l.end('added');\r\n  }\r\n\r\n  addMany(items: TValue[]): void {\r\n    var l = this.log.fn('addMany', { items });\r\n    if (!items || items.length == 0)\r\n      return l.end('items is null or empty');\r\n\r\n    // also add to signal, but in one go\r\n    const result = items.reduce((acc, item) => ({\r\n      ...acc,\r\n      [this.getId(item)]: this.sanitizeAdd(item)\r\n    }), { ...this.#cache() });\r\n    \r\n    this.#cache.set(result);\r\n    l.end('added');\r\n  }\r\n\r\n  update(id: TKey, item: Partial<TValue>): void {\r\n    const l = this.log.fn('update', { id, item });\r\n    if (!id || !item)\r\n      return l.end('id or item is null');\r\n\r\n    const before = this.get(id);\r\n    if (!before)\r\n      return l.end(`Item with id ${id} not found in store`);\r\n\r\n    // merge\r\n    const newItem = { ...before, ...item };\r\n\r\n    // add to signal\r\n    this.#cache.set({\r\n      ...this.#cache(),\r\n      [id]: newItem\r\n    });\r\n    l.end('updated');\r\n  }\r\n\r\n  remove(id: TKey): void {\r\n    const l = this.log.fn('remove', { id });\r\n    const { [id]: _, ...updatedStore } = this.#cache();\r\n    this.#cache.set(updatedStore as Record<TKey, TValue>);\r\n    l.end('removed');\r\n  }\r\n\r\n  clearCache(): void {\r\n    const l = this.log.fn('clearCache');\r\n    this.#cache.set({} as Record<TKey, TValue>);\r\n    l.end('cleared');\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Now-Getters\r\n\r\n  get(id: TKey): TValue {\r\n    const result = this.#cache()[id];\r\n    this.log.a(`get(${id}) - ` + (result == null ? 'not' : '') + 'found');\r\n    return result;\r\n  }\r\n\r\n  getAll(): TValue[] {\r\n    const result = this.#list();\r\n    this.log.a('getAll() - ' + `found ${result.length} items`);\r\n    return result;\r\n  }\r\n\r\n  getMany(ids: TKey[]): TValue[] {\r\n    const l = this.log.fn('getMany', { ids });\r\n    const result = ids\r\n      .map(id => this.#cache()[id])\r\n      .filter(item => item != null);\r\n    return l.r(result, `found ${result.length} items`);\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Signal Getters\r\n\r\n  getSignal(id: TKey): Signal<TValue> {\r\n    const result = this.#itemSignalsCache.getOrCreateWithInfo(id, () => this.get(id));\r\n    this.log.a(`getSignal(${id})`, { isNew: result.isNew });\r\n    return result.signal;\r\n  }\r\n  #itemSignalsCache = new ComputedCacheHelper<TKey, TValue>('item');\r\n\r\n\r\n  getManySignal(ids: TKey[]): Signal<TValue[]> {\r\n    const sig = computedObj('getMany', () => ids.map(id => this.get(id)).filter(item => item != null));\r\n    this.log.a('getManySignal()', { ids });\r\n    return sig;\r\n  }\r\n\r\n  getAllSignal(): Signal<TValue[]> {\r\n    const list = this.#list;\r\n    this.log.a(`getAllSignal() - found ${list().length} items`);\r\n    return list;\r\n  }\r\n\r\n  //#endregion\r\n\r\n}\r\n","import { toObservable } from '@angular/core/rxjs-interop';\r\nimport { SignalStoreBase } from './signal-store-base';\r\nimport { Observable } from 'rxjs';\r\nimport { mapUntilChanged } from '../../../shared/rxJs/mapUntilChanged';\r\n\r\nexport abstract class SignalStoreObservableBase<TKey extends string | number, TValue> extends SignalStoreBase<TKey, TValue> {\r\n\r\n  /** Old / existing functionality with observables */\r\n  #cache$ = toObservable(this.cache);\r\n\r\n  #list$ = toObservable(this.list);\r\n\r\n  // publish only as a read-only signal\r\n  protected get cache$(): Observable<Record<TKey, TValue>> {\r\n    return this.#cache$;\r\n  }\r\n\r\n  protected get list$(): Observable<TValue[]> {\r\n    return this.#list$;\r\n  }\r\n\r\n  getList$(): Observable<TValue[]> {\r\n    return this.list$;\r\n  }\r\n\r\n  getMany$(ids?: TKey[]): Observable<TValue[]> {\r\n    return this.cache$.pipe(\r\n      mapUntilChanged(obj => ids.map(id => obj[id]).filter(m => m != null)),\r\n    );\r\n  }\r\n\r\n}","export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n\r\nexport type InputTypeStrict = typeof InputTypeCatalog[keyof typeof InputTypeCatalog];\r\n","export class ArrayHelpers {\r\n  /**\r\n   * Toggles an item in an array. If the item is not in the array, it is added. If it is in the array, it is removed.\r\n   * @param item The item to toggle\r\n   * @param array The array to toggle the item in\r\n   */\r\n  static toggleInArray<T>(item: T, array: T[]): void {\r\n    const index = array.indexOf(item);\r\n    if (index === -1) {\r\n      array.push(item);\r\n    } else {\r\n      array.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  // probably better: Array.from(new Set(merged));\r\n  // static distinct<T extends unknown>(array: T[]): T[] {\r\n  //   return array.filter(onlyUnique);\r\n  // }\r\n\r\n}\r\n\r\n\r\n// function onlyUnique<T extends unknown>(value: T, index: number, array: T[]): boolean {\r\n//   return array.indexOf(value) === index;\r\n// }","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n */\nfunction applyCssPrefixes(target) {\n    for (let key in target) {\n        let value = target[key] ?? '';\n        switch (key) {\n            case 'display':\n                if (value === 'flex') {\n                    target['display'] = [\n                        '-webkit-flex',\n                        'flex'\n                    ];\n                }\n                else if (value === 'inline-flex') {\n                    target['display'] = [\n                        '-webkit-inline-flex',\n                        'inline-flex'\n                    ];\n                }\n                else {\n                    target['display'] = value;\n                }\n                break;\n            case 'align-items':\n            case 'align-self':\n            case 'align-content':\n            case 'flex':\n            case 'flex-basis':\n            case 'flex-flow':\n            case 'flex-grow':\n            case 'flex-shrink':\n            case 'flex-wrap':\n            case 'justify-content':\n                target['-webkit-' + key] = value;\n                break;\n            case 'flex-direction':\n                target['-webkit-flex-direction'] = value;\n                target['flex-direction'] = value;\n                break;\n            case 'order':\n                target['order'] = target['-webkit-' + key] = isNaN(+value) ? '0' : value;\n                break;\n        }\n    }\n    return target;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst INLINE = 'inline';\nconst LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n */\nfunction buildLayoutCSS(value) {\n    let [direction, wrap, isInline] = validateValue(value);\n    return buildCSS(direction, wrap, isInline);\n}\n/**\n  * Validate the value to be one of the acceptable value options\n  * Use default fallback of 'row'\n  */\nfunction validateValue(value) {\n    value = value?.toLowerCase() ?? '';\n    let [direction, wrap, inline] = value.split(' ');\n    // First value must be the `flex-direction`\n    if (!LAYOUT_VALUES.find(x => x === direction)) {\n        direction = LAYOUT_VALUES[0];\n    }\n    if (wrap === INLINE) {\n        wrap = (inline !== INLINE) ? inline : '';\n        inline = INLINE;\n    }\n    return [direction, validateWrapValue(wrap), !!inline];\n}\n/**\n * Determine if the validated, flex-direction value specifies\n * a horizontal/row flow.\n */\nfunction isFlowHorizontal(value) {\n    let [flow,] = validateValue(value);\n    return flow.indexOf('row') > -1;\n}\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n */\nfunction validateWrapValue(value) {\n    if (!!value) {\n        switch (value.toLowerCase()) {\n            case 'reverse':\n            case 'wrap-reverse':\n            case 'reverse-wrap':\n                value = 'wrap-reverse';\n                break;\n            case 'no':\n            case 'none':\n            case 'nowrap':\n                value = 'nowrap';\n                break;\n            // All other values fallback to 'wrap'\n            default:\n                value = 'wrap';\n                break;\n        }\n    }\n    return value;\n}\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n */\nfunction buildCSS(direction, wrap = null, inline = false) {\n    return {\n        display: inline ? 'inline-flex' : 'flex',\n        'box-sizing': 'border-box',\n        'flex-direction': direction,\n        'flex-wrap': wrap || null,\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param dest The object which will have properties copied to it.\n * @param sources The source objects from which properties will be copied.\n */\nfunction extendObject(dest, ...sources) {\n    if (dest == null) {\n        throw TypeError('Cannot convert undefined or null to object');\n    }\n    for (let source of sources) {\n        if (source != null) {\n            for (let key in source) {\n                if (source.hasOwnProperty(key)) {\n                    dest[key] = source[key];\n                }\n            }\n        }\n    }\n    return dest;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INLINE, LAYOUT_VALUES, applyCssPrefixes, buildLayoutCSS, extendObject, isFlowHorizontal, validateValue, validateWrapValue };\n","import * as i0 from '@angular/core';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, Directive } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, isPlatformServer } from '@angular/common';\nimport { BehaviorSubject, Observable, merge, Subject, asapScheduler, of, fromEvent } from 'rxjs';\nimport { applyCssPrefixes, extendObject, buildLayoutCSS } from '@angular/flex-layout/_private-utils';\nimport { filter, tap, debounceTime, switchMap, map, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nfunction removeStyles(_document, platformId) {\n    return () => {\n        if (isPlatformBrowser(platformId)) {\n            const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n            // RegExp constructor should only be used if passing a variable to the constructor.\n            // When using static regular expression it is more performant to use reg exp literal.\n            // This is also needed to provide Safari 9 compatibility, please see\n            // https://stackoverflow.com/questions/37919802 for more discussion.\n            const classRegex = /\\bflex-layout-.+?\\b/g;\n            elements.forEach(el => {\n                el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n                    el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n            });\n        }\n    };\n}\n/**\n *  Provider to remove SSR styles on the browser\n */\nconst BROWSER_PROVIDER = {\n    provide: APP_BOOTSTRAP_LISTENER,\n    useFactory: removeStyles,\n    deps: [DOCUMENT, PLATFORM_ID],\n    multi: true\n};\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\nclass CoreModule {\n}\nCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: CoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: CoreModule });\nCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: CoreModule, providers: [BROWSER_PROVIDER] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: CoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [BROWSER_PROVIDER]\n                }]\n        }] });\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n    /**\n     * @param matches whether the mediaQuery is currently activated\n     * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n     * @param mqAlias e.g. gt-sm, md, gt-lg\n     * @param suffix e.g. GtSM, Md, GtLg\n     * @param priority the priority of activation for the given breakpoint\n     */\n    constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n        this.matches = matches;\n        this.mediaQuery = mediaQuery;\n        this.mqAlias = mqAlias;\n        this.suffix = suffix;\n        this.priority = priority;\n        this.property = '';\n    }\n    /** Create an exact copy of the MediaChange */\n    clone() {\n        return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n    constructor() {\n        this.stylesheet = new Map();\n    }\n    /**\n     * Add an individual style to an HTML element\n     */\n    addStyleToElement(element, style, value) {\n        const stylesheet = this.stylesheet.get(element);\n        if (stylesheet) {\n            stylesheet.set(style, value);\n        }\n        else {\n            this.stylesheet.set(element, new Map([[style, value]]));\n        }\n    }\n    /**\n     * Clear the virtual stylesheet\n     */\n    clearStyles() {\n        this.stylesheet.clear();\n    }\n    /**\n     * Retrieve a given style for an HTML element\n     */\n    getStyleForElement(el, styleName) {\n        const styles = this.stylesheet.get(el);\n        let value = '';\n        if (styles) {\n            const style = styles.get(styleName);\n            if (typeof style === 'number' || typeof style === 'string') {\n                value = style + '';\n            }\n        }\n        return value;\n    }\n}\nStylesheetMap.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StylesheetMap, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nStylesheetMap.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StylesheetMap, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StylesheetMap, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_CONFIG = {\n    addFlexToParent: true,\n    addOrientationBps: false,\n    disableDefaultBps: false,\n    disableVendorPrefixes: false,\n    serverLoaded: false,\n    useColumnBasisZero: true,\n    printWithBreakpoints: [],\n    mediaTriggerAutoRestore: true,\n    ssrObserveBreakpoints: [],\n    // This is disabled by default because otherwise the multiplier would\n    // run for all users, regardless of whether they're using this feature.\n    // Instead, we disable it by default, which requires this ugly cast.\n    multiplier: undefined,\n    defaultUnit: 'px',\n    detectLayoutDisplay: false,\n};\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n    providedIn: 'root',\n    factory: () => DEFAULT_CONFIG\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: () => false\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: () => null\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nfunction mergeAlias(dest, source) {\n    dest = dest?.clone() ?? new MediaChange();\n    if (source) {\n        dest.mqAlias = source.alias;\n        dest.mediaQuery = source.mediaQuery;\n        dest.suffix = source.suffix;\n        dest.priority = source.priority;\n    }\n    return dest;\n}\n\n/** A class that encapsulates CSS style generation for common directives */\nclass StyleBuilder {\n    constructor() {\n        /** Whether to cache the generated output styles */\n        this.shouldCache = true;\n    }\n    /**\n     * Run a side effect computation given the input string and the computed styles\n     * from the build task and the host configuration object\n     * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n     */\n    sideEffect(_input, _styles, _parent) {\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass StyleUtils {\n    constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n        this._serverStylesheet = _serverStylesheet;\n        this._serverModuleLoaded = _serverModuleLoaded;\n        this._platformId = _platformId;\n        this.layoutConfig = layoutConfig;\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     */\n    applyStyleToElement(element, style, value = null) {\n        let styles = {};\n        if (typeof style === 'string') {\n            styles[style] = value;\n            style = styles;\n        }\n        styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        this._applyMultiValueStyleToElement(styles, element);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     */\n    applyStyleToElements(style, elements = []) {\n        const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        elements.forEach(el => {\n            this._applyMultiValueStyleToElement(styles, el);\n        });\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     */\n    getFlowDirection(target) {\n        const query = 'flex-direction';\n        let value = this.lookupStyle(target, query);\n        const hasInlineValue = this.lookupInlineStyle(target, query) ||\n            (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n        return [value || 'row', hasInlineValue];\n    }\n    hasWrap(target) {\n        const query = 'flex-wrap';\n        return this.lookupStyle(target, query) === 'wrap';\n    }\n    /**\n     * Find the DOM element's raw attribute value (if any)\n     */\n    lookupAttributeValue(element, attribute) {\n        return element.getAttribute(attribute) ?? '';\n    }\n    /**\n     * Find the DOM element's inline style value (if any)\n     */\n    lookupInlineStyle(element, styleName) {\n        return isPlatformBrowser(this._platformId) ?\n            element.style.getPropertyValue(styleName) : getServerStyle(element, styleName);\n    }\n    /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     */\n    lookupStyle(element, styleName, inlineOnly = false) {\n        let value = '';\n        if (element) {\n            let immediateValue = value = this.lookupInlineStyle(element, styleName);\n            if (!immediateValue) {\n                if (isPlatformBrowser(this._platformId)) {\n                    if (!inlineOnly) {\n                        value = getComputedStyle(element).getPropertyValue(styleName);\n                    }\n                }\n                else {\n                    if (this._serverModuleLoaded) {\n                        value = this._serverStylesheet.getStyleForElement(element, styleName);\n                    }\n                }\n            }\n        }\n        // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n        //       in which case getComputedStyle() should determine a valid value.\n        return value ? value.trim() : '';\n    }\n    /**\n     * Applies the styles to the element. The styles object map may contain an array of values\n     * Each value will be added as element style\n     * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n     */\n    _applyMultiValueStyleToElement(styles, element) {\n        Object.keys(styles).sort().forEach(key => {\n            const el = styles[key];\n            const values = Array.isArray(el) ? el : [el];\n            values.sort();\n            for (let value of values) {\n                value = value ? value + '' : '';\n                if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n                    isPlatformBrowser(this._platformId) ?\n                        element.style.setProperty(key, value) : setServerStyle(element, key, value);\n                }\n                else {\n                    this._serverStylesheet.addStyleToElement(element, key, value);\n                }\n            }\n        });\n    }\n}\nStyleUtils.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StyleUtils, deps: [{ token: StylesheetMap }, { token: SERVER_TOKEN }, { token: PLATFORM_ID }, { token: LAYOUT_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });\nStyleUtils.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StyleUtils, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StyleUtils, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: StylesheetMap }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [SERVER_TOKEN]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LAYOUT_CONFIG]\n                }] }]; } });\nfunction getServerStyle(element, styleName) {\n    const styleMap = readStyleAttribute(element);\n    return styleMap[styleName] ?? '';\n}\nfunction setServerStyle(element, styleName, styleValue) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const styleMap = readStyleAttribute(element);\n    styleMap[styleName] = styleValue ?? '';\n    writeStyleAttribute(element, styleMap);\n}\nfunction writeStyleAttribute(element, styleMap) {\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n        const newValue = styleMap[key];\n        if (newValue) {\n            styleAttrValue += `${key}:${styleMap[key]};`;\n        }\n    }\n    element.setAttribute('style', styleAttrValue);\n}\nfunction readStyleAttribute(element) {\n    const styleMap = {};\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n        const styleList = styleAttribute.split(/;+/g);\n        for (let i = 0; i < styleList.length; i++) {\n            const style = styleList[i].trim();\n            if (style.length > 0) {\n                const colonIndex = style.indexOf(':');\n                if (colonIndex === -1) {\n                    throw new Error(`Invalid CSS style: ${style}`);\n                }\n                const name = style.substr(0, colonIndex).trim();\n                styleMap[name] = style.substr(colonIndex + 1).trim();\n            }\n        }\n    }\n    return styleMap;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** HOF to sort the breakpoints by descending priority */\nfunction sortDescendingPriority(a, b) {\n    const priorityA = a ? a.priority || 0 : 0;\n    const priorityB = b ? b.priority || 0 : 0;\n    return priorityB - priorityA;\n}\n/** HOF to sort the breakpoints by ascending priority */\nfunction sortAscendingPriority(a, b) {\n    const pA = a.priority || 0;\n    const pB = b.priority || 0;\n    return pA - pB;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n    constructor(_zone, _platformId, _document) {\n        this._zone = _zone;\n        this._platformId = _platformId;\n        this._document = _document;\n        /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n        this.source = new BehaviorSubject(new MediaChange(true));\n        this.registry = new Map();\n        this.pendingRemoveListenerFns = [];\n        this._observable$ = this.source.asObservable();\n    }\n    /**\n     * Publish list of all current activations\n     */\n    get activations() {\n        const results = [];\n        this.registry.forEach((mql, key) => {\n            if (mql.matches) {\n                results.push(key);\n            }\n        });\n        return results;\n    }\n    /**\n     * For the specified mediaQuery?\n     */\n    isActive(mediaQuery) {\n        const mql = this.registry.get(mediaQuery);\n        return mql?.matches ?? this.registerQuery(mediaQuery).some(m => m.matches);\n    }\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * Typically used by the MediaQueryAdaptor; optionally available to components\n     * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n     *\n     * Use deferred registration process to register breakpoints only on subscription\n     * This logic also enforces logic to register all mediaQueries BEFORE notify\n     * subscribers of notifications.\n     */\n    observe(mqList, filterOthers = false) {\n        if (mqList && mqList.length) {\n            const matchMedia$ = this._observable$.pipe(filter((change) => !filterOthers ? true : (mqList.indexOf(change.mediaQuery) > -1)));\n            const registration$ = new Observable((observer) => {\n                const matches = this.registerQuery(mqList);\n                if (matches.length) {\n                    const lastChange = matches.pop();\n                    matches.forEach((e) => {\n                        observer.next(e);\n                    });\n                    this.source.next(lastChange); // last match is cached\n                }\n                observer.complete();\n            });\n            return merge(registration$, matchMedia$);\n        }\n        return this._observable$;\n    }\n    /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     */\n    registerQuery(mediaQuery) {\n        const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n        const matches = [];\n        buildQueryCss(list, this._document);\n        list.forEach((query) => {\n            const onMQLEvent = (e) => {\n                this._zone.run(() => this.source.next(new MediaChange(e.matches, query)));\n            };\n            let mql = this.registry.get(query);\n            if (!mql) {\n                mql = this.buildMQL(query);\n                mql.addListener(onMQLEvent);\n                this.pendingRemoveListenerFns.push(() => mql.removeListener(onMQLEvent));\n                this.registry.set(query, mql);\n            }\n            if (mql.matches) {\n                matches.push(new MediaChange(true, query));\n            }\n        });\n        return matches;\n    }\n    ngOnDestroy() {\n        let fn;\n        while (fn = this.pendingRemoveListenerFns.pop()) {\n            fn();\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    buildMQL(query) {\n        return constructMql(query, isPlatformBrowser(this._platformId));\n    }\n}\nMatchMedia.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatchMedia, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nMatchMedia.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatchMedia, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatchMedia, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries, _document) {\n    const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n    if (list.length > 0) {\n        const query = list.join(', ');\n        try {\n            const styleEl = _document.createElement('style');\n            styleEl.setAttribute('type', 'text/css');\n            if (!styleEl.styleSheet) {\n                const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n                styleEl.appendChild(_document.createTextNode(cssText));\n            }\n            _document.head.appendChild(styleEl);\n            // Store in private global registry\n            list.forEach(mq => ALL_STYLES[mq] = styleEl);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\nfunction buildMockMql(query) {\n    const et = new EventTarget();\n    et.matches = query === 'all' || query === '';\n    et.media = query;\n    et.addListener = () => { };\n    et.removeListener = () => { };\n    et.addEventListener = () => { };\n    et.dispatchEvent = () => false;\n    et.onchange = null;\n    return et;\n}\nfunction constructMql(query, isBrowser) {\n    const canListen = isBrowser && !!window.matchMedia('all').addListener;\n    return canListen ? window.matchMedia(query) : buildMockMql(query);\n}\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\nconst DEFAULT_BREAKPOINTS = [\n    {\n        alias: 'xs',\n        mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n        priority: 1000,\n    },\n    {\n        alias: 'sm',\n        mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n        priority: 900,\n    },\n    {\n        alias: 'md',\n        mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n        priority: 800,\n    },\n    {\n        alias: 'lg',\n        mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n        priority: 700,\n    },\n    {\n        alias: 'xl',\n        mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n        priority: 600,\n    },\n    {\n        alias: 'lt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 599.98px)',\n        priority: 950,\n    },\n    {\n        alias: 'lt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 959.98px)',\n        priority: 850,\n    },\n    {\n        alias: 'lt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 1279.98px)',\n        priority: 750,\n    },\n    {\n        alias: 'lt-xl',\n        overlapping: true,\n        priority: 650,\n        mediaQuery: 'screen and (max-width: 1919.98px)',\n    },\n    {\n        alias: 'gt-xs',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 600px)',\n        priority: -950,\n    },\n    {\n        alias: 'gt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 960px)',\n        priority: -850,\n    }, {\n        alias: 'gt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1280px)',\n        priority: -750,\n    },\n    {\n        alias: 'gt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1920px)',\n        priority: -650,\n    }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* tslint:disable */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\nconst ScreenTypes = {\n    'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n    'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n    'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n    'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n    'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n    'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n    'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n    'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n    'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nconst ORIENTATION_BREAKPOINTS = [\n    { 'alias': 'handset', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET },\n    { 'alias': 'handset.landscape', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE },\n    { 'alias': 'handset.portrait', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT },\n    { 'alias': 'tablet', priority: 2100, 'mediaQuery': ScreenTypes.TABLET },\n    { 'alias': 'tablet.landscape', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_LANDSCAPE },\n    { 'alias': 'tablet.portrait', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_PORTRAIT },\n    { 'alias': 'web', priority: 2200, 'mediaQuery': ScreenTypes.WEB, overlapping: true },\n    { 'alias': 'web.landscape', priority: 2200, 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping: true },\n    { 'alias': 'web.portrait', priority: 2200, 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping: true }\n];\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part) {\n    let first = part.length > 0 ? part.charAt(0) : '';\n    let remainder = (part.length > 1) ? part.slice(1) : '';\n    return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name) {\n    return name\n        .replace(ALIAS_DELIMITERS, '|')\n        .split('|')\n        .map(firstUpperCase)\n        .join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nfunction validateSuffixes(list) {\n    list.forEach((bp) => {\n        if (!bp.suffix) {\n            bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n            bp.overlapping = !!bp.overlapping; // ensure default value\n        }\n    });\n    return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nfunction mergeByAlias(defaults, custom = []) {\n    const dict = {};\n    defaults.forEach(bp => {\n        dict[bp.alias] = bp;\n    });\n    // Merge custom breakpoints\n    custom.forEach((bp) => {\n        if (dict[bp.alias]) {\n            extendObject(dict[bp.alias], bp);\n        }\n        else {\n            dict[bp.alias] = bp;\n        }\n    });\n    return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: () => {\n        const breakpoints = inject(BREAKPOINT);\n        const layoutConfig = inject(LAYOUT_CONFIG);\n        const bpFlattenArray = [].concat.apply([], (breakpoints || [])\n            .map((v) => Array.isArray(v) ? v : [v]));\n        const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n            .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n        return mergeByAlias(builtIns, bpFlattenArray);\n    }\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n    constructor(list) {\n        /**\n         * Memoized BreakPoint Lookups\n         */\n        this.findByMap = new Map();\n        this.items = [...list].sort(sortAscendingPriority);\n    }\n    /**\n     * Search breakpoints by alias (e.g. gt-xs)\n     */\n    findByAlias(alias) {\n        return !alias ? null : this.findWithPredicate(alias, (bp) => bp.alias === alias);\n    }\n    findByQuery(query) {\n        return this.findWithPredicate(query, (bp) => bp.mediaQuery === query);\n    }\n    /**\n     * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n     * e.g. gt-sm overlaps md, lg, and xl\n     */\n    get overlappings() {\n        return this.items.filter(it => it.overlapping);\n    }\n    /**\n     * Get list of all registered (non-empty) breakpoint aliases\n     */\n    get aliases() {\n        return this.items.map(it => it.alias);\n    }\n    /**\n     * Aliases are mapped to properties using suffixes\n     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n     * for property layoutGtSM.\n     */\n    get suffixes() {\n        return this.items.map(it => it?.suffix ?? '');\n    }\n    /**\n     * Memoized lookup using custom predicate function\n     */\n    findWithPredicate(key, searchFn) {\n        let response = this.findByMap.get(key);\n        if (!response) {\n            response = this.items.find(searchFn) ?? null;\n            this.findByMap.set(key, response);\n        }\n        return response ?? null;\n    }\n}\nBreakPointRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: BreakPointRegistry, deps: [{ token: BREAKPOINTS }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakPointRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: BreakPointRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: BreakPointRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [BREAKPOINTS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst PRINT = 'print';\nconst BREAKPOINT_PRINT = {\n    alias: PRINT,\n    mediaQuery: PRINT,\n    priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nclass PrintHook {\n    constructor(breakpoints, layoutConfig, _document) {\n        this.breakpoints = breakpoints;\n        this.layoutConfig = layoutConfig;\n        this._document = _document;\n        // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n        //  and `afterprint` event listeners.\n        this.registeredBeforeAfterPrintHooks = false;\n        // isPrintingBeforeAfterEvent is used to track if we are printing from within\n        // a `beforeprint` event handler. This prevents the typical `stopPrinting`\n        // form `interceptEvents` so that printing is not stopped while the dialog\n        // is still open. This is an extension of the `isPrinting` property on\n        // browsers which support `beforeprint` and `afterprint` events.\n        this.isPrintingBeforeAfterEvent = false;\n        this.beforePrintEventListeners = [];\n        this.afterPrintEventListeners = [];\n        this.formerActivations = null;\n        // Is this service currently in print mode\n        this.isPrinting = false;\n        this.queue = new PrintQueue();\n        this.deactivations = [];\n    }\n    /** Add 'print' mediaQuery: to listen for matchMedia activations */\n    withPrintQuery(queries) {\n        return [...queries, PRINT];\n    }\n    /** Is the MediaChange event for any 'print' @media */\n    isPrintEvent(e) {\n        return e.mediaQuery.startsWith(PRINT);\n    }\n    /** What is the desired mqAlias to use while printing? */\n    get printAlias() {\n        return [...(this.layoutConfig.printWithBreakpoints ?? [])];\n    }\n    /** Lookup breakpoints associated with print aliases. */\n    get printBreakPoints() {\n        return this.printAlias\n            .map(alias => this.breakpoints.findByAlias(alias))\n            .filter(bp => bp !== null);\n    }\n    /** Lookup breakpoint associated with mediaQuery */\n    getEventBreakpoints({ mediaQuery }) {\n        const bp = this.breakpoints.findByQuery(mediaQuery);\n        const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n        return list.sort(sortDescendingPriority);\n    }\n    /** Update event with printAlias mediaQuery information */\n    updateEvent(event) {\n        let bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (this.isPrintEvent(event)) {\n            // Reset from 'print' to first (highest priority) print breakpoint\n            bp = this.getEventBreakpoints(event)[0];\n            event.mediaQuery = bp?.mediaQuery ?? '';\n        }\n        return mergeAlias(event, bp);\n    }\n    // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n    // trigger print styles synchronously and apply proper layout styles.\n    // It is a noop if the hooks have already been registered or if the document's\n    // `defaultView` is not available.\n    registerBeforeAfterPrintHooks(target) {\n        // `defaultView` may be null when rendering on the server or in other contexts.\n        if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n            return;\n        }\n        this.registeredBeforeAfterPrintHooks = true;\n        const beforePrintListener = () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            if (!this.isPrinting) {\n                this.isPrintingBeforeAfterEvent = true;\n                this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n                target.updateStyles();\n            }\n        };\n        const afterPrintListener = () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            this.isPrintingBeforeAfterEvent = false;\n            if (this.isPrinting) {\n                this.stopPrinting(target);\n                target.updateStyles();\n            }\n        };\n        // Could we have teardown logic to remove if there are no print listeners being used?\n        this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n        this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n        this.beforePrintEventListeners.push(beforePrintListener);\n        this.afterPrintEventListeners.push(afterPrintListener);\n    }\n    /**\n     * Prepare RxJS tap operator with partial application\n     * @return pipeable tap predicate\n     */\n    interceptEvents(target) {\n        return (event) => {\n            if (this.isPrintEvent(event)) {\n                if (event.matches && !this.isPrinting) {\n                    this.startPrinting(target, this.getEventBreakpoints(event));\n                    target.updateStyles();\n                }\n                else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n                    this.stopPrinting(target);\n                    target.updateStyles();\n                }\n                return;\n            }\n            this.collectActivations(target, event);\n        };\n    }\n    /** Stop mediaChange event propagation in event streams */\n    blockPropagation() {\n        return (event) => {\n            return !(this.isPrinting || this.isPrintEvent(event));\n        };\n    }\n    /**\n     * Save current activateBreakpoints (for later restore)\n     * and substitute only the printAlias breakpoint\n     */\n    startPrinting(target, bpList) {\n        this.isPrinting = true;\n        this.formerActivations = target.activatedBreakpoints;\n        target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n    }\n    /** For any print de-activations, reset the entire print queue */\n    stopPrinting(target) {\n        target.activatedBreakpoints = this.deactivations;\n        this.deactivations = [];\n        this.formerActivations = null;\n        this.queue.clear();\n        this.isPrinting = false;\n    }\n    /**\n     * To restore pre-Print Activations, we must capture the proper\n     * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n     * is supported; so 'print' mediaQuery activations are used as a fallback\n     * in browsers without `beforeprint` support.\n     *\n     * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n     *\n     * Let's capture all de-activations using the following logic:\n     *\n     *  When not printing:\n     *    - clear cache when activating non-print breakpoint\n     *    - update cache (and sort) when deactivating\n     *\n     *  When printing:\n     *    - sort and save when starting print\n     *    - restore as activatedTargets and clear when stop printing\n     */\n    collectActivations(target, event) {\n        if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n            if (!this.isPrintingBeforeAfterEvent) {\n                // Only clear deactivations if we aren't printing from a `beforeprint` event.\n                // Otherwise, this will clear before `stopPrinting()` is called to restore\n                // the pre-Print Activations.\n                this.deactivations = [];\n                return;\n            }\n            if (!event.matches) {\n                const bp = this.breakpoints.findByQuery(event.mediaQuery);\n                // Deactivating a breakpoint\n                if (bp) {\n                    const hasFormerBp = this.formerActivations && this.formerActivations.includes(bp);\n                    const wasActivated = !this.formerActivations && target.activatedBreakpoints.includes(bp);\n                    const shouldDeactivate = hasFormerBp || wasActivated;\n                    if (shouldDeactivate) {\n                        this.deactivations.push(bp);\n                        this.deactivations.sort(sortDescendingPriority);\n                    }\n                }\n            }\n        }\n    }\n    /** Teardown logic for the service. */\n    ngOnDestroy() {\n        if (this._document.defaultView) {\n            this.beforePrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('beforeprint', l));\n            this.afterPrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('afterprint', l));\n        }\n    }\n}\nPrintHook.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: PrintHook, deps: [{ token: BreakPointRegistry }, { token: LAYOUT_CONFIG }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nPrintHook.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: PrintHook, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: PrintHook, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: BreakPointRegistry }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LAYOUT_CONFIG]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n    constructor() {\n        /** Sorted queue with prioritized print breakpoints */\n        this.printBreakpoints = [];\n    }\n    addPrintBreakpoints(bpList) {\n        bpList.push(BREAKPOINT_PRINT);\n        bpList.sort(sortDescendingPriority);\n        bpList.forEach(bp => this.addBreakpoint(bp));\n        return this.printBreakpoints;\n    }\n    /** Add Print breakpoint to queue */\n    addBreakpoint(bp) {\n        if (!!bp) {\n            const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n            if (bpInList === undefined) {\n                // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n                // register as highest priority in the queue\n                this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints]\n                    : [...this.printBreakpoints, bp];\n            }\n        }\n    }\n    /** Restore original activated breakpoints and clear internal caches */\n    clear() {\n        this.printBreakpoints = [];\n    }\n}\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n/** Only support intercept queueing if the Breakpoint is a print @media query */\nfunction isPrintBreakPoint(bp) {\n    return bp?.mediaQuery.startsWith(PRINT) ?? false;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\nclass MediaMarshaller {\n    constructor(matchMedia, breakpoints, hook) {\n        this.matchMedia = matchMedia;\n        this.breakpoints = breakpoints;\n        this.hook = hook;\n        this._useFallbacks = true;\n        this._activatedBreakpoints = [];\n        this.elementMap = new Map();\n        this.elementKeyMap = new WeakMap();\n        this.watcherMap = new WeakMap(); // special triggers to update elements\n        this.updateMap = new WeakMap(); // callback functions to update styles\n        this.clearMap = new WeakMap(); // callback functions to clear styles\n        this.subject = new Subject();\n        this.observeActivations();\n    }\n    get activatedAlias() {\n        return this.activatedBreakpoints[0]?.alias ?? '';\n    }\n    set activatedBreakpoints(bps) {\n        this._activatedBreakpoints = [...bps];\n    }\n    get activatedBreakpoints() {\n        return [...this._activatedBreakpoints];\n    }\n    set useFallbacks(value) {\n        this._useFallbacks = value;\n    }\n    /**\n     * Update styles on breakpoint activates or deactivates\n     * @param mc\n     */\n    onMediaChange(mc) {\n        const bp = this.findByQuery(mc.mediaQuery);\n        if (bp) {\n            mc = mergeAlias(mc, bp);\n            const bpIndex = this.activatedBreakpoints.indexOf(bp);\n            if (mc.matches && bpIndex === -1) {\n                this._activatedBreakpoints.push(bp);\n                this._activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n            else if (!mc.matches && bpIndex !== -1) {\n                // Remove the breakpoint when it's deactivated\n                this._activatedBreakpoints.splice(bpIndex, 1);\n                this._activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n        }\n    }\n    /**\n     * initialize the marshaller with necessary elements for delegation on an element\n     * @param element\n     * @param key\n     * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n     * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n     * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n     */\n    init(element, key, updateFn, clearFn, extraTriggers = []) {\n        initBuilderMap(this.updateMap, element, key, updateFn);\n        initBuilderMap(this.clearMap, element, key, clearFn);\n        this.buildElementKeyMap(element, key);\n        this.watchExtraTriggers(element, key, extraTriggers);\n    }\n    /**\n     * get the value for an element and key and optionally a given breakpoint\n     * @param element\n     * @param key\n     * @param bp\n     */\n    getValue(element, key, bp) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key);\n            }\n        }\n        return undefined;\n    }\n    /**\n     * whether the element has values for a given key\n     * @param element\n     * @param key\n     */\n    hasValue(element, key) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const values = this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key) !== undefined || false;\n            }\n        }\n        return false;\n    }\n    /**\n     * Set the value for an input on a directive\n     * @param element the element in question\n     * @param key the type of the directive (e.g. flex, layout-gap, etc)\n     * @param bp the breakpoint suffix (empty string = default)\n     * @param val the value for the breakpoint\n     */\n    setValue(element, key, val, bp) {\n        let bpMap = this.elementMap.get(element);\n        if (!bpMap) {\n            bpMap = new Map().set(bp, new Map().set(key, val));\n            this.elementMap.set(element, bpMap);\n        }\n        else {\n            const values = (bpMap.get(bp) ?? new Map()).set(key, val);\n            bpMap.set(bp, values);\n            this.elementMap.set(element, bpMap);\n        }\n        const value = this.getValue(element, key);\n        if (value !== undefined) {\n            this.updateElement(element, key, value);\n        }\n    }\n    /** Track element value changes for a specific key */\n    trackValue(element, key) {\n        return this.subject\n            .asObservable()\n            .pipe(filter(v => v.element === element && v.key === key));\n    }\n    /** update all styles for all elements on the current breakpoint */\n    updateStyles() {\n        this.elementMap.forEach((bpMap, el) => {\n            const keyMap = new Set(this.elementKeyMap.get(el));\n            let valueMap = this.getActivatedValues(bpMap);\n            if (valueMap) {\n                valueMap.forEach((v, k) => {\n                    this.updateElement(el, k, v);\n                    keyMap.delete(k);\n                });\n            }\n            keyMap.forEach(k => {\n                valueMap = this.getActivatedValues(bpMap, k);\n                if (valueMap) {\n                    const value = valueMap.get(k);\n                    this.updateElement(el, k, value);\n                }\n                else {\n                    this.clearElement(el, k);\n                }\n            });\n        });\n    }\n    /**\n     * clear the styles for a given element\n     * @param element\n     * @param key\n     */\n    clearElement(element, key) {\n        const builders = this.clearMap.get(element);\n        if (builders) {\n            const clearFn = builders.get(key);\n            if (!!clearFn) {\n                clearFn();\n                this.subject.next({ element, key, value: '' });\n            }\n        }\n    }\n    /**\n     * update a given element with the activated values for a given key\n     * @param element\n     * @param key\n     * @param value\n     */\n    updateElement(element, key, value) {\n        const builders = this.updateMap.get(element);\n        if (builders) {\n            const updateFn = builders.get(key);\n            if (!!updateFn) {\n                updateFn(value);\n                this.subject.next({ element, key, value });\n            }\n        }\n    }\n    /**\n     * release all references to a given element\n     * @param element\n     */\n    releaseElement(element) {\n        const watcherMap = this.watcherMap.get(element);\n        if (watcherMap) {\n            watcherMap.forEach(s => s.unsubscribe());\n            this.watcherMap.delete(element);\n        }\n        const elementMap = this.elementMap.get(element);\n        if (elementMap) {\n            elementMap.forEach((_, s) => elementMap.delete(s));\n            this.elementMap.delete(element);\n        }\n    }\n    /**\n     * trigger an update for a given element and key (e.g. layout)\n     * @param element\n     * @param key\n     */\n    triggerUpdate(element, key) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const valueMap = this.getActivatedValues(bpMap, key);\n            if (valueMap) {\n                if (key) {\n                    this.updateElement(element, key, valueMap.get(key));\n                }\n                else {\n                    valueMap.forEach((v, k) => this.updateElement(element, k, v));\n                }\n            }\n        }\n    }\n    /** Cross-reference for HTMLElement with directive key */\n    buildElementKeyMap(element, key) {\n        let keyMap = this.elementKeyMap.get(element);\n        if (!keyMap) {\n            keyMap = new Set();\n            this.elementKeyMap.set(element, keyMap);\n        }\n        keyMap.add(key);\n    }\n    /**\n     * Other triggers that should force style updates:\n     * - directionality\n     * - layout changes\n     * - mutationobserver updates\n     */\n    watchExtraTriggers(element, key, triggers) {\n        if (triggers && triggers.length) {\n            let watchers = this.watcherMap.get(element);\n            if (!watchers) {\n                watchers = new Map();\n                this.watcherMap.set(element, watchers);\n            }\n            const subscription = watchers.get(key);\n            if (!subscription) {\n                const newSubscription = merge(...triggers).subscribe(() => {\n                    const currentValue = this.getValue(element, key);\n                    this.updateElement(element, key, currentValue);\n                });\n                watchers.set(key, newSubscription);\n            }\n        }\n    }\n    /** Breakpoint locator by mediaQuery */\n    findByQuery(query) {\n        return this.breakpoints.findByQuery(query);\n    }\n    /**\n     * get the fallback breakpoint for a given element, starting with the current breakpoint\n     * @param bpMap\n     * @param key\n     */\n    getActivatedValues(bpMap, key) {\n        for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n            const activatedBp = this.activatedBreakpoints[i];\n            const valueMap = bpMap.get(activatedBp.alias);\n            if (valueMap) {\n                if (key === undefined || (valueMap.has(key) && valueMap.get(key) != null)) {\n                    return valueMap;\n                }\n            }\n        }\n        // On the server, we explicitly have an \"all\" section filled in to begin with.\n        // So we don't need to aggressively find a fallback if no explicit value exists.\n        if (!this._useFallbacks) {\n            return undefined;\n        }\n        const lastHope = bpMap.get('');\n        return (key === undefined || lastHope && lastHope.has(key)) ? lastHope : undefined;\n    }\n    /**\n     * Watch for mediaQuery breakpoint activations\n     */\n    observeActivations() {\n        const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n        this.hook.registerBeforeAfterPrintHooks(this);\n        this.matchMedia\n            .observe(this.hook.withPrintQuery(queries))\n            .pipe(tap(this.hook.interceptEvents(this)), filter(this.hook.blockPropagation()))\n            .subscribe(this.onMediaChange.bind(this));\n    }\n}\nMediaMarshaller.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaMarshaller, deps: [{ token: MatchMedia }, { token: BreakPointRegistry }, { token: PrintHook }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMarshaller.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaMarshaller, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaMarshaller, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MatchMedia }, { type: BreakPointRegistry }, { type: PrintHook }]; } });\nfunction initBuilderMap(map, element, key, input) {\n    if (input !== undefined) {\n        const oldMap = map.get(element) ?? new Map();\n        oldMap.set(key, input);\n        map.set(element, oldMap);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass BaseDirective2 {\n    constructor(elementRef, styleBuilder, styler, marshal) {\n        this.elementRef = elementRef;\n        this.styleBuilder = styleBuilder;\n        this.styler = styler;\n        this.marshal = marshal;\n        this.DIRECTIVE_KEY = '';\n        this.inputs = [];\n        /** The most recently used styles for the builder */\n        this.mru = {};\n        this.destroySubject = new Subject();\n        /** Cache map for style computation */\n        this.styleCache = new Map();\n    }\n    /** Access to host element's parent DOM node */\n    get parentElement() {\n        return this.elementRef.nativeElement.parentElement;\n    }\n    /** Access to the HTMLElement for the directive */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n    /** Access to the activated value for the directive */\n    get activatedValue() {\n        return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    set activatedValue(value) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n    }\n    /** For @Input changes */\n    ngOnChanges(changes) {\n        Object.keys(changes).forEach(key => {\n            if (this.inputs.indexOf(key) !== -1) {\n                const bp = key.split('.').slice(1).join('.');\n                const val = changes[key].currentValue;\n                this.setValue(val, bp);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this.destroySubject.next();\n        this.destroySubject.complete();\n        this.marshal.releaseElement(this.nativeElement);\n    }\n    /** Register with central marshaller service */\n    init(extraTriggers = []) {\n        this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n    }\n    /** Add styles to the element using predefined style builder */\n    addStyles(input, parent) {\n        const builder = this.styleBuilder;\n        const useCache = builder.shouldCache;\n        let genStyles = this.styleCache.get(input);\n        if (!genStyles || !useCache) {\n            genStyles = builder.buildStyles(input, parent);\n            if (useCache) {\n                this.styleCache.set(input, genStyles);\n            }\n        }\n        this.mru = { ...genStyles };\n        this.applyStyleToElement(genStyles);\n        builder.sideEffect(input, genStyles, parent);\n    }\n    /** Remove generated styles from an element using predefined style builder */\n    clearStyles() {\n        Object.keys(this.mru).forEach(k => {\n            this.mru[k] = '';\n        });\n        this.applyStyleToElement(this.mru);\n        this.mru = {};\n        this.currentValue = undefined;\n    }\n    /** Force trigger style updates on DOM element */\n    triggerUpdate() {\n        this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     */\n    getFlexFlowDirection(target, addIfMissing = false) {\n        if (target) {\n            const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n            if (!hasInlineValue && addIfMissing) {\n                const style = buildLayoutCSS(value);\n                const elements = [target];\n                this.styler.applyStyleToElements(style, elements);\n            }\n            return value.trim();\n        }\n        return 'row';\n    }\n    hasWrap(target) {\n        return this.styler.hasWrap(target);\n    }\n    /** Applies styles given via string pair or object map to the directive element */\n    applyStyleToElement(style, value, element = this.nativeElement) {\n        this.styler.applyStyleToElement(element, style, value);\n    }\n    setValue(val, bp) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n    }\n    updateWithValue(input) {\n        if (this.currentValue !== input) {\n            this.addStyles(input);\n            this.currentValue = input;\n        }\n    }\n}\nBaseDirective2.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: BaseDirective2, deps: [{ token: i0.ElementRef }, { token: StyleBuilder }, { token: StyleUtils }, { token: MediaMarshaller }], target: i0.ɵɵFactoryTarget.Directive });\nBaseDirective2.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: BaseDirective2, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: BaseDirective2, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: StyleBuilder }, { type: StyleUtils }, { type: MediaMarshaller }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n    constructor(_zone, _platformId, _document, _breakpoints) {\n        super(_zone, _platformId, _document);\n        this._breakpoints = _breakpoints;\n        this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n        this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n    }\n    /** Easy method to clear all listeners for all mediaQueries */\n    clearAll() {\n        this.registry.forEach((mql) => {\n            mql.destroy();\n        });\n        this.registry.clear();\n        this.useOverlaps = false;\n    }\n    /** Feature to support manual, simulated activation of a mediaQuery. */\n    activate(mediaQuery, useOverlaps = this.useOverlaps) {\n        mediaQuery = this._validateQuery(mediaQuery);\n        if (useOverlaps || !this.isActive(mediaQuery)) {\n            this._deactivateAll();\n            this._registerMediaQuery(mediaQuery);\n            this._activateWithOverlaps(mediaQuery, useOverlaps);\n        }\n        return this.hasActivated;\n    }\n    /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n    _validateQuery(queryOrAlias) {\n        const bp = this._breakpoints.findByAlias(queryOrAlias);\n        return bp?.mediaQuery ?? queryOrAlias;\n    }\n    /**\n     * Manually onMediaChange any overlapping mediaQueries to simulate\n     * similar functionality in the window.matchMedia()\n     */\n    _activateWithOverlaps(mediaQuery, useOverlaps) {\n        if (useOverlaps) {\n            const bp = this._breakpoints.findByQuery(mediaQuery);\n            const alias = bp?.alias ?? 'unknown';\n            // Simulate activation of overlapping lt-<XXX> ranges\n            switch (alias) {\n                case 'lg':\n                    this._activateByAlias(['lt-xl']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['lt-xl', 'lt-lg']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n                    break;\n                case 'xs':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n                    break;\n            }\n            // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n            switch (alias) {\n                case 'xl':\n                    this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'lg':\n                    this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['gt-sm', 'gt-xs']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['gt-xs']);\n                    break;\n            }\n        }\n        // Activate last since the responsiveActivation is watching *this* mediaQuery\n        return this._activateByQuery(mediaQuery);\n    }\n    /**\n     *\n     */\n    _activateByAlias(aliases) {\n        const activate = (alias) => {\n            const bp = this._breakpoints.findByAlias(alias);\n            this._activateByQuery(bp?.mediaQuery ?? alias);\n        };\n        aliases.forEach(activate);\n    }\n    /**\n     *\n     */\n    _activateByQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this._registerMediaQuery(mediaQuery);\n        }\n        const mql = this.registry.get(mediaQuery);\n        if (mql && !this.isActive(mediaQuery)) {\n            this.registry.set(mediaQuery, mql.activate());\n        }\n        return this.hasActivated;\n    }\n    /** Deactivate all current MQLs and reset the buffer */\n    _deactivateAll() {\n        this.registry.forEach((it) => {\n            it.deactivate();\n        });\n        return this;\n    }\n    /** Insure the mediaQuery is registered with MatchMedia */\n    _registerMediaQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this.registerQuery(mediaQuery);\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    buildMQL(query) {\n        return new MockMediaQueryList(query);\n    }\n    get hasActivated() {\n        return this.activations.length > 0;\n    }\n}\nMockMatchMedia.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MockMatchMedia, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }, { token: DOCUMENT }, { token: BreakPointRegistry }], target: i0.ɵɵFactoryTarget.Injectable });\nMockMatchMedia.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MockMatchMedia });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MockMatchMedia, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: BreakPointRegistry }]; } });\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList extends EventTarget {\n    constructor(_mediaQuery) {\n        super();\n        this._mediaQuery = _mediaQuery;\n        this._isActive = false;\n        this._listeners = [];\n        this.onchange = null;\n    }\n    get matches() {\n        return this._isActive;\n    }\n    get media() {\n        return this._mediaQuery;\n    }\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     */\n    destroy() {\n        this.deactivate();\n        this._listeners = [];\n    }\n    /** Notify all listeners that 'matches === TRUE' */\n    activate() {\n        if (!this._isActive) {\n            this._isActive = true;\n            this._listeners.forEach((callback) => {\n                const cb = callback;\n                cb.call(this, { matches: this.matches, media: this.media });\n            });\n        }\n        return this;\n    }\n    /** Notify all listeners that 'matches === false' */\n    deactivate() {\n        if (this._isActive) {\n            this._isActive = false;\n            this._listeners.forEach((callback) => {\n                const cb = callback;\n                cb.call(this, { matches: this.matches, media: this.media });\n            });\n        }\n        return this;\n    }\n    /** Add a listener to our internal list to activate later */\n    addListener(listener) {\n        if (this._listeners.indexOf(listener) === -1) {\n            this._listeners.push(listener);\n        }\n        if (this._isActive) {\n            const cb = listener;\n            cb.call(this, { matches: this.matches, media: this.media });\n        }\n    }\n    /** Don't need to remove listeners in the testing environment */\n    removeListener(_) {\n    }\n    dispatchEvent(_) {\n        return false;\n    }\n}\n/**\n * Pre-configured provider for MockMatchMedia\n */\nconst MockMatchMediaProvider = {\n    provide: MatchMedia,\n    useClass: MockMatchMedia\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Wraps the provided value in an array, unless the provided value is an array. */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\nclass MediaObserver {\n    constructor(breakpoints, matchMedia, hook) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.hook = hook;\n        /** Filter MediaChange notifications for overlapping breakpoints */\n        this.filterOverlaps = false;\n        this.destroyed$ = new Subject();\n        this._media$ = this.watchActivations();\n    }\n    /**\n     * Completes the active subject, signalling to all complete for all\n     * MediaObserver subscribers\n     */\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n    // ************************************************\n    // Public Methods\n    // ************************************************\n    /**\n     * Observe changes to current activation 'list'\n     */\n    asObservable() {\n        return this._media$;\n    }\n    /**\n     * Allow programmatic query to determine if one or more media query/alias match\n     * the current viewport size.\n     * @param value One or more media queries (or aliases) to check.\n     * @returns Whether any of the media queries match.\n     */\n    isActive(value) {\n        const aliases = splitQueries(coerceArray(value));\n        return aliases.some(alias => {\n            const query = toMediaQuery(alias, this.breakpoints);\n            return query !== null && this.matchMedia.isActive(query);\n        });\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Register all the mediaQueries registered in the BreakPointRegistry\n     * This is needed so subscribers can be auto-notified of all standard, registered\n     * mediaQuery activations\n     */\n    watchActivations() {\n        const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n        return this.buildObservable(queries);\n    }\n    /**\n     * Only pass/announce activations (not de-activations)\n     *\n     * Since multiple-mediaQueries can be activation in a cycle,\n     * gather all current activations into a single list of changes to observers\n     *\n     * Inject associated (if any) alias information into the MediaChange event\n     * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     * - Exclude print activations that do not have an associated mediaQuery\n     *\n     * NOTE: the raw MediaChange events [from MatchMedia] do not\n     *       contain important alias information; as such this info\n     *       must be injected into the MediaChange\n     */\n    buildObservable(mqList) {\n        const hasChanges = (changes) => {\n            const isValidQuery = (change) => (change.mediaQuery.length > 0);\n            return (changes.filter(isValidQuery).length > 0);\n        };\n        const excludeOverlaps = (changes) => {\n            return !this.filterOverlaps ? changes : changes.filter(change => {\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return bp?.overlapping ?? true;\n            });\n        };\n        const ignoreDuplicates = (previous, current) => {\n            if (previous.length !== current.length) {\n                return false;\n            }\n            const previousMqs = previous.map(mc => mc.mediaQuery);\n            const currentMqs = new Set(current.map(mc => mc.mediaQuery));\n            const difference = new Set(previousMqs.filter(mq => !currentMqs.has(mq)));\n            return difference.size === 0;\n        };\n        /**\n         */\n        return this.matchMedia\n            .observe(this.hook.withPrintQuery(mqList))\n            .pipe(filter((change) => change.matches), debounceTime(0, asapScheduler), switchMap(_ => of(this.findAllActivations())), map(excludeOverlaps), filter(hasChanges), distinctUntilChanged(ignoreDuplicates), takeUntil(this.destroyed$));\n    }\n    /**\n     * Find all current activations and prepare single list of activations\n     * sorted by descending priority.\n     */\n    findAllActivations() {\n        const mergeMQAlias = (change) => {\n            const bp = this.breakpoints.findByQuery(change.mediaQuery);\n            return mergeAlias(change, bp);\n        };\n        const replaceWithPrintAlias = (change) => this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n        return this.matchMedia\n            .activations\n            .map(query => new MediaChange(true, query))\n            .map(replaceWithPrintAlias)\n            .map(mergeMQAlias)\n            .sort(sortDescendingPriority);\n    }\n}\nMediaObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaObserver, deps: [{ token: BreakPointRegistry }, { token: MatchMedia }, { token: PrintHook }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: BreakPointRegistry }, { type: MatchMedia }, { type: PrintHook }]; } });\n/**\n * Find associated breakpoint (if any)\n */\nfunction toMediaQuery(query, locator) {\n    const bp = locator.findByAlias(query) ?? locator.findByQuery(query);\n    return bp?.mediaQuery ?? null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.flatMap(query => query.split(','))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class\n */\nclass MediaTrigger {\n    constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.layoutConfig = layoutConfig;\n        this._platformId = _platformId;\n        this._document = _document;\n        this.hasCachedRegistryMatches = false;\n        this.originalActivations = [];\n        this.originalRegistry = new Map();\n    }\n    /**\n     * Manually activate range of breakpoints\n     * @param list array of mediaQuery or alias strings\n     */\n    activate(list) {\n        list = list.map(it => it.trim()); // trim queries\n        this.saveActivations();\n        this.deactivateAll();\n        this.setActivations(list);\n        this.prepareAutoRestore();\n    }\n    /**\n     * Restore original, 'real' breakpoints and emit events\n     * to trigger stream notification\n     */\n    restore() {\n        if (this.hasCachedRegistryMatches) {\n            const extractQuery = (change) => change.mediaQuery;\n            const list = this.originalActivations.map(extractQuery);\n            try {\n                this.deactivateAll();\n                this.restoreRegistryMatches();\n                this.setActivations(list);\n            }\n            finally {\n                this.originalActivations = [];\n                if (this.resizeSubscription) {\n                    this.resizeSubscription.unsubscribe();\n                }\n            }\n        }\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Whenever window resizes, immediately auto-restore original\n     * activations (if we are simulating activations)\n     */\n    prepareAutoRestore() {\n        const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n        const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n        if (enableAutoRestore) {\n            const resize$ = fromEvent(window, 'resize').pipe(take(1));\n            this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n        }\n    }\n    /**\n     * Notify all matchMedia subscribers of de-activations\n     *\n     * Note: we must force 'matches' updates for\n     *       future matchMedia::activation lookups\n     */\n    deactivateAll() {\n        const list = this.currentActivations;\n        this.forceRegistryMatches(list, false);\n        this.simulateMediaChanges(list, false);\n    }\n    /**\n     * Cache current activations as sorted, prioritized list of MediaChanges\n     */\n    saveActivations() {\n        if (!this.hasCachedRegistryMatches) {\n            const toMediaChange = (query) => new MediaChange(true, query);\n            const mergeMQAlias = (change) => {\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return mergeAlias(change, bp);\n            };\n            this.originalActivations = this.currentActivations\n                .map(toMediaChange)\n                .map(mergeMQAlias)\n                .sort(sortDescendingPriority);\n            this.cacheRegistryMatches();\n        }\n    }\n    /**\n     * Force set manual activations for specified mediaQuery list\n     */\n    setActivations(list) {\n        if (!!this.originalRegistry) {\n            this.forceRegistryMatches(list, true);\n        }\n        this.simulateMediaChanges(list);\n    }\n    /**\n     * For specified mediaQuery list manually simulate activations or deactivations\n     */\n    simulateMediaChanges(queries, matches = true) {\n        const toMediaQuery = (query) => {\n            const locator = this.breakpoints;\n            const bp = locator.findByAlias(query) || locator.findByQuery(query);\n            return bp ? bp.mediaQuery : query;\n        };\n        const emitChangeEvent = (query) => this.emitChangeEvent(matches, query);\n        queries.map(toMediaQuery).forEach(emitChangeEvent);\n    }\n    /**\n     * Replace current registry with simulated registry...\n     * Note: this is required since MediaQueryList::matches is 'readOnly'\n     */\n    forceRegistryMatches(queries, matches) {\n        const registry = new Map();\n        queries.forEach(query => {\n            registry.set(query, { matches });\n        });\n        this.matchMedia.registry = registry;\n    }\n    /**\n     * Save current MatchMedia::registry items.\n     */\n    cacheRegistryMatches() {\n        const target = this.originalRegistry;\n        target.clear();\n        this.matchMedia.registry.forEach((value, key) => {\n            target.set(key, value);\n        });\n        this.hasCachedRegistryMatches = true;\n    }\n    /**\n     * Restore original, 'true' registry\n     */\n    restoreRegistryMatches() {\n        const target = this.matchMedia.registry;\n        target.clear();\n        this.originalRegistry.forEach((value, key) => {\n            target.set(key, value);\n        });\n        this.originalRegistry.clear();\n        this.hasCachedRegistryMatches = false;\n    }\n    /**\n     * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n     */\n    emitChangeEvent(matches, query) {\n        this.matchMedia.source.next(new MediaChange(matches, query));\n    }\n    get currentActivations() {\n        return this.matchMedia.activations;\n    }\n}\nMediaTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaTrigger, deps: [{ token: BreakPointRegistry }, { token: MatchMedia }, { token: LAYOUT_CONFIG }, { token: PLATFORM_ID }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaTrigger.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaTrigger, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MediaTrigger, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: BreakPointRegistry }, { type: MatchMedia }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LAYOUT_CONFIG]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* The flex API permits 3 or 1 parts of the value:\n*    - `flex-grow flex-shrink flex-basis`, or\n*    - `flex-basis`\n*/\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n    let parts = [grow, shrink, basis];\n    let j = basis.indexOf('calc');\n    if (j > 0) {\n        parts[2] = _validateCalcValue(basis.substring(j).trim());\n        let matches = basis.substr(0, j).trim().split(' ');\n        if (matches.length == 2) {\n            parts[0] = matches[0];\n            parts[1] = matches[1];\n        }\n    }\n    else if (j == 0) {\n        parts[2] = _validateCalcValue(basis.trim());\n    }\n    else {\n        let matches = basis.split(' ');\n        parts = (matches.length === 3) ? matches : [\n            grow, shrink, basis\n        ];\n    }\n    return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc) {\n    return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\nconst MULTIPLIER_SUFFIX = 'x';\nfunction multiply(value, multiplier) {\n    if (multiplier === undefined) {\n        return value;\n    }\n    const transformValue = (possibleValue) => {\n        const numberValue = +(possibleValue.slice(0, -MULTIPLIER_SUFFIX.length));\n        if (value.endsWith(MULTIPLIER_SUFFIX) && !isNaN(numberValue)) {\n            return `${numberValue * multiplier.value}${multiplier.unit}`;\n        }\n        return value;\n    };\n    return value.includes(' ') ?\n        value.split(' ').map(transformValue).join(' ') : transformValue(value);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BREAKPOINT, BREAKPOINTS, BREAKPOINT_PRINT, BROWSER_PROVIDER, BaseDirective2, BreakPointRegistry, CLASS_NAME, CoreModule, DEFAULT_BREAKPOINTS, DEFAULT_CONFIG, LAYOUT_CONFIG, MediaChange, MediaMarshaller, MediaObserver, MediaTrigger, ORIENTATION_BREAKPOINTS, PrintHook, SERVER_TOKEN, ScreenTypes, StyleBuilder, StyleUtils, StylesheetMap, coerceArray, mergeAlias, removeStyles, sortAscendingPriority, sortDescendingPriority, validateBasis, MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider, multiply as ɵmultiply };\n","import * as i0 from '@angular/core';\nimport { Injectable, PLATFORM_ID, Directive, Inject, Input, Optional, Self, SecurityContext, NgModule } from '@angular/core';\nimport * as i1 from '@angular/flex-layout/core';\nimport { StyleBuilder, BaseDirective2, SERVER_TOKEN, LAYOUT_CONFIG, CoreModule } from '@angular/flex-layout/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformServer, NgClass, NgStyle } from '@angular/common';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i2$1 from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ImgSrcStyleBuilder extends StyleBuilder {\n    buildStyles(url) {\n        return { 'content': url ? `url(${url})` : '' };\n    }\n}\nImgSrcStyleBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ImgSrcStyleBuilder, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\nImgSrcStyleBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ImgSrcStyleBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ImgSrcStyleBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nclass ImgSrcDirective extends BaseDirective2 {\n    constructor(elementRef, styleBuilder, styler, marshal, platformId, serverModuleLoaded) {\n        super(elementRef, styleBuilder, styler, marshal);\n        this.platformId = platformId;\n        this.serverModuleLoaded = serverModuleLoaded;\n        this.DIRECTIVE_KEY = 'img-src';\n        this.defaultSrc = '';\n        this.styleCache = imgSrcCache;\n        this.init();\n        this.setValue(this.nativeElement.getAttribute('src') || '', '');\n        if (isPlatformServer(this.platformId) && this.serverModuleLoaded) {\n            this.nativeElement.setAttribute('src', '');\n        }\n    }\n    set src(val) {\n        this.defaultSrc = val;\n        this.setValue(this.defaultSrc, '');\n    }\n    /**\n     * Use the [responsively] activated input value to update\n     * the host img src attribute or assign a default `img.src=''`\n     * if the src has not been defined.\n     *\n     * Do nothing to standard `<img src=\"\">` usages, only when responsive\n     * keys are present do we actually call `setAttribute()`\n     */\n    updateWithValue(value) {\n        const url = value || this.defaultSrc;\n        if (isPlatformServer(this.platformId) && this.serverModuleLoaded) {\n            this.addStyles(url);\n        }\n        else {\n            this.nativeElement.setAttribute('src', url);\n        }\n    }\n}\nImgSrcDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ImgSrcDirective, deps: [{ token: i0.ElementRef }, { token: ImgSrcStyleBuilder }, { token: i1.StyleUtils }, { token: i1.MediaMarshaller }, { token: PLATFORM_ID }, { token: SERVER_TOKEN }], target: i0.ɵɵFactoryTarget.Directive });\nImgSrcDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: ImgSrcDirective, inputs: { src: \"src\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ImgSrcDirective, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ImgSrcStyleBuilder }, { type: i1.StyleUtils }, { type: i1.MediaMarshaller }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [SERVER_TOKEN]\n                }] }]; }, propDecorators: { src: [{\n                type: Input,\n                args: ['src']\n            }] } });\nconst imgSrcCache = new Map();\nconst inputs$3 = [\n    'src.xs', 'src.sm', 'src.md', 'src.lg', 'src.xl',\n    'src.lt-sm', 'src.lt-md', 'src.lt-lg', 'src.lt-xl',\n    'src.gt-xs', 'src.gt-sm', 'src.gt-md', 'src.gt-lg'\n];\nconst selector$3 = `\n  img[src.xs],    img[src.sm],    img[src.md],    img[src.lg],   img[src.xl],\n  img[src.lt-sm], img[src.lt-md], img[src.lt-lg], img[src.lt-xl],\n  img[src.gt-xs], img[src.gt-sm], img[src.gt-md], img[src.gt-lg]\n`;\n/**\n * This directive provides a responsive API for the HTML <img> 'src' attribute\n * and will update the img.src property upon each responsive activation.\n *\n * e.g.\n *      <img src=\"defaultScene.jpg\" src.xs=\"mobileScene.jpg\"></img>\n *\n * @see https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-src/\n */\nclass DefaultImgSrcDirective extends ImgSrcDirective {\n    constructor() {\n        super(...arguments);\n        this.inputs = inputs$3;\n    }\n}\nDefaultImgSrcDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: DefaultImgSrcDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nDefaultImgSrcDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: DefaultImgSrcDirective, selector: \"\\n  img[src.xs],    img[src.sm],    img[src.md],    img[src.lg],   img[src.xl],\\n  img[src.lt-sm], img[src.lt-md], img[src.lt-lg], img[src.lt-xl],\\n  img[src.gt-xs], img[src.gt-sm], img[src.gt-md], img[src.gt-lg]\\n\", inputs: { \"src.xs\": \"src.xs\", \"src.sm\": \"src.sm\", \"src.md\": \"src.md\", \"src.lg\": \"src.lg\", \"src.xl\": \"src.xl\", \"src.lt-sm\": \"src.lt-sm\", \"src.lt-md\": \"src.lt-md\", \"src.lt-lg\": \"src.lt-lg\", \"src.lt-xl\": \"src.lt-xl\", \"src.gt-xs\": \"src.gt-xs\", \"src.gt-sm\": \"src.gt-sm\", \"src.gt-md\": \"src.gt-md\", \"src.gt-lg\": \"src.gt-lg\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: DefaultImgSrcDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: selector$3, inputs: inputs$3 }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClassDirective extends BaseDirective2 {\n    constructor(elementRef, styler, marshal, iterableDiffers, keyValueDiffers, renderer2, ngClassInstance) {\n        super(elementRef, null, styler, marshal);\n        this.ngClassInstance = ngClassInstance;\n        this.DIRECTIVE_KEY = 'ngClass';\n        if (!this.ngClassInstance) {\n            // Create an instance NgClass Directive instance only if `ngClass=\"\"` has NOT been defined on\n            // the same host element; since the responsive variations may be defined...\n            this.ngClassInstance = new NgClass(iterableDiffers, keyValueDiffers, elementRef, renderer2);\n        }\n        this.init();\n        this.setValue('', '');\n    }\n    /**\n     * Capture class assignments so we cache the default classes\n     * which are merged with activated styles and used as fallbacks.\n     */\n    set klass(val) {\n        this.ngClassInstance.klass = val;\n        this.setValue(val, '');\n    }\n    updateWithValue(value) {\n        this.ngClassInstance.ngClass = value;\n        this.ngClassInstance.ngDoCheck();\n    }\n    // ******************************************************************\n    // Lifecycle Hooks\n    // ******************************************************************\n    /**\n     * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n     */\n    ngDoCheck() {\n        this.ngClassInstance.ngDoCheck();\n    }\n}\nClassDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ClassDirective, deps: [{ token: i0.ElementRef }, { token: i1.StyleUtils }, { token: i1.MediaMarshaller }, { token: i0.IterableDiffers }, { token: i0.KeyValueDiffers }, { token: i0.Renderer2 }, { token: i2.NgClass, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive });\nClassDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: ClassDirective, inputs: { klass: [\"class\", \"klass\"] }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ClassDirective, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.StyleUtils }, { type: i1.MediaMarshaller }, { type: i0.IterableDiffers }, { type: i0.KeyValueDiffers }, { type: i0.Renderer2 }, { type: i2.NgClass, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }]; }, propDecorators: { klass: [{\n                type: Input,\n                args: ['class']\n            }] } });\nconst inputs$2 = [\n    'ngClass', 'ngClass.xs', 'ngClass.sm', 'ngClass.md', 'ngClass.lg', 'ngClass.xl',\n    'ngClass.lt-sm', 'ngClass.lt-md', 'ngClass.lt-lg', 'ngClass.lt-xl',\n    'ngClass.gt-xs', 'ngClass.gt-sm', 'ngClass.gt-md', 'ngClass.gt-lg'\n];\nconst selector$2 = `\n  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],\n  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],\n  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]\n`;\n/**\n * Directive to add responsive support for ngClass.\n * This maintains the core functionality of 'ngClass' and adds responsive API\n * Note: this class is a no-op when rendered on the server\n */\nclass DefaultClassDirective extends ClassDirective {\n    constructor() {\n        super(...arguments);\n        this.inputs = inputs$2;\n    }\n}\nDefaultClassDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: DefaultClassDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nDefaultClassDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: DefaultClassDirective, selector: \"\\n  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],\\n  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],\\n  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]\\n\", inputs: { ngClass: \"ngClass\", \"ngClass.xs\": \"ngClass.xs\", \"ngClass.sm\": \"ngClass.sm\", \"ngClass.md\": \"ngClass.md\", \"ngClass.lg\": \"ngClass.lg\", \"ngClass.xl\": \"ngClass.xl\", \"ngClass.lt-sm\": \"ngClass.lt-sm\", \"ngClass.lt-md\": \"ngClass.lt-md\", \"ngClass.lt-lg\": \"ngClass.lt-lg\", \"ngClass.lt-xl\": \"ngClass.lt-xl\", \"ngClass.gt-xs\": \"ngClass.gt-xs\", \"ngClass.gt-sm\": \"ngClass.gt-sm\", \"ngClass.gt-md\": \"ngClass.gt-md\", \"ngClass.gt-lg\": \"ngClass.gt-lg\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: DefaultClassDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: selector$2, inputs: inputs$2 }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ShowHideStyleBuilder extends StyleBuilder {\n    buildStyles(show, parent) {\n        const shouldShow = show === 'true';\n        return { 'display': shouldShow ? parent.display || (parent.isServer ? 'initial' : '') : 'none' };\n    }\n}\nShowHideStyleBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ShowHideStyleBuilder, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\nShowHideStyleBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ShowHideStyleBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ShowHideStyleBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nclass ShowHideDirective extends BaseDirective2 {\n    constructor(elementRef, styleBuilder, styler, marshal, layoutConfig, platformId, serverModuleLoaded) {\n        super(elementRef, styleBuilder, styler, marshal);\n        this.layoutConfig = layoutConfig;\n        this.platformId = platformId;\n        this.serverModuleLoaded = serverModuleLoaded;\n        this.DIRECTIVE_KEY = 'show-hide';\n        /** Original DOM Element CSS display style */\n        this.display = '';\n        this.hasLayout = false;\n        this.hasFlexChild = false;\n    }\n    // *********************************************\n    // Lifecycle Methods\n    // *********************************************\n    ngAfterViewInit() {\n        this.trackExtraTriggers();\n        const children = Array.from(this.nativeElement.children);\n        for (let i = 0; i < children.length; i++) {\n            if (this.marshal.hasValue(children[i], 'flex')) {\n                this.hasFlexChild = true;\n                break;\n            }\n        }\n        if (DISPLAY_MAP.has(this.nativeElement)) {\n            this.display = DISPLAY_MAP.get(this.nativeElement);\n        }\n        else {\n            this.display = this.getDisplayStyle();\n            DISPLAY_MAP.set(this.nativeElement, this.display);\n        }\n        this.init();\n        // set the default to show unless explicitly overridden\n        const defaultValue = this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY, '');\n        if (defaultValue === undefined || defaultValue === '') {\n            this.setValue(true, '');\n        }\n        else {\n            this.triggerUpdate();\n        }\n    }\n    /**\n     * On changes to any @Input properties...\n     * Default to use the non-responsive Input value ('fxShow')\n     * Then conditionally override with the mq-activated Input's current value\n     */\n    ngOnChanges(changes) {\n        Object.keys(changes).forEach(key => {\n            if (this.inputs.indexOf(key) !== -1) {\n                const inputKey = key.split('.');\n                const bp = inputKey.slice(1).join('.');\n                const inputValue = changes[key].currentValue;\n                let shouldShow = inputValue !== '' ?\n                    inputValue !== 0 ? coerceBooleanProperty(inputValue) : false\n                    : true;\n                if (inputKey[0] === 'fxHide') {\n                    shouldShow = !shouldShow;\n                }\n                this.setValue(shouldShow, bp);\n            }\n        });\n    }\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     *  Watch for these extra triggers to update fxShow, fxHide stylings\n     */\n    trackExtraTriggers() {\n        this.hasLayout = this.marshal.hasValue(this.nativeElement, 'layout');\n        ['layout', 'layout-align'].forEach(key => {\n            this.marshal\n                .trackValue(this.nativeElement, key)\n                .pipe(takeUntil(this.destroySubject))\n                .subscribe(this.triggerUpdate.bind(this));\n        });\n    }\n    /**\n     * Override accessor to the current HTMLElement's `display` style\n     * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'\n     * unless it was already explicitly specified inline or in a CSS stylesheet.\n     */\n    getDisplayStyle() {\n        return (this.hasLayout || (this.hasFlexChild && this.layoutConfig.addFlexToParent)) ?\n            'flex' : this.styler.lookupStyle(this.nativeElement, 'display', true);\n    }\n    /** Validate the visibility value and then update the host's inline display style */\n    updateWithValue(value = true) {\n        if (value === '') {\n            return;\n        }\n        const isServer = isPlatformServer(this.platformId);\n        this.addStyles(value ? 'true' : 'false', { display: this.display, isServer });\n        if (isServer && this.serverModuleLoaded) {\n            this.nativeElement.style.setProperty('display', '');\n        }\n        this.marshal.triggerUpdate(this.parentElement, 'layout-gap');\n    }\n}\nShowHideDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ShowHideDirective, deps: [{ token: i0.ElementRef }, { token: ShowHideStyleBuilder }, { token: i1.StyleUtils }, { token: i1.MediaMarshaller }, { token: LAYOUT_CONFIG }, { token: PLATFORM_ID }, { token: SERVER_TOKEN }], target: i0.ɵɵFactoryTarget.Directive });\nShowHideDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: ShowHideDirective, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ShowHideDirective, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ShowHideStyleBuilder }, { type: i1.StyleUtils }, { type: i1.MediaMarshaller }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LAYOUT_CONFIG]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [SERVER_TOKEN]\n                }] }]; } });\nconst DISPLAY_MAP = new WeakMap();\nconst inputs$1 = [\n    'fxShow', 'fxShow.print',\n    'fxShow.xs', 'fxShow.sm', 'fxShow.md', 'fxShow.lg', 'fxShow.xl',\n    'fxShow.lt-sm', 'fxShow.lt-md', 'fxShow.lt-lg', 'fxShow.lt-xl',\n    'fxShow.gt-xs', 'fxShow.gt-sm', 'fxShow.gt-md', 'fxShow.gt-lg',\n    'fxHide', 'fxHide.print',\n    'fxHide.xs', 'fxHide.sm', 'fxHide.md', 'fxHide.lg', 'fxHide.xl',\n    'fxHide.lt-sm', 'fxHide.lt-md', 'fxHide.lt-lg', 'fxHide.lt-xl',\n    'fxHide.gt-xs', 'fxHide.gt-sm', 'fxHide.gt-md', 'fxHide.gt-lg'\n];\nconst selector$1 = `\n  [fxShow], [fxShow.print],\n  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],\n  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],\n  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],\n  [fxHide], [fxHide.print],\n  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],\n  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],\n  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]\n`;\n/**\n * 'show' Layout API directive\n */\nclass DefaultShowHideDirective extends ShowHideDirective {\n    constructor() {\n        super(...arguments);\n        this.inputs = inputs$1;\n    }\n}\nDefaultShowHideDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: DefaultShowHideDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nDefaultShowHideDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: DefaultShowHideDirective, selector: \"\\n  [fxShow], [fxShow.print],\\n  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],\\n  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],\\n  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],\\n  [fxHide], [fxHide.print],\\n  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],\\n  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],\\n  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]\\n\", inputs: { fxShow: \"fxShow\", \"fxShow.print\": \"fxShow.print\", \"fxShow.xs\": \"fxShow.xs\", \"fxShow.sm\": \"fxShow.sm\", \"fxShow.md\": \"fxShow.md\", \"fxShow.lg\": \"fxShow.lg\", \"fxShow.xl\": \"fxShow.xl\", \"fxShow.lt-sm\": \"fxShow.lt-sm\", \"fxShow.lt-md\": \"fxShow.lt-md\", \"fxShow.lt-lg\": \"fxShow.lt-lg\", \"fxShow.lt-xl\": \"fxShow.lt-xl\", \"fxShow.gt-xs\": \"fxShow.gt-xs\", \"fxShow.gt-sm\": \"fxShow.gt-sm\", \"fxShow.gt-md\": \"fxShow.gt-md\", \"fxShow.gt-lg\": \"fxShow.gt-lg\", fxHide: \"fxHide\", \"fxHide.print\": \"fxHide.print\", \"fxHide.xs\": \"fxHide.xs\", \"fxHide.sm\": \"fxHide.sm\", \"fxHide.md\": \"fxHide.md\", \"fxHide.lg\": \"fxHide.lg\", \"fxHide.xl\": \"fxHide.xl\", \"fxHide.lt-sm\": \"fxHide.lt-sm\", \"fxHide.lt-md\": \"fxHide.lt-md\", \"fxHide.lt-lg\": \"fxHide.lt-lg\", \"fxHide.lt-xl\": \"fxHide.lt-xl\", \"fxHide.gt-xs\": \"fxHide.gt-xs\", \"fxHide.gt-sm\": \"fxHide.gt-sm\", \"fxHide.gt-md\": \"fxHide.gt-md\", \"fxHide.gt-lg\": \"fxHide.gt-lg\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: DefaultShowHideDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: selector$1, inputs: inputs$1 }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** NgStyle allowed inputs */\nclass NgStyleKeyValue {\n    constructor(key, value, noQuotes = true) {\n        this.key = key;\n        this.value = value;\n        this.key = noQuotes ? key.replace(/['\"]/g, '').trim() : key.trim();\n        this.value = noQuotes ? value.replace(/['\"]/g, '').trim() : value.trim();\n        this.value = this.value.replace(/;/, '');\n    }\n}\nfunction getType(target) {\n    let what = typeof target;\n    if (what === 'object') {\n        return (target.constructor === Array) ? 'array' :\n            (target.constructor === Set) ? 'set' : 'object';\n    }\n    return what;\n}\n/**\n * Split string of key:value pairs into Array of k-v pairs\n * e.g.  'key:value; key:value; key:value;' -> ['key:value',...]\n */\nfunction buildRawList(source, delimiter = ';') {\n    return String(source)\n        .trim()\n        .split(delimiter)\n        .map((val) => val.trim())\n        .filter(val => val !== '');\n}\n/** Convert array of key:value strings to a iterable map object */\nfunction buildMapFromList$1(styles, sanitize) {\n    const sanitizeValue = (it) => {\n        if (sanitize) {\n            it.value = sanitize(it.value);\n        }\n        return it;\n    };\n    return styles\n        .map(stringToKeyValue)\n        .filter(entry => !!entry)\n        .map(sanitizeValue)\n        .reduce(keyValuesToMap, {});\n}\n/** Convert Set<string> or raw Object to an iterable NgStyleMap */\nfunction buildMapFromSet(source, sanitize) {\n    let list = [];\n    if (getType(source) === 'set') {\n        source.forEach(entry => list.push(entry));\n    }\n    else {\n        Object.keys(source).forEach((key) => {\n            list.push(`${key}:${source[key]}`);\n        });\n    }\n    return buildMapFromList$1(list, sanitize);\n}\n/** Convert 'key:value' -> [key, value] */\nfunction stringToKeyValue(it) {\n    const [key, ...vals] = it.split(':');\n    return new NgStyleKeyValue(key, vals.join(':'));\n}\n/** Convert [ [key,value] ] -> { key : value } */\nfunction keyValuesToMap(map, entry) {\n    if (!!entry.key) {\n        map[entry.key] = entry.value;\n    }\n    return map;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass StyleDirective extends BaseDirective2 {\n    constructor(elementRef, styler, marshal, sanitizer, differs, renderer2, ngStyleInstance, serverLoaded, platformId) {\n        super(elementRef, null, styler, marshal);\n        this.sanitizer = sanitizer;\n        this.ngStyleInstance = ngStyleInstance;\n        this.DIRECTIVE_KEY = 'ngStyle';\n        if (!this.ngStyleInstance) {\n            // Create an instance NgStyle Directive instance only if `ngStyle=\"\"` has NOT been\n            // defined on the same host element; since the responsive variations may be defined...\n            this.ngStyleInstance = new NgStyle(elementRef, differs, renderer2);\n        }\n        this.init();\n        const styles = this.nativeElement.getAttribute('style') ?? '';\n        this.fallbackStyles = this.buildStyleMap(styles);\n        this.isServer = serverLoaded && isPlatformServer(platformId);\n    }\n    /** Add generated styles */\n    updateWithValue(value) {\n        const styles = this.buildStyleMap(value);\n        this.ngStyleInstance.ngStyle = { ...this.fallbackStyles, ...styles };\n        if (this.isServer) {\n            this.applyStyleToElement(styles);\n        }\n        this.ngStyleInstance.ngDoCheck();\n    }\n    /** Remove generated styles */\n    clearStyles() {\n        this.ngStyleInstance.ngStyle = this.fallbackStyles;\n        this.ngStyleInstance.ngDoCheck();\n    }\n    /**\n     * Convert raw strings to ngStyleMap; which is required by ngStyle\n     * NOTE: Raw string key-value pairs MUST be delimited by `;`\n     *       Comma-delimiters are not supported due to complexities of\n     *       possible style values such as `rgba(x,x,x,x)` and others\n     */\n    buildStyleMap(styles) {\n        // Always safe-guard (aka sanitize) style property values\n        const sanitizer = (val) => this.sanitizer.sanitize(SecurityContext.STYLE, val) ?? '';\n        if (styles) {\n            switch (getType(styles)) {\n                case 'string': return buildMapFromList(buildRawList(styles), sanitizer);\n                case 'array': return buildMapFromList(styles, sanitizer);\n                case 'set': return buildMapFromSet(styles, sanitizer);\n                default: return buildMapFromSet(styles, sanitizer);\n            }\n        }\n        return {};\n    }\n    // ******************************************************************\n    // Lifecycle Hooks\n    // ******************************************************************\n    /** For ChangeDetectionStrategy.onPush and ngOnChanges() updates */\n    ngDoCheck() {\n        this.ngStyleInstance.ngDoCheck();\n    }\n}\nStyleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StyleDirective, deps: [{ token: i0.ElementRef }, { token: i1.StyleUtils }, { token: i1.MediaMarshaller }, { token: i2$1.DomSanitizer }, { token: i0.KeyValueDiffers }, { token: i0.Renderer2 }, { token: i2.NgStyle, optional: true, self: true }, { token: SERVER_TOKEN }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });\nStyleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: StyleDirective, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: StyleDirective, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.StyleUtils }, { type: i1.MediaMarshaller }, { type: i2$1.DomSanitizer }, { type: i0.KeyValueDiffers }, { type: i0.Renderer2 }, { type: i2.NgStyle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [SERVER_TOKEN]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; } });\nconst inputs = [\n    'ngStyle',\n    'ngStyle.xs', 'ngStyle.sm', 'ngStyle.md', 'ngStyle.lg', 'ngStyle.xl',\n    'ngStyle.lt-sm', 'ngStyle.lt-md', 'ngStyle.lt-lg', 'ngStyle.lt-xl',\n    'ngStyle.gt-xs', 'ngStyle.gt-sm', 'ngStyle.gt-md', 'ngStyle.gt-lg'\n];\nconst selector = `\n  [ngStyle],\n  [ngStyle.xs], [ngStyle.sm], [ngStyle.md], [ngStyle.lg], [ngStyle.xl],\n  [ngStyle.lt-sm], [ngStyle.lt-md], [ngStyle.lt-lg], [ngStyle.lt-xl],\n  [ngStyle.gt-xs], [ngStyle.gt-sm], [ngStyle.gt-md], [ngStyle.gt-lg]\n`;\n/**\n * Directive to add responsive support for ngStyle.\n *\n */\nclass DefaultStyleDirective extends StyleDirective {\n    constructor() {\n        super(...arguments);\n        this.inputs = inputs;\n    }\n}\nDefaultStyleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: DefaultStyleDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nDefaultStyleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: DefaultStyleDirective, selector: \"\\n  [ngStyle],\\n  [ngStyle.xs], [ngStyle.sm], [ngStyle.md], [ngStyle.lg], [ngStyle.xl],\\n  [ngStyle.lt-sm], [ngStyle.lt-md], [ngStyle.lt-lg], [ngStyle.lt-xl],\\n  [ngStyle.gt-xs], [ngStyle.gt-sm], [ngStyle.gt-md], [ngStyle.gt-lg]\\n\", inputs: { ngStyle: \"ngStyle\", \"ngStyle.xs\": \"ngStyle.xs\", \"ngStyle.sm\": \"ngStyle.sm\", \"ngStyle.md\": \"ngStyle.md\", \"ngStyle.lg\": \"ngStyle.lg\", \"ngStyle.xl\": \"ngStyle.xl\", \"ngStyle.lt-sm\": \"ngStyle.lt-sm\", \"ngStyle.lt-md\": \"ngStyle.lt-md\", \"ngStyle.lt-lg\": \"ngStyle.lt-lg\", \"ngStyle.lt-xl\": \"ngStyle.lt-xl\", \"ngStyle.gt-xs\": \"ngStyle.gt-xs\", \"ngStyle.gt-sm\": \"ngStyle.gt-sm\", \"ngStyle.gt-md\": \"ngStyle.gt-md\", \"ngStyle.gt-lg\": \"ngStyle.gt-lg\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: DefaultStyleDirective, decorators: [{\n            type: Directive,\n            args: [{ selector, inputs }]\n        }] });\n/** Build a styles map from a list of styles, while sanitizing bad values first */\nfunction buildMapFromList(styles, sanitize) {\n    const sanitizeValue = (it) => {\n        if (sanitize) {\n            it.value = sanitize(it.value);\n        }\n        return it;\n    };\n    return styles\n        .map(stringToKeyValue)\n        .filter(entry => !!entry)\n        .map(sanitizeValue)\n        .reduce(keyValuesToMap, {});\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ALL_DIRECTIVES = [\n    DefaultShowHideDirective,\n    DefaultClassDirective,\n    DefaultStyleDirective,\n    DefaultImgSrcDirective,\n];\n/**\n * *****************************************************************\n * Define module for the Extended API\n * *****************************************************************\n */\nclass ExtendedModule {\n}\nExtendedModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ExtendedModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nExtendedModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: ExtendedModule, declarations: [DefaultShowHideDirective,\n        DefaultClassDirective,\n        DefaultStyleDirective,\n        DefaultImgSrcDirective], imports: [CoreModule], exports: [DefaultShowHideDirective,\n        DefaultClassDirective,\n        DefaultStyleDirective,\n        DefaultImgSrcDirective] });\nExtendedModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ExtendedModule, imports: [CoreModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: ExtendedModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CoreModule],\n                    declarations: [...ALL_DIRECTIVES],\n                    exports: [...ALL_DIRECTIVES]\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ClassDirective, DefaultClassDirective, DefaultImgSrcDirective, DefaultShowHideDirective, DefaultStyleDirective, ExtendedModule, ImgSrcDirective, ImgSrcStyleBuilder, ShowHideDirective, ShowHideStyleBuilder, StyleDirective };\n"],"x_google_ignoreList":[21,22,23]}