{"version":3,"sources":["../edit/eav-material-controls/adam/sanitize.service.ts","./src/app/content-type-fields/services/content-types-fields.service.ts","./src/app/code-editor/ace-editor/ace-options.ts","./src/app/code-editor/ace-editor/ace-editor.component.ts","./src/app/shared/services/snack-bar-stack.service.ts","./src/app/code-editor/services/source.service.ts","./src/app/code-editor/services/snippets.service.ts","./src/app/code-editor/code-templates/order-items.pipe.ts","./src/app/code-editor/code-templates/depth-padding.pipe.ts","./src/app/code-editor/code-templates/code-templates.component.html","./src/app/code-editor/code-templates/code-templates.component.ts","./src/app/code-editor/code-templates/code-templates.helpers.ts","./src/app/code-editor/code-snippets/code-snippets.helpers.ts","./src/app/code-editor/code-snippets/object-to-array.pipe.ts","./src/app/code-editor/code-snippets/code-snippets.component.html","./src/app/code-editor/code-snippets/code-snippets.component.ts","./src/app/code-editor/code-editor.component.html","./src/app/code-editor/code-editor.component.ts","./src/app/code-editor/code-editor-routing.module.ts","./src/app/code-editor/code-editor.module.ts"],"names":["cleanBadPath","sanitized","replace","removeFromStart","charToRemove","substring","removeFromEnd","length","sanitizePath","this","sanitizeName","SanitizeService","webApiFieldsAll","webApiFieldsRoot","http","context","dnnContext","apiUrl","name","$2sxc","typeListRetrieve","get","params","appid","appId","toString","getInputTypesList","pipe","inputConfigs","map","config","dataType","Type","indexOf","inputType","label","Label","description","Description","getFields","contentType","staticName","StaticName","fields","fld","Metadata","md","allMd","All","typeMd","inputMd","InputType","merged","reOrder","idArray","post","contentTypeId","Id","order","JSON","stringify","setTitle","item","attributeId","rename","newName","delete","IsTitle","Error","add","newField","AppId","ContentTypeId","Index","SortOrder","updateInputType","id","field","ContentTypesFieldsService","aceOptions","mode","wrap","useSoftTabs","theme","fontSize","fontFamily","showGutter","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","zone","value","propagateChange","propagateTouched","ngOnInit","test","src","aceLoaded","bind","ngOnChanges","changes","filename","currentValue","snippets","updateValues","editor","toggleResize","previousValue","runOutsideAngular","setTimeout","resize","insertSnippet","snippet","ace","require","snippetManager","focus","writeValue","p","getCursorPosition","setValue","moveCursorToPosition","registerOnChange","fn","registerOnTouched","ngOnDestroy","destroy","container","remove","set","edit","editorRef","nativeElement","$blockScrolling","Infinity","session","on","onEditorValueChange","onEditorBlurred","run","getValue","getModeForPath","setMode","register","AceEditorComponent","provide","useExisting","multi","snackBar","defaultDuration","processingMessage","messageQueue","message","action","duration","triggered$","Subject","push","showSnackBar","asObservable","nextMsg","shift","snackBarRef","open","afterDismissed","subscribe","complete","onAction","next","SnackBarStackService","key","templateIdOrPath","view","toLowerCase","Extension","save","getTemplates","global","withSubfolders","createTemplate","path","templateId","SourceService","translate","keyPrefixes","keyPrefixIndex","getSnippets","toPromise","res","relevant","filterAwayNotNeededSnippetsList","standAndInputSnips","extractInputTypeSnippets","sets","initSnippetsWithConfig","standardArray","inputTypeSnippets","list","newList","itm","setHasPrefix","substr","inputTypeArray","catalogInputTypeSnippets","inputTypeList","undefined","subset","templateConfiguration","makeTree","Content","Object","assign","Fields","PresentationFields","TypeContent","loadContentType","TypeContentPresentation","HasList","List","TypeList","TypeListPresentation","HasApp","App","Resources","Settings","tree","o","reformatted","snip","content","help","links","linksList","getHelpKey","result","instant","addition","linksString","llist","split","pair","trim","url","target","type","prefix","then","fieldname","valuePlaceholder","Notes","snipDefaults","cloneDeep","attachSnippets","std","i","obj","val","filter","Empty","genericSnippet","fieldType","typeSnips","concat","more","fieldSnips","g","localizeGenericSnippet","collapse","objName","fieldName","SnippetsService","transform","items","sort","item1","item2","isFolder","SortItemsPipe","sanitizer","depth","bypassSecurityTrustStyle","DepthPaddingPipe","dialogService","toggledItems","templates","paths","last","pathFromRoot","existing","find","children","calculateTree","showFileInTree","FileName","openTemplate","openCodeFile","toggleItem","array","index","splice","addFile","folder","emit","file","includes","CodeTemplatesComponent","keys","ObjectToArrayPipe","toggledSections","toggledFolders","toggledInfos","toggledMores","addSnippet","toggleSection","toggleFolder","toggleInfo","info","toggleMore","CodeSnippetsComponent","routes","component","route","snackBarStack","sourceService","snippetsService","titleService","sanitizeService","explorer","activeExplorer","view$","BehaviorSubject","templates$","explorerSnipps$","editorSnipps$","templateVars$","combineLatest","explorerSnipps","editorSnipps","subscription","Subscription","init","calculateViewKey","attachListeners","viewKey","forkJoin","savedCode","Code","showCodeAndEditionWarnings","unsubscribe","toggleExplorer","question","suggestion","startsWith","prompt","files","changeInsertSnipp","aceEditorRef","codeChanged","code","codeToSave","error","itemsRaw","sessionStorage","getItem","parse","EntityId","Path","pathAndName","pathSeparator","lastIndexOf","pathWithSlash","fullName","nameCode","codeFile","otherEditions","endsWith","window","fromEvent","event","preventDefault","returnValue","keyCode","navigator","platform","match","metaKey","ctrlKey","CodeEditorComponent","CodeEditorRoutingModule","forChild","translateLoaderFactory","sxcVersion","CodeEditorModule","loader","useFactory","deps","defaultLanguage","isolate"],"mappings":"gJAEA,aAGE,aAsBQ,KAAAA,aAAe,SAACC,GAEtB,OAAKA,EAQEA,EACJC,QANe,mBADD,KAQdA,QANe,wBAFD,KASdA,QANgB,QAHF,KAUdA,QANuB,gDAJT,KAWdA,QANuB,UALT,KAFQD,G,OAtBnB,YAAAE,gBAAR,SAAwBF,EAAmBG,GAEzC,IAAKH,EAAa,OAAOA,EAEzB,KAAOA,EAAUI,UAAU,EAAG,KAAOD,GACnCH,EAAYA,EAAUI,UAAU,GAElC,OAAOJ,GAGD,YAAAK,cAAR,SAAsBL,EAAmBG,GAEvC,IAAKH,EAAa,OAAOA,EAEzB,KAAOA,EAAUI,UAAUJ,EAAUM,OAAS,EAAGN,EAAUM,UAAYH,GACrEH,EAAYA,EAAUI,UAAU,EAAGJ,EAAUM,OAAS,GAExD,OAAON,GAsBF,YAAAO,aAAP,SAAoBP,GAElB,OAAKA,GAGLA,EAAYQ,KAAKN,gBAAgBF,EAAW,KAG5CA,EAAYQ,KAAKH,cAAcL,EAAW,KAG1CA,EAAYQ,KAAKN,gBAAgBF,EAAW,MAG5CA,EAAYQ,KAAKH,cAAcL,EAAW,MAG1CA,EAAYQ,KAAKT,aAAaC,IAfLA,GAqBpB,YAAAS,aAAP,SAAoBT,GAElB,OAAKA,EAMEQ,KAAKD,aAAaP,GACtBC,QAFe,MADE,KAJKD,G,yBApEhBU,EAAe,Q,sCAAfA,M,EADb,I,gMCSaC,EAAkBC,kBAE/B,aAEE,WAAoBC,EAA0BC,EAA0BC,GAApD,KAAAF,OAA0B,KAAAC,UAA0B,KAAAC,a,OAEhE,YAAAC,OAAR,SAAeC,GACb,OAAOT,KAAKO,WAAWG,MAAML,KAAKG,OAAOC,IAG3C,YAAAE,iBAAA,WACE,OAAOX,KAAKK,KAAKO,IAAIZ,KAAKQ,OAAOJ,yBAAiC,CAChES,OAAQ,CAAEC,MAAOd,KAAKM,QAAQS,MAAMC,eAIxC,YAAAC,kBAAA,WACE,OAAOjB,KAAKK,KACTO,IAAIZ,KAAKQ,OAAOJ,0BAAkC,CAAES,OAAQ,CAAEC,MAAOd,KAAKM,QAAQS,MAAMC,cACxFE,KACC,aAAI,SAACC,GAUH,OATyBA,EAAaC,KAAI,SAAAC,GAOxC,MANqC,CACnCC,SAAUD,EAAOE,KAAK3B,UAAU,EAAGyB,EAAOE,KAAKC,QAAQ,MACvDC,UAAWJ,EAAOE,KAClBG,MAAOL,EAAOM,MACdC,YAAaP,EAAOQ,qBAShC,YAAAC,UAAA,SAAUC,GACR,OAAO/B,KAAKK,KACTO,IAAIZ,KAAKQ,OAAOL,GAAkB,CACjCU,OAAQ,CAAEC,MAAOd,KAAKM,QAAQS,MAAMC,WAAYgB,WAAYD,EAAYE,cAEzEf,KACC,aAAI,SAACgB,G,QACH,GAAIA,E,IACF,IAAkB,kBAAAA,GAAM,8BAAE,CAArB,IAAMC,EAAG,QACZ,GAAKA,EAAIC,SAAT,CACA,IAAMC,EAAKF,EAAIC,SACTE,EAAQD,EAAGE,IACXC,EAASH,EAAGF,EAAIZ,MAChBkB,EAAUJ,EAAGF,EAAIO,WACvBL,EAAGM,OAAS,YAAH,2BAAQL,GAAUE,GAAWC,K,iGAG1C,OAAOP,OAKf,YAAAU,QAAA,SAAQC,EAAmBd,GACzB,OAAO/B,KAAKK,KAAKyC,KAAK9C,KAAKQ,OAAOJ,oBAA4B,KAAM,CAClES,OAAQ,CACNC,MAAOd,KAAKM,QAAQS,MAAMC,WAC1B+B,cAAehB,EAAYiB,GAAGhC,WAC9BiC,MAAOC,KAAKC,UAAUN,OAK5B,YAAAO,SAAA,SAASC,EAAatB,GACpB,OAAO/B,KAAKK,KAAKyC,KAAK9C,KAAKQ,OAAO,IAAiB,YAAa,KAAM,CACpEK,OAAQ,CACNC,MAAOd,KAAKM,QAAQS,MAAMC,WAC1B+B,cAAehB,EAAYiB,GAAGhC,WAC9BsC,YAAaD,EAAKL,GAAGhC,eAK3B,YAAAuC,OAAA,SAAOF,EAAatB,EAA0ByB,GAC5C,OAAOxD,KAAKK,KAAKyC,KAAK9C,KAAKQ,OAAOJ,sBAA8B,KAAM,CACpES,OAAQ,CACNC,MAAOd,KAAKM,QAAQS,MAAMC,WAC1B+B,cAAehB,EAAYiB,GAAGhC,WAC9BsC,YAAaD,EAAKL,GAAGhC,WACrBwC,QAAO,MAKb,YAAAC,OAAA,SAAOJ,EAAatB,GAClB,GAAIsB,EAAKK,QACP,MAAM,IAAIC,MAAM,sBAGlB,OAAO3D,KAAKK,KAAKoD,OAAOzD,KAAKQ,OAAOJ,sBAA8B,CAChES,OAAQ,CACNC,MAAOd,KAAKM,QAAQS,MAAMC,WAC1B+B,cAAehB,EAAYiB,GAAGhC,WAC9BsC,YAAaD,EAAKL,GAAGhC,eAK3B,YAAA4C,IAAA,SAAIC,EAA0Bd,GAC5B,OAAO/C,KAAKK,KAAKyC,KAAK9C,KAAKQ,OAAOJ,mBAA2B,KAAM,CACjES,OAAQ,CACNiD,MAAO9D,KAAKM,QAAQS,MAAMC,WAC1B+C,cAAehB,EAAc/B,WAC7BgC,GAAIa,EAASb,GAAGhC,WAChBO,KAAMsC,EAAStC,KACfmB,UAAWmB,EAASnB,UACpBT,WAAY4B,EAAS5B,WACrByB,QAASG,EAASH,QAAQ1C,WAC1BgD,MAAOH,EAASI,UAAUjD,eAKhC,YAAAkD,gBAAA,SAAgBC,EAAYnC,EAAoBP,GAC9C,OAAOzB,KAAKK,KAAKyC,KAAK9C,KAAKQ,OAAOJ,yBAAiC,KAAM,CACvES,OAAQ,CAAEE,MAAOf,KAAKM,QAAQS,MAAMC,WAAYsC,YAAaa,EAAGnD,WAAYoD,MAAOpC,EAAYP,UAAS,M,sCApHjG4C,GAAyB,gC,yBAAzBA,EAAyB,QAAzBA,EAAyB,Y,EADtC,I,6XCXaC,EAA4D,CACvEC,KAAM,iBACNC,MAAM,EACNC,aAAa,EACbC,MAAO,sBACPC,SAAU,GACVC,WAAY,mCACZC,YAAY,EACZC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,G,aCHlB,aAwBE,WAAoBC,GAAA,KAAAA,OANZ,KAAAC,MAAQ,GAGhB,KAAAC,gBAAoC,aACpC,KAAAC,iBAAqC,a,OAIrC,YAAAC,SAAA,WACE,YACE,CACE,CAAEC,KAAM,MAAOC,IAAK,gEACpB,CAAED,KAAM,KAAMC,IAAK,yEACnB,CAAED,KAAM,KAAMC,IAAK,gFAErBvF,KAAKwF,UAAUC,KAAKzF,QAIxB,YAAA0F,YAAA,SAAYC,GAAZ,I,QAAA,OACQC,EAA2B,QAAnB,EAAGD,EAAQC,gBAAQ,eAAEC,aAC7BC,EAA2B,QAAnB,EAAGH,EAAQG,gBAAQ,eAAED,aACnC7F,KAAK+F,aAAaH,EAAUE,GAEvB9F,KAAKgG,SACyB,QAApB,EAAAL,EAAQM,oBAAY,eAAEJ,iBAAqC,QAAzB,EAAKF,EAAQM,oBAAY,eAAEC,gBAE1ElG,KAAKiF,KAAKkB,mBAAkB,WAE1BC,YAAW,WAAQ,EAAKJ,OAAOK,WAAa,QAKlD,YAAAC,cAAA,SAAcC,GAAd,WACEvG,KAAKiF,KAAKkB,mBAAkB,WACHK,IAAIC,QAAQ,gBAAgBC,eACpCJ,cAAc,EAAKN,OAAQO,GAC1C,EAAKP,OAAOW,YAIhB,YAAAC,WAAA,SAAW1B,GAAX,WACElF,KAAKkF,MAAQA,GAAS,GACjBlF,KAAKgG,QACVhG,KAAKiF,KAAKkB,mBAAkB,WAC1B,IAAMU,EAAI,EAAKb,OAAOc,oBACtB,EAAKd,OAAOe,SAAS,EAAK7B,OAAQ,GAClC,EAAKc,OAAOgB,qBAAqBH,OAIrC,YAAAI,iBAAA,SAAiBC,GACflH,KAAKmF,gBAAkB+B,GAGzB,YAAAC,kBAAA,SAAkBD,GAChBlH,KAAKoF,iBAAmB8B,GAG1B,YAAAE,YAAA,sBACEpH,KAAKiF,KAAKkB,mBAAkB,WAC1B,EAAKH,OAAOqB,UACZ,EAAKrB,OAAOsB,UAAUC,SACtB,EAAKvB,OAAS,SAIV,YAAAR,UAAR,sBACExF,KAAKiF,KAAKkB,mBAAkB,WAC1BK,IAAInF,OAAOmG,IAAI,WAAY,qDAC3B,EAAKxB,OAASQ,IAAIiB,KAAK,EAAKC,UAAUC,cAAerD,GACpD,EAAK0B,OAAe4B,gBAAkBC,IACvC,EAAK7B,OAAO8B,QAAQf,SAAS,EAAK7B,OAClC,EAAKa,aAAa,EAAKH,SAAU,EAAKE,UACtC,EAAKE,OAAO+B,GAAG,SAAU,EAAKC,oBAAoBvC,KAAK,IACvD,EAAKO,OAAO+B,GAAG,OAAQ,EAAKE,gBAAgBxC,KAAK,IACjD,EAAKO,OAAOW,YAIR,YAAAqB,oBAAR,sBACEhI,KAAKiF,KAAKiD,KAAI,WACZ,EAAK/C,gBAAgB,EAAKa,OAAOmC,gBAI7B,YAAAF,gBAAR,sBACEjI,KAAKiF,KAAKiD,KAAI,WACZ,EAAK9C,iBAAiB,EAAKY,OAAOmC,gBAI9B,YAAApC,aAAR,SAAqBH,EAAkBE,GAAvC,WACO9F,KAAKgG,QACVhG,KAAKiF,KAAKkB,mBAAkB,WAC1B,GAAIP,EAAU,CACZ,IACMrB,EADWiC,IAAIC,QAAQ,oBACP2B,eAAexC,GAAUrB,KAC/C,EAAKyB,OAAO8B,QAAQO,QAAQ9D,GAE1BuB,GACqBU,IAAIC,QAAQ,gBAAgBC,eACpC4B,SAAS,EAAKxC,c,sCA9GxByC,GAAkB,Y,uBAAlBA,EAAkB,uD,MAAA,K,mJAPlB,CAAC,CACVC,QAAS,IACTC,YAAa,aAAW,WAAM,OAAAF,KAC9BG,OAAO,KACP,2GANS,mB,8FAFb,G,YCJA,aAME,WAAoBC,GAAA,KAAAA,WAJZ,KAAAC,gBAAkB,IAClB,KAAAC,mBAAoB,EACpB,KAAAC,aAA+B,G,OASvC,YAAAlF,IAAA,SAAImF,EAAiBC,EAAiB3H,QAAA,IAAAA,MAAA,CAAmC4H,SAAUjJ,KAAK4I,kBACtF,IAAMM,EAAa,IAAIC,EAAA,EAKvB,OAJAnJ,KAAK8I,aAAaM,KAAK,CAAEL,QAAO,EAAEC,OAAM,EAAE3H,OAAM,EAAE6H,WAAU,IACvDlJ,KAAK6I,mBACR7I,KAAKqJ,eAEAH,EAAWI,gBAGZ,YAAAD,aAAR,sBACQE,EAAUvJ,KAAK8I,aAAaU,QAElC,GAAe,MAAXD,EAAJ,CAKAvJ,KAAK6I,mBAAoB,EAEzB,IAAMY,EAAczJ,KAAK2I,SAASe,KAAKH,EAAQR,QAASQ,EAAQP,OAAQO,EAAQlI,QAChFoI,EAAYE,iBAAiBC,WAAU,WACrCL,EAAQL,WAAWW,WACnB,EAAKR,kBAEPI,EAAYK,WAAWF,WAAU,WAC/BL,EAAQL,WAAWa,eAZnB/J,KAAK6I,mBAAoB,GAiB7B,YAAAzB,YAAA,W,YACE,IAAsB,kBAAApH,KAAK8I,cAAY,8BAArB,QACRI,WAAWW,W,iGAErB7J,KAAK8I,aAAe,M,sCA9CXkB,GAAoB,Y,yBAApBA,EAAoB,QAApBA,EAAoB,qBADP,S,EAA1B,G,wBCIA,aAEE,WAAoB3J,EAA0BC,EAA0BC,GAApD,KAAAF,OAA0B,KAAAC,UAA0B,KAAAC,a,OAGxE,YAAAK,IAAA,SAAIqJ,GACF,OAAOjK,KAAKK,KAAKO,IAAIZ,KAAKO,WAAWG,MAAML,KAAKG,OAAO,KAAgB,CACrEK,OAAQ,YAAF,CAAIE,MAAOf,KAAKM,QAAQS,MAAMC,YAAehB,KAAKkK,iBAAiBD,MACxE/I,KACD,OAAAE,EAAA,IAAI,SAAC+I,GACH,GAAgC,SAA5BA,EAAK5I,KAAK6I,cACZ,OAAQD,EAAKE,UAAUD,eACrB,IAAK,MACL,IAAK,UACHD,EAAK5I,KAAO,QACZ,MACF,IAAK,QACL,IAAK,OACL,IAAK,MACH4I,EAAK5I,KAAO,QAIlB,OAAO4I,OAMb,YAAAG,KAAA,SAAKL,EAAsBE,GACzB,OAAOnK,KAAKK,KAAKyC,KAAK9C,KAAKO,WAAWG,MAAML,KAAKG,OAAO,KAAgB2J,EAAM,CAC5EtJ,OAAQ,YAAF,CAAIE,MAAOf,KAAKM,QAAQS,MAAMC,YAAehB,KAAKkK,iBAAiBD,OAI7E,YAAAM,aAAA,WACE,OAAOvK,KAAKK,KAAKO,IAAIZ,KAAKO,WAAWG,MAAML,KAAKG,OAAO,KAAoB,CACzEK,OAAQ,CAAEE,MAAOf,KAAKM,QAAQS,MAAMC,WAAYwJ,OAAQ,QAASC,eAAgB,WAIrF,YAAAC,eAAA,SAAejK,GACb,OAAOT,KAAKK,KAAKyC,KAAK9C,KAAKO,WAAWG,MAAML,KAAKG,OAAO,KAAsB,GAAI,CAChFK,OAAQ,CAAEE,MAAOf,KAAKM,QAAQS,MAAMC,WAAYwJ,OAAQ,QAASG,KAAMlK,MAInE,YAAAyJ,iBAAR,SAAyBD,GACvB,MAAmB,iBAARA,EACF,CAAEW,WAAYX,EAAIjJ,YAElB,CAAE2J,KAAMV,I,sCAlDRY,GAAa,gC,yBAAbA,EAAa,QAAbA,EAAa,Y,EAD1B,G,oCCEA,aAKE,WACUxK,EACAE,EACAuK,GAFA,KAAAzK,OACA,KAAAE,aACA,KAAAuK,YANF,KAAAC,YAAc,CAAC,IAAK,KACpB,KAAAC,eAAiB,SAACb,GAAqB,OAACA,EAAK5I,KAAKC,QAAQ,UAAY,EAAK,EAAI,G,OAQjF,YAAAyJ,YAAN,SAAkBd,G,wHACC,SAAMnK,KAAKK,KAAKO,IAAI,iCAAiCsK,a,OAKtE,OALMC,EAAW,SAEXC,EAAWpL,KAAKqL,gCADMF,EAAIrF,SACgCqE,GAC1DmB,EAAqBtL,KAAKuL,yBAAyBH,GAElD,CAAP,EAAO,CAAEI,KADIxL,KAAKyL,uBAAuBH,EAAmBI,cAAevB,EAAMmB,EAAmBK,mBACrFC,KAAMN,EAAmBI,wBAIlC,YAAAL,gCAAR,SAAwCO,EAAiBzB,G,QACjD0B,EAAU,G,IAChB,IAAkB,kBAAAD,GAAI,8BAAE,CAAnB,IAAME,EAAG,QACNC,EAAe/L,KAAK+K,YAAYvJ,QAAQsK,EAAItE,IAAI,KAChC,IAAlBuE,GAAwBA,IAAiB/L,KAAKgL,eAAeb,KAE3D4B,IAAiB/L,KAAKgL,eAAeb,KACvC2B,EAAItE,IAAMsE,EAAItE,IAAIwE,OAAO,IAE3BH,EAAQzC,KAAK0C,K,iGAGjB,OAAOD,GAGD,YAAAN,yBAAR,SAAiCK,G,QACzBF,EAA2B,GAC3BO,EAA4B,G,IAElC,IAAkB,kBAAAL,GAAI,8BAAE,CAAnB,IAAME,EAAG,QACyB,OAAfA,EAAItE,IAAI,IAI5BsE,EAAItE,IAAMsE,EAAItE,IAAIwE,OAAO,GACzBC,EAAe7C,KAAK0C,IAHpBJ,EAActC,KAAK0C,I,iGAOvB,MAAO,CACLJ,cAAa,EACbC,kBAHwB3L,KAAKkM,yBAAyBD,KAOlD,YAAAC,yBAAR,SAAiCN,G,QACzBO,EAAqB,G,IAC3B,IAAkB,kBAAAP,GAAI,8BAAE,CAAnB,IAAME,EAAG,aACsBM,IAA9BD,EAAcL,EAAIO,UACpBF,EAAcL,EAAIO,QAAU,IAE9BF,EAAcL,EAAIO,QAAQjD,KAAK0C,I,iGAEjC,OAAOK,GAGD,YAAAV,uBAAR,SAA+BD,EAAWc,EAAmCX,GAsC3E,OArCAH,EAAOxL,KAAKuM,SAASf,IAGhBgB,QAAUC,OAAOC,OAAO,GAAIlB,EAAKgB,QAAS,CAAEG,OAAQ,GAAIC,mBAAoB,KAC7EN,EAAsBO,aACxB7M,KAAK8M,gBAAgBtB,EAAKgB,QAAQG,OAAQL,EAAsBO,YAAa,UAAWP,EAAuBX,GAE7GW,EAAsBS,yBACxB/M,KAAK8M,gBACHtB,EAAKgB,QAAQI,mBAAoBN,EAAsBS,wBACvD,uBAAwBT,EAAuBX,GAI/CW,EAAsBU,SACxBxB,EAAKyB,KAAOR,OAAOC,OAAO,GAAIlB,EAAKyB,KAAM,CAAEN,OAAQ,GAAIC,mBAAoB,KACvEN,EAAsBY,UACxBlN,KAAK8M,gBAAgBtB,EAAKyB,KAAKN,OAAQL,EAAsBY,SAAU,SAAUZ,EAAuBX,GAEtGW,EAAsBa,sBACxBnN,KAAK8M,gBACHtB,EAAKyB,KAAKL,mBAAoBN,EAAsBa,qBACpD,sBAAuBb,EAAuBX,WAI3CH,EAAKyB,KAIVX,EAAsBc,SACxB5B,EAAK6B,IAAIC,UAAY,GACrB9B,EAAK6B,IAAIE,SAAW,GACpBvN,KAAK8M,gBAAgBtB,EAAK6B,IAAIC,UAAW,gBAAiB,gBAAiBhB,EAAuBX,GAClG3L,KAAK8M,gBAAgBtB,EAAK6B,IAAIE,SAAU,eAAgB,eAAgBjB,EAAuBX,IAG1FH,GAID,YAAAe,SAAR,SAAiBX,G,QACT4B,EAAY,G,IAClB,IAAgB,kBAAA5B,GAAI,8BAAE,CAAjB,IAAM6B,EAAC,aACUrB,IAAhBoB,EAAKC,EAAEjG,OACTgG,EAAKC,EAAEjG,KAAO,SAEc4E,IAA1BoB,EAAKC,EAAEjG,KAAKiG,EAAEpB,UAChBmB,EAAKC,EAAEjG,KAAKiG,EAAEpB,QAAU,IAE1B,IAAMqB,EAAc,CAClBzD,IAAKwD,EAAEhN,KACPiB,MAAO1B,KAAK0B,MAAM+L,EAAEjG,IAAKiG,EAAEpB,OAAQoB,EAAEhN,MACrCkN,KAAMF,EAAEG,QACRC,KAAMJ,EAAEI,MAAQ7N,KAAK6N,KAAKJ,EAAEjG,IAAKiG,EAAEpB,OAAQoB,EAAEhN,MAC7CqN,MAAO9N,KAAK+N,UAAUN,EAAEK,QAG1BN,EAAKC,EAAEjG,KAAKiG,EAAEpB,QAAQjD,KAAKsE,I,iGAE7B,OAAOF,GAGD,YAAA9L,MAAR,SAAc8F,EAAU6E,EAAasB,GACnC,IAAM1D,EAAMjK,KAAKgO,WAAWxG,EAAK6E,EAAQsB,EAAM,QAE3CM,EAASjO,KAAK8K,UAAUoD,QAAQjE,GAIpC,OAHIgE,IAAWhE,IACbgE,EAASN,GAEJM,GAGD,YAAAD,WAAR,SAAmBxG,EAAU6E,EAAasB,EAAWQ,GACnD,MAAO,wBAA+B3G,EAAM,IAAM6E,EAAS,IAAMsB,EAAOQ,GAGlE,YAAAN,KAAR,SAAarG,EAAU6E,EAAasB,GAClC,IAAM1D,EAAMjK,KAAKgO,WAAWxG,EAAK6E,EAAQsB,EAAM,SAE3CM,EAASjO,KAAK8K,UAAUoD,QAAQjE,GAIpC,OAHIgE,IAAWhE,IACbgE,EAAS,IAEJA,GAGD,YAAAF,UAAR,SAAkBK,G,QAChB,IAAKA,EACH,OAAO,KAET,IAAMN,EAAQ,GACRO,EAAQD,EAAYE,MAAM,M,IAChC,IAAgB,kBAAAD,GAAK,8BAAE,CAAlB,IACGE,EADI,QACKD,MAAM,KACD,IAAhBC,EAAKzO,QACPgO,EAAM1E,KAAK,CAAE3I,KAAM8N,EAAK,GAAGC,OAAQC,IAAKF,EAAK,GAAGC,OAAS,IAAMD,EAAK,GAAGC,U,iGAG3E,OAAqB,IAAjBV,EAAMhO,OAAuB,KAC1BgO,GAID,YAAAhB,gBAAR,SAAwB4B,EAAaC,EAAWC,EAAatC,EAAmCX,GAAhG,WACE3L,KAAK8B,UAAUwK,EAAsBxI,MAAO6K,GACzCE,MAAK,SAAA3M,G,YAEJ,IAAoB,kBAAAA,GAAM,8BAAE,CAAvB,IAAMgD,EAAK,QACR4J,EAAY5J,EAAMjD,WACxByM,EAAOI,GAAa,CAClB7E,IAAK6E,EACLpN,MAAOoN,EACPnB,KAAM,EAAKoB,iBAAiBH,EAAQE,EAAWxC,GAC/CuB,KAAM3I,EAAM9C,SAASO,OAAOqM,OAAc,KAAO9J,EAAM3D,KAAK6I,cAAgB,MAG9E,IAAM6E,EAAe,OAAAC,EAAA,GAAUR,EAAOI,IAEtC,EAAKK,eAAeT,EAAQE,EAAQE,EAAW5J,EAAMxC,UAAWuM,EAActD,I,iGAGhF,IAAMyD,EAAM,CAAC,WAAY,cAAe,aAAc,aAAc,cAAe,YACnF,GAAIlN,EAAOpC,OAET,IAAK,IAAIuP,EAAI,EAAGA,EAAID,EAAItP,OAAQuP,IAC9BX,EAAOU,EAAIC,IAAM,CACfpF,IAAKmF,EAAIC,GACT3N,MAAO0N,EAAIC,GACX1B,KAAM,EAAKoB,iBAAiBH,EAAQQ,EAAIC,GAAI/C,GAC5CuB,KAAM,EAAK/C,UAAUoD,QAAQ,uCAAyCkB,EAAIC,GAAK,cAOnF,YAAAN,iBAAR,SAAyBO,EAAUC,EAAUjD,GAC3C,OAAQA,EAAsB/K,KAAKC,QAAQ,UAAY,EACnD,IAAM8N,EAAM,IAAMC,EAClB,IAAMD,EAAI7P,QAAQ,IAAK,KAAO,IAAM8P,EAAM,KAGxC,YAAAzN,UAAR,SAAkBf,EAAeiB,GAC/B,OAAOhC,KAAKK,KAAKO,IAAIZ,KAAKO,WAAWG,MAAML,KAAKG,OAAO,KAAkB,CACvEK,OAAQ,CAAEC,MAAOC,EAAMC,WAAYgB,WAAU,KAE5CkJ,YACA2D,MAAK,SAAC3M,G,QAEL,GADAA,EAASA,EAAOsN,QAAO,SAAApL,GAAS,OAAAA,EAAM7C,OAAS,IAAkBkO,S,IAE/D,IAAkB,kBAAAvN,GAAM,8BAAE,CAArB,IAAMC,EAAG,QACZ,GAAKA,EAAIC,SAAT,CACA,IAAMC,EAAKF,EAAIC,SACTE,EAAQD,EAAGE,IACXC,EAASH,EAAGF,EAAIZ,MAChBkB,EAAUJ,EAAGF,EAAIO,WACvBL,EAAGM,OAAS,YAAH,2BAAQL,GAAUE,GAAWC,K,iGAG1C,OAAOP,MAIL,YAAAiN,eAAR,SAAuBT,EAAaE,EAAaE,EAAgBrN,EAAgBwN,EAAmBtD,GAClG,IAAI+D,EAAiB/D,EAAkBlK,GACvC,GAAIA,EAAUD,QAAQ,KAAM,CAC1B,IAAMmO,EAAYlO,EAAUuK,OAAO,EAAGvK,EAAUD,QAAQ,MACxD,GAAImO,EAAW,CACb,IAAMC,EAAYjE,EAAkBgE,GAChCC,IACFF,EAAiBA,EAAiBA,EAAeG,OAAOD,GAAaA,IAI3E,GAAKF,EAAL,MAI+BtD,IAA3BsC,EAAOI,GAAWgB,OACpBpB,EAAOI,GAAWgB,KAAO,IAI3B,IAFA,IAAMC,EAAarB,EAAOI,GAAWgB,KAE5BE,EAAI,EAAGA,EAAIN,EAAe5P,OAAQkQ,IACzC,IACED,EAAWjB,EAAY,IAAMY,EAAeM,GAAGvP,MAAQgM,OAAOC,OAAO,GAAIuC,EAAc,CACrFhF,IAAK6E,EAAY,MAAQY,EAAeM,GAAGvP,KAC3CiB,MAAOgO,EAAeM,GAAGvP,KACzBkN,KAAM3N,KAAKiQ,uBAAuBP,EAAeM,GAAGpC,QAASgB,EAAQE,GACrEoB,UAAU,I,YAMV,YAAAD,uBAAR,SAA+BtC,EAAWwC,EAAcC,GAGtD,OAFOzC,EAAKlO,QAAQ,0BAA2B,KAAO0Q,EAAU,MAC7D1Q,QAAQ,2BAA4B,KAAO2Q,EAAY,O,sCAzQjDC,GAAe,gC,yBAAfA,EAAe,QAAfA,EAAe,Y,EAD5B,G,wBCPA,2B,OAGE,YAAAC,UAAA,SAAUC,GACR,OAAa,MAATA,EAAwBA,GAE5BA,EAAMC,MAAK,SAACC,EAAOC,GACjB,OAAID,EAAME,SAAWD,EAAMC,SAClB,EACEF,EAAME,SAAWD,EAAMC,UACxB,EAED,KAGJJ,I,sCAdEK,I,yCAAAA,EAAa,U,EAD1B,GCDA,aAGE,WAAoBC,GAAA,KAAAA,Y,OAEpB,YAAAP,UAAA,SAAUQ,EAAeH,GAOvB,OAAO3Q,KAAK6Q,UAAUE,yBAAyB,kBAL3CJ,EACgB,EAARG,EAEW,IAAVA,EAAe,EAAa,EAARA,EAAY,IAE0B,Q,sCAX9DE,GAAgB,Y,4CAAhBA,EAAgB,U,EAD7B,G,qBCCM,Q,2DADF,QACE,+BACF,Q,4CADgB,mCAAuD,wC,yEAKrE,gBAE2B,iG,uBACzB,QACF,O,mCAJyC,mCACvC,kEAAiE,qBAEjE,8B,qBAoBI,Q,yBADF,QACE,+BACF,Q,6CADgB,mCAAwD,wC,0BAF1E,QACE,+B,oBAGF,Q,wBAHgB,8C,sCAhBlB,cACE,gBACE,+F,uBACA,iBACE,mBACE,QACF,OACA,eAAM,QAAe,OACvB,OACA,iBAC0B,4FACxB,mBAAU,eAAG,OACf,OACF,OAEA,iCAKF,O,mCAnBmC,2CAEoB,kCAE/C,2GAEI,qBAQI,8D,0BArBhB,uBAMA,yB,kBANkB,yBAMb,iCCTX,kBAaE,WAAoBC,GAAA,KAAAA,gBAJV,KAAAvG,eAAuC,IAAI,IAErD,KAAAwG,aAAyB,G,OAIzB,YAAA7L,SAAA,aAGA,YAAAK,YAAA,SAAYC,G,SACW,QAArB,EAAIA,EAAQwL,iBAAS,eAAEtL,gBACrB7F,KAAKwN,KCxBJ,SAAuB2D,G,QAC5B,IAAKA,EAAa,MAAO,GAEzB,IAAM3D,EAAmB,G,IACzB,IAAuB,kBAAA2D,GAAS,8BAK9B,IALG,IACC,EAAqB3D,EACnB4D,EAFW,QAEM9C,MAAM,KACvB+C,EAAOD,EAAMA,EAAMtR,OAAS,GAC9BwR,EAAe,G,WACVjC,GACP,IAAM1E,EAAOyG,EAAM/B,GACnBiC,GAAgBjC,EAAI,IAAI1E,EAASA,EACjC,IAAM4G,EAAW,EAAOC,MAAK,SAAAnO,GAAQ,OAAAA,EAAK5C,OAASkK,KACnD,GAAI4G,EACF,EAASA,EAASE,aACb,CACL,IAAMpO,EAAI,aACRyN,MAAOzB,EACP5O,KAAMkK,EACN2G,aAAY,EACZX,SAAUhG,IAAS0G,GACf1G,IAAS0G,GAAQ,CAAEI,SAAU,KAEnC,EAAOrI,KAAK/F,GACZ,EAASA,EAAKoO,WAfTpC,EAAI,EAAGA,EAAI+B,EAAMtR,OAAQuP,I,EAAzBA,G,iGAoBX,OAAO7B,EDLSkE,CAAc1R,KAAKmR,aAEjB,QAAhB,EAAIxL,EAAQwE,YAAI,eAAEtE,eAChB7F,KAAK2R,eAAe3R,KAAKmK,KAAKyH,WAIlC,YAAAC,aAAA,SAAalH,GACX3K,KAAKiR,cAAca,aAAanH,IAGlC,YAAAoH,WAAA,SAAWpH,GCHN,IAA0BtH,EAAS2O,EAClCC,GACS,KADTA,GADkCD,EDIlBhS,KAAKkR,cCHP1P,QADW6B,EDIfsH,ICDdqH,EAAM5I,KAAK/F,GAEX2O,EAAME,OAAOD,EAAO,IDEtB,YAAAE,QAAA,SAAQC,GACNpS,KAAK0K,eAAe2H,KAAKD,IAGnB,YAAAT,eAAR,SAAuBW,G,QACrB,GAAY,MAARA,IACAtS,KAAKkR,aAAaqB,SAASD,GAA/B,CAEA,IAAMlB,EAAQkB,EAAKhE,MAAM,KACrBgD,EAAe,G,IACnB,IAAmB,kBAAAF,GAAK,8BAAE,CAArB,IAAMzG,EAAI,QAET3K,KAAKkR,aAAaqB,SADtBjB,EAAgBA,EAAyBA,EAAY,IAAI3G,EAA1BA,IAE/B3K,KAAK+R,WAAWT,I,0IA1CTkB,GAAsB,Y,uBAAtBA,EAAsB,u0BDZnC,gBAEE,cACE,+B,oBAIA,yCA+BF,OAEA,gBACE,mBAAiD,gCAAS,EAAAL,aACxD,mBAAU,cAAG,OACf,OACF,OACF,Q,MA1CkB,2C,60CCGlB,GENO,SAAS,GAAc9O,EAAW2O,GACvC,IAAMC,EAAQD,EAAMxQ,QAAQ6B,IACb,IAAX4O,EACFD,EAAM5I,KAAK/F,GAEX2O,EAAME,OAAOD,EAAO,GCHxB,gC,OAEE,YAAA3B,UAAA,SAAUhB,GACR,cAAWA,SAAe,GAAaA,EAChC7C,OAAOgG,KAAKnD,GAAKlO,KAAI,SAAA6I,GAC1B,OAAQqF,EAAYrF,O,sCAJbyI,I,6CAAAA,EAAiB,U,EAD9B,G,mDCyBc,sBACE,wFACA,QACF,O,yCADE,2E,0BAUF,cACE,eAAqC,QAAe,OACtD,Q,uBADK,gCAAkC,sB,0BAHzC,iBACE,iB,mBACA,uBAGF,Q,4BAJoB,gDACb,iC,0BAqBD,cACE,eAAqC,QAAe,OACtD,Q,uBADK,gCAAkC,sB,0BAHzC,iBACE,iB,mBACA,uBAGF,Q,4BAJoB,gDACb,iC,sCAfT,cAEE,gBACE,iBACE,wFACA,QACF,OACA,sBACE,mFACA,iBACF,OACF,OAEA,wBAOF,O,oCAjB0C,kCAEpC,8BAQwC,iD,0BAdhD,QACE,uB,wBAqBF,Q,4BArBO,0C,sCAzBT,gBAEE,gBACE,gBACE,wFACA,QACF,OACA,4BAIA,sBACE,mFACA,iBACF,OACF,OAEA,wBAOA,gCAwBF,O,oCA7CgC,kCAE1B,8BAEQ,4BAUc,gDAOZ,iD,0BAzBlB,QACE,uB,wBAiDF,Q,4BAjDuB,2C,sCAVzB,cAEE,gBAE4B,qF,oBAC1B,mBAAU,QAAsF,OAChG,eAAM,Q,oBAAqF,OAC7F,OAEA,gCAoDF,O,uDA1DI,qFAEU,wFACJ,yEAGM,mD,0BAVlB,QACE,uB,mBA8DF,Q,4BA9DO,2C,sCATT,cAEE,gBAC4B,qF,oBAC1B,mBAAU,QAAwF,OAClG,eAAM,Q,oBAAkE,OAC1E,OAEA,gCAiEF,O,mCAvE0C,2EAE5B,yFACJ,+DAGM,oDCNlB,kBAcE,aANU,KAAApM,cAAmC,IAAI,IACjD,KAAAqM,gBAAyB,GACzB,KAAAC,eAAwB,GACxB,KAAAC,aAAsB,GACtB,KAAAC,aAAsB,G,OAItB,YAAAzN,SAAA,aAGA,YAAA0N,WAAA,SAAWxM,GACTvG,KAAKsG,cAAc+L,KAAK9L,IAG1B,YAAAyM,cAAA,SAAcxL,GACZ,GAAcA,EAAKxH,KAAK2S,kBAG1B,YAAAM,aAAA,SAAa5P,GACX,GAAcA,EAAMrD,KAAK4S,iBAG3B,YAAAM,WAAA,SAAWC,GACT,GAAcA,EAAMnT,KAAK6S,eAG3B,YAAAO,WAAA,SAAWtD,GACT,GAAcA,EAAM9P,KAAK8S,e,sCA9BhBO,I,uBAAAA,EAAqB,2jCDTlC,gBACE,uB,mBA0EF,Q,MA1EO,+C,glDCEP,G,sCCgBE,2BACE,2EACF,O,mCAFkC,iCAA+B,sBAA/B,CAA+B,0BAA/B,CAA+B,mC,2EAnBnE,gBACE,gBACE,gBACE,+FACA,mBAAU,oBAAS,OACrB,OACA,gBACE,8FACA,mBAAU,eAAI,OAChB,OACF,OAEA,+BACE,8EACF,OACA,8BACE,gFACF,OAEA,mCAIA,oBAAyE,yDACvE,oBAAU,gBAAI,OAChB,OACF,O,8BAxBwB,2EAIA,2EAMF,+DAAgD,cAAhD,CAAgD,yBAGjD,8DAA+C,6BAIlD,6BCDlB,ICdMC,GAAiB,CACrB,CAAE3I,KAAM,GAAI4I,UDad,WA0BE,WACUjT,EACAkT,EACA7K,EACA8K,EACAC,EACAC,EACA1O,EACA2O,EACA3C,EACA4C,GATA,KAAAvT,UACA,KAAAkT,QACA,KAAA7K,WACA,KAAA8K,gBACA,KAAAC,gBACA,KAAAC,kBACA,KAAA1O,OACA,KAAA2O,eACA,KAAA3C,gBACA,KAAA4C,kBA3BV,KAAAC,SAAW,CACT3C,UAAW,YACXrL,SAAU,YAEZ,KAAAiO,eAAiB/T,KAAK8T,SAAS3C,UACvB,KAAA6C,MAAQ,IAAIC,EAAA,EAA4B,MACxC,KAAAC,WAAa,IAAID,EAAA,EAA0B,MAC3C,KAAAE,gBAAkB,IAAIF,EAAA,EAAqB,MAC3C,KAAAG,cAAgB,IAAIH,EAAA,EAAqB,MACjD,KAAAI,cAAgB,OAAAC,EAAA,GAAc,CAACtU,KAAKgU,MAAOhU,KAAKkU,WAAYlU,KAAKmU,gBAAiBnU,KAAKoU,gBAAgBlT,KACrG,OAAAE,EAAA,IAAI,SAAC,G,IAAA,mBAAoD,OAAG+I,KAAtD,KAA4DgH,UAAtD,KAAiEoD,eAAtD,KAAsEC,aAAtD,UAKjC,KAAAC,aAAe,IAAIC,EAAA,EAczB1U,KAAKM,QAAQqU,KAAK3U,KAAKwT,OACvBxT,KAAK4U,mBACL5U,KAAK6U,kB,OAGP,YAAAxP,SAAA,sBACQ2O,EAAQhU,KAAK0T,cAAc9S,IAAIZ,KAAK8U,SACpCZ,EAAalU,KAAK0T,cAAcnJ,eACtC,OAAAwK,EAAA,GAAS,CAACf,EAAOE,IAAatK,WAAU,SAAC,G,IAAA,mBAACO,EAAA,KAAMgH,EAAA,KAC9C,EAAK6C,MAAMjK,KAAKI,GAChB,EAAK6K,UAAY,EAAKhB,MAAM9O,MAAM+P,KAClC,EAAKrB,aAAaxQ,SAAY,EAAK4Q,MAAM9O,MAAM0M,SAAQ,kBACvD,EAAKsC,WAAWnK,KAAKoH,GACrB,EAAK+D,2BAA2B/K,EAAMgH,GAEtC,EAAKwC,gBAAgB1I,YAAY,EAAK+I,MAAM9O,OAAO2J,MAAK,SAAA1D,GACtD,EAAKgJ,gBAAgBpK,KAAKoB,EAAIK,MAC9B,EAAK4I,cAAcrK,KAAKoB,EAAIS,aAKlC,YAAAxE,YAAA,WACEpH,KAAKgU,MAAMnK,WACX7J,KAAKkU,WAAWrK,WAChB7J,KAAKmU,gBAAgBtK,WACrB7J,KAAKoU,cAAcvK,WACnB7J,KAAKyU,aAAaU,eAGpB,YAAAC,eAAA,SAAetB,GAEX9T,KAAK+T,eADH/T,KAAK+T,iBAAmBD,EACJ,KAEAA,GAI1B,YAAApJ,eAAA,SAAe0H,GAAf,WACMiD,EAAW,aACXC,EAAa,KACF,QAAXlD,IAAoBA,aAAM,EAANA,EAAQmD,WAAW,YACzCF,EAAW,mBACXC,EAAa,KAEf,IAAI7U,EAAO+U,OAAOH,EAAUC,GACf,OAAT7U,GAAiC,IAAhBA,EAAKX,SAE1BW,EAAOT,KAAK6T,gBAAgB9T,aAAaU,GAC3B,MAAV2R,IACF3R,EAAU2R,EAAM,IAAI3R,GAEtBT,KAAK0T,cAAchJ,eAAejK,GAAMmJ,WAAU,SAAAuB,GAChD,EAAKuI,cAAcnJ,eAAeX,WAAU,SAAA6L,GAC1C,EAAKvB,WAAWnK,KAAK0L,WAK3B,YAAAC,kBAAA,SAAkBnP,GAChBvG,KAAK2V,aAAarP,cAAcC,IAGlC,YAAAqP,YAAA,SAAYC,GACV7V,KAAKgU,MAAMjK,KAAK,2BAAK/J,KAAKgU,MAAM9O,OAAK,CAAE+P,KAAMY,MAG/C,YAAAvL,KAAA,sBACEtK,KAAK2I,SAASe,KAAK,aACnB,IAAIoM,EAAa9V,KAAKgU,MAAM9O,MAAM+P,KAClCjV,KAAK0T,cAAcpJ,KAAKtK,KAAK8U,QAAS9U,KAAKgU,MAAM9O,OAAO0E,UAAU,CAChEG,KAAM,SAAAoB,GACCA,GAIL,EAAK6J,UAAYc,EACjBA,EAAa,KACb,EAAKnN,SAASe,KAAK,QAAS,KAAM,CAAET,SAAU,OAL5C,EAAKN,SAASe,KAAK,SAAU,KAAM,CAAET,SAAU,OAOnD8M,MAAO,WACL,EAAKpN,SAASe,KAAK,SAAU,KAAM,CAAET,SAAU,UAK7C,YAAA2L,iBAAR,WAEE,IAAMoB,EAAWC,eAAeC,QAAQ,KAElC7S,EADuCH,KAAKiT,MAAMH,GACjC,GACvBhW,KAAK8U,QAAWzR,EAAkB+S,UAAa/S,EAAoBgT,MAI7D,YAAAnB,2BAAR,SAAmC/K,EAAkBsL,GAArD,WACQa,EAAcnM,EAAKyH,SACnB2E,EAAgBD,EAAY9U,QAAQ,MAAQ,EAAI8U,EAAYE,YAAY,KAAO,EAAI,EACnFC,EAAkC,IAAlBF,EAAsB,GAAKD,EAAY1W,UAAU,EAAG2W,GACpEG,EAAWJ,EAAY1W,UAAU2W,GAEjCI,EADOD,EAAS9W,UAAU,EAAG8W,EAAS5W,OAASqK,EAAKE,UAAUvK,QAC5C,QAAUqK,EAAKE,UAEjCuM,EAAWnB,EAAMjE,MAAK,SAAAc,GAAQ,OAAAA,IAASmE,EAAgBE,KACvDE,EAAgBpB,EAAMjG,QAAO,SAAA8C,GAAQ,OAAAA,EAAKwE,SAASJ,MAAW5W,OAAS,EAEzE8W,GACF5W,KAAKyT,cACF7P,IAAI,8CAA8CgT,EAAQ,KAAM,QAChEhN,WAAU,WACT,EAAKqH,cAAca,aAAa8E,MAGlCC,GACF7W,KAAKyT,cACF7P,IAAI,aAAaiT,EAAa,uFAAwF,QACtHjN,WAAU,WACTmN,OAAOrN,KAAK,kCAAmC,cAK/C,YAAAmL,gBAAR,sBACE7U,KAAKiF,KAAKkB,mBAAkB,WAC1B,EAAKsO,aAAa7Q,IAChB,OAAAoT,EAAA,GAAUD,OAAQ,gBAAgBnN,WAAU,SAACqN,GACvC,EAAKjC,YAAc,EAAKhB,MAAM9O,MAAM+P,OACxCgC,EAAMC,iBACND,EAAME,YAAc,QAGxB,EAAK1C,aAAa7Q,IAChB,OAAAoT,EAAA,GAAUD,OAAQ,WAAWnN,WAAU,SAACqN,GACL,KAAlBA,EAAMG,UAAmBC,UAAUC,SAASC,MAAM,OAASN,EAAMO,QAAUP,EAAMQ,WAEhGR,EAAMC,iBACN,EAAKjS,KAAKiD,KAAI,WAAQ,EAAKoC,mB,sCAxKxBoN,GAAmB,gG,uBAAnBA,EAAmB,wD,MAAA,K,KACnB,GAAkB,G,qmBDzB/B,yB,sBAAyB,wC,+KCkBzB,KCVA,4B,8BAIaC,I,oDAAAA,IAAuB,SAHzB,CAAC,IAAaC,SAAStE,KACtB,O,EAFZ,GCsBO,SAASuE,GAAuBxX,GACrC,OAAO,IAAI,IAAoBA,EAAM,sBAAuB,OAAOyX,YA/BrE,0GAkCA,gC,8BA+CaC,I,oDAAAA,IAAgB,UAThB,CACT,IACA,EACA,IACA,EACA,IACA,KACD,SA7BQ,CACP,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IAAgBH,SAAS,CACvBI,OAAQ,CACNxP,QAAS,IACTyP,WAAY,GACZC,KAAM,CAAC,MAETC,gBAAiB,KACjBC,SAAS,Q,EAnCf","file":"code-editor-code-editor-module.f04fa685eb5577df4aeb.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class SanitizeService {\r\n\r\n  constructor() { }\r\n\r\n  private removeFromStart(sanitized: string, charToRemove: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(0, 1) === charToRemove) {\r\n      sanitized = sanitized.substring(1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private removeFromEnd(sanitized: string, charToRemove: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(sanitized.length - 1, sanitized.length) === charToRemove) {\r\n      sanitized = sanitized.substring(0, sanitized.length - 1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private cleanBadPath = (sanitized: string) => {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    const goodChar = '_';\r\n    const illegalRe = /[\\?<>\\\\:\\*\\|\":]/g;\r\n    const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\r\n    const reservedRe = /^\\.+$/;\r\n    const windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\r\n    const windowsTrailingRe = /[\\. ]+$/;\r\n    return sanitized\r\n      .replace(illegalRe, goodChar)\r\n      .replace(controlRe, goodChar)\r\n      .replace(reservedRe, goodChar)\r\n      .replace(windowsReservedRe, goodChar)\r\n      .replace(windowsTrailingRe, goodChar);\r\n  }\r\n\r\n  // sanitize path\r\n  public sanitizePath(sanitized: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // remove slashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\/');\r\n\r\n    // remove slashed form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\/');\r\n\r\n    // remove backslashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\\\');\r\n\r\n    // remove backslashes form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\\\');\r\n\r\n    // replace bad\r\n    sanitized = this.cleanBadPath(sanitized);\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  // sanitize file or folder name\r\n  public sanitizeName(sanitized: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // in addition to all path validation rules\r\n    // slashes are not valid in file or folder name\r\n    const replacement = '_';\r\n    const illegalRe = /\\//g;\r\n    return this.sanitizePath(sanitized)\r\n      .replace(illegalRe, replacement);\r\n  }\r\n\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeConfig, FieldInputTypeOption } from '../models/field.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    }) as Observable<string[]>;\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map((inputConfigs: FieldInputTypeConfig[]) => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      ) as Observable<FieldInputTypeOption[]>;\r\n  }\r\n\r\n  getFields(contentType: ContentType) {\r\n    return this.http\r\n      .get(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n      })\r\n      .pipe(\r\n        map((fields: Field[]) => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      ) as Observable<Field[]>;\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    }) as Observable<null>;\r\n  }\r\n\r\n  rename(item: Field, contentType: ContentType, newName: string) {\r\n    return this.http.post(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n        newName,\r\n      },\r\n    }) as Observable<null>;\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    }) as Observable<number>;\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    }) as Observable<boolean>;\r\n  }\r\n}\r\n","import { EditorOptions } from './ace.model';\r\n\r\nexport const aceOptions: Partial<EditorOptions> & EditorPluginsOptions = {\r\n  mode: 'ace/mode/razor',\r\n  wrap: true,\r\n  useSoftTabs: true,\r\n  theme: 'ace/theme/sqlserver',\r\n  fontSize: 14,\r\n  fontFamily: 'Consolas, Courier New, monospace',\r\n  showGutter: true,\r\n  enableBasicAutocompletion: true,\r\n  enableLiveAutocompletion: true,\r\n  enableSnippets: true,\r\n};\r\n\r\ninterface EditorPluginsOptions {\r\n  enableBasicAutocompletion: boolean;\r\n  enableLiveAutocompletion: boolean;\r\n  enableSnippets: boolean;\r\n}\r\n","// tslint:disable-next-line:max-line-length\r\nimport { ChangeDetectionStrategy, Component, ElementRef, forwardRef, Input, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { loadScripts } from '../../shared/helpers/load-scripts.helper';\r\nimport { aceOptions } from './ace-options';\r\nimport { Ace, Editor } from './ace.model';\r\n\r\ndeclare const ace: Ace;\r\n\r\n@Component({\r\n  selector: 'app-ace-editor',\r\n  template: `<div style=\"width: 100%; height: 100%;\" #editor></div>`,\r\n  styles: [':host {display: block; width: 100%; height: 100%}'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => AceEditorComponent),\r\n    multi: true\r\n  }],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AceEditorComponent implements OnInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') editorRef: ElementRef;\r\n  @Input() filename: string;\r\n  @Input() snippets: any[];\r\n  /** If value changes editor will be resized */\r\n  @Input() toggleResize: boolean;\r\n\r\n  private value = '';\r\n  private editor: Editor;\r\n\r\n  propagateChange: (_: any) => void = () => { };\r\n  propagateTouched: (_: any) => void = () => { };\r\n\r\n  constructor(private zone: NgZone) { }\r\n\r\n  ngOnInit() {\r\n    loadScripts(\r\n      [\r\n        { test: 'ace', src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ace.min.js' },\r\n        { test: null, src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ext-modelist.min.js' },\r\n        { test: null, src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ext-language_tools.min.js' },\r\n      ],\r\n      this.aceLoaded.bind(this)\r\n    );\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const filename = changes.filename?.currentValue;\r\n    const snippets = changes.snippets?.currentValue;\r\n    this.updateValues(filename, snippets);\r\n\r\n    if (!this.editor) { return; }\r\n    const resize = changes.toggleResize?.currentValue !== changes.toggleResize?.previousValue;\r\n    if (resize) {\r\n      this.zone.runOutsideAngular(() => {\r\n        // wait for Angular to update DOM to be able to get proper size of the container\r\n        setTimeout(() => { this.editor.resize(); }, 50);\r\n      });\r\n    }\r\n  }\r\n\r\n  insertSnippet(snippet: any) {\r\n    this.zone.runOutsideAngular(() => {\r\n      const snippetManager = ace.require('ace/snippets').snippetManager;\r\n      snippetManager.insertSnippet(this.editor, snippet);\r\n      this.editor.focus();\r\n    });\r\n  }\r\n\r\n  writeValue(value: string) {\r\n    this.value = value || '';\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      const p = this.editor.getCursorPosition();\r\n      this.editor.setValue(this.value, -1);\r\n      this.editor.moveCursorToPosition(p);\r\n    });\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void) {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: (_: any) => void) {\r\n    this.propagateTouched = fn;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.editor.destroy();\r\n      this.editor.container.remove();\r\n      this.editor = null;\r\n    });\r\n  }\r\n\r\n  private aceLoaded() {\r\n    this.zone.runOutsideAngular(() => {\r\n      ace.config.set('basePath', 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11');\r\n      this.editor = ace.edit(this.editorRef.nativeElement, aceOptions);\r\n      (this.editor as any).$blockScrolling = Infinity;\r\n      this.editor.session.setValue(this.value); // set value and reset undo history\r\n      this.updateValues(this.filename, this.snippets);\r\n      this.editor.on('change', this.onEditorValueChange.bind(this));\r\n      this.editor.on('blur', this.onEditorBlurred.bind(this));\r\n      this.editor.focus();\r\n    });\r\n  }\r\n\r\n  private onEditorValueChange() {\r\n    this.zone.run(() => {\r\n      this.propagateChange(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private onEditorBlurred() {\r\n    this.zone.run(() => {\r\n      this.propagateTouched(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private updateValues(filename: string, snippets: any[]) {\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      if (filename) {\r\n        const modelist = ace.require('ace/ext/modelist');\r\n        const mode = modelist.getModeForPath(filename).mode;\r\n        this.editor.session.setMode(mode);\r\n      }\r\n      if (snippets) {\r\n        const snippetManager = ace.require('ace/snippets').snippetManager;\r\n        snippetManager.register(this.snippets);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\r\nimport { Subject } from 'rxjs';\r\n\r\n/** This service ensures that multiple SnackBars are shown one after another. */\r\n@Injectable({ providedIn: 'root' })\r\nexport class SnackBarStackService implements OnDestroy {\r\n  private defaultDuration = 3000;\r\n  private processingMessage = false;\r\n  private messageQueue: SnackBarData[] = [];\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  /**\r\n   * Add a message to the stack queue.\r\n   * @returns observable that fires if the action is triggered.\r\n   * Service will complete the observable\r\n   */\r\n  add(message: string, action?: string, config: MatSnackBarConfig<any> = { duration: this.defaultDuration }) {\r\n    const triggered$ = new Subject<void>();\r\n    this.messageQueue.push({ message, action, config, triggered$ });\r\n    if (!this.processingMessage) {\r\n      this.showSnackBar();\r\n    }\r\n    return triggered$.asObservable();\r\n  }\r\n\r\n  private showSnackBar() {\r\n    const nextMsg = this.messageQueue.shift();\r\n\r\n    if (nextMsg == null) {\r\n      this.processingMessage = false;\r\n      return;\r\n    }\r\n\r\n    this.processingMessage = true;\r\n\r\n    const snackBarRef = this.snackBar.open(nextMsg.message, nextMsg.action, nextMsg.config);\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      nextMsg.triggered$.complete();\r\n      this.showSnackBar();\r\n    });\r\n    snackBarRef.onAction().subscribe(() => {\r\n      nextMsg.triggered$.next();\r\n    });\r\n  }\r\n\r\n  // spm TODO: ngOnDestroy only fires in services provided in component\r\n  ngOnDestroy() {\r\n    for (const message of this.messageQueue) {\r\n      message.triggered$.complete();\r\n    }\r\n    this.messageQueue = null;\r\n  }\r\n}\r\n\r\nclass SnackBarData {\r\n  message: string;\r\n  action: string;\r\n  config: MatSnackBarConfig<any>;\r\n  triggered$: Subject<void>;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppFile, webApiAppFileCreate, webApiAppFilesAll } from 'projects/edit';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Context } from '../../shared/services/context';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SourceService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  /** Key is templateId or path */\r\n  get(key: number | string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl(webApiAppFile), {\r\n      params: { appId: this.context.appId.toString(), ...this.templateIdOrPath(key) }\r\n    }).pipe(\r\n      map((view: SourceView) => {\r\n        if (view.Type.toLowerCase() === 'auto') {\r\n          switch (view.Extension.toLowerCase()) {\r\n            case '.cs':\r\n            case '.cshtml':\r\n              view.Type = 'Razor';\r\n              break;\r\n            case '.html':\r\n            case '.css':\r\n            case '.js':\r\n              view.Type = 'Token';\r\n              break;\r\n          }\r\n        }\r\n        return view;\r\n      })\r\n    ) as Observable<SourceView>;\r\n  }\r\n\r\n  /** Key is templateId or path */\r\n  save(key: number | string, view: SourceView) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl(webApiAppFile), view, {\r\n      params: { appId: this.context.appId.toString(), ...this.templateIdOrPath(key) },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  getTemplates() {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl(webApiAppFilesAll), {\r\n      params: { appId: this.context.appId.toString(), global: 'false', withSubfolders: 'true' },\r\n    }) as Observable<string[]>;\r\n  }\r\n\r\n  createTemplate(name: string) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl(webApiAppFileCreate), {}, {\r\n      params: { appId: this.context.appId.toString(), global: 'false', path: name },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  private templateIdOrPath(key: number | string) {\r\n    if (typeof key === typeof 0) {\r\n      return { templateId: key.toString() };\r\n    } else {\r\n      return { path: key as string };\r\n    }\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { DataTypeConstants } from '../../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { Snippet } from '../models/snippet.model';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SnippetsService {\r\n  private keyPrefixes = ['@', '['];\r\n  private keyPrefixIndex = (view: SourceView) => (view.Type.indexOf('Razor') > -1) ? 0 : 1;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext,\r\n    private translate: TranslateService,\r\n  ) { }\r\n\r\n  async getSnippets(view: SourceView) {\r\n    const res: any = await this.http.get('../ng-assets/snippets.json.js').toPromise();\r\n    const snippets: Snippet[] = res.snippets;\r\n    const relevant = this.filterAwayNotNeededSnippetsList(snippets, view);\r\n    const standAndInputSnips = this.extractInputTypeSnippets(relevant);\r\n    const sets = this.initSnippetsWithConfig(standAndInputSnips.standardArray, view, standAndInputSnips.inputTypeSnippets);\r\n    return { sets, list: standAndInputSnips.standardArray };\r\n  }\r\n\r\n  // scan the list for sets starting with @ or [ and filter if not needed right now\r\n  private filterAwayNotNeededSnippetsList(list: Snippet[], view: SourceView) {\r\n    const newList = [];\r\n    for (const itm of list) {\r\n      const setHasPrefix = this.keyPrefixes.indexOf(itm.set[0]);\r\n      if (setHasPrefix === -1 || (setHasPrefix === this.keyPrefixIndex(view))) {\r\n        // if necessary, remove first char\r\n        if (setHasPrefix === this.keyPrefixIndex(view)) {\r\n          itm.set = itm.set.substr(1);\r\n        }\r\n        newList.push(itm);\r\n      }\r\n    }\r\n    return newList;\r\n  }\r\n\r\n  private extractInputTypeSnippets(list: Snippet[]) {\r\n    const standardArray: Snippet[] = [];\r\n    const inputTypeArray: Snippet[] = [];\r\n\r\n    for (const itm of list) {\r\n      const systemSnippet = itm.set[0] === '\\\\';\r\n      if (!systemSnippet) {\r\n        standardArray.push(itm);\r\n      } else {\r\n        itm.set = itm.set.substr(1);\r\n        inputTypeArray.push(itm);\r\n      }\r\n    }\r\n    const inputTypeSnippets = this.catalogInputTypeSnippets(inputTypeArray);\r\n    return {\r\n      standardArray,\r\n      inputTypeSnippets,\r\n    };\r\n  }\r\n\r\n  private catalogInputTypeSnippets(list: Snippet[]) {\r\n    const inputTypeList: any = {};\r\n    for (const itm of list) {\r\n      if (inputTypeList[itm.subset] === undefined) {\r\n        inputTypeList[itm.subset] = [];\r\n      }\r\n      inputTypeList[itm.subset].push(itm);\r\n    }\r\n    return inputTypeList;\r\n  }\r\n\r\n  private initSnippetsWithConfig(sets: any, templateConfiguration: SourceView, inputTypeSnippets: any) {\r\n    sets = this.makeTree(sets);\r\n\r\n    // retrieve all relevant content-types and infos\r\n    sets.Content = Object.assign({}, sets.Content, { Fields: {}, PresentationFields: {} });\r\n    if (templateConfiguration.TypeContent) {\r\n      this.loadContentType(sets.Content.Fields, templateConfiguration.TypeContent, 'Content', templateConfiguration, inputTypeSnippets);\r\n    }\r\n    if (templateConfiguration.TypeContentPresentation) {\r\n      this.loadContentType(\r\n        sets.Content.PresentationFields, templateConfiguration.TypeContentPresentation,\r\n        'Content.Presentation', templateConfiguration, inputTypeSnippets,\r\n      );\r\n    }\r\n\r\n    if (templateConfiguration.HasList) {\r\n      sets.List = Object.assign({}, sets.List, { Fields: {}, PresentationFields: {} });\r\n      if (templateConfiguration.TypeList) {\r\n        this.loadContentType(sets.List.Fields, templateConfiguration.TypeList, 'Header', templateConfiguration, inputTypeSnippets);\r\n      }\r\n      if (templateConfiguration.TypeListPresentation) {\r\n        this.loadContentType(\r\n          sets.List.PresentationFields, templateConfiguration.TypeListPresentation,\r\n          'Header.Presentation', templateConfiguration, inputTypeSnippets,\r\n        );\r\n      }\r\n    } else {\r\n      delete sets.List;\r\n    }\r\n\r\n    // maybe App-infos\r\n    if (templateConfiguration.HasApp) {\r\n      sets.App.Resources = {};\r\n      sets.App.Settings = {};\r\n      this.loadContentType(sets.App.Resources, 'App-Resources', 'App.Resources', templateConfiguration, inputTypeSnippets);\r\n      this.loadContentType(sets.App.Settings, 'App-Settings', 'App.Settings', templateConfiguration, inputTypeSnippets);\r\n    }\r\n\r\n    return sets;\r\n  }\r\n\r\n  // Convert the list into a tree with set/subset/item\r\n  private makeTree(list: Snippet[]) {\r\n    const tree: any = {};\r\n    for (const o of list) {\r\n      if (tree[o.set] === undefined) {\r\n        tree[o.set] = {};\r\n      }\r\n      if (tree[o.set][o.subset] === undefined) {\r\n        tree[o.set][o.subset] = [];\r\n      }\r\n      const reformatted = {\r\n        key: o.name,\r\n        label: this.label(o.set, o.subset, o.name),\r\n        snip: o.content,\r\n        help: o.help || this.help(o.set, o.subset, o.name),\r\n        links: this.linksList(o.links)\r\n      };\r\n\r\n      tree[o.set][o.subset].push(reformatted);\r\n    }\r\n    return tree;\r\n  }\r\n\r\n  private label(set: any, subset: any, snip: any) {\r\n    const key = this.getHelpKey(set, subset, snip, '.Key');\r\n\r\n    let result = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = snip;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getHelpKey(set: any, subset: any, snip: any, addition: any) {\r\n    return 'SourceEditorSnippets' + '.' + set + '.' + subset + '.' + snip + addition;\r\n  }\r\n\r\n  private help(set: any, subset: any, snip: any) {\r\n    const key = this.getHelpKey(set, subset, snip, '.Help');\r\n\r\n    let result = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private linksList(linksString: any) {\r\n    if (!linksString) {\r\n      return null;\r\n    }\r\n    const links = [];\r\n    const llist = linksString.split('\\n');\r\n    for (const l of llist) {\r\n      const pair = l.split(':');\r\n      if (pair.length === 3) {\r\n        links.push({ name: pair[0].trim(), url: pair[1].trim() + ':' + pair[2].trim() });\r\n      }\r\n    }\r\n    if (links.length === 0) { return null; }\r\n    return links;\r\n  }\r\n\r\n  // get fields in content types\r\n  private loadContentType(target: any, type: any, prefix: any, templateConfiguration: SourceView, inputTypeSnippets: any) {\r\n    this.getFields(templateConfiguration.AppId, type)\r\n      .then(fields => {\r\n        // first add common items if the content-type actually exists\r\n        for (const value of fields) {\r\n          const fieldname = value.StaticName;\r\n          target[fieldname] = {\r\n            key: fieldname,\r\n            label: fieldname,\r\n            snip: this.valuePlaceholder(prefix, fieldname, templateConfiguration),\r\n            help: value.Metadata.merged.Notes || '' + ' (' + value.Type.toLowerCase() + ') '\r\n          };\r\n          // try to add generic snippets specific to this input-type\r\n          const snipDefaults = cloneDeep(target[fieldname]); // must be a copy, because target[fieldname] will grow\r\n\r\n          this.attachSnippets(target, prefix, fieldname, value.InputType, snipDefaults, inputTypeSnippets);\r\n        }\r\n\r\n        const std = ['EntityId', 'EntityTitle', 'EntityGuid', 'EntityType', 'IsPublished', 'Modified'];\r\n        if (fields.length) {\r\n          // tslint:disable-next-line:prefer-for-of\r\n          for (let i = 0; i < std.length; i++) {\r\n            target[std[i]] = {\r\n              key: std[i],\r\n              label: std[i],\r\n              snip: this.valuePlaceholder(prefix, std[i], templateConfiguration),\r\n              help: this.translate.instant('SourceEditorSnippets.StandardFields.' + std[i] + '.Help'),\r\n            };\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  private valuePlaceholder(obj: any, val: any, templateConfiguration: any) {\r\n    return (templateConfiguration.Type.indexOf('Razor') > -1)\r\n      ? '@' + obj + '.' + val\r\n      : '[' + obj.replace('.', ':') + ':' + val + ']';\r\n  }\r\n\r\n  private getFields(appId: number, staticName: string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appid: appId.toString(), staticName },\r\n    })\r\n      .toPromise()\r\n      .then((fields: Field[]) => {\r\n        fields = fields.filter(field => field.Type !== DataTypeConstants.Empty);\r\n        if (fields) {\r\n          for (const fld of fields) {\r\n            if (!fld.Metadata) { continue; }\r\n            const md = fld.Metadata;\r\n            const allMd = md.All;\r\n            const typeMd = md[fld.Type];\r\n            const inputMd = md[fld.InputType];\r\n            md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n          }\r\n        }\r\n        return fields;\r\n      });\r\n  }\r\n\r\n  private attachSnippets(target: any, prefix: any, fieldname: any, inputType: any, snipDefaults: any, inputTypeSnippets: any) {\r\n    let genericSnippet = inputTypeSnippets[inputType];\r\n    if (inputType.indexOf('-')) {   // if it's a sub-type, let's also get the master-type\r\n      const fieldType = inputType.substr(0, inputType.indexOf('-'));\r\n      if (fieldType) {\r\n        const typeSnips = inputTypeSnippets[fieldType];\r\n        if (typeSnips) {\r\n          genericSnippet = genericSnippet ? genericSnippet.concat(typeSnips) : typeSnips;\r\n        }\r\n      }\r\n    }\r\n    if (!genericSnippet) {\r\n      return;\r\n    }\r\n\r\n    if (target[fieldname].more === undefined) {\r\n      target[fieldname].more = [];\r\n    }\r\n    const fieldSnips = target[fieldname].more;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let g = 0; g < genericSnippet.length; g++) {\r\n      try {\r\n        fieldSnips[fieldname + '-' + genericSnippet[g].name] = Object.assign({}, snipDefaults, {\r\n          key: fieldname + ' - ' + genericSnippet[g].name,\r\n          label: genericSnippet[g].name,\r\n          snip: this.localizeGenericSnippet(genericSnippet[g].content, prefix, fieldname),\r\n          collapse: true\r\n        });\r\n      } finally { }\r\n    }\r\n  }\r\n\r\n  private localizeGenericSnippet(snip: any, objName: any, fieldName: any) {\r\n    snip = snip.replace(/(\\$\\{[0-9]+\\:)var(\\})/gi, '$1' + objName + '$2')\r\n      .replace(/(\\$\\{[0-9]+\\:)prop(\\})/gi, '$1' + fieldName + '$2');\r\n    return snip;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeItem } from '../models/tree-item.model';\r\n\r\n/** Sorts folders before files */\r\n@Pipe({ name: 'sortItems' })\r\nexport class SortItemsPipe implements PipeTransform {\r\n\r\n  transform(items: TreeItem[]) {\r\n    if (items == null) { return items; }\r\n\r\n    items.sort((item1, item2) => {\r\n      if (item1.isFolder < item2.isFolder) {\r\n        return 1;\r\n      } else if (item1.isFolder > item2.isFolder) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return items;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'depthPadding' })\r\nexport class DepthPaddingPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(depth: number, isFolder: boolean) {\r\n    let padding: number;\r\n    if (isFolder) {\r\n      padding = depth * 8;\r\n    } else {\r\n      padding = (depth === 0) ? 8 : (depth * 8 + 16);\r\n    }\r\n    return this.sanitizer.bypassSecurityTrustStyle(`padding-left: ${padding}px;`);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark explorer-wrapper\">\r\n\r\n  <div>\r\n    <ng-container *ngFor=\"let item of (tree | sortItems)\">\r\n      <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item}\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-template #fileOrFolder let-item=\"item\">\r\n\r\n      <div class=\"file\" *ngIf=\"!item.isFolder\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n        [ngClass]=\"{'active': toggledItems.includes(item.pathFromRoot) }\" matTooltipShowDelay=\"750\"\r\n        [matTooltip]=\"item.name\" (click)=\"openTemplate(item.pathFromRoot)\">\r\n        {{ item.name }}\r\n      </div>\r\n\r\n      <div *ngIf=\"item.isFolder\">\r\n        <div class=\"folder-name-wrapper\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n          (click)=\"toggleItem(item.pathFromRoot)\">\r\n          <div class=\"folder-name\" matTooltipShowDelay=\"750\" [matTooltip]=\"item.name\">\r\n            <mat-icon>\r\n              {{ toggledItems.includes(item.pathFromRoot) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n            </mat-icon>\r\n            <span>{{ item.name }}</span>\r\n          </div>\r\n          <div class=\"add-item\" matTooltipShowDelay=\"750\" matTooltip=\"Create file in this folder\"\r\n            appClickStopPropagation (click)=\"addFile(item.pathFromRoot)\">\r\n            <mat-icon>add</mat-icon>\r\n          </div>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledItems.includes(item.pathFromRoot)\">\r\n          <ng-container *ngFor=\"let item1 of (item.children | sortItems)\">\r\n            <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item1}\"></ng-container>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n\r\n    </ng-template>\r\n  </div>\r\n\r\n  <div class=\"create-button-wrapper\">\r\n    <button mat-icon-button matTooltip=\"Create file\" (click)=\"addFile()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { SourceView } from '../models/source-view.model';\r\nimport { TreeItem } from '../models/tree-item.model';\r\nimport { calculateTree, toggleInArray } from './code-templates.helpers';\r\n\r\n@Component({\r\n  selector: 'app-code-templates',\r\n  templateUrl: './code-templates.component.html',\r\n  styleUrls: ['./code-templates.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CodeTemplatesComponent implements OnInit, OnChanges {\r\n  @Input() view: SourceView;\r\n  @Input() templates: string[];\r\n  @Output() createTemplate: EventEmitter<string> = new EventEmitter();\r\n  tree: TreeItem[];\r\n  toggledItems: string[] = [];\r\n\r\n  constructor(private dialogService: DialogService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.templates?.currentValue) {\r\n      this.tree = calculateTree(this.templates);\r\n    }\r\n    if (changes.view?.currentValue) {\r\n      this.showFileInTree(this.view.FileName);\r\n    }\r\n  }\r\n\r\n  openTemplate(path: string) {\r\n    this.dialogService.openCodeFile(path);\r\n  }\r\n\r\n  toggleItem(path: string) {\r\n    toggleInArray(path, this.toggledItems);\r\n  }\r\n\r\n  addFile(folder?: string) {\r\n    this.createTemplate.emit(folder);\r\n  }\r\n\r\n  private showFileInTree(file: string) {\r\n    if (file == null) { return; }\r\n    if (this.toggledItems.includes(file)) { return; }\r\n\r\n    const paths = file.split('/');\r\n    let pathFromRoot = '';\r\n    for (const path of paths) {\r\n      pathFromRoot = !pathFromRoot ? path : `${pathFromRoot}/${path}`;\r\n      if (this.toggledItems.includes(pathFromRoot)) { continue; }\r\n      this.toggleItem(pathFromRoot);\r\n    }\r\n  }\r\n\r\n}\r\n","import { TreeItem } from '../models/tree-item.model';\r\n\r\nexport function calculateTree(templates: string[]): TreeItem[] {\r\n  if (!templates) { return []; }\r\n\r\n  const tree: TreeItem[] = [];\r\n  for (const template of templates) {\r\n    let parent: TreeItem[] = tree;\r\n    const paths = template.split('/');\r\n    const last = paths[paths.length - 1];\r\n    let pathFromRoot = '';\r\n    for (let i = 0; i < paths.length; i++) {\r\n      const path = paths[i];\r\n      pathFromRoot += i ? `/${path}` : path;\r\n      const existing = parent.find(item => item.name === path);\r\n      if (existing) {\r\n        parent = existing.children;\r\n      } else {\r\n        const item: TreeItem = {\r\n          depth: i,\r\n          name: path,\r\n          pathFromRoot,\r\n          isFolder: path !== last,\r\n          ...(path !== last && { children: [] }),\r\n        };\r\n        parent.push(item);\r\n        parent = item.children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function toggleInArray<T>(item: T, array: T[]) {\r\n  const index = array.indexOf(item);\r\n  if (index === -1) {\r\n    array.push(item);\r\n  } else {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\n","export function toggleInArray(item: any, array: any[]) {\r\n  const index = array.indexOf(item);\r\n  if (index === -1) {\r\n    array.push(item);\r\n  } else {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'objectToArray' })\r\nexport class ObjectToArrayPipe implements PipeTransform {\r\n  transform(obj: object | Array<any>): Array<any> {\r\n    if (typeof obj !== typeof {}) { return obj as Array<any>; }\r\n    return Object.keys(obj).map(key => {\r\n      return (obj as any)[key];\r\n    });\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\">\r\n  <div *ngFor=\"let section of snippets | keyvalue\">\r\n\r\n    <div class=\"collapsible-header section\" [matTooltip]=\"'SourceEditorSnippets.' + section.key + '.Help' | translate\"\r\n      matTooltipShowDelay=\"750\" (click)=\"toggleSection(section)\">\r\n      <mat-icon>{{ toggledSections.includes(section) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n      <span>{{ 'SourceEditorSnippets.' + section.key + '.Title' | translate }}</span>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"toggledSections.includes(section)\">\r\n      <div *ngFor=\"let folder of section.value | keyvalue\">\r\n\r\n        <div class=\"collapsible-header folder\"\r\n          [matTooltip]=\"'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Help' | translate\"\r\n          matTooltipShowDelay=\"750\" (click)=\"toggleFolder(folder)\">\r\n          <mat-icon>{{ toggledFolders.includes(folder) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n          <span>{{ 'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Title' | translate }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledFolders.includes(folder)\">\r\n          <div class=\"snippet\" *ngFor=\"let snippet of (folder.value | objectToArray)\">\r\n\r\n            <div class=\"snippet-label\">\r\n              <div matRipple class=\"text\" [matTooltip]=\"snippet.snip\" matTooltipShowDelay=\"750\"\r\n                (click)=\"addSnippet(snippet.snip)\">\r\n                {{ snippet.label }}\r\n              </div>\r\n              <mat-icon *ngIf=\"snippet.more\" matTooltip=\"Show More\" matTooltipShowDelay=\"750\"\r\n                (click)=\"toggleMore(snippet)\">\r\n                {{ toggledMores.includes(snippet) ? 'more_vert' : 'more_horiz' }}\r\n              </mat-icon>\r\n              <mat-icon matTooltip=\"Show Help\" matTooltipShowDelay=\"750\" appClickStopPropagation\r\n                (click)=\"toggleInfo(snippet)\">\r\n                info\r\n              </mat-icon>\r\n            </div>\r\n\r\n            <div class=\"snippet-help\" *ngIf=\"toggledInfos.includes(snippet)\">\r\n              <div class=\"text\" [innerHTML]=\"snippet.help | safeHtml\"></div>\r\n              <div *ngFor=\"let link of snippet.links\">\r\n                <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n              </div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"toggledMores.includes(snippet)\">\r\n              <div *ngFor=\"let more of (snippet.more | objectToArray)\">\r\n\r\n                <div class=\"snippet-label\">\r\n                  <div matRipple class=\"text text-more\" [matTooltip]=\"more.snip\" matTooltipShowDelay=\"750\"\r\n                    (click)=\"addSnippet(more.snip)\">\r\n                    {{ more.label }}\r\n                  </div>\r\n                  <mat-icon matTooltip=\"Show Help\" matTooltipShowDelay=\"750\" appClickStopPropagation\r\n                    (click)=\"toggleInfo(more)\">\r\n                    info\r\n                  </mat-icon>\r\n                </div>\r\n\r\n                <div class=\"snippet-help snippet-help-more\" *ngIf=\"toggledInfos.includes(more)\">\r\n                  <div class=\"text\" [innerHTML]=\"more.help | safeHtml\"></div>\r\n                  <div *ngFor=\"let link of more.links\">\r\n                    <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </ng-container>\r\n\r\n          </div>\r\n        </ng-container>\r\n\r\n      </div>\r\n    </ng-container>\r\n\r\n  </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { toggleInArray } from './code-snippets.helpers';\r\n\r\n@Component({\r\n  selector: 'app-code-snippets',\r\n  templateUrl: './code-snippets.component.html',\r\n  styleUrls: ['./code-snippets.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CodeSnippetsComponent implements OnInit {\r\n  @Input() snippets: any;\r\n  @Output() insertSnippet: EventEmitter<any> = new EventEmitter();\r\n  toggledSections: any[] = [];\r\n  toggledFolders: any[] = [];\r\n  toggledInfos: any[] = [];\r\n  toggledMores: any[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  addSnippet(snippet: string) {\r\n    this.insertSnippet.emit(snippet);\r\n  }\r\n\r\n  toggleSection(set: any) {\r\n    toggleInArray(set, this.toggledSections);\r\n  }\r\n\r\n  toggleFolder(item: any) {\r\n    toggleInArray(item, this.toggledFolders);\r\n  }\r\n\r\n  toggleInfo(info: any) {\r\n    toggleInArray(info, this.toggledInfos);\r\n  }\r\n\r\n  toggleMore(more: any) {\r\n    toggleInArray(more, this.toggledMores);\r\n  }\r\n\r\n}\r\n","<div class=\"editor-root\" *ngIf=\"(templateVars$ | async) as data\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === explorer.templates }\" matTooltip=\"Templates\"\r\n      (click)=\"toggleExplorer(explorer.templates)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === explorer.snippets }\" matTooltip=\"Snippets\"\r\n      (click)=\"toggleExplorer(explorer.snippets)\">\r\n      <mat-icon>code</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-code-templates [hidden]=\"activeExplorer !== explorer.templates\" [view]=\"data.view\" [templates]=\"data.templates\"\r\n    (createTemplate)=\"createTemplate($event)\">\r\n  </app-code-templates>\r\n  <app-code-snippets [hidden]=\"activeExplorer !== explorer.snippets\" [snippets]=\"data.explorerSnipps\"\r\n    (insertSnippet)=\"changeInsertSnipp($event)\">\r\n  </app-code-snippets>\r\n\r\n  <app-ace-editor *ngIf=\"data.view\" [filename]=\"data.view.FileName\" [ngModel]=\"data.view.Code\"\r\n    (ngModelChange)=\"codeChanged($event)\" [snippets]=\"data.editorSnipps\" [toggleResize]=\"!this.activeExplorer\">\r\n  </app-ace-editor>\r\n\r\n  <button mat-fab mat-elevation-z24 matTooltip=\"Click to save or CTRL + S\" (click)=\"save()\">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, NgZone, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin, fromEvent, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SanitizeService } from '../../../../edit/eav-material-controls/adam/sanitize.service';\r\nimport { defaultControllerName, defaultTemplateName } from '../shared/constants/file-names.constants';\r\nimport { keyItems } from '../shared/constants/session.constants';\r\nimport { EditItem, SourceItem, } from '../shared/models/edit-form.model';\r\nimport { Context } from '../shared/services/context';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { SnackBarStackService } from '../shared/services/snack-bar-stack.service';\r\nimport { AceEditorComponent } from './ace-editor/ace-editor.component';\r\nimport { SourceView } from './models/source-view.model';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\n@Component({\r\n  selector: 'app-code-editor',\r\n  templateUrl: './code-editor.component.html',\r\n  styleUrls: ['./code-editor.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CodeEditorComponent implements OnInit, OnDestroy {\r\n  @ViewChild(AceEditorComponent) private aceEditorRef: AceEditorComponent;\r\n\r\n  explorer = {\r\n    templates: 'templates',\r\n    snippets: 'snippets'\r\n  };\r\n  activeExplorer = this.explorer.templates;\r\n  private view$ = new BehaviorSubject<SourceView>(null);\r\n  private templates$ = new BehaviorSubject<string[]>(null);\r\n  private explorerSnipps$ = new BehaviorSubject<any>(null);\r\n  private editorSnipps$ = new BehaviorSubject<any>(null);\r\n  templateVars$ = combineLatest([this.view$, this.templates$, this.explorerSnipps$, this.editorSnipps$]).pipe(\r\n    map(([view, templates, explorerSnipps, editorSnipps]) => ({ view, templates, explorerSnipps, editorSnipps })),\r\n  );\r\n\r\n  private viewKey: number | string; // templateId or path\r\n  private savedCode: string;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private snackBarStack: SnackBarStackService,\r\n    private sourceService: SourceService,\r\n    private snippetsService: SnippetsService,\r\n    private zone: NgZone,\r\n    private titleService: Title,\r\n    private dialogService: DialogService,\r\n    private sanitizeService: SanitizeService,\r\n  ) {\r\n    this.context.init(this.route);\r\n    this.calculateViewKey();\r\n    this.attachListeners();\r\n  }\r\n\r\n  ngOnInit() {\r\n    const view$ = this.sourceService.get(this.viewKey);\r\n    const templates$ = this.sourceService.getTemplates();\r\n    forkJoin([view$, templates$]).subscribe(([view, templates]) => {\r\n      this.view$.next(view);\r\n      this.savedCode = this.view$.value.Code;\r\n      this.titleService.setTitle(`${this.view$.value.FileName} - Code Editor`);\r\n      this.templates$.next(templates);\r\n      this.showCodeAndEditionWarnings(view, templates);\r\n\r\n      this.snippetsService.getSnippets(this.view$.value).then(res => {\r\n        this.explorerSnipps$.next(res.sets);\r\n        this.editorSnipps$.next(res.list);\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.view$.complete();\r\n    this.templates$.complete();\r\n    this.explorerSnipps$.complete();\r\n    this.editorSnipps$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    if (this.activeExplorer === explorer) {\r\n      this.activeExplorer = null;\r\n    } else {\r\n      this.activeExplorer = explorer;\r\n    }\r\n  }\r\n\r\n  createTemplate(folder?: string) {\r\n    let question = 'File name:';\r\n    let suggestion = defaultTemplateName;\r\n    if (folder === 'api' || folder?.startsWith('api/')) {\r\n      question = 'Controller name:';\r\n      suggestion = defaultControllerName;\r\n    }\r\n    let name = prompt(question, suggestion);\r\n    if (name === null || name.length === 0) { return; }\r\n\r\n    name = this.sanitizeService.sanitizePath(name);\r\n    if (folder != null) {\r\n      name = `${folder}/${name}`;\r\n    }\r\n    this.sourceService.createTemplate(name).subscribe(res => {\r\n      this.sourceService.getTemplates().subscribe(files => {\r\n        this.templates$.next(files);\r\n      });\r\n    });\r\n  }\r\n\r\n  changeInsertSnipp(snippet: any) {\r\n    this.aceEditorRef.insertSnippet(snippet);\r\n  }\r\n\r\n  codeChanged(code: string) {\r\n    this.view$.next({ ...this.view$.value, Code: code });\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    let codeToSave = this.view$.value.Code;\r\n    this.sourceService.save(this.viewKey, this.view$.value).subscribe({\r\n      next: res => {\r\n        if (!res) {\r\n          this.snackBar.open('Failed', null, { duration: 2000 });\r\n          return;\r\n        }\r\n        this.savedCode = codeToSave;\r\n        codeToSave = null;\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private calculateViewKey() {\r\n    // spm TODO: Move items for code-editor to the url?\r\n    const itemsRaw = sessionStorage.getItem(keyItems);\r\n    const editItems: EditItem[] | SourceItem[] = JSON.parse(itemsRaw);\r\n    const item = editItems[0];\r\n    this.viewKey = (item as EditItem).EntityId || (item as SourceItem).Path;\r\n  }\r\n\r\n  /** Show info about editions if other files with the same name exist */\r\n  private showCodeAndEditionWarnings(view: SourceView, files: string[]) {\r\n    const pathAndName = view.FileName;\r\n    const pathSeparator = pathAndName.indexOf('/') > -1 ? pathAndName.lastIndexOf('/') + 1 : 0;\r\n    const pathWithSlash = pathSeparator === 0 ? '' : pathAndName.substring(0, pathSeparator);\r\n    const fullName = pathAndName.substring(pathSeparator);\r\n    const name = fullName.substring(0, fullName.length - view.Extension.length);\r\n    const nameCode = name + '.code' + view.Extension;\r\n    // find out if we also have a code file\r\n    const codeFile = files.find(file => file === pathWithSlash + nameCode);\r\n    const otherEditions = files.filter(file => file.endsWith(fullName)).length - 1;\r\n\r\n    if (codeFile) {\r\n      this.snackBarStack\r\n        .add(`This template also has a code-behind file '${codeFile}'.`, 'Open')\r\n        .subscribe(() => {\r\n          this.dialogService.openCodeFile(codeFile);\r\n        });\r\n    }\r\n    if (otherEditions) {\r\n      this.snackBarStack\r\n        .add(`There are ${otherEditions} other editions of this. You may be editing an edition which is not the one you see.`, 'Help')\r\n        .subscribe(() => {\r\n          window.open('https://r.2sxc.org/polymorphism', '_blank');\r\n        });\r\n    }\r\n  }\r\n\r\n  private attachListeners() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent(window, 'beforeunload').subscribe((event: BeforeUnloadEvent) => {\r\n          if (this.savedCode === this.view$.value.Code) { return; }\r\n          event.preventDefault();\r\n          event.returnValue = ''; // fix for Chrome\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent(window, 'keydown').subscribe((event: KeyboardEvent) => {\r\n          const CTRL_S = event.keyCode === 83 && (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey);\r\n          if (!CTRL_S) { return; }\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.save(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: CodeEditorComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CodeEditorRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { SanitizeService } from '../../../../edit/eav-material-controls/adam/sanitize.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { AceEditorComponent } from './ace-editor/ace-editor.component';\r\nimport { CodeEditorRoutingModule } from './code-editor-routing.module';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\nimport { CodeSnippetsComponent } from './code-snippets/code-snippets.component';\r\nimport { ObjectToArrayPipe } from './code-snippets/object-to-array.pipe';\r\nimport { CodeTemplatesComponent } from './code-templates/code-templates.component';\r\nimport { DepthPaddingPipe } from './code-templates/depth-padding.pipe';\r\nimport { SortItemsPipe } from './code-templates/order-items.pipe';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\ndeclare const sxcVersion: string;\r\n\r\nexport function translateLoaderFactory(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, './i18n/code-editor.', `.js?${sxcVersion}`);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    ObjectToArrayPipe,\r\n    CodeTemplatesComponent,\r\n    AceEditorComponent,\r\n    DepthPaddingPipe,\r\n    SortItemsPipe,\r\n  ],\r\n  entryComponents: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    CodeTemplatesComponent,\r\n    AceEditorComponent,\r\n  ],\r\n  imports: [\r\n    CodeEditorRoutingModule,\r\n    SharedComponentsModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatSnackBarModule,\r\n    FormsModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    TranslateModule.forChild({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (translateLoaderFactory),\r\n        deps: [HttpClient],\r\n      },\r\n      defaultLanguage: 'en',\r\n      isolate: true,\r\n    }),\r\n  ],\r\n  providers: [\r\n    Context,\r\n    SourceService,\r\n    DialogService,\r\n    SnippetsService,\r\n    SanitizeService,\r\n    TranslateService,\r\n  ]\r\n})\r\nexport class CodeEditorModule { }\r\n"],"sourceRoot":"webpack:///"}