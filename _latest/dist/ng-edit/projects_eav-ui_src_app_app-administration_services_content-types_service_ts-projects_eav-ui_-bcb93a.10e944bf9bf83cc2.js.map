{"version":3,"file":"projects_eav-ui_src_app_app-administration_services_content-types_service_ts-projects_eav-ui_-bcb93a.10e944bf9bf83cc2.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","staticName","this","http","get","apiUrl","params","appId","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","Éµfac","ExportAppPartsService","constructor","context","dnnContext","getContentInfo","$2sxc","webApiAppPartsRoot","toString","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","i0","i1","i2","i3","ExportAppService","getAppInfo","webApiAppRoot","exportAppUrl","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","ImportAppService","importApp","changedName","retryOnDuplicate","switchMap","result","Messages","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","_angular_core__WEBPACK_IMPORTED_MODULE_4__","inject","DnnContext","HttpClient","Context","_angular_core__WEBPACK_IMPORTED_MODULE_1__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/services/http-service-base.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.dnnContext.$2sxc.http.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.context.appId}&zoneId=${this.context.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { inject, Injectable } from '@angular/core';\r\nimport { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { Context } from '../../shared/services/context';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n/**\r\n * Base class for all services that need to make HTTP calls.\r\n * Provides important typical information and services, especially\r\n * * apiUrl(name) - to get the full API URL\r\n * * appId - the current app id\r\n * * zoneId - the current zone id\r\n */\r\n@Injectable()\r\nexport class HttpServiceBase {\r\n\r\n  protected dnnContext = inject(DnnContext);\r\n  protected http = inject(HttpClient);\r\n  protected context = inject(Context);\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Convert a short 2sxc-url into the correct full URL on the system.\r\n   * @param name 2sxc-style short url\r\n   * @returns \r\n   */\r\n  protected apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  /**\r\n   * The current app id\r\n   */\r\n  protected get appId() { return this.context.appId.toString(); }\r\n\r\n  /**\r\n   * The current zone id\r\n   */\r\n  protected get zoneId() { return this.context.zoneId.toString(); }\r\n}"],"x_google_ignoreList":[]}