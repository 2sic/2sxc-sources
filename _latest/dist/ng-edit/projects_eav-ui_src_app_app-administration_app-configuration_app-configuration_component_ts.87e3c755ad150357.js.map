{"version":3,"file":"projects_eav-ui_src_app_app-administration_app-configuration_app-configuration_component_ts.87e3c755ad150357.js","mappings":"4eAOO,IAAMA,EAAoB,MAA3B,MAAOA,UAA4BC,IAUvCC,gBAAgBC,GACd,OAAOC,KAAKC,UAdG,yBAciC,CAC9CC,OAAQ,CAAEC,MAAOH,KAAKI,QACrBL,EACL,yEAdWH,KAAmBS,GAAnBT,EAAmB,0CAAnBA,EAAmBU,QAAnBV,EAAmBW,WAAA,SAAnBX,CAAoB,mBCN1B,MAAMY,EAAe,CAC1BC,SAAU,WACVC,UAAW,uFCCPC,MAFJ,eAEIA,CAFuB,sBAEvBA,CADuC,oBACvBA,MAAA,mBAAaA,QAC7BA,MAAA,cAAUA,MAAA,YACZA,UACAA,MAAA,sBACEA,MAAA,OAEEA,MADF,UACEA,CADwB,WACSA,MAAA,YAAKA,QAEpCA,MADF,WACEA,CAD+B,aACcA,MAAA,mBAAAA,MAAAC,GAAA,MAAAC,EAAAF,QAAA,OAAAA,MAASE,EAAAC,UAAAC,gBAA0BF,EAAAG,cAAc,GAACC,aAAc,GAAEN,MAAA,IAInHA,YAEEA,MADF,WACEA,CADwB,YACSA,MAAA,cAAOA,QAEtCA,MADF,WACEA,CAD+B,aACcA,MAAA,mBAAAA,MAAAC,GAAA,MAAAC,EAAAF,QAAA,OAAAA,MAASE,EAAAC,UAAAC,gBAA0BF,EAAAG,cAAc,GAACE,QAAS,GAAEP,MAAA,IAI9GA,YAEEA,MADF,WACEA,CADwB,YACSA,MAAA,eAAQA,QAEvCA,MADF,WACEA,CAD+B,aACcA,MAAA,mBAAAA,MAAAC,GAAA,MAAAC,EAAAF,QAAA,OAAAA,MAASE,EAAAC,UAAAC,gBAA0BF,EAAAG,cAAc,GAACG,SAAU,GAAER,MAAA,IAI/GA,YAEEA,MADF,WACEA,CADwB,YACSA,MAAA,UAAGA,QAElCA,MADF,WACEA,CAD+B,QAC5BA,MAAA,aAAMA,QACRA,MAAA,aAA6CA,MAAA,mBAAAA,MAAAC,GAAA,MAAAC,EAAAF,QAAA,OAAAA,MAASE,EAAAC,UAAAC,gBAA0BF,EAAAG,cAAc,GAACI,iBAAkB,GAChHT,MAAA,IACFA,QACAA,MAAA,QAAIA,MAAA,aAAKA,QACRA,MAAA,aAA6CA,MAAA,mBAAAA,MAAAC,GAAA,MAAAC,EAAAF,QAAA,OAAAA,MAASE,EAAAC,UAAAC,gBAA0BF,EAAAG,cAAc,GAACK,oBAAqB,GACnHV,MAAA,IACFA,QACAA,MAAA,QAAIA,MAAA,aAAKA,QACRA,MAAA,aAA6CA,MAAA,mBAAAA,MAAAC,GAAA,MAAAC,EAAAF,QAAA,OAAAA,MAASE,EAAAC,UAAAC,gBAA0BF,EAAAG,cAAc,GAACM,uBAAwB,GACtHX,MAAA,IAKRA,cACAA,MAAA,YACAA,MAAA,yBACEA,MAAA,6BAEEA,MADF,SACEA,CAD2G,kBAQxGA,MAAA,WAAIA,QAEPA,MAAA,WAAMA,MAAA,WACRA,UAEEA,MADF,UACEA,CADuE,kBAQpEA,MAAA,kBAAWA,QAEdA,MAAA,WAAMA,MAAA,eAGZA,0DApEcA,MAAA,IAAAA,MAAA,sCAAyGA,cAAAE,EAAAU,YAAA,OAAAC,EAAAX,EAAAG,cAAA,SAAAQ,EAAAP,cAQzGN,MAAA,GAAAA,MAAA,sCAAoGA,cAAAE,EAAAU,YAAA,OAAAE,EAAAZ,EAAAG,cAAA,SAAAS,EAAAP,SAQpGP,MAAA,GAAAA,MAAA,sCAAqGA,cAAAE,EAAAU,YAAA,OAAAG,EAAAb,EAAAG,cAAA,SAAAU,EAAAP,UASpGR,MAAA,GAAAA,MAAA,sCACLA,cAAA,IAAAE,EAAAU,YAAA,OAAAI,EAAAd,EAAAG,cAAA,SAAAW,EAAAP,iBAAA,KAGKT,MAAA,GAAAA,MAAA,sCACLA,cAAA,IAAAE,EAAAU,YAAA,OAAAK,EAAAf,EAAAG,cAAA,SAAAY,EAAAP,oBAAA,KAGKV,MAAA,GAAAA,MAAA,sCACLA,cAAA,IAAAE,EAAAU,YAAA,OAAAM,EAAAhB,EAAAG,cAAA,SAAAa,EAAAP,uBAAA,KAQgBX,MAAA,GAAAA,MAAA,8DACnBA,cAAA,OAAAE,EAAAiB,sBAAAnB,OAICA,cAAA,mBAAAoB,EAAAlB,EAAAmB,qBAAAnB,KAAA,MAAAkB,EAAAE,YAAA,KAAAF,EAAAE,YAAAC,gBAAAC,SAAA,MAQDxB,MAAA,GAAAA,MAAA,OAAAE,EAAAuB,oBAAAzB,OAICA,cAAA,mBAAA0B,EAAAxB,EAAAmB,qBAAAnB,IAAA,KAAAwB,EAAAC,aAAAC,MAAAJ,SAAA,OCrCH,IAAMK,EAA6B,MAApC,MAAOA,EAGXC,GACAC,GACAC,GAIAC,YACUC,EACAC,GADA9C,KAAA6C,UACA7C,KAAA8C,WAVV9C,KAAA+C,eAAiBC,MAAMC,WAEvBjD,MAAAyC,KAAmBS,KAAUtD,GAC7BI,MAAA0C,KAAmBQ,KAAUC,KAC7BnD,MAAA2C,KAAgBO,KAAUE,KAE1BpD,KAAA8B,uBAAsBuB,OAAO,IAS7BrD,KAAAgB,YAAchB,MAAK0C,EAAiBY,UAAUC,KAAaC,aAAaC,sBAAkBC,GAE1F1D,MAAA2D,KAAWN,OAAO,GAElBrD,KAAAgC,uBAAsB4B,OAAS,KACb5D,MAAK2D,IACd3D,MAAKyC,EAAiB3C,qBAAgB4D,KAarC1D,KAAAc,aAAYoC,KAAUW,KAtB9B7D,KAAK8B,oBAAuB9B,KAAK8D,WACnC,CAIAH,GAOAI,WACE/D,MAAK2C,EAAcqB,iBAAiB,KAClChE,MAAK2D,EAASM,OAAOC,GAASA,EAAQ,EAAC,EAE3C,CAEAC,cACEnE,KAAK8C,SAASsB,SAChB,CAIAC,GAAOC,GACL,MAAO,IAAMtE,MAAK2C,EAAc4B,YAAYD,EAC9C,CAEAR,YACE,IAAIQ,KAAMjB,OAAO,IAEjB,OAAArD,MAAK0C,EAAiB8B,OADHjB,KAAaC,aAAaC,kBACJgB,UAAUC,IAE7CA,EAAavC,OAAS,GACxBnC,MAAK2C,EAAcgC,YAAY,CAAC,aAAc,CAC5CC,YAAa,CAAEC,MAAO,qCAEtBH,EAAavC,OAAS,GACxBnC,MAAK2C,EAAcgC,YAAY,CAAC,aAAc,CAC5CC,YAAa,CAAEC,MAAO,sCAG1BP,EAAIQ,IAAI9E,MAAKqE,EACX,WAAQU,KAAiB,CACvBC,MAAO,CAACC,IAASC,OAAOR,EAAa,GAAGS,UAE3C,GAGIb,CACT,CAEAlC,oBACE,OAAOpC,MAAKqE,EACVe,IAAaC,UACXrF,KAAK6C,QAAQzC,MACb,qBAAqBJ,KAAK+C,iBAAiBuC,QAAQC,IAAIC,SAASxF,KAAK6C,QAAQzC,UAGnF,CAEAmB,YAAY2C,GACV,MAAiB,KAAVA,EAAe,IAAMA,GAAS,GACvC,iDA5EW1B,GAA6B7B,MAAA8E,KAAA9E,MAAA+E,MAAA,oCAA7BlD,EAA6BmD,UAAA,iCAAAC,OAAA,CAAA7C,eAAA,sBAAA8C,YAAA,EAAAC,SAAA,CAAAnF,OAAAoF,MAAA,EAAAC,KAAA,EAAAC,OAAA,wdAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GDjC1CxF,MAAA,EAAA0F,EAAA,yBAAA1F,MAAAyF,EAAApF,cAAA,qBCyBIsF,KAAaC,yBACbC,KAAaC,KACbC,KAAeC,KACfC,IAAcC,IACdC,IACAC,KAAuBC,OAAA,sEAGdxE,CAA6B,wCC9BlC7B,MAAA,kIAGAA,MAAA,mIALJA,MAAA,WAIEA,MAHA,EAAAsG,EAAA,IAGAtG,CAHgB,EAAAuG,EAAA,KAMhBvG,MAAA,WAAIA,MAAA,SAAuDA,MAAA,UAAIA,QAAIA,MAAA,QACrEA,+BAPEA,cAAAwG,EAAAC,SAAA,MAGAzG,cAAAwG,EAAAE,UAAA,iCA+BU1G,MADF,OACEA,CADE,QACEA,MAAA,YAAMA,QAGNA,MAFJ,OAEIA,CAFA,SAEAA,CAD2F,iBAOxFA,MAAA,UAGPA,YAGIA,MAFJ,OAEIA,CAFA,SAEAA,CAD2F,iBAOxFA,MAAA,WAELA,UAMEA,MALF,UAKEA,CADD,kBAOIA,MAAA,UAITA,+CArCOA,MAAA,GAAAA,MAAA,OAAAwG,EAAAG,6BAAA3G,OAICA,cAAA,mBAAA4G,EAAAJ,EAAAK,gBAAA,KAAAD,EAAAE,sBAAA,MAQD9G,MAAA,GAAAA,MAAA,OAAAwG,EAAAO,6BAAA/G,OAICA,cAAA,mBAAAgH,EAAAR,EAAAK,gBAAA,KAAAG,EAAAC,sBAAA,MAOFjH,MAAA,GAAAA,MAAA,OAAAwG,EAAAU,YAAAV,EAAA5D,aAAAC,aAAAsE,gBAAAnH,OAOEA,cAAA,mBAAAoH,EAAAZ,EAAAK,gBAAA,KAAAO,EAAAC,4BAAA,6BAoDRrH,MAAA,6BAxCEA,MADF,OACEA,CADE,QACEA,MAAA,UAAIA,QAGJA,MAFJ,OAEIA,CAFA,SAEAA,CADuF,iBAOpFA,MAAA,UAGPA,YAGIA,MAFJ,OAEIA,CAFA,SAEAA,CADuF,iBAOpFA,MAAA,WAELA,UAMEA,MALF,UAKEA,CADD,kBAOIA,MAAA,UAITA,cACAA,MAAA,GAAAsH,GAAA,2EAtCOtH,MAAA,GAAAA,MAAA,OAAAwG,EAAAe,2BAAAvH,OAICA,cAAA,mBAAA4G,EAAAJ,EAAAK,gBAAA,KAAAD,EAAAE,sBAAA,MAQD9G,MAAA,GAAAA,MAAA,OAAAwG,EAAAgB,2BAAAxH,OAICA,cAAA,mBAAAgH,EAAAR,EAAAK,gBAAA,KAAAG,EAAAC,sBAAA,MAOFjH,MAAA,GAAAA,MAAA,OAAAwG,EAAAU,YAAAV,EAAA5D,aAAAC,aAAAsE,gBAAAnH,OAOEA,cAAA,mBAAAoH,EAAAZ,EAAAK,gBAAA,KAAAO,EAAAC,4BAAA,MAQOrH,MAAA,GAAAA,MAAA,mBAAAyH,0BA6CfzH,MAAA,yBACAA,MAAA,6BAzCEA,MADF,OACEA,CADE,QACEA,MAAA,GAAqCA,QAGrCA,MAFJ,OAEIA,CAFA,SAEAA,CADyF,iBAOtFA,MAAA,UAGPA,YAGIA,MAFJ,OAEIA,CAFA,SAEAA,CADyF,iBAOtFA,MAAA,WAELA,UAMEA,MALF,UAKEA,CADD,kBAOIA,MAAA,UAITA,cAEAA,MADA,GAAA0H,GAAA,sBACA1H,CAD2C,GAAA2H,GAAA,uFAxCrC3H,MAAA,GAAAA,MAAAwG,EAAApE,eAAAuC,QAAAC,IAAAC,MAEC7E,MAAA,GAAAA,MAAA,OAAAwG,EAAAoB,8BAAA5H,OAICA,cAAA,mBAAAe,EAAAyF,EAAAK,gBAAA,KAAA9F,EAAA+F,sBAAA,MAQD9G,MAAA,GAAAA,MAAA,OAAAwG,EAAAqB,8BAAA7H,OAICA,cAAA,mBAAAgB,EAAAwF,EAAAK,gBAAA,KAAA7F,EAAAiG,sBAAA,MAOFjH,MAAA,GAAAA,MAAA,OAAAwG,EAAAU,YAAAV,EAAA5D,aAAAC,aAAAiF,UAAA9H,OAOEA,cAAA,mBAAAiB,EAAAuF,EAAAK,gBAAA,KAAA5F,EAAAoG,4BAAA,MAQOrH,MAAA,GAAAA,MAAA,mBAAA+H,GACA/H,cAAA,mBAAAyH,8BA2CbzH,MADF,OACEA,CADE,QACEA,MAAA,YAAMA,QAGNA,MAFJ,OAEIA,CAFA,SAEAA,CAD6F,iBAO1FA,MAAA,UAGPA,YAGIA,MAFJ,OAEIA,CAFA,SAEAA,CAD6F,iBAO1FA,MAAA,WAELA,UAMEA,MALF,UAKEA,CADD,kBAOIA,MAAA,UAITA,+CArCOA,MAAA,GAAAA,MAAA,OAAAwG,EAAAwB,8BAAAhI,OAICA,cAAA,mBAAA4G,EAAAJ,EAAAK,gBAAA,KAAAD,EAAAqB,uBAAA,MAQDjI,MAAA,GAAAA,MAAA,OAAAwG,EAAA0B,8BAAAlI,OAICA,cAAA,mBAAAgH,EAAAR,EAAAK,gBAAA,KAAAG,EAAAmB,uBAAA,MAOFnI,MAAA,GAAAA,MAAA,OAAAwG,EAAAU,YAAAV,EAAA5D,aAAAC,aAAAuF,iBAAApI,OAOEA,cAAA,mBAAAoH,EAAAZ,EAAAK,gBAAA,KAAAO,EAAAiB,6BAAA,6BAoDRrI,MAAA,6BAxCEA,MADF,OACEA,CADE,QACEA,MAAA,UAAIA,QAGJA,MAFJ,OAEIA,CAFA,SAEAA,CADyF,iBAOtFA,MAAA,UAGPA,YAGIA,MAFJ,OAEIA,CAFA,SAEAA,CADyF,iBAOtFA,MAAA,WAELA,UAMEA,MALF,UAKEA,CADD,kBAOIA,MAAA,UAITA,cACAA,MAAA,GAAAsI,GAAA,2EAtCOtI,MAAA,GAAAA,MAAA,OAAAwG,EAAA+B,4BAAAvI,OAICA,cAAA,mBAAA4G,EAAAJ,EAAAK,gBAAA,KAAAD,EAAAqB,uBAAA,MAQDjI,MAAA,GAAAA,MAAA,OAAAwG,EAAAgC,4BAAAxI,OAICA,cAAA,mBAAAgH,EAAAR,EAAAK,gBAAA,KAAAG,EAAAmB,uBAAA,MAOFnI,MAAA,GAAAA,MAAA,OAAAwG,EAAAU,YAAAV,EAAA5D,aAAAC,aAAAuF,iBAAApI,OAOEA,cAAA,mBAAAoH,EAAAZ,EAAAK,gBAAA,KAAAO,EAAAiB,6BAAA,MAQOrI,MAAA,GAAAA,MAAA,mBAAAyH,0BA6CfzH,MAAA,yBACAA,MAAA,6BAzCEA,MADF,OACEA,CADE,QACEA,MAAA,GAAqCA,QAGrCA,MAFJ,OAEIA,CAFA,SAEAA,CAD2F,iBAOxFA,MAAA,UAGPA,YAGIA,MAFJ,OAEIA,CAFA,SAEAA,CAD2F,iBAOxFA,MAAA,WAELA,UAMEA,MALF,UAKEA,CADD,kBAOIA,MAAA,UAITA,cAEAA,MADA,GAAAyI,GAAA,sBACAzI,CAD2C,GAAA0I,GAAA,uFAxCrC1I,MAAA,GAAAA,MAAAwG,EAAApE,eAAAuC,QAAAC,IAAAC,MAEC7E,MAAA,GAAAA,MAAA,OAAAwG,EAAAmC,+BAAA3I,OAICA,cAAA,mBAAAe,EAAAyF,EAAAK,gBAAA,KAAA9F,EAAAkH,uBAAA,MAQDjI,MAAA,GAAAA,MAAA,OAAAwG,EAAAoC,+BAAA5I,OAICA,cAAA,mBAAAgB,EAAAwF,EAAAK,gBAAA,KAAA7F,EAAAmH,uBAAA,MAOFnI,MAAA,GAAAA,MAAA,OAAAwG,EAAAU,YAAAV,EAAA5D,aAAAC,aAAAgG,WAAA7I,OAOEA,cAAA,mBAAAiB,EAAAuF,EAAAK,gBAAA,KAAA5F,EAAAoH,6BAAA,MAQOrI,MAAA,GAAAA,MAAA,mBAAA+H,GACA/H,cAAA,mBAAAyH,6CAsBrBzH,MADF,OACEA,CADE,QACEA,MAAA,YAAMA,QAERA,MADF,OACEA,CADE,eACsBA,MAAA,mBAAAA,MAAA8I,GAAA,MAAAtC,EAAAxG,MAAA,UAAAA,MAASwG,EAAAuC,qBAAoB,GACnD/I,MAAA,cAAUA,MAAA,iBAGhBA,wDAIEA,MADF,OACEA,CADE,QACEA,MAAA,UAAIA,QAENA,MADF,OACEA,CADE,eACsBA,MAAA,mBAAAA,MAAAgJ,GAAA,MAAAxC,EAAAxG,MAAA,UAAAA,MAASwG,EAAAyC,mBAAkB,GACjDjJ,MAAA,cAAUA,MAAA,iBAGhBA,qCAoFUA,MAAA,iDAGAA,MAAA,iDADFA,MAHA,EAAAkJ,GAAA,IAGAlJ,CAHgB,EAAAmJ,GAAA,2BAAhBnJ,MAAAwG,EAAAC,SAAA,MAGAzG,cAAAwG,EAAA4C,MAAA,iCA/cZpJ,MAAA,EAAAqJ,EAAA,aAeMrJ,MAJN,UAIMA,CAJqB,eAIrBA,CAFuB,sBAEvBA,CADuC,oBACvBA,MAAA,cAAQA,QACxBA,MAAA,cAAUA,MAAA,cACZA,UAEEA,MADF,qBACEA,CADgB,OAEdA,MAAA,6LAEAA,MAAA,UAAuDA,MAAA,WACzDA,UAGIA,MAFJ,aAEIA,CAF4C,WAE5CA,CADK,SAEHA,MAAA,SACAA,MAAA,SAAIA,MAAA,sBAAeA,QACnBA,MAAA,SAAIA,MAAA,sBAERA,YACAA,MAAA,YA2FEA,MAzFA,GAAAsJ,GAAA,UAyFAtJ,CAzFgB,GAAAuJ,GAAA,KAyFhBvJ,CA7CiB,GAAAwJ,GAAA,MA4FvBxJ,YACAA,MAAA,YACAA,MAAA,yBACEA,MAAA,8BAOEA,MANF,UAMEA,CADD,kBAC4BA,MAAA,oBAAaA,QACxCA,MAAA,WAAMA,MAAA,gCAGZA,cAIIA,MAFJ,gBAEIA,CAFuB,uBAEvBA,CADuC,qBACvBA,MAAA,gCAAyBA,QACzCA,MAAA,eAAUA,MAAA,gBACZA,UAEEA,MADF,sBACEA,CADgB,QAEdA,MAAA,gLAEAA,MAAA,UAAuDA,MAAA,WACzDA,UAGIA,MAFJ,aAEIA,CAF4C,WAE5CA,CADK,SAEHA,MAAA,SACAA,MAAA,SAAIA,MAAA,uBAAgBA,QACpBA,MAAA,SAAIA,MAAA,uBAERA,YACAA,MAAA,YA2FEA,MAzFA,GAAAyJ,GAAA,UAyFAzJ,CAzFgB,GAAA0J,GAAA,KAyFhB1J,CA7CiB,GAAA2J,GAAA,MA4FvB3J,YACAA,MAAA,YACAA,MAAA,yBACEA,MAAA,8BAOEA,MANF,UAMEA,CADD,kBAC4BA,MAAA,oBAAaA,QACxCA,MAAA,WAAMA,MAAA,iCAGZA,cAYAA,MAVA,GAAA4J,GAAA,yBAAA5J,MAUAA,CAVyB,GAAA6J,GAAA,yBAAA7J,OAoB3BA,QACAA,MAAA,YACEA,MAAA,oCAIIA,MAFJ,gBAEIA,CAFuB,uBAEvBA,CADuC,qBACvBA,MAAA,kBAAWA,QAC3BA,MAAA,eAAUA,MAAA,WACZA,UAEEA,MADF,sBACEA,CADgB,QACbA,MAAA,yDAAkDA,QACrDA,MAAA,+BACFA,QACAA,MAAA,YACAA,MAAA,yBACEA,MAAA,8BAQEA,MAPF,UAOEA,CADD,kBAQIA,MAAA,WAAIA,QAEPA,MAAA,WAAMA,MAAA,sBAGZA,cAIIA,MAFJ,gBAEIA,CAFuB,uBAEvBA,CADuC,qBACvBA,MAAA,eAAQA,QACxBA,MAAA,eAAUA,MAAA,mBACZA,UAEEA,MADF,sBACEA,CADgB,QACbA,MAAA,8EAAuEA,QAC1EA,MAAA,+BACFA,QACAA,MAAA,YACAA,MAAA,yBACEA,MAAA,+BAEJA,UAIIA,MAFJ,iBAEIA,CAFuB,wBAEvBA,CADuC,sBACvBA,MAAA,mBAAWA,QAC3BA,MAAA,gBAAUA,MAAA,cACZA,UAEEA,MADF,uBACEA,CADgB,SACbA,MAAA,gEACLA,UACAA,MAAA,aACAA,MAAA,0BACEA,MAAA,+BAOEA,MANF,WAMEA,CADD,mBAQIA,MAAA,cAAMA,QAETA,MAAA,YACEA,MAAA,0BACAA,MAAA,IAAA8J,GAAA,KASJ9J,UACAA,MAAA,+BAMEA,MADF,WACEA,CADoG,mBASlGA,MAAA,gBACFA,QACAA,MAAA,YAAMA,MAAA,4BAIdA,4CAzeAA,MAAAwG,EAAAC,UAAAD,EAAAE,UAAA,MAkCU1G,MAAA,IAAAA,MAAAwG,EAAAC,SAAA,OA4CAzG,cAAAwG,EAAAE,UAAA,OA6CA1G,cAAAwG,EAAA4C,MAAA,OAkDkBpJ,MAAA,GAAAA,MAAA,uCAEpBA,cAAA,OAAAwG,EAAAuD,aAAAvD,EAAA3G,aAAAC,UAAAE,OAgCEA,MAAA,IAAAA,MAAAwG,EAAAC,SAAA,OA4CAzG,cAAAwG,EAAAE,UAAA,OA6CA1G,cAAAwG,EAAA4C,MAAA,OAkDkBpJ,MAAA,GAAAA,MAAA,uCAEpBA,cAAA,OAAAwG,EAAAuD,aAAAvD,EAAA3G,aAAAE,WAAAC,OAiCsBA,MAAA,IAAAA,MAAA,iBAAAwG,EAAApE,gBASDpC,MAAA,IAA0CA,MAA1C,wCAA0CA,CAAD,aAI1CA,MAAA,GAAAA,MAAA,yCAMpBA,cAAA,YAAAwG,EAAAwD,qBAHAhK,MAAA,OAAAwG,EAAAyD,yBAAAjK,OAQEA,cAAA,mBAAAkK,EAAA1D,EAAAK,gBAAA,KAAAqD,EAAAC,qBAAA,MAkBmBnK,MAAA,IAA0CA,MAA1C,wCAA0CA,CAAD,aAI1CA,MAAA,GAAAA,MAAA,kCAcAA,MAAA,IAAAA,MAAA,4DAEpBA,QAGAA,MAHA,OAAAwG,EAAA4D,uBAAApK,MAGAA,CAH+B,YAAAwG,EAAApE,eAAAuC,QAAA0F,OAAAC,gBAS7BtK,cAAA,WAAAwG,EAAApE,eAAAuC,QAAAC,IAAA2F,YAAAC,OAAA,MAOAxK,MAAA,GAAAA,MAAAwG,EAAApE,eAAAuC,QAAA0F,OAAAC,gBAAA,OAWFtK,cAAA,uEAICA,cAAA,OAAAwG,EAAAiE,6BAAAjE,EAAAkE,oBAAA1K,OAECA,cAAA,iBAAAwG,EAAAkE,qBCxaL,IAAMC,GAAyB,MAAhC,MAAOA,EAEXC,GACAC,GAoCAC,GACAC,GACAC,GACAhJ,GAEAgB,GAgCAf,YACUC,EACAC,EACA8I,EACAC,EACAC,GAJA9L,KAAA6C,UACA7C,KAAA8C,WACA9C,KAAA4L,YACA5L,KAAA6L,mBACA7L,KAAA8L,oBA/EV9L,MAAAuL,KAAarI,KAAU6I,KACvB/L,MAAAwL,KAAmBtI,KAAU8I,MAI7BhM,KAAAuD,aAAeA,KACfvD,KAAAQ,aAAeA,EACfR,KAAAiM,qBAAuBA,KACvBjM,KAAAkM,UAAYA,IAMZlM,KAAAuI,+BAA8BlF,OAAO,IACrCrD,KAAAwI,+BAA8BnF,OAAO,IACrCrD,KAAAsH,8BAA6BjE,OAAO,IACpCrD,KAAAkI,4BAA2B7E,OAAO,IAClCrD,KAAA2I,+BAA8BtF,OAAO,IACrCrD,KAAAsJ,gCAA+BjG,OAAO,IACtCrD,KAAAkJ,6BAA4B7F,OAAO,IACnCrD,KAAAuJ,gCAA+BlG,OAAO,IACtCrD,KAAA6I,+BAA8BxF,OAAO,IACrCrD,KAAA0H,8BAA6BrE,OAAO,IACpCrD,KAAAmI,4BAA2B9E,OAAO,IAClCrD,KAAAmJ,6BAA4B9F,OAAO,IAGnCrD,KAAAmM,qBAAuB,IAAIC,IAEpBpM,KAAAqM,kBAAmB,EACnBrM,KAAA8F,YAAWwG,OAAOC,KAEfvM,KAAA2K,kBAAoB3K,KAAK8F,SAAS0G,UAAUC,IAAaC,YACzD1M,KAAA2M,WAAa3M,KAAK8F,SAAS0G,UAAUC,IAAaG,uBAClD5M,KAAAqL,iBAAmBrL,KAAK8F,SAAS0G,UAAUC,IAAaI,uBAElE7M,MAAAyL,KAAuBvI,KAAUtD,GACjCI,MAAA0L,KAAuBxI,KAAUC,KACjCnD,MAAA2L,KAAmBzI,KAAU4J,KAC7B9M,MAAA2C,KAAgBO,KAAUE,KAE1BpD,MAAA2D,KAAWN,OAAO,GAElBrD,KAAA+M,SAAQnJ,OAAS,KACC5D,MAAK2D,IACd3D,MAAKyL,EAAqB3L,qBAAgB4D,KAGnD1D,KAAAwH,gBAAe5D,OAAS,KACtB,MAAMoJ,EAAkBhN,KAAK+M,OAAL/M,GACxB,IAAKgN,EACH,OAAO,KAET,MAAMC,EAAQD,GAAiB/K,YACzBiL,EAAa3J,KAAa4J,YAAYT,WAAWU,gBAgBvD,MAd0C,CACxCtC,mBAAoBkC,EAAgB1K,aAAaC,MAAM8K,OAAOC,GAAKA,EAAEC,MAAM/H,OAAS0H,GAAY/K,OAChGsF,oBAAqBzH,KAAKqH,UACtB4F,EAAMO,eAAeH,OAAOC,GAAKA,EAAEG,sBAAwBxB,KAAqByB,MAAMvL,OACtF8K,EAAMO,eAAeH,OAAOC,IAAMA,EAAEG,qBAAqBtL,OAC7DyF,oBAAqBqF,EAAMU,aAAaxL,OACxC6F,0BAA2BgF,EAAgBY,SAASD,aAAaxL,OACjEyG,qBAAsB5I,KAAKqH,UACvB4F,EAAMY,gBAAgBR,OAAOC,GAAKA,EAAEG,sBAAwBxB,KAAqByB,MAAMvL,OACvF8K,EAAMY,gBAAgBR,OAAOC,IAAMA,EAAEG,qBAAqBtL,OAC9D2G,qBAAsBmE,EAAMa,cAAc3L,OAC1C6G,2BAA4BgE,GAAiBY,SAASE,cAAc3L,UAatEnC,KAAKsH,2BAA6BtH,KAAK+N,gBAAgBxK,KAAaC,aAAawK,eAAgB/B,KAAqB1G,KACtHvF,KAAKuI,4BAA8BvI,KAAK+N,gBAAgBxK,KAAaC,aAAawK,eAAgB/B,KAAqB1G,KACvHvF,KAAKkI,yBAA2BlI,KAAK+N,gBAAgBxK,KAAaC,aAAawK,eAAgB/B,KAAqByB,MACpH1N,KAAK2I,4BAA8B3I,KAAK+N,gBAAgBxK,KAAaC,aAAayK,gBAAiBhC,KAAqB1G,KACxHvF,KAAKsJ,6BAA+BtJ,KAAK+N,gBAAgBxK,KAAaC,aAAayK,gBAAiBhC,KAAqB1G,KACzHvF,KAAKkJ,0BAA4BlJ,KAAK+N,gBAAgBxK,KAAaC,aAAayK,gBAAiBhC,KAAqByB,MACtH1N,KAAKwI,4BAA8BxI,KAAKkO,iBAAiB3K,KAAaC,aAAaiF,UACnFzI,KAAKuJ,6BAA+BvJ,KAAKkO,iBAAiB3K,KAAaC,aAAagG,WACpFxJ,KAAK6I,4BAA8B7I,KAAKmO,gBAAgB5K,KAAaC,aAAauF,iBAClF/I,KAAKmJ,0BAA4BnJ,KAAKmO,gBAAgB5K,KAAaC,aAAauF,iBAChF/I,KAAK0H,2BAA6B1H,KAAKmO,gBAAgB5K,KAAaC,aAAasE,gBACjF9H,KAAKmI,yBAA2BnI,KAAKmO,gBAAgB5K,KAAaC,aAAasE,eACjF,CAEA/D,WACE/D,MAAK2C,EAAcqB,iBAAiB,KAClChE,MAAK2D,EAASM,OAAOC,GAASA,EAAQ,EAAC,GAGzClE,MAAK2L,EAAiByC,cAAc3J,UAAW1B,IAC7C/C,KAAK+C,eAAiBA,EACtB,MAAMsL,EAAWtL,EAAeuC,QAAQC,IAAI+I,cAC5CtO,KAAKoH,SAAWiH,IAAanC,IAAUqC,OACvCvO,KAAKqH,UAAYgH,IAAanC,IAAUwB,KACxC1N,KAAK+J,MAAQsE,IAAanC,IAAU3G,KAExC,CAEApB,cACEnE,KAAK8C,SAASsB,SAChB,CAEAC,GAAOC,EAAaM,EAAyC4J,GAC3D,IAAIC,EAAS,IAAMzO,MAAK2C,EAAc4B,YAAYD,GAClD,OAAIM,IACF6J,GAAU,IAAI,IAAIC,gBAAgB9J,GAAa+J,cAE7CH,IACFC,GAAU,iBAAiBD,KAEtBC,CACT,CAIAV,gBAAgBa,EAAoBC,GAClC,MAAMvK,KAAMjB,OAAO,IACnB,OAAArD,MAAK0L,EAAqBlH,OAAOoK,GAAYnK,UAAUC,IACrD,MAAMoK,EAAyBpK,EAAa2I,OAAOC,GACjDuB,IAAwB5C,KAAqB1G,KACxC+H,EAAEG,oBACHH,EAAEG,sBAAwBxB,KAAqByB,MAErD,GAAIoB,EAAuB3M,OAAS,EAClCmC,EAAIQ,IAAI9E,MAAKqE,EAAO,YAAa,CAAEQ,MAAO,oCAAsC+J,QAC3E,CACL,MAAMG,EAAuBD,EAAuB,GACpDxK,EAAIQ,IAAI9E,MAAKqE,EACX,WAAQU,KAAiB,CACvBC,MAAO,CACmB,MAAxB+J,EACI9J,IAAS+J,YAAYJ,EAAY,IAC7BC,IAAwB5C,KAAqByB,MAAQ,CACvDD,oBAAqBxB,KAAqByB,QAG5CzI,IAASC,OAAO6J,EAAqB5J,UAIjD,IAGKb,CACT,CAIA6J,gBAAgBS,GACd,MAAMtK,KAAMjB,OAAO,IACnB,OAAArD,MAAK0L,EAAqBlH,OAAOoK,GAAYnK,UAAUC,IACrD,GAAIA,EAAavC,OAAS,EACxBmC,EAAIQ,IAAI9E,MAAKqE,EAAO,YAAa,CAAEQ,MAAO,oCAAsC+J,QAC3E,CACL,MAAMK,EAAuBvK,EAAa,GAC1CJ,EAAIQ,IAAI9E,MAAKqE,EACX,WAAQU,KAAiB,CACvBC,MAAO,CACmB,MAAxBiK,EACIhK,IAAS+J,YAAYJ,GACrB3J,IAASC,OAAO+J,EAAqB9J,UAIjD,IAGKb,CACT,CAGA4J,iBAAiBU,GACf,MAAMtK,KAAMjB,OAAO,IACnB,OAAArD,MAAK0L,EAAqBlH,OAAOoK,GAAYnK,UAAUC,IAEnDJ,EAAIQ,IADFJ,EAAavC,OAAS,EAChBnC,MAAKqE,EAAO,YAAa,CAAEQ,MAAO,mCAAqC+J,GACtElK,EAAavC,OAAS,EACvBnC,MAAKqE,EAAO,YAAa,CAAEQ,MAAO,oCAAsC+J,GAExE5O,MAAKqE,EACX,WAAQU,KAAiB,CACvBC,MAAO,CAACC,IAASC,OAAOR,EAAa,GAAGS,UAE3C,GAIEb,CACT,CAEAsG,yBACE,OAAO5K,MAAKqE,EACV,WAAQU,KACNmK,IAAgBC,wBAAwBnP,KAAK6C,QAAQzC,UAG3D,CAEAwJ,mBACE,MAAMwF,EAAiBpP,KAAK+C,eAAeuC,QAAQoI,KAAK2B,WACxDrP,MAAKuL,EAAW+D,sBAAsBF,EAAeG,OAAQH,EAAeI,MAAO,MACrF,CAEA9F,qBACE,MAAM+F,EAAmBzP,KAAK+C,eAAeuC,QAAQoK,OAAOL,WAC5DrP,MAAKuL,EAAW+D,sBAAsBG,EAAiBF,OAAQE,EAAiBD,MAAO,MACzF,CAEA3H,YAAY+G,GACV,OAAO5O,MAAKqE,EAAO,UAAUuK,IAC/B,CAEA7D,uBACE,OAAO/K,MAAKqE,EAAOsL,IAAgBtK,UAAUrF,KAAK6C,QAAQzC,OAC5D,CAEAgL,6BAA6BwE,GAC3B,OAAIA,EACK5P,MAAKqE,EAAO,wBAEZrE,MAAKqE,EAAO,4BACvB,CAEAqG,aAAamF,GACX,OAAO7P,MAAKqE,EAAO,WAAWwL,IAChC,iDA9OWvE,GAAyB3K,MAAA8E,KAAA9E,MAAA+E,MAAA/E,MAAA4F,MAAA5F,0BAAA,oCAAzB2K,EAAyB3F,UAAA,4BAAAE,YAAA,EAAAC,SAAA,CAAAnF,OAAAoF,MAAA,EAAAC,KAAA,EAAAC,OAAA,07EAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDrDtCxF,MAAA,EAAAmP,GAAA,QA4eAnP,MAAA,yBA5eAA,MAAAyF,EAAAoB,eAAA,qBCwCIlB,KAAaG,yBACbD,KAAaG,KACbD,KAAeG,eACfD,IAAcmJ,IACdC,KACAxN,EACAyN,IACAC,KAEApJ,IACAC,KAAuBC,OAAA,sSAGdsE,CAAyB,yFC9CtC,IAAI6E,EAAS,EACb,MAAMC,EAAsB,oBAEtBC,EAAY,IAAIC,IACtB,IAIMC,EAAoB,MAA1B,MAAMA,SACOvQ,KAAKO,UAAI,SAAAF,GAAA,WAAAA,GAA+FkQ,EAAoB,CAAqD,QACjLvQ,KAAKwQ,UADyF7P,MAAE,CAAA8P,KACJF,EAAoB5K,UAAA,mBAAAE,YAAA,EAAAC,SAAA,CADlBnF,OAAEoF,MAAA,EAAAC,KAAA,EAAAE,SAAA,SAAAC,EAAAC,GAAA,EAAAY,OAAA,srGAAA0J,cAAA,EAAAC,gBAAA,GAC44G,EACx/G,OAHKJ,CAAoB,KASpBK,EAAQ,MAAd,MAAMA,EAQF,SAAIC,GACA,OAAO7Q,KAAK8Q,MAChB,CACA,SAAID,CAAM3M,GACNlE,KAAK+Q,UAAU7M,GACflE,KAAK8Q,OAAS5M,CAClB,CAEA,WAAI8M,GACA,OAAOhR,KAAKiR,QAChB,CACA,WAAID,CAAQE,GACRlR,KAAKmR,uBAAuBD,EAChC,CAEA,eAAIE,GACA,OAAOpR,KAAKqR,YAChB,CACA,eAAID,CAAYE,GACZtR,KAAKuR,mBAAmBD,EAC5B,CACA1O,YAAY4O,EAASC,EAAaC,EAAgBC,EAAWC,GACzD5R,KAAKwR,QAAUA,EACfxR,KAAKyR,YAAcA,EACnBzR,KAAK0R,eAAiBA,EACtB1R,KAAK2R,UAAYA,EACjB3R,KAAK4R,eAAiBA,EACtB5R,KAAK8Q,OAAS,UAEd9Q,KAAK6R,SAAU,EAKf7R,KAAK8R,SAAW,cAEhB9R,KAAK+R,KAAO,SAEZ/R,KAAKgS,IAAM7B,IAEXnQ,KAAKiS,gBAAiB,EAEtBjS,KAAKkS,yBAAwB5F,OAAO6F,MACpCnS,KAAKoS,aAAY9F,OAAO+F,MACxB,MAAMC,KAAShG,OAAOiG,OACtB,IAAKlC,EAAUmC,IAAIF,GAAS,CACxBjC,EAAUoC,IAAIH,GACd,MAAMI,KAAeC,OAAgBpC,EAAsB,CACvDqC,uBAAqBtG,OAAOuG,SAEhCP,EAAOQ,UAAU,KACbzC,EAAU0C,OAAOT,GACjBI,EAAaM,SAAQ,EAE7B,CAiBJ,CAEAC,UACI,OAA0C,IAAnCjT,KAAK8R,SAASoB,QAAQ,QACjC,CAEAC,UACI,OAA2C,IAApCnT,KAAK8R,SAASoB,QAAQ,SACjC,CAKAE,kBACI,OAAOpT,KAAKqT,aAChB,CACAtP,WAII/D,KAAKsT,uBACDtT,KAAKgR,UAAYhR,KAAKqT,gBACtBrT,KAAKqT,cAAgBrT,KAAKuT,sBAC1BvT,KAAKmR,uBAAuBnR,KAAKgR,UAErChR,KAAKiS,gBAAiB,CAC1B,CACA9N,cAGQnE,KAAK2R,UAAU6B,cACfxT,KAAK2R,UAAU6B,YAAYxT,KAAKqT,eAChCrT,KAAKyT,yBAAyBC,UAElC1T,KAAK0R,eAAeiC,kBAAkB3T,KAAKyR,YAAYmC,cAAe5T,KAAKoR,YAC/E,CAEAyC,qBAEI,OAAO7T,KAAKkS,sBAAsB4B,YAAY9T,KAAKyR,YAAYmC,cAAe,CAC1EG,kBAAkB,GAE1B,CAEAR,sBACI,MAAMS,EAAehU,KAAK2R,UAAUsC,cAAc,QAC5CC,EAAc,mBACpBF,SAAaG,aAAa,KAAM,qBAAqBnU,KAAKgS,OAG1DgC,EAAaG,aAAa,cAAe,QACzCH,EAAaI,UAAU3B,IAAIrC,GACC,mBAAxBpQ,KAAK4R,gBACLoC,EAAaI,UAAU3B,IAAI,2BAE/BzS,KAAKyR,YAAYmC,cAAcS,YAAYL,GAEN,mBAA1BM,uBAAgE,mBAAxBtU,KAAK4R,eACpD5R,KAAKwR,QAAQ+C,kBAAkB,KAC3BD,sBAAsB,KAClBN,EAAaI,UAAU3B,IAAIyB,EAAW,EACzC,GAILF,EAAaI,UAAU3B,IAAIyB,GAExBF,CACX,CAEA7C,uBAAuBD,GACnB,MAAMsD,EAAuB,GAAGtD,GAAc,KAAKuD,OAI/CzU,KAAKiS,gBAAkBuC,IAAyBxU,KAAKqT,gBACrDrT,KAAKqT,cAAgBrT,KAAKuT,uBAE1BvT,KAAKqT,gBACLrT,KAAKqT,cAAcqB,YAAcF,GAErCxU,KAAKiR,SAAWuD,CACpB,CAEAjD,mBAAmBD,GAEftR,KAAK0R,eAAeiC,kBAAkB3T,KAAKyR,YAAYmC,cAAe5T,KAAKoR,eAOtEE,GAAkBtR,KAAK6T,uBACxB7T,KAAK2U,2BAET3U,KAAKqR,aAAeC,EAGhBtR,KAAK6T,qBACL7T,KAAK0R,eAAekD,SAAS5U,KAAKyR,YAAYmC,cAAetC,GAG7DtR,KAAK6U,0BAEb,CACAA,2BAES7U,KAAKyT,0BACNzT,KAAKyT,wBAA0BzT,KAAKoS,UAAU6B,cAAc,QAC5DjU,KAAKyT,wBAAwBW,UAAU3B,IAAI,wBAE/CzS,KAAKyT,wBAAwBiB,YAAc1U,KAAKoR,YAChDpR,KAAKqT,eAAegB,YAAYrU,KAAKyT,wBACzC,CACAkB,2BACI3U,KAAKyT,yBAAyBC,SAC9B1T,KAAKyT,6BAA0B/P,CACnC,CAEAqN,UAAU+D,GACN,MAAMV,EAAYpU,KAAKyR,YAAYmC,cAAcQ,UACjDA,EAAUV,OAAO,aAAa1T,KAAK8Q,UAC/BgE,GACAV,EAAU3B,IAAI,aAAaqC,IAEnC,CAEAxB,uBAGI,MAAMyB,EAAS/U,KAAKyR,YAAYmC,cAAcoB,iBAAiB,aAAa5E,KAC5E,UAAW4D,KAAgBiB,MAAMC,KAAKH,GAC9Bf,IAAiBhU,KAAKqT,eACtBW,EAAaN,QAGzB,QACS1T,KAAKO,UAAI,SAAAF,GAAA,WAAAA,GAA+FuQ,GAjOVjQ,MAiOoCA,OAjOpCA,MAiO0DA,OAjO1DA,MAiOoF8E,MAjOpF9E,MAiOiHA,OAjOjHA,MAiO0IwU,MAAqB,IAA8D,QAC3TnV,KAAKoV,UAlOyFzU,MAAE,CAAA8P,KAkOJG,EAAQjL,UAAA,qBAAA0P,UAAA,gBAAAC,SAAA,GAAAC,aAAA,SAAApP,EAAAC,GAAA,EAAAD,GAlONxF,MAAE,oBAAAyF,EAAAyL,QAAFlR,CAkOM,kBAARyF,EAAA6M,UAlOEtS,CAkOM,mBAAPyF,EAAA6M,UAlOCtS,CAkOM,oBAAPyF,EAAA+M,UAlOCxS,CAkOM,kBAARyF,EAAA+M,UAlOExS,CAkOM,kBAAC,UAADyF,EAAA2L,KAlONpR,CAkOM,mBAAC,WAADyF,EAAA2L,KAlONpR,CAkOM,kBAAC,UAADyF,EAAA2L,KAlONpR,CAkOM,mBAAAyF,EAAAoP,SAAApP,EAAA4K,QAlONrQ,CAkOM,qBAAAyF,EAAAqP,SAAA,EAAA7P,OAAA,CAAAiL,MAAA,4BAAAgB,QAAA,+BAAmI6D,OAAgBD,SAAA,iCAA8CC,OAAgB5D,SAAA,kCAAAd,QAAA,yBAAAI,YAAA,wCAAAW,KAAA,0BAAAyD,OAAA,6BAA2ME,QAAgB7P,YAAA,EAAAC,SAAA,CAlOlbnF,QAkOu6B,EACjhC,OA3NKiQ,CAAQ,KA8QRhK,EAAc,MAApB,MAAMA,SACO5G,KAAKO,UAAI,SAAAF,GAAA,WAAAA,GAA+FuG,EAAc,CAAoD,QAC1K5G,KAAK2V,UAxRyFhV,KAAE,CAAA8P,KAwRS7J,GAAiI,QAC1O5G,KAAK4V,UAzRyFjV,MAAE,CAAAkV,QAAA,CAyRmCC,KAAYC,KAAiBA,OAAqB,EACjM,OAJKnP,CAAc","names":["AppInternalsService","HttpServiceBase","getAppInternals","internals","this","getSignal","params","appid","appId","__ngFactoryType__","factory","ɵfac","AnalyzeParts","Settings","Resources","i0","_r1","ctx_r1","clipboard","copyToClipboard","contentItem","DisplayName","Folder","Version","RequiredVersion","RequiredDnnVersion","RequiredOqtaneVersion","formatValue","tmp_2_0","tmp_4_0","tmp_6_0","tmp_8_0","tmp_10_0","tmp_12_0","appConfigurationUrl","tmp_15_0","appSettingsInternal","EntityLists","ToSxcContentApp","length","urlToOpenMetadata","tmp_17_0","MetadataList","Items","AppConfigurationCardComponent","#appInternalsSvc","#contentItemsSvc","#dialogRouter","constructor","context","snackBar","dialogSettings","input","required","transient","ContentItemsService","DialogRoutingService","signal","getAllSig","eavConstants","contentTypes","appConfiguration","undefined","#refresh","computed","ClipboardService","urlToEdit","ngOnInit","doOnDialogClosed","update","value","ngOnDestroy","dismiss","#urlTo","url","urlSubRoute","getAll","subscribe","contentItems","navRelative","queryParams","error","set","convertFormToUrl","items","EditPrep","editId","Id","GoToMetadata","getUrlApp","Context","App","Name","i1","i2","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","AppConfigurationCardComponent_Conditional_0_Template","MatCardModule","i3","MatIconModule","i4","MatButtonModule","i5","MatBadgeModule","i6","TippyDirective","DocsLinkHelperComponent","styles","AppConfigurationComponent_Conditional_0_Conditional_0_Conditional_1_Template","AppConfigurationComponent_Conditional_0_Conditional_0_Conditional_2_Template","ctx_r0","isGlobal","isPrimary","appGlobalSystemSettingsUrl","tmp_5_0","viewModelSig","systemSettingsCount","appGlobalCustomSettingsUrl","tmp_7_0","customSettingsCount","urlToConfig","customSettings","tmp_9_0","customSettingsFieldsCount","AppConfigurationComponent_Conditional_0_Conditional_23_ng_container_14_Template","appSiteSystemSettingsUrl","appSiteCustomSettingsUrl","goToGlobal_r2","AppConfigurationComponent_Conditional_0_Conditional_24_ng_container_14_Template","AppConfigurationComponent_Conditional_0_Conditional_24_ng_container_15_Template","appContentSystemSettingsUrl","appContentCustomSettingsUrl","settings","goToSite_r3","appGlobalSystemResourcesUrl","systemResourcesCount","appGlobalCustomResourcesUrl","customResourcesCount","customResources","customResourcesFieldsCount","AppConfigurationComponent_Conditional_0_Conditional_54_ng_container_14_Template","appSiteSystemResourcesUrl","appSiteCustomResourcesUrl","AppConfigurationComponent_Conditional_0_Conditional_55_ng_container_14_Template","AppConfigurationComponent_Conditional_0_Conditional_55_ng_container_15_Template","appContentSystemResourcesUrl","appContentCustomResourcesUrl","resources","_r4","openGlobalSettings","_r5","openSiteSettings","AppConfigurationComponent_Conditional_0_Conditional_118_Conditional_0_Template","AppConfigurationComponent_Conditional_0_Conditional_118_Conditional_1_Template","isApp","AppConfigurationComponent_Conditional_0_Conditional_0_Template","AppConfigurationComponent_Conditional_0_Conditional_22_Template","AppConfigurationComponent_Conditional_0_Conditional_23_Template","AppConfigurationComponent_Conditional_0_Conditional_24_Template","AppConfigurationComponent_Conditional_0_Conditional_53_Template","AppConfigurationComponent_Conditional_0_Conditional_54_Template","AppConfigurationComponent_Conditional_0_Conditional_55_Template","AppConfigurationComponent_Conditional_0_ng_template_64_Template","AppConfigurationComponent_Conditional_0_ng_template_66_Template","AppConfigurationComponent_Conditional_0_Conditional_118_Template","urlToAnalyze","lightSpeedEnabled","urlToGetLightSpeedLink","tmp_20_0","appLightSpeedCount","urlToOpenPermissions","Enable","AppPermissions","Permissions","Count","urlToOpenLanguagePermissions","langPermsEnabled","AppConfigurationComponent","#dialogSvc","#contentTypesSvc","#appInternalsService","#contentItemsService","#dialogConfigSvc","matDialog","viewContainerRef","changeDetectorRef","DialogService","ContentTypesService","SystemSettingsScopes","AppScopes","appSettingsInternal$","Subject","appStateAdvanced","inject","FeaturesScopedService","isEnabled","FeatureNames","LightSpeed","cspEnabled","ContentSecurityPolicy","PermissionsByLanguage","DialogConfigAppService","appIn","appInternalsSig","props","lsTypeName","appMetadata","ContentTypeName","filter","i","_Type","SettingsSystem","SettingsEntityScope","Site","AppSettings","FieldAll","ResourcesSystem","AppResources","urlToEditSystem","systemSettings","systemResources","urlToEditDefault","urlToEditCustom","getCurrent$","appScope","SettingsScope","Global","errComponent","newUrl","URLSearchParams","toString","staticName","systemSettingsScope","systemSettingsEntities","systemSettingsEntity","newFromType","customSettingsEntity","AppAdminHelpers","getLightSpeedEditParams","sitePrimaryApp","PrimaryApp","openAppAdministration","ZoneId","AppId","globalPrimaryApp","System","GoToPermissions","enabled","part","AppConfigurationComponent_Conditional_0_Template","i7","NgTemplateOutlet","FeatureTextInfoComponent","RouterOutlet","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","type","encapsulation","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","add","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","delete","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-internals.service.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.models.ts","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration-card/app-configuration-card.component.html","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration-card/app-configuration-card.component.ts","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration.component.html","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration.component.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Injectable, Signal } from '@angular/core';\r\nimport { AppInternals } from '../../app-administration/models/app-internals.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiRoot = 'admin/appinternals/get';\r\n\r\n@Injectable()\r\nexport class AppInternalsService extends HttpServiceBase {\r\n\r\n  /**\r\n   * Fetches AppInternals for given key\r\n   * @param targetType type of target metadata item is for, e.g. for Entity, or ContentType\r\n   * @param keyType e.g. for keyType === guid, key === contentTypeStaticName\r\n   * @param key key of target metadata item is for\r\n   * @param contentTypeName name of content type where permissions are stored. If blank, backend returns all metadata except permissions\r\n   */\r\n\r\n  getAppInternals(internals: AppInternals): Signal<AppInternals> {\r\n    return this.getSignal<AppInternals>(webApiRoot, {\r\n      params: { appid: this.appId }\r\n    }, internals);\r\n  }\r\n\r\n}\r\n","\r\nexport const AnalyzeParts = {\r\n  Settings: 'Settings',\r\n  Resources: 'Resources',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n\r\nexport interface SettingsStackItem {\r\n  Path: string;\r\n  Priority: number;\r\n  Source: string;\r\n  TotalResults: number;\r\n  Type: string;\r\n  Value: string;\r\n  _value: string;\r\n}\r\n","<!-- App Config -->\r\n@if (contentItem()) {\r\n  <mat-card class=\"eav-card\">\r\n    <mat-card-header class=\"eav-card-header\">\r\n      <mat-card-title>Configuration</mat-card-title>\r\n      <mat-icon>redeem</mat-icon>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p></p>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Name:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].DisplayName)\">{{\r\n            formatValue(contentItem()[0]?.DisplayName)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Folder:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].Folder)\">{{\r\n            formatValue(contentItem()[0]?.Folder)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Version:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].Version)\">{{\r\n            formatValue(contentItem()[0]?.Version)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">For</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <b>2sxc: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredVersion) }}\r\n          </span>\r\n          <b> DNN: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredDnnVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredDnnVersion) }}\r\n          </span>\r\n          <b> Oqt: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredOqtaneVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredOqtaneVersion) }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <!-- </p> -->\r\n    </mat-card-content>\r\n    <div class=\"eav-card-space-div\"></div>\r\n    <mat-card-actions align=\"start\">\r\n      <app-docs-link-helper [link]=\"'https://docs.2sxc.org/basics/app/configuration.html'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n      <a [href]=\"appConfigurationUrl()\" mat-button class=\"eav-button__with-icon\" tippy=\"Edit app system resources\">\r\n        <mat-icon\r\n          matBadgeColor=\"accent\"\r\n          matBadgeSize=\"small\"\r\n          [matBadge]=\"appSettingsInternal()()?.EntityLists?.ToSxcContentApp.length || null\"\r\n          matBadgePosition=\"below after\"\r\n          aria-hidden=\"false\"\r\n          class=\"eav-icon\"\r\n          >edit</mat-icon\r\n        >\r\n        <span>Edit</span>\r\n      </a>\r\n      <a [href]=\"urlToOpenMetadata()\" mat-button class=\"eav-button__with-icon\">\r\n        <mat-icon\r\n          matBadgeColor=\"accent\"\r\n          matBadgeSize=\"small\"\r\n          [matBadge]=\"appSettingsInternal()()?.MetadataList.Items.length || null\"\r\n          matBadgePosition=\"below after\"\r\n          aria-hidden=\"false\"\r\n          class=\"eav-icon\"\r\n          >local_offer</mat-icon\r\n        >\r\n        <span>Metadata</span>\r\n      </a>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, computed, input, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { transient } from '../../../../../../core';\r\nimport { DocsLinkHelperComponent } from '../../../admin-shared/docs-link-helper/docs-link-helper.component';\r\nimport { ContentItemsService } from '../../../content-items/services/content-items.service';\r\nimport { GoToMetadata } from '../../../metadata';\r\nimport { eavConstants } from '../../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../../shared/helpers/url-prep.helper';\r\nimport { DialogSettings } from '../../../shared/models/dialog-settings.model';\r\nimport { EditPrep } from '../../../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../../../shared/routing/dialog-routing.service';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { Context } from '../../../shared/services/context';\r\nimport { AppInternalsService } from '../../services/app-internals.service';\r\n\r\n@Component({\r\n  selector: 'app-app-configuration-card',\r\n  templateUrl: './app-configuration-card.component.html',\r\n  styleUrls: ['./app-configuration-card.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n    DocsLinkHelperComponent,\r\n  ],\r\n})\r\nexport class AppConfigurationCardComponent implements OnInit, OnDestroy {\r\n  dialogSettings = input.required<DialogSettings>();\r\n\r\n  #appInternalsSvc = transient(AppInternalsService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  appConfigurationUrl = signal('');\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.appConfigurationUrl = (this.urlToEdit());\r\n  }\r\n\r\n  contentItem = this.#contentItemsSvc.getAllSig(eavConstants.contentTypes.appConfiguration, undefined);\r\n\r\n  #refresh = signal(0);\r\n\r\n  appSettingsInternal = computed(() => {\r\n    const refresh = this.#refresh();\r\n    return this.#appInternalsSvc.getAppInternals(undefined);\r\n  });\r\n\r\n  ngOnInit() {\r\n    this.#dialogRouter.doOnDialogClosed(() => {\r\n      this.#refresh.update(value => value + 1);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.snackBar.dismiss();\r\n  }\r\n\r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  urlToEdit() {\r\n    let url = signal('');\r\n    const staticName = eavConstants.contentTypes.appConfiguration;\r\n    this.#contentItemsSvc.getAll(staticName).subscribe(contentItems => {\r\n\r\n      if (contentItems.length < 1)\r\n        this.#dialogRouter.navRelative(['message/e'], {\r\n          queryParams: { error: 'AppAdmin.ErrorNoManyAppSettings' },\r\n        });\r\n      if (contentItems.length > 1)\r\n        this.#dialogRouter.navRelative(['message/e'], {\r\n          queryParams: { error: 'AppAdmin.ErrorTooManyAppSettings' },\r\n        });\r\n\r\n      url.set(this.#urlTo(\r\n        `edit/${convertFormToUrl({\r\n          items: [EditPrep.editId(contentItems[0].Id)],\r\n        })}`\r\n      ));\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n  urlToOpenMetadata() {\r\n    return this.#urlTo(\r\n      GoToMetadata.getUrlApp(\r\n        this.context.appId,\r\n        `Metadata for App: ${this.dialogSettings().Context.App.Name} (${this.context.appId})`,\r\n      )\r\n    );\r\n  }\r\n\r\n  formatValue(value?: string): string {\r\n    return value === \"\" ? \"-\" : value ?? \"-\";\r\n  }\r\n}\r\n","@if (viewModelSig()) {\r\n  @if (isGlobal || isPrimary) {\r\n    <div class=\"alert alert-info scope-info\">\r\n      @if (isGlobal) {\r\n        This is the Global App. Anything configured here will affect all Sites and Apps in this installation.\r\n      }\r\n      @if (isPrimary) {\r\n        This is the Primary App of this Site. You can also configure sitewide settings and resources here.\r\n      }\r\n      See <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>.\r\n    </div>\r\n  }\r\n  <div class=\"eav-cards-box\">\r\n    <!-- Settings -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Settings</mat-card-title>\r\n        <mat-icon>settings</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          Settings are things like SQL-connection strings, default \"items-to-show\" numbers and similar. If necessary, settings like a link\r\n          to an RSS-Feed could be different in each language.\r\n          <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>\r\n        </p>\r\n        <table class=\"eav-settings-and-resources-table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>System Settings</th>\r\n              <th>Custom Settings</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!-- Settings for Global App -->\r\n            @if (isGlobal) {\r\n              <tr>\r\n                <th>Global</th>\r\n                <td>\r\n                  <a [href]=\"appGlobalSystemSettingsUrl()\" mat-icon-button tippy=\"Edit global system settings\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a [href]=\"appGlobalCustomSettingsUrl()\" mat-icon-button tippy=\"Edit custom global settings\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.customSettings)\"\r\n                    mat-icon-button\r\n                    tippy=\"Configure fields of the custom global settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n            }\r\n            <!-- Settings for Primary App -->\r\n            @if (isPrimary) {\r\n              <tr>\r\n                <th>Site</th>\r\n                <td>\r\n                  <a [href]=\"appSiteSystemSettingsUrl()\" mat-icon-button tippy=\"Edit site system settings\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a [href]=\"appSiteCustomSettingsUrl()\" mat-icon-button tippy=\"Edit site system settings\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.customSettings)\"\r\n                    mat-icon-button\r\n                    tippy=\"Configure fields of the custom site settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            <!-- Settings for App and Content -->\r\n            @if (isApp) {\r\n              <tr>\r\n                <th>{{ dialogSettings.Context.App.Name }}</th>\r\n                <td>\r\n                  <a [href]=\"appContentSystemSettingsUrl()\" mat-icon-button tippy=\"Edit app system settings\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a [href]=\"appContentCustomSettingsUrl()\" mat-icon-button tippy=\"Edit custom app settings\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.settings)\"\r\n                    mat-icon-button\r\n                    tippy=\"Configure fields of the custom app settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/settings'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a\r\n          [href]=\"urlToAnalyze(AnalyzeParts.Settings)\"\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          tippy=\"See the result of combining all settings\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">manage_search</mat-icon>\r\n          <span>Analyze Combined Settings</span>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Resources -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Language Resources (i18n)</mat-card-title>\r\n        <mat-icon>translate</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          Resources are used for labels and things like that in the App. They are usually needed to create multi-lingual views and such, and\r\n          should not be used for App-Settings.\r\n          <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>\r\n        </p>\r\n        <table class=\"eav-settings-and-resources-table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>System Resources</th>\r\n              <th>Custom Resources</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!-- Resources for Global App -->\r\n            @if (isGlobal) {\r\n              <tr>\r\n                <th>Global</th>\r\n                <td>\r\n                  <a [href]=\"appGlobalSystemResourcesUrl()\" mat-icon-button tippy=\"Edit global system resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a [href]=\"appGlobalCustomResourcesUrl()\" mat-icon-button tippy=\"Edit custom global resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.customResources)\"\r\n                    mat-icon-button\r\n                    tippy=\"Configure fields of the custom global resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n            }\r\n            <!-- Resources for Primary App -->\r\n            @if (isPrimary) {\r\n              <tr>\r\n                <th>Site</th>\r\n                <td>\r\n                  <a [href]=\"appSiteSystemResourcesUrl()\" mat-icon-button tippy=\"Edit site system resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a [href]=\"appSiteCustomResourcesUrl()\" mat-icon-button tippy=\"Edit custom site resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.customResources)\"\r\n                    mat-icon-button\r\n                    tippy=\"Configure fields of the custom site resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            <!-- Resources for App and Content -->\r\n            @if (isApp) {\r\n              <tr>\r\n                <th>{{ dialogSettings.Context.App.Name }}</th>\r\n                <td>\r\n                  <a [href]=\"appContentSystemResourcesUrl()\" mat-icon-button tippy=\"Edit app system resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a [href]=\"appContentCustomResourcesUrl()\" mat-icon-button tippy=\"Edit custom app resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.resources)\"\r\n                    mat-icon-button\r\n                    tippy=\"Configure fields of the custom app resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/settings'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a\r\n          [href]=\"urlToAnalyze(AnalyzeParts.Resources)\"\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          tippy=\"See the result of combining all resources\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">manage_search</mat-icon>\r\n          <span>Analyze Combined Resources</span>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Templates which are re-used in the table above -->\r\n    <ng-template #goToGlobal>\r\n      <tr>\r\n        <th>Global</th>\r\n        <td>\r\n          <button mat-icon-button (click)=\"openGlobalSettings()\" tippy=\"Go to global\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n    <ng-template #goToSite>\r\n      <tr>\r\n        <th>Site</th>\r\n        <td>\r\n          <button mat-icon-button (click)=\"openSiteSettings()\" tippy=\"Go to site\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </div>\r\n  <div class=\"eav-cards-box\">\r\n    <app-app-configuration-card [dialogSettings]=\"dialogSettings\"> </app-app-configuration-card>\r\n    <!-- LightSpeed -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Performance</mat-card-title>\r\n        <mat-icon>bolt</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>LightSpeed Output Cache to speed up page by 50-90%</p>\r\n        <app-feature-text-info [featureNameId]=\"'LightSpeedOutputCache'\" [asInfo]=\"true\"></app-feature-text-info>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/lightspeed'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a\r\n          class=\"default-link\"\r\n          [href]=\"urlToGetLightSpeedLink()\"\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          disabled=\"{{ !lightSpeedEnabled() }}\"\r\n        >\r\n          <mat-icon\r\n            matBadgeColor=\"accent\"\r\n            matBadgeSize=\"small\"\r\n            [matBadge]=\"viewModelSig()?.appLightSpeedCount || null\"\r\n            matBadgePosition=\"below after\"\r\n            aria-hidden=\"false\"\r\n            class=\"eav-icon\"\r\n            >bolt</mat-icon\r\n          >\r\n          <span>Edit LightSpeed</span>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Security / CSP -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Security</mat-card-title>\r\n        <mat-icon>local_police</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>ContentSecurityPolicy (CSP) features in this App - for maximum control.</p>\r\n        <app-feature-text-info [featureNameId]=\"'ContentSecurityPolicy'\" [asInfo]=\"true\"></app-feature-text-info>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/csp'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Permissions -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Permissions</mat-card-title>\r\n        <mat-icon>person</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>Give access to the entire app (all data). Use with care.</p>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://docs.2sxc.org/basics/app/permissions.html'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a\r\n          [href]=\"urlToOpenPermissions()\"\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          [disabled]=\"!dialogSettings.Context.Enable.AppPermissions\"\r\n        >\r\n          <mat-icon\r\n            matBadgeColor=\"accent\"\r\n            matBadgeSize=\"small\"\r\n            matBadgePosition=\"below after\"\r\n            [matBadge]=\"dialogSettings.Context.App.Permissions.Count || null\"\r\n            aria-hidden=\"false\"\r\n            class=\"eav-icon\"\r\n            >person</mat-icon\r\n          >\r\n          <span>\r\n            Edit Permissions\r\n            @if (!dialogSettings.Context.Enable.AppPermissions) {\r\n              @if (isGlobal) {\r\n                (not on Global App)\r\n              }\r\n              @if (isApp) {\r\n                (not on Content)\r\n              }\r\n            }\r\n          </span>\r\n        </a>\r\n        <app-docs-link-helper\r\n          [link]=\"'https://patrons.2sxc.org/features/feat/PermissionsByLanguage'\"\r\n          [label]=\"\"\r\n          [icon]=\"\"\r\n        ></app-docs-link-helper>\r\n        <a [href]=\"urlToOpenLanguagePermissions(langPermsEnabled())\" mat-button class=\"eav-button__with-icon\">\r\n          <mat-icon\r\n            [matBadgeHidden]=\"langPermsEnabled()\"\r\n            matBadgeSize=\"small\"\r\n            matBadge=\"💎\"\r\n            matBadgePosition=\"below after\"\r\n            aria-hidden=\"false\"\r\n            class=\"eav-icon\"\r\n          >\r\n            person\r\n          </mat-icon>\r\n          <span>Language Permissions</span>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n}\r\n<router-outlet></router-outlet>\r\n","import { AsyncPipe, NgTemplateOutlet } from '@angular/common';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef, computed, inject, signal } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { DocsLinkHelperComponent } from '../../admin-shared/docs-link-helper/docs-link-helper.component';\r\nimport { ContentItemsService } from '../../content-items/services/content-items.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesScopedService } from '../../features/features-scoped.service';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { SystemSettingsScopes, eavConstants } from '../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { AppScopes } from '../../shared/models/dialog-context.models';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { EditPrep } from '../../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { AppAdminHelpers } from '../app-admin-helpers';\r\nimport { AppInternals } from '../models/app-internals.model';\r\nimport { ContentTypesService } from '../services';\r\nimport { AppInternalsService } from '../services/app-internals.service';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { AnalyzeParts } from '../sub-dialogs/analyze-settings/analyze-settings.models';\r\nimport { AppConfigurationCardComponent } from './app-configuration-card/app-configuration-card.component';\r\n\r\n@Component({\r\n  selector: 'app-app-configuration',\r\n  templateUrl: './app-configuration.component.html',\r\n  styleUrls: ['./app-configuration.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatBadgeModule,\r\n    NgTemplateOutlet,\r\n    AppConfigurationCardComponent,\r\n    FeatureTextInfoComponent,\r\n    RouterOutlet,\r\n    AsyncPipe,\r\n    TippyDirective,\r\n    DocsLinkHelperComponent,\r\n  ],\r\n})\r\nexport class AppConfigurationComponent implements OnInit, OnDestroy {\r\n\r\n  #dialogSvc = transient(DialogService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n\r\n  dialogSettings: DialogSettings;\r\n\r\n  eavConstants = eavConstants;\r\n  AnalyzeParts = AnalyzeParts;\r\n  SystemSettingsScopes = SystemSettingsScopes;\r\n  AppScopes = AppScopes;\r\n  isGlobal: boolean;\r\n  isPrimary: boolean;\r\n  isApp: boolean;\r\n\r\n  // Url signals for edit routes\r\n  appContentSystemSettingsUrl = signal('');\r\n  appContentCustomSettingsUrl = signal('');\r\n  appGlobalSystemSettingsUrl = signal('');\r\n  appSiteSystemSettingsUrl = signal('');\r\n  appGlobalSystemResourcesUrl = signal('');\r\n  appContentSystemResourcesUrl = signal('');\r\n  appSiteSystemResourcesUrl = signal('');\r\n  appContentCustomResourcesUrl = signal('');\r\n  appGlobalCustomResourcesUrl = signal('');\r\n  appGlobalCustomSettingsUrl = signal('');\r\n  appSiteCustomSettingsUrl = signal('');\r\n  appSiteCustomResourcesUrl = signal('');\r\n\r\n  // More proper ViewModel\r\n  appSettingsInternal$ = new Subject<AppInternals>();\r\n\r\n  public appStateAdvanced = false;\r\n  public features = inject(FeaturesScopedService);\r\n\r\n  protected lightSpeedEnabled = this.features.isEnabled[FeatureNames.LightSpeed];\r\n  protected cspEnabled = this.features.isEnabled[FeatureNames.ContentSecurityPolicy];\r\n  protected langPermsEnabled = this.features.isEnabled[FeatureNames.PermissionsByLanguage];\r\n\r\n  #appInternalsService = transient(AppInternalsService);\r\n  #contentItemsService = transient(ContentItemsService);\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  #refresh = signal(0);\r\n\r\n  appIn = computed(() => {\r\n    const refresh = this.#refresh();\r\n    return this.#appInternalsService.getAppInternals(undefined)\r\n  });\r\n\r\n  viewModelSig = computed(() => {\r\n    const appInternalsSig = this.appIn()();\r\n    if (!appInternalsSig)\r\n      return null;\r\n\r\n    const props = appInternalsSig?.EntityLists;\r\n    const lsTypeName = eavConstants.appMetadata.LightSpeed.ContentTypeName;\r\n\r\n    const result: AppConfigurationViewModel = {\r\n      appLightSpeedCount: appInternalsSig.MetadataList.Items.filter(i => i._Type.Name === lsTypeName).length,\r\n      systemSettingsCount: this.isPrimary\r\n        ? props.SettingsSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n        : props.SettingsSystem.filter(i => !i.SettingsEntityScope).length,\r\n      customSettingsCount: props.AppSettings?.length,\r\n      customSettingsFieldsCount: appInternalsSig.FieldAll.AppSettings?.length,\r\n      systemResourcesCount: this.isPrimary\r\n        ? props.ResourcesSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n        : props.ResourcesSystem.filter(i => !i.SettingsEntityScope).length,\r\n      customResourcesCount: props.AppResources?.length,\r\n      customResourcesFieldsCount: appInternalsSig?.FieldAll.AppResources?.length,\r\n    };\r\n\r\n    return result;\r\n  });\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    this.appGlobalSystemSettingsUrl = this.urlToEditSystem(eavConstants.contentTypes.systemSettings, SystemSettingsScopes.App);\r\n    this.appContentSystemSettingsUrl = this.urlToEditSystem(eavConstants.contentTypes.systemSettings, SystemSettingsScopes.App);\r\n    this.appSiteSystemSettingsUrl = this.urlToEditSystem(eavConstants.contentTypes.systemSettings, SystemSettingsScopes.Site);\r\n    this.appGlobalSystemResourcesUrl = this.urlToEditSystem(eavConstants.contentTypes.systemResources, SystemSettingsScopes.App);\r\n    this.appContentSystemResourcesUrl = this.urlToEditSystem(eavConstants.contentTypes.systemResources, SystemSettingsScopes.App);\r\n    this.appSiteSystemResourcesUrl = this.urlToEditSystem(eavConstants.contentTypes.systemResources, SystemSettingsScopes.Site);\r\n    this.appContentCustomSettingsUrl = this.urlToEditDefault(eavConstants.contentTypes.settings);\r\n    this.appContentCustomResourcesUrl = this.urlToEditDefault(eavConstants.contentTypes.resources);\r\n    this.appGlobalCustomResourcesUrl = this.urlToEditCustom(eavConstants.contentTypes.customResources);\r\n    this.appSiteCustomResourcesUrl = this.urlToEditCustom(eavConstants.contentTypes.customResources);\r\n    this.appGlobalCustomSettingsUrl = this.urlToEditCustom(eavConstants.contentTypes.customSettings);\r\n    this.appSiteCustomSettingsUrl = this.urlToEditCustom(eavConstants.contentTypes.customSettings);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.#dialogRouter.doOnDialogClosed(() => {\r\n      this.#refresh.update(value => value + 1);\r\n    });\r\n\r\n    this.#dialogConfigSvc.getCurrent$().subscribe((dialogSettings) => {\r\n      this.dialogSettings = dialogSettings;\r\n      const appScope = dialogSettings.Context.App.SettingsScope;\r\n      this.isGlobal = appScope === AppScopes.Global;\r\n      this.isPrimary = appScope === AppScopes.Site;\r\n      this.isApp = appScope === AppScopes.App;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.snackBar.dismiss();\r\n  }\r\n\r\n  #urlTo(url: string, queryParams?: { [key: string]: string }, errComponent?: string) {\r\n    let newUrl = '#' + this.#dialogRouter.urlSubRoute(url);\r\n    if (queryParams) {\r\n      newUrl += `?${new URLSearchParams(queryParams).toString()}`;\r\n    }\r\n    if (errComponent) {\r\n      newUrl += `&errComponent=${errComponent}`;\r\n    }\r\n    return newUrl;\r\n  }\r\n\r\n  // case eavConstants.contentTypes.systemSettings:\r\n  // case eavConstants.contentTypes.systemResources:\r\n  urlToEditSystem(staticName: string, systemSettingsScope?: Of<typeof SystemSettingsScopes>) {\r\n    const url = signal('');\r\n    this.#contentItemsService.getAll(staticName).subscribe(contentItems => {\r\n      const systemSettingsEntities = contentItems.filter(i =>\r\n        systemSettingsScope === SystemSettingsScopes.App\r\n          ? !i.SettingsEntityScope\r\n          : i.SettingsEntityScope === SystemSettingsScopes.Site\r\n      );\r\n      if (systemSettingsEntities.length > 1) {\r\n        url.set(this.#urlTo('message/e', { error: 'AppAdmin.ErrorTooManyAppSettings' }, staticName));\r\n      } else {\r\n        const systemSettingsEntity = systemSettingsEntities[0];\r\n        url.set(this.#urlTo(\r\n          `edit/${convertFormToUrl({\r\n            items: [\r\n              systemSettingsEntity == null\r\n                ? EditPrep.newFromType(staticName, {\r\n                  ...(systemSettingsScope === SystemSettingsScopes.Site && {\r\n                    SettingsEntityScope: SystemSettingsScopes.Site,\r\n                  }),\r\n                })\r\n                : EditPrep.editId(systemSettingsEntity.Id),\r\n            ],\r\n          })}`\r\n        ));\r\n      }\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n  // case eavConstants.contentTypes.customSettings:\r\n  // case eavConstants.contentTypes.customResources:\r\n  urlToEditCustom(staticName: string) {\r\n    const url = signal('');\r\n    this.#contentItemsService.getAll(staticName).subscribe(contentItems => {\r\n      if (contentItems.length > 1) {\r\n        url.set(this.#urlTo('message/e', { error: 'AppAdmin.ErrorTooManyAppSettings' }, staticName));\r\n      } else {\r\n        const customSettingsEntity = contentItems[0];\r\n        url.set(this.#urlTo(\r\n          `edit/${convertFormToUrl({\r\n            items: [\r\n              customSettingsEntity == null\r\n                ? EditPrep.newFromType(staticName)\r\n                : EditPrep.editId(customSettingsEntity.Id),\r\n            ],\r\n          })}`\r\n        ));\r\n      }\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n  // case default:\r\n  urlToEditDefault(staticName: string) {\r\n    const url = signal('');\r\n    this.#contentItemsService.getAll(staticName).subscribe(contentItems => {\r\n      if (contentItems.length < 1) {\r\n        url.set(this.#urlTo('message/e', { error: 'AppAdmin.ErrorNoManyAppSettings' }, staticName));\r\n      } else if (contentItems.length > 1) {\r\n        url.set(this.#urlTo('message/e', { error: 'AppAdmin.ErrorTooManyAppSettings' }, staticName));\r\n      } else {\r\n        url.set(this.#urlTo(\r\n          `edit/${convertFormToUrl({\r\n            items: [EditPrep.editId(contentItems[0].Id)],\r\n          })}`\r\n        ));\r\n      }\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n  urlToGetLightSpeedLink(): string {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl(\r\n        AppAdminHelpers.getLightSpeedEditParams(this.context.appId)\r\n      )}`\r\n    );\r\n  }\r\n\r\n  openSiteSettings() {\r\n    const sitePrimaryApp = this.dialogSettings.Context.Site.PrimaryApp;\r\n    this.#dialogSvc.openAppAdministration(sitePrimaryApp.ZoneId, sitePrimaryApp.AppId, 'app');\r\n  }\r\n\r\n  openGlobalSettings() {\r\n    const globalPrimaryApp = this.dialogSettings.Context.System.PrimaryApp;\r\n    this.#dialogSvc.openAppAdministration(globalPrimaryApp.ZoneId, globalPrimaryApp.AppId, 'app');\r\n  }\r\n\r\n  urlToConfig(staticName: string) {\r\n    return this.#urlTo(`fields/${staticName}`);\r\n  }\r\n\r\n  urlToOpenPermissions() {\r\n    return this.#urlTo(GoToPermissions.getUrlApp(this.context.appId));\r\n  }\r\n\r\n  urlToOpenLanguagePermissions(enabled: boolean) {\r\n    if (enabled)\r\n      return this.#urlTo('language-permissions')\r\n    else\r\n      return this.#urlTo('edit-language-permissions')\r\n  }\r\n\r\n  urlToAnalyze(part: Of<typeof AnalyzeParts>) {\r\n    return this.#urlTo(`analyze/${part}`);\r\n  }\r\n}\r\n\r\nclass AppConfigurationViewModel {\r\n  // Lightspeed\r\n  appLightSpeedCount: number;\r\n\r\n  systemSettingsCount: number;\r\n  customSettingsCount: number;\r\n  customSettingsFieldsCount: number;\r\n  systemResourcesCount: number;\r\n  customResourcesCount: number;\r\n  customResourcesFieldsCount: number;\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                componentRef.destroy();\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[6]}