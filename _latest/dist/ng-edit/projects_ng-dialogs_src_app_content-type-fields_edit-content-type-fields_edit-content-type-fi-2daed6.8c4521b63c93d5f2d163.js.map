{"version":3,"sources":["./node_modules/rxjs/_esm2015/internal/operators/toArray.js","./projects/ng-dialogs/src/app/app-administration/constants/field-name.patterns.ts","./projects/ng-dialogs/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts","./projects/ng-dialogs/src/app/content-type-fields/edit-content-type-fields/reserved-names.directive.ts","./projects/ng-dialogs/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.html","./projects/ng-dialogs/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.ts","./node_modules/rxjs/_esm2015/internal/operators/reduce.js","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts"],"names":["toArrayReducer","arr","item","index","push","fieldNamePattern","dataTypeLabels","Boolean","label","description","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","reservedNames","validate","control","value","controlValue","toLocaleLowerCase","reservedName","Object","keys","this","find","name","ReservedNamesValidatorDirective","provide","useExisting","multi","dialogRef","route","contentTypesService","contentTypesFieldsService","snackBar","hostClass","fields","filteredInputTypeOptions","dataTypeHints","inputTypeHints","fieldNameError","findIcon","loading$","BehaviorSubject","saving$","subscription","Subscription","disableClose","add","backdropClick","subscribe","event","form","dirty","confirm","closeDialog","ngOnInit","editMode","snapshot","paramMap","get","contentTypeStaticName","contentType$","retrieveContentType","pipe","share","fields$","mergeMap","contentType","getFields","StaticName","dataTypes$","typeListRetrieve","map","rawDataTypes","dataTypes","rawDataType","icon","calculateDataTypes","inputTypes$","getInputTypesList","reservedNames$","getReservedNames","forkJoin","inputTypes","inputTypeOptions","existingFields","forEach","field","parseInt","editField","Id","i","Type","InputType","IsTitle","length","SortOrder","filterInputTypeOptions","calculateHints","next","ngOnDestroy","complete","unsubscribe","close","filter","option","dataType","resetInputType","defaultInputType","some","inputType","selectedDataType","selectedInputType","inputTypeOption","isObsolete","obsoleteMessage","getInputTypeOption","inputName","save","open","rename","duration","updateInputType","of","concatMap","catchError","error","accumulator","seed","arguments","source","scan","takeLast","defaultIfEmpty","d","acc","reduce","responses","EditContentTypeFieldsComponent","isError","isShort","toggleIsShort","FieldHintComponent"],"mappings":"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","file":"projects_ng-dialogs_src_app_content-type-fields_edit-content-type-fields_edit-content-type-fi-2daed6.8c4521b63c93d5f2d163.js","sourcesContent":["import { reduce } from './reduce';\nfunction toArrayReducer(arr, item, index) {\n    if (index === 0) {\n        return [item];\n    }\n    arr.push(item);\n    return arr;\n}\nexport function toArray() {\n    return reduce(toArrayReducer, []);\n}\n//# sourceMappingURL=toArray.js.map","export const fieldNamePattern = /^[A-Za-z][A-Za-z0-9]+$/;\r\nexport const fieldNameError = 'Standard letters and numbers are allowed. Must start with a letter.';\r\n","import { calculateTypeIcon } from '../content-type-fields.helpers';\r\n\r\nconst dataTypeLabels: Record<string, { label: string, description: string }> = {\r\n  Boolean: { label: 'Boolean (yes/no)', description: 'Yes/no or true/false values' },\r\n  Custom: { label: 'Custom - ui-tools or custom types', description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: 'Date and/or time', description: 'For date, time or combined values' },\r\n  Empty: { label: 'Empty - for form-titles etc.', description: 'Use to structure your form' },\r\n  Entity: { label: 'Entity (other content-items)', description: 'One or more other content-items' },\r\n  Hyperlink: { label: 'Link / file reference', description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: 'Number', description: 'Any kind of number' },\r\n  String: { label: 'Text / string', description: 'Any kind of text' },\r\n};\r\n\r\nexport interface DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\n@Directive({\r\n  selector: '[appReservedNames]',\r\n  providers: [{ provide: NG_VALIDATORS, useExisting: ReservedNamesValidatorDirective, multi: true }],\r\n})\r\nexport class ReservedNamesValidatorDirective implements Validator {\r\n  @Input('appReservedNames') reservedNames: ReservedNames = {};\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!control.value) { return null; }\r\n\r\n    const controlValue = (control.value as string).toLocaleLowerCase();\r\n    const reservedName = Object.keys(this.reservedNames).find(name => name.toLocaleLowerCase() === controlValue);\r\n    return reservedName ? { reservedNames: this.reservedNames[reservedName] } : null;\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <ng-container *ngIf=\"editMode === undefined\">Fields</ng-container>\r\n    <ng-container *ngIf=\"editMode === null\">Add Fields</ng-container>\r\n    <ng-container *ngIf=\"editMode != null\">Edit Field</ng-container>\r\n  </div>\r\n</div>\r\n\r\n<form #ngForm=\"ngForm\" class=\"dialog-form\" *ngIf=\"(loading$ | async) === false\" (ngSubmit)=\"save()\">\r\n  <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n    <div class=\"row-container\" *ngFor=\"let field of fields; index as i\">\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Name</mat-label>\r\n          <input matInput [pattern]=\"fieldNamePattern\" [appReservedNames]=\"reservedNames\" [(ngModel)]=\"field.StaticName\"\r\n            [name]=\"'StaticName' + i\" #staticName=\"ngModel\" [disabled]=\"editMode === 'inputType'\">\r\n        </mat-form-field>\r\n        <ng-container *ngIf=\"staticName.touched && staticName.errors\">\r\n          <app-field-hint *ngIf=\"staticName.errors.pattern\" [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n          <app-field-hint *ngIf=\"staticName.errors.reservedNames\" [isError]=\"true\">\r\n            {{ staticName.errors.reservedNames }}\r\n          </app-field-hint>\r\n        </ng-container>\r\n      </div>\r\n\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Data Type</mat-label>\r\n          <mat-select (selectionChange)=\"filterInputTypeOptions(i); resetInputType(i); calculateHints(i)\"\r\n            [(ngModel)]=\"field.Type\" [name]=\"'Type' + i\" [disabled]=\"editMode != null\">\r\n            <mat-select-trigger>\r\n              <mat-icon class=\"type-icon\">{{ findIcon(field.Type) }}</mat-icon>\r\n              <span>{{ field.Type }}</span>\r\n            </mat-select-trigger>\r\n            <mat-option *ngFor=\"let dataType of dataTypes\" [value]=\"dataType.name\">\r\n              <mat-icon>{{ dataType.icon }}</mat-icon>\r\n              <span>{{ dataType.label }}</span>\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>{{ dataTypeHints[i] }}</app-field-hint>\r\n      </div>\r\n\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Input Type</mat-label>\r\n          <mat-select (selectionChange)=\"calculateHints(i)\" [(ngModel)]=\"field.InputType\" [name]=\"'InputType' + i\"\r\n            [disabled]=\"editMode === 'name'\">\r\n            <mat-select-trigger>\r\n              <span>{{ getInputTypeOption(field.InputType)?.label }}</span>\r\n              <mat-icon class=\"input-icon\">{{ getInputTypeOption(field.InputType)?.icon }}</mat-icon>\r\n            </mat-select-trigger>\r\n            <mat-option *ngFor=\"let option of filteredInputTypeOptions[i]\" [value]=\"option.inputType\"\r\n              [ngClass]=\"{ 'input-obsolete': option.isObsolete }\">\r\n              <span>{{ option.label }}</span>\r\n              <mat-icon class=\"input-icon\" *ngIf=\"option.icon\">{{ option.icon }}</mat-icon>\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>{{ inputTypeHints[i] }}</app-field-hint>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-form-actions\">\r\n    <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || (saving$ | async)\">\r\n      Save\r\n    </button>\r\n  </div>\r\n</form>\r\n","import { Component, HostBinding, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin, of, Subscription } from 'rxjs';\r\nimport { catchError, concatMap, filter, map, mergeMap, share, toArray } from 'rxjs/operators';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { DataTypeConstants } from '../constants/data-type.constants';\r\nimport { InputTypeConstants } from '../constants/input-type.constants';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { ContentTypesFieldsService } from '../services/content-types-fields.service';\r\nimport { calculateDataTypes, DataType } from './edit-content-type-fields.helpers';\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type-fields',\r\n  templateUrl: './edit-content-type-fields.component.html',\r\n  styleUrls: ['./edit-content-type-fields.component.scss'],\r\n})\r\nexport class EditContentTypeFieldsComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n\r\n  fields: Partial<Field>[] = [];\r\n  reservedNames: ReservedNames;\r\n  editMode: 'name' | 'inputType';\r\n  dataTypes: DataType[];\r\n  filteredInputTypeOptions: FieldInputTypeOption[][] = [];\r\n  dataTypeHints: string[] = [];\r\n  inputTypeHints: string[] = [];\r\n  fieldNamePattern = fieldNamePattern;\r\n  fieldNameError = fieldNameError;\r\n  findIcon = calculateTypeIcon;\r\n  loading$ = new BehaviorSubject(true);\r\n  saving$ = new BehaviorSubject(false);\r\n\r\n  private contentType: ContentType;\r\n  private inputTypeOptions: FieldInputTypeOption[];\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<EditContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.dialogRef.disableClose = true;\r\n    this.subscription.add(\r\n      this.dialogRef.backdropClick().subscribe(event => {\r\n        if (this.form.dirty) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) { return; }\r\n        }\r\n        this.closeDialog();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.editMode = this.route.snapshot.paramMap.get('editMode') as 'name' | 'inputType';\r\n\r\n    const contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n    const contentType$ = this.contentTypesService.retrieveContentType(contentTypeStaticName).pipe(share());\r\n    const fields$ = contentType$.pipe(mergeMap(contentType => this.contentTypesFieldsService.getFields(contentType.StaticName)));\r\n    const dataTypes$ = this.contentTypesFieldsService.typeListRetrieve().pipe(map(rawDataTypes => calculateDataTypes(rawDataTypes)));\r\n    const inputTypes$ = this.contentTypesFieldsService.getInputTypesList();\r\n    const reservedNames$ = this.contentTypesFieldsService.getReservedNames();\r\n\r\n    forkJoin([contentType$, fields$, dataTypes$, inputTypes$, reservedNames$]).subscribe(\r\n      ([contentType, fields, dataTypes, inputTypes, reservedNames]) => {\r\n        this.contentType = contentType;\r\n        this.dataTypes = dataTypes;\r\n        this.inputTypeOptions = inputTypes;\r\n\r\n        const existingFields: ReservedNames = {};\r\n        fields.forEach(field => {\r\n          existingFields[field.StaticName] = 'Field with this name already exists';\r\n        });\r\n        this.reservedNames = {\r\n          ...reservedNames,\r\n          ...existingFields,\r\n        };\r\n\r\n        if (this.editMode != null) {\r\n          const editFieldId = this.route.snapshot.paramMap.get('id') ? parseInt(this.route.snapshot.paramMap.get('id'), 10) : null;\r\n          const editField = fields.find(field => field.Id === editFieldId);\r\n          if (this.editMode === 'name') {\r\n            delete this.reservedNames[editField.StaticName];\r\n          }\r\n          this.fields.push(editField);\r\n        } else {\r\n          for (let i = 1; i <= 8; i++) {\r\n            this.fields.push({\r\n              Id: 0,\r\n              Type: DataTypeConstants.String,\r\n              InputType: InputTypeConstants.StringDefault,\r\n              StaticName: '',\r\n              IsTitle: fields.length === 0,\r\n              SortOrder: fields.length + i,\r\n            });\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < this.fields.length; i++) {\r\n          this.filterInputTypeOptions(i);\r\n          this.calculateHints(i);\r\n        }\r\n        this.loading$.next(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.loading$.complete();\r\n    this.saving$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  filterInputTypeOptions(index: number) {\r\n    this.filteredInputTypeOptions[index] = this.inputTypeOptions.filter(\r\n      option => option.dataType === this.fields[index].Type.toLocaleLowerCase()\r\n    );\r\n  }\r\n\r\n  resetInputType(index: number) {\r\n    let defaultInputType = this.fields[index].Type.toLocaleLowerCase() + InputTypeConstants.DefaultSuffix;\r\n    const defaultExists = this.filteredInputTypeOptions[index].some(option => option.inputType === defaultInputType);\r\n    if (!defaultExists) {\r\n      defaultInputType = this.filteredInputTypeOptions[index][0].inputType;\r\n    }\r\n    this.fields[index].InputType = defaultInputType;\r\n  }\r\n\r\n  calculateHints(index: number) {\r\n    const selectedDataType = this.dataTypes.find(dataType => dataType.name === this.fields[index].Type);\r\n    const selectedInputType = this.inputTypeOptions.find(inputTypeOption => inputTypeOption.inputType === this.fields[index].InputType);\r\n    this.dataTypeHints[index] = selectedDataType?.description ?? '';\r\n    this.inputTypeHints[index] = selectedInputType?.isObsolete\r\n      ? `OBSOLETE - ${selectedInputType.obsoleteMessage}`\r\n      : selectedInputType?.description ?? '';\r\n  }\r\n\r\n  getInputTypeOption(inputName: string) {\r\n    return this.inputTypeOptions.find(option => option.inputType === inputName);\r\n  }\r\n\r\n  save() {\r\n    this.saving$.next(true);\r\n    this.snackBar.open('Saving...');\r\n    if (this.editMode != null) {\r\n      const field = this.fields[0];\r\n      if (this.editMode === 'name') {\r\n        this.contentTypesFieldsService.rename(field.Id, this.contentType.Id, field.StaticName).subscribe(() => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n      } else if (this.editMode === 'inputType') {\r\n        this.contentTypesFieldsService.updateInputType(field.Id, field.StaticName, field.InputType).subscribe(() => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n      }\r\n    } else {\r\n      of(...this.fields).pipe(\r\n        filter(field => !!field.StaticName),\r\n        concatMap(field =>\r\n          this.contentTypesFieldsService.add(field, this.contentType.Id).pipe(catchError(error => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(responses => {\r\n        this.saving$.next(false);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.closeDialog();\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { pipe } from '../util/pipe';\nexport function reduce(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe(scan((acc, value, index) => accumulator(acc, value, index + 1)), takeLast(1))(source);\n    };\n}\n//# sourceMappingURL=reduce.js.map","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}