{"version":3,"file":"projects_eav-ui_src_app_app-administration_sub-dialogs_edit-content-type_edit-content-type_co-2abec4.47065022e9516577.js","mappings":"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","names":["typeNameRegExCleaned","toString","contentTypeNamePattern","substring","length","i0","ctx_r1","contentTypeNameError","EditContentTypeComponent_Conditional_4_Conditional_10_Conditional_0_Template","EditContentTypeComponent_Conditional_4_Conditional_10_Conditional_1_Template","name_r3","errors","required","pattern","scopeOption_r4","value","name","contentType","SharedDefId","_r1","save","$event","changeContentTypeName","EditContentTypeComponent_Conditional_4_Conditional_10_Template","changeScope","EditContentTypeComponent_Conditional_4_For_24_Template","unlockScope","EditContentTypeComponent_Conditional_4_Conditional_39_Template","closeDialog","Name","touched","disableAnimation","Scope","lockScope","scopeOptions","dropdownInsertValue","StaticName","ngForm_r5","form","valid","loading","logSpecs","enabled","specs","EditContentTypeComponent","#contentTypeSvc","#scope","#typeNameId","constructor","dialogRef","route","snackBar","this","hostClass","log","EavLogger","transient","ContentTypesService","snapshot","parent","paramMap","get","modeIsEdit","signalObj","Description","ChangeStaticName","NewStaticName","#scopeOptionsHttp","awaitHttp","getScopes","#scopeOptionsManual","computedObj","fromHttp","manual","concat","#convertScopeOptions","a","#loadContentTypeOnEdit","retrieveContentType","subscribe","set","newScopes","forEach","scopeOption","some","scope","push","ngAfterViewInit","setTimeout","close","newName","newScope","prompt","eavConstants","scopes","default","o","open","result","duration","document","activeElement","HTMLElement","blur","static","t","i1","i2","i3","fesm2022_core","VBU","selectors","hostVars","hostBindings","rf","ctx","EditContentTypeComponent_Conditional_4_Template","FormsModule","i4","MatFormFieldModule","i5","MatInputModule","i6","MatExpansionModule","i7","MatSelectModule","i8","i9","MatOptionModule","MatButtonModule","i10","MatIconModule","i11","MatDialogActions","FieldHintComponent","ClickStopPropagationDirective","TippyDirective","styles","initialValue","named","sig","signal","equal","isEqual","computation","comp","computed","httpRequest","pipe","take","asReadonly","sigAny","debugName","SIGNAL","computedWithPrev","initial","previous","newValue"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/constants/content-type.patterns.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/edit-content-type/edit-content-type.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/edit-content-type/edit-content-type.component.ts","./projects/eav-ui/src/app/shared/signals/signal.utilities.ts"],"sourcesContent":["/**\r\n * This is for the angular UI.\r\n * Note that since ca. 2023 the last \"-\" literal character must be escaped using \"\\-\"\r\n * because of changes in how browsers handle regular expressions, aka the /v flag.\r\n */\r\nconst contentTypeNameRegEx = /(^[A-Za-z][A-Za-z0-9]*$)|(^@[A-Za-z][A-Za-z0-9\\-]*$)/;\r\nconst typeNameRegExCleaned = contentTypeNameRegEx.toString();\r\nconst removeSlashAtStartAndEnd = typeNameRegExCleaned.substring(1, typeNameRegExCleaned.toString().length - 1);\r\n\r\n/**\r\n * The pattern determines what content-type names are allowed.\r\n * Basically it's A-Z and numbers after the first digit.\r\n * But there are two exceptions:\r\n *  - types describing an input-type begin with an `@` and can also contain `-` chars\r\n *  - types beginning with an `|` are very old type names for data-sources, they can contain anything!\r\n */\r\nexport const contentTypeNamePattern = removeSlashAtStartAndEnd;\r\nexport const contentTypeNameError = 'Standard letters and numbers are allowed. Must start with a letter.';\r\n\r\n// 2020-04-29 2dm - temporarily used this pattern while renaming unique named types containing '|' chars\r\n// export const contentTypeNamePattern = /(^[A-Za-z][A-Za-z0-9]+$)|(^@[A-Za-z][A-Za-z0-9-]*$)|(^\\|.*$)/;\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ modeIsEdit ? 'Edit Content Type' : 'New Content Type' }}</div>\r\n  </div>\r\n  @if (contentType())\r\n  {\r\n    <form #ngForm=\"ngForm\" (ngSubmit)=\"save()\">\r\n      <div class=\"eav-dialog-content\">\r\n        <div>\r\n          <div class=\"eav-edit-input\">\r\n            <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n              <mat-label>Name</mat-label>\r\n              <input matInput type=\"text\" required [pattern]=\"contentTypeNamePattern\" [ngModel]=\"contentType().Name\"\r\n                (ngModelChange)=\"changeContentTypeName($event)\" name=\"Name\" #name=\"ngModel\">\r\n            </mat-form-field>\r\n            @if (name.touched && name.errors)\r\n            {\r\n              @if (name.errors.required)\r\n              {\r\n                <app-field-hint [isError]=\"true\">This field is required</app-field-hint>\r\n              }\r\n              @if (name.errors.pattern) {\r\n                <app-field-hint [isError]=\"true\">{{ contentTypeNameError }}</app-field-hint>\r\n              }\r\n            }\r\n          </div>\r\n          <mat-accordion [@.disabled]=\"disableAnimation()\">\r\n            <mat-expansion-panel>\r\n              <mat-expansion-panel-header>\r\n                <mat-panel-title>Advanced</mat-panel-title>\r\n                <mat-panel-description></mat-panel-description>\r\n              </mat-expansion-panel-header>\r\n              <div class=\"eav-edit-input\">\r\n                <div class=\"eav-form-and-button\">\r\n                  <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                    <mat-label>Scope</mat-label>\r\n                    <mat-select [ngModel]=\"contentType().Scope\" name=\"Scope\" (ngModelChange)=\"changeScope($event)\"\r\n                      [disabled]=\"lockScope()\">\r\n                      @for (scopeOption of scopeOptions(); track scopeOption)\r\n                      {\r\n                        <mat-option [value]=\"scopeOption.value\">\r\n                          {{ scopeOption.name }}\r\n                        </mat-option>\r\n                      }\r\n                      <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n                    </mat-select>\r\n                  </mat-form-field>\r\n                  <button mat-icon-button type=\"button\" matTextSuffix [tippy]=\"lockScope() ? 'Unlock' : 'Lock'\"\r\n                    class=\"eav-scope-button\" (click)=\"unlockScope()\">\r\n                    <mat-icon>\r\n                      {{ lockScope() ? 'lock' : 'lock_open' }}\r\n                    </mat-icon>\r\n                  </button>\r\n                </div>\r\n                <app-field-hint>\r\n                  The scope should almost never be changed -\r\n                  <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n                </app-field-hint>\r\n              </div>\r\n              <div class=\"eav-edit-input\">\r\n                <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                  <mat-label>Static Name</mat-label>\r\n                  <input matInput type=\"text\" [ngModel]=\"contentType().StaticName\" name=\"StaticName\" disabled>\r\n                </mat-form-field>\r\n              </div>\r\n              @if (contentType().SharedDefId)\r\n              {\r\n                <div class=\"eav-edit-input\">\r\n                  <h3>Shared Content Type (Ghost)</h3>\r\n                  <p>Note: this can't be edited in the UI, for now if you really know what you're doing, do it in the DB\r\n                  </p>\r\n                  <p>Uses Type Definition of: {{ contentType().SharedDefId }}</p>\r\n                </div>\r\n              }\r\n            </mat-expansion-panel>\r\n          </mat-accordion>\r\n        </div>\r\n      </div>\r\n      <mat-dialog-actions align=\"end\">\r\n        <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || loading()\">\r\n          Save\r\n        </button>\r\n      </mat-dialog-actions>\r\n    </form>\r\n  }\r\n</div>\r\n","import { AfterViewInit, Component, HostBinding, inject } from '@angular/core';\r\nimport { MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { dropdownInsertValue } from '../../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, ScopeOption } from '../../../shared/constants/eav.constants';\r\nimport { contentTypeNameError, contentTypeNamePattern } from '../../constants/content-type.patterns';\r\nimport { ContentTypeEdit } from '../../models/content-type.model';\r\nimport { ContentTypesService } from '../../services/content-types.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FieldHintComponent } from '../../../shared/components/field-hint/field-hint.component';\r\nimport { ClickStopPropagationDirective } from '../../../shared/directives/click-stop-propagation.directive';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { transient } from '../../../core';\r\nimport { awaitHttp, computedObj, signalObj } from '../../../shared/signals/signal.utilities';\r\nimport { EavLogger } from '../../../shared/logging/eav-logger';\r\n\r\nconst logSpecs = {\r\n  enabled: false,\r\n  name: 'EditContentType',\r\n  specs: { }\r\n}\r\n@Component({\r\n  selector: 'app-edit-content-type',\r\n  templateUrl: './edit-content-type.component.html',\r\n  styleUrls: ['./edit-content-type.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatExpansionModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    FieldHintComponent,\r\n    ClickStopPropagationDirective,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class EditContentTypeComponent implements AfterViewInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  log = new EavLogger(logSpecs);\r\n  \r\n  #contentTypeSvc = transient(ContentTypesService);\r\n\r\n  /** Parameters in case of rename; scope should always be set as we want to always create in that scope*/\r\n  #scope = this.route.snapshot.parent.paramMap.get('scope');\r\n  #typeNameId = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<EditContentTypeComponent>,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.log.a('constructor');\r\n    this.#loadContentTypeOnEdit();\r\n  }\r\n\r\n  #loadContentTypeOnEdit(): void {\r\n    // If we're in new mode, just keep empty values\r\n    if (!this.modeIsEdit) \r\n      return;\r\n\r\n    // Preload infos about the current content type if we're in edit mode (not new)\r\n    this.#contentTypeSvc.retrieveContentType(this.#typeNameId).subscribe(fromHttp => {\r\n      this.contentType.set({\r\n        ...fromHttp,\r\n        ChangeStaticName: false,\r\n        NewStaticName: fromHttp.StaticName,\r\n      } satisfies ContentTypeEdit);\r\n    });\r\n  }\r\n\r\n\r\n  /** RegEx property to use in HTML */\r\n  protected contentTypeNamePattern = contentTypeNamePattern;\r\n  protected contentTypeNameError = contentTypeNameError;\r\n  protected dropdownInsertValue = dropdownInsertValue;\r\n\r\n  protected modeIsEdit = !!this.#typeNameId;\r\n\r\n  protected lockScope = signalObj<boolean>('lockScope', true);\r\n  protected disableAnimation = signalObj<boolean>('disableAnimation', true);\r\n  protected loading = signalObj<boolean>('loading', false);\r\n  protected contentType = signalObj<ContentTypeEdit>('contentType', {\r\n    StaticName: '',\r\n    Name: '',\r\n    Description: '',\r\n    Scope: this.#scope,\r\n    ChangeStaticName: false,\r\n    NewStaticName: '',\r\n  } as ContentTypeEdit);\r\n  \r\n  // TODO: @2dg this is a suggestion how to handle http requests in a more signal-like way\r\n  // @2dg note that doing this in the constructor would often be better, but I wanted to prove this way work.\r\n  // Scope Options Http will fire once when data arrives\r\n  #scopeOptionsHttp = awaitHttp('scopeOptionsHttp', this.#contentTypeSvc.getScopes());\r\n  #scopeOptionsManual = signalObj<ScopeOption[]>('scopeOptionsManual', []);\r\n  protected scopeOptions = computedObj<ScopeOption[]>('scopeOptions', () => {\r\n    const fromHttp = this.#scopeOptionsHttp();\r\n    const manual = this.#scopeOptionsManual();\r\n    return (fromHttp) ? manual.concat(this.#convertScopeOptions(fromHttp)) : manual;\r\n  });\r\n\r\n\r\n\r\n  #convertScopeOptions(scopeOptions: ScopeOption[]) {\r\n    const newScopes: ScopeOption[] = [];\r\n    scopeOptions.forEach(scopeOption => {\r\n      if (!newScopes.some(scope => scope.value === scopeOption.value))\r\n        newScopes.push(scopeOption);\r\n    });\r\n    if (!newScopes.some(scope => scope.value === this.#scope))\r\n      newScopes.push({\r\n        name: this.#scope,\r\n        value: this.#scope,\r\n      } satisfies ScopeOption);\r\n    return newScopes;\r\n  }\r\n\r\n\r\n  // workaround for angular component issue #13870\r\n  ngAfterViewInit() {\r\n    // timeout required to avoid ExpressionChangedAfterItHasBeenCheckedError\r\n    setTimeout(() => this.disableAnimation.set(false));\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  changeContentTypeName(newName: string) {\r\n    this.contentType.set({ ...this.contentType(), Name: newName });\r\n  }\r\n\r\n  changeScope(newScope: string) {\r\n    if (newScope === dropdownInsertValue) {\r\n      newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n      if (!this.scopeOptions().some(o => o.value === newScope)) {\r\n        this.#scopeOptionsManual.set([\r\n          {\r\n            name: newScope,\r\n            value: newScope,\r\n          } satisfies ScopeOption,\r\n          ...this.scopeOptions()\r\n        ]);\r\n      }\r\n    }\r\n    this.contentType.set({ ...this.contentType(), Scope: newScope });\r\n  }\r\n\r\n  unlockScope() {\r\n    this.lockScope.set(!this.lockScope());\r\n    if (this.lockScope())\r\n      this.contentType.set({ ...this.contentType(), Scope: this.#scope });\r\n  }\r\n\r\n  save() {\r\n    this.loading.set(true);\r\n    this.snackBar.open('Saving...');\r\n    this.#contentTypeSvc.save(this.contentType()).subscribe(result => {\r\n      this.loading.set(false);\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n    if (document.activeElement instanceof HTMLElement) {\r\n      document.activeElement.blur();\r\n    }\r\n  }\r\n}\r\n","import { computed, signal, Signal, WritableSignal } from '@angular/core';\r\nimport { SIGNAL } from '@angular/core/primitives/signals';\r\nimport isEqual from 'lodash-es/isEqual';\r\nimport { Observable, take } from 'rxjs';\r\n\r\n\r\n/**\r\n * Named signal with object equality check\r\n * @param name name for debugging\r\n * @param initialValue initial value to start the signal\r\n * @returns \r\n */\r\nexport function signalObj<T>(name: string, initialValue: T): WritableSignal<T> {\r\n  const sig = signal(initialValue, { equal: isEqual }) as WritableSignal<T>;\r\n  return named(name, sig);\r\n}\r\n\r\nexport function computedObj<T>(name: string, computation: () => T): Signal<T> {\r\n  const comp =  computed(computation, { equal: isEqual }) as Signal<T>; // needs recast, because isEqual changes it to Signal<any>\r\n  return named(name, comp);\r\n}\r\n\r\n// TODO: 2dg use this for most http signals\r\n// Either in the place where it is called, or if the service is only used in one place, in the service itself to return a signal instead\r\n/**\r\n * Convert a single http get into a simple signal.\r\n * It will initialize with the optional initialValue and then update with the httpGet result.\r\n * As such, it has a first value, and will only update once.\r\n * @param name name of the signal for debugging\r\n * @param httpRequest the http request\r\n * @param initialValue optional initial value\r\n * @returns \r\n */\r\nexport function awaitHttp<T>(name: string, httpRequest: Observable<T>, initialValue: T = null): Signal<T> {\r\n  const sig = signal(initialValue, { equal: isEqual }) as WritableSignal<T>;\r\n  // take(1) to only get the first value, and close the subscription right afterwards - which is what happens to all normal http requests\r\n  httpRequest.pipe(take(1)).subscribe(value => sig.set(value));\r\n  return named(name, sig.asReadonly());\r\n}\r\n\r\n\r\nexport function named<TSig, TVal extends Signal<TVal> | WritableSignal<TVal>>(name: string, signal: TSig): TSig {\r\n  if (!signal) return signal;\r\n  const sigAny = signal as any;\r\n  sigAny.debugName = name;\r\n  if (!sigAny[SIGNAL]) return signal;\r\n  (sigAny[SIGNAL]).debugName = name;\r\n  return signal;\r\n}\r\n\r\n\r\n\r\n// wip atm unused\r\n/** Slightly unclean signal with previous value */\r\n// https://github.com/angular/angular/issues/54339\r\nexport function computedWithPrev<T>(computation: (prev: T | undefined) => T, initial?: T): Signal<T> {\r\n\tlet previous = initial;\r\n\treturn computed(() => {\r\n\t\tconst newValue = computation(previous);\r\n\t\tprevious = newValue;\r\n\t\treturn newValue;\r\n\t}, { equal: isEqual });\r\n}"],"x_google_ignoreList":[]}