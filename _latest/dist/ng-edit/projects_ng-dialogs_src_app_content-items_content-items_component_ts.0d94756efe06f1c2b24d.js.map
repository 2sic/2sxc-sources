{"version":3,"sources":["./projects/ng-dialogs/src/app/app-administration/services/app-dialog-config.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app.service.ts","./projects/ng-dialogs/src/app/app-administration/services/import-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/pipelines.service.ts","./projects/ng-dialogs/src/app/app-administration/services/views.service.ts","./projects/ng-dialogs/src/app/app-administration/services/web-apis.service.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.html","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/ng-dialogs/src/app/content-items/content-items.component.html","./projects/ng-dialogs/src/app/content-items/content-items.component.ts","./projects/ng-dialogs/src/app/content-items/content-items.helpers.ts","./projects/ng-dialogs/src/app/import-app/services/import-app.service.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.html","./projects/ng-dialogs/src/app/shared/constants/guid.constants.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts"],"names":["http","context","dnnContext","getDialogSettings","appId","this","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","AppDialogConfigService","getContentInfo","scope","appid","zoneId","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppPartsService","getAppInfo","exportApp","includeContentGroups","resetAppGuid","exportForVersionControl","ExportAppService","webApiAppPartsRoot","importAppParts","file","formData","FormData","append","post","resetApp","ImportAppPartsService","webApiQueryRun","webApiQueryRoot","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","getAll","contentType","importQuery","pipe","fileBase64","AppId","ContentBase64","clonePipeline","id","Id","delete","PipelinesService","webApiViewRoot","import","export","getPolymorphism","getUsage","guid","ViewsService","global","path","mask","withSubfolders","paths","map","splitIndex","lastIndexOf","fileExtIndex","folder","substring","name","create","purpose","details","apiPath","WebApisService","agInit","item","data","refresh","clone","onClone","onExport","deleteItem","onDelete","ContentItemsActionsComponent","Array","isArray","value","encodedValue","htmlEncode","colDef","allowMultiValue","entities","length","text","replace","ContentItemsEntityComponent","metadataCount","Metadata","metadataTooltip","For","Target","Number","String","Guid","openMetadata","onOpenMetadata","ContentItemsStatusComponent","published","metadata","hasMetadata","isFilterActive","doesFilterPass","publishedPassed","metadataPassed","hasMetadataPassed","valueGetter","node","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","PubMetaFilterComponent","dialogRef","contentItemsService","contentTypesService","hostClass","eavConstants","dropdownInsertValue","ngOnInit","subscription","Subscription","targetTypeOptions","Object","values","option","keyTypeOptions","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","form","defaultScope","addControl","control","keyType","controls","testValue","test","patternWholeNumber","hasCurly","some","bracket","includes","patternGuid","add","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","key","contentTypeStaticName","formValues","targetType","items","formValues$","combineLatest","guidedMode","foundTargetType","find","type","updatedForm","isAppMetadata","keys","templateVars$","scopeOptions","contentItems","contentTypes","guidedKey","unknownTargetType","targetTypeHint","hint","guidedKeyExists","ngOnDestroy","complete","unsubscribe","closeDialog","result","close","toggleGuidedKey","event","toggleGuidedMode","checked","confirm","target","retrieveContentTypes","getScopes","scopes","CreateMetadataDialogComponent","router","route","entitiesService","contentExportService","snackBar","globalConfigService","dialog","viewContainerRef","changeDetectorRef","contentType$","items$","debugEnabled$","getDebugEnabled$","modules","gridOptions","frameworkComponents","pubMetaFilterComponent","booleanFilterComponent","idFieldComponent","contentItemsStatusComponent","contentItemsActionsComponent","contentItemsEntityComponent","gridApi$","snapshot","paramMap","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosed","onGridReady","api","retrieveContentType","getColumns","columns","columnDefs","buildColumnDefs","filterModel","urlFilters","parsed","charAt","atob","JSON","parse","error","console","IsPublished","IsMetadata","Status","filter","filterKeys","filterTo","buildFilterModel","sessionStorage","getItem","setColumnDefs","gridApi","take","setFilterModel","_Title","navigate","relativeTo","editItem","formUrl","ContentTypeName","EntityId","exportContent","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","filesDropped","files","importFile","toLocaleLowerCase","importContent","importItem","state","createMetadata","autoFocus","width","afterClosed","res","parseInt","markForCheck","debugFilter","warn","alert","events","firstChild","pairwise","headerName","field","headerClass","cellClass","cellRenderer","sortable","cellRendererParams","tooltipGetter","paramsData","_RepositoryId","valueGetterStatus","bind","flex","minWidth","onCellClicked","headerTooltip","valueGetterUsage","pinned","column","StaticName","Type","Entity","AllowMultiValue","e","valueGetterEntityField","useTimePicker","DateTime","UseTimePicker","valueGetterDateTime","valueGetterBoolean","DuplicateEntity","exportEntity","duration","err","dismiss","ExceptionMessage","_Used","_Uses","rawValue","Title","ContentItemsComponent","webApiAppRoot","importApp","changedName","ImportAppService","tooltip","copy","IdFieldComponent","guidRegex","onClick","stopPropagation","ClickStopPropagationDirective","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","ToggleDebugDirective","copyToClipboard","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange","sanitizer","transform","html","bypassSecurityTrustHtml","SafeHtmlPipe"],"mappings":"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","file":"projects_ng-dialogs_src_app_content-items_content-items_component_ts.0d94756efe06f1c2b24d.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp() {\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryRoot = 'admin/query/';\r\nconst webApiQueryImport = webApiQueryRoot + 'import';\r\nconst webApiQueryClone = webApiQueryRoot + 'Clone';\r\nconst webApiQueryDelete = webApiQueryRoot + 'Delete';\r\nexport const webApiQueryRun = webApiQueryRoot + 'Run';\r\nexport const webApiQueryDebugStream = webApiQueryRoot + 'DebugStream';\r\nexport const webApiQuerySave = webApiQueryRoot + 'Save';\r\nexport const webApiQueryGet = webApiQueryRoot + 'Get';\r\nexport const webApiQueryDataSources = webApiQueryRoot + 'DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiAppFileCreate, webApiAppFilesAll, webApiExplorer } from '../../../../../edit/shared/services';\r\nimport { Context } from '../../shared/services/context';\r\nimport { WebApi, WebApiDetails } from '../models';\r\n\r\n@Injectable()\r\nexport class WebApisService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<string[]>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFilesAll), {\r\n      params: { appId: this.context.appId.toString(), global: 'false', path: '', mask: '*Controller.cs', withSubfolders: 'true' },\r\n    }).pipe(\r\n      map(paths => {\r\n        const webApis: WebApi[] = paths.map(path => {\r\n          const splitIndex = path.lastIndexOf('/');\r\n          const fileExtIndex = path.lastIndexOf('.');\r\n          const folder = path.substring(0, splitIndex);\r\n          const name = path.substring(splitIndex + 1, fileExtIndex);\r\n          const webApi: WebApi = { path, folder, name };\r\n          return webApi;\r\n        });\r\n        return webApis;\r\n      }),\r\n    );\r\n  }\r\n\r\n  create(name: string) {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFileCreate), {}, {\r\n      params: { appId: this.context.appId.toString(), purpose: 'api', global: 'false', path: `api/${name}` },\r\n    });\r\n  }\r\n\r\n  details(apiPath: string) {\r\n    return this.http.get<WebApiDetails>(this.dnnContext.$2sxc.http.apiUrl(webApiExplorer), {\r\n      params: { path: apiPath },\r\n    });\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  private params: ContentItemsActionsParams;\r\n  private item: ContentItem;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ContentItemsActionsParams) {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone() {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export() {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem() {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <button mat-menu-item (click)=\"deleteItem()\">\r\n    <mat-icon>delete</mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","<div [tippy]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private params: ContentItemsStatusParams;\r\n  private item: ContentItem;\r\n\r\n  agInit(params: ContentItemsStatusParams) {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    this.metadataTooltip = this.item.For\r\n      ? 'This item is metadata for:'\r\n      + `\\nType: ${this.item.For.Target}`\r\n      + (this.item.For.Number ? `\\nNumber: ${this.item.For.Number}` : '')\r\n      + (this.item.For.String ? `\\nString: ${this.item.For.String}` : '')\r\n      + (this.item.For.Guid ? `\\nGuid: ${this.item.For.Guid}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata() {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button button-publish\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" [ngClass]=\"{ 'hide-until-row-hover': metadataCount === 0 && !value.metadata }\"\r\n    matRipple [tippy]=\"metadataTooltip\" (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount > 0 ? metadataCount : null\" matBadgePosition=\"below after\"\r\n      matBadgeColor=\"accent\" matBadgeSize=\"small\">\r\n      {{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n</div>\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n    const value: PubMeta = this.params.valueGetter(params.node);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create Metadata</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This is a special operation to add an item which is metadata for another item,\r\n    see <a href=\"http://r.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- Target Type -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Target</mat-label>\r\n\r\n        <mat-select *ngIf=\"data.guidedMode\" formControlName=\"targetType\" required>\r\n          <mat-option *ngFor=\"let option of targetTypeOptions\" [value]=\"option.type\">\r\n            {{ option.label }}\r\n          </mat-option>\r\n          <mat-option *ngIf=\"data.unknownTargetType\" [value]=\"data.formValues.targetType\">\r\n            {{ data.formValues.targetType }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"number\" min=\"0\" *ngIf=\"!data.guidedMode\" formControlName=\"targetType\" required>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint\r\n        *ngIf=\"form.controls['targetType'].touched && !form.controls['targetType'].invalid && data.unknownTargetType\"\r\n        [isError]=\"false\">\r\n        Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"data.targetTypeHint\" [isError]=\"false\">{{ data.targetTypeHint }}</app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern\"\r\n        [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n\r\n      <!-- Key Type -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Key type</mat-label>\r\n\r\n        <mat-select formControlName=\"keyType\" required>\r\n          <mat-option *ngFor=\"let option of data.keyTypeOptions\" [value]=\"option\">\r\n            {{ option }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint *ngIf=\"form.controls['keyType'].touched && form.controls['keyType'].errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n\r\n      <!-- Content Type for Content Items -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\"\r\n        *ngIf=\"data.guidedMode && data.formValues.targetType === eavConstants.metadata.entity.type\">\r\n        <mat-label>Content Type</mat-label>\r\n\r\n        <mat-select formControlName=\"contentTypeForContentItems\"\r\n          [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <!-- Scope for Content Types -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\"\r\n        *ngIf=\"data.guidedMode && (data.formValues.targetType === eavConstants.metadata.entity.type || data.formValues.targetType === eavConstants.metadata.contentType.type)\">\r\n        <mat-label>Scope</mat-label>\r\n\r\n        <mat-select formControlName=\"scopeForContentTypes\"\r\n          [placeholder]=\"!data.scopeOptions.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n            {{ scopeOption.name }}\r\n          </mat-option>\r\n          <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint>\r\n        The scope should almost never be changed -\r\n        <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n      </app-field-hint>\r\n\r\n      <!-- Key -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Key</mat-label>\r\n\r\n        <ng-container *ngIf=\"data.guidedMode; then specialKeyInputs else defaultKeyInput\">\r\n        </ng-container>\r\n\r\n        <ng-template #specialKeyInputs>\r\n          <ng-container [ngSwitch]=\"data.formValues.targetType\">\r\n            <ng-container *ngSwitchCase=\"eavConstants.metadata.entity.type\">\r\n              <mat-select *ngIf=\"data.guidedKey\" formControlName=\"key\" required\r\n                [placeholder]=\"!data.contentItems.length ? 'No items found' : ''\">\r\n                <mat-option *ngFor=\"let item of data.contentItems\" [value]=\"item.Guid\">\r\n                  {{ item.Title }} ({{ item.Id }})\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n              <input matInput type=\"text\" *ngIf=\"!data.guidedKey\" formControlName=\"key\" required>\r\n            </ng-container>\r\n\r\n            <ng-container *ngSwitchCase=\"eavConstants.metadata.contentType.type\">\r\n              <mat-select *ngIf=\"data.guidedKey\" formControlName=\"key\" required\r\n                [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n                <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n              <input matInput type=\"text\" *ngIf=\"!data.guidedKey\" formControlName=\"key\" required>\r\n            </ng-container>\r\n\r\n            <ng-container *ngSwitchDefault>\r\n              <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n            </ng-container>\r\n          </ng-container>\r\n        </ng-template>\r\n\r\n        <ng-template #defaultKeyInput>\r\n          <input matInput type=\"text\" *ngIf=\"data.formValues.keyType !== eavConstants.keyTypes.number\"\r\n            formControlName=\"key\" required>\r\n          <input matInput type=\"number\" *ngIf=\"data.formValues.keyType === eavConstants.keyTypes.number\"\r\n            formControlName=\"key\" required>\r\n        </ng-template>\r\n\r\n        <div matSuffix class=\"selection-suffix\" *ngIf=\"data.guidedMode && data.guidedKeyExists\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': data.guidedKey }\" tippy=\"Select option\"\r\n            (click)=\"toggleGuidedKey(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !data.guidedKey }\" tippy=\"Insert value\"\r\n            (click)=\"toggleGuidedKey(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber\"\r\n        [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternGuid\" [isError]=\"true\">\r\n        Must be a valid GUID\r\n      </app-field-hint>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <mat-slide-toggle color=\"accent\"\r\n        [tippy]=\"data.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n        [checked]=\"data.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n        {{ data.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, merge, Observable, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogTemplateVars, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss']\r\n})\r\nexport class CreateMetadataDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: FormGroup;\r\n  templateVars$: Observable<MetadataDialogTemplateVars>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = new Subscription();\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    const defaultScope = eavConstants.scopes.default.value;\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('targetType', new FormControl(eavConstants.metadata.entity.type, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new FormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new FormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new FormControl(defaultScope));\r\n    this.form.addControl('key', new FormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscription.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || defaultScope;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscription.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscription.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.type && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.type === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!GeneralHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value)) {\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n        }\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType)) {\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n        }\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.type;\r\n        if (isAppMetadata && formValues.key !== this.context.appId) {\r\n          updatedForm.key = this.context.appId;\r\n        }\r\n\r\n        if (Object.keys(updatedForm).length) {\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        GeneralHelpers.disableControl(this.form.controls['keyType'], keyTypeDisabled);\r\n        GeneralHelpers.disableControl(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.templateVars$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const templateVars: MetadataDialogTemplateVars = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.type === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.type === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists: [eavConstants.metadata.entity.type, eavConstants.metadata.contentType.type].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      // if not a known target, use the number\r\n      target: this.targetTypeOptions.find(option => option.type === formValues.targetType)?.target ?? formValues.targetType.toString(),\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { AbstractControl, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: FormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","<div appToggleDebug class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ (contentType$ | async)?.Name }} Data</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div *ngIf=\"(contentType$ | async)?.Properties?.ListInstructions as listInstructions\"\r\n    [innerHTML]=\"listInstructions | safeHtml\">\r\n  </div>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n      (filesDropped)=\"filesDropped($event)\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\">\r\n      <button mat-button tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon>cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n        <mat-icon>local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      <button mat-button color=\"accent\" tippy=\"Print filter to console\" *ngIf=\"debugEnabled$ | async\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon>filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n    </div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { AllCommunityModules, CellClickedEvent, ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith, take } from 'rxjs/operators';\r\nimport { GlobalConfigService } from '../../../../edit/shared/store/ngrx-data';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogAngular } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './ag-grid-components/content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './ag-grid-components/content-items-status/content-items-status.models';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemImportDialogData } from './content-item-import/content-item-import-dialog.config';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n  items$ = new BehaviorSubject<ContentItem[]>(null);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      pubMetaFilterComponent: PubMetaFilterComponent,\r\n      booleanFilterComponent: BooleanFilterComponent,\r\n      idFieldComponent: IdFieldComponent,\r\n      contentItemsStatusComponent: ContentItemsStatusComponent,\r\n      contentItemsActionsComponent: ContentItemsActionsComponent,\r\n      contentItemsEntityComponent: ContentItemsEntityComponent,\r\n    },\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      const columnDefs = this.buildColumnDefs(columns);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters));\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogAngular('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.contentTypeStaticName,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(params: CellClickedEvent) {\r\n    const item: ContentItem = params?.data;\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        ids.push((rowNode.data as ContentItem).Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: ContentItemImportDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().pipe(take(1)).subscribe((res: MetadataInfo) => {\r\n      if (res == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: res.target,\r\n            ...(res.keyType === eavConstants.keyTypes.guid && { Guid: res.key }),\r\n            ...(res.keyType === eavConstants.keyTypes.number && { Number: parseInt(res.key, 10) }),\r\n            ...(res.keyType === eavConstants.keyTypes.string && { String: res.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    alert('Check console for filter information');\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchItems();\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline',\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agTextColumnFilter',\r\n        cellRendererParams: {\r\n          tooltipGetter: (paramsData: ContentItem) => `ID: ${paramsData.Id}\\nRepoID: ${paramsData._RepositoryId}\\nGUID: ${paramsData.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        headerName: 'Status', field: 'Status', width: 80, headerClass: 'dense', cellClass: 'secondary-action no-padding',\r\n        filter: 'pubMetaFilterComponent', cellRenderer: 'contentItemsStatusComponent', valueGetter: this.valueGetterStatus,\r\n        cellRendererParams: {\r\n          onOpenMetadata: this.openMetadata.bind(this),\r\n        } as ContentItemsStatusParams,\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)', field: '_Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: this.editItem.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Stats', headerTooltip: 'Used by others / uses others',\r\n        field: '_Used', width: 70, headerClass: 'dense', cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter', valueGetter: this.valueGetterUsage,\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding', width: 120, cellRenderer: 'contentItemsActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onClone: this.clone.bind(this),\r\n          onExport: this.export.bind(this),\r\n          onDelete: this.delete.bind(this),\r\n        } as ContentItemsActionsParams,\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName, field: column.StaticName, flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          try {\r\n            colDef.allowMultiValue = column.Metadata.Entity.AllowMultiValue;\r\n          } catch (e) {\r\n            colDef.allowMultiValue = true;\r\n          }\r\n          colDef.cellRenderer = 'contentItemsEntityComponent';\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          try {\r\n            colDef.useTimePicker = column.Metadata.DateTime.UseTimePicker;\r\n          } catch (e) {\r\n            colDef.useTimePicker = false;\r\n          }\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = 'booleanFilterComponent';\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterStatus(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    const published: PubMeta = {\r\n      published: item.IsPublished,\r\n      metadata: !!item.For,\r\n      hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n    };\r\n    return published;\r\n  }\r\n\r\n  private valueGetterUsage(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    return `${item._Used} / ${item._Uses}`;\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n\r\n    // remove 'Z' and replace 'T'\r\n    return (params.colDef as ExtendedColDef).useTimePicker ? rawValue.substring(0, 19).replace('T', ' ') : rawValue.substring(0, 10);\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { NumberFilterModel, TextFilterModel } from '@ag-grid-community/all-modules';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { PubMetaFilterModel } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let parsed: Record<string, any>;\r\n  try {\r\n    parsed = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!parsed) { return; }\r\n\r\n  // Info: filters can be IsPublished, IsMetadata, string, number and boolean\r\n  // 1. First handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (parsed.IsPublished || parsed.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: parsed.IsPublished ? parsed.IsPublished : '',\r\n      metadata: parsed.IsMetadata ? parsed.IsMetadata : '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // 2. Now handle all other cases\r\n  const filterKeys = Object.keys(parsed);\r\n  for (const key of filterKeys) {\r\n    // Skip IsPublished/IsMetadata, as they were already handled before\r\n    if (key === 'IsPublished' || key === 'IsMetadata') { continue; }\r\n\r\n    // TODO:\r\n    // Support multiple values: It should be possible to have \"Title: ['Daniel', 'Petar']\" resulting in an OR on this column\r\n    // Support entity-id on item-columns, like \"Authors: 42\" instead of a title-search\r\n    const value = parsed[key];\r\n    if (typeof value === 'string') {\r\n      const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n      filterModel[key] = filter;\r\n    } else if (typeof value === 'number') {\r\n      const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n      filterModel[key] = filter;\r\n    } else if (typeof value === 'boolean') {\r\n      const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n      filterModel[key] = filter;\r\n    }\r\n  }\r\n\r\n  return filterModel;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ImportAppResult } from '../models/import-app-result.model';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ? changedName : '');\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: IdFieldParams) {\r\n    this.id = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>\r\n","/**\r\n * Do not reuse regex:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#using_test_on_a_regex_with_the_global_flag\r\n */\r\nexport function guidRegex(): RegExp {\r\n  return /^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$/i;\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}