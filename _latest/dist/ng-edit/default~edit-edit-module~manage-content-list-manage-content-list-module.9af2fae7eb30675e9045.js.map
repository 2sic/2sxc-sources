{"version":3,"sources":["./src/app/shared/components/dialog-entry/dialog-entry.component.ts","C:/Projects/2sxc/LTS-11.22/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/observable/interval.js","C:/Projects/2sxc/LTS-11.22/eav-item-dialog-angular/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js"],"names":["dialog","viewContainerRef","router","route","context","changeDetectorRef","navigation","this","getCurrentNavigation","dialogData","extras","state","ngOnInit","dialogConfig","snapshot","data","Error","name","id","getComponent","then","component","initContext","init","dialogRef","open","backdropClass","panelClass","panelSize","showScrollbar","autoFocus","closeOnNavigation","position","top","afterClosed","pipe","subscribe","navRes","navigateUrl","pathFromRoot","length","window","parent","$2sxc","totalPopup","close","error","navigate","url","relativeTo","markForCheck","ngOnDestroy","DialogEntryComponent","dispatch","subscriber","counter","period","next","schedule","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","left","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","_document","_viewportRuler","positions","Map","clear","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","event","target","cachedPosition","get","newTop","newLeft","scrolledParentNode","documentElement","viewportScrollPosition","topDifference","leftDifference","node","contains","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","getContext","drawImage","_a","passiveEventListenerOptions","passive","activeEventListenerOptions","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","find","handle","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","run","distance","_getDragDistance","delta","_pointerDirectionDelta","Math","abs","dragStartThreshold","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","isDragging","_startDragSequence","_pointerUp","withRootElement","_parentPositions","registerDragItem","_placeholder","getPlaceholderElement","getRootElement","handles","_toggleNativeDragInteractions","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","_ownerSVGElement","ownerSVGElement","boundaryElement","unsubscribe","change","_containInsideBoundaryOnResize","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","transform","add","delete","direction","container","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","documentRef","dropContainer","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","body","appendChild","replaceChild","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","pointerMove","pointerUp","scroll","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","getTransformTransitionDurationInMs","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","newValue","round","min","max","removeChild","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","scheduler","isNumeric","Observable","interval","animationFrame","takeUntil","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","index","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","splice","parentElement","_shouldEnterAsFirstChild","reference","unshift","push","_cacheItemPositions","_cacheParentPositions","_reset","items","previousItems","_withDropContainer","filter","every","slice","orientation","_scrollableElements","findIndex","reverse","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getElementScrollDirections","getViewportSize","elementToMeasure","getVisibleElement","sort","a","b","_stopReceiving","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","_sortFromLastPointerPosition","isReceiving","shadowRoot","predicate","amount","scrollBy","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","_persistentTouchmoveListener","startsWith","e","options","config","_clearGlobalListeners","instance","ɵfac","t","ɵprov","factory","token","providedIn","DEFAULT_CONFIG","DragDrop","CDK_DRAG_PARENT","CDK_DROP_LIST_GROUP","CDK_DRAG_CONFIG","_uniqueIdCounter","CDK_DROP_LIST","CdkDropList","dragDrop","_changeDetectorRef","_dir","_group","_scrollDispatcher","_destroyed","connectedTo","_unsortedItems","_dropListRef","createDropList","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","_items","_syncItemsWithRef","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","dispose","ref","startWith","withDirection","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","ɵdir","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","inputs","outputs","exportAs","features","provide","useValue","useExisting","CDK_DRAG_HANDLE","CDK_DRAG_PLACEHOLDER","CDK_DRAG_PREVIEW","CdkDrag","_viewContainerRef","_selfHandle","observer","subscription","movedEvent","createDrag","addItem","_syncInputs","reset","getFreeDragPosition","onStable","take","_updateRootElement","changes","tap","childHandleElements","_parentDrag","rootElementSelector","withHandles","switchMap","merge","_stateChanges","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","getClosestMatchingAncestor","boundary","dir","templateRef","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","contentQueries","dirIndex","_t","first","currentElement","matches","msMatchesSelector","DragDropModule","ɵmod","ɵinj","providers","imports"],"mappings":"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","file":"default~edit-edit-module~manage-content-list-manage-content-list-module.9af2fae7eb30675e9045.js","sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { NavigateFormResult } from '../../../../../../edit/shared/models';\r\nimport { consoleLogAngular } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { Dictionary } from '../../models/dictionary.model';\r\nimport { EavWindow } from '../../models/eav-window.model';\r\nimport { Context } from '../../services/context';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: Dictionary;\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogAngular('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      if (dialogConfig.initContext) {\r\n        this.context.init(this.route);\r\n      }\r\n\r\n      this.dialogRef = this.dialog.open(component, {\r\n        data: this.dialogData,\r\n        backdropClass: 'dialog-backdrop',\r\n        panelClass: [\r\n          'dialog-panel',\r\n          `dialog-panel-${dialogConfig.panelSize}`,\r\n          dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n          ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n        ],\r\n        viewContainerRef: this.viewContainerRef,\r\n        autoFocus: false,\r\n        closeOnNavigation: false,\r\n        // spm NOTE: used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n        // Real top margin is overwritten in css e.g. dialog-panel-large\r\n        position: { top: '0' }\r\n      });\r\n\r\n      this.dialogRef.afterClosed().pipe(take(1)).subscribe((data: any) => {\r\n        consoleLogAngular('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n        const navRes = data as NavigateFormResult;\r\n        if (navRes?.navigateUrl != null) {\r\n          this.router.navigate([navRes.navigateUrl]);\r\n          return;\r\n        }\r\n\r\n        if (this.route.pathFromRoot.length <= 3) {\r\n          try {\r\n            window.parent.$2sxc.totalPopup.close();\r\n          } catch (error) { }\r\n          return;\r\n        }\r\n\r\n        if (this.route.snapshot.url.length > 0) {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n        } else {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n        }\r\n      });\r\n\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n//# sourceMappingURL=interval.js.map","import { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = event.target;\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    clone.value = source.value;\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n        this._toggleNativeDragInteractions();\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const preview = this._preview = this._createPreviewElement();\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp(x, minX, maxX);\n            y = clamp(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = event.target;\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp$1(fromIndex, array.length - 1);\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach(sibling => sibling._startReceiving(this));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param previousIndex Index of the item when dragging started.\n     *\n     * @breaking-change 11.0.0 `previousIndex` parameter to become required.\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = new Set();\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /** Emits when the viewport has been scrolled while the user is dragging an item. */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _dir, _group, \n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    _scrollDispatcher, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n            if (!this._scrollableParentsResolved && this._scrollDispatcher) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: ScrollDispatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc1.ScrollDispatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                // Usually handles are only allowed to be a descendant of the drag element, but if\n                // the consumer defined a different drag root, we should allow the drag element\n                // itself to be a handle too.\n                if (this._selfHandle && this.rootElementSelector) {\n                    childHandleElements.push(this.element);\n                }\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n//# sourceMappingURL=drag-drop.js.map"],"sourceRoot":"webpack:///"}