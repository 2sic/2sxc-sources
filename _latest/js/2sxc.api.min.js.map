{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/tools/total-popup.ts","webpack:///./src/tools/obj2url.ts","webpack:///./src/tools/url-params.ts","webpack:///./src/data/target-types.ts","webpack:///./src/Stats.ts","webpack:///./src/constants/index.ts","webpack:///../core/logging/log-entry-options.ts","webpack:///../core/constants/index.ts","webpack:///../core/logging/has-log.ts","webpack:///../core/logging/Log.ts","webpack:///../core/logging/log-call.ts","webpack:///../core/plumbing/obj.ts","webpack:///../core/plumbing/no-jquery.ts","webpack:///../core/logging/entry.ts","webpack:///../core/logging/insights.ts","webpack:///./src/environment/env-loader-dnn-sf.ts","webpack:///./src/environment/env-loader-dynamic.ts","webpack:///./src/environment/env-loader-meta.ts","webpack:///./src/environment/sxc-global-environment.ts","webpack:///./src/sxc/web-api/ajax-promise.ts","webpack:///./src/sxc/web-api/sxc-web-api.ts","webpack:///./src/sxc/sxc-part.ts","webpack:///./src/sxc/data/sxc-data-service-base.ts","webpack:///./src/sxc/data/sxc-data.ts","webpack:///./src/sxc/data/sxc-query.ts","webpack:///./src/sxc/sxc-cms.ts","webpack:///./src/sxc/sxc.ts","webpack:///./src/sxc-global/sxc-global-bootstrap.ts","webpack:///./src/sxc-global/context-identifier.ts","webpack:///./src/sxc-global/sxc-global-debug.ts","webpack:///./src/sxc-global/sxc-global-http.ts","webpack:///./src/sxc-global/sxc-global-get.ts","webpack:///./src/2sxc.api.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","frame","undefined","callback","open","url","z","window","top","parent","wrapper","document","createElement","setAttribute","body","appendChild","ifrm","className","this","close","replace","frm","parentNode","removeChild","closeThis","$2sxc","totalPopup","bools","specialValues","concat","toUrl","obj","encode","Array","isArray","Error","urlParam","toUrlRecursive","filter","x","length","join","toObj","decode","debug","parts","back","data","result","rec","keys","split","reduce","list","j","isNaN","Number","unflatStringsToObj","depth","prefix","repeat","customEncode","subItem","map","all","acc","val","arrayFlat","arr","slice","replaceAll","equals","separator","v","stack","pair","dotCount","match","subKey","substring","push","restoreValue","decodeURIComponent","isNumeric","str","parseFloat","mark","includes","encodeURIComponent","restoreString","spaceMarkerTemp","String","fromCharCode","MetadataTargetTypes","strResult","results","RegExp","exec","location","search","hash","matches","pathname","reverse","require","found","message","alert","isDebug","toLocaleLowerCase","ToolUrlObjects","watchDomChanges","LogEntryOptions","DnnUiRoot","HeaderNames","ApiUrlRoots","logName","parentLog","initialMessage","initLog","initLogInternal","log","rename","linkLog","add","keepData","indexOf","entries","callDepths","maxEntries","liveDump","_parentHasLiveDump","_parentHasKeepData","fullIdentifier","identifier","scope","id","idCache","randomString","startTime","Date","getTime","dot","substr","Math","min","rest","e","_prepareMessage","_addEntry","_prepareEntry","entry","addData","logData","msg","time","Function","toString","callParams","_callDepthAdd","_callDepthRemove","last","pop","console","warn","dump","one","dumpOne","dumpList","start","index","forEach","line","source","stringLength","chars","randomstring","rnum","floor","random","initialEntry","behavior","lastMessage","processExtraBehavior","onlyAddIfNew","done","return","error","throw","TypeSafeAssign","args","current","target","DeepClone","original","ignoreCircular","JSON","stringify","getCircularReplacer","parse","seen","WeakSet","_","has","ready","readyState","addEventListener","once","param","k","domFromString","string","dummyParent","insertAdjacentHTML","from","querySelectorAll","brokenScript","workingScript","attributes","attribute","nodeName","nodeValue","textContent","NoJQ","replaceWith","elements","children","element","offset","clientRect","getBoundingClientRect","scrollY","left","scrollX","width","computedStyle","getComputedStyle","offsetWidth","parseInt","getPropertyValue","height","offsetHeight","outerWidth","empty","childNodes","toBeReplaced","newElement","runScripts","parentElement","scripts","restores","script","type","replaceChild","restore","AssetsLoader","append","newElements","tagName","restoreType","others","copy","src","listener","onload","onerror","head","setTimeout","_data","Obj","history","setName","InsightsLogSet","logs","show","partName","part","logSet","autoLimit","logNames","Insights","_insights","InsightsSingleton","helpAutoDetect","env","dnnSfFallback","cl","dnnSfLoadWhenDocumentReady","$","sf","ServicesFramework","dnnSf","apiRoot","getServiceRoot","sfJsInfo","page","getTabId","root","api","appApi","rvtHeader","rvt","getAntiForgeryValue","uiRoot","platform","load","mainLoader","startMetaTagObserver","observer","MutationObserver","mutationsList","mut","attributeName","updateEnv","getMetaContent","observe","getJsApiMetaTag","childList","subtree","startInputRvtObserver","inputRvtObserver","loadRvtFromHiddenInput","hiddenField","querySelector","input","updateRvt","retries","dynamicPageHelper","loadMetaFromHeader","forceFallback","meta","newJsInfo","ourMeta","getAttribute","metaLoader","_jsApi","envSpecs","addSlash","endsWith","header","replacedRvt","newRvt","ensureReadyOrThrow","dialogQuery","partRequested","sxc","makePromise","settings","headers","promise","ajax","async","dataType","contentType","method","getActionUrl","beforeSend","xhr","setRequestHeader","preventAutoFail","fail","showDetailedHttpError","controller","action","http","apiUrl","endpoint","params","settingsOrUrl","request","post","delete","put","controllerAction","controllerName","actionName","defaults","assign","fetchRaw","ctxParams","ctx","urlLower","_ignoreHeaders","appId","zoneId","fetch","fetchJson","then","response","json","cbid","toLocaleUpperCase","urlAndParams","urlParts","nameInError","webApi","SxcPart","SxcData","getAll","getInternal","getOne","getMany","criteria","fields","path","values","metadataFor","Target","Entity","Guid","For","update","idOrGuid","SxcDataServiceBase","urlParams","getStream","stream","getStreams","streams","run","runParams","cacheKey","_isSxcInstance","manage","cms","SxcCms","_manage","initInstance","on","warning","_translateInit","context","app","currentLanguage","is","thing","query","SxcQuery","resolveServiceUrl","virtualPath","toLowerCase","status","config","infoText","srvResp","responseText","Message","msgDet","MessageDetail","ExceptionMessage","isEditMode","_isEditMode","recreate","resetCache","_controllers","rootApiV2","urlManager","stats","addOn","merged","origAsContextId","ensureCompleteOrThrow","toCacheKey","pageId","blockId","urlDebugState","uncache","fHeaders","endpointName","appApiRoot","baseUrl","startsWith","$2sxcGet","ContextIdentifier","HTMLElement","closest","contextAttribute","ctxTlbAttribute","idTuple","domElement","containerTag","iid","autoFind","sysinfo","version","description","SxcGlobalDebug","Stats","beta","TotalPopup","insights"],"mappings":"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","file":"2sxc.api.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/** @internal */\r\nexport class TotalPopup {\r\n    frame: any = undefined;\r\n    callback: any = undefined;\r\n\r\n    open(url: string, callback: () => void): void {\r\n        // count parents to see how high the z-index needs to be\r\n        let z = 10000010; // Needs at least 10000000 to be on top of the DNN9 bar\r\n        let p = window as Window;\r\n        while (p !== window.top && z < 10000100) {\r\n            z++;\r\n            p = p.parent;\r\n        }\r\n\r\n        const wrapper = document.createElement('div');\r\n        wrapper.setAttribute('style', ' top: 0;left: 0;width: 100%;height: 100%; position:fixed; z-index:' + z);\r\n        document.body.appendChild(wrapper);\r\n\r\n        const ifrm = document.createElement('iframe');\r\n        ifrm.setAttribute('allowtransparency', 'true');\r\n        ifrm.setAttribute('style', 'top: 0;left: 0;width: 100%;height: 100%;');\r\n        ifrm.setAttribute('src', url);\r\n        wrapper.appendChild(ifrm);\r\n        document.body.className += ' sxc-popup-open';\r\n        this.frame = ifrm;\r\n        this.callback = callback;\r\n    }\r\n\r\n    close(): void {\r\n        if (this.frame) {\r\n            document.body.className = document.body.className.replace('sxc-popup-open', '');\r\n            const frm = this.frame;\r\n            frm.parentNode.parentNode.removeChild(frm.parentNode);\r\n            this.callback();\r\n        }\r\n    }\r\n\r\n    closeThis(): void {\r\n        (window.parent as any).$2sxc.totalPopup.close();\r\n    }\r\n\r\n}\r\n","\r\n// Test code\r\n// window.beta.toUrl({ hello: 7, name: \"daniel\", sub: { subname: \"mettler\", subage: 27, subsub: { and: \"like\"} }, final: 42, null: null}, \"test\")\r\n\r\nimport { TypeValue } from '../../../core';\r\n\r\n// $2sxc.urlParams.toObj($2sxc.urlParams.toUrl({ v1: 1, v2: 2, v3: { v31: 0, v32: { v321: \"daniel\" } }, v4: 4}));\r\n\r\nconst equals = '=';\r\nconst dot = '.';\r\nconst separator = '~';\r\nconst sepEsc = '~~';\r\nconst stringPrefix = separator;\r\nconst space = ' ';\r\nconst spaceMarker = '_';\r\nconst spaceMarkerEsc = '~_';\r\nconst restoreSep = '#'; // can never exist unencoded in the fragment\r\nconst innerStringPrefix = '¶';\r\nconst bools = ['true', 'false'];\r\nconst specialValues = bools.concat(['null']);\r\n\r\n/**\r\n * Custom converter to pass objects into a URL and back.\r\n * @internal\r\n */\r\nexport class ToolUrlObjects {\r\n\r\n\r\n  toUrl(obj: any, encode: boolean = true): string {\r\n    if (!obj) return '';\r\n    if (Array.isArray(obj)) throw new Error(\"only objects can be toUrl(), arrays don't work. Put the array in an object property.\");\r\n    var result = this\r\n      .toUrlRecursive(obj, null, 0, encode)\r\n      .filter(x => x != null && x.length > 0);      \r\n    const urlParam = result.join(separator);\r\n    return urlParam ? separator + urlParam : '';\r\n  }\r\n\r\n  toObj(value: string, decode: boolean = true, debug: boolean = false): unknown {\r\n    const parts = this.back(value, decode);\r\n    if (debug) return parts;\r\n    return unflatStringsToObj(parts);\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Converts an object to a compact notation with dots.\r\n   * Recursive, as it needs to also handle sub-objects\r\n   * @param obj \r\n   * @param key \r\n   * @param depth\r\n   * @returns \r\n   */\r\n  private toUrlRecursive(obj: any, key: string, depth: number, encode: boolean): string[] {\r\n    if (obj == null) return [];\r\n    const prefix = depth > 0 ? dot.repeat(depth) : '';\r\n    if (typeof obj !== 'object') \r\n      return [`${prefix}${key}=${encode ? customEncode(obj) : obj}`];\r\n\r\n    const subItem: string[][] = Object.keys(obj)\r\n      .map(key => this.toUrlRecursive(obj[key], key, depth + 1, encode));\r\n    if (subItem.length === 0) return [];\r\n\r\n    var all = subItem.reduce(function (acc, val) {\r\n      return acc.concat(Array.isArray(val) ? arrayFlat(val, 2) : val);\r\n    }, []);\r\n\r\n    // Add header entry so the object structure is complete\r\n    const header = depth > 0 ? [`${prefix}${key}`, null] : [];\r\n    return header.concat(all);\r\n  }\r\n\r\n  public back(val: string, decode: boolean): Record<string, any> {\r\n    if (!val || val.length === 0) return [];\r\n    \r\n    const parts = val\r\n      .replaceAll(equals + stringPrefix, equals + innerStringPrefix) // prot. string prefix\r\n      .replaceAll(sepEsc, restoreSep)                  // Protect escaped separators\r\n      .split(separator + dot)\r\n      .map(v => v?.replaceAll(restoreSep, separator))  // Restore escaped separators\r\n      .filter(x => x.length > 0);\r\n\r\n    let result: Record<string, TypeValue> = {};\r\n    let stack: string[] = [];\r\n\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const pair = parts[i].split(equals);\r\n      const key = pair[0];\r\n\r\n      // count leading dots\r\n      const dotCount = key.match(/^\\.*/g)[0].length;\r\n\r\n      // Reset stack?\r\n      if (dotCount === 0) {\r\n        stack = key.split(dot); // could have multiple components\r\n      } else {\r\n        if (dotCount > stack.length)\r\n          throw new Error(`Invalid key: ${key} when current stack is ${stack.join(dot)}`);\r\n        const subKey = key.substring(dotCount);\r\n        stack = stack.slice(0, dotCount);\r\n        stack.push(subKey);\r\n        pair[0] = stack.join(dot);\r\n      }\r\n      result[pair[0]] = pair.length > 1 \r\n        ? (decode ? restoreValue(decodeURIComponent(pair[1])) : pair[1])\r\n        : null;\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\n\r\n// Recursively reduce sub-arrays to the specified depth\r\nfunction arrayFlat(arr: any[], depth: number): any[] {\r\n\r\n  // If depth is 0, return the array as-is\r\n  if (depth < 1) return arr.slice();\r\n\r\n  // Otherwise, concatenate into the parent array\r\n  return arr.reduce(function (acc, val) {\r\n    return acc.concat(Array.isArray(val) ? arrayFlat(val, depth - 1) : val);\r\n  }, []);\r\n};\r\n\r\n// https://stackoverflow.com/questions/42694980/how-to-unflatten-a-javascript-object-in-a-daisy-chain-dot-notation-into-an-objec\r\nfunction unflatStringsToObj(data: Record<string, any>): any {\r\n  var result: any = {};\r\n  for (var rec in data) {\r\n    var keys = rec.split(dot);\r\n    keys.reduce(function(list, key, j) {\r\n      return list[key] || (list[key] = isNaN(Number(keys[j + 1])) ? (keys.length - 1 == j ? data[rec] : {}) : [])\r\n    }, result)\r\n  }\r\n  return result\r\n}\r\n\r\n\r\n\r\n// https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number\r\nfunction isNumeric(str: string) {\r\n  if (typeof str != \"string\") return false // we only process strings!  \r\n  return !isNaN(str as any) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n         !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n}\r\n\r\n\r\n/**\r\n * Mark strings which contain values that look like a bool/number\r\n */\r\nfunction customEncode(value: any) {\r\n  var mark = false;\r\n  // Not a string (a bool/number) - leave as is\r\n  if (typeof value === 'string') { // return value;\r\n\r\n    // Escape strings which look like booleans or numbers\r\n    if (specialValues.includes(value) || isNumeric(value as any))\r\n      mark = true;\r\n      // return `${innerStringPrefix}${value}`;\r\n  \r\n    // Mark any characters which look like the encoding chars\r\n    value = value\r\n      .replaceAll(separator, sepEsc)\r\n      .replaceAll(spaceMarker, spaceMarkerEsc)\r\n      .replaceAll(' ', spaceMarker);\r\n  }\r\n  const enc = encodeURIComponent(value);\r\n  // marc after encoding\r\n  return (mark ? stringPrefix : '') + enc;\r\n}\r\n\r\n/**\r\n * Restore a value to the real type. \r\n * Explicitly marked strings will not be re-typed\r\n */\r\nfunction restoreValue(value: string) {\r\n  // if explicitly marked string, unwrap and return string\r\n  if (value?.length > 0 && value[0] === innerStringPrefix)\r\n    return restoreString(value.slice(1));\r\n  if (bools.includes(value))\r\n    return value === 'true';\r\n  if (isNumeric(value)) return parseFloat(value);\r\n  return restoreString(value);\r\n}\r\n\r\nfunction restoreString(value: string) {\r\n  const spaceMarkerTemp = String.fromCharCode(1);\r\n  return value\r\n    .replaceAll(spaceMarkerEsc, spaceMarkerTemp)\r\n    .replaceAll(spaceMarker, space)\r\n    .replaceAll(spaceMarkerTemp, spaceMarker);\r\n}\r\n","import { ToolUrlObjects } from './obj2url';\r\n/**\r\n * Helper object to read url params. \r\n * Available on `$2sxc.urlParams`\r\n * @public\r\n */\r\nexport class UrlParams {\r\n    /**\r\n     * Get a param from the url, no matter if it's behind ? or #\r\n     * If not found, will return an empty string `''`\r\n     * @param name\r\n     */\r\n    get(name: string) {\r\n        // warning: this method is duplicated in 2 places - keep them in sync.\r\n        // locations are eav and 2sxc4ng\r\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n        const searchRx = new RegExp('[\\\\?&]' + name + '=([^&#]*)', 'i');\r\n        let results = searchRx.exec(location.search);\r\n        let strResult: string;\r\n\r\n        if (results === null) {\r\n            const hashRx = new RegExp('[#&]' + name + '=([^&#]*)', 'i');\r\n            results = hashRx.exec(location.hash);\r\n        }\r\n\r\n        // if nothing found, try normal URL because DNN places parameters in /key/value notation\r\n        if (results === null) {\r\n            // Otherwise try parts of the URL\r\n            const matches = location.pathname.match(new RegExp('/' + name + '/([^/]+)', 'i'));\r\n\r\n            // Check if we found anything, if we do find it, we must reverse the\r\n            // results so we get the \"last\" one in case there are multiple hits\r\n            if (matches && matches.length > 1)\r\n                strResult = matches.reverse()[0];\r\n        } else\r\n            strResult = results[1];\r\n\r\n        return strResult == null\r\n            ? ''\r\n            : decodeURIComponent(strResult.replace(/\\+/g, ' '));\r\n    }\r\n\r\n    /**\r\n     * Get a required param from the url, no matter if it's behind ? or #\r\n     * Will throw an error if not found\r\n     * @param name\r\n     */\r\n    require(name: string) {\r\n        const found = this.get(name);\r\n        if (found === '') {\r\n            const message = `Required parameter (${name}) missing from url - cannot continue`;\r\n            alert(message);\r\n            throw message;\r\n        }\r\n        return found;\r\n    }\r\n\r\n    /**\r\n     * Checks if debug is enabled in the URL\r\n     * @returns \r\n     */\r\n    isDebug(): boolean {\r\n        return this.get('debug')?.toLocaleLowerCase() === 'true'\r\n    }\r\n\r\n    /**\r\n     * Convert an object to be used in a URL.\r\n     * Uses a custom, brief syntax which can change at any time. \r\n     * So to unwrap, always use the toObj method.\r\n     * @param obj \r\n     * @returns \r\n     * @internal\r\n     */\r\n    toUrl(obj: any): string {\r\n      return new ToolUrlObjects().toUrl(obj, true);\r\n    }\r\n\r\n    /**\r\n     * Convert a url which was created by toUrl back to an object.\r\n     * @param url \r\n     * @returns\r\n     * @internal\r\n     */\r\n    toObj(url: string): unknown {\r\n      return new ToolUrlObjects().toObj(url, true);\r\n    }\r\n}\r\n","/**\r\n * Metadata Target Types\r\n * \r\n * These are constants to determine what something is assigned to (e.g. it describes an Entity, a file, etc.)\r\n * \r\n * Use it for the @see MetadataFor objects\r\n * @public\r\n */\r\nexport enum MetadataTargetTypes {\r\n  /** \r\n   * Undefined Type (0) - included for completeness.\r\n   * Not usually used, actually None (1) is the default\r\n   */\r\n  Undefined = 0,\r\n\r\n  /** \r\n   * Things that are not used as Metadata (1). This is the default for most Entities.\r\n   */\r\n  None = 1,\r\n\r\n  /** \r\n   * Metadata of attributes / fields (2). This is used to store configuration like the field label, amount-of-rows, etc.\r\n   * Remarks = \r\n   * The key is always a number (int) pointing to the Attribute ID in the DB.\r\n   */\r\n  Attribute = 2,\r\n\r\n  /** \r\n   * App metadata (3). Used to give Apps additional properties. \r\n   * Remarks = \r\n   * The key should always be an int ID of the App.\r\n   */\r\n  App = 3,\r\n\r\n  /** \r\n   * Metadata of entities / data-items (4). \r\n   * This lets us enhance entities with additional information. \r\n   * Remarks = \r\n   * The Key should always be a GUID\r\n   */\r\n  Entity = 4,\r\n\r\n  /** \r\n   * Metadata of a content-type / data-schema (5). Used to give it a description etc. \r\n  */\r\n  ContentType = 5,\r\n\r\n  /** \r\n   * Zone metadata (6) - used to give a Zone additional information. \r\n   * Only used in very special cases, best not use.\r\n   */\r\n  Zone = 6,\r\n\r\n  /** \r\n   * Item / Object of the Platform, like a File or Folder etc. (10)\r\n   * Remarks = \r\n   * * The key is usually a string to further specify what it's describing, like \"file:72\"\r\n   * * The text equivalent is CmsObject\r\n   */\r\n  CmsItem = 10,\r\n\r\n  /** \r\n   * The entire system / platform - so Metadata for the current Dnn/Oqtane installation (11).\r\n   * Remarks = \r\n   * This is not in use as of now, just added for completeness sakes.\r\n   * New in v13\r\n   */\r\n  System = 11,\r\n\r\n  /** \r\n   * A Site - like the current site (12)\r\n   * Remarks = New in v13</remarks>\r\n   */\r\n  Site = 12,\r\n\r\n  /** \r\n   * A Site - like the current site (13)\r\n   * Remarks = New in v13 / beta</remarks>\r\n   */\r\n  // [PrivateApi]\r\n  SiteVariant = 13,\r\n\r\n  /** \r\n   * A Page - like the current page (14)\r\n   * Remarks = New in v13</remarks>\r\n   */\r\n  Page = 14,\r\n\r\n  /** \r\n   * A Page - like the current page (15) \r\n   * Remarks = New in v13 / beta</remarks>\r\n   */\r\n  // [PrivateApi]\r\n  PageVariant = 15,\r\n\r\n  /** \r\n   * A Module - like a module containing some content (16) \r\n   * Remarks = New in v13</remarks>\r\n   */\r\n  Module = 16,\r\n\r\n  /** \r\n   * A Module - like a module containing some content (17)\r\n   * Remarks = New in v13 / beta</remarks>\r\n   */\r\n  // [PrivateApi]\r\n  ModuleVariant = 17,\r\n\r\n  /** \r\n   * A User - like the admin-user (18)\r\n   * Remarks = New in v13</remarks>\r\n   */\r\n  User = 18,\r\n\r\n  /** Custom target (90). This is what you should use for basic apps which have a custom target that's none of the other defaults. */\r\n  Custom = 90,\r\n\r\n  /** Custom target (91). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom1 = 91,\r\n  /** Custom target (92). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom2 = 92,\r\n  /** Custom target (93). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom3 = 93,\r\n  /** Custom target (94). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom4 = 94,\r\n  /** Custom target (95). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom5 = 95,\r\n  /** Custom target (96). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom6 = 96,\r\n  /** Custom target (97). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom7 = 97,\r\n  /** Custom target (98). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom8 = 98,\r\n  /** Custom target (99). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom9 = 99,\r\n}\r\n","/** @internal */\r\nexport class Stats {\r\n    watchDomChanges = 0;\r\n}\r\n","\r\n/**\r\n * This is a placeholder in the settings, which must be replaced with \"2sxc\" or another term for other dnn extensions\r\n * @internal\r\n */\r\nexport const ApiExtensionPlaceholder = 'e.x.t';\r\n\r\n/**\r\n * The special header meta tag containing settings for 2sxc\r\n * @internal\r\n */\r\nexport const MetaHeaderJsApi = '_jsApi';\r\n\r\n/**\r\n * The fallback path to the UI\r\n * @internal\r\n */\r\nexport const DnnUiRoot = '/desktopmodules/tosic_sexycontent/';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const PlatformOqtane = 'oqtane';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const PlatformDnn = 'dnn';\r\n\r\n/**\r\n * The fallback AntiForgery token header name (as in Dnn)\r\n * @internal\r\n */\r\nexport const AntiForgeryTokenHeaderNameDnn = 'RequestVerificationToken';\r\n","/** @internal */\r\nexport enum LogEntryOptions {\r\n    log = 'log',\r\n    warn = 'warn',\r\n    error = 'error',\r\n    throw = 'throw',\r\n}\r\n","/**\r\n * Special version which is filled in during compile by the definePlugin\r\n * The real version comes from the main package.json file in this repo\r\n * The sub-projects also use this version\r\n */\r\ndeclare const ROOTVERSION: string;\r\n\r\n/** @internal */\r\nexport const ToSxcName = \"2sxc\";\r\n\r\n/** @internal */\r\nexport const SxcVersion = ROOTVERSION;\r\n\r\n/** @internal */\r\nexport const SxcApiUrlRoot = 'desktopmodules/2sxc/api/';\r\n\r\n/** @internal */\r\nexport const HeaderNames = {\r\n    // 2sxc specific header\r\n    ContentBlockId: \"ContentBlockId\",\r\n\r\n    // headers as defined by DNN\r\n    ModuleId: \"ModuleId\",\r\n    TabId: \"TabId\",\r\n\r\n    // Header which should replace \"TabId\" in the long run\r\n    PageId: \"PageId\",\r\n};\r\n\r\n/** @internal */\r\nexport const ApiUrlRoots = ['app', 'app-sys', 'app-api', 'app-query', 'app-content', 'eav', 'view', 'dnn'];\r\n/** @internal */\r\nexport const AppApiMarker = 'app';\r\n\r\n// TODO: this should later lead to remapping of old url calls, but it's not in use yet\r\n// note that these were always 'auto' so `app-content` would need to be come `app/auto/content`\r\n/** @internal */\r\nexport const AppApiMap = {\r\n    'app-api': 'app/[name]/api',\r\n    'app-query': 'app/[name]/query',\r\n    'app-content': 'app/[name]/content'\r\n};\r\n\r\n// These are Not-Defined-IDs.\r\n// Because\r\n\r\n/**\r\n * This is a marker for an ID which is not defined\r\n * This is for situations where a 0 or even a negative number\r\n * could be real numbers, so this number is so big, it should never be a real ID\r\n * @internal\r\n */\r\nexport const NumberNotDefinedHuge = 274200000000;\r\n","import { Log } from '.';\r\n\r\n/**\r\n * Any object that has an own log object\r\n * @export\r\n * @interface HasLog\r\n * @public\r\n */\r\nexport abstract class HasLog {\r\n  /**\r\n   * The logger for this object\r\n   * @internal usually not relevant and could make docs confusing\r\n   */\r\n  log: Log;\r\n\r\n  /**\r\n   * initialize the logger\r\n   * ideally it has a parent-logger to attach to\r\n   * @param logName name to show in the logger\r\n   * @param parentLog parent-logger to attach to\r\n   * @param initialMessage optional start-message to log\r\n   * @internal\r\n   */\r\n  constructor(\r\n    logName: string,\r\n    /** @internal */\r\n    private parentLog?: Log,\r\n    initialMessage?: string,\r\n  ) {\r\n    this.initLogInternal(logName, parentLog, initialMessage);\r\n  }\r\n\r\n  /** @internal */\r\n  public initLog = (name: string, parentLog?: Log, initialMessage?: string)\r\n    : void => this.initLogInternal(name, parentLog, initialMessage)\r\n\r\n  /** @internal */\r\n  private initLogInternal(name: string, parentLog?: Log, initialMessage?: string): void {\r\n    if (this.log == null)\r\n        // standard & most common case: just create log\r\n        this.log = new Log(name, parentLog, initialMessage);\r\n    else {\r\n    // late-init case, where the log was already created - just reconfig keeping what was in it\r\n      this.log.rename(name);\r\n      this.log.linkLog(parentLog);\r\n      if (initialMessage != null)\r\n        this.log.add(initialMessage);\r\n    }\r\n  }\r\n\r\n}\r\n","import { LogEntry, LogCall } from '.';\r\n\r\nconst keepData = location.search.indexOf(\"debug=true\") !== -1;\r\n\r\nconst maxScopeLen = 3;\r\nconst maxNameLen = 6;\r\nconst liveDump = false;\r\nconst maxEntriesReached = 'Maximum amount of entries added to log, will stop adding more';\r\n\r\n/**\r\n * A log object which will collect log entries for another ojbect\r\n * @export\r\n * @interface Log\r\n * @public\r\n */\r\nexport class Log {\r\n\r\n    /**\r\n     * List of all entries added to this log\r\n     */\r\n    entries = new Array<LogEntry>();\r\n    /** @internal */\r\n    private depth = 0;\r\n    /** @internal */\r\n    private callDepths: string[] = [];\r\n    /** @internal */\r\n    startTime: number;\r\n\r\n    /**\r\n     * Maximum amount of entries to add - to prevent memory hoging\r\n     */\r\n    maxEntries = 1000;\r\n\r\n    /**\r\n     * Create a logger and optionally attach it to a parent logger\r\n     * @param string name this logger should use\r\n     * @param Log optional parrent logger to attach to\r\n     * @param string optional initial message to log\r\n     * @internal\r\n     */\r\n    constructor(name: string, parent?: Log, initialMessage?: string) {\r\n        this.rename(name);\r\n        this.linkLog(parent);\r\n        this.startTime = new Date().getTime();\r\n        if (initialMessage != null) this.add(initialMessage);\r\n    }\r\n\r\n    /* if we should live-dump, can be selectively activated */\r\n    /** @internal */\r\n    liveDump: boolean = liveDump;\r\n    /** @internal */\r\n    _parentHasLiveDump: boolean = false;\r\n    /** @internal */\r\n    keepData: boolean = keepData;\r\n    /** @internal */\r\n    _parentHasKeepData: boolean = false;\r\n\r\n    /**\r\n     * Full identifier of this log-object, with full hierarchy\r\n     * @internal\r\n     */\r\n    fullIdentifier = (): string =>\r\n        `${(this.parent ? this.parent.fullIdentifier() : '')}${this.identifier()}`\r\n\r\n    /**\r\n     * give this logger a new name\r\n     * usually happens in constructor, but in rare cases\r\n     * it's called manually\r\n     * @param name\r\n     * @internal\r\n     */\r\n    rename(name: string): void {\r\n        try {\r\n            const dot = name.indexOf('.');\r\n            this.scope = dot > 0 ? name.substr(0, Math.min(dot, maxScopeLen)) + '.' : '';\r\n            const rest = dot > 0 ? name.substr(dot + 1) : name;\r\n            this.name = rest.substr(0, Math.min(rest.length, maxNameLen));\r\n            this.name = this.name.substr(0, Math.min(this.name.length, maxNameLen));\r\n        } catch (e) {\r\n            /* ignore */\r\n        }\r\n    }\r\n\r\n    /**\r\n     * link this log to a parent\r\n     * usually happens in constructor, but in rare cases\r\n     * this must be called manually\r\n     * @internal\r\n     */\r\n    linkLog = (parent: Log): void => {\r\n        this.parent = parent || this.parent; // if new parent isn't defined, don't replace\r\n        if (this.parent) {\r\n            this._parentHasLiveDump = this.parent.liveDump || this.parent._parentHasLiveDump;\r\n            this._parentHasKeepData = this.parent.keepData || this.parent._parentHasKeepData;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a simple message to the log\r\n     * @param message\r\n     *\r\n     * preferred usage is with string parameter:\r\n     * log.add(`description ${ parameter }`);\r\n     *\r\n     * in case that we experience error with normal string parameter, we can use arrow function to enclose parameter like this () => parameter\r\n     * but use it very rarely, because there is certainly a performance implication!\r\n     * log.add(`description ${() => parameter}`);\r\n     */\r\n    add(message: (() => string) | string, data?: unknown): string {\r\n        // check if the log is already too big\r\n        if(this.entries.length > this.maxEntries) \r\n            return this._prepareMessage(message);\r\n\r\n        // if we just reached the max, add special message\r\n        if(this.entries.length === this.maxEntries) \r\n            this._addEntry(this._prepareEntry(maxEntriesReached));\r\n\r\n        const entry = this._prepareEntry(message, data);\r\n        this._addEntry(entry);\r\n        return entry.message;\r\n    }\r\n\r\n    /** @internal */\r\n    addData(message: (() => string) | string, data: unknown): void {\r\n        if (this.logData()) this.add(message, data);\r\n    }\r\n\r\n    /** @internal */\r\n    logData(): boolean {\r\n        return this.keepData || this._parentHasKeepData;\r\n    }\r\n\r\n    /** @internal */\r\n    _prepareEntry(message: (() => string) | string, data?: unknown): LogEntry {\r\n        const msg = this._prepareMessage(message);\r\n        const time = new Date().getTime() - this.startTime;\r\n        const entry = new LogEntry(this, msg, this.depth, time, data);\r\n        return entry;\r\n    }\r\n\r\n    /** @internal */\r\n    private _prepareMessage(message: (() => string) | string): string {\r\n        if (message instanceof Function) {\r\n            try {\r\n                return ((message as () => string)());\r\n            } catch (e) {\r\n                return 'err: message undefined';\r\n            }\r\n        }\r\n        return message.toString();\r\n    }\r\n\r\n    /** @internal */\r\n    call(name: string, callParams?: string, message?: string, data?: {[key:string]: unknown }): LogCall {\r\n        return new LogCall(this, name, callParams, message, data);\r\n    }\r\n\r\n    /** @internal */\r\n    _callDepthAdd(name: string): void {\r\n        this.depth++;\r\n        this.callDepths.push(name);\r\n    }\r\n\r\n    /** @internal */\r\n    _callDepthRemove(name: string): void {\r\n        this.depth--;\r\n        const last = this.callDepths.pop();\r\n        if (last !== name) {\r\n            console.warn(`log: call depth reduced by '${name}' but last was '${last}'`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * helper to create a text-output of the log info\r\n     * @param separator\r\n     * @param start\r\n     * @param end\r\n     * @internal\r\n     */\r\n    dump(one: LogEntry = null, separator = ' - '): void {\r\n        if (one) this.dumpOne(0, one, separator);\r\n        else this.dumpList();\r\n    }\r\n\r\n    /** @internal */\r\n    dumpList(start: number = 0, length?: number) {\r\n        let index = start;\r\n        this.entries\r\n            .slice(start, length ? start + length : undefined           )\r\n            .forEach((e) => this.dumpOne(index++, e));\r\n    }\r\n\r\n    /** @internal */\r\n    private dumpOne(index: number, e: LogEntry, separator = ' - '): void {\r\n        const result = (e.result) ? ' =' + e.result : '';\r\n        const line = ('0000' + index).slice(-4) + ' ' + e.source() + separator + '..'.repeat(e.depth) + e.message + result;\r\n        if (e.data) console.log(line, e.data);\r\n        else console.log(line);\r\n    }\r\n\r\n\r\n    /**\r\n     * add an entry-object to this logger\r\n     * this is often called by sub-loggers to add to parent\r\n     * @param entry\r\n     * @internal\r\n     */\r\n    _addEntry(entry: LogEntry): void {\r\n        if (this.liveDump) this.dump(entry);\r\n        this.entries.push(entry);\r\n        if (this.parent) this.parent._addEntry(entry);\r\n    }\r\n\r\n    /**\r\n     * helper to generate a random 2-char ID\r\n     * @param stringLength\r\n     * @internal\r\n     */\r\n    private randomString(stringLength: number): string {\r\n        const chars = '0123456789abcdefghiklmnopqrstuvwxyz';\r\n        let randomstring = '';\r\n        for (let i = 0; i < stringLength; i++) {\r\n            const rnum = Math.floor(Math.random() * chars.length);\r\n            randomstring += chars.substring(rnum, rnum + 1);\r\n        }\r\n        return randomstring;\r\n    }\r\n\r\n    /**\r\n     * parent logger - important if loggers are chained\r\n     * @internal\r\n     */\r\n    private parent: Log;\r\n\r\n    /**\r\n     * scope of this logger - to easily see which ones\r\n     * are about the same topic\r\n     * @internal\r\n     */\r\n    private scope = 'tdo';\r\n\r\n    /**\r\n     * The name of this log, for scenarios where multiple loggers are mixed\r\n     */\r\n    public name = 'unknwn';\r\n\r\n\r\n    /**\r\n     * Unique 2-character ID of this specific log object\r\n     * @internal\r\n     */\r\n    private id = (): string => this.idCache || (this.idCache = this.randomString(2));\r\n    /** @internal */\r\n    private idCache: string;\r\n\r\n    /**\r\n     * Unique identifier of this log object, with name and ID\r\n     * @internal\r\n     */\r\n    private identifier = (): string => `${this.scope}${this.name}(${this.id()})`;\r\n\r\n}\r\n","import { LogEntry, Log, LogEntryOptions as LEO } from '.';\r\n\r\n/** @internal */\r\nexport class LogCall {\r\n    /** The initial entry created - important for later attaching the final result of the call */\r\n    public initialEntry: LogEntry;\r\n\r\n    constructor(public log: Log, public name: string, callParams?: string, message?: string, data?: {[key:string]: unknown }) {\r\n        this.initialEntry = this.log._prepareEntry(name + '(' + (callParams || '') + ')');\r\n        this.log._callDepthAdd(name);\r\n        this.log._addEntry(this.initialEntry);\r\n        if (typeof message === 'string') this.add(message);\r\n        if (data) for (let key in data) this.data('initial:' + key, data[key]);\r\n    }\r\n\r\n    private lastMessage: string;\r\n\r\n    add(message: string, data?: unknown, behavior?: LEO) {\r\n        this.lastMessage = message;\r\n        this.log.add(message, data);\r\n        if (behavior) this.processExtraBehavior(behavior, message, data);\r\n    }\r\n\r\n    onlyAddIfNew(message: string, behavior?: LEO) {\r\n        if (this.lastMessage !== message)\r\n        this.add(message);\r\n        if (behavior) this.processExtraBehavior(behavior, message, undefined);\r\n    }\r\n\r\n    /** Add data - but only if data logging is enabled */\r\n    data(message: string, data: unknown) {\r\n        this.log.addData(message, data);\r\n    }\r\n\r\n    done(message?: string, behavior?: LEO): void {\r\n        this.return(null, message || '👍', behavior);\r\n    }\r\n\r\n    return<T>(result: T, message?: string, behavior?: LEO) {\r\n        message = message || '👍';\r\n        this.initialEntry.result = message;\r\n        this.log._callDepthRemove(this.name);\r\n\r\n        // if we're in keep-data / debug mode, keep that\r\n        this.initialEntry.data = result;\r\n\r\n        // if we're in live-dump mode, then the entry was already dumped, show again\r\n        if (this.log.liveDump || this.log._parentHasLiveDump)\r\n            this.add(this.name + ' = ' + message, result);\r\n\r\n        if (behavior) this.processExtraBehavior<T>(behavior, message, result);\r\n        return result;\r\n    }\r\n\r\n    /* \r\n     * treat all extra output or errors\r\n     * to allow setting a debug stop point when needed\r\n     * then you can trace the stack-call to see where the error originated\r\n     */\r\n    private processExtraBehavior<T>(behavior: LEO, message: string, data: T) {\r\n        if (behavior === LEO.log) console.log(message, data);\r\n        if (behavior === LEO.warn) console.warn(message, data);\r\n        if (behavior === LEO.error || behavior === LEO.throw) console.error(message, data);\r\n        if (behavior === LEO.throw) throw message;\r\n    }\r\n}\r\n","\r\n/**\r\n * Object manipulator helpers\r\n * @internal\r\n */\r\nexport class Obj {\r\n    /**\r\n     * This is the same as Object.assign, but type-safe.\r\n     * Use it as a replacetment for Object.Assign(this, ... ) in constructors\r\n     */\r\n    static TypeSafeAssign <T, K extends keyof T>(...args: T[]) {\r\n        args.reduce( (result, current) =>\r\n            (Object.keys(current) as K[]).reduce((target, key) => {\r\n                target[key] = current[key];\r\n                return target;\r\n            }, result)\r\n        , args[0]);\r\n    }\r\n\r\n    static DeepClone<T>(original: T, ignoreCircular = false): T {\r\n        if(original === undefined || original === null)\r\n            return original;\r\n        const str = ignoreCircular ? JSON.stringify(original, getCircularReplacer) : JSON.stringify(original);\r\n        if(str === undefined || str === null)\r\n            return original;\r\n        return JSON.parse(str) as T;\r\n    }\r\n}\r\n\r\n\r\nconst getCircularReplacer = () => {\r\n    const seen = new WeakSet();\r\n    return (_:any, value: any) => {\r\n      if (typeof value === \"object\" && value !== null) {\r\n        if (seen.has(value)) {\r\n          return;\r\n        }\r\n        seen.add(value);\r\n      }\r\n      return value;\r\n    };\r\n  };\r\n","/** @internal */\r\nexport class NoJQ {\r\n\r\n    /** https://api.jquery.com/ready/ */\r\n    static ready(callback: () => void): void {\r\n        if (document.readyState === 'complete') {\r\n            callback();\r\n        } else {\r\n            document.addEventListener('DOMContentLoaded', () => callback(), { once: true });\r\n        }\r\n    }\r\n\r\n    /** https://api.jquery.com/jquery.param/ */\r\n    static param(obj: any): string {\r\n        const param = Object.entries(obj)\r\n            .map(([k, v]) => `${encodeURIComponent(k)}=${v == null ? '' : typeof v === 'string' ? encodeURIComponent(v) : encodeURIComponent(JSON.stringify(v))}`)\r\n            .join('&');\r\n        return param;\r\n    }\r\n\r\n    /** Build DOM elements from string */\r\n    static domFromString(string: string): HTMLElement[] {\r\n        // build elements from string into dummy parent\r\n        const dummyParent = document.createElement('div');\r\n        dummyParent.insertAdjacentHTML('afterbegin', string);\r\n\r\n        // scripts created from string are not executable and have to recreated manually to be executable\r\n        Array.from(dummyParent.querySelectorAll('script')).forEach((brokenScript) => {\r\n            const workingScript = document.createElement('script');\r\n            // copy attributes\r\n            Array.from(brokenScript.attributes).forEach((attribute) => {\r\n                workingScript.setAttribute(attribute.nodeName, attribute.nodeValue);\r\n            });\r\n            // copy inline part\r\n            workingScript.textContent = brokenScript.textContent;\r\n            // replace a non executable script with executable one\r\n            NoJQ.replaceWith(brokenScript, workingScript, false);\r\n        });\r\n\r\n        // remove created elements from dummy parent so it can be garbage collected\r\n        const elements = Array.from(dummyParent.children) as HTMLElement[];\r\n        elements.forEach((element) => {\r\n            dummyParent.removeChild(element);\r\n        });\r\n        return elements;\r\n    }\r\n\r\n    /** https://api.jquery.com/offset/ */\r\n    static offset(element: HTMLElement): { left: number; top: number; } {\r\n        const clientRect = element.getBoundingClientRect();\r\n        const offset: { left: number; top: number; } = {\r\n            top: clientRect.top + window.scrollY,\r\n            left: clientRect.left + window.scrollX,\r\n        };\r\n        return offset;\r\n    }\r\n\r\n    /** https://api.jquery.com/width/ */\r\n    static width(element: HTMLElement): number {\r\n        // jquery width === offsetWidth - borders - padding\r\n        const computedStyle = getComputedStyle(element);\r\n        const width = element.offsetWidth === 0\r\n            ? 0\r\n            : element.offsetWidth\r\n            - (parseInt(computedStyle.getPropertyValue('border-left-width'), 10) + parseInt(computedStyle.getPropertyValue('border-right-width'), 10))\r\n            - (parseInt(computedStyle.getPropertyValue('padding-left'), 10) + parseInt(computedStyle.getPropertyValue('padding-right'), 10));\r\n        return width;\r\n    }\r\n\r\n    /** https://api.jquery.com/height/ */\r\n    static height(element: HTMLElement): number {\r\n        // jquery height === offsetHeight - borders - padding\r\n        const computedStyle = getComputedStyle(element);\r\n        const height = element.offsetHeight === 0\r\n            ? 0\r\n            : element.offsetHeight\r\n            - (parseInt(computedStyle.getPropertyValue('border-top-width'), 10) + parseInt(computedStyle.getPropertyValue('border-bottom-width'), 10))\r\n            - (parseInt(computedStyle.getPropertyValue('padding-top'), 10) + parseInt(computedStyle.getPropertyValue('padding-bottom'), 10));\r\n        return height;\r\n    }\r\n\r\n    /** https://api.jquery.com/outerWidth/ */\r\n    static outerWidth(element: HTMLElement): number {\r\n        const outerWidth = element.offsetWidth;\r\n        return outerWidth;\r\n    }\r\n\r\n    /** https://api.jquery.com/empty/ */\r\n    static empty(element: HTMLElement): void {\r\n        Array.from(element.childNodes).forEach((n) => {\r\n            element.removeChild(n);\r\n        });\r\n    }\r\n\r\n    /** https://api.jquery.com/replacewith/ */\r\n    static replaceWith(toBeReplaced: HTMLElement, newElement: HTMLElement, runScripts: boolean): void {\r\n        const parent = toBeReplaced.parentElement;\r\n\r\n        // disable scripts before replacing dom\r\n        const scripts = Array.from(newElement.querySelectorAll('script'));\r\n        const restores: ScriptTypeRestore[] = [];\r\n        scripts.forEach((script) => {\r\n            restores.push({ script, type: script.type });\r\n            script.type = null;\r\n        });\r\n\r\n        // replace dom\r\n        parent.replaceChild(newElement, toBeReplaced);\r\n\r\n        // enable scripts\r\n        restores.forEach((restore) => {\r\n            restore.script.type = restore.type;\r\n        });\r\n\r\n        if (runScripts) {\r\n            // run scripts manually to ensure proper timing\r\n            AssetsLoader.runScripts(scripts, undefined);\r\n        }\r\n    }\r\n\r\n    /** https://api.jquery.com/append/ */\r\n    static append(parent: HTMLElement, newElements: HTMLElement[], runScripts: boolean): void {\r\n        const scripts: HTMLScriptElement[] = [];\r\n\r\n        newElements.forEach((element) => {\r\n            if (element.tagName.toLocaleLowerCase() === 'script') {\r\n                const script = element as HTMLScriptElement;\r\n                // disable script before inserting to the dom\r\n                const restoreType = script.type;\r\n                script.type = null;\r\n                // insert to dom\r\n                parent.appendChild(script);\r\n                // enable script\r\n                script.type = restoreType;\r\n                scripts.push(script);\r\n            } else {\r\n                parent.appendChild(element);\r\n            }\r\n        });\r\n\r\n        if (runScripts && scripts.length > 0) {\r\n            // run scripts manually to ensure proper timing\r\n            AssetsLoader.runScripts(scripts, undefined);\r\n        }\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class AssetsLoader {\r\n\r\n    /** Asynchronously runs external and inline scripts in series */\r\n    static runScripts(scripts: HTMLScriptElement[], callback: () => void): void {\r\n        const script = scripts[0];\r\n        const others = scripts.slice(1);\r\n        if (script == null) {\r\n            callback?.();\r\n            return;\r\n        }\r\n\r\n        // create copy\r\n        const copy = document.createElement('script');\r\n        // attributes\r\n        Array.from(script.attributes).forEach((attribute) => {\r\n            copy.setAttribute(attribute.nodeName, attribute.nodeValue);\r\n        });\r\n        // inline part\r\n        copy.textContent = script.textContent;\r\n\r\n        // if src then insert in head, wait for onload or onerror, remove from head and move to next one\r\n        if (copy.type && copy.src) {\r\n            const listener = () => {\r\n                copy.onload = null;\r\n                copy.onerror = null;\r\n                document.head.removeChild(copy);\r\n                this.runScripts(others, callback);\r\n            };\r\n            copy.onload = listener;\r\n            copy.onerror = listener;\r\n            document.head.appendChild(copy);\r\n            return;\r\n        }\r\n\r\n        // if no src then inline, insert to head and remove instantly and move to next one\r\n        setTimeout(() => {\r\n            document.head.appendChild(copy);\r\n            document.head.removeChild(copy);\r\n            this.runScripts(others, callback);\r\n        });\r\n    }\r\n}\r\n\r\ninterface ScriptTypeRestore {\r\n    script: HTMLScriptElement;\r\n    type: string;\r\n}\r\n","import { Obj } from '../plumbing';\r\nimport { Log } from '.';\r\n\r\n/**\r\n * A log entry item\r\n * @export\r\n * @interface LogEntry\r\n * @public\r\n */\r\nexport class LogEntry {\r\n\r\n    /**\r\n     * The result of an operation - treated differently in the output\r\n     * @internal\r\n     */\r\n    public result: string;\r\n\r\n\r\n    /**\r\n     * Data which is logged - if data-logging is enabled\r\n     * @internal\r\n     */\r\n    get data(): unknown {\r\n        return this._data;\r\n    }\r\n    /** @internal */\r\n    set data(data: unknown) {\r\n        if (data === undefined) return;\r\n        if (this.log.logData())\r\n            this._data = Obj.DeepClone(data, true);\r\n    }\r\n    /** @internal */\r\n    private _data?: unknown;\r\n\r\n    /** @internal */\r\n    public source = (): string => this.log.fullIdentifier();\r\n\r\n    /** @internal */\r\n    constructor(\r\n        /** @internal */\r\n        private log: Log,\r\n        public message: string,\r\n        /** @internal */\r\n        public depth: number,\r\n        /** A timestamp for this entry to better see sequences of things happening */\r\n        public time: number,\r\n        data?: unknown,\r\n        ) {\r\n            if (data) {\r\n                // #2492 - jQuery isn't used any more in 2sxc\r\n                // if (data instanceof jQuery) {\r\n                //     const jq = data as JQuery;\r\n                //     this.data = {\r\n                //         isJQuery: true,\r\n                //         original: jq,\r\n                //         html: jq.length && jq[0].outerHTML,\r\n                //     };\r\n                // } \r\n                // else\r\n                    this.data = data;\r\n            }\r\n    }\r\n\r\n}\r\n","import { HasLog, Log } from '.';\r\n\r\ndeclare const window: Window;\r\n\r\n/** @public */\r\ntype LogList = Array<{ key: string, log: Log}>;\r\n\r\nconst msgIntro = 'This is the $2sxc JS Insights - see https://r.2sxc.org/insights \\n'\r\n    + 'Add ?debug=true to the url to log more data. \\n'\r\n    + 'Copy/paste code lines below to see details. \\n'\r\n    + '----------------------------------------------------------------------\\n';\r\n\r\n/** @internal */\r\nclass InsightsSingleton extends HasLog {\r\n\r\n    constructor() {\r\n        super('Sys.Insght');\r\n        this.add('system', 'insights', this.log);\r\n        this.log.add(`this log is usually empty, as it's just a helper tool`)\r\n    }\r\n\r\n    history: { [key: string]: InsightsLogSet } = {};\r\n\r\n    add(setName: string, logName: string, log: Log ) {\r\n        if (!(setName in this.history))\r\n            this.history[setName] = new InsightsLogSet(setName);\r\n        this.history[setName].logs.push({key: logName, log: log});\r\n    }\r\n\r\n    show(partName: string, index?: number, start?: number, length?: number): void {\r\n        // if nothing specified, list what to do to see inner parts\r\n        if (!partName) {\r\n            const keys = Object.keys(this.history);\r\n            console.log(`${msgIntro}${keys.length} insights-sections found: \\n` + keys.map((p) => `$2sxc.insights('${p}');`).join('\\n'));\r\n            return;\r\n        }\r\n\r\n        // partName found, check if it exists\r\n        const part = this.history[partName];\r\n        if (!part) {\r\n            console.error(`part '${partName}' not found`);\r\n            return;\r\n        }\r\n\r\n        // We have a partName, but no index - show list and how to get details\r\n        if (index === undefined) {\r\n            let count = 0;\r\n            const logNames = part.logs\r\n                .map((s) => `$2sxc.insights('${partName}', ${count++}); - will show for '${s.key}'`)\r\n                .join('\\n');\r\n            console.log(`'${partName}' contains ${part.logs.length} entries. Copy/paste the code to to see the logs: \\n` + logNames);\r\n            return;\r\n        }\r\n\r\n        // verify the entry exists\r\n        const logSet = part.logs.length >= index && part.logs[index];\r\n        if (!logSet) {\r\n            console.error(`index ${index} not found in part '${partName}'`);\r\n            return;\r\n        }\r\n\r\n        if (!logSet.log) {\r\n            console.error(`found index ${index} on part '${partName}' but it has no logs`);\r\n            return;\r\n        }\r\n\r\n        console.log(`Will dump the log for ${partName}[${index}] '${logSet.key}'`);\r\n        let autoLimit = false;\r\n        if (start === undefined) {\r\n            autoLimit = true;\r\n            start = 0;\r\n            length = 25;\r\n        }\r\n        logSet.log.dumpList(start || 0, length);\r\n        if (autoLimit && logSet.log.entries.length > length)\r\n            console.warn(`Only showing ${length} of ${logSet.log.entries.length} logs. To show all, add start param '..., 0)' or start/length '..., 0, 100)'`)\r\n}\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nclass InsightsLogSet {\r\n    logs: LogList = [];\r\n    constructor(public name: string) {}\r\n}\r\n\r\n// ensure it's only created once\r\n// this is important, because the inpage code also uses this class\r\n// and would otherwise create the object separately\r\nconst singleton: InsightsSingleton = \r\n    window.$2sxc && window.$2sxc._insights   // try to load existing\r\n    || new InsightsSingleton();             // otherwise create new\r\n\r\n/** @internal */\r\nexport const Insights = singleton;\r\n","import { SxcGlobalEnvironment } from '.';\r\nimport { HasLog, NoJQ } from '../../../core';\r\nimport { EnvironmentSpecs } from '..';\r\nimport { AntiForgeryTokenHeaderNameDnn, DnnUiRoot, PlatformDnn } from '../constants';\r\n\r\nconst helpAutoDetect = 'You must either include jQuery on the page or inject the jsApi parameters to prevent auto-detection.';\r\ndeclare const window: Window;\r\n\r\n/**\r\n * This helps load environment information from DNN ServicesFramework - it's a fallback in case the other mechanisms fail\r\n * @internal\r\n */\r\nexport class EnvironmentDnnSfLoader extends HasLog {\r\n    constructor(public env: SxcGlobalEnvironment) {\r\n        super('Env.DnnLdr', env.log);\r\n    }\r\n\r\n\r\n    /**\r\n     * This will assume the new parameter injection failed and it will attempt to fallback\r\n     * it's for backward compatibility, in case something is using $2sxc and doesn't provide the new\r\n     * implementation\r\n     */\r\n    dnnSfFallback(): void {\r\n        const cl = this.log.call('dnnSfFallback');\r\n        // await page-ready to then initialize the stuff\r\n        NoJQ.ready(() => this.dnnSfLoadWhenDocumentReady());\r\n        cl.done('started dom-ready watcher')\r\n    }\r\n\r\n    private dnnSfLoadWhenDocumentReady(): void {\r\n        const cl = this.log.call('dnnSfLoadWhenDocumentReady');\r\n        if (typeof window.$ === 'undefined') {\r\n            cl.done('error');\r\n            throw `Can't load pageid, moduleid, etc. and $ is not available. \\n ${helpAutoDetect}`;\r\n        }\r\n\r\n        const sf = window.$.ServicesFramework;\r\n        if (typeof sf === 'undefined') {\r\n            cl.done('error');\r\n            throw `Can't load pageid, moduleid etc. and DNN SF is not available. \\n ${helpAutoDetect}`;\r\n        }\r\n        const dnnSf = sf(0);\r\n        var apiRoot = dnnSf.getServiceRoot('2sxc');\r\n        var sfJsInfo: EnvironmentSpecs = {\r\n            page: dnnSf.getTabId(),\r\n            root: 'unknown',\r\n            api: apiRoot,\r\n            appApi: apiRoot,\r\n            rvtHeader: AntiForgeryTokenHeaderNameDnn,\r\n            rvt: dnnSf.getAntiForgeryValue(),\r\n            uiRoot: DnnUiRoot,\r\n            platform: PlatformDnn,\r\n        };\r\n        this.env.load(sfJsInfo, 'dnn SF');\r\n        cl.done();\r\n    }\r\n}\r\n","import { EnvironmentSpecs } from '..';\r\nimport { Log } from '../../../core';\r\nimport { EnvironmentMetaLoader } from './env-loader-meta';\r\n\r\nconst InputValue = 'value';\r\n\r\nconst SelectorInputRvt = `input[name=__RequestVerificationToken]`;\r\n\r\n/**\r\n * Special loader for dynamic pages like Oqtane, where content can change at runtime\r\n * @internal\r\n */\r\nexport class EnvironmentLoaderDynamic {\r\n\r\n  public log: Log;\r\n\r\n  constructor(\r\n      private mainLoader: EnvironmentMetaLoader\r\n  ) {\r\n    this.log = new Log('ldr.dynmic', mainLoader.log);\r\n  }\r\n\r\n  /**\r\n   * Watch for changes in our special meta header, to update the variables.\r\n   * Important for Oqtane, which changes the page on the fly without reloading.\r\n   */\r\n  public startMetaTagObserver(attribute: string): void {\r\n    if (!!this.observer) return;\r\n    this.observer = new MutationObserver((mutationsList: MutationRecord[]) => {\r\n      for(const mut of mutationsList)\r\n        if (mut.type === 'attributes' && mut.attributeName === attribute)\r\n          this.mainLoader.updateEnv(JSON.parse(this.mainLoader.getMetaContent()) as EnvironmentSpecs)\r\n    });\r\n    this.log.add('start observing meta tag');\r\n    this.observer.observe(this.mainLoader.getJsApiMetaTag(), { attributes: true, childList: false, subtree: false });\r\n  }\r\n  private observer: MutationObserver;\r\n\r\n  /**\r\n   * Load RequestVerificationToken from the hidden form-field in Oqtane\r\n   */\r\n  public startInputRvtObserver(): void {\r\n    if (!!this.inputRvtObserver) return;\r\n    this.inputRvtObserver = new MutationObserver((mutationsList: MutationRecord[]) => {\r\n      for(const mut of mutationsList)\r\n        if (mut.type === 'attributes' && mut.attributeName === InputValue)\r\n          this.loadRvtFromHiddenInput(mut.target as HTMLInputElement);\r\n    });\r\n    this.log.add('start observing Rvt Input');\r\n    const hiddenField = document.querySelector(SelectorInputRvt);\r\n    if (hiddenField == null) {\r\n      console.error(`Can't find Oqtane RVT field with selector ${SelectorInputRvt}\\n` +`So we cannot watch it for changes.\\n` +`This will probably cause the $2sxc to fail.`);\r\n      return;\r\n    }\r\n    this.loadRvtFromHiddenInput(hiddenField as HTMLInputElement);\r\n    this.inputRvtObserver.observe(hiddenField, { attributes: true, childList: false, subtree: false });\r\n  }\r\n  private inputRvtObserver: MutationObserver;\r\n\r\n  private loadRvtFromHiddenInput(input: HTMLInputElement){\r\n    this.log.add('Input Rvt updated');\r\n    if(input && input.value)\r\n      this.mainLoader.env.updateRvt(input.value);\r\n  }\r\n}\r\n","import { EnvironmentSpecs } from '..';\r\nimport { SxcGlobalEnvironment } from '.';\r\nimport { EnvironmentDnnSfLoader } from './env-loader-dnn-sf';\r\nimport { MetaHeaderJsApi, PlatformOqtane } from '../constants';\r\nimport { HasLog, Log } from '../../../core';\r\nimport { EnvironmentLoaderDynamic } from './env-loader-dynamic';\r\n\r\n// temp: usually 10, but because Oqtane has some delays, we'll temporarily increase to 100 till we're safe\r\nconst maxRetries = 100;\r\nconst retryMs = 10;\r\n\r\nconst MetaSourceId = 'meta header';\r\n\r\nconst MetaProperty = 'content';\r\n\r\n\r\nfunction logTest(): boolean\r\n{\r\n    console.log('test');\r\n    return true;\r\n}\r\n/**\r\n * This loads environment information from the meta-header tag.\r\n * Because of timing issues, it will try multiple times\r\n * @internal\r\n */\r\nexport class EnvironmentMetaLoader extends HasLog {\r\n    public retries = 0;\r\n\r\n    public log: Log;\r\n\r\n    private dynamicPageHelper: EnvironmentLoaderDynamic;\r\n\r\n    constructor(public env: SxcGlobalEnvironment) {\r\n        super('Env.MetaLd', logTest ? env.log : env.log);\r\n        this.dynamicPageHelper = new EnvironmentLoaderDynamic(this);\r\n    }\r\n\r\n    public loadMetaFromHeader(forceFallback = false): void {\r\n        const cl = this.log.call('loadMetaFromHeader', `${forceFallback}`);\r\n        // avoid duplicate execution\r\n        if(this.env.ready) return cl.done('loadMeta - ready');\r\n\r\n        this.log.add('loadMetaFromHeader: start, retry:' + this.retries + ', force fallback: ' + forceFallback);\r\n        const meta = this.getMetaContent();\r\n        if(!meta) {\r\n            this.retries++;\r\n            if(forceFallback || this.retries >= maxRetries) {\r\n                new EnvironmentDnnSfLoader(this.env).dnnSfFallback();\r\n                return cl.done()\r\n            }\r\n            setTimeout(() => { this.loadMetaFromHeader(); }, retryMs);\r\n            return cl.done('will retry');\r\n        }\r\n        // Load the settings\r\n        this.updateEnv(JSON.parse(meta) as EnvironmentSpecs);\r\n\r\n        // monitor setting changes - important for Oqtane\r\n        this.dynamicPageHelper.startMetaTagObserver(MetaProperty);\r\n        cl.done();\r\n    }\r\n\r\n    public updateEnv(newJsInfo: EnvironmentSpecs) {\r\n        this.log.add('meta env info updated');\r\n        this.env.load(newJsInfo, MetaSourceId);\r\n        if(newJsInfo.platform === PlatformOqtane)\r\n            this.dynamicPageHelper.startInputRvtObserver();\r\n    }\r\n\r\n    public getMetaContent(): string {\r\n        const ourMeta = this.getJsApiMetaTag();\r\n        if (!ourMeta) return null;\r\n        return ourMeta.getAttribute(MetaProperty)\r\n    }\r\n\r\n    public getJsApiMetaTag() {\r\n        return document.querySelector(`meta[name=${MetaHeaderJsApi}]`);\r\n    }\r\n\r\n\r\n    /**\r\n     * Watch for changes in our special meta header, to update the variables.\r\n     * Important for Oqtane, which changes the page on the fly without reloading.\r\n     */\r\n    public startMetaTagObserver(): void {\r\n      if (!!this.observer) return;\r\n      this.observer = new MutationObserver((mutationsList: MutationRecord[]) => {\r\n        for(const mut of mutationsList)\r\n          if (mut.type === 'attributes' && mut.attributeName === MetaProperty)\r\n            this.updateEnv(JSON.parse(this.getMetaContent()) as EnvironmentSpecs)\r\n      });\r\n      this.log.add('start observing meta tag');\r\n      this.observer.observe(this.getJsApiMetaTag(), { attributes: true, childList: false, subtree: false });\r\n    }\r\n    private observer: MutationObserver;\r\n\r\n}\r\n","import { EnvironmentSpecs } from '..';\r\nimport { EnvironmentMetaLoader } from './env-loader-meta';\r\nimport { HasLog, Insights, SxcApiUrlRoot } from '../../../core';\r\nimport { AntiForgeryTokenHeaderNameDnn, DnnUiRoot, PlatformDnn } from '../constants';\r\n\r\ndeclare const _jsApi: EnvironmentSpecs;\r\n\r\n/**\r\n * Provides environment information to $2sxc - usually page-id, api-root and stuff like that\r\n * @public\r\n */\r\nexport class SxcGlobalEnvironment extends HasLog {\r\n    /** @internal */\r\n    private header: EnvironmentSpecs;\r\n    /** \r\n     * Flag to determine if the environment information is available. \r\n     */\r\n    public ready = false;\r\n    /** \r\n     * Where the environment information came from.\r\n     */\r\n    public source = '';\r\n\r\n    /** @internal */\r\n    public metaLoader: EnvironmentMetaLoader;\r\n\r\n    /** @internal */\r\n    constructor() {\r\n        super('Environment', null, 'starting');\r\n        this.log.keepData = true;   // always keep here for clarity\r\n        Insights.add('system', 'environment', this.log);\r\n        this.metaLoader = new EnvironmentMetaLoader(this);\r\n\r\n        // check if a global variable was already set which we should use\r\n        if(typeof _jsApi !== typeof undefined) {\r\n            this.log.add('found _jsApi, will use');\r\n            this.load(_jsApi, 'global variable _jsApi');\r\n        } else {\r\n            this.log.add('will start initializing');\r\n            this.metaLoader.loadMetaFromHeader();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Manually load a new EnvironmentSpecs in cases where the page cannot provide them. \r\n     * This is only used in scenarios outside of Dnn / Oqtane, you will usually not need this. \r\n     * @param envSpecs new info to load\r\n     * @param source _optional_ name where the data came from\r\n     */\r\n    public load(envSpecs: EnvironmentSpecs, source?: string) {\r\n        const cl = this.log.call('load');\r\n        if(envSpecs.root && !envSpecs.api) {\r\n            cl.add('root provided, api missing, will auto-complete');\r\n            const addSlash = (envSpecs.root.endsWith('/') ? '' : '/');\r\n            envSpecs.api = `${envSpecs.root}${addSlash}${SxcApiUrlRoot}`;\r\n        }\r\n        this.header = envSpecs;\r\n\r\n        // in some cases the UpdateRvt may already have been called before\r\n        // in which case it's probably more relevant\r\n        // so we should set it again\r\n        if(this.replacedRvt) this.header.rvt = this.replacedRvt;\r\n\r\n        this.ready = true;\r\n        this.source = source || 'external/unknown' + (this.replacedRvt ? '+rvt': '');\r\n        cl.return(envSpecs, 'loaded from ' + this.source);\r\n    }\r\n\r\n    /** @internal */\r\n    private replacedRvt: string;\r\n\r\n    /** @internal */\r\n    public updateRvt(newRvt: string) {\r\n        if(!newRvt) return;\r\n        this.replacedRvt = newRvt;\r\n        this.header.rvt = newRvt;\r\n    }\r\n\r\n    /**\r\n     * The API endpoint url from the environment\r\n     */\r\n    public api(): string {\r\n        this.ensureReadyOrThrow('api');\r\n        return this.header.api;\r\n    }\r\n\r\n    // WIP - may return undefined\r\n    /** @internal */\r\n    public appApi(): string {\r\n        // WIP - must get it to work without 'appApi' but only 'api' to ensure ...\r\n        this.ensureReadyOrThrow('appApi');\r\n        return this.header.appApi;\r\n    }\r\n\r\n    /**\r\n     * The current page ID - often needed in API calls\r\n     */\r\n    public page(): number {\r\n        this.ensureReadyOrThrow('page');\r\n        return this.header.page;\r\n    }\r\n\r\n    /**\r\n     * The request verification token header name for internal WebAPI calls\r\n     */\r\n    public rvtHeader(): string {\r\n        this.ensureReadyOrThrow('rvtHeader');\r\n        return this.header.rvtHeader || AntiForgeryTokenHeaderNameDnn;\r\n    }\r\n\r\n    /**\r\n     * The request-verification token for internal WebAPI calls\r\n     */\r\n    public rvt(): string {\r\n        this.ensureReadyOrThrow('rvt');\r\n        return this.header.rvt;\r\n    }\r\n\r\n    /**\r\n     * The uiRoot path\r\n     * @internal\r\n     */\r\n    public uiRoot(): string {\r\n        this.ensureReadyOrThrow('uiRoot');\r\n        return this.header.uiRoot || DnnUiRoot;\r\n    }\r\n\r\n    /**\r\n     * The platform code like 'oqt' or 'dnn' in case the JS needs to know the difference\r\n     */\r\n    public platform(): string {\r\n        this.ensureReadyOrThrow('platform');\r\n        return this.header.platform || PlatformDnn;\r\n    }\r\n\r\n    /**\r\n     * The dialogQuery added in 14.08 because of issues with opening the dialog on sub-portals\r\n     * ATM very internal\r\n     * Don't check if it was initialized, because it's valid if it doesn't exist\r\n     * @internal\r\n     */\r\n    public dialogQuery(): string {\r\n      return this.header.dialogQuery ?? null;\r\n    }\r\n  \r\n\r\n    /** @internal */\r\n    private ensureReadyOrThrow(partRequested: string): void {\r\n        if(this.ready) return;\r\n\r\n        // try one last time - usually it should really be ready by now\r\n        this.log.add('ensureReady - force last attempt to load MetaHeader for ' + partRequested)\r\n        this.metaLoader.loadMetaFromHeader(true);\r\n\r\n        // if still not ready, throw exception to console log\r\n        if(this.ready) return;\r\n        throw `Can't find ${partRequested} - something went wrong, pls contact 2sxc.org`;\r\n    }\r\n\r\n}\r\n\r\n","import { Sxc, SxcWebApi } from '..';\r\nimport { NoJQ } from '../../../../core';\r\nimport { ZzzAjaxSettingsDeprecated } from './ajax-settings';\r\n\r\n/** @internal */\r\nexport class AjaxPromise {\r\n  constructor(private api: SxcWebApi, private sxc: Sxc) {\r\n  }\r\n\r\n  /**\r\n   * Make a jQuery style promise request\r\n   * @param settings: settings\r\n   * @returns JQueryPromise<any>\r\n   */\r\n  public makePromise(settings: ZzzAjaxSettingsDeprecated): any {\r\n    var headers = this.api.headers();\r\n    // debugger;\r\n    if (window.$ == null) {\r\n      throw new Error('JQuery is now removed from 2sxc installation. Please use newer api like fetch or include JQuery in your project');\r\n    }\r\n    const promise = window.$.ajax({\r\n      async: true,\r\n      dataType: (settings as any).dataType || 'json', // default is json if not specified\r\n      data: JSON.stringify((settings as any).data),\r\n      contentType: 'application/json',\r\n      type: (settings as any).method,\r\n      url: this.getActionUrl(settings),\r\n      beforeSend(xhr: any) {\r\n        for (var key in headers)\r\n          if (headers.hasOwnProperty(key))\r\n            xhr.setRequestHeader(key, headers[key]);\r\n      },\r\n    }) as any;\r\n\r\n    if (!settings.preventAutoFail)\r\n      promise.fail(this.sxc.showDetailedHttpError);\r\n\r\n    return promise;\r\n  }\r\n\r\n\r\n  /**\r\n   * Generate the correct WebApi url\r\n   * @param settings the settings as they would be in jQuery\r\n   */\r\n  private getActionUrl(settings: ZzzAjaxSettingsDeprecated): string {\r\n    var url = (settings as any).url || 'app/auto/api/' + settings.controller + '/' + settings.action;\r\n    // 2020-03-13 stop adding 2sxc endpoint-name, it's already happening in apiUrl so with this it happens 2x\r\n    // var endpoint = settings.endpoint || ToSxcName;\r\n    var base = this.sxc.root.http.apiUrl(url, settings.endpoint);\r\n\r\n    return base + (!settings.params ? '' : ('?' + NoJQ.param(settings.params)));\r\n  }\r\n}\r\n","import { Sxc } from '../sxc';\r\nimport { AjaxPromise } from './ajax-promise';\r\nimport { SxcGlobalEnvironment } from '../../environment';\r\nimport { ZzzAjaxSettingsDeprecated } from './ajax-settings';\r\nimport { NoJQ } from '../../../../core';\r\nimport { ZzzSxcWebApiDeprecated } from './sxc-web-api-deprecated';\r\n\r\n/**\r\n * helper API to run ajax / REST calls to the server\r\n * it will ensure that the headers etc. are set correctly\r\n * and that urls are rewritten\r\n * @public\r\n */\r\nexport class SxcWebApi implements ZzzSxcWebApiDeprecated {\r\n    /**\r\n     * @internal\r\n     */\r\n    public readonly env: SxcGlobalEnvironment;\r\n\r\n    /**\r\n     * \r\n     * @param sxc \r\n     * @internal\r\n     */\r\n    constructor(private readonly sxc: Sxc) {\r\n        this.env = sxc.root.env;\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** - docs in the separate interface\r\n     * @deprecated use fetchJson instead\r\n     */\r\n    get(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean): any {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'GET');\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** - docs in the separate interface\r\n     * @deprecated use fetchJson instead\r\n     */\r\n    post(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean): any {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'POST');\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** - docs in the separate interface\r\n     * @deprecated use fetchJson instead\r\n     */\r\n    delete(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean): any {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'DELETE');\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** - docs in the separate interface\r\n     * @deprecated use fetchJson instead\r\n     */\r\n     put(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean): any {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'PUT');\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** - docs in the separate interface\r\n     * @deprecated use fetchJson instead\r\n     */\r\n     request(settings: string | ZzzAjaxSettingsDeprecated, params: any, data: any, preventAutoFail: boolean, method: string): any {\r\n\r\n        // url parameter: auto convert a single value (instead of object of values) to an id=... parameter\r\n        // tslint:disable-next-line:curly\r\n        if (typeof params !== 'object' && typeof params !== 'undefined')\r\n            params = { id: params };\r\n\r\n        // if the first parameter is a string, resolve settings\r\n        if (typeof settings === 'string') {\r\n            const controllerAction = settings.split('/');\r\n            const controllerName = controllerAction[0];\r\n            const actionName = controllerAction[1];\r\n\r\n            if (controllerName === '' || actionName === '')\r\n                console.warn('Error: controller or action not defined. Will continue with likely errors.');\r\n\r\n            settings = {\r\n                controller: controllerName,\r\n                action: actionName,\r\n                params,\r\n                data,\r\n                url: controllerAction.length > 2 ? settings : null,\r\n                preventAutoFail,\r\n            } as any;\r\n        }\r\n\r\n        const defaults = {\r\n            method: method === null ? 'POST' : method,\r\n            params: null as any,\r\n            preventAutoFail: false,\r\n        };\r\n        // new 10.25\r\n        var http = new AjaxPromise(this, this.sxc);\r\n\r\n        settings = Object.assign({}, defaults, settings);\r\n\r\n        const promise = http.makePromise(settings as ZzzAjaxSettingsDeprecated);\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Will retrieve data from the backend using a standard fetch. \r\n     * @param url a full url or short-hand like `controller/method?params` `app/auto/api/controller/method?params`. Note that params would also be specified on the url. \r\n     * @param data optional POST data\r\n     * @param method optional method, defaults to `GET` unless it has data, in which case it defaults to `POST`\r\n     * @returns a Promise containing a Response object, just like a normal fetch would. \r\n     * example: webApi.fetchRaw('Rss/Feed');\r\n     * example: webApi.fetchRaw(webApi.url('Rss/Feed', { id: 47 })); // url params\r\n     * example: webApi.fetchRaw('Rss/Feed', { id: 47 }); // post params\r\n     * example: webApi.fetchRaw(webApi.url('Rss/Feed', { id: 47 }), { something: 'this is a test' }); // url & post params\r\n     * maybe: webApi.fetchRaw({url: 'Rss/Feed', params: { id: 47 }})\r\n     * maybe: webApi.fetchRaw({url: ..., params: { ...}, body: { ...}, method: 'GET' })\r\n     */\r\n    fetchRaw(url: string, data?: string | Record<string, any>, method?: string): Promise<Response> {\r\n        const ctxParams = {} as { appId?: number; zoneId?: number; };\r\n        const ctx = this.sxc.ctx;\r\n        const urlLower = url.toLocaleLowerCase();\r\n        // TODO: THE #_ignoreHeaders is only used in edit-ui, and should be changed to somehow say use-in-URL\r\n        if (ctx?._ignoreHeaders && urlLower.includes('app/auto/')) {\r\n            if (ctx?.appId && !urlLower.includes('appid=')) ctxParams.appId = ctx.appId;\r\n            if (ctx?.zoneId && !urlLower.includes('zoneId=')) ctxParams.zoneId = ctx.zoneId;\r\n        }\r\n        url = this.url(url, ctxParams);\r\n        method = method || (data ? 'POST' : 'GET');\r\n        const headers = this.headers(method);\r\n\r\n        if (data) {\r\n            // test if data is a json. If it's not, convert it to json\r\n            try {\r\n                JSON.parse(data as string);\r\n            } catch {\r\n                data = JSON.stringify(data);\r\n            }\r\n        }\r\n\r\n        return fetch(url, {\r\n            headers,\r\n            method,\r\n            ...(data && { body: data as string }),\r\n        });\r\n    }\r\n\r\n    // Note: fetch was documented in v12.10 (December 2021) but will probably never be used externally\r\n    // So we rename it to fetchRaw and later will make fetch just be the json implementation.\r\n    // Renamed and added this warning in 13.04 (2022-03-14), will drop in v14 and probably make it do fetchJson by default\r\n    // Changed functionality in 13.10 (2022-05-04) to make it do fetchJson by default\r\n    // Changed functionality back in 13.11 (2022-05-10) because it seems that Mobius was published using fetch\r\n    // Important: Do not document in the docs, as it shouldn't be used\r\n    /** @internal */\r\n    fetch(url: string, data?: string | Record<string, any>, method?: string): Promise<Response> {\r\n        console.warn(`You are calling 'fetch' on the sxc.webApi. This is deprecated will stop in 2sxc v15, please use fetchRaw(...) or fetchJson(...) instead.`)\r\n        return this.fetchJson(url, data, method);\r\n    }\r\n\r\n    /**\r\n     * Will retrieve data from the backend using a standard fetch and give you an object. \r\n     * @param url a full url or short-hand like `controller/method?params` `app/auto/api/controller/method?params`. Note that params would also be specified on the url. \r\n     * @param data optional POST data\r\n     * @param method optional method, defaults to `GET` unless it has data, in which case it defaults to `POST`\r\n     * @returns a Promise containing any object.\r\n     */\r\n    fetchJson<T = any>(url: string, data?: string | Record<string, any>, method?: string): Promise<T> {\r\n        return this.fetchRaw(url, data, method).then(response => response.json());\r\n    }\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call for this to work reliably.\r\n     * Use this if you need to get a list of headers in another system\r\n     */\r\n    headers(method?: string): Record<string, string> {\r\n        const headers = this.sxc.root.http.headers(this.sxc.id, this.sxc.cbid, this.sxc.ctx);\r\n        if (!method) {\r\n            return headers;\r\n        }\r\n\r\n        switch (method.toLocaleUpperCase()) {\r\n            case 'GET':\r\n                headers['Accept'] = 'application/json';\r\n                break;\r\n            default:\r\n                headers['Accept'] = 'application/json';\r\n                headers['Content-Type'] = 'application/json';\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param url A short, medium or long url. \r\n     * Short like `controller/method`, \r\n     * medium like `app/auto/api/controller/method`\r\n     * long like `https://xyz.\r\n     * In all cases it can also have ?params etc.\r\n     * @param params Optional parameters as string or object, will be added to url-params. \r\n     * @returns In the cases of a short/medium url, \r\n     * it will auto-expand to have the full url as needed for an API call. \r\n     */\r\n    url(url: string, params?: string | Record<string, any>): string {\r\n        if (url == null) return url;\r\n\r\n        const urlAndParams = url.split('#')[0].split('?');\r\n\r\n        // url fixes\r\n        url = urlAndParams[0];\r\n        const urlParts = url.split('/');\r\n        if (urlParts.length === 2 && urlParts[0] && urlParts[1]) {\r\n            const controller = urlParts[0];\r\n            const action = urlParts[1];\r\n            url = `app/auto/api/${controller}/${action}`;\r\n        }\r\n        url = this.sxc.root.http.apiUrl(url);\r\n\r\n        // params fixes\r\n        params = `${urlAndParams[1] || ''}&${params ? typeof params === 'string' ? params : NoJQ.param(params) : ''}`\r\n            .split('&')\r\n            .filter(p => !!p)\r\n            .join('&');\r\n\r\n        // result\r\n        url = [url, params].filter(p => !!p).join('?');\r\n        return url;\r\n    }\r\n}\r\n","import { Sxc } from '..';\r\n\r\n/**\r\n * Base class for anything attached to an sxc-instance.\r\n * This is internal and not important, but we can't keep it out of the docs. \r\n * @public\r\n */\r\nexport abstract class SxcPart {\r\n  /**\r\n  * Creates an instance of SxcData.\r\n  * @param sxc: sxc\r\n  * @param partName: name of the part\r\n  * @internal\r\n  */\r\n  constructor(\r\n    /** @internal */\r\n    public sxc: Sxc, \r\n    /** @internal */\r\n    public partName: string) {      \r\n  }\r\n\r\n}\r\n  ","import { Sxc } from '..';\r\nimport { SxcPart } from '../sxc-part';\r\nimport { SxcWebApi } from '../web-api/sxc-web-api';\r\n\r\n/**\r\n * Base class doing common checks.\r\n * This is internal and not important, but we can't keep it out of the docs. \r\n * @public\r\n */\r\nexport abstract class SxcDataServiceBase extends SxcPart {\r\n  protected readonly webApi: SxcWebApi;\r\n  /**\r\n  * Creates an instance of SxcData.\r\n  * @param sxc: \r\n  * @param name: the content-type name\r\n  * @internal\r\n  */\r\n  constructor(\r\n    sxc: Sxc,\r\n    readonly name: string,\r\n    nameInError: string\r\n  ) {\r\n    super(sxc, 'data');\r\n    this.webApi = sxc.webApi;\r\n    \r\n    // Fail early if something is wrong\r\n    nameInError += ' name ';\r\n    if (name == null) throw nameInError + 'is empty';\r\n    if (name.indexOf(\"/\") != -1 || name.indexOf(\"\\\\\") != -1) throw nameInError + 'has slashes - not allowed';\r\n    if (name.indexOf(\"?\") != -1) throw nameInError + 'has \"?\" - not allowed';\r\n  }\r\n\r\n}\r\n  ","import { Sxc } from '..';\r\nimport { MetadataTargetTypes } from '../../data';\r\nimport { MetadataFor } from '../../data/metadata-for';\r\nimport { SxcDataServiceBase } from './sxc-data-service-base';\r\n\r\nconst ContentApiRoot = 'app/auto/data';\r\n\r\n/**\r\n* Data Service for an App / Sxc-Instance to get/create data of a specific Content-Type\r\n* @public\r\n*/\r\nexport class SxcData<T = unknown> extends SxcDataServiceBase {\r\n  /**\r\n  * Creates an instance of SxcData.\r\n  * @param sxc:\r\n  * @param name: the content-type name\r\n  * @internal\r\n  */\r\n  constructor(sxc: Sxc, readonly name: string) {\r\n    super(sxc, name, 'ContentType');\r\n  }\r\n\r\n  /**\r\n   * Get all items of this type.\r\n   */\r\n  getAll(): Promise<T[]> {\r\n    return this.getInternal<T[]>();\r\n  }\r\n\r\n  /**\r\n   * Get the specific item with the ID. It will return null if not found\r\n   */\r\n  getOne(id: number): Promise<T> | null {\r\n    return this.getInternal<T>(id);\r\n  };\r\n\r\n  /** Future\r\n   *  @internal \r\n   */\r\n  private getMany(criteria: Record<string, unknown>, fields: Array<string>): Promise<T[]> {\r\n    throw 'not implemented - probably v13.5 or something';\r\n  }\r\n\r\n\r\n  /**\r\n   * Get all or one data entity from the backend\r\n   * @param id optional id as number or string - if not provided, will get all\r\n   * @param params optional parameters - ATM not usefuly but we plan to support more filters etc. \r\n   * @returns an array with 1 or n entities in the simple JSON format\r\n   * @internal\r\n   */\r\n  private getInternal<TCall>(id?: string | number, params?: string | Record<string, unknown>): Promise<TCall> {\r\n    let path = `${ContentApiRoot}/${this.name}`;\r\n    if (id && (typeof id === 'string' || typeof id === 'number')) path += \"/\" + id;\r\n    return this.webApi.fetchJson(this.webApi.url(path, params));\r\n  }\r\n\r\n  /**\r\n   * Create a new entity with the values supplied\r\n   * @param values a simple object containing the values to create\r\n   */\r\n  create(values: Record<string, unknown>): Promise<Record<string, unknown>>;\r\n\r\n  /**\r\n   * Create a new entity with the values supplied and also a metadata-for reference\r\n   * @param values a simple object containing the values to create\r\n   */\r\n  create(values: Record<string, unknown>, metadataFor: MetadataFor | string): Promise<Record<string, unknown>>;\r\n\r\n  /** @internal */\r\n  create(values: Record<string, unknown>, metadataFor?: MetadataFor | string): Promise<Record<string, unknown>> {\r\n    const path = `${ContentApiRoot}/${this.name}`;\r\n    if (metadataFor != null) {\r\n      if (typeof(metadataFor) === 'string')\r\n        metadataFor = { Target: MetadataTargetTypes.Entity, Guid: metadataFor } as MetadataFor;\r\n      try {\r\n        values.For = metadataFor;\r\n      } catch { }\r\n    }\r\n    return this.webApi.fetchJson(this.webApi.url(path), values, 'POST');\r\n  }\r\n\r\n  /**\r\n   * Update an existing entity with the values supplied\r\n   */\r\n  update(id: number, values: Record<string, unknown>): Promise<Record<string, unknown>> {\r\n    const path = `${ContentApiRoot}/${this.name}/${id}`;\r\n    return this.webApi.fetchJson(this.webApi.url(path), values, 'POST');\r\n  }\r\n\r\n  /**\r\n   * Delete an entity\r\n   * @param id id of the item to delete\r\n   */\r\n  delete(id: number): Promise<null>;\r\n\r\n  /**\r\n   * Delete an entity\r\n   * @param guid GUID of the item to delete\r\n   */\r\n  delete(guid: string): Promise<null>;\r\n\r\n  /** @internal */\r\n  delete(idOrGuid: number | string): Promise<null> {\r\n    const path = `${ContentApiRoot}/${this.name}/${idOrGuid}`;\r\n    return this.webApi.fetchRaw(this.webApi.url(path), undefined, 'DELETE').then(response => null);\r\n  }\r\n}\r\n\r\n","import { Sxc } from '..';\r\nimport { SxcDataServiceBase } from './sxc-data-service-base';\r\n\r\n/**\r\n * Instance Query Service\r\n * @public\r\n */\r\nexport class SxcQuery extends SxcDataServiceBase {\r\n\r\n  /**\r\n   * Creates an instance of SxcQuery.\r\n   * @internal\r\n   */\r\n  constructor(sxc: Sxc, readonly name: string) {\r\n    super(sxc, name, 'Query');\r\n  }\r\n\r\n  getAll<T = unknown>(): Promise<T>;\r\n  getAll<T = unknown>(urlParams: string | Record<string, unknown>): Promise<T>;\r\n  getAll<T = unknown>(urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>): Promise<T>;\r\n  /**\r\n   * Retrieve the entire query with all streams\r\n   *\r\n   * @template T\r\n   * @returns {Promise<T>} containing a object with stream-names and items in the streams.\r\n   */\r\n  getAll<T = unknown>(urlParams?: string | Record<string, unknown>, data?: string | Record<string, unknown>): Promise<T> {\r\n    return this.getInternal<T>(undefined, urlParams, data);\r\n  }\r\n\r\n  /**\r\n   * Get just one stream, returning an array of items in that stream\r\n   *\r\n   * @template T\r\n   * @param stream\r\n   * @returns {Promise<T[]>} containing an array of items - or empty if stream not found or nothing returned\r\n   */\r\n  getStream<T = unknown>(stream: string): Promise<T[]>;\r\n  getStream<T = unknown>(stream: string, urlParams: string | Record<string, unknown>): Promise<T[]>;\r\n  getStream<T = unknown>(stream: string, urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>): Promise<T[]>;\r\n  \r\n  getStream<T = unknown>(stream: string, urlParams?: string | Record<string, unknown>, data?: string | Record<string, unknown>): Promise<T[]> {\r\n    if (stream.indexOf(',') !== -1) throw \"parameter 'stream' can only contain one stream name for 'getStream'\";\r\n    return this.getInternal<unknown>(stream, urlParams, data).then((data) => {\r\n      if (data == null || !data.hasOwnProperty(stream)) return [];\r\n      return (data as any)[stream] as T[];\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get a query but only the mentioned streams.\r\n   * This will reduce the amount of data retrieved on queries that have many streams. \r\n   * @template T The schema/interfaces of what will be returned\r\n   * @returns {Promise<T>} Promise containing a object with stream-names and items in the streams.\r\n   * @public\r\n   */\r\n  getStreams<T = unknown>(streams: string): Promise<T>;\r\n  /**\r\n   * Get a query but only the mentioned streams.\r\n   * This will reduce the amount of data retrieved on queries that have many streams. \r\n   * @template T The schema/interfaces of what will be returned\r\n   * @param streams name of streams to get, comma separated\r\n   * @param urlParams additional parameters for the URL, either as a string or as a object\r\n   * @returns {Promise<T>} Promise containing a object with stream-names and items in the streams.\r\n   * @public\r\n   */\r\n  getStreams<T = unknown>(streams: string, urlParams: string | Record<string, unknown>): Promise<T>;\r\n  /**\r\n   * Get a query but only the mentioned streams.\r\n   * This will reduce the amount of data retrieved on queries that have many streams. \r\n   * @template T The schema/interfaces of what will be returned\r\n   * @param streams name of streams to get, comma separated\r\n   * @param urlParams additional parameters for the URL, either as a string or as a object\r\n   * @param data data to include in case of a POST call - if this is provided, it will use a post\r\n   * @returns {Promise<T>} Promise containing a object with stream-names and items in the streams.\r\n   * @public\r\n   */\r\n  getStreams<T = unknown>(streams: string, urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>): Promise<T>;\r\n  /**\r\n   * Get a query but only the mentioned streams.\r\n   * This will reduce the amount of data retrieved on queries that have many streams. \r\n   *\r\n   * @template T The schema/interfaces of what will be returned\r\n   * @param streams name of streams to get, comma separated\r\n   * @param urlParams additional parameters for the URL, either as a string or as a object\r\n   * @param data data to include in case of a POST call - if this is provided, it will use a post\r\n   * @returns {Promise<T>} Promise containing a object with stream-names and items in the streams.\r\n   */\r\n  getStreams<T = unknown>(streams: string, urlParams?: string | Record<string, unknown>, data?: string | Record<string, unknown>): Promise<T> {\r\n    return this.getInternal<T>(streams, urlParams, data);\r\n  }\r\n\r\n  /**\r\n   * Get all or one data entity from the backend\r\n   * @param id optional id as number or string - if not provided, will get all\r\n   * @param params optional parameters - ATM not usefuly but we plan to support more filters etc. \r\n   * @returns an array with 1 or n entities in the simple JSON format\r\n   * @internal\r\n   */\r\n  private getInternal<T = unknown>(streams?: string, params?: string | Record<string, any>, data?: string | Record<string, unknown>): Promise<T> {\r\n    let path = \"app/auto/query/\" + this.name;\r\n    if (streams && (typeof streams === 'string')) path += \"?stream=\" + streams;\r\n    return this.webApi.fetchJson(this.webApi.url(path, params), data);\r\n  }\r\n}\r\n","import { SxcPart } from './sxc-part';\r\nimport { RunParams } from '../cms/run-params';\r\nimport { Sxc } from '.';\r\n\r\n/**\r\n * This is in charge of sxc.cms on the instance level.\r\n * ATM it just has the run command.\r\n * In future, it may also have dedicated command like `layout` etc.\r\n * @public\r\n */\r\nexport class SxcCms extends SxcPart {\r\n\r\n  /** @internal */\r\n  constructor(sxc: Sxc) {\r\n    super(sxc, \"cms\");\r\n  }\r\n\r\n  /**\r\n   * Run a command on this sxc-instance. \r\n   * Requires edit mode to be on, which would enable the edit-JS parts.\r\n   * To use, remember to activate `2sxc.JsCms` on the page\r\n   * @param runParams - real type is actually RunParams\r\n   */\r\n  run<T>(runParams: RunParams): Promise<void | T> { \r\n    throw 'cms.run() requires editing to be on, or page-feature \"2sxc.JsCms\" to be enabled to work';\r\n  }\r\n}","import { ContextIdentifier } from '../sxc-global/context-identifier';\r\nimport { SxcWebApi } from './web-api/sxc-web-api';\r\nimport { ApiUrlRoots, HasLog, ToSxcName } from '../../../core';\r\nimport { SxcManage } from './sxc-manage';\r\nimport { SxcData } from './data/sxc-data';\r\nimport { SxcQuery } from './data/sxc-query';\r\nimport { SxcGlobal } from '..';\r\nimport { SxcCms } from './sxc-cms';\r\n\r\n/**\r\n* The typical sxc-instance object for a specific DNN module or content-block\r\n* @public\r\n*/\r\nexport class Sxc extends HasLog {\r\n  /** @internal */\r\n  private _isSxcInstance = true;\r\n\r\n\r\n  /**\r\n   * Web API calls for this instance.\r\n   * This is the pure call APIs system. \r\n   * To get data or queries, best use the data or query services.\r\n   */\r\n  webApi: SxcWebApi;\r\n\r\n  /**\r\n   * manage object which provides access to additional content-management features\r\n   * it only exists if 2sxc is in edit mode (otherwise the JS are not included for these features)\r\n   * @internal\r\n   */\r\n  manage: SxcManage = null; // initialize correctly later on\r\n\r\n  /**\r\n   * CMS operations on this sxc-instance, such as opening the edit dialog etc.\r\n   */\r\n  cms: SxcCms = new SxcCms(this);\r\n  \r\n  /** @internal */\r\n  constructor(\r\n    /** the sxc-instance ID, which is usually the DNN Module Id */\r\n    public id: number,\r\n    /**\r\n     * content-block ID, which is either the module ID, or the content-block definition entity ID\r\n     * this is an advanced concept you usually don't care about, otherwise you should research it\r\n     */\r\n    public cbid: number,\r\n    /** \r\n     * the id/key of this instance in the cache for reset\r\n     * @internal\r\n     */\r\n    public cacheKey: string,\r\n    /** \r\n     * The environment information, important for http-calls \r\n     * @internal\r\n     */\r\n    public readonly root: SxcGlobal,\r\n    /** \r\n     * Custom context information provided by the constructor - will replace auto-context detection\r\n     * @internal\r\n     */\r\n    public ctx?: ContextIdentifier,\r\n  ) {\r\n    super('SxcInstance', null, 'Generating for ' + id + ':' + cbid);\r\n    this.webApi = new SxcWebApi(this);\r\n    \r\n    // add manage property, but not within initializer, because inside the manage-initializer it may reference 2sxc again\r\n    try { // sometimes the manage can't be built, like before installing\r\n      if (root._manage) root._manage.initInstance(this);\r\n    } catch (e) {\r\n      console.error('error in 2sxc - will only log but not throw', e);\r\n    }\r\n\r\n    // ensure that data-APIs used incorrectly shows good warnings\r\n    patchDataWithWarnings(this.data);\r\n    \r\n    // this only works when manage exists (not installing) and translator exists too\r\n    if (root._translateInit && this.manage)\r\n    // ensure that we really have a manage context, otherwise we can't initialize i18n and it doesn't make sense\r\n    if (this.manage.context && this.manage.context.app && this.manage.context.app.currentLanguage)\r\n    root._translateInit(this.manage);    // init translate, not really nice, but ok for now\r\n  }\r\n\r\n  /**\r\n   * TypeGuard for TypeScript to verify this is a SxcInstance\r\n   * @param thing \r\n   * @internal\r\n   */\r\n  public static is(thing: unknown): thing is Sxc {\r\n    return (thing as Sxc)._isSxcInstance;\r\n  }\r\n\r\n  /**\r\n   * Get a data service for a specific content-type.\r\n   *\r\n   * @param contentType: name of the content type which this service will get\r\n   */\r\n  data<T = unknown>(contentType: string) : SxcData<T> {\r\n    return new SxcData<T>(this, contentType);\r\n  }\r\n  \r\n  /**\r\n   * \r\n   * @param query \r\n   */\r\n  query(query: string) : SxcQuery {\r\n    return new SxcQuery(this, query);\r\n  }\r\n    \r\n    \r\n  /**\r\n  * converts a short api-call path like \"/app/Blog/query/xyz\" to the DNN full path\r\n  * which varies from installation to installation like \"/desktopmodules/api/2sxc/app/...\"\r\n  * @deprecated use http.apiUrl instead\r\n  * @param virtualPath\r\n  * @returns mapped path\r\n  * @internal\r\n  */\r\n  resolveServiceUrl(virtualPath: string) {\r\n    const scope = virtualPath.split('/')[0].toLowerCase();\r\n    \r\n    // stop if it's not one of our special paths\r\n    if (ApiUrlRoots.indexOf(scope) === -1)\r\n    return virtualPath;\r\n    \r\n    return this.root.http.apiRoot(ToSxcName) + scope + '/' + virtualPath.substring(virtualPath.indexOf('/') + 1);\r\n  }\r\n    \r\n    \r\n  /**\r\n   * Show a nice error with more infos around 2sxc\r\n   * @param result \r\n   * @returns \r\n   * @internal\r\n   */\r\n  showDetailedHttpError(result: any): any {\r\n    if (window.console)\r\n    console.log(result);\r\n    \r\n    // check if the error was just because a language file couldn't be loaded - then don't show a message\r\n    if (result.status === 404 &&\r\n      result.config &&\r\n      result.config.url &&\r\n      result.config.url.indexOf('/dist/i18n/') > -1) {\r\n        if (window.console)\r\n        console.log('just fyi: failed to load language resource; will have to use default');\r\n        return result;\r\n    }\r\n      \r\n    // if it's an unspecified 0-error, it's probably not an error but a cancelled request,\r\n    // (happens when closing popups containing angularJS)\r\n    if (result.status === 0 || result.status === -1)\r\n    return result;\r\n    \r\n    // let's try to show good messages in most cases\r\n    let infoText = 'Had an error talking to the server (status ' + result.status + ').';\r\n    const srvResp = result.responseText\r\n    ? JSON.parse(result.responseText) // for jquery ajax errors\r\n    : result.data; // for angular $http\r\n    if (srvResp) {\r\n      const msg = srvResp.Message;\r\n      if (msg) infoText += '\\nMessage: ' + msg;\r\n      const msgDet = srvResp.MessageDetail || srvResp.ExceptionMessage;\r\n      if (msgDet) infoText += '\\nDetail: ' + msgDet;\r\n      \r\n      \r\n      if (msgDet && msgDet.indexOf('No action was found') === 0)\r\n      if (msgDet.indexOf('that matches the name') > 0)\r\n      infoText += '\\n\\nTip from 2sxc: you probably got the action-name wrong in your JS.';\r\n      else if (msgDet.indexOf('that matches the request.') > 0)\r\n      infoText += '\\n\\nTip from 2sxc: Seems like the parameters are the wrong amount or type.';\r\n      \r\n      if (msg && msg.indexOf('Controller') === 0 && msg.indexOf('not found') > 0)\r\n      infoText +=\r\n      // tslint:disable-next-line:max-line-length\r\n      \"\\n\\nTip from 2sxc: you probably spelled the controller name wrong or forgot to remove the word 'controller' from the call in JS. To call a controller called 'DemoController' only use 'Demo'.\";\r\n      \r\n    }\r\n    // tslint:disable-next-line:max-line-length\r\n    infoText += '\\n\\nif you are an advanced user you can learn more about what went wrong - discover how on 2sxc.org/help?tag=debug';\r\n    alert(infoText);\r\n    \r\n    return result;\r\n  }\r\n    \r\n  /**\r\n   * Test if the current code is in edit-mode and additional javascripts have been loaded to make it work\r\n   * @returns true if we are in edit-mode\r\n   */\r\n  isEditMode(): boolean {\r\n    return this.manage?._isEditMode() === true;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param resetCache \r\n   * @returns \r\n   * @internal\r\n   */\r\n  recreate(resetCache: boolean): Sxc {\r\n    if (resetCache) delete this.root._controllers[this.cacheKey]; // clear cache\r\n    return this.root(this.id, this.cbid) as any as Sxc; // generate new\r\n  }\r\n}\r\n\r\n// Help cach error on call of old code\r\n// Background: From v3 to v12 data had a unusualy system for retrieving data belonging to the module\r\n// We believe it's almost never used, but the TimelineJs App always used it, and we believe\r\n// 2-3 other examples may have as well. \r\n// Now in v13 sxc.data is used to get any kind of data,\r\n// and we want to make sure that old code will show a warning helping people fix this\r\n// All the old code would have started with sxc.data.on('load', ...) so this is where we give them the error\r\n// We only do this if it hasn't been done already\r\nfunction patchDataWithWarnings(data: any) {\r\n  if (!(data as any).on) {\r\n    (data as any).on = () => { throw warning };\r\n    Object.defineProperty(data, 'sourceUrl', {\r\n        get: function() { throw warning }\r\n    });\r\n  }\r\n}\r\n\r\nconst warning = 'Warning Obsolete Feature on 2sxc JS: the .data has been obsolete for a long time and is repurposed. \\n'\r\n+ 'If you are calling \".data.on(...)\" or \".data.sourceUrl\" you are running very old code. \\n' \r\n+ 'Guidance to fix this: https://r.2sxc.org/brc-13-id.';","import { TotalPopup } from '../tools/total-popup';\r\nimport { UrlParams } from '../tools/url-params';\r\nimport { Stats } from '../Stats';\r\nimport { SxcGlobalDebug, SxcGlobal, SxcGlobalEnvironment } from '..';\r\nimport { Insights, Log, SxcVersion } from '../../../core';\r\nimport { $2sxcGet } from './sxc-global-get';\r\nimport { SxcGlobalHttp } from './sxc-global-http';\r\n\r\n\r\n/**\r\n * Build a SXC Controller for the page. Should only ever be executed once\r\n * @internal\r\n */\r\nexport function buildSxcRoot(): SxcGlobal {\r\n    const rootApiV2 = getRootPartsV2();\r\n\r\n    const urlManager = new UrlParams();\r\n    const debug = new SxcGlobalDebug();\r\n    const stats = new Stats();\r\n\r\n\r\n    const addOn: Partial<SxcGlobal> = {\r\n        get: $2sxcGet,\r\n        _controllers: {} as any,\r\n        beta: {},\r\n        // 2022-06-01 2dm disabled, believe this is for the old .data\r\n        // _data: {},\r\n        // this creates a full-screen iframe-popup and provides a close-command to finish the dialog as needed\r\n        totalPopup: new TotalPopup(),\r\n        urlParams: urlManager,\r\n        // note: I would like to remove this from $2sxc, but it's currently\r\n        // used both in the inpage-edit and in the dialogs\r\n        // debug state which is needed in various places\r\n        debug,\r\n        stats: stats,\r\n        insights: (partName: string, index?: number, start?: number, length?: number) => Insights.show(partName, index, start, length),\r\n        _insights: Insights,\r\n\r\n        // 2022-06-01 2dm removed, don't think this is used anywhere\r\n        // mini-helpers to manage 2sxc parts, a bit like a dependency loader\r\n        // which will optimize to load min/max depending on debug state\r\n        // parts: {\r\n        //     getUrl(url: string, preventUnmin: boolean) {\r\n        //         // let r = url;// (preventUnmin || !debug.load) ? url : url.replace('.min', ''); // use min or not\r\n        //         if (debug.uncache && url.indexOf('sxcver') === -1)\r\n        //             return url + ((url.indexOf('?') === -1) ? '?' : '&') + 'sxcver=' + debug.uncache;\r\n        //         return url;\r\n        //     },\r\n        // },\r\n    };\r\n\r\n    const merged = Object.assign($2sxcGet, addOn, rootApiV2) as SxcGlobal;\r\n    merged.log.add('sxc controller built');\r\n\r\n    console.log(`$2sxc ${SxcVersion} with insights-logging - see https://r.2sxc.org/insights`)\r\n\r\n    return merged;\r\n}\r\n\r\n/** @internal */\r\nfunction getRootPartsV2(): Partial<SxcGlobal> {\r\n    const log = new Log('$2sxc', null, 'building');\r\n    var env = new SxcGlobalEnvironment();\r\n    return {\r\n        sysinfo: {\r\n            version: SxcVersion,\r\n            description: 'The 2sxc Controller - read more about it on docs.2sxc.org',\r\n        },\r\n        env: env,\r\n        http: new SxcGlobalHttp(env),\r\n        log: log,\r\n    };\r\n}\r\n","/**\r\n * ContextIdentifier is used to initialize a Sxc object outside of the default context.\r\n * @public\r\n */\r\nexport class ContextIdentifier {\r\n  /**\r\n   * ZoneId of this Context\r\n   * @requires zoneId\r\n   */\r\n  zoneId: number;\r\n\r\n  /**\r\n   * AppId of this Context\r\n   * @requires appId\r\n   */\r\n  appId: number;\r\n\r\n  /** \r\n   * PageId of this Context (optional)\r\n   * @optional\r\n   */\r\n  pageId?: number;\r\n\r\n  /**\r\n   * ModuleId of this Context (optional)\r\n   * @optional\r\n   */\r\n  moduleId?: number;\r\n\r\n  /**\r\n   * Exclude pageId and moduleId headers in web requests\r\n   * @internal\r\n   */\r\n  _ignoreHeaders?: boolean;\r\n\r\n  /**\r\n   * Marks the context as complete, so it won't merge in anything else \r\n   * WIP #CustomContext ATM for the updated edit-ui\r\n   * @internal\r\n   */\r\n  complete?: boolean;\r\n\r\n  /**\r\n   * WIP #CustomContext not really used yet\r\n   * @internal\r\n   */\r\n  blockId?: number;\r\n\r\n  /**\r\n   * Type Guard to determine if an object is a ContextIdentifier\r\n   * @param original \r\n   * @returns \r\n   * @internal\r\n   */\r\n  static is(original: unknown): original is ContextIdentifier {\r\n    const origAsContextId = original as ContextIdentifier;\r\n    return origAsContextId.zoneId !== undefined && origAsContextId.appId !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Internal\r\n   * @param ctx \r\n   * @internal\r\n   */\r\n  static ensureCompleteOrThrow(ctx: ContextIdentifier): ContextIdentifier {\r\n    // if it's fulfills the minimum requirements\r\n    if (ctx.zoneId && ctx.appId) return ctx; \r\n  \r\n    const msg = `It looks like the id given is a ContextIdentifier, but it's missing either zoneId or appId.`;\r\n    console.error(msg, ctx);\r\n    throw msg;\r\n  }\r\n  \r\n  /**\r\n   * Create a string-id to identify in a cache. \r\n   * @param ctx \r\n   * @returns \r\n   * @internal\r\n   */\r\n  static toCacheKey(ctx: ContextIdentifier): string {\r\n    this.ensureCompleteOrThrow(ctx);\r\n    return `${ctx.zoneId}/${ctx.appId}/${ctx.pageId}/${ctx.moduleId}/${ctx.blockId}`;\r\n  }\r\n}\r\n","import { UrlParams } from '..';\r\n\r\nconst urlManager = new UrlParams();\r\nconst urlDebugState = urlManager.isDebug() === true;\r\n\r\n/** @internal */\r\nexport class SxcGlobalDebug {\r\n    /**\r\n     * The load-debug state (provided by the url with debug=true)\r\n     */\r\n    load: boolean;\r\n\r\n    /**\r\n     * Cache breaker string, contains the version number of 2sxc if one is provided with sxcver=...\r\n     */\r\n    uncache: string;\r\n\r\n    constructor() {\r\n        this.load = urlDebugState;\r\n        this.uncache = urlManager.get('sxcver');\r\n    }\r\n}\r\n","import { ApiExtensionPlaceholder } from '../constants';\r\nimport { AppApiMarker, HasLog, HeaderNames, ToSxcName } from '../../../core';\r\nimport { ContextIdentifier, SxcGlobalEnvironment } from '..';\r\n\r\n/**\r\n * Global HTTP Service for information and helpers on `$2sxc.http`\r\n * @public\r\n */\r\nexport class SxcGlobalHttp extends HasLog {\r\n    /** @internal */\r\n    constructor(private env: SxcGlobalEnvironment) {\r\n        super('Sxc.Http');\r\n    }\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call.\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(): Record<string, string>;\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call - within a module context.\r\n     * @param id _optional_ module ID\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(id: number): Record<string, string>;\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call - within a module and content-block context.\r\n     * @param id _optional_ module ID\r\n     * @param cbid _optional_ content block ID\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(id: number, cbid: number): Record<string, string>;\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call.\r\n     * Uses a module and content-block context (but these could also be null) \r\n     * and a full context identifier for advanced operations.\r\n     * @param id _optional_ module ID\r\n     * @param cbid _optional_ content block ID\r\n     * @param ctx _optional_ context information to include in the header\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(id: number, cbid: number, ctx: ContextIdentifier): Record<string, string>;\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call.\r\n     * Uses a module and content-block context (but these could also be null) \r\n     * and a full context identifier for advanced operations.\r\n     * @param id _optional_ module ID\r\n     * @param cbid _optional_ content block ID\r\n     * @param ctx _optional_ context information to include in the header\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(id?: number, cbid?: number, ctx?: ContextIdentifier): Record<string, string> {\r\n        const cl = this.log.call('headers', `${id}, ${cbid}`);\r\n        const fHeaders: Record<string, string> = {};\r\n        const pageId = (ctx?.pageId ?? this.env.page()).toString();\r\n        id = ctx?.moduleId ?? id;\r\n        cbid = ctx?.blockId ?? cbid;\r\n\r\n        // TODO: THE #_ignoreHeaders is only used in edit-ui, and should be changed to somehow say use-in-URL\r\n        if (!ctx?._ignoreHeaders) {\r\n            if (id) fHeaders[HeaderNames.ModuleId] = id.toString();\r\n            if (cbid) fHeaders[HeaderNames.ContentBlockId] = cbid.toString();\r\n            fHeaders[HeaderNames.TabId] = pageId;\r\n            fHeaders[HeaderNames.PageId] = pageId;\r\n        }\r\n        fHeaders[this.env.rvtHeader()] = this.env.rvt();\r\n        return cl.return(fHeaders, `headers(id:${id}, cbid:${cbid})`);\r\n    }\r\n\r\n    /**\r\n     * Get the API-Root path for a specific extension/endpoint\r\n     * @returns\r\n     * @internal Not relevant for 2sxc, only used if calling platform endpoints\r\n     */\r\n    apiRoot(endpointName: string): string {\r\n        const cl = this.log.call('apiRoot');\r\n        var result = this.env.api().replace(ApiExtensionPlaceholder, endpointName);\r\n        return cl.return(result, `apiRoot('${endpointName}')`);\r\n    }\r\n\r\n    /**\r\n     * Get the API-Root path for Apps\r\n     * new in v12\r\n     * @internal\r\n     */\r\n     appApiRoot(): string {\r\n        const cl = this.log.call('appApiRoot');\r\n        // try to get it, or fall back to the previous / old convention\r\n        var result = this.env.appApi() ?? this.apiRoot(ToSxcName);\r\n        return cl.return(result, `appApiRoot()`);\r\n    }\r\n\r\n    /**\r\n     * Convert short urls like `app/auto/api/Posts/All` to the full URL needed.\r\n     * Will ignore urls which clearly already are the full url.\r\n     * @param url short URL like `app/auto/api/Posts/All`\r\n     * @returns the converted, long url with the full endpoint\r\n     */\r\n    apiUrl(url: string): string;\r\n\r\n    /**\r\n     * Convert short urls like `app/auto/api/Posts/All` to the full URL needed.\r\n     * Will ignore urls which clearly already are the full url.\r\n     * @param url short URL like `app/auto/api/Posts/All`\r\n     * @param endpointName _optional_ endpoint name if accessing a different exotic endpoint\r\n     * @returns the converted, long url with the full endpoint\r\n     */\r\n    apiUrl(url: string, endpointName: string): string;\r\n\r\n    /**\r\n     * Convert short urls like `app/auto/api/Posts/All` to the full URL needed.\r\n     * Will ignore urls which clearly already are the full url.\r\n     * @param url short URL like `app/auto/api/Posts/All`\r\n     * @param endpointName _optional_ endpoint name if accessing a different exotic endpoint\r\n     * @returns the converted, long url with the full endpoint\r\n     */\r\n    apiUrl(url: string, endpointName?: string): string\r\n    {\r\n        const cl = this.log.call('apiUrl');\r\n        this.log.add(`apiUrl(url:'${url}', endpointName:'${endpointName}')`);\r\n\r\n        // null/undefined check\r\n        if(url == null) return url;\r\n\r\n        // if starts with http: or https: then ignore\r\n        if(!url || url.indexOf('http:') == 0 || url.indexOf('https:') == 0 || url.indexOf('//') == 0)\r\n            return cl.return(url);\r\n\r\n        // if no endpoint specified, then also skip absolute and relative urls\r\n        if(!endpointName && (url.indexOf('/') == 0 || url.indexOf('.') == 0))\r\n            return cl.return(url);\r\n\r\n        var baseUrl = url.toLocaleLowerCase().startsWith(AppApiMarker)\r\n            ? this.appApiRoot()\r\n            : this.apiRoot(endpointName || ToSxcName);\r\n\r\n\r\n        // ensure base ends with slash\r\n        if(baseUrl[baseUrl.length-1] != '/') baseUrl += '/';\r\n        // ensure url doesn't start with slash\r\n        if(url[0] == '/') url = url.slice(1);\r\n        return cl.return(baseUrl + url);\r\n    }\r\n}\r\n","import { Sxc, SxcGlobal } from '..';\r\nimport { ContextIdentifier } from './context-identifier';\r\n\r\ndeclare const window: Window;\r\n// TODO: copied from selectors in inpage project. Probably best to move selectors from inpage to core\r\nconst toolbarSelector = `.sc-menu[toolbar],.sc-menu[data-toolbar],[sxc-toolbar]`;\r\nconst sxcDivsSelector = 'div[data-edit-context]';\r\n\r\n/**\r\n * returns a 2sxc-instance of the id or html-tag passed in\r\n * @param id\r\n * @param cbid\r\n * @returns {}\r\n * @internal\r\n */\r\nexport function $2sxcGet(id: number | ContextIdentifier | HTMLElement | Sxc, cbid?: number): Sxc {\r\n    const $2sxc = window.$2sxc as SxcGlobal;\r\n    $2sxc.log.add('FindSxcInstance(' + id + ',' + cbid);\r\n    if (!$2sxc._controllers)\r\n        throw new Error('$2sxc not initialized yet');\r\n\r\n    // Test if it already is such an instance, in which case we just preserve it and return it\r\n    // Used in cases where the $2sxc(something) is just used to ensure it really is this\r\n    if (Sxc.is(id)) return id;\r\n\r\n    // check if it's a context identifier\r\n    let ctx: ContextIdentifier = null;\r\n    if (ContextIdentifier.is(id)) {\r\n        ctx = ContextIdentifier.ensureCompleteOrThrow(id);\r\n        // get moduleId or create fake, based on zone and app because this is used to identify the object in the cache\r\n        id = ctx.moduleId ?? ctx.zoneId * 100000 + ctx.appId;\r\n    } else if (id instanceof HTMLElement && id.matches(toolbarSelector) && !id.closest(sxcDivsSelector)) {\r\n        // for toolbars that are not inside 2sxc modules (e.g. in skin)\r\n        const contextAttr = 'sxc-context';\r\n        const contextAttribute = id.getAttribute(contextAttr);\r\n        var ctxTlbAttribute = JSON.parse(contextAttribute);\r\n        if (ctxTlbAttribute == null) throw new Error(`Toolbar outside of module without ${contextAttr} attribute found.`);\r\n        return $2sxcGet(ctxTlbAttribute);\r\n    } \r\n    // HTMLElement or anything else, try to auto-find...\r\n    if (typeof id === 'object') {\r\n        // if it's a dom-element, use auto-find\r\n        const idTuple = autoFind(id);\r\n        id = idTuple[0];\r\n        cbid = idTuple[1];\r\n    }\r\n\r\n    // if content-block is unknown, use id of module, and create an ID in the cache\r\n    if (!cbid) cbid = id;\r\n    const cacheKey = ctx != null ? ContextIdentifier.toCacheKey(ctx) : id + ':' + cbid;\r\n\r\n    // either get the cached controller from previous calls, or create a new one\r\n    if ($2sxc._controllers[cacheKey]) {\r\n        $2sxc.log.add('Cache found for: ' + cacheKey);\r\n        return $2sxc._controllers[cacheKey];\r\n    }\r\n\r\n    return ($2sxc._controllers[cacheKey]\r\n        = new Sxc(id, cbid, cacheKey, $2sxc, ctx));\r\n}\r\n\r\nfunction autoFind(domElement: HTMLElement): [number, number] {\r\n    const containerTag = domElement.closest('.sc-content-block');\r\n    if (!containerTag) return null;\r\n    const iid = containerTag.getAttribute('data-cb-instance');\r\n    const cbid = containerTag.getAttribute('data-cb-id');\r\n    if (!iid || !cbid) return null;\r\n    return [parseInt(iid, 10), parseInt(cbid, 10)];\r\n}\r\n","// this is the 2sxc-javascript API\r\n// 2sxc will include this automatically when a user has edit-rights\r\n// a template developer will typically use this to use the data-api to read 2sxc-data from the server\r\n// read more about this in the wiki: https://github.com/2sic/2sxc/wiki/JavaScript-%242sxc\r\n\r\nimport { buildSxcRoot } from './sxc-global/sxc-global-bootstrap';\r\n\r\nif (!window.$2sxc) // prevent double execution\r\n  window.$2sxc = buildSxcRoot();\r\n"],"sourceRoot":""}