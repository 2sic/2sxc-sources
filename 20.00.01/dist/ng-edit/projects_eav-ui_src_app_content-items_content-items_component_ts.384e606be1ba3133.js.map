{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts.384e606be1ba3133.js","mappings":"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","names":["logSpecs","getAll","getAllLive","getAllOnce","ContentItemsService","HttpServiceBaseSignal","constructor","this","log","classLog","getAllPromise","contentTypeStaticName","fnIf","fetchPromise","webApiEntityList","params","appId","contentType","httpResource","url","apiUrl","refresh","getColumnsPromise","webApiFieldsAll","staticName","importItem","file","from","toBase64","pipe","switchMap","fileBase64","http","post","webApiEntityRoot","AppId","ContentBase64","map","success","Success","Messages","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_10__","jDH","factory","ɵfac","dropdownInsertValue","i0","ctx_r0","dialogData","message","confirmTranslateKey","ConfirmDeleteDialogComponent","dialog","hostClass","closeDialog","confirm","close","MAT_DIALOG_DATA","i1","_angular_core__WEBPACK_IMPORTED_MODULE_0__","VBU","selectors","hostVars","hostBindings","rf","ctx","ConfirmDeleteDialogComponent_Conditional_4_Template","ConfirmDeleteDialogComponent_Conditional_9_Template","ConfirmDeleteDialogComponent_Conditional_10_Template","title","entityTitle","entityId","confirmColor","MatCardModule","i2","MatButtonModule","i3","SafeHtmlPipe","styles","BADGE_CONTENT_CLASS","_MatBadgeStyleLoader","type","decls","vars","template","encapsulation","changeDetection","MatBadge","_ngZone","inject","NgZone","_elementRef","ElementRef","_ariaDescriber","AriaDescriber","_renderer","Renderer2","_animationsDisabled","_idGenerator","_IdGenerator","color","_color","value","_setColor","overlap","disabled","position","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","size","hidden","_badgeElement","_inlineBadgeDescription","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","styleLoader","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","isAbove","indexOf","isAfter","getBadgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","getId","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","hostAttrs","inputs","booleanAttribute","MatBadgeModule","imports","A11yModule","MatCommonModule","AgGridHelper","cellLink","link","body","classes","ClickStopPropagationDirective","a","onClick","event","stopPropagation","_angular_core__WEBPACK_IMPORTED_MODULE_1__","FsC","$event","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","FieldHintComponent","isError","input","isShort","toggleIsShort","ngContentSelectors","_c0","consts","_r1","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","MatFormFieldModule","NgClass","NgTemplateOutlet","mapUntilChanged","fn","distinctUntilChanged","mapUntilObjChanged","isEqual","doOnDialogClosed","DialogRoutingService","ServiceBase","router","route","super","snapshot","urlSegments","split","getParam","key","paramMap","get","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","subscriptions","childDialogClosed$","subscribe","data","end","doOnDialogClosedWithData","#childDialogClosedWithData","urlSubRoute","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","navRelative","commands","events","filter","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","tap","snapShot","prev","curr","_angular_core__WEBPACK_IMPORTED_MODULE_8__","EntityFilterComponent","idFilterString","idFilter","agInit","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","context","node","getValue","field","some","includes","items","headerName","idFltr","itm","Id","getModel","filterType","setModel","model","join","afterGuiAttached","valueInputRef","focus","updateIdFilter","el","parseInt","isNaN","filterChanged","filterChangedCallback","debug_node_JnOYh9kg","viewQuery","FormsModule","MatRadioModule","MatInputModule","_r2","ctx_r2","do","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","verb","ContentItemsActionsComponent_ng_template_12_Template","urlTo","menu_r4","MatRippleModule","MatIconModule","MatMenuModule","TippyDirective","entities","ContentItemsEntityComponent","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","metadataTooltip","metadataCount","metadata","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","metadataKeyValidator","form","control","keyType","controls","testValue","toString","eavConstants","keyTypes","number","test","patternWholeNumber","guid","hasCurly","bracket","substring","guidRegex","patternGuid","option_r2","targetType","label","vm_r3","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_14_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Conditional_3_Template","ctx_r3","targetTypeOptions","unknownTargetType","targetTypeHint","option_r5","contentType_r6","NameId","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_27_For_5_Template","contentTypes","scopeOption_r7","name","CreateMetadataDialogComponent_Conditional_0_Conditional_28_For_5_Template","scopeOptions","item_r8","Guid","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_1_Template","guidedKey","contentType_r9","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_ng_container_0_Template","defaultKeyInput_r10","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_Template","tmp_4_0","entity","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_1_Template","_r11","toggleGuidedKey","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_15_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_16_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_For_25_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_26_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_27_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_40_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_43_Template","toggleGuidedMode","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","valid","CreateMetadataDialogComponent","BaseComponent","contentItemsService","transient","contentTypesService","ContentTypesService","Object","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","scopes","default","scopeForContentTypes","valueChanges","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","then","formValues$","m","combineLatest","foundTargetType","find","RxHelpers","arraysEqual","updatedForm","isAppMetadata","app","UiControl","disable","viewModel$","hint","complete","result","checked","target","scope","retrieveContentTypesPromise","getScopesPromise","CreateMetadataDialogComponent_Conditional_0_Template","tmp_0_0","ReactiveFormsModule","i4","MatSelectModule","i5","MatOptionModule","i6","i7","i8","MatDialogActions","MatSlideToggleModule","i9","AsyncPipe","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","ctx_r1","debugFilter","all","ContentItemsComponent","#entitiesSvc","#contentExportSvc","#contentItemsSvc","#contentTypesSvc","#dialogRouter","snackBar","matDialog","viewContainerRef","changeDetectorRef","isDebug","GlobalConfigService","EntityEditService","ContentExportService","gridOptions","defaultGridOptions","onFilterChanged","_","#filterChanged","update","v","signal","#refresh","#gridApiSig","#contentTypeStaticName","getType","#itemsRaw","computed","aIf","urlToExportContent","computedObj","hasFilters","getFilterModel","ids","forEachNodeAfterFilterAndSort","n","push","#urlTo","fetchItems","onGridReady","set","fetchColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","#buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","filterTo","JsonHelpers","tryParse","sessionStorage","getItem","keyFilters","setColumnDefs","setFilterModel","#urlToMetadata","GoToMetadata","getUrlEntity","_Title","editItem","EditPrep","newFromType","editId","formUrl","convertFormToUrl","#urlToOpenEditView","urlToNewItem","filesDropped","files","importFile","lastIndexOf","toLocaleLowerCase","urlToImportContent","f","urlToImportItem","createMetadata","open","autoFocus","width","afterClosed","itemFor","newMetadataFromInfo","markForCheck","warn","duration","ColumnDefinitions","IdWithDefaultRenderer","cellClass","p","ReadOnly","cellRendererParams","idFieldParamsTooltipGetter","headerClass","cellRenderer","TextWidePrimary","flex","headerTooltip","sortable","_Used","_Uses","ActionsPinnedRight3","#urlToClone","#export","#delete","StaticName","minWidth","Type","DataTypeCatalog","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","Number","copy","exportEntity","#confirmAndExecuteDelete","forceDelete","dialogTitle","confirmText","_RepositoryId","isConfirmed","dismiss","delete","err","ExceptionMessage","rawValue","ContentItemsComponent_Conditional_9_Template","ContentItemsComponent_Conditional_34_Template","Name","tmp_1_0","Properties","ListInstructions","RouterOutlet","DragAndDropDirective","ToggleDebugDirective","SxcGridModule","boolEquals","x","y","stringEquals","valueEquals","objectsEqual","obj1","obj2","keys1","keys2","every","key1","hasOwnProperty","index","distinct","array","globalConfigService","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","create","zoneId","id","tryForce","force","HttpContext","IGNORED_STATUSES","_angular_core__WEBPACK_IMPORTED_MODULE_5__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-items/services/content-items.service.ts","./projects/eav-ui/src/app/shared/constants/dropdown-insert-value.constant.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.component.ts","./node_modules/@angular/material/fesm2022/badge.mjs","./projects/eav-ui/src/app/shared/ag-grid/ag-grid-helper.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/shared/rxJs/rx.helpers.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/services/entity-edit.service.ts"],"sourcesContent":["import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { webApiFieldsAll } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../shared/services/entity.service';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\nconst logSpecs = {\r\n  getAll: true,\r\n  getAllLive: true,\r\n  getAllOnce: true,\r\n\r\n}\r\n@Injectable()\r\nexport class ContentItemsService extends HttpServiceBaseSignal {\r\n\r\n  log = classLog({ ContentItemsService }, logSpecs);\r\n  \r\n  getAllPromise(contentTypeStaticName: string): Promise<ContentItem[]> {\r\n    this.log.fnIf('getAll', { contentTypeStaticName });\r\n    return this.fetchPromise<ContentItem[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getAllOnce(contentTypeStaticName: string) {\r\n    this.log.fnIf('getAllOnce', { contentTypeStaticName });\r\n    return httpResource<ContentItem[]>(() => {\r\n      return ({\r\n        url: this.apiUrl(webApiEntityList),\r\n        params: { appId: this.appId, contentType: contentTypeStaticName }\r\n      });\r\n    });\r\n  }\r\n\r\n  getAllLive(contentTypeStaticName: string, refresh: Signal<unknown>) {\r\n    this.log.fnIf('getAllLive', { contentTypeStaticName, refresh });\r\n    return httpResource<ContentItem[]>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiEntityList),\r\n        params: { appId: this.appId, contentType: contentTypeStaticName }\r\n      });\r\n    });\r\n  }\r\n\r\n  getColumnsPromise(contentTypeStaticName: string): Promise<Field[]> {\r\n    return this.fetchPromise<Field[]>(webApiFieldsAll, {\r\n      params: { appId: this.appId, staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","export const dropdownInsertValue = 'DROPDOWN_INSERT_VALUE' as const;\r\n","<mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title> {{ dialogData.title ?? 'Delete' }} {{ dialogData.entityTitle }} ({{ dialogData.entityId }})?</mat-card-title>\r\n    @if (dialogData.message) {\r\n      <mat-card-subtitle [innerHtml]=\"dialogData.message | safeHtml\"></mat-card-subtitle>\r\n    }\r\n  </mat-card-header>\r\n  <mat-card-actions align=\"end\">\r\n    <button matButton class=\"eav-card-action-button\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-button cdkFocusInitial (click)=\"closeDialog(true)\" [color]=\"dialogData.confirmColor ?? 'warn'\">\r\n      @if (dialogData.confirmTranslateKey) {\r\n        {{ dialogData.confirmTranslateKey }}\r\n      } @else {\r\n        Delete\r\n      }\r\n    </button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n","import { Component, HostBinding, Inject } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\nimport { ConfirmDeleteDialogData } from './confirm-delete-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-confirm-delete-dialog',\r\n  templateUrl: './confirm-delete-dialog.component.html',\r\n  styleUrls: ['./confirm-delete-dialog.component.scss'],\r\n  imports: [\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    SafeHtmlPipe,\r\n  ]\r\n})\r\nexport class ConfirmDeleteDialogComponent {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: ConfirmDeleteDialogData,\r\n    private dialog: MatDialogRef<ConfirmDeleteDialogComponent>,\r\n  ) { }\r\n\r\n  closeDialog(confirm?: boolean) {\r\n    this.dialog.close(confirm);\r\n  }\r\n}\r\n","import { AriaDescriber, _IdGenerator, InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, ElementRef, Renderer2, DOCUMENT, HOST_TAG_NAME, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/bidi';\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\\n\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber);\n    _renderer = inject(Renderer2);\n    _animationsDisabled = _animationsDisabled();\n    _idGenerator = inject(_IdGenerator);\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/badge/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    _color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    overlap = true;\n    /** Whether the badge is disabled. */\n    disabled;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position = 'above after';\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size = 'medium';\n    /** Whether the badge is hidden. */\n    hidden;\n    /** Visible badge element. */\n    _badgeElement;\n    /** Inline badge description. Used when the badge is applied to non-interactive host elements. */\n    _inlineBadgeDescription;\n    /** Whether the OnInit lifecycle hook has run yet */\n    _isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    _interactivityChecker = inject(InteractivityChecker);\n    _document = inject(DOCUMENT);\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_MatBadgeStyleLoader);\n        styleLoader.load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = this._elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const tagName = inject(HOST_TAG_NAME);\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.dev/components/badge/overview#accessibility\n            if (tagName.toLowerCase() === 'mat-icon' &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', this._idGenerator.getId('mat-badge-content-'));\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationsDisabled) {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && !this._animationsDisabled) {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadge, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\nexport { MatBadge, MatBadgeModule };\n","export class AgGridHelper {\r\n  public static cellLink(link: string, body: string, classes?: string): string {\r\n    return `<a class=\"default-link fill-cell ${classes}\" href=\"${link}\">${body}</a>`;\r\n  }\r\n}","import { Directive, HostListener } from '@angular/core';\r\nimport { classLog } from '../logging';\r\n\r\n@Directive({\r\n  selector: '[appClickStopPropagation]',\r\n})\r\nexport class ClickStopPropagationDirective {\r\n\r\n  log = classLog({ClickStopPropagationDirective});\r\n\r\n  // Log constructor to detect that it was really attached/created\r\n  constructor() {\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.log.a('onClick', { event });\r\n    event.stopPropagation();\r\n\r\n    // This should never be added here, as it's often on a link, and the default behavior (link open) should happen\r\n    // event.preventDefault();\r\n  }\r\n\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n    selector: 'app-field-hint',\r\n    templateUrl: './field-hint.component.html',\r\n    styleUrls: ['./field-hint.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        NgClass,\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe((data: unknown) => {\r\n        l.a('Dialog closed', { data });\r\n        return callback();\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  public doOnDialogClosedWithData(callback: (data: any) => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.#childDialogClosedWithData().subscribe(({ state }) => {\r\n        l.a('Dialog closed', { state });\r\n        callback(state);\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n  #childDialogClosedWithData() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      tap(event => {\r\n        const l = this.log.fn(\"childDialogClosed$\", {\r\n          event,\r\n          firstChild: this.route.snapshot.firstChild,\r\n          snapShot: this.route.snapshot,\r\n          state: this.router.getCurrentNavigation()?.extras.state,\r\n        });\r\n        l.a('NavigationEnd', { event });\r\n        l.end();\r\n      }),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => ({\r\n        hasChildNow: !!this.route.snapshot.firstChild,\r\n        state: this.router.getCurrentNavigation()?.extras.state,\r\n      })),\r\n      pairwise(),\r\n      filter(([prev, curr]) => prev.hasChildNow && !curr.hasChildNow),\r\n      map(([prev, curr]) => ({\r\n        hadChildBefore: prev.hasChildNow,\r\n        hasChildNow: curr.hasChildNow,\r\n        state: curr.state\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n    selector: 'app-entity-filter',\r\n    templateUrl: './entity-filter.component.html',\r\n    styleUrls: ['./entity-filter.component.scss'],\r\n    imports: [\r\n        FormsModule,\r\n        MatRadioModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n    ]\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Clone\" [href]=\"params.urlTo('clone', item)\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </a>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"do('export')\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams, ContentItemType } from './content-items-actions.models';\r\n\r\ntype GoToUrls = 'clone'\r\n\r\n@Component({\r\n    selector: 'app-data-bundle-actions',\r\n    templateUrl: './content-items-actions.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatMenuModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  protected item: ContentItem;\r\n\r\n  public params: ContentItemsActionsParams & {\r\n    urlTo(verb: GoToUrls, item: ContentItem): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsComponent['params']): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentItemType): void {\r\n    this.params.do(verb, this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n  <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n    selector: 'app-content-items-entity',\r\n    templateUrl: './content-items-entity.component.html',\r\n    styleUrls: ['./content-items-entity.component.scss'],\r\n    imports: [TippyDirective,]\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) return;\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n    <a\r\n      class=\"eav-grid-action-button default-link highlight\"\r\n      matRipple\r\n      [tippy]=\"metadataTooltip\"\r\n      [href]=\"params.urlTo('openMetadata', item)\"\r\n      [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\"\r\n    >\r\n      <mat-icon\r\n        [matBadge]=\"metadataCount\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n        >{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </a>\r\n  }\r\n  @else if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"metadataCount\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n        >{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\n\r\ntype GoToUrls = 'openMetadata'\r\n\r\n@Component({\r\n    selector: 'app-content-items-status',\r\n    templateUrl: './content-items-status.component.html',\r\n    styleUrls: ['./content-items-status.component.scss'],\r\n    imports: [\r\n        MatIconModule,\r\n        MatRippleModule,\r\n        NgClass,\r\n        MatBadgeModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  protected item: ContentItem;\r\n\r\n  public params: {\r\n    urlTo(verb: GoToUrls, item: ContentItem): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusComponent['params']): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { Of } from '../../../../../core';\r\nimport { eavConstants, MetadataKeyTypes } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: Of<typeof MetadataKeyTypes> = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This is a special operation to add an item which is metadata for another item, see\r\n        <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <form [formGroup]=\"form\">\r\n        <!-- Target Type -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Target</mat-label>\r\n          @if (vm.guidedMode) {\r\n            <mat-select formControlName=\"targetType\" required>\r\n              @for (option of targetTypeOptions; track option) {\r\n                <mat-option [value]=\"option.targetType\">\r\n                  {{ option.label }}\r\n                </mat-option>\r\n              }\r\n              @if (vm.unknownTargetType) {\r\n                <mat-option [value]=\"vm.formValues.targetType\">\r\n                  {{ vm.formValues.targetType }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          }\r\n          @if (!vm.guidedMode) {\r\n            <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required />\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType) {\r\n          <app-field-hint [isError]=\"false\">\r\n            Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n          </app-field-hint>\r\n        }\r\n        @if (vm.targetTypeHint) {\r\n          <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern) {\r\n          <app-field-hint [isError]=\"true\"> Must be a whole number </app-field-hint>\r\n        }\r\n        <!-- Key Type -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Key type</mat-label>\r\n          <mat-select formControlName=\"keyType\" required>\r\n            @for (option of vm.keyTypeOptions; track option) {\r\n              <mat-option [value]=\"option\">\r\n                {{ option }}\r\n              </mat-option>\r\n            }\r\n          </mat-select>\r\n        </mat-form-field>\r\n        @if (form.controls['keyType'].touched && form.controls['keyType'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        <!-- Content Type for Content Items -->\r\n        @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n          <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n            <mat-label>Content Type</mat-label>\r\n            <mat-select formControlName=\"contentTypeForContentItems\" [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n              @for (contentType of vm.contentTypes; track contentType) {\r\n                <mat-option [value]=\"contentType.NameId\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <!-- Scope for Content Types -->\r\n        @if (\r\n          vm.guidedMode &&\r\n          (vm.formValues.targetType === eavConstants.metadata.entity.targetType ||\r\n            vm.formValues.targetType === eavConstants.metadata.contentType.targetType)\r\n        ) {\r\n          <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n            <mat-label>Scope</mat-label>\r\n            <mat-select formControlName=\"scopeForContentTypes\" [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n              @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n                <mat-option [value]=\"scopeOption.value\">\r\n                  {{ scopeOption.name }}\r\n                </mat-option>\r\n              }\r\n              <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n        <!-- Key -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Key</mat-label>\r\n          @if (vm.guidedMode) {\r\n            @switch (vm.formValues.targetType) {\r\n              @case (eavConstants.metadata.entity.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                    @for (item of vm.contentItems; track item) {\r\n                      <mat-option [value]=\"item.Guid\"> {{ item.Title }} ({{ item.Id }}) </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                } @else {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required />\r\n                }\r\n              }\r\n              @case (eavConstants.metadata.contentType.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                    @for (contentType of vm.contentTypes; track contentType) {\r\n                      <mat-option [value]=\"contentType.NameId\">\r\n                        {{ contentType.Label }}\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                } @else {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required />\r\n                }\r\n              }\r\n              @default {\r\n                <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n              }\r\n            }\r\n          } @else {\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\" formControlName=\"key\" required />\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\" formControlName=\"key\" required />\r\n            }\r\n          }\r\n          <ng-template #defaultKeyInput>\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\" formControlName=\"key\" required />\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\" formControlName=\"key\" required />\r\n            }\r\n          </ng-template>\r\n          @if (vm.guidedMode && vm.guidedKeyExists) {\r\n            <div matTextSuffix class=\"eav-selection-suffix\">\r\n              <button\r\n                mat-icon-button\r\n                class=\"eav-selection-suffix-button\"\r\n                type=\"button\"\r\n                [ngClass]=\"{ active: vm.guidedKey }\"\r\n                tippy=\"Pick existing value\"\r\n                (click)=\"toggleGuidedKey(true)\"\r\n              >\r\n                <mat-icon class=\"eav-icon\">search</mat-icon>\r\n              </button>\r\n              <button\r\n                mat-icon-button\r\n                class=\"eav-selection-suffix-button\"\r\n                type=\"button\"\r\n                [ngClass]=\"{ active: !vm.guidedKey }\"\r\n                tippy=\"Manual entry\"\r\n                (click)=\"toggleGuidedKey(false)\"\r\n              >\r\n                <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n              </button>\r\n            </div>\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber) {\r\n          <app-field-hint [isError]=\"true\"> Must be a whole number </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternGuid) {\r\n          <app-field-hint [isError]=\"true\"> Must be a valid GUID </app-field-hint>\r\n        }\r\n      </form>\r\n    </div>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <mat-slide-toggle\r\n        color=\"accent\"\r\n        [tippy]=\"\r\n          vm.guidedMode\r\n            ? 'Guided mode helps you select options that work'\r\n            : 'Manual mode is for advanced uses and allows you to insert any values'\r\n        \"\r\n        [checked]=\"vm.guidedMode\"\r\n        (change)=\"toggleGuidedMode($event)\"\r\n      >\r\n        {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div>\r\n        <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">Confirm</button>\r\n      </div>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { AsyncPipe, NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { UiControl } from '../../edit/shared/controls/ui-control';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyTypes, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ClickStopPropagationDirective } from '../../shared/directives/click-stop-propagation.directive';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { mapUntilObjChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { RxHelpers } from '../../shared/rxJs/rx.helpers';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    NgTemplateOutlet,\r\n    MatButtonModule,\r\n    NgClass,\r\n    MatIconModule,\r\n    MatDialogActions,\r\n    MatSlideToggleModule,\r\n    AsyncPipe,\r\n    FieldHintComponent,\r\n    ClickStopPropagationDirective,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: Of<typeof MetadataKeyTypes>[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<Of<typeof MetadataKeyTypes>[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n\r\n  private contentTypesService = transient(ContentTypesService);\r\n  constructor(\r\n    private dialog: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<Of<typeof MetadataKeyTypes>[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscriptions.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscriptions.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscriptions.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAllPromise(contentTypeStaticName).then(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      mapUntilObjChanged(m => m)\r\n      // distinctUntilChanged(RxHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscriptions.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!RxHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value))\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType))\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId)\r\n          updatedForm.key = this.context.appId;\r\n\r\n        if (Object.keys(updatedForm).length)\r\n          this.form.patchValue(updatedForm);\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        UiControl.disable(this.form.controls['keyType'], keyTypeDisabled);\r\n        UiControl.disable(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialog.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypesPromise(scope).then(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopesPromise().then(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n    selector: 'app-pub-meta-filter',\r\n    templateUrl: './pub-meta-filter.component.html',\r\n    styleUrls: ['./pub-meta-filter.component.scss'],\r\n    imports: [\r\n        MatRadioModule,\r\n        FormsModule,\r\n    ]\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ contentType()?.Label || contentType()?.Name }} Data</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    @if (contentType()?.Properties?.ListInstructions; as listInstructions) {\r\n      <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n    }\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular\r\n        class=\"ag-theme-material\"\r\n        [rowData]=\"items()\"\r\n        [gridOptions]=\"gridOptions\"\r\n        (gridReady)=\"onGridReady($event)\"\r\n        appDragAndDrop\r\n        [allowedFileTypes]=\"'xml,json'\"\r\n        (filesDropped)=\"filesDropped($event)\"\r\n      >\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <a [href]=\"urlToExportContent()\" mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" tippyPlacement=\"top\">\r\n        <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </a>\r\n      <a [href]=\"urlToImportContent()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" tippyPlacement=\"top\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </a>\r\n      <a [href]=\"urlToImportItem()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" tippyPlacement=\"top\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </a>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" tippyPlacement=\"top\" (click)=\"createMetadata()\">\r\n        <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      @if (isDebug()) {\r\n        <button\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          color=\"accent\"\r\n          tippy=\"Print filter to console\"\r\n          tippyPlacement=\"top\"\r\n          (click)=\"debugFilter()\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n          <span>Filter</span>\r\n        </button>\r\n      }\r\n    </div>\r\n    <a [href]=\"urlToNewItem()\" mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\">\r\n      <mat-icon>add</mat-icon>\r\n    </a>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, computed, inject, OnInit, signal, ViewContainerRef, WritableSignal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../../../core';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ConfirmDeleteDialogComponent } from '../app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.component';\r\nimport { ConfirmDeleteDialogData } from '../app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.models';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { AgGridHelper } from '../shared/ag-grid/ag-grid-helper';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { TippyDirective } from '../shared/directives/tippy.directive';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { classLog } from '../shared/logging';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { SafeHtmlPipe } from '../shared/pipes/safe-html.pipe';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { EntityEditService } from '../shared/services/entity-edit.service';\r\nimport { GlobalConfigService } from '../shared/services/global-config.service';\r\nimport { computedObj } from '../shared/signals/signal.utilities';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  items: true,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatDialogActions,\r\n    SafeHtmlPipe,\r\n    DragAndDropDirective,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class ContentItemsComponent implements OnInit {\r\n\r\n  log = classLog({ ContentItemsComponent }, logSpecs);\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n\r\n  #entitiesSvc = transient(EntityEditService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ContentItemsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    onFilterChanged: _ => this.#filterChanged.update(v => v + 1),\r\n  };\r\n\r\n  /** Signal to tell other signals that the filter changed */\r\n  #filterChanged = signal(0);\r\n\r\n  /** Signal to trigger reloading of data */\r\n  #refresh = signal(0);\r\n\r\n  #gridApiSig: WritableSignal<GridApi<ContentItem>> = signal<GridApi<ContentItem>>(null);\r\n\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n  contentType = this.#contentTypesSvc.getType(this.#contentTypeStaticName).value;\r\n\r\n  #itemsRaw = this.#contentItemsSvc.getAllLive(this.#contentTypeStaticName, this.#refresh).value;\r\n\r\n  items = computed(() => {\r\n    const data = this.#itemsRaw();\r\n    this.log.aIf('items', { data });\r\n    return data;\r\n  });\r\n\r\n  ngOnInit() {\r\n    this.urlToExportContent();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.fetchItems());\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApiSig.set(params.api);\r\n    this.fetchColumns();\r\n    this.urlToExportContent();\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.#refresh.update(v => ++v)\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.#contentItemsSvc.getColumnsPromise(this.#contentTypeStaticName).then(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.#buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.#gridApiSig())\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.#gridApiSig().setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      this.log.a('Will try to apply filter:', filterModel);\r\n      this.#gridApiSig().setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  // This method is called multiple times, to reduce redundancy.\r\n  // It calls the urlSubRoute method from the dialogRouter service\r\n  // and sets a # infront of the url, so angular can differentiate\r\n  // angular routes from ordinary urls.\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  #urlToMetadata(item: ContentItem) {\r\n    return this.#dialogRouter.urlSubRoute(GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.#contentTypeStaticName,\r\n    ));\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n          : EditPrep.editId(item.Id)\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #urlToOpenEditView(item?: ContentItem) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          item == null\r\n            ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n            : EditPrep.editId(item.Id)\r\n        ]\r\n      })}`\r\n    )\r\n  }\r\n\r\n  urlToNewItem(item?: ContentItem) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          item == null\r\n            ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n            : EditPrep.editId(item.Id)\r\n        ],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  urlToExportContent = computedObj('urlToExportContent', () => {\r\n    const value = this.#gridApiSig();\r\n    if (!value)\r\n      return '';\r\n\r\n    // Watch for filter changes, as the IDs are probably different on each change\r\n    this.#filterChanged();\r\n\r\n    const hasFilters = Object.keys(value.getFilterModel()).length > 0;\r\n    const ids: number[] = [];\r\n\r\n    if (hasFilters)\r\n      value.forEachNodeAfterFilterAndSort(n => ids.push(n.data.Id));\r\n\r\n    return this.#urlTo(\r\n      `export/${this.#contentTypeStaticName}${ids.length > 0 ? `/${ids.join(',')}` : ''}`\r\n    );\r\n  });\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.urlToImportContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  urlToImportContent(files?: File[]) {\r\n    // Special, because the /import is at the end of the URL\r\n    return this.#urlTo(\r\n      `${this.#contentTypeStaticName}${files ? `/${files.map(f => f.name).join(',')}` : ''}/import`\r\n    );\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navRelative(['import'], { state: dialogData });\r\n  }\r\n\r\n  urlToImportItem() {\r\n    return this.#urlTo('import');\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.matDialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) return;\r\n\r\n      const form: EditForm = {\r\n        items: [EditPrep.newMetadataFromInfo(this.#contentTypeStaticName, itemFor)],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.#gridApiSig().getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  #buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        ...ColumnDefinitions.IdWithDefaultRenderer,\r\n        cellClass: (p: { data: ContentItem }) => `id-action no-padding no-outline ${p.data._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' '),\r\n        cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentItem>()\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (p) => {\r\n          const item: ContentItem = p.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => ({\r\n          urlTo: (verb, item) => '#' + this.#urlToMetadata(item),\r\n        } satisfies ContentItemsStatusComponent['params']))(),\r\n      },\r\n      {\r\n        ...ColumnDefinitions.TextWidePrimary,\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        cellRenderer: (p: { data: ContentItem, }) => AgGridHelper.cellLink(this.#urlToOpenEditView(p.data), p.data._Title),\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (p: { data: ContentItem }) => `${p.data._Used} / ${p.data._Uses}`,\r\n      },\r\n      {\r\n        ...ColumnDefinitions.ActionsPinnedRight3,\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            urlTo: (verb, item) => '#' + this.#urlToClone(item),\r\n            do: (verb, item) => {\r\n              switch (verb) {\r\n                case 'export': this.#export(item); break;\r\n                case 'delete': this.#delete(item); break;\r\n              }\r\n            }\r\n          } satisfies ContentItemsActionsParams;\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeCatalog.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeCatalog.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  #urlToClone(item: ContentItem) {\r\n    return this.#dialogRouter.urlSubRoute(\r\n      `edit/${convertFormToUrl({\r\n        items: [EditPrep.copy(this.#contentTypeStaticName, item.Id)],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  #export(item: ContentItem) {\r\n    this.#contentExportSvc.exportEntity(item.Id, this.#contentTypeStaticName, true);\r\n  }\r\n\r\n\r\n  // Show initial delete confirmation\r\n  #delete(item: ContentItem) {\r\n    this.snackBar.open('Deleting...');\r\n    this.#confirmAndExecuteDelete(\r\n      item,\r\n      \"Delete Item?\",\r\n      false\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Shows a confirmation dialog and performs delete operation if confirmed\r\n   * @param item The item to delete\r\n   * @param message Confirmation message to display\r\n   * @param forceDelete Whether to force delete\r\n   * @param dialogTitle Optional dialog title\r\n   * @param confirmText Optional confirmation button text\r\n   */\r\n  #confirmAndExecuteDelete(item: ContentItem, message: string, forceDelete: boolean, dialogTitle?: string, confirmText?: string) {\r\n    \r\n    const dialogData: ConfirmDeleteDialogData = {\r\n      entityId: item._RepositoryId,\r\n      entityTitle: item._Title,\r\n      message: message,\r\n      title: dialogTitle,\r\n      confirmTranslateKey: confirmText\r\n    };\r\n\r\n    this.matDialog.open(ConfirmDeleteDialogComponent, {\r\n      autoFocus: false,\r\n      data: dialogData,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '400px',\r\n    }).afterClosed().subscribe(isConfirmed => {\r\n      this.snackBar.dismiss();\r\n      if (!isConfirmed) return;\r\n\r\n      // Execute delete operation\r\n      this.snackBar.open('Deleting...');\r\n      this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, forceDelete)\r\n        .subscribe({\r\n          next: () => {\r\n            this.snackBar.open('Deleted', null, { duration: 2000 });\r\n            this.fetchItems();\r\n          },\r\n          error: (err: HttpErrorResponse) => {\r\n            // Only show force delete option if this was a regular delete attempt\r\n            // Open Dialog to confirm force delete\r\n            if (!forceDelete) {\r\n              this.snackBar.dismiss();\r\n              this.#confirmAndExecuteDelete(\r\n                item,\r\n                `${err.error.ExceptionMessage} \\n\\nDo you want to force delete`,\r\n                true,\r\n                'Force Delete',\r\n                'Force'\r\n              );\r\n            }\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { JsonHelpers } from '../shared/helpers/json.helpers';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) return;\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) return;\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = JsonHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import isEqual from 'lodash-es/isEqual';\r\n\r\nexport class RxHelpers {\r\n\r\n  static boolEquals(x: boolean, y: boolean): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static stringEquals(x: string, y: string): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static valueEquals<T>(x: T, y: T): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static objectsEqual<T>(x: T, y: T): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    const obj1 = x as Record<string, any>;\r\n    const obj2 = y as Record<string, any>;\r\n\r\n    const keys1 = Object.keys(obj1);\r\n    const keys2 = Object.keys(obj2);\r\n    if (keys1.length !== keys2.length) return false;\r\n\r\n    const equal = keys1.every(key1 => {\r\n      if (!obj2.hasOwnProperty(key1)) return false;\r\n\r\n      return obj1[key1] === obj2[key1];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  static arraysEqual<T>(x: T[], y: T[]): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    if (x.length !== y.length) return false;\r\n\r\n    const equal = x.every((item, index) => {\r\n      return x[index] === y[index];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  /** used as .filter(distinct), filters array to only have distinct values */\r\n  static distinct<T>(value: T, index: number, array: T[]): boolean {\r\n    return array.indexOf(value) === index;\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { IGNORED_STATUSES } from '../interceptors/handle-errors.interceptor';\r\nimport { ItemInListIdentifier } from '../models/edit-form.model';\r\nimport { webApiEntityRoot } from './entity.service';\r\nimport { HttpServiceBaseSignal } from './http-service-base-signal';\r\n\r\n@Injectable()\r\nexport class EntityEditService extends HttpServiceBaseSignal {\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.appId, force: tryForce.toString() },\r\n      context: new HttpContext().set(IGNORED_STATUSES, [400]),\r\n    });\r\n  }\r\n}\r\n\r\ninterface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\ninterface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n"],"x_google_ignoreList":[4]}