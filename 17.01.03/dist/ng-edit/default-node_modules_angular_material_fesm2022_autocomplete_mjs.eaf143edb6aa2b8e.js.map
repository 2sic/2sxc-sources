{"version":3,"file":"default-node_modules_angular_material_fesm2022_autocomplete_mjs.eaf143edb6aa2b8e.js","mappings":"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","names":["_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","_r4","i0","$event","ctx_r3","_animationDone","next","formFieldId_r1","id","ctx_r0","_classList","isOpen","ariaLabel","_getPanelAriaLabelledby","_c1","panelAnimation","trigger","state","style","opacity","transform","transition","group","animate","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","this","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","autoSelectActiveOption","hideSingleSelectionIndicator","requireSelection","MatAutocomplete","_isOpen","showPanel","_setColor","value","_color","_setThemeClasses","classList","length","coerceStringArray","reduce","className","_setVisibilityClasses","_elementRef","nativeElement","_hideSingleSelectionIndicator","_syncParentProperties","options","_changeDetectorRef","markForCheck","_defaults","platform","_activeOptionChanges","Subscription","EMPTY","_visibleClass","_hiddenClass","EventEmitter","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","ngAfterContentInit","_keyManager","ActiveDescendantKeyManager","withWrap","skipPredicate","_skipPredicate","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","destroy","unsubscribe","complete","_setScrollTop","scrollTop","panel","_getScrollTop","_emitSelectEvent","event","labelId","ariaLabelledby","static","ɵfac","t","i1","ɵcmp","type","selectors","contentQueries","dirIndex","MatOption","MAT_OPTGROUP","_t","optionGroups","viewQuery","TemplateRef","template","first","hostAttrs","inputs","booleanAttribute","panelWidth","disableRipple","outputs","exportAs","features","provide","MAT_OPTION_PARENT_COMPONENT","useExisting","ngContentSelectors","decls","vars","consts","dependencies","i2","styles","encapsulation","data","animation","changeDetection","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","multi","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","overlay","inject","Overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","Subject","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_aboveClass","_overlayAttached","optionSelections","defer","autocomplete","changes","pipe","startWith","switchMap","merge","map","onSelectionChange","onStable","take","_handlePanelKeydown","keyCode","ESCAPE","hasModifierKey","UP_ARROW","_pendingAutoselectedOption","_updateNativeInputValue","_valueBeforeAutoSelection","_resetActiveItem","stopPropagation","preventDefault","_trackedModal","_scrollStrategy","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","_clearFromModal","openPanel","_attachOverlay","_floatLabel","addAriaReferencedId","closePanel","_resetLabel","run","hasAttached","detach","_closingActionsSubscription","_updatePanelState","detectChanges","removeAriaReferencedId","panelClosingActions","tabOut","filter","_getOutsideClickStream","detachments","of","MatOptionSelectionChange","activeOption","activeItem","fromEvent","clickTarget","_getEventTarget","formField","customOrigin","connectedTo","elementRef","contains","overlayElement","writeValue","Promise","resolve","then","_assignOptionValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","hasModifier","ENTER","_selectViaInteraction","prevActiveItem","isArrowKey","DOWN_ARROW","TAB","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_previousValue","selectedOption","find","selected","deselect","_clearPreviousSelectedOption","_handleFocus","_handleClick","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","tap","reapplyLastPosition","delay","wasOpen","_emitOpened","_setValueAndClose","dispose","toDisplay","_control","toSelect","focus","_valueOnAttach","skip","emitEvent","forEach","overlayRef","setOrigin","_getConnectedElement","updateSize","width","_getPanelWidth","_portal","TemplatePortal","getLabelId","create","_getOverlayConfig","attach","color","_applyModalPanelOwnership","_keydownSubscription","keydownEvents","_outsideClickSubscription","outsidePointerEvents","OverlayConfig","positionStrategy","_getOverlayPosition","direction","undefined","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","firstEnabledOptionIndex","get","setActiveItem","element","readOnly","autocompleteDisabled","defaultView","labelCount","_countGroupLabelsBeforeOption","_getHostElement","newScrollPosition","_getOptionScrollPosition","offsetTop","offsetHeight","modal","closest","panelId","i1$1","i2$1","MAT_FORM_FIELD","DOCUMENT","i3","ɵdir","hostVars","hostBindings","toString","MatAutocompleteModule","ɵmod","ɵinj","providers","imports","OverlayModule","MatOptionModule","MatCommonModule","CommonModule","CdkScrollableModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/autocomplete.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, booleanAttribute, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, ContentChildren, Input, Output, Directive, forwardRef, inject, Optional, Host, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ActiveDescendantKeyManager, addAriaReferencedId, removeAriaReferencedId } from '@angular/cdk/a11y';\nimport { coerceStringArray } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, group, animate } from '@angular/animations';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { ESCAPE, hasModifierKey, UP_ARROW, ENTER, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/bidi';\n\n// Animation values come from\n// https://github.com/material-components/material-components-web/blob/master/packages/mdc-menu-surface/_mixins.scss\n// TODO(mmalerba): Ideally find a way to import the values from MDC's code.\nconst panelAnimation = trigger('panelAnimation', [\n    state('void, hidden', style({\n        opacity: 0,\n        transform: 'scaleY(0.8)',\n    })),\n    transition(':enter, hidden => visible', [\n        group([\n            animate('0.03s linear', style({ opacity: 1 })),\n            animate('0.12s cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scaleY(1)' })),\n        ]),\n    ]),\n    transition(':leave, visible => hidden', [animate('0.075s linear', style({ opacity: 0 }))]),\n]);\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        autoActiveFirstOption: false,\n        autoSelectActiveOption: false,\n        hideSingleSelectionIndicator: false,\n        requireSelection: false,\n    };\n}\n/** Autocomplete component. */\nclass MatAutocomplete {\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n        this._color = value;\n        this._setThemeClasses(this._classList);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._setThemeClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    constructor(_changeDetectorRef, _elementRef, _defaults, platform) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._defaults = _defaults;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Class to apply to the panel when it's visible. */\n        this._visibleClass = 'mat-mdc-autocomplete-visible';\n        /** Class to apply to the panel when it's hidden. */\n        this._hiddenClass = 'mat-mdc-autocomplete-hidden';\n        /** Emits when the panel animation is done. Null if the panel doesn't animate. */\n        this._animationDone = new EventEmitter();\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = platform?.SAFARI || false;\n        this.autoActiveFirstOption = !!_defaults.autoActiveFirstOption;\n        this.autoSelectActiveOption = !!_defaults.autoSelectActiveOption;\n        this.requireSelection = !!_defaults.requireSelection;\n        this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withWrap()\n            .skipPredicate(this._skipPredicate);\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._activeOptionChanges.unsubscribe();\n        this._animationDone.complete();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n    /** Sets the theming classes on a classlist based on the theme of the panel. */\n    _setThemeClasses(classList) {\n        classList['mat-primary'] = this._color === 'primary';\n        classList['mat-warn'] = this._color === 'warn';\n        classList['mat-accent'] = this._color === 'accent';\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate() {\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatAutocomplete, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.0.4\", type: MatAutocomplete, selector: \"mat-autocomplete\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: [\"autoActiveFirstOption\", \"autoActiveFirstOption\", booleanAttribute], autoSelectActiveOption: [\"autoSelectActiveOption\", \"autoSelectActiveOption\", booleanAttribute], requireSelection: [\"requireSelection\", \"requireSelection\", booleanAttribute], panelWidth: \"panelWidth\", disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], classList: [\"class\", \"classList\"], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, host: { attributes: { \"ngSkipHydration\": \"\" }, classAttribute: \"mat-mdc-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], exportAs: [\"matAutocomplete\"], ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [panelAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', host: {\n                        'class': 'mat-mdc-autocomplete',\n                        'ngSkipHydration': '',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], animations: [panelAnimation], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"] }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }, { type: i1.Platform }], propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], autoSelectActiveOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], requireSelection: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], panelWidth: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatAutocompleteOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: MatAutocompleteOrigin, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }] });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass MatAutocompleteTrigger {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        /** Class to apply to the panel when it's above the input. */\n        this._aboveClass = 'mat-mdc-autocomplete-panel-above';\n        this._overlayAttached = false;\n        /** Stream of changes to the selection state of the autocomplete options. */\n        this.optionSelections = defer(() => {\n            const options = this.autocomplete ? this.autocomplete.options : null;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        /** Handles keyboard events coming from the overlay panel. */\n        this._handlePanelKeydown = (event) => {\n            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n            if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                // If the user had typed something in before we autoselected an option, and they decided\n                // to cancel the selection, restore the input value to the one they had typed in.\n                if (this._pendingAutoselectedOption) {\n                    this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n                    this._pendingAutoselectedOption = null;\n                }\n                this._closeKeyEventStream.next();\n                this._resetActiveItem();\n                // We need to stop propagation, otherwise the event will eventually\n                // reach the input itself and cause the overlay to be reopened.\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        };\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        this._scrollStrategy = scrollStrategy;\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n        this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n        // Add aria-owns attribute when the autocomplete becomes visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            addAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            // The `NgZone.onStable` always emits outside of the Angular zone,\n            // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\n            // We should manually run in Angular zone to update UI after panel closing.\n            this._zone.run(() => {\n                this.autocomplete.closed.emit();\n            });\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        this._pendingAutoselectedOption = null;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        this._updatePanelState();\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n        // Remove aria-owns attribute when the autocomplete is no longer visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return (this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                // Normally focus moves inside `mousedown` so this condition will almost always be\n                // true. Its main purpose is to handle the case where the input is focused from an\n                // outside click which propagates up to the `body` listener within the same sequence\n                // and causes the panel to close immediately (see #3106).\n                this._document.activeElement !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                !!this._overlayRef &&\n                !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n                if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n                    if (!this._pendingAutoselectedOption) {\n                        this._valueBeforeAutoSelection = this._element.nativeElement.value;\n                    }\n                    this._pendingAutoselectedOption = this.activeOption;\n                    this._assignOptionValue(this.activeOption.value);\n                }\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._pendingAutoselectedOption = null;\n            // If selection is required we don't write to the CVA while the user is typing.\n            // At the end of the selection either the user will have picked something\n            // or we'll reset the value back to null.\n            if (!this.autocomplete || !this.autocomplete.requireSelection) {\n                this._onChange(value);\n            }\n            if (!value) {\n                this._clearPreviousSelectedOption(null, false);\n            }\n            else if (this.panelOpen && !this.autocomplete.requireSelection) {\n                // Note that we don't reset this when `requireSelection` is enabled,\n                // because the option will be reset when the panel is closed.\n                const selectedOption = this.autocomplete.options?.find(option => option.selected);\n                if (selectedOption) {\n                    const display = this.autocomplete.displayWith?.(selectedOption) ?? selectedOption.value;\n                    if (value !== display) {\n                        selectedOption.deselect(false);\n                    }\n                }\n            }\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this.openPanel();\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            if (this._formField) {\n                this._formField.floatLabel = 'auto';\n            }\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return (merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            this._zone.run(() => {\n                const wasOpen = this.panelOpen;\n                this._resetActiveItem();\n                this._updatePanelState();\n                this._changeDetectorRef.detectChanges();\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                }\n                if (wasOpen !== this.panelOpen) {\n                    // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n                    // `closed` event, because we may not have emitted it. This can happen\n                    // - if the users opens the panel and there are no options, but the\n                    //   options come in slightly later or as a result of the value changing,\n                    // - if the panel is closed after the user entered a string that did not match any\n                    //   of the available options,\n                    // - if a valid string is entered after an invalid one.\n                    if (this.panelOpen) {\n                        this._emitOpened();\n                    }\n                    else {\n                        this.autocomplete.closed.emit();\n                    }\n                }\n            });\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /**\n     * Emits the opened event once it's known that the panel will be shown and stores\n     * the state of the trigger right before the opening sequence was finished.\n     */\n    _emitOpened() {\n        this.autocomplete.opened.emit();\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _assignOptionValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith\n            ? this.autocomplete.displayWith(value)\n            : value;\n        if (value == null) {\n            this._clearPreviousSelectedOption(null, false);\n        }\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = value;\n        }\n        else {\n            this._element.nativeElement.value = value;\n        }\n        this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const panel = this.autocomplete;\n        const toSelect = event ? event.source : this._pendingAutoselectedOption;\n        if (toSelect) {\n            this._clearPreviousSelectedOption(toSelect);\n            this._assignOptionValue(toSelect.value);\n            // TODO(crisbeto): this should wait until the animation is done, otherwise the value\n            // gets reset while the panel is still animating which looks glitchy. It'll likely break\n            // some tests to change it at this point.\n            this._onChange(toSelect.value);\n            panel._emitSelectEvent(toSelect);\n            this._element.nativeElement.focus();\n        }\n        else if (panel.requireSelection &&\n            this._element.nativeElement.value !== this._valueOnAttach) {\n            this._clearPreviousSelectedOption(null);\n            this._assignOptionValue(null);\n            // Wait for the animation to finish before clearing the form control value, otherwise\n            // the options might change while the animation is running which looks glitchy.\n            if (panel._animationDone) {\n                panel._animationDone.pipe(take(1)).subscribe(() => this._onChange(null));\n            }\n            else {\n                this._onChange(null);\n            }\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip, emitEvent) {\n        // Null checks are necessary here, because the autocomplete\n        // or its options may not have been assigned yet.\n        this.autocomplete?.options?.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect(emitEvent);\n            }\n        });\n    }\n    _attachOverlay() {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: this._formField?.getLabelId(),\n            });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._valueOnAttach = this._element.nativeElement.value;\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        this.autocomplete._setColor(this._formField?.color);\n        this._updatePanelState();\n        this._applyModalPanelOwnership();\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this._emitOpened();\n        }\n    }\n    /** Updates the panel's visibility state and any trigger state tied to id. */\n    _updatePanelState() {\n        this.autocomplete._setVisibility();\n        // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n        // because the act of subscribing will prevent events from reaching other overlays and\n        // we don't want to block the events if there are no options.\n        if (this.panelOpen) {\n            const overlayRef = this._overlayRef;\n            if (!this._keydownSubscription) {\n                // Use the `keydownEvents` in order to take advantage of\n                // the overlay event targeting provided by the CDK overlay.\n                this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n            }\n            if (!this._outsideClickSubscription) {\n                // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n                // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n                // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n                this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n            }\n        }\n        else {\n            this._keydownSubscription?.unsubscribe();\n            this._outsideClickSubscription?.unsubscribe();\n            this._keydownSubscription = this._outsideClickSubscription = null;\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir ?? undefined,\n            panelClass: this._defaults?.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n            // because it activates the first option that passes the skip predicate, rather than the\n            // first *enabled* option.\n            let firstEnabledOptionIndex = -1;\n            for (let index = 0; index < autocomplete.options.length; index++) {\n                const option = autocomplete.options.get(index);\n                if (!option.disabled) {\n                    firstEnabledOptionIndex = index;\n                    break;\n                }\n            }\n            autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this.autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document?.defaultView || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = this.autocomplete.id;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n            this._trackedModal = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatAutocompleteTrigger, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: MAT_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i2$1.Directionality, optional: true }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: i3.ViewportRuler }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.4\", type: MatAutocompleteTrigger, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\", booleanAttribute] }, host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-controls\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-mdc-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-mdc-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n                }] }, { type: i2$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }, {\n                    type: Host\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }], propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: [{ alias: 'matAutocompleteDisabled', transform: booleanAttribute }]\n            }] } });\n\nclass MatAutocompleteModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatAutocompleteModule, declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule], exports: [CdkScrollableModule,\n            MatAutocomplete,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule, CdkScrollableModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatAutocomplete,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n"],"x_google_ignoreList":[0]}