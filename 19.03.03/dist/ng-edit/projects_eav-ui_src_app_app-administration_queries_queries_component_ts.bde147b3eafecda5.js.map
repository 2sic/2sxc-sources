{"version":3,"file":"projects_eav-ui_src_app_app-administration_queries_queries_component_ts.bde147b3eafecda5.js","mappings":"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","names":["QueryActions","Edit","Metadata","Rest","Clone","Permissions","Export","Delete","i0","ctx_r0","params","urlTo","actions","item","length","_Permissions","Count","_r2","do","_EditInfo","DisableDelete","QueriesActionsComponent","constructor","this","agInit","data","enablePermissions","getEnablePermissions","refresh","selectors","decls","vars","consts","template","rf","ctx","QueriesActionsComponent_Conditional_4_Template","QueriesActionsComponent_Conditional_5_Template","QueriesActionsComponent_Conditional_6_Template","QueriesActionsComponent_Conditional_7_Template","QueriesActionsComponent_ng_template_13_Template","DisableMetadata","DisableEdit","menu_r3","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","MatMenuModule","i4","TippyDirective","encapsulation","logSpecs","all","urlToOpenVisualQueryDesigner","titleCellRenderer","cloneQuery","deleteQuery","exportQuery","QueriesComponent","#pipelineSvc","#contentExportSvc","#dialogRouter","#dialogConfigSvc","#context","#snackBar","log","classLog","transient","PipelinesService","ContentExportService","DialogRoutingService","DialogConfigAppService","inject","Context","MatSnackBar","gridOptions","buildGridOptions","#refresh","signal","queries","computed","getAllSig","eavConstants","contentTypes","query","undefined","ngOnInit","doOnDialogClosed","#triggerRefresh","getCurrent$","subscribe","settings","Enable","AppPermissions","urlToImportQuery","#urlTo","importQuery","files","navRelative","state","urlToNewQuery","#urlToEditOrNew","update","v","url","urlSubRoute","convertFormToUrl","items","EditPrep","newFromType","TestParameters","pipelineDesigner","testParameters","editId","Id","#urlToOpenVisualQueryDesigner","RouteLinkHelper","routeTo","#urlToOpenMetadata","GoToMetadata","getUrlEntity","Guid","Name","#urlToPermissions","GoToPermissions","#urlToRestApi","GoToDevRest","getUrlQueryInAdmin","l","fnIf","open","clonePipeline","duration","end","exportEntity","confirm","delete","res","#titleCellRenderer","values","defaultGridOptions","columnDefs","ColumnDefinitions","IdWithDefaultRenderer","cellClass","p","ReadOnly","split","cellRendererParams","idFieldParamsTooltipGetter","TextWide","field","sort","cellRenderer","TextWideFlex3","ActionsPinnedRight4","action","$event","MatDialogActions","MatButtonModule","RouterOutlet","SxcGridModule","DragAndDropDirective","BADGE_CONTENT_CLASS","_MatBadgeStyleLoader","static","__ngFactoryType__","type","styles","changeDetection","MatBadge","_ngZone","NgZone","_elementRef","ElementRef","_ariaDescriber","AriaDescriber","_renderer","Renderer2","_animationMode","ANIMATION_MODULE_TYPE","optional","_idGenerator","_IdGenerator","color","_color","value","_setColor","overlap","disabled","position","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","size","hidden","_badgeElement","_inlineBadgeDescription","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","styleLoader","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","isAbove","indexOf","isAfter","getBadgeElement","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","getId","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","from","hostAttrs","hostVars","hostBindings","inputs","booleanAttribute","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/queries/queries-actions/queries-actions.ts","./projects/eav-ui/src/app/app-administration/queries/queries-actions/queries-actions.component.html","./projects/eav-ui/src/app/app-administration/queries/queries-actions/queries-actions.component.ts","./projects/eav-ui/src/app/app-administration/queries/queries.component.ts","./projects/eav-ui/src/app/app-administration/queries/queries.component.html","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Query } from '../../models/query.model';\r\n\r\n// Test @2dm 2020-11-20 - I believe the current model has way too much ceremony\r\n// I need to change ca. 10 places just to get one more action to work\r\n// that's not great\r\nexport enum QueryActions {\r\n  Edit,\r\n  Metadata,\r\n  Rest,\r\n  Clone,\r\n  Permissions,\r\n  Export,\r\n  Delete,\r\n}\r\n\r\nexport interface QueriesActionsParams {\r\n  getEnablePermissions(): boolean;\r\n  \r\n  urlTo(action: QueryActions, query: Query): void;\r\n  do(action: QueryActions, query: Query): void;\r\n}\r\n","<div class=\"actions-component\">\r\n  <a [href]=\"params.urlTo(actions.Edit, item)\" class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Edit\">\r\n    <mat-icon>edit</mat-icon>\r\n  </a>\r\n\r\n  @if (!item._EditInfo.DisableMetadata) {\r\n    <a [href]=\"params.urlTo(actions.Metadata, item)\" class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Metadata\">\r\n      <mat-icon\r\n        [matBadge]=\"item.Metadata?.length\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!item.Metadata?.length\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        local_offer\r\n      </mat-icon>\r\n    </a>\r\n  }\r\n  @if (item._EditInfo.DisableMetadata) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"item.Metadata?.length\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!item.Metadata?.length\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!item._EditInfo.DisableEdit && enablePermissions) {\r\n    <a [href]=\"params.urlTo(actions.Permissions, item)\" class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Permissions\">\r\n      <mat-icon\r\n        [matBadge]=\"item._Permissions.Count\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!item._Permissions.Count\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        person\r\n      </mat-icon>\r\n    </a>\r\n  }\r\n  @if (item._EditInfo.DisableEdit || !enablePermissions) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"item._Permissions.Count\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!item._Permissions.Count\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        person\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <a [href]=\"params.urlTo(actions.Rest, item)\" mat-menu-item class=\"default-link\">\r\n      <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      <span>REST API</span>\r\n    </a>\r\n    <button mat-menu-item (click)=\"params.do(actions.Clone, item)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n      <span>Copy</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"params.do(actions.Export, item)\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"params.do(actions.Delete, item)\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { Query } from '../../models/query.model';\r\nimport { QueriesActionsParams, QueryActions } from './queries-actions';\r\n\r\n@Component({\r\n    selector: 'app-queries-actions',\r\n    templateUrl: './queries-actions.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatBadgeModule,\r\n        MatMenuModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class QueriesActionsComponent implements ICellRendererAngularComp {\r\n  item: Query;\r\n  params: ICellRendererParams & QueriesActionsParams;\r\n  enablePermissions: boolean;\r\n  actions = QueryActions;\r\n\r\n  agInit(params: ICellRendererParams & QueriesActionsParams): void {\r\n    this.params = params;\r\n    this.item = this.params.data;\r\n    this.enablePermissions = this.params.getEnablePermissions();\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, computed, inject, OnInit, signal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../../../../core';\r\nimport { ContentExportService } from '../../content-export/services/content-export.service';\r\nimport { GoToDevRest } from '../../dev-rest/go-to-dev-rest';\r\nimport { GoToMetadata } from '../../metadata';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { FileUploadDialogData } from '../../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DragAndDropDirective } from '../../shared/directives/drag-and-drop.directive';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { EditPrep } from '../../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { RouteLinkHelper } from '../../shared/routing/route-link-helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { PipelinesService } from '../services/pipelines.service';\r\nimport { QueriesActionsParams, QueryActions } from './queries-actions/queries-actions';\r\nimport { QueriesActionsComponent } from './queries-actions/queries-actions.component';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  urlToOpenVisualQueryDesigner: true,\r\n  titleCellRenderer: true,\r\n  cloneQuery: false,\r\n  deleteQuery: false,\r\n  exportQuery: false,\r\n};\r\n\r\n@Component({\r\n  selector: 'app-queries',\r\n  templateUrl: './queries.component.html',\r\n  imports: [\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    SxcGridModule,\r\n    DragAndDropDirective,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class QueriesComponent implements OnInit {\r\n\r\n  log = classLog({ QueriesComponent }, logSpecs);\r\n\r\n  #pipelineSvc = transient(PipelinesService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n\r\n  #context = inject(Context);\r\n  #snackBar = inject(MatSnackBar);\r\n\r\n  constructor() { }\r\n\r\n  enablePermissions!: boolean;\r\n  public gridOptions = this.buildGridOptions();\r\n\r\n  #refresh = signal(0);\r\n\r\n  queries = computed(() => {\r\n    const refresh = this.#refresh();\r\n    return this.#pipelineSvc.getAllSig(eavConstants.contentTypes.query, undefined)\r\n  });\r\n\r\n  ngOnInit() {\r\n    // watch for return from dialog to reload queries\r\n    this.#dialogRouter.doOnDialogClosed(() => this.#triggerRefresh());\r\n\r\n    // get setting for enablePermissions on load\r\n    this.#dialogConfigSvc.getCurrent$().subscribe(settings => {\r\n      this.enablePermissions = settings.Context.Enable.AppPermissions;\r\n    });\r\n  }\r\n\r\n  //#region methods for template actions\r\n\r\n  urlToImportQuery() {\r\n    return this.#urlTo(`import`);\r\n  }\r\n\r\n  importQuery(files?: File[]) {\r\n    this.#dialogRouter.navRelative(['import'], { state: { files } satisfies FileUploadDialogData });\r\n  }\r\n\r\n  urlToNewQuery() {\r\n    return this.#urlToEditOrNew(null);\r\n  }\r\n\r\n  //#endregion\r\n\r\n  #triggerRefresh() {\r\n    this.#refresh.update(v => v++);\r\n  }\r\n\r\n  #urlTo(url: string) {\r\n    return `#${this.#dialogRouter.urlSubRoute(url)}`;\r\n  }\r\n\r\n  #urlToEditOrNew(query?: Query) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          query == null\r\n            ? EditPrep.newFromType(eavConstants.contentTypes.query, { TestParameters: eavConstants.pipelineDesigner.testParameters })\r\n            : EditPrep.editId(query.Id),\r\n        ],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  #urlToOpenVisualQueryDesigner(query: Query): string {\r\n    return '#/' + new RouteLinkHelper().routeTo(this.#context, `query/${query.Id}`);\r\n  }\r\n\r\n  #urlToOpenMetadata(query: Query): string {\r\n    return this.#urlTo(\r\n      GoToMetadata.getUrlEntity(query.Guid, `Metadata for Query: ${query.Name} (${query.Id})`)\r\n    );\r\n  }\r\n\r\n  #urlToPermissions(query: Query): string {\r\n    return this.#urlTo(GoToPermissions.getUrlEntity(query.Guid));\r\n  }\r\n\r\n  #urlToRestApi(query: Query): string {\r\n    return this.#urlTo(GoToDevRest.getUrlQueryInAdmin(query.Guid));\r\n  }\r\n\r\n  private cloneQuery(query: Query) {\r\n    const l = this.log.fnIf('cloneQuery', { query });\r\n    this.#snackBar.open('Copying...');\r\n    this.#pipelineSvc.clonePipeline(query.Id).subscribe(() => {\r\n      this.#snackBar.open('Copied', null, { duration: 2000 });\r\n      this.#triggerRefresh();\r\n    });\r\n    l.end();\r\n  }\r\n\r\n  private exportQuery(query: Query) {\r\n    const l = this.log.fnIf('exportQuery', { query });\r\n    this.#contentExportSvc.exportEntity(query.Id, 'Query', true);\r\n    l.end();\r\n  }\r\n\r\n  private deleteQuery(query: Query) {\r\n    const l = this.log.fnIf('deleteQuery', { query });\r\n    if (!confirm(`Delete Pipeline '${query.Name}' (${query.Id})?`))\r\n      return;\r\n    this.#snackBar.open('Deleting...');\r\n    this.#pipelineSvc.delete(query.Id).subscribe(res => {\r\n      this.#snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.#triggerRefresh();\r\n    });\r\n    l.end();\r\n  }\r\n\r\n  /** Render the title cell w/link - as own method to allow better debugging */\r\n  #titleCellRenderer(query: Query) {\r\n    const l = this.log.fnIf('titleCellRenderer', { query });\r\n    const url = this.#urlToOpenVisualQueryDesigner(query);\r\n    l.values({ url });\r\n    return `<a href=\"${url}\" target=\"_blank\" class=\"default-link\" style=\"display: block; width: 100%; height: 100%;\">\r\n              ${query.Name}\r\n            </a>`;\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.IdWithDefaultRenderer,\r\n          cellClass: (p: { data: Query }) => `id-action no-padding no-outline ${p.data._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' '),\r\n          cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<Query>(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Name',\r\n          sort: 'asc',\r\n          cellClass: (p: { data: Query }) => `${p.data._EditInfo.DisableEdit ? 'no-outline' : 'primary-action highlight'}`.split(' '),\r\n          cellRenderer: (p: { data: Query }) => this.#titleCellRenderer(p.data),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideFlex3,\r\n          field: 'Description',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight4,\r\n          cellRenderer: QueriesActionsComponent,\r\n          cellRendererParams: ({\r\n            getEnablePermissions: () => this.enablePermissions,\r\n            do: (action, query) => {\r\n              switch (action) {\r\n                case QueryActions.Clone: return this.cloneQuery(query);\r\n                case QueryActions.Export: return this.exportQuery(query);\r\n                case QueryActions.Delete: return this.deleteQuery(query);\r\n              }\r\n            },\r\n            urlTo: (action, query) => {\r\n              switch (action) {\r\n                case QueryActions.Edit: return this.#urlToEditOrNew(query);\r\n                case QueryActions.Metadata: return this.#urlToOpenMetadata(query);\r\n                case QueryActions.Rest: return this.#urlToRestApi(query);\r\n                case QueryActions.Permissions: return this.#urlToPermissions(query);\r\n              }\r\n            },\r\n          } satisfies QueriesActionsParams),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","<div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n  <ag-grid-angular\r\n    class=\"ag-theme-material\"\r\n    [rowData]=\"queries()()\"\r\n    [gridOptions]=\"gridOptions\"\r\n    appDragAndDrop\r\n    [allowedFileTypes]=\"'json'\"\r\n    (filesDropped)=\"importQuery($event)\"\r\n  >\r\n  </ag-grid-angular>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <a [href]=\"urlToImportQuery()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import query\" tippyPlacement=\"top\">\r\n      <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n      <span>Query</span>\r\n    </a>\r\n    <a [href]=\"urlToNewQuery()\" mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new query\" tippyPlacement=\"top\">\r\n      <mat-icon>add</mat-icon>\r\n    </a>\r\n  </mat-dialog-actions>\r\n</div>\r\n<router-outlet></router-outlet>\r\n","import { AriaDescriber, _IdGenerator, InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, ElementRef, Renderer2, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { MatCommonModule } from '@angular/material/core';\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber);\n    _renderer = inject(Renderer2);\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _idGenerator = inject(_IdGenerator);\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/badge/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    _color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    overlap = true;\n    /** Whether the badge is disabled. */\n    disabled;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position = 'above after';\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size = 'medium';\n    /** Whether the badge is hidden. */\n    hidden;\n    /** Visible badge element. */\n    _badgeElement;\n    /** Inline badge description. Used when the badge is applied to non-interactive host elements. */\n    _inlineBadgeDescription;\n    /** Whether the OnInit lifecycle hook has run yet */\n    _isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    _interactivityChecker = inject(InteractivityChecker);\n    _document = inject(DOCUMENT);\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_MatBadgeStyleLoader);\n        styleLoader.load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = this._elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === 'mat-icon' &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', this._idGenerator.getId('mat-badge-content-'));\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadge, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[5]}