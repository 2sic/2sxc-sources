{"version":3,"file":"projects_eav-ui_src_app_content-import_content-import_component_ts.01540e5900b3d09a.js","mappings":"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","names":["toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","toString","readAsText","ContentImportService","HttpServiceBase","evaluateContent","formValues","from","pipe","switchMap","fileBase64","requestData","AppId","this","appId","DefaultLanguage","defaultLanguage","ContentType","contentType","ContentBase64","ResourcesReferences","resourcesReferences","ClearEntities","clearEntities","http","post","apiUrl","webApiEntityRoot","map","Success","Errors","Detail","importContent","__ngFactoryType__","factory","ɵfac","i0","_r1","fileInput_r2","click","$event","ctx_r2","fileChange","closeDialog","name","evaluationResult","DocumentElementsCount","LanguagesInDocumentCount","AttributeNamesInDocument","length","join","AmountOfEntitiesCreated","AmountOfEntitiesUpdated","AmountOfEntitiesDeleted","AttributeNamesNotImported","error_r5","ErrorDetail","LineNumber","LineDetail","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_3_Template","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_4_Template","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_5_Template","errors","ErrorCode","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Template","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_0_Template","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_Template","_r4","back","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Template","ContentImportComponent_Conditional_10_Case_3_Conditional_0_Conditional_1_Template","ContentImportComponent_Conditional_10_Case_3_Conditional_0_Conditional_2_Template","importResult","ContentImportComponent_Conditional_10_Case_3_Conditional_0_Template","_r6","ContentImportComponent_Conditional_10_Case_0_Template","ContentImportComponent_Conditional_10_Case_1_Template","ContentImportComponent_Conditional_10_Case_2_Template","ContentImportComponent_Conditional_10_Case_3_Template","tmp_1_0","viewStateSelected","ContentImportComponent","constructor","dialogData","dialog","route","hostClass","contentImportService","transient","contentTypesService","ContentTypesService","dialogConfigSvc","DialogConfigAppService","viewStates","waiting","default","evaluated","imported","signal","contentTypeStaticName","snapshot","paramMap","get","ngOnInit","contentTypeTemp","retrieveContentType","dialogSettings$","getCurrent$","forkJoin","subscribe","dialogSettings","set","Context","Language","Primary","files","close","event","target","filesDropped","MAT_DIALOG_DATA","i1","i2","selectors","hostVars","hostBindings","rf","ctx","ContentImportComponent_Conditional_10_Template","Name","FormsModule","i3","MatButtonModule","i4","MatRadioModule","i5","MatDialogActions","DragAndDropDirective","styles","BaseDirective","subscriptions","Subscription","ngOnDestroy","unsubscribe","elementRef","zone","snackBar","super","markStyle","input","allowedFileTypes","output","dropAreaClass","markStyleClass","dragClass","timeouts","element","nativeElement","classList","add","runOutsideAngular","fromEvent","preventDefault","stopPropagation","clearTimeouts","push","window","setTimeout","remove","onDrop","Array","dataTransfer","filterTypes","emit","timeout","clearTimeout","allowedTypes","type","toLocaleLowerCase","filtered","filter","extIndex","lastIndexOf","ext","substring","includes","allowedTypesString","replace","open","duration","logSpecs","all","getAvailableEntities","getEntities","QueryService","context","log","classLog","getFromQuery","queryUrl","params","fields","entitiesFilter","fnIf","hasParams","urlParams","Guids","contentTypes","itemIds","webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","nameId","getHttpApiUrl","contentTypeId","getTypeSig","initial","getSignal","retrieveContentTypes","scope","getTypesSig","getScopes","scopesData","scopes","old","Object","keys","key","value","getScopesSig","scopesSignal","computed","getScopesV2","save","appid","delete","staticName","NameId","import","formData","FormData","append","zoneId","createGhost","sourceNameId","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","eventName","options","resultSelector","isFunction","undefined","mapOneOrManyArgs","isEventTarget","addEventListener","removeEventListener","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","Observable","subscriber","args","next","webApiEntityList","EntityService","queryService","getEntities$","p","contentTypeName","shareReplay","data","Default","entityId","force","parentId","parentField","parent","id"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/content-import/services/content-import.service.ts","./projects/eav-ui/src/app/content-import/content-import.component.html","./projects/eav-ui/src/app/content-import/content-import.component.ts","./projects/eav-ui/src/app/shared/directives/base.directive.ts","./projects/eav-ui/src/app/shared/directives/drag-and-drop.directive.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./projects/eav-ui/src/app/shared/services/entity.service.ts"],"sourcesContent":["export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { ContentImport, EvaluateContentResult, ImportContentRequest, ImportContentResult } from '../models/content-import.model';\r\nimport { webApiEntityRoot } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ContentImportService extends HttpServiceBase {\r\n\r\n  evaluateContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.appId,\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<EvaluateContentResult>(this.apiUrl(webApiEntityRoot + 'XmlPreview'), requestData).pipe(\r\n          map(result => {\r\n            if (!result.Success) {\r\n              result.Errors = result.Detail as any;\r\n              delete result.Detail;\r\n            }\r\n            return result;\r\n          }),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  importContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.appId,\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<ImportContentResult>(this.apiUrl(webApiEntityRoot + 'XmlUpload'), requestData);\r\n      })\r\n    );\r\n  }\r\n}\r\n","<div class=\"eav-dialog\" appDragAndDrop [allowedFileTypes]=\"'xml'\" (filesDropped)=\"filesDropped($event)\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ contentType()?.Name }} Import Data</div>\r\n  </div>\r\n  <div class=\"eav-dialog-description\">\r\n    <p>\r\n      This will import content-items into 2sxc. It requires that you already defined the content-type before you try\r\n      importing, and that you created the import-file using the template provided by the Export. Please visit\r\n      <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n    </p>\r\n  </div>\r\n  @if (formValues != null) {\r\n  @switch (viewStateSelected()) {\r\n  <!-- FORM -->\r\n  @case (1) {\r\n  <form #ngForm=\"ngForm\">\r\n    <div class=\"eav-dialog-content\">\r\n      <div>\r\n        <button mat-raised-button tippy=\"Open file browser\" (click)=\"fileInput.click()\">\r\n          <span>{{ formValues.file ? formValues.file.name : 'Select or drop file' }}</span>\r\n        </button>\r\n        <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n      </div>\r\n      <div>\r\n        <p class=\"eav-radio-group-label\">References to pages / files</p>\r\n        <mat-radio-group class=\"eav-radio-group\" [(ngModel)]=\"formValues.resourcesReferences\"\r\n          name=\"ResourcesReferences\">\r\n          <mat-radio-button value=\"Keep\">\r\n            Import links as written in the file (for example /Portals/...)\r\n          </mat-radio-button>\r\n          <mat-radio-button value=\"Resolve\">\r\n            Try to resolve paths to references\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n      <div>\r\n        <p class=\"eav-radio-group-label\">Clear all other entities</p>\r\n        <mat-radio-group class=\"eav-radio-group\" [(ngModel)]=\"formValues.clearEntities\" name=\"ClearEntities\">\r\n          <mat-radio-button value=\"None\">\r\n            Keep all entities not found in import\r\n          </mat-radio-button>\r\n          <mat-radio-button value=\"All\">\r\n            Remove all entities not found in import\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n      <p class=\"eav-hint\">Remember to backup your DNN first!</p>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!formValues.file || !formValues.file.name\"\r\n        (click)=\"evaluateContent()\">\r\n        Preview Import\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </form>\r\n  }\r\n  <!-- END FORM -->\r\n  <!-- WAITING -->\r\n  @case (0) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p>Please wait while processing...</p>\r\n  </div>\r\n  }\r\n  <!-- END WAITING -->\r\n  <!-- EVALUATION RESULT -->\r\n  @case (2) {\r\n  @if (evaluationResult()) {\r\n  <!-- DETAILS / STATISTICS -->\r\n  @if (evaluationResult().Success) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p class=\"eav-evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n    <p class=\"eav-evaluation__title\">File contains:</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      <li>{{ evaluationResult().Detail.DocumentElementsCount }} content-items (records/entities)</li>\r\n      <li>{{ evaluationResult().Detail.LanguagesInDocumentCount }} languages</li>\r\n      <li>{{ evaluationResult().Detail.AttributeNamesInDocument.length }} columns:\r\n        {{ evaluationResult().Detail.AttributeNamesInDocument.join(', ') }}</li>\r\n    </ul>\r\n    <p class=\"eav-evaluation__title\">If you press Import, it will:</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      <li>Create {{ evaluationResult().Detail.AmountOfEntitiesCreated }} content-items</li>\r\n      <li>Update {{ evaluationResult().Detail.AmountOfEntitiesUpdated }} content-items</li>\r\n      <li>Delete {{ evaluationResult().Detail.AmountOfEntitiesDeleted }} content-items</li>\r\n      <li>Ignore {{ evaluationResult().Detail.AttributeNamesNotImported.length }} columns:\r\n        {{ evaluationResult().Detail.AttributeNamesNotImported.join(', ') }}</li>\r\n    </ul>\r\n    <p class=\"eav-hint\">Note: The import validates much data and may take several minutes.</p>\r\n  </div>\r\n  }\r\n  <!-- END DETAILS / STATISTICS -->\r\n  <!-- ERRORS -->\r\n  @if (!evaluationResult().Success) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p class=\"eav-evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      @for (error of evaluationResult().Errors; track error) {\r\n      <li>\r\n        <div>{{ errors[error.ErrorCode] }}</div>\r\n        @if (error.ErrorDetail) {\r\n        <div><i>Details: {{ error.ErrorDetail }}</i></div>\r\n        }\r\n        @if (error.LineNumber) {\r\n        <div><i>Line-no: {{ error.LineNumber }}</i></div>\r\n        }\r\n        @if (error.LineDetail) {\r\n        <div><i>Line-details: {{ error.LineDetail }}</i></div>\r\n        }\r\n      </li>\r\n      }\r\n    </ul>\r\n  </div>\r\n  }\r\n  <!-- END ERRORS -->\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button (click)=\"back()\">Back</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!evaluationResult().Success\" (click)=\"importContent()\">\r\n      Import\r\n    </button>\r\n  </mat-dialog-actions>\r\n  }\r\n  }\r\n  <!-- END EVALUATION RESULT -->\r\n  <!-- IMPORT RESULT -->\r\n  @case (3) {\r\n  @if (importResult()) {\r\n  <div class=\"eav-dialog-content\">\r\n    @if (importResult().Success) {\r\n    <p>Import done.</p>\r\n    }\r\n    @if (!importResult().Success) {\r\n    <p>Import failed.</p>\r\n    }\r\n  </div>\r\n  }\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n  </mat-dialog-actions>\r\n  }\r\n  <!-- END IMPORT RESULT -->\r\n  }\r\n  }\r\n</div>\r\n","import { Component, HostBinding, Inject, OnInit, signal } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MAT_DIALOG_DATA, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { forkJoin } from 'rxjs';\r\nimport { transient } from '../../../../core';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { DialogConfigAppService } from '../app-administration/services/dialog-config-app.service';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { ContentImportDialogData } from './content-import-dialog.config';\r\nimport { ContentImport, EvaluateContentResult, ImportContentResult } from './models/content-import.model';\r\nimport { ContentImportService } from './services/content-import.service';\r\n\r\n@Component({\r\n    selector: 'app-content-import',\r\n    templateUrl: './content-import.component.html',\r\n    styleUrls: ['./content-import.component.scss'],\r\n    imports: [\r\n        FormsModule,\r\n        MatButtonModule,\r\n        MatRadioModule,\r\n        MatDialogActions,\r\n        DragAndDropDirective,\r\n    ]\r\n})\r\nexport class ContentImportComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private contentImportService = transient(ContentImportService);\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private dialogConfigSvc = transient(DialogConfigAppService);\r\n\r\n  formValues: ContentImport;\r\n\r\n  private viewStates = {\r\n    waiting: 0,\r\n    default: 1,\r\n    evaluated: 2,\r\n    imported: 3,\r\n  };\r\n\r\n  contentType = signal<ContentType>(null);\r\n  viewStateSelected = signal(this.viewStates.default);\r\n  evaluationResult = signal<EvaluateContentResult>(null);\r\n  importResult = signal<ImportContentResult>(null);\r\n\r\n  errors: Record<number, string> = {\r\n    0: 'Unknown error occured.',\r\n    1: 'Selected content-type does not exist.',\r\n    2: 'Document is not a valid XML file.',\r\n    3: 'Selected content-type does not match the content-type in the XML file.',\r\n    4: 'The language is not supported.',\r\n    5: 'The document does not specify all languages for all entities.',\r\n    6: 'Language reference cannot be parsed, the language is not supported.',\r\n    7: 'Language reference cannot be parsed, the read-write protection is not supported.',\r\n    8: 'Value cannot be read, because of it has an invalid format.'\r\n  };\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ContentImportDialogData,\r\n    private dialog: MatDialogRef<ContentImportComponent>,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const contentTypeTemp = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.dialogConfigSvc.getCurrent$();\r\n    forkJoin([contentTypeTemp, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType.set(contentType);\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentType: this.contentTypeStaticName,\r\n        file: this.dialogData.files != null ? this.dialogData.files[0] : null,\r\n        resourcesReferences: 'Keep',\r\n        clearEntities: 'None',\r\n      };\r\n    });\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  evaluateContent() {\r\n    this.viewStateSelected.set(this.viewStates.waiting);\r\n    this.contentImportService.evaluateContent(this.formValues).subscribe(result => {\r\n      this.evaluationResult.set(result);\r\n      this.viewStateSelected.set(this.viewStates.evaluated);\r\n    });\r\n  }\r\n\r\n  importContent() {\r\n    this.viewStateSelected.set(this.viewStates.waiting);\r\n    this.contentImportService.importContent(this.formValues).subscribe(result => {\r\n      this.importResult.set(result);\r\n      this.viewStateSelected.set(this.viewStates.imported);\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.viewStateSelected.set(this.viewStates.default);\r\n    this.evaluationResult.set(null);\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    this.formValues.file = (event.target as HTMLInputElement).files[0];\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.formValues.file = importFile;\r\n  }\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive()\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseDirective implements OnDestroy {\r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { Directive, ElementRef, HostListener, input, NgZone, OnDestroy, OnInit, output, signal } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent } from 'rxjs';\r\nimport { BaseDirective } from './base.directive';\r\n\r\n@Directive({\r\n  selector: '[appDragAndDrop]',\r\n})\r\nexport class DragAndDropDirective extends BaseDirective implements OnInit, OnDestroy {\r\n  markStyle = input<'outline' | 'fill' | 'shadow'>('outline');\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  allowedFileTypes = input<string>('');\r\n  protected filesDropped = output<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass = signal<string>('');\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    super();\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass.set(`eav-droparea-${this.markStyle()}`);\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass());\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscriptions.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscriptions.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass(), this.dragClass);\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes());\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes().replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  getTypeSig(nameId: string, initial: ContentType): Signal<ContentType> {\r\n    return this.getSignal<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }, initial);\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.getHttpApiUrl<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  getTypesSig(scope: string, initial: ContentType[]): Signal<ContentType[]> {\r\n    return this.getSignal<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  // todo: switch to using the GetSignal with `map` parameter similar to the initial version above\r\n  getScopesSig(initial: undefined): Signal<ScopeOption[]> {\r\n    const scopesSignal = this.getSignal<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(\r\n      webApiTypeScopes,\r\n      { params: { appId: this.appId } }, initial,\r\n    );\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      const scopesData = scopesSignal();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"x_google_ignoreList":[8]}