{"version":3,"file":"default-projects_eav-ui_src_app_shared_fields_content-types-fields_service_ts.7906924b0749605b.js","mappings":"6NAUO,IAAMA,EAAiB,MAAxB,MAAOA,UAAyBC,IAEpCC,WAAWC,GACT,OAAOC,KAAKC,UARiB,uBAQ2B,CACtDC,OAAQ,CAAEC,MAAOH,KAAKI,MAAOC,OAAQL,KAAKK,SACzCN,EACL,CAGAO,eACE,MAAO,GAAGN,KAAKO,OAAO,GAAGC,sBAAgCR,KAAKI,gBAAgBJ,KAAKK,QACrF,CAEAI,yBAA0BC,uBAAsBC,eAAcC,cAG5D,OAAOZ,KAAKa,cApBe,qBAoB+B,CACxDX,OAAQ,CACNC,MAAOH,KAAKI,MACZC,OAAQL,KAAKK,OACbK,qBAAsBA,EAAqBI,WAC3CH,aAAcA,EAAaG,WAC3BC,gBAAiBH,EAAUE,aAGjC,yEAzBWlB,KAAgBoB,GAAhBpB,EAAgB,0CAAhBA,EAAgBqB,QAAhBrB,EAAgBsB,WAAA,SAAhBtB,CAAiB,oBCVxB,SAAUuB,EAASC,GACvB,OAAO,IAAIC,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcN,GACrBI,EAAOG,OAAS,KACdL,EAASE,EAAOI,OAAkBC,MAAM,KAAK,GAAE,EAEjDL,EAAOM,QAAUC,IACfR,EAAOQ,EAAK,CACd,EAEJ,CAEM,SAAUjB,EAASM,GACvB,OAAO,IAAIC,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOQ,WAAWZ,GAClBI,EAAOG,OAAS,KACdL,EAAQE,EAAOI,OAAgB,EAEjCJ,EAAOM,QAAUC,IACfR,EAAOQ,EAAK,CACd,EAEJ,6FCjBO,IAAME,EAAsB,MAA7B,MAAOA,UAA8BpC,IAEzCqC,eAAeC,EAAepC,GAC5B,OAAOC,KAAKC,UALU,qBAKgC,CACpDC,OAAQ,CAAEC,MAAOH,KAAKI,MAAOC,OAAQL,KAAKK,OAAQ8B,UACjDpC,EACL,CAEAqC,YAAYC,EAA0BC,EAAqBC,GACzD,MAAMC,EAAMxC,KAAKO,OAAOkC,IAAqB,UACzC,UAAYzC,KAAKI,MACjB,WAAaJ,KAAKK,OAClB,yBAA2BgC,EAAeK,KAAK,KAC/C,oBAAsBJ,EAAUI,KAAK,KACrC,sBAAwBH,EAAYG,KAAK,KAE7CC,OAAOC,KAAKJ,EAAK,SAAU,GAC7B,yEAjBWP,KAAqBjB,GAArBiB,EAAqB,0CAArBA,EAAqBhB,QAArBgB,EAAqBf,WAAA,SAArBe,CAAsB,sCCP5B,MAAMY,EAAkB,CAC7BC,QAAS,UACTC,OAAQ,SACRC,SAAU,WACVC,MAAO,QACPC,OAAQ,SACRC,UAAW,YACXC,OAAQ,SACRC,OAAQ,yGCHH,MAAM7C,EAAgB,aAGtB,IAAM8C,EAAiB,MAAxB,MAAOA,UAAyBzD,IAEpC0D,UAAUnC,EAAYoC,EAAqBC,GAAmB,GAC5D,MAAMC,EAAW,IAAIC,SACrBD,SAASE,OAAO,OAAQxC,GACxBsC,EAASE,OAAO,OAAQJ,GAAe,IAChCxD,KAAK6D,KAAKC,KAAuB9D,KAAKO,OAAOC,EAAgB,UAAWkD,EAAU,CACvFxD,OAAQ,CAAEG,OAAQL,KAAKK,UACtB0D,QACDC,KAAUpC,IACR,GAAI6B,GAAoB7B,EAAOqC,SAAS,IAAIC,cAAgBC,KAAuBC,QAAS,CAC1F,MAAMC,EAAaC,OAAO1C,EAAOqC,SAAS,GAAGM,KAAO,4DACpD,GAAIF,EACF,OAAOrE,KAAKuD,UAAUnC,EAAMiD,GAAY,EAE5C,CACA,SAAOG,MAAG5C,EAAM,GAGtB,yEAnBW0B,KAAgBtC,GAAhBsC,EAAgB,0CAAhBA,EAAgBrC,QAAhBqC,EAAgBpC,WAAA,SAAhBoC,CAAiB,8DCQvB,IAAMmB,EAAa,MAApB,MAAOA,UAAqB5E,IAEhC6E,SACE,OAAO1E,KAAKC,UAZI,iBAY2B,CACzCC,OAAQ,CAAEE,MAAOJ,KAAKI,QAE1B,CAEAuE,OAAOC,GACL,OAAO5E,KAAKa,cAjBS,oBAiBgC,CACnDX,OAAQ,CAAEE,MAAOJ,KAAKI,MAAOyE,GAAID,EAAG9D,aAExC,CAEAgE,OAAO1D,GACL,MAAMsC,EAAW,IAAIC,SACrBD,SAASE,OAAO,OAAQxC,GACjBpB,KAAK6D,KAAKC,KAAuB9D,KAAKO,OAxBxB,qBAwBkDmD,EAAU,CAC/ExD,OAAQ,CAAEE,MAAOJ,KAAKI,MAAOC,OAAQL,KAAKK,SAE9C,CAEA0E,OAAOH,GACL,MAAMpC,EAAMxC,KAAKO,OA3BF,mBA4BX,UAAYP,KAAKI,MACjB,WAAawE,EACjBjC,OAAOC,KAAKJ,EAAK,SAAU,GAC7B,CAEAwC,kBACE,OAAOhF,KAAKC,UApCY,0BAoCiC,CACvDC,OAAQ,CAAEE,MAAOJ,KAAKI,QAE1B,CAEA6E,SAASC,GACP,OAAOlF,KAAKC,UAzCQ,mBAyCgC,CAClDC,OAAQ,CAAEE,MAAOJ,KAAKI,MAAO8E,SAEjC,yEAvCWT,KAAYzD,GAAZyD,EAAY,0CAAZA,EAAYxD,QAAZwD,EAAYvD,WAAA,SAAZuD,CAAa,4DCdpB,SAAUU,EAAkBC,GAWhC,MAV4C,CAC1C,CAACvC,IAAgBC,SAAU,YAC3B,CAACD,IAAgBE,QAAS,YAC1B,CAACF,IAAgBG,UAAW,QAC5B,CAACH,IAAgBI,OAAQ,YACzB,CAACJ,IAAgBK,QAAS,QAC1B,CAACL,IAAgBM,WAAY,OAC7B,CAACN,IAAgBO,QAAS,UAC1B,CAACP,IAAgBQ,QAAS,eAET+B,IAAa,gBAClC,CAEM,SAAUC,EAAmBD,GAWjC,MAV6C,CAC3C,CAACvC,IAAgBC,SAAU,mBAC3B,CAACD,IAAgBE,QAAS,oCAC1B,CAACF,IAAgBG,UAAW,mBAC5B,CAACH,IAAgBI,OAAQ,+BACzB,CAACJ,IAAgBK,QAAS,+BAC1B,CAACL,IAAgBM,WAAY,wBAC7B,CAACN,IAAgBO,QAAS,SAC1B,CAACP,IAAgBQ,QAAS,iBAER+B,IAAa,gBACnC,+ECrBA,MAAME,EAAW,CACfC,KAAK,EACLC,sBAAsB,EACtBC,aAAa,GAIR,IAAMC,EAAY,MAAnB,MAAOA,EAIXC,YAAoB9B,EAA0B+B,GAA1B5F,KAAA6D,OAA0B7D,KAAA4F,UAF9C5F,KAAA6F,OAAMC,MAAS,CAACJ,gBAAeJ,EAEmC,CAElES,aAAaC,EAAkB9F,EAAgB+F,EAAgBC,GAC7DlG,KAAK6F,IAAIM,KAAK,uBAAwB,CAAEH,WAAU9F,SAAQ+F,SAAQC,mBAElE,MAAME,IAAclG,EAQdmG,KAPcnG,GAAQoG,qBAAuB,IACtBC,SAAS,UAEtB,GAAK,UAAUvG,KAAK4F,QAAQxF,UACvCgG,EAAY,IAAIlG,IAAW,IAC5B,aAAe+F,GAAU,KAEDO,UAAU,GACtC,OAAOxG,KAAK6D,KAAKC,KAAmB,kBAAkBkC,KAAYK,IAChE,CACEI,MAAOP,GAGb,CAEAT,aAAciB,eAAcC,UAASV,SAAQJ,QAC3C7F,KAAK6F,IAAIM,KAAK,cAAe,CAAEN,MAAKa,eAAcC,UAASV,WAO3D,MAAMI,GALJ,eAAiBK,GAAchE,KAAK,MAAQ,IAC1C,UAAU1C,KAAK4F,QAAQxF,kBACRuG,GAASjE,KAAK,MAAQ,IACrC,aAAeuD,GAAU,KAEDO,UAAU,GACtC,OAAOxG,KAAK6D,KAAKC,KACf,8CAA8CuC,IAC9C,GAEJ,iDAtCWX,GAAYkB,MAAAC,MAAAD,MAAAE,KAAA,sCAAZpB,EAAYzE,QAAZyE,EAAYxE,WAAA,SAAZwE,CAAY,kYCJzB,MAAMJ,EAAW,CACfC,KAAK,EACLb,QAAQ,EACRqC,WAAW,EACXC,WAAW,EACXC,aAAa,EACbC,eAAe,EACfvC,QAAQ,EACRwC,QAAQ,GAMGC,EAAiB,kBACjBC,EAAyB,0BACzBC,EAAkB,mBAClBC,EAAiB,kBACjBC,EAAyB,0BAG/B,IAAMC,EAAiB,MAAxB,MAAOA,UAAyB5H,IADtC8F,kCAGE3F,KAAA6F,OAAMC,MAAS,CAAE2B,oBAAoBnC,GAErCZ,OAAOgD,GAEL,OADU1H,KAAK6F,IAAIM,KAAK,UACfwB,EAAE3H,KAAKa,cAAuB+G,KAAkB,CACvD1H,OAAQ,CAAEE,MAAOJ,KAAKI,MAAOsH,iBAEjC,CAEAX,UAAUW,EAAqB3H,GAC7B,MAAM8H,EAAI7H,KAAK6F,IAAIM,KAAK,aAClB2B,EAAO9H,KAAKC,UAAmB2H,KAAkB,CACrD1H,OAAQ,CAAEE,MAAOJ,KAAKI,MAAOsH,gBAC5B3H,GACH,OAAO8H,EAAEF,EAAEG,EACb,CAGAd,UAAUU,EAAqB3H,GAC7B,MAAM8H,EAAI7H,KAAK6F,IAAIM,KAAK,aAClB4B,KAAMC,MAAsB,MAChCxF,IAAKoF,KACL1H,OAAQ,CAAEE,MAAOJ,KAAKI,MAAOsH,iBAC3B,CAAEO,aAAclI,IACpB,OAAO8H,EAAEF,EAAEI,EACb,CAEAd,YAAY7F,GACV,MAAMyG,EAAI7H,KAAK6F,IAAIM,KAAK,eAClB+B,KAAMC,QAAKhH,KAASC,IAAO2C,QAC/BC,KAAUoE,GACDpI,KAAK6D,KAAKC,KAAc9D,KAAKO,OA3ClB,sBA2C6C,CAC7D8H,MAAOrI,KAAKI,MACZkI,cAAeF,MAElB,EACDG,KAAIC,KAEAC,QAASD,EACTvE,SAAU,OAKhB,OAAO4D,EAAEF,EAAEO,EACb,CAEAhB,cAActC,GACZ,MAAMiD,EAAI7H,KAAK6F,IAAIM,KAAK,iBAClB+B,EAAMlI,KAAKa,cA5DI,oBA4DkC,CACrDX,OAAQ,CAAE2E,GAAID,EAAG9D,WAAYV,MAAOJ,KAAKI,SAE3C,OAAOyH,EAAEF,EAAEO,EACb,CAEAvD,OAAOC,GACL,MAAMiD,EAAI7H,KAAK6F,IAAIM,KAAK,UAClB+B,EAAMlI,KAAK6D,KAAKc,OAAgB3E,KAAKO,OAnErB,sBAmEgD,CACpEL,OAAQ,CAAEE,MAAOJ,KAAKI,MAAOyE,GAAID,EAAG9D,cAEtC,OAAO+G,EAAEF,EAAEO,EACb,yEA/DWT,KAAgBzG,GAAhByG,EAAgB,0CAAhBA,EAAgBxG,QAAhBwG,EAAgBvG,WAAA,SAAhBuG,CAAiB,+ECtBvB,MAAMiB,EAAiB,cACxBC,EAAgB,iBAChBC,EAAc,kBACdC,EAAmB,oBAOlB,IAAMC,EAAoB,MAA3B,MAAOA,UAA4BjJ,IAEvCkJ,oBAAoBC,GAClB,OAAOhJ,KAAKa,cAA2B8H,EAAe,CACpDzI,OAAQ,CAAEE,MAAOJ,KAAKI,MAAO6I,cAAeD,IAEhD,CAEAE,WAAWF,EAAgBjJ,GACzB,OAAOC,KAAKC,UAAuB0I,EAAe,CAChDzI,OAAQ,CAAEE,MAAOJ,KAAKI,MAAO6I,cAAeD,IAC3CjJ,EACL,CAEAoJ,qBAAqBhH,GACnB,OAAOnC,KAAKa,cAA6B+H,EAAa,CACpD1I,OAAQ,CAAEE,MAAOJ,KAAKI,MAAO+B,UAEjC,CAEAiH,YAAYjH,EAAepC,GACzB,OAAOC,KAAKC,UAAyB2I,EAAa,CAChD1I,OAAQ,CAAEE,MAAOJ,KAAKI,MAAO+B,UAC5BpC,EACL,CAGAsJ,YACE,OAAOrJ,KAAKa,cAA0EgI,EAAkB,CACtG3I,OAAQ,CAAEE,MAAOJ,KAAKI,SACrB2D,QACDwE,KAAIe,IAEF,MAAMC,EAASD,EAAWE,IAE1B,OADoCC,OAAOC,KAAKH,GAAQhB,IAAIoB,KAAUC,KAAML,EAAOI,GAAME,MAAOF,IAAM,GAI5G,CAGAG,aAAa/J,GACX,MAAMgK,EAAe/J,KAAKC,UACxB4I,EACA,CAAE3I,OAAQ,CAAEE,MAAOJ,KAAKI,QAAWL,GAerC,SAZ2BiK,OAAS,KAClC,MAAMV,EAAaS,IAGnB,IAAKT,IAAeA,EAAWE,IAC7B,MAAO,GAGT,MAAMD,EAASD,EAAWE,IAC1B,OAAOC,OAAOC,KAAKH,GAAQhB,IAAIoB,KAAUC,KAAML,EAAOI,GAAME,MAAOF,IAAM,EAI7E,CAEAM,cACE,OAAOjK,KAAKa,cAA0EgI,EAAkB,CACtG3I,OAAQ,CAAEE,MAAOJ,KAAKI,SACrB2D,QACDwE,KAAIe,GAAcA,EAAWC,QAEjC,CAEAW,KAAKxC,GACH,OAAO1H,KAAK6D,KAAKC,KAAc9D,KAAKO,OA7EjB,mBA6EyCmH,EAAa,CACvExH,OAAQ,CAAEC,MAAOH,KAAKI,QAE1B,CAEAuE,OAAO+C,GACL,OAAO1H,KAAK6D,KAAKc,OAAgB3E,KAAKO,OAlFjB,qBAkF2C,CAC9DL,OAAQ,CAAEC,MAAOH,KAAKI,MAAO+J,WAAYzC,EAAY0C,SAEzD,CAEAtF,OAAOuF,GACL,MAAM3G,EAAW,IAAIC,SACrB,UAAWvC,KAAQiJ,EACjB3G,EAASE,OAAO,OAAQxC,GAE1B,OAAOpB,KAAK6D,KAAKC,KAAuB9D,KAAKO,OA3FxB,qBA2FkDmD,EAAU,CAC/ExD,OAAQ,CAAEE,MAAOJ,KAAKI,MAAOC,OAAQL,KAAKK,SAE9C,CAEAiK,YAAYC,GACV,OAAOvK,KAAK6D,KAAKC,KAAc9D,KAAKO,OAhGb,uBAgGyC,KAAM,CACpEL,OAAQ,CAAEC,MAAOH,KAAKI,MAAOmK,iBAEjC,yEAhGWzB,KAAmB9H,GAAnB8H,EAAmB,0CAAnBA,EAAmB7H,QAAnB6H,EAAmB5H,WAAA,SAAnB4H,CAAoB,gFCd1B,MAAMrG,EAAqB,kBAG3B,IAAM+H,EAAsB,MAA7B,MAAOA,UAA8B3K,IAEzC4K,eAAerJ,GACb,MAAMsC,EAAW,IAAIC,SACrBD,SAASE,OAAO,OAAQxC,GACjBpB,KAAK6D,KAAKC,KAAuB9D,KAAKO,OAAOkC,EAAqB,UAAWiB,EAAU,CAC5FxD,OAAQ,CAAEE,MAAOJ,KAAKI,MAAOC,OAAQL,KAAKK,SAE9C,CAGAqK,SAAS9J,GACP,OAAOZ,KAAK6D,KAAKC,KAAuB9D,KAAKO,OAAOC,IAAgB,SAAU,GAAI,CAChFN,OAAQ,CACNE,MAAOJ,KAAKI,MACZC,OAAQL,KAAKK,OACbU,gBAAiBH,EAAUE,aAGjC,yEAnBW0J,KAAqBxJ,GAArBwJ,EAAqB,0CAArBA,EAAqBvJ,QAArBuJ,EAAqBtJ,WAAA,SAArBsJ,CAAsB,yFCLnC,MAAMG,EAAyE,CAC7E7H,QAAS,CAAE8H,SAAOvF,KAAmBxC,IAAgBC,SAAU+H,YAAa,+BAC5E9H,OAAQ,CAAE6H,SAAOvF,KAAmBxC,IAAgBE,QAAS8H,YAAa,iLAC1E7H,SAAU,CAAE4H,SAAOvF,KAAmBxC,IAAgBG,UAAW6H,YAAa,qCAC9E5H,MAAO,CAAE2H,SAAOvF,KAAmBxC,IAAgBI,OAAQ4H,YAAa,8BACxE3H,OAAQ,CAAE0H,SAAOvF,KAAmBxC,IAAgBK,QAAS2H,YAAa,mCAC1E1H,UAAW,CAAEyH,SAAOvF,KAAmBxC,IAAgBM,WAAY0H,YAAa,8CAChFzH,OAAQ,CAAEwH,SAAOvF,KAAmBxC,IAAgBO,QAASyH,YAAa,sBAC1ExH,OAAQ,CAAEuH,SAAOvF,KAAmBxC,IAAgBQ,QAASwH,YAAa,6CCArE,MAAMC,EAAkB,kBAIzBC,EAAsB,4BAOtBC,EAAiBtC,KAAiB,WAIlCuC,EAAwB,8BAMvB,IAAMC,EAA0B,MAAjC,MAAOA,UAAkCrL,IAEnCsL,YAAYC,EAA6F,IACjH,MAAO,CACLlL,OAAQ,CACNC,MAAOH,KAAKI,SACTgL,GAGT,CAGAC,YACE,OAAOrL,KAAKC,UA/BQ,wBA+ByCD,KAAKmL,cAAe,GAAIG,GDxBnF,SAAUC,EAAmBC,GACjC,MAAMH,EAAwB,GAC9B,UAAWI,KAAeD,EACxBH,EAAUK,KAAK,CACb9B,KAAM6B,EACNb,MAAOD,EAAec,GAAab,MACnCe,QAAMxG,KAAkBsG,GACxBZ,YAAaF,EAAec,GAAaZ,cAG7C,OAAOQ,CACT,CCagGE,CAAmBD,GACjH,CAEAM,gBACE,OAAO5L,KAAKC,UAhCS,yBAkCnBD,KAAKmL,cACL,GACAU,GAAgBA,EACbtD,IAAIuD,KACHC,SAAUD,EAAOE,KAAKxF,UAAU,EAAGsF,EAAOE,KAAKC,QAAQ,MACvDC,UAAWJ,EAAOE,KAClBpB,MAAOkB,EAAOK,MACdtB,YAAaiB,EAAOM,YACpBC,UAAWP,EAAOQ,UAClBC,WAAYT,EAAOU,WACnBC,cAAeX,EAAOY,cACtBC,gBAAiBb,EAAOc,gBACxBjB,KAAMG,EAAOQ,UAAY,QAAUR,EAAOY,cAAgB,OAAS,KACnEG,MAAOf,EAAOU,WAAa,IAAMV,EAAOQ,UAAY,IAAMR,EAAOY,cAAgB,IAAM,KAAOZ,EAAOK,SAExGU,KAAK,CAACC,EAAGC,IAAMD,EAAED,KAAKG,cAAcD,EAAEF,OAE3C,CAEAI,mBACE,OAAOjN,KAAKa,cAAsCkK,EACpD,CAEAmC,gBACE,OAAOlN,KAAKC,UAAkC8K,EAAqB,KAAM,GAC3E,CAGAoC,UAAUC,GACR,OAAOpN,KAAKa,cAAuBiK,EAAiB9K,KAAKmL,YAAY,CAAEhB,WAAYiD,KAChFrJ,QACCwE,KAAItC,IACF,GAAIA,EACF,UAAWoH,KAAOpH,EAAQ,CACxB,IAAKoH,EAAIC,SAAU,SACnB,MAAMC,EAAKF,EAAIC,SAIfC,EAAGC,OAAS,IAHED,EAAGE,OACFF,EAAGF,EAAIrB,SACNuB,EAAGF,EAAIK,WAEzB,CAEF,OAAOzH,IAGf,CAEA0H,aAAaP,GACX,OAAOpN,KAAKC,UAAmB6K,EAAiB9K,KAAKmL,YAAY,CAAEhB,WAAYiD,IAA0B,GAAInH,IAC3G,GAAIA,EACF,UAAWoH,KAAOpH,EAAQ,CACxB,IAAKoH,EAAIC,SAAU,SACnB,MAAMC,EAAKF,EAAIC,SAIfC,EAAGC,OAAS,IAHED,EAAGE,OACFF,EAAGF,EAAIrB,SACNuB,EAAGF,EAAIK,WAEzB,CAEF,OAAOzH,GAEX,CAGA2H,qBACE,OAAO5N,KAAKa,cAAuBoK,EAAuBjL,KAAKmL,cACjE,CAOA0C,sBAAsBC,GACpB,OAAO9N,MAAK+N,EAAc9C,EAAuB6C,EAEnD,CAEAE,aAAaF,GACX,OAAO9N,MAAK+N,EAvGW,2BAuGuBD,EAChD,CAEAG,eAAeH,GACb,OAAO9N,MAAK+N,EA1Ga,6BA0GuBD,EAClD,CAEAC,GAAcG,EAAkBJ,GAC9B,OAAO9N,KAAKa,cAAuBqN,EAAUlO,KAAKmL,YAAY,CAAE2C,gBAClE,CAEAK,kBAAkBC,EAA6BC,EAAoBC,EAAoC1E,GACrG,OAAO5J,KAAK6D,KAAKC,KAAa9D,KAAKO,OA9HP,iCA8HwC,KAAMP,KAAKmL,YAAY,CACzFlC,cAAemF,EAAoBtN,WACnCuN,aACAE,YAAaD,EACb1E,SAEJ,CAEA4E,MAAMV,EAAqBU,GAAiB,GAC1C,OAAOxO,KAAK6D,KAAKC,KAAW9D,KAAKO,OApIjB,qBAoIsC,KAAM,CAC1DL,OAAQ,CACNC,MAAOH,KAAKI,MACZ0N,YAAaA,EAAYhN,WACzB0N,UAGN,CAEAC,QAAQX,EAAqBQ,GAC3B,OAAOtO,KAAK6D,KAAKC,KAAW9D,KAAKO,OA7If,uBA6IsC,KAAM,CAC5DL,OAAQ,CACNC,MAAOH,KAAKI,MACZ0N,YAAaA,EAAYhN,WACzB4N,kBAAmBJ,IAGzB,CAEAK,QAAQC,EAAmBlH,GACzB,OAAO1H,KAAK6D,KAAKC,KAAc9D,KAAKO,OAtJrB,oBAsJyC,KAAM,CAC5DL,OAAQ,CACNC,MAAOH,KAAKI,MACZ6I,cAAevB,EAAY7C,GAAG/D,WAC9B+N,MAAOC,KAAKC,UAAUH,KAG5B,CAEAI,SAASC,EAAavH,GACpB,OAAO1H,KAAK6D,KAAKC,KAAW9D,KAAKO,OAAOyK,GAAiB,KAAM,CAC7D9K,OAAQ,CACNC,MAAOH,KAAKI,MACZ6I,cAAevB,EAAY7C,GAAG/D,WAC9BgN,YAAamB,EAAKpK,GAAG/D,aAG3B,CAEAoO,OAAOC,EAAiBlG,EAAuBmG,GAC7C,OAAOpP,KAAK6D,KAAKC,KAAW9D,KAAKO,OAxKhB,sBAwKsC,KAAM,CAC3DL,OAAQ,CACNC,MAAOH,KAAKI,MACZ6I,cAAeA,EAAcnI,WAC7BgN,YAAaqB,EAAQrO,WACrBsO,YAGN,CAEAzK,OAAOsK,EAAavH,GAClB,GAAIuH,EAAKI,QACP,MAAM,IAAIC,MAAM,sBAElB,OAAOtP,KAAK6D,KAAKc,OAAgB3E,KAAKO,OArLrB,sBAqL2C,CAC1DL,OAAQ,CACNC,MAAOH,KAAKI,MACZ6I,cAAevB,EAAY7C,GAAG/D,WAC9BgN,YAAamB,EAAKpK,GAAG/D,aAG3B,CAEAyO,IAAIC,EAA0BvG,GAC5B,OAAOjJ,KAAK6D,KAAKC,KAAa9D,KAAKO,OA9LrB,mBA8LwC,KAAM,CAC1DL,OAAQ,CACNmI,MAAOrI,KAAKI,MACZqP,cAAexG,EAAcnI,WAC7B+D,GAAI2K,EAAS3K,GAAG/D,WAChBkL,KAAMwD,EAASxD,KACf0B,UAAW8B,EAAS9B,UACpBgC,WAAYF,EAASE,WACrBL,QAASG,EAASH,QAAQvO,WAC1B6O,MAAOH,EAASI,UAAU9O,aAGhC,CAEA+O,gBAAgB/B,EAAqBgC,EAAe5D,GAClD,OAAOlM,KAAK6D,KAAKC,KAAc9D,KAAKO,OApNhB,yBAoNyC,KAAM,CACjEL,OAAQ,CAAEE,MAAOJ,KAAKI,MAAO0N,cAAagC,QAAO5D,cAErD,yEAzMWhB,KAAyBlK,GAAzBkK,EAAyB,0CAAzBA,EAAyBjK,QAAzBiK,EAAyBhK,WAAA,SAAzBgK,CAA0B,sJCxBvC,MAAM5F,EAAW,CACfC,KAAK,EACLE,aAAa,EACbD,sBAAsB,EACtBb,QAAQ,GAGGoL,EAAmB,gBACnBnI,EAAmB,oBAGzB,IAAMoI,EAAc,MAArB,MAAOA,UAAsBnQ,IADnC8F,kCAGE3F,KAAA6F,OAAMC,MAAS,CAAEkK,iBAAiB1K,GAE1BtF,KAAAiQ,gBAAeC,KAAUxK,KAQjCyK,aAAajQ,GACX,OAAAF,KAAK6F,IAAIM,KAAK,eACPjG,EAAO6D,QACZqM,KAAOC,GAAU,MAALA,IAAS,EACrBrM,KAAUqM,GAAKrQ,KAAKwF,qBAAqB6K,EAAEC,iBAAiBvM,QAAKwM,KAAY,KAEjF,CAEQ/K,qBAAqB8K,EAAyBpK,GAEpD,OADUlG,KAAK6F,IAAIM,KAAK,wBACjBnG,KAAKiQ,aAAaxK,YAAY,CACnCiB,aAAc,CAAC4J,GACf3J,QAAST,EACTD,OAAQ,gBACRJ,IAAK,yBACJ9B,QACDwE,KAAIiI,GAAQA,EAAKC,SAErB,CAEA9L,OAAOvE,EAAesH,EAAqBgJ,EAAkBC,EAAgBC,EAAmBC,GAC9F,OAAA7Q,KAAK6F,IAAIM,KAAK,SAAU,CAAE/F,QAAOsH,cAAagJ,WAAUC,QAAOC,WAAUE,SAClE9Q,KAAK6D,KAAKc,OAAa3E,KAAKO,OAAOwP,EAAmB,UAAW,CACtE7P,OAAQ,CACNwH,cACA9C,GAAI8L,EAAS5P,WACbV,QACAuQ,MAAOA,EAAM7P,cACT8P,GAAY,CAAEA,SAAUA,EAAS9P,eACjC8P,GAAYC,GAAe,CAAEA,iBAGvC,yEA5CWb,KAAahP,GAAbgP,EAAa,0CAAbA,EAAa/O,QAAb+O,EAAa9O,WAAA,SAAb8O,CAAc","names":["ExportAppService","HttpServiceBase","getAppInfo","initial","this","getSignal","params","appid","appId","zoneId","exportAppUrl","apiUrl","webApiAppRoot","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","getHttpApiUrl","toString","withPortalFiles","__ngFactoryType__","factory","ɵfac","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText","ExportAppPartsService","getContentInfo","scope","exportParts","contentTypeIds","entityIds","templateIds","url","webApiAppPartsRoot","join","window","open","DataTypeCatalog","Boolean","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","ImportAppService","importApp","changedName","retryOnDuplicate","formData","FormData","append","http","post","pipe","switchMap","Messages","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","ViewsService","getAll","delete","id","Id","import","export","getPolymorphism","getUsage","guid","calculateTypeIcon","typeName","calculateTypeLabel","logSpecs","all","getAvailableEntities","getEntities","QueryService","constructor","context","log","classLog","getFromQuery","queryUrl","fields","entitiesFilter","fnIf","hasParams","urlParams","toLocaleLowerCase","includes","substring","Guids","contentTypes","itemIds","i0","i1","i2","getAllSig","getAllRes","importQuery","clonePipeline","update","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","contentType","r","webApiEntityList","l","sig","res","httpResource","defaultValue","obs","from","fileBase64","AppId","ContentBase64","map","success","Success","webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","ContentTypesService","retrieveContentType","nameId","contentTypeId","getTypeSig","retrieveContentTypes","getTypesSig","getScopes","scopesData","scopes","old","Object","keys","key","name","value","getScopesSig","scopesSignal","computed","getScopesV2","save","staticName","NameId","files","createGhost","sourceNameId","ImportAppPartsService","importAppParts","resetApp","dataTypeLabels","label","description","webApiFieldsAll","webApiReservedNames","webApiSetTitle","webApiFieldsGetShared","ContentTypesFieldsService","paramsAppId","more","dataTypes","raw","calculateDataTypes","rawDataTypes","rawDataType","push","icon","getInputTypes","inputConfigs","config","dataType","Type","indexOf","inputType","Label","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","sort","a","b","localeCompare","getReservedNames","reservedNames","getFields","contentTypeStaticName","fld","Metadata","md","merged","All","InputType","getFieldsSig","getShareableFields","getShareableFieldsFor","attributeId","#getShareinfo","getAncestors","getDescendants","endpoint","addInheritedField","targetContentTypeId","sourceType","sourceFieldGuid","sourceField","share","inherit","inheritMetadataOf","reOrder","idArray","order","JSON","stringify","setTitle","item","rename","fieldId","newName","IsTitle","Error","add","newField","ContentTypeId","StaticName","Index","SortOrder","updateInputType","field","webApiEntityRoot","EntityService","queryService","transient","getEntities$","filter","p","contentTypeName","shareReplay","data","Default","entityId","force","parentId","parentField","parent"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/shared/fields/data-type-catalog.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.helpers.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n const webApiAppRootStatistics = 'admin/app/Statistics';\r\n const webApiAppRootSaveData = 'admin/app/SaveData';\r\n\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo(initial: AppInfo) {\r\n    return this.getSignal<AppInfo>(webApiAppRootStatistics, {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    }, initial);\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    // return this.get<boolean>(webApiAppRoot + 'SaveData', {\r\n    return this.getHttpApiUrl<boolean>(webApiAppRootSaveData, {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\nconst webApiAppPartsGet = 'admin/appParts/get';\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string, initial: ContentInfo) {\r\n    return this.getSignal<ContentInfo>(webApiAppPartsGet, {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","export const DataTypeCatalog = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViews = 'admin/view/all';\r\nconst webApiViewDelete = 'admin/view/delete';\r\nconst webApiViewImport = 'admin/view/import';\r\nconst webApiViewPolymorph = 'admin/view/polymorphism';\r\nconst webApiViewUsage = 'admin/view/usage';\r\nconst webApiJson = 'admin/view/json';\r\n\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.getSignal<View[]>(webApiViews, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.getHttpApiUrl<boolean>(webApiViewDelete, {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiJson)\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.getSignal<Polymorphism>(webApiViewPolymorph, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.getSignal<ViewUsage[]>(webApiViewUsage, {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n\r\n}\r\n","import { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\n\r\nexport function calculateTypeIcon(typeName: string): string {\r\n  const typeIconMap: Record<string, string> = {\r\n    [DataTypeCatalog.Boolean]: 'toggle_on',\r\n    [DataTypeCatalog.Custom]: 'extension',\r\n    [DataTypeCatalog.DateTime]: 'today',\r\n    [DataTypeCatalog.Empty]: 'crop_free',\r\n    [DataTypeCatalog.Entity]: 'share',\r\n    [DataTypeCatalog.Hyperlink]: 'link',\r\n    [DataTypeCatalog.Number]: 'dialpad',\r\n    [DataTypeCatalog.String]: 'text_fields',\r\n  };\r\n  return typeIconMap[typeName] ?? 'device_unknown';\r\n}\r\n\r\nexport function calculateTypeLabel(typeName: string): string {\r\n  const typeLabelMap: Record<string, string> = {\r\n    [DataTypeCatalog.Boolean]: 'Boolean (yes/no)',\r\n    [DataTypeCatalog.Custom]: 'Custom - ui-tools or custom types',\r\n    [DataTypeCatalog.DateTime]: 'Date and/or time',\r\n    [DataTypeCatalog.Empty]: 'Empty - for form-titles etc.',\r\n    [DataTypeCatalog.Entity]: 'Entity (other content-items)',\r\n    [DataTypeCatalog.Hyperlink]: 'Link / file reference',\r\n    [DataTypeCatalog.Number]: 'Number',\r\n    [DataTypeCatalog.String]: 'Text / string',\r\n  };\r\n  return typeLabelMap[typeName] ?? 'device_unknown';\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst logSpecs = {\r\n  all: true,\r\n  getAll: false,\r\n  getAllSig: true,\r\n  getAllRes: true,\r\n  importQuery: false,\r\n  clonePipeline: false,\r\n  delete: false,  \r\n  update: false,\r\n};\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  log = classLog({ PipelinesService }, logSpecs);\r\n\r\n  getAll(contentType: string) {\r\n    const l = this.log.fnIf('getAll');\r\n    return l.r(this.getHttpApiUrl<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }));\r\n  }\r\n\r\n  getAllSig(contentType: string, initial?: Query[]) {\r\n    const l = this.log.fnIf('getAllSig');\r\n    const sig =  this.getSignal<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }, initial);\r\n    return l.r(sig);\r\n  }\r\n\r\n  /** Experimental httpResource use! */\r\n  getAllRes(contentType: string, initial?: Query[]) {\r\n    const l = this.log.fnIf('getAllRes');\r\n    const res = httpResource<Query[]>(() => ({\r\n      url: webApiEntityList,\r\n      params: { appId: this.appId, contentType },\r\n    }), { defaultValue: initial });\r\n    return l.r(res);\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    const l = this.log.fnIf('importQuery');\r\n    const obs = from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n    return l.r(obs);\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    const l = this.log.fnIf('clonePipeline');\r\n    const obs = this.getHttpApiUrl<null>(webApiQueryClone, {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n    return l.r(obs);\r\n  }\r\n\r\n  delete(id: number) {\r\n    const l = this.log.fnIf('delete');\r\n    const obs = this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n    return l.r(obs);\r\n  }\r\n}\r\n","import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  getTypeSig(nameId: string, initial: ContentType): Signal<ContentType> {\r\n    return this.getSignal<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }, initial);\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.getHttpApiUrl<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  getTypesSig(scope: string, initial: ContentType[]): Signal<ContentType[]> {\r\n    return this.getSignal<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  // todo: switch to using the GetSignal with `map` parameter similar to the initial version above\r\n  getScopesSig(initial: undefined): Signal<ScopeOption[]> {\r\n    const scopesSignal = this.getSignal<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(\r\n      webApiTypeScopes,\r\n      { params: { appId: this.appId } }, initial,\r\n    );\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      const scopesData = scopesSignal();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\n\r\nconst dataTypeLabels: Record<string, { label: string, description: string }> = {\r\n  Boolean: { label: calculateTypeLabel(DataTypeCatalog.Boolean), description: 'Yes/no or true/false values' },\r\n  Custom: { label: calculateTypeLabel(DataTypeCatalog.Custom), description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: calculateTypeLabel(DataTypeCatalog.DateTime), description: 'For date, time or combined values' },\r\n  Empty: { label: calculateTypeLabel(DataTypeCatalog.Empty), description: 'Use to structure your form' },\r\n  Entity: { label: calculateTypeLabel(DataTypeCatalog.Entity), description: 'One or more other content-items' },\r\n  Hyperlink: { label: calculateTypeLabel(DataTypeCatalog.Hyperlink), description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: calculateTypeLabel(DataTypeCatalog.Number), description: 'Any kind of number' },\r\n  String: { label: calculateTypeLabel(DataTypeCatalog.String), description: 'Any kind of text' },\r\n};\r\n\r\nexport interface DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { Of } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services';\r\nimport { calculateDataTypes, DataType } from '../../content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers';\r\nimport { HttpServiceBase } from '../services/http-service-base';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeCatalog } from './input-type-catalog';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\n\r\nexport const webApiFieldsAll = 'admin/field/all';\r\n\r\n// All WebApi paths - to easily search/find when looking for where these are used\r\nconst webApiDataTypes = 'admin/field/DataTypes';\r\nconst webApiReservedNames = 'admin/field/ReservedNames';\r\nconst webApiAddInheritedField = 'admin/field/AddInheritedField';\r\nconst webApiInputTypes = 'admin/field/InputTypes';\r\nconst webApiInputType = 'admin/field/InputType';\r\nconst webApiShare = 'admin/field/Share';\r\nconst webApiInherit = 'admin/field/Inherit';\r\nconst webApiSort = 'admin/field/Sort';\r\nconst webApiSetTitle = webApiTypeRoot + 'SetTitle';\r\nconst webApiRename = 'admin/field/Rename';\r\nconst webApiDelete = 'admin/field/Delete';\r\nconst webApiAdd = 'admin/field/Add';\r\nconst webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\nconst webApiGetAncestors = 'admin/field/GetAncestors';\r\nconst webApiGetDescendants = 'admin/field/GetDescendants';\r\n\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService extends HttpServiceBase {\r\n\r\n  protected paramsAppId(more: Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>> = {}) {\r\n    return {\r\n      params: {\r\n        appid: this.appId,\r\n        ...more,\r\n      },\r\n    };\r\n  }\r\n\r\n  /** Get list of data types available in the system, such as 'string', 'number' etc. */\r\n  dataTypes() {\r\n    return this.getSignal<DataType[], string[]>(webApiDataTypes, this.paramsAppId(), [], raw => calculateDataTypes(raw));\r\n  }\r\n\r\n  getInputTypes() {\r\n    return this.getSignal<FieldInputTypeOption[], InputTypeMetadata[]>(\r\n      webApiInputTypes,\r\n      this.paramsAppId(),\r\n      [],\r\n      inputConfigs => inputConfigs\r\n        .map(config => ({\r\n          dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n          inputType: config.Type,\r\n          label: config.Label,\r\n          description: config.Description,\r\n          isDefault: config.IsDefault,\r\n          isObsolete: config.IsObsolete,\r\n          isRecommended: config.IsRecommended,\r\n          obsoleteMessage: config.ObsoleteMessage,\r\n          icon: config.IsDefault ? 'stars' : config.IsRecommended ? 'star' : null,\r\n          sort: (config.IsObsolete ? 'z' : config.IsDefault ? 'a' : config.IsRecommended ? 'b' : 'c') + config.Label,\r\n        } satisfies FieldInputTypeOption & { sort: string}))\r\n      .sort((a, b) => a.sort.localeCompare(b.sort)),\r\n    );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.getHttpApiUrl<Record<string, string>>(webApiReservedNames);\r\n  }\r\n\r\n  reservedNames() {\r\n    return this.getSignal<Record<string, string>>(webApiReservedNames, null, {});\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.getHttpApiUrl<Field[]>(webApiFieldsAll, this.paramsAppId({ staticName: contentTypeStaticName }))\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getFieldsSig(contentTypeStaticName: string) {\r\n    return this.getSignal<Field[]>(webApiFieldsAll, this.paramsAppId({ staticName: contentTypeStaticName }), [], fields => {\r\n      if (fields) {\r\n        for (const fld of fields) {\r\n          if (!fld.Metadata) continue;\r\n          const md = fld.Metadata;\r\n          const allMd = md.All;\r\n          const typeMd = md[fld.Type];\r\n          const inputMd = md[fld.InputType];\r\n          md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n        }\r\n      }\r\n      return fields;\r\n    });\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.getHttpApiUrl<Field[]>(webApiFieldsGetShared, this.paramsAppId());\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    return this.#getShareinfo(webApiFieldsGetShared, attributeId);\r\n    // return this.getHttp<Field[]>(this.apiUrl(webApiFieldsGetShared), this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  getAncestors(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetAncestors, attributeId);\r\n  }\r\n\r\n  getDescendants(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetDescendants, attributeId);\r\n  }\r\n\r\n  #getShareinfo(endpoint: string, attributeId: number) {\r\n    return this.getHttpApiUrl<Field[]>(endpoint, this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceType: string, sourceFieldGuid: string /* guid */, name: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiAddInheritedField), null, this.paramsAppId({\r\n      contentTypeId: targetContentTypeId.toString(),\r\n      sourceType,\r\n      sourceField: sourceFieldGuid,\r\n      name,\r\n    }));\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiShare), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiInherit), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiSort), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiSetTitle), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiRename), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle)\r\n      throw new Error('Can\\'t delete Title');\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiDelete), {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiAdd), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(attributeId: number, field: string, inputType: Of<typeof InputTypeCatalog>) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiInputType), null, {\r\n      params: { appId: this.appId, attributeId, field, inputType }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}