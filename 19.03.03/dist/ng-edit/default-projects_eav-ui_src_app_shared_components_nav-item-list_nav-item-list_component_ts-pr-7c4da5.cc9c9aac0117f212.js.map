{"version":3,"file":"default-projects_eav-ui_src_app_shared_components_nav-item-list_nav-item-list_component_ts-pr-7c4da5.cc9c9aac0117f212.js","mappings":"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","names":["i0","_c0","ctx_r0","isOpenMenu","NavItemListComponent_Conditional_6_For_2_Template","_forTrack0","navItem","child","NavItemListComponent","constructor","router","this","input","ngOnInit","#openChildMenu","events","subscribe","length","urlSegments","url","split","find","includes","path","i1","selectors","inputs","decls","vars","consts","template","rf","ctx","NavItemListComponent_Conditional_5_Template","NavItemListComponent_Conditional_6_Template","tippy","icon","name","MatIconModule","i2","NgClass","RouterLink","RouterLinkActive","TippyDirective","styles","a0","_c1","a1","a2","a3","a4","a5","$implicit","info","last","first","index","count","BreadcrumbComponent_ng_container_2_a_2_ng_container_1_Template","BreadcrumbComponent_ng_container_2_a_2_ng_container_2_Template","breadcrumb_r1","label","BreadcrumbComponent_ng_container_2_a_2_Template","ctx_r1","isLast_r3","isFirst_r4","index_r5","count_r6","ctx_r6","disable","routeInterceptor","routeLink","preserveQueryParams","queryParams","undefined","preserveFragment","fragment","anchorTarget","itemTemplate","BreadcrumbComponent_ng_container_2_label_3_ng_container_1_Template","BreadcrumbComponent_ng_container_2_label_3_ng_container_2_Template","BreadcrumbComponent_ng_container_2_label_3_Template","BreadcrumbComponent_ng_container_2_li_4_ng_container_1_Template","BreadcrumbComponent_ng_container_2_li_4_ng_container_2_Template","separator","BreadcrumbComponent_ng_container_2_li_4_Template","separatorTemplate","BreadcrumbComponent_ng_container_2_Template","BreadcrumbItemDirective","ɵfac","__ngFactoryType__","ɵdir","type","standalone","isNonEmpty","obj","Object","keys","BreadcrumbService","activatedRoute","baseHref","dynamicBreadcrumbStore","currentBreadcrumbs","previousBreadcrumbs","breadcrumbs","BehaviorSubject","breadcrumbs$","asObservable","detectRouteChanges","setupBreadcrumbs","snapshot","pipe","filter","event","GuardsCheckEnd","shouldActivate","state","root","activatedRouteSnapshot","rootBreadcrumb","getRootBreadcrumb","prepareBreadcrumbList","rootConfig","config","extractObject","data","breadcrumb","storeItem","getFromStore","alias","getQueryParamsFromPreviousList","prepareBreadcrumbItem","routeLinkPrefix","parseRouteData","routeConfig","resolvedSegment","resolvePathSegment","extractLabel","isAutoGeneratedLabel","autoGeneratedLabel","breadcrumbItem","push","firstChild","setQueryParamsForActiveBreadcrumb","breadcrumbsToShow","item","skip","next","matchRegex","routeRegex","match","RegExp","segment","entries","params","forEach","key","value","replace","lastItem","mergeWithBaseChildData","baseChild","loadChildren","_loadedRoutes","route","children","childConfig","set","breadcrumbObject","updateArgs","startsWith","slice","buildRegex","ensureLeadingSlash","updateStore","updateCurrentBreadcrumbs","storeItemIndex","findIndex","itemIndex","resolvedParam","ɵprov","token","factory","providedIn","BreadcrumbComponent","breadcrumbService","activateRoute","_separator","autoGenerate","class","setupMessage","someParameterValue","setupComponent","someParam","TemplateRef","Date","map","ɵcmp","contentQueries","dirIndex","_t","dependencies","i3","encapsulation","BreadcrumbModule","ɵmod","ɵinj","imports","CommonModule","RouterModule","ToggleDebugDirective","globalConfigService","onClick","navigator","platform","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","hostBindings","$event","_c2","_c3","MatDrawerContainer_Conditional_0_Template","_r1","_onBackdropClicked","_isShowingBackdrop","MatDrawerContainer_Conditional_3_Template","_c4","_c5","MatSidenavContainer_Conditional_0_Template","MatSidenavContainer_Conditional_3_Template","MAT_DRAWER_DEFAULT_AUTOSIZE","InjectionToken","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","CdkScrollable","_platform","inject","Platform","_changeDetectorRef","ChangeDetectorRef","_container","MatDrawerContainer","super","elementRef","ElementRef","scrollDispatcher","ScrollDispatcher","ngZone","NgZone","ngAfterContentInit","_contentMarginChanges","markForCheck","_shouldBeHidden","isBrowser","start","end","mode","opened","static","hostAttrs","hostVars","_contentMargins","left","right","features","provide","useExisting","ngContentSelectors","changeDetection","MatDrawer","_elementRef","_focusTrapFactory","FocusTrapFactory","_focusMonitor","FocusMonitor","_ngZone","_renderer","Renderer2","_interactivityChecker","InteractivityChecker","_doc","DOCUMENT","optional","_focusTrap","_elementFocusedBeforeDrawerWasOpened","_eventCleanups","_isAttached","_anchor","position","_position","_updatePositionInParent","onPositionChanged","emit","_mode","_updateFocusTrapState","_modeChanged","disableClose","_disableClose","coerceBooleanProperty","autoFocus","_autoFocus","_opened","toggle","_openedVia","_animationStarted","Subject","_animationEnd","openedChange","EventEmitter","_openedStream","o","openedStart","mapTo","_closedStream","closedStart","_destroyed","_content","_injector","Injector","takeUntil","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","runOutsideAngular","element","nativeElement","fromEvent","keyCode","ESCAPE","hasModifierKey","run","close","stopPropagation","preventDefault","listen","_handleTransitionEvent","_forceFocus","options","isFocusable","tabIndex","callback","cleanupBlur","cleanupMousedown","removeAttribute","focus","_focusByCssSelector","selector","elementToFocus","querySelector","afterNextRender","focusInitialElement","injector","focusOrigin","focusVia","blur","activeEl","contains","ngAfterViewInit","create","ngOnDestroy","cleanup","destroy","remove","complete","open","openedVia","_closeViaBackdropClick","_setOpen","isOpen","result","restoreFocus","Promise","resolve","_transitionsEnabled","_setIsAnimating","setTimeout","classList","take","isAnimating","_getWidth","offsetWidth","enabled","hasBackdrop","newPosition","parent","parentNode","createComment","insertBefore","appendChild","target","viewQuery","outputs","exportAs","_dir","Directionality","_element","_animationMode","ANIMATION_MODULE_TYPE","_allDrawers","_drawers","QueryList","_userContent","_start","_end","autosize","_autosize","_drawerHasBackdrop","_backdropOverride","backdropClick","_left","_right","_doCheckSubject","scrollable","viewportRuler","ViewportRuler","change","_validateDrawers","updateContentMargins","add","changes","startWith","drawer","reset","notifyOnChanges","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","debounceTime","width","ngDoCheck","_isPushed","_setContainerClass","read","merge","isAdd","className","_closeModalDrawersViaBackdrop","MatSidenavContent","ɵMatSidenavContent_BaseFactory","MatSidenav","fixedInViewport","_fixedInViewport","fixedTopGap","_fixedTopGap","coerceNumberProperty","fixedBottomGap","_fixedBottomGap","ɵMatSidenav_BaseFactory","MatSidenavContainer","ɵMatSidenavContainer_BaseFactory","MatSidenavModule","MatCommonModule","CdkScrollableModule","MatToolbarRow","MatToolbar","_document","color","_toolbarRows","_checkToolbarMixedModes","MatToolbarModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/components/nav-item-list/nav-item-list.component.html","./projects/eav-ui/src/app/shared/components/nav-item-list/nav-item-list.component.ts","./node_modules/xng-breadcrumb/fesm2020/xng-breadcrumb.mjs","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./node_modules/@angular/material/fesm2022/sidenav.mjs","./node_modules/rxjs/dist/esm/internal/operators/mapTo.js","./node_modules/@angular/material/fesm2022/toolbar.mjs"],"sourcesContent":["<a\r\n  (click)=\"isOpenMenu = !isOpenMenu\"\r\n  [routerLink]=\"navItem().path\"\r\n  routerLinkActive=\"active\"\r\n  matRipple\r\n  class=\"app-menu-container\"\r\n  [tippy]=\"navItem().tippy\"\r\n>\r\n  <mat-icon>{{ navItem().icon }}</mat-icon>\r\n  <div class=\"link-text\">{{ navItem().name }}</div>\r\n  @if (navItem().child) {\r\n    <mat-icon [ngClass]=\"{ closed: !isOpenMenu, open: isOpenMenu, 'ml-auto': true }\"> expand_more</mat-icon>\r\n  }\r\n</a>\r\n\r\n@if (isOpenMenu) {\r\n  <div class=\"paddingLink\">\r\n    @for (child of navItem().child; track child.path) {\r\n      <app-nav-item-list [navItem]=\"child\"></app-nav-item-list>\r\n    }\r\n  </div>\r\n}","import { NgClass } from '@angular/common';\r\nimport { Component, input, OnInit } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { NavItem } from '../../models/nav-item.model';\r\n\r\n@Component({\r\n    selector: 'app-nav-item-list',\r\n    templateUrl: './nav-item-list.component.html',\r\n    styleUrl: './nav-item-list.component.scss',\r\n    imports: [\r\n        MatIconModule,\r\n        NgClass,\r\n        RouterLink,\r\n        RouterLinkActive,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class NavItemListComponent implements OnInit {\r\n  navItem = input<NavItem>();\r\n  isOpenMenu = false;\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.#openChildMenu();\r\n    this.router.events.subscribe(() => this.#openChildMenu());\r\n  }\r\n\r\n  #openChildMenu() {\r\n    if (!this.navItem().child?.length)\r\n      return;\r\n\r\n    const urlSegments = this.router.url.split('/');\r\n    const matchingChild = this.navItem().child.find(child => urlSegments.includes(child.path));\r\n    if (matchingChild)\r\n      this.isOpenMenu = true;\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Directive, Injectable, TemplateRef, Component, ViewEncapsulation, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { GuardsCheckEnd, RouterModule } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to the demo - app.component.html\n */\nclass BreadcrumbItemDirective {\n}\nBreadcrumbItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nBreadcrumbItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: BreadcrumbItemDirective, selector: \"[xngBreadcrumbItem]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbItemDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[xngBreadcrumbItem]',\n                }]\n        }] });\n\nconst PATH_PARAM = {\n    PREFIX: ':',\n    REGEX_IDENTIFIER: '/:[^/]+',\n    REGEX_REPLACER: '/[^/]+',\n};\nconst ALIAS_PREFIX = '@';\nconst isNonEmpty = (obj) => {\n    return obj && Object.keys(obj).length > 0;\n};\nclass BreadcrumbService {\n    constructor(activatedRoute, router) {\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        this.baseHref = '/';\n        /**\n         * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n         * Breadcrumbs can be set from anywhere (component, service) in the app.\n         * On every breadcrumb update check this store and use the info if available.\n         */\n        this.dynamicBreadcrumbStore = [];\n        /**\n         * breadcrumbList for the current route\n         * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n         * If effected, update the change and emit a new stream\n         */\n        this.currentBreadcrumbs = [];\n        this.previousBreadcrumbs = [];\n        /**\n         * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n         * Emits on every route change OR dynamic update of breadcrumb\n         */\n        this.breadcrumbs = new BehaviorSubject([]);\n        this.breadcrumbs$ = this.breadcrumbs.asObservable();\n        this.detectRouteChanges();\n    }\n    /**\n     * Whenever route changes build breadcrumb list again\n     */\n    detectRouteChanges() {\n        // Special case where breadcrumb service & component instantiates after a route is navigated.\n        // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\n        // This check is also required where  { initialNavigation: 'enabledBlocking' } is applied to routes\n        this.setupBreadcrumbs(this.activatedRoute.snapshot);\n        this.router.events\n            .pipe(filter((event) => event instanceof GuardsCheckEnd))\n            .subscribe((event) => {\n            // activatedRoute doesn't carry data when shouldReuseRoute returns false\n            // use the event data with GuardsCheckEnd as workaround\n            // Check for shouldActivate in case where the authGuard returns false the breadcrumbs shouldn't be changed\n            if (event.shouldActivate) {\n                this.setupBreadcrumbs(event.state.root);\n            }\n        });\n    }\n    setupBreadcrumbs(activatedRouteSnapshot) {\n        this.previousBreadcrumbs = this.currentBreadcrumbs;\n        // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n        const rootBreadcrumb = this.getRootBreadcrumb();\n        this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n        this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\n    }\n    getRootBreadcrumb() {\n        const rootConfig = this.router.config.find((config) => config.path === '');\n        const rootBreadcrumb = this.extractObject(rootConfig?.data?.breadcrumb);\n        const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n        if (isNonEmpty(rootBreadcrumb) || isNonEmpty(storeItem)) {\n            return {\n                ...storeItem,\n                ...rootBreadcrumb,\n                routeLink: this.baseHref,\n                ...this.getQueryParamsFromPreviousList('/'),\n            };\n        }\n    }\n    prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix) {\n        const { path, breadcrumb } = this.parseRouteData(activatedRouteSnapshot.routeConfig);\n        const resolvedSegment = this.resolvePathSegment(path, activatedRouteSnapshot);\n        const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n        const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n        const label = this.extractLabel(storeItem?.label || breadcrumb?.label, resolvedSegment);\n        let isAutoGeneratedLabel = false;\n        let autoGeneratedLabel = '';\n        if (!label) {\n            isAutoGeneratedLabel = true;\n            autoGeneratedLabel = resolvedSegment;\n        }\n        return {\n            ...storeItem,\n            ...breadcrumb,\n            label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\n            routeLink,\n            isAutoGeneratedLabel,\n            ...this.getQueryParamsFromPreviousList(routeLink),\n        };\n    }\n    prepareBreadcrumbList(activatedRouteSnapshot, routeLinkPrefix) {\n        if (activatedRouteSnapshot.routeConfig?.path) {\n            const breadcrumbItem = this.prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix);\n            this.currentBreadcrumbs.push(breadcrumbItem);\n            if (activatedRouteSnapshot.firstChild) {\n                return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, breadcrumbItem.routeLink + '/');\n            }\n        }\n        else if (activatedRouteSnapshot.firstChild) {\n            return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, routeLinkPrefix);\n        }\n        const lastCrumb = this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n        this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot);\n        // remove breadcrumb items that needs to be hidden\n        const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n        this.breadcrumbs.next(breadcrumbsToShow);\n    }\n    getFromStore(alias, routeLink) {\n        return this.dynamicBreadcrumbStore.find((item) => {\n            return ((alias && alias === item.alias) ||\n                (routeLink && routeLink === item.routeLink) ||\n                this.matchRegex(routeLink, item.routeRegex));\n        });\n    }\n    /**\n     * use exact match instead of regexp.test\n     * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n     */\n    matchRegex(routeLink, routeRegex) {\n        const match = routeLink.match(new RegExp(routeRegex));\n        return match?.[0] === routeLink;\n    }\n    /**\n     * if the path segment has route params, read the param value from url\n     * for each segment of route this gets called\n     *\n     * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n     */\n    resolvePathSegment(segment, activatedRouteSnapshot) {\n        //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n        if (segment.includes(PATH_PARAM.PREFIX)) {\n            Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\n                segment = segment.replace(`:${key}`, `${value}`);\n            });\n        }\n        return segment;\n    }\n    /**\n     * queryParams & fragments for previous breadcrumb path are copied over to new list\n     */\n    getQueryParamsFromPreviousList(routeLink) {\n        const { queryParams, fragment } = this.previousBreadcrumbs.find((item) => item.routeLink === routeLink) ||\n            {};\n        return { queryParams, fragment };\n    }\n    /**\n     * set current activated route query params to the last breadcrumb item\n     */\n    setQueryParamsForActiveBreadcrumb(lastItem, activatedRouteSnapshot) {\n        if (lastItem) {\n            const { queryParams, fragment } = activatedRouteSnapshot;\n            lastItem.queryParams = queryParams ? { ...queryParams } : undefined;\n            lastItem.fragment = fragment;\n        }\n    }\n    /**\n     * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n     * When both are defined, child takes precedence\n     *\n     * Ex: Below we are setting breadcrumb on both parent and child.\n     * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n     * { path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\n     *                                                AND\n     * children: [\n     *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n     * ]\n     */\n    parseRouteData(routeConfig) {\n        const { path, data } = routeConfig;\n        const breadcrumb = this.mergeWithBaseChildData(routeConfig, data?.breadcrumb);\n        return { path, breadcrumb };\n    }\n    /**\n     * get empty children of a module or Component. Empty child is the one with path: ''\n     * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n     */\n    mergeWithBaseChildData(routeConfig, config) {\n        if (!routeConfig) {\n            return this.extractObject(config);\n        }\n        let baseChild;\n        if (routeConfig.loadChildren) {\n            // To handle a module with empty child route\n            baseChild = routeConfig._loadedRoutes.find((route) => route.path === '');\n        }\n        else if (routeConfig.children) {\n            // To handle a component with empty child route\n            baseChild = routeConfig.children.find((route) => route.path === '');\n        }\n        const childConfig = baseChild?.data?.breadcrumb;\n        return childConfig\n            ? this.mergeWithBaseChildData(baseChild, {\n                ...this.extractObject(config),\n                ...this.extractObject(childConfig),\n            })\n            : this.extractObject(config);\n    }\n    /**\n     * Update breadcrumb dynamically\n     *\n     * key can be a path | alias\n     *\n     * 1) Using complete route path. route can be passed the same way you define angular routes\n     * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n     * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n     * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n     * ------------------------------------------ OR ------------------------------------------\n     * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n     * - update label Ex: set('@mentor', 'Enabler')\n     * - change visibility Ex: set('@mentorEdit', { skip: true })\n     *\n     *\n     * value can be string | BreadcrumbObject | BreadcrumbFunction\n     */\n    set(key, breadcrumb) {\n        const breadcrumbObject = this.extractObject(breadcrumb);\n        let updateArgs;\n        if (key.startsWith(ALIAS_PREFIX)) {\n            updateArgs = ['alias', { ...breadcrumbObject, alias: key.slice(1) }];\n        }\n        else if (key.includes(PATH_PARAM.PREFIX)) {\n            updateArgs = [\n                'routeRegex',\n                { ...breadcrumbObject, routeRegex: this.buildRegex(key) },\n            ];\n        }\n        else {\n            updateArgs = [\n                'routeLink',\n                { ...breadcrumbObject, routeLink: this.ensureLeadingSlash(key) },\n            ];\n        }\n        // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\n        // change it to false since this is user supplied value\n        updateArgs[1].isAutoGeneratedLabel = false;\n        this.updateStore(...updateArgs);\n        this.updateCurrentBreadcrumbs(...updateArgs);\n    }\n    /**\n     * Update the store to reuse for dynamic declarations\n     * If the store already has this route definition update it, else add\n     */\n    updateStore(key, breadcrumb) {\n        const storeItemIndex = this.dynamicBreadcrumbStore.findIndex((item) => {\n            return breadcrumb[key] === item[key];\n        });\n        if (storeItemIndex > -1) {\n            this.dynamicBreadcrumbStore[storeItemIndex] = {\n                ...this.dynamicBreadcrumbStore[storeItemIndex],\n                ...breadcrumb,\n            };\n        }\n        else {\n            this.dynamicBreadcrumbStore.push({ ...breadcrumb });\n        }\n    }\n    /**\n     * If breadcrumb is present in current breadcrumbs update it and emit new stream\n     */\n    updateCurrentBreadcrumbs(key, breadcrumb) {\n        const itemIndex = this.currentBreadcrumbs.findIndex((item) => {\n            return key === 'routeRegex'\n                ? this.matchRegex(item.routeLink, breadcrumb[key])\n                : breadcrumb[key] === item[key];\n        });\n        if (itemIndex > -1) {\n            this.currentBreadcrumbs[itemIndex] = {\n                ...this.currentBreadcrumbs[itemIndex],\n                ...breadcrumb,\n            };\n            const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n            this.breadcrumbs.next([...breadcrumbsToShow]);\n        }\n    }\n    /**\n     * For a route with path param, we create regex dynamically from angular route syntax\n     * '/mentor/:id' becomes '/mentor/[^/]',\n     * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n     */\n    buildRegex(path) {\n        return this.ensureLeadingSlash(path).replace(new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'), PATH_PARAM.REGEX_REPLACER);\n    }\n    ensureLeadingSlash(path) {\n        return path.startsWith('/') ? path : `/${path}`;\n    }\n    /**\n     * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n     *\n     * string: simple static breadcrumb label for a path\n     * function: callback that gets invoked with resolved path param\n     * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n     */\n    extractLabel(config, resolvedParam) {\n        const label = typeof config === 'object' ? config.label : config;\n        if (typeof label === 'function') {\n            return label(resolvedParam);\n        }\n        return label;\n    }\n    extractObject(config) {\n        // don't include {label} if config is undefined. This is important since we merge the configs\n        if (config &&\n            (typeof config === 'string' || typeof config === 'function')) {\n            return { label: config };\n        }\n        return config || {};\n    }\n}\nBreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });\nBreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }]; } });\n\nclass BreadcrumbComponent {\n    constructor(breadcrumbService, activateRoute) {\n        this.breadcrumbService = breadcrumbService;\n        this._separator = '/';\n        /**\n         * If true, breadcrumb is auto generated even without any mapping label\n         * Default label is same as route segment\n         */\n        this.autoGenerate = true;\n        /**\n         * By default query params will be preserved with breadcrumbs\n         */\n        this.preserveQueryParams = true;\n        /**\n         * By default query fragments will be preserved with breadcrumbs\n         */\n        this.preserveFragment = true;\n        /**\n         * custom class provided by consumer to increase specificity\n         * This will benefit to override styles that are conflicting\n         */\n        this.class = '';\n        this.setupMessage = 'not set up yet';\n        this.someParameterValue = null;\n        // breadcrumb inside ngIf works only this way\n        activateRoute.params.subscribe((params) => {\n            this.setupComponent(params['someParam']);\n        });\n    }\n    /**\n     * separator between breadcrumbs, defaults to '/'.\n     * User can customize separator either by passing a String or Template\n     *\n     * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n     *\n     * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n     * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n     */\n    set separator(value) {\n        if (value instanceof TemplateRef) {\n            this.separatorTemplate = value;\n            this._separator = undefined;\n        }\n        else {\n            this.separatorTemplate = undefined;\n            this._separator = value || '/';\n        }\n    }\n    get separator() {\n        return this._separator;\n    }\n    setupComponent(someParam) {\n        this.setupMessage = 'set up at ' + new Date();\n        this.someParameterValue = someParam;\n    }\n    ngOnInit() {\n        this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(map((breadcrumbs) => {\n            return breadcrumbs\n                .filter((breadcrumb) => {\n                // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n                // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n                if (this.autoGenerate) {\n                    return true;\n                }\n                return !breadcrumb.isAutoGeneratedLabel;\n            })\n                .map((breadcrumb) => {\n                // Do not mutate breadcrumb as its source of truth.\n                // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n                const { routeInterceptor, routeLink } = breadcrumb;\n                return {\n                    ...breadcrumb,\n                    routeLink: routeInterceptor?.(routeLink, breadcrumb) || routeLink,\n                };\n            });\n        }));\n    }\n}\nBreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbComponent, deps: [{ token: BreadcrumbService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nBreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0\", type: BreadcrumbComponent, selector: \"xng-breadcrumb\", inputs: { autoGenerate: \"autoGenerate\", preserveQueryParams: \"preserveQueryParams\", preserveFragment: \"preserveFragment\", class: \"class\", anchorTarget: \"anchorTarget\", separator: \"separator\" }, queries: [{ propertyName: \"itemTemplate\", first: true, predicate: BreadcrumbItemDirective, descendants: true, read: TemplateRef }], ngImport: i0, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i1.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"pipe\", type: i3.AsyncPipe, name: \"async\" }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'xng-breadcrumb', encapsulation: ViewEncapsulation.None, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: BreadcrumbService }, { type: i1.ActivatedRoute }]; }, propDecorators: { itemTemplate: [{\n                type: ContentChild,\n                args: [BreadcrumbItemDirective, { static: false, read: TemplateRef }]\n            }], autoGenerate: [{\n                type: Input\n            }], preserveQueryParams: [{\n                type: Input\n            }], preserveFragment: [{\n                type: Input\n            }], class: [{\n                type: Input\n            }], anchorTarget: [{\n                type: Input\n            }], separator: [{\n                type: Input,\n                args: ['separator']\n            }] } });\n\nclass BreadcrumbModule {\n}\nBreadcrumbModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBreadcrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, declarations: [BreadcrumbComponent, BreadcrumbItemDirective], imports: [CommonModule, RouterModule], exports: [BreadcrumbComponent, BreadcrumbItemDirective] });\nBreadcrumbModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, imports: [CommonModule, RouterModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [BreadcrumbComponent, BreadcrumbItemDirective],\n                    imports: [CommonModule, RouterModule],\n                    exports: [BreadcrumbComponent, BreadcrumbItemDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of xng-breadcrumb\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreadcrumbComponent, BreadcrumbItemDirective, BreadcrumbModule, BreadcrumbService };\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { FocusTrapFactory, FocusMonitor, InteractivityChecker } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, ElementRef, NgZone, Component, ChangeDetectionStrategy, ViewEncapsulation, Renderer2, EventEmitter, Injector, afterNextRender, Input, Output, ViewChild, ANIMATION_MODULE_TYPE, QueryList, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, take, startWith, debounceTime } from 'rxjs/operators';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    _platform = inject(Platform);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _container = inject(MatDrawerContainer);\n    constructor() {\n        const elementRef = inject(ElementRef);\n        const scrollDispatcher = inject(ScrollDispatcher);\n        const ngZone = inject(NgZone);\n        super(elementRef, scrollDispatcher, ngZone);\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Determines whether the content element should be hidden from the user. */\n    _shouldBeHidden() {\n        // In some modes the content is pushed based on the width of the opened sidenavs, however on\n        // the server we can't measure the sidenav so the margin is always zero. This can cause the\n        // content to jump around when it's rendered on the server and hydrated on the client. We\n        // avoid it by hiding the content on the initial render and then showing it once the sidenav\n        // has been measured on the client.\n        if (this._platform.isBrowser) {\n            return false;\n        }\n        const { start, end } = this._container;\n        return ((start != null && start.mode !== 'over' && start.opened) ||\n            (end != null && end.mode !== 'over' && end.opened));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDrawerContent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatDrawerContent, isStandalone: true, selector: \"mat-drawer-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\", \"class.mat-drawer-content-hidden\": \"_shouldBeHidden()\" }, classAttribute: \"mat-drawer-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatDrawerContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDrawerContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-drawer-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                        '[class.mat-drawer-content-hidden]': '_shouldBeHidden()',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatDrawerContent,\n                        },\n                    ],\n                }]\n        }], ctorParameters: () => [] });\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    _elementRef = inject(ElementRef);\n    _focusTrapFactory = inject(FocusTrapFactory);\n    _focusMonitor = inject(FocusMonitor);\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _renderer = inject(Renderer2);\n    _interactivityChecker = inject(InteractivityChecker);\n    _doc = inject(DOCUMENT, { optional: true });\n    _container = inject(MAT_DRAWER_CONTAINER, { optional: true });\n    _focusTrap = null;\n    _elementFocusedBeforeDrawerWasOpened = null;\n    _eventCleanups;\n    /** Whether the view of the component has been attached. */\n    _isAttached;\n    /** Anchor node used to restore the drawer to its initial position. */\n    _anchor;\n    /** The side that the drawer is attached to. */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value !== this._position) {\n            // Static inputs in Ivy are set before the element is in the DOM.\n            if (this._isAttached) {\n                this._updatePositionInParent(value);\n            }\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    _position = 'start';\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    _mode = 'over';\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() {\n        return this._disableClose;\n    }\n    set disableClose(value) {\n        this._disableClose = coerceBooleanProperty(value);\n    }\n    _disableClose = false;\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n     * instead.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n        // because we don't know how the sidenav is being used, but in some cases it still makes\n        // sense to do it. The consumer can explicitly set `autoFocus`.\n        if (value == null) {\n            if (this.mode === 'side') {\n                return 'dialog';\n            }\n            else {\n                return 'first-tabbable';\n            }\n        }\n        return value;\n    }\n    set autoFocus(value) {\n        if (value === 'true' || value === 'false' || value == null) {\n            value = coerceBooleanProperty(value);\n        }\n        this._autoFocus = value;\n    }\n    _autoFocus;\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() {\n        return this._opened;\n    }\n    set opened(value) {\n        this.toggle(coerceBooleanProperty(value));\n    }\n    _opened = false;\n    /** How the sidenav was opened (keypress, mouse click etc.) */\n    _openedVia;\n    /** Emits whenever the drawer has started animating. */\n    _animationStarted = new Subject();\n    /** Emits whenever the drawer is done animating. */\n    _animationEnd = new Subject();\n    /** Event emitted when the drawer open state is changed. */\n    openedChange = \n    // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n    new EventEmitter(/* isAsync */ true);\n    /** Event emitted when the drawer has been opened. */\n    _openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n    /** Event emitted when the drawer has started opening. */\n    openedStart = this._animationStarted.pipe(filter(() => this.opened), mapTo(undefined));\n    /** Event emitted when the drawer has been closed. */\n    _closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n    /** Event emitted when the drawer has started closing. */\n    closedStart = this._animationStarted.pipe(filter(() => !this.opened), mapTo(undefined));\n    /** Emits when the component is destroyed. */\n    _destroyed = new Subject();\n    /** Event emitted when the drawer's position changes. */\n    // tslint:disable-next-line:no-output-on-prefix\n    onPositionChanged = new EventEmitter();\n    /** Reference to the inner element that contains all the content. */\n    _content;\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     */\n    _modeChanged = new Subject();\n    _injector = inject(Injector);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    constructor() {\n        this.openedChange.pipe(takeUntil(this._destroyed)).subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus(this._openedVia || 'program');\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            const element = this._elementRef.nativeElement;\n            fromEvent(element, 'keydown')\n                .pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed))\n                .subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n            this._eventCleanups = [\n                this._renderer.listen(element, 'transitionrun', this._handleTransitionEvent),\n                this._renderer.listen(element, 'transitionend', this._handleTransitionEvent),\n                this._renderer.listen(element, 'transitioncancel', this._handleTransitionEvent),\n            ];\n        });\n        this._animationEnd.subscribe(() => {\n            this.openedChange.emit(this._opened);\n        });\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    cleanupBlur();\n                    cleanupMousedown();\n                    element.removeAttribute('tabindex');\n                };\n                const cleanupBlur = this._renderer.listen(element, 'blur', callback);\n                const cleanupMousedown = this._renderer.listen(element, 'mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this._focusTrap) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        // When autoFocus is not on the sidenav, if the element cannot be focused or does\n        // not exist, focus the sidenav itself so the keyboard navigation still works.\n        // We need to check that `focus` is a function due to Universal.\n        switch (this.autoFocus) {\n            case false:\n            case 'dialog':\n                return;\n            case true:\n            case 'first-tabbable':\n                afterNextRender(() => {\n                    const hasMovedFocus = this._focusTrap.focusInitialElement();\n                    if (!hasMovedFocus && typeof element.focus === 'function') {\n                        element.focus();\n                    }\n                }, { injector: this._injector });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this.autoFocus);\n                break;\n        }\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus(focusOrigin) {\n        if (this.autoFocus === 'dialog') {\n            return;\n        }\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        const activeEl = this._doc.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterViewInit() {\n        this._isAttached = true;\n        // Only update the DOM position when the sidenav is positioned at\n        // the end since we project the sidenav before the content by default.\n        if (this._position === 'end') {\n            this._updatePositionInParent('end');\n        }\n        // Needs to happen after the position is updated\n        // so the focus trap anchors are in the right place.\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            this._updateFocusTrapState();\n        }\n    }\n    ngOnDestroy() {\n        this._eventCleanups.forEach(cleanup => cleanup());\n        this._focusTrap?.destroy();\n        this._anchor?.remove();\n        this._anchor = null;\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurs the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true, 'mouse');\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        if (isOpen && openedVia) {\n            this._openedVia = openedVia;\n        }\n        const result = this._setOpen(isOpen, \n        /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n        if (!isOpen) {\n            this._openedVia = null;\n        }\n        return result;\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param focusOrigin Origin to use when restoring focus.\n     */\n    _setOpen(isOpen, restoreFocus, focusOrigin) {\n        if (isOpen === this._opened) {\n            return Promise.resolve(isOpen ? 'open' : 'close');\n        }\n        this._opened = isOpen;\n        if (this._container?._transitionsEnabled) {\n            // Note: it's importatnt to set this as early as possible,\n            // otherwise the animation can look glitchy in some cases.\n            this._setIsAnimating(true);\n        }\n        else {\n            // Simulate the animation events if animations are disabled.\n            setTimeout(() => {\n                this._animationStarted.next();\n                this._animationEnd.next();\n            });\n        }\n        this._elementRef.nativeElement.classList.toggle('mat-drawer-opened', isOpen);\n        if (!isOpen && restoreFocus) {\n            this._restoreFocus(focusOrigin);\n        }\n        // Needed to ensure that the closing sequence fires off correctly.\n        this._changeDetectorRef.markForCheck();\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    /** Toggles whether the drawer is currently animating. */\n    _setIsAnimating(isAnimating) {\n        this._elementRef.nativeElement.classList.toggle('mat-drawer-animating', isAnimating);\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement.offsetWidth || 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // Trap focus only if the backdrop is enabled. Otherwise, allow end user to interact with the\n            // sidenav content.\n            this._focusTrap.enabled = !!this._container?.hasBackdrop && this.opened;\n        }\n    }\n    /**\n     * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n     * when it's in the `end` position so that it comes after the content and the visual order\n     * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n     * started off as `end` and was changed to `start`.\n     */\n    _updatePositionInParent(newPosition) {\n        // Don't move the DOM node around on the server, because it can throw off hydration.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        const parent = element.parentNode;\n        if (newPosition === 'end') {\n            if (!this._anchor) {\n                this._anchor = this._doc.createComment('mat-drawer-anchor');\n                parent.insertBefore(this._anchor, element);\n            }\n            parent.appendChild(element);\n        }\n        else if (this._anchor) {\n            this._anchor.parentNode.insertBefore(element, this._anchor);\n        }\n    }\n    /** Event handler for animation events. */\n    _handleTransitionEvent = (event) => {\n        const element = this._elementRef.nativeElement;\n        if (event.target === element) {\n            this._ngZone.run(() => {\n                if (event.type === 'transitionrun') {\n                    this._animationStarted.next(event);\n                }\n                else {\n                    // Don't toggle the animating state on `transitioncancel` since another animation should\n                    // start afterwards. This prevents the drawer from blinking if an animation is interrupted.\n                    if (event.type === 'transitionend') {\n                        this._setIsAnimating(false);\n                    }\n                    this._animationEnd.next(event);\n                }\n            });\n        }\n    };\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDrawer, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatDrawer, isStandalone: true, selector: \"mat-drawer\", inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, host: { attributes: { \"tabIndex\": \"-1\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"style.visibility\": \"(!_container && !opened) ? \\\"hidden\\\" : null\" }, classAttribute: \"mat-drawer\" }, viewQueries: [{ propertyName: \"_content\", first: true, predicate: [\"content\"], descendants: true }], exportAs: [\"matDrawer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDrawer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer', exportAs: 'matDrawer', host: {\n                        'class': 'mat-drawer',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        // The styles that render the sidenav off-screen come from the drawer container. Prior to #30235\n                        // this was also done by the animations module which some internal tests seem to depend on.\n                        // Simulate it by toggling the `hidden` attribute instead.\n                        '[style.visibility]': '(!_container && !opened) ? \"hidden\" : null',\n                        'tabIndex': '-1',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, imports: [CdkScrollable], template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { position: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], disableClose: [{\n                type: Input\n            }], autoFocus: [{\n                type: Input\n            }], opened: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], openedStart: [{\n                type: Output\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], closedStart: [{\n                type: Output\n            }], onPositionChanged: [{\n                type: Output,\n                args: ['positionChanged']\n            }], _content: [{\n                type: ViewChild,\n                args: ['content']\n            }] } });\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    _dir = inject(Directionality, { optional: true });\n    _element = inject(ElementRef);\n    _ngZone = inject(NgZone);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _transitionsEnabled = false;\n    /** All drawers in the container. Includes drawers from inside nested containers. */\n    _allDrawers;\n    /** Drawers that belong to this container. */\n    _drawers = new QueryList();\n    _content;\n    _userContent;\n    /** The drawer child with the `start` position. */\n    get start() {\n        return this._start;\n    }\n    /** The drawer child with the `end` position. */\n    get end() {\n        return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() {\n        return this._autosize;\n    }\n    set autosize(value) {\n        this._autosize = coerceBooleanProperty(value);\n    }\n    _autosize = inject(MAT_DRAWER_DEFAULT_AUTOSIZE);\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        return this._drawerHasBackdrop(this._start) || this._drawerHasBackdrop(this._end);\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    _backdropOverride;\n    /** Event emitted when the drawer backdrop is clicked. */\n    backdropClick = new EventEmitter();\n    /** The drawer at the start/end position, independent of direction. */\n    _start;\n    _end;\n    /**\n     * The drawer at the left/right. When direction changes, these will change as well.\n     * They're used as aliases for the above to set the left/right style properly.\n     * In LTR, _left == _start and _right == _end.\n     * In RTL, _left == _end and _right == _start.\n     */\n    _left;\n    _right;\n    /** Emits when the component is destroyed. */\n    _destroyed = new Subject();\n    /** Emits on every ngDoCheck. Used for debouncing reflows. */\n    _doCheckSubject = new Subject();\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     */\n    _contentMargins = { left: null, right: null };\n    _contentMarginChanges = new Subject();\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    _injector = inject(Injector);\n    constructor() {\n        const platform = inject(Platform);\n        const viewportRuler = inject(ViewportRuler);\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._validateDrawers();\n            this.updateContentMargins();\n        });\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        if (this._animationMode !== 'NoopAnimations' && platform.isBrowser) {\n            this._ngZone.runOutsideAngular(() => {\n                // Enable the animations after a delay in order to skip\n                // the initial transition if a drawer is open by default.\n                setTimeout(() => {\n                    this._element.nativeElement.classList.add('mat-drawer-transition');\n                    this._transitionsEnabled = true;\n                }, 200);\n            });\n        }\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject\n                .pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed))\n                .subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange\n                .pipe(takeUntil(this._drawers.changes))\n                .subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            afterNextRender({ read: () => this._validateDrawers() }, { injector: this._injector });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        drawer._modeChanged\n            .pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n            .subscribe(() => {\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return ((this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over'));\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._drawerHasBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return ((this._isDrawerOpen(this._start) && this._drawerHasBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._drawerHasBackdrop(this._end)));\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n    // Whether argument drawer should have a backdrop when it opens\n    _drawerHasBackdrop(drawer) {\n        if (this._backdropOverride == null) {\n            return !!drawer && drawer.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDrawerContainer, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.2.0\", type: MatDrawerContainer, isStandalone: true, selector: \"mat-drawer-container\", inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatDrawerContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatDrawerContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatDrawer, descendants: true }], viewQueries: [{ propertyName: \"_userContent\", first: true, predicate: MatDrawerContent, descendants: true }], exportAs: [\"matDrawerContainer\"], ngImport: i0, template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-drawer-content>\\n    <ng-content></ng-content>\\n  </mat-drawer-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-sys-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-sys-background));box-sizing:border-box;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color, color-mix(in srgb, var(--mat-sys-neutral-variant20) 40%, transparent))}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(forced-colors: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-content.mat-drawer-content-hidden{opacity:0}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow, none);background-color:var(--mat-sidenav-container-background-color, var(--mat-sys-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));width:var(--mat-sidenav-container-width, 360px);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(forced-colors: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(forced-colors: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-transition .mat-drawer{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating){visibility:hidden;box-shadow:none}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating) .mat-drawer-inner-container{display:none}.mat-drawer.mat-drawer-opened.mat-drawer-opened{transform:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"component\", type: MatDrawerContent, selector: \"mat-drawer-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDrawerContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer-container', exportAs: 'matDrawerContainer', host: {\n                        'class': 'mat-drawer-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatDrawerContainer,\n                        },\n                    ], imports: [MatDrawerContent], template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-drawer-content>\\n    <ng-content></ng-content>\\n  </mat-drawer-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-sys-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-sys-background));box-sizing:border-box;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color, color-mix(in srgb, var(--mat-sys-neutral-variant20) 40%, transparent))}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(forced-colors: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-content.mat-drawer-content-hidden{opacity:0}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow, none);background-color:var(--mat-sidenav-container-background-color, var(--mat-sys-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));width:var(--mat-sidenav-container-width, 360px);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(forced-colors: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(forced-colors: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-transition .mat-drawer{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating){visibility:hidden;box-shadow:none}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating) .mat-drawer-inner-container{display:none}.mat-drawer.mat-drawer-opened.mat-drawer-opened{transform:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], ctorParameters: () => [], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatDrawer, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatDrawerContent]\n            }], _userContent: [{\n                type: ViewChild,\n                args: [MatDrawerContent]\n            }], autosize: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], backdropClick: [{\n                type: Output\n            }] } });\n\nclass MatSidenavContent extends MatDrawerContent {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSidenavContent, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatSidenavContent, isStandalone: true, selector: \"mat-sidenav-content\", host: { classAttribute: \"mat-drawer-content mat-sidenav-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatSidenavContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSidenavContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-sidenav-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content mat-sidenav-content',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatSidenavContent,\n                        },\n                    ],\n                }]\n        }] });\nclass MatSidenav extends MatDrawer {\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() {\n        return this._fixedInViewport;\n    }\n    set fixedInViewport(value) {\n        this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    _fixedInViewport = false;\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() {\n        return this._fixedTopGap;\n    }\n    set fixedTopGap(value) {\n        this._fixedTopGap = coerceNumberProperty(value);\n    }\n    _fixedTopGap = 0;\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() {\n        return this._fixedBottomGap;\n    }\n    set fixedBottomGap(value) {\n        this._fixedBottomGap = coerceNumberProperty(value);\n    }\n    _fixedBottomGap = 0;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSidenav, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatSidenav, isStandalone: true, selector: \"mat-sidenav\", inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, host: { attributes: { \"tabIndex\": \"-1\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-sidenav-fixed\": \"fixedInViewport\", \"style.top.px\": \"fixedInViewport ? fixedTopGap : null\", \"style.bottom.px\": \"fixedInViewport ? fixedBottomGap : null\" }, classAttribute: \"mat-drawer mat-sidenav\" }, providers: [{ provide: MatDrawer, useExisting: MatSidenav }], exportAs: [\"matSidenav\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSidenav, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav', exportAs: 'matSidenav', host: {\n                        'class': 'mat-drawer mat-sidenav',\n                        'tabIndex': '-1',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, imports: [CdkScrollable], providers: [{ provide: MatDrawer, useExisting: MatSidenav }], template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], propDecorators: { fixedInViewport: [{\n                type: Input\n            }], fixedTopGap: [{\n                type: Input\n            }], fixedBottomGap: [{\n                type: Input\n            }] } });\nclass MatSidenavContainer extends MatDrawerContainer {\n    _allDrawers = undefined;\n    // We need an initializer here to avoid a TS error.\n    _content = undefined;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSidenavContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.2.0\", type: MatSidenavContainer, isStandalone: true, selector: \"mat-sidenav-container\", host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container mat-sidenav-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatSidenavContainer,\n            },\n            {\n                provide: MatDrawerContainer,\n                useExisting: MatSidenavContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatSidenavContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatSidenav, descendants: true }], exportAs: [\"matSidenavContainer\"], usesInheritance: true, ngImport: i0, template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-sidenav-content>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-sys-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-sys-background));box-sizing:border-box;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color, color-mix(in srgb, var(--mat-sys-neutral-variant20) 40%, transparent))}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(forced-colors: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-content.mat-drawer-content-hidden{opacity:0}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow, none);background-color:var(--mat-sidenav-container-background-color, var(--mat-sys-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));width:var(--mat-sidenav-container-width, 360px);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(forced-colors: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(forced-colors: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-transition .mat-drawer{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating){visibility:hidden;box-shadow:none}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating) .mat-drawer-inner-container{display:none}.mat-drawer.mat-drawer-opened.mat-drawer-opened{transform:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"component\", type: MatSidenavContent, selector: \"mat-sidenav-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSidenavContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav-container', exportAs: 'matSidenavContainer', host: {\n                        'class': 'mat-drawer-container mat-sidenav-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatSidenavContainer,\n                        },\n                        {\n                            provide: MatDrawerContainer,\n                            useExisting: MatSidenavContainer,\n                        },\n                    ], imports: [MatSidenavContent], template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-sidenav-content>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-sys-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-sys-background));box-sizing:border-box;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color, color-mix(in srgb, var(--mat-sys-neutral-variant20) 40%, transparent))}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(forced-colors: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-content.mat-drawer-content-hidden{opacity:0}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow, none);background-color:var(--mat-sidenav-container-background-color, var(--mat-sys-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));width:var(--mat-sidenav-container-width, 360px);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(forced-colors: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(forced-colors: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-transition .mat-drawer{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating){visibility:hidden;box-shadow:none}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating) .mat-drawer-inner-container{display:none}.mat-drawer.mat-drawer-opened.mat-drawer-opened{transform:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatSidenav, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatSidenavContent]\n            }] } });\n\nclass MatSidenavModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSidenavModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSidenavModule, imports: [MatCommonModule,\n            CdkScrollableModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent], exports: [CdkScrollableModule,\n            MatCommonModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSidenavModule, imports: [MatCommonModule,\n            CdkScrollableModule, CdkScrollableModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSidenavModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        CdkScrollableModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                }]\n        }] });\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst matDrawerAnimations = {\n    // Represents\n    // trigger('transform', [\n    //   // We remove the `transform` here completely, rather than setting it to zero, because:\n    //   // 1. Having a transform can cause elements with ripples or an animated\n    //   //    transform to shift around in Chrome with an RTL layout (see #10023).\n    //   // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    //   state(\n    //     'open, open-instant',\n    //     style({\n    //       'transform': 'none',\n    //       'visibility': 'visible',\n    //     }),\n    //   ),\n    //   state(\n    //     'void',\n    //     style({\n    //       // Avoids the shadow showing up when closed in SSR.\n    //       'box-shadow': 'none',\n    //       'visibility': 'hidden',\n    //     }),\n    //   ),\n    //   transition('void => open-instant', animate('0ms')),\n    //   transition(\n    //     'void <=> open, open-instant => void',\n    //     animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'),\n    //   ),\n    // ])\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: {\n        type: 7,\n        name: 'transform',\n        definitions: [\n            {\n                type: 0,\n                name: 'open, open-instant',\n                styles: {\n                    type: 6,\n                    styles: { transform: 'none', visibility: 'visible' },\n                    offset: null,\n                },\n            },\n            {\n                type: 0,\n                name: 'void',\n                styles: {\n                    type: 6,\n                    styles: { 'box-shadow': 'none', visibility: 'hidden' },\n                    offset: null,\n                },\n            },\n            {\n                type: 1,\n                expr: 'void => open-instant',\n                animation: { type: 4, styles: null, timings: '0ms' },\n                options: null,\n            },\n            {\n                type: 1,\n                expr: 'void <=> open, open-instant => void',\n                animation: {\n                    type: 4,\n                    styles: null,\n                    timings: '400ms cubic-bezier(0.25, 0.8, 0.25, 1)',\n                },\n                options: null,\n            },\n        ],\n        options: {},\n    },\n};\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };\n","import { map } from './map';\nexport function mapTo(value) {\n    return map(() => value);\n}\n","import * as i0 from '@angular/core';\nimport { Directive, inject, ElementRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ContentChildren, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\nclass MatToolbarRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatToolbarRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatToolbarRow, isStandalone: true, selector: \"mat-toolbar-row\", host: { classAttribute: \"mat-toolbar-row\" }, exportAs: [\"matToolbarRow\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatToolbarRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-toolbar-row',\n                    exportAs: 'matToolbarRow',\n                    host: { 'class': 'mat-toolbar-row' },\n                }]\n        }] });\nclass MatToolbar {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    _document = inject(DOCUMENT);\n    // TODO: should be typed as `ThemePalette` but internal apps pass in arbitrary strings.\n    /**\n     * Theme color of the toolbar. This API is supported in M2 themes only, it has\n     * no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/toolbar/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    color;\n    /** Reference to all toolbar row elements that have been projected. */\n    _toolbarRows;\n    constructor() { }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n        }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    _checkToolbarMixedModes() {\n        if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            // Check if there are any other DOM nodes that can display content but aren't inside of\n            // a <mat-toolbar-row> element.\n            const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n                .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n                .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n                .some(node => !!(node.textContent && node.textContent.trim()));\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatToolbar, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatToolbar, isStandalone: true, selector: \"mat-toolbar\", inputs: { color: \"color\" }, host: { properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"class.mat-toolbar-multiple-rows\": \"_toolbarRows.length > 0\", \"class.mat-toolbar-single-row\": \"_toolbarRows.length === 0\" }, classAttribute: \"mat-toolbar\" }, queries: [{ propertyName: \"_toolbarRows\", predicate: MatToolbarRow, descendants: true }], exportAs: [\"matToolbar\"], ngImport: i0, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color, var(--mat-sys-surface));color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font, var(--mat-sys-title-large-font));font-size:var(--mat-toolbar-title-text-size, var(--mat-sys-title-large-size));line-height:var(--mat-toolbar-title-text-line-height, var(--mat-sys-title-large-line-height));font-weight:var(--mat-toolbar-title-text-weight, var(--mat-sys-title-large-weight));letter-spacing:var(--mat-toolbar-title-text-tracking, var(--mat-sys-title-large-tracking));margin:0}@media(forced-colors: active){.mat-toolbar{outline:solid 1px}}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mdc-text-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface));--mdc-outlined-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height, 56px)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height, 56px)}}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatToolbar, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-toolbar', exportAs: 'matToolbar', host: {\n                        'class': 'mat-toolbar',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                        '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color, var(--mat-sys-surface));color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font, var(--mat-sys-title-large-font));font-size:var(--mat-toolbar-title-text-size, var(--mat-sys-title-large-size));line-height:var(--mat-toolbar-title-text-line-height, var(--mat-sys-title-large-line-height));font-weight:var(--mat-toolbar-title-text-weight, var(--mat-sys-title-large-weight));letter-spacing:var(--mat-toolbar-title-text-tracking, var(--mat-sys-title-large-tracking));margin:0}@media(forced-colors: active){.mat-toolbar{outline:solid 1px}}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mdc-text-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface));--mdc-outlined-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height, 56px)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height, 56px)}}\"] }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input\n            }], _toolbarRows: [{\n                type: ContentChildren,\n                args: [MatToolbarRow, { descendants: true }]\n            }] } });\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\nclass MatToolbarModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.0\", ngImport: i0, type: MatToolbarModule, imports: [MatCommonModule, MatToolbar, MatToolbarRow], exports: [MatToolbar, MatToolbarRow, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatToolbarModule, imports: [MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatToolbarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatToolbar, MatToolbarRow],\n                    exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                }]\n        }] });\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n"],"x_google_ignoreList":[2,4,5,6]}