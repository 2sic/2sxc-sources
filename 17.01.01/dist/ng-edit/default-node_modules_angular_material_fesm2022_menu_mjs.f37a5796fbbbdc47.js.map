{"version":3,"file":"default-node_modules_angular_material_fesm2022_menu_mjs.f37a5796fbbbdc47.js","mappings":"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","names":["_c0","MatMenuItem_Conditional_4_Template","rf","ctx","i0","_c1","_c2","MatMenu_ng_template_0_Template","_r2","$event","ctx_r1","_handleKeydown","ctx_r3","closed","emit","ctx_r4","_onAnimationStart","ctx_r5","_onAnimationDone","ctx_r0","panelId","_classList","_panelAnimationState","ariaLabel","ariaLabelledby","ariaDescribedby","_c3","MAT_MENU_PANEL","InjectionToken","MatMenuItem","constructor","_elementRef","_document","_focusMonitor","_parentMenu","_changeDetectorRef","this","role","disabled","disableRipple","_hovered","Subject","_focused","_highlighted","_triggersSubmenu","addItem","focus","origin","options","focusVia","_getHostElement","next","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","removeItem","complete","_getTabIndex","nativeElement","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","querySelectorAll","i","length","remove","textContent","trim","_setHighlighted","isHighlighted","markForCheck","_setTriggersSubmenu","triggersSubmenu","_hasFocus","activeElement","static","ɵfac","t","DOCUMENT","i1","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","inputs","booleanAttribute","exportAs","features","attrs","ngContentSelectors","decls","vars","consts","template","dependencies","i2","encapsulation","changeDetection","MAT_MENU_CONTENT","MatMenuContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_attached","attach","context","_portal","TemplatePortal","detach","_outlet","DomPortalOutlet","createElement","element","elementRef","parentNode","insertBefore","outletElement","isAttached","dispose","ɵdir","provide","useExisting","matMenuAnimations","transformMenu","trigger","state","style","opacity","transform","transition","animate","fadeInItems","menuPanelUid","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","MatMenu","_xPosition","value","setPositionClasses","_yPosition","panelClass","classes","previousPanelClass","_previousPanelClass","split","forEach","className","classList","_ngZone","defaultOptions","_elevationPrefix","_baseElevation","_directDescendantItems","QueryList","_animationDone","EventEmitter","close","overlayPanelClass","hasBackdrop","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","FocusKeyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","changes","pipe","startWith","switchMap","items","merge","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","toArray","index","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","destroy","_firstItemFocusSubscription","unsubscribe","_item","keyCode","ESCAPE","hasModifierKey","LEFT_ARROW","parentMenu","direction","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","setFocusOrigin","onKeydown","focusFirstItem","onStable","take","menuPanel","first","closest","contains","document","setFirstItemActive","resetActiveItem","setElevation","depth","elevation","newElevation","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_isAnimating","toState","scrollTop","_allItems","reset","filter","notifyOnChanges","contentQueries","dirIndex","_t","lazyContent","viewQuery","TemplateRef","templateRef","outputs","i1$1","styles","data","animation","MAT_MENU_SCROLL_STRATEGY","overlay","inject","Overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_MENU_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatMenuTrigger","_deprecatedMatMenuTriggerFor","menu","v","_menu","_menuCloseSubscription","reason","_destroyMenu","_parentMaterialMenu","_menuItemInstance","_overlay","_element","scrollStrategy","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","Subscription","EMPTY","_hoverSubscription","ChangeDetectorRef","_handleTouchStart","isFakeTouchstartFromScreenReader","_openedBy","undefined","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","addEventListener","_handleHover","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","takeUntil","withLockedPosition","reapplyLastPosition","updatePosition","_setIsMenuOpen","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","OverlayConfig","position","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","run","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","_parentInnerPadding","firstItem","offsetTop","withPositions","backdrop","backdropClick","detachments","parentClose","of","hover","active","_handleMousedown","isFakeMousedownFromScreenReader","button","ENTER","SPACE","_handleClick","delay","asapScheduler","i1$2","i3","MatMenuModule","ɵmod","ɵinj","providers","imports","CommonModule","MatRippleModule","MatCommonModule","OverlayModule","CdkScrollableModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/menu.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Optional, Input, Directive, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, inject, ChangeDetectorRef, Self, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport * as i1$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/material/core';\nimport { MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\nimport * as i1$2 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem {\n    constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Whether the menu item is disabled. */\n        this.disabled = false;\n        /** Whether ripples are disabled on the menu item. */\n        this.disableRipple = false;\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        _parentMenu?.addItem?.(this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element, so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons, so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _setTriggersSubmenu(triggersSubmenu) {\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._triggersSubmenu = triggersSubmenu;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatMenuItem, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i1.FocusMonitor }, { token: MAT_MENU_PANEL, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.0.4\", type: MatMenuItem, selector: \"[mat-menu-item]\", inputs: { role: \"role\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute] }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-mdc-menu-item-highlighted\": \"_highlighted\", \"class.mat-mdc-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-mdc-menu-item mat-mdc-focus-indicator\" }, exportAs: [\"matMenuItem\"], ngImport: i0, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\", dependencies: [{ kind: \"directive\", type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', host: {\n                        '[attr.role]': 'role',\n                        'class': 'mat-mdc-menu-item mat-mdc-focus-indicator',\n                        '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\" }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: i0.ChangeDetectorRef }], propDecorators: { role: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n/** Menu content that will be rendered lazily once the menu is opened. */\nclass MatMenuContent {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        this._changeDetectorRef?.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatMenuContent, deps: [{ token: i0.TemplateRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: MatMenuContent, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ChangeDetectorRef }] });\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\nlet menuPanelUid = 0;\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\nclass MatMenu {\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    constructor(_elementRef, _ngZone, defaultOptions, \n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 8;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n        this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n        this._xPosition = defaultOptions.xPosition;\n        this._yPosition = defaultOptions.yPosition;\n        this.backdropClass = defaultOptions.backdropClass;\n        this.overlapTrigger = defaultOptions.overlapTrigger;\n        this.hasBackdrop = defaultOptions.hasBackdrop;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._directDescendantItems.destroy();\n        this.closed.complete();\n        this._firstItemFocusSubscription?.unsubscribe();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n        // Don't allow the event to propagate if we've already handled it, or it may\n        // end up reaching other overlays that were opened earlier (see #22694).\n        event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n        this._firstItemFocusSubscription?.unsubscribe();\n        this._firstItemFocusSubscription = this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            let menuPanel = null;\n            if (this._directDescendantItems.length) {\n                // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n            }\n            // If an item in the menuPanel is already focused, avoid overriding the focus.\n            if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n                const manager = this._keyManager;\n                manager.setFocusOrigin(origin).setFirstItemActive();\n                // If there's no active item at this point, it means that all the items are disabled.\n                // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n                // give _some_ feedback to screen readers.\n                if (!manager.activeItem && menuPanel) {\n                    menuPanel.focus();\n                }\n            }\n        });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n        // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n        this._changeDetectorRef?.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatMenu, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.0.4\", type: MatMenu, selector: \"mat-menu\", inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: [\"overlapTrigger\", \"overlapTrigger\", booleanAttribute], hasBackdrop: [\"hasBackdrop\", \"hasBackdrop\", (value) => (value == null ? null : booleanAttribute(value))], panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, host: { attributes: { \"ngSkipHydration\": \"\" }, properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], exportAs: [\"matMenu\"], ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], dependencies: [{ kind: \"directive\", type: i1$1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                        'ngSkipHydration': '',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }], propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], hasBackdrop: [{\n                type: Input,\n                args: [{ transform: (value) => (value == null ? null : booleanAttribute(value)) }]\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\n\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger {\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n        this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n    }\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof MatMenu ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    }\n    ngAfterContentInit() {\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        const menu = this.menu;\n        if (this._menuOpen || !menu) {\n            return;\n        }\n        const overlayRef = this._createOverlay(menu);\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(menu, positionStrategy);\n        overlayConfig.hasBackdrop =\n            menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n        overlayRef.attach(this._getPortal(menu));\n        if (menu.lazyContent) {\n            menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu(menu);\n        if (menu instanceof MatMenu) {\n            menu._startAnimation();\n            menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu?.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof MatMenu) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            menu?.lazyContent?.detach();\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu(menu) {\n        menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        menu.direction = this.dir;\n        this._setMenuElevation(menu);\n        menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation(menu) {\n        if (menu.setElevation) {\n            let depth = 0;\n            let parentMenu = menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        if (isOpen !== this._menuOpen) {\n            this._menuOpen = isOpen;\n            this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n            if (this.triggersSubmenu()) {\n                this._menuItemInstance._setHighlighted(isOpen);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay(menu) {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig(menu);\n            this._subscribeToPositions(menu, config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig(menu) {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir,\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(menu, position) {\n        if (menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                // @breaking-change 15.0.0 Remove null check for `ngZone`.\n                // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n                // updating something in the view so we need to bring it back in.\n                if (this._ngZone) {\n                    this._ngZone.run(() => menu.setPositionClasses(posX, posY));\n                }\n                else {\n                    menu.setPositionClasses(posX, posY);\n                }\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(menu, positionStrategy) {\n        let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            if (this._parentMaterialMenu) {\n                if (this._parentInnerPadding == null) {\n                    const firstItem = this._parentMaterialMenu.items.first;\n                    this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n                }\n                offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n            }\n        }\n        else if (!menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal(menu) {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n            this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatMenuTrigger, deps: [{ token: i1$2.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: MAT_MENU_SCROLL_STRATEGY }, { token: MAT_MENU_PANEL, optional: true }, { token: MatMenuItem, optional: true, self: true }, { token: i3.Directionality, optional: true }, { token: i1.FocusMonitor }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"menu ? \\\"menu\\\" : null\", \"attr.aria-expanded\": \"menuOpen\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" }, classAttribute: \"mat-mdc-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-mdc-menu-trigger',\n                        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n                        '[attr.aria-expanded]': 'menuOpen',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }], ctorParameters: () => [{ type: i1$2.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_SCROLL_STRATEGY]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: MatMenuItem, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i1.FocusMonitor }, { type: i0.NgZone }], propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n\nclass MatMenuModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatMenuModule, declarations: [MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger], imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule], exports: [CdkScrollableModule,\n            MatMenu,\n            MatCommonModule,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule, CdkScrollableModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatMenu,\n                        MatCommonModule,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    declarations: [MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, fadeInItems, matMenuAnimations, transformMenu };\n"],"x_google_ignoreList":[0]}