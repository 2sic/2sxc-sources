{"version":3,"file":"projects_eav-ui_src_app_app-administration_services_index_ts-projects_eav-ui_src_app_shared_s-c5e3e9.ddb0960e1b3ecc4b.js","mappings":"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","names":["ExportAppService","HttpServiceBaseSignal","getAppInfo","httpResource","url","this","apiUrl","params","appid","appId","zoneId","exportAppUrl","webApiAppRoot","exportForVersionControl","_x","_this","_asyncToGenerator","includeContentGroups","resetAppGuid","withFiles","getStatusPromise","toString","withPortalFiles","apply","arguments","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_5__","jDH","factory","Éµfac","webApiViews","ViewsService","getAllOnce","getAllLive","refresh","delete","id","Id","import","file","formData","FormData","append","http","post","export","window","open","getPolymorphismLive","getUsage","guid","newHttpResource","_angular_core__WEBPACK_IMPORTED_MODULE_4__","webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","nameId","getHttpApiUrl","contentTypeId","getType","getTypes","scope","defaultValue","retrieveContentTypesPromise","fetchPromise","getScopesPromise","then","scopesData","scopes","old","Object","keys","map","key","name","value","getScopesSig","scopesSignal","computed","getScopesV2Promise","save","contentType","staticName","NameId","files","createGhost","sourceNameId","ClipboardService","constructor","snackBar","copyToClipboard","text","duration","i0","i1","_angular_core__WEBPACK_IMPORTED_MODULE_1__","providedIn","FocusKeyManager","ListKeyManager","_origin","setFocusOrigin","origin","setActiveItem","item","super","activeItem","focus","webApiAppPartsRoot","ImportAppPartsService","importAppParts","resetApp","_angular_core__WEBPACK_IMPORTED_MODULE_3__","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText","ExportAppPartsService","getContentInfoLiveParam","exportParts","contentTypeIds","entityIds","templateIds","join","ImportAppService","importApp","changedName","retryOnDuplicate","pipe","switchMap","Messages","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","logSpecs","all","getAll","getAllSig","getAllRes","importQuery","clonePipeline","update","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","log","classLog","fnIf","r","webApiEntityList","initial","l","res","obs","from","fileBase64","AppId","ContentBase64","success","Success","clonePipelinePromise","_angular_core__WEBPACK_IMPORTED_MODULE_9__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/shared/services/clipboard.service.ts","./node_modules/@angular/cdk/fesm2022/focus-key-manager-CPmlyB_c.mjs","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts"],"sourcesContent":["import { httpResource } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\nconst webApiAppRootStatistics = 'admin/app/Statistics';\r\nconst webApiAppRootSaveData = 'admin/app/SaveData';\r\n\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBaseSignal {\r\n\r\n  getAppInfo() {\r\n    return httpResource<AppInfo>(() => ({\r\n      url: this.apiUrl(webApiAppRootStatistics),\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    }));\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n  async exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }): Promise<number> {\r\n    return this.getStatusPromise(webApiAppRootSaveData, {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViews = 'admin/view/all';\r\nconst webApiViewDelete = 'admin/view/delete';\r\nconst webApiViewImport = 'admin/view/import';\r\nconst webApiViewPolymorph = 'admin/view/polymorphism';\r\nconst webApiViewUsage = 'admin/view/usage';\r\nconst webApiJson = 'admin/view/json';\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBaseSignal {\r\n\r\n  getAllOnce() {\r\n    return httpResource<View[]>(() => {\r\n      return ({\r\n        url: this.apiUrl(webApiViews),\r\n        params: { appId: this.appId }\r\n      });\r\n    });\r\n  }\r\n\r\n  getAllLive(refresh: Signal<unknown>) {\r\n    return httpResource<View[]>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiViews),\r\n        params: { appId: this.appId }\r\n      });\r\n    });\r\n  }\r\n\r\n  async delete(id: number): Promise<number> {\r\n    return this.getStatusPromise(webApiViewDelete, {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiJson)\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphismLive(refresh: Signal<unknown>) {\r\n    return httpResource<Polymorphism>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiViewPolymorph),\r\n        params: { appId: this.appId }\r\n      });\r\n    });\r\n  }\r\n  getUsage(guid: string) {\r\n    return this.newHttpResource<ViewUsage[]>(() => ({\r\n      url: this.apiUrl(webApiViewUsage),\r\n      params: { appId: this.appId, guid: guid }\r\n    }));\r\n  }\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { computed, Injectable, Signal } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  // TODO: @2dg, ask 2dm \r\n  // content-export.component.ts\r\n  // content-import.component.ts\r\n  // data.component.ts\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  getType(nameId: string) {\r\n    return httpResource<ContentType>(() => ({\r\n      url: this.apiUrl(webApiTypeGet),\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }));\r\n  }\r\n\r\n  getTypes(scope: Signal<string>) {\r\n    return httpResource<ContentType[]>(() => ({\r\n      url: this.apiUrl(webApiTypes),\r\n      params: { appId: this.appId, scope: scope() }\r\n    }), {defaultValue: []});\r\n  }\r\n\r\n  retrieveContentTypesPromise(scope: string): Promise<ContentType[]> {\r\n    return this.fetchPromise<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  getScopesPromise(): Promise<ScopeOption[]> {\r\n    return this.fetchPromise<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).then(scopesData => {\r\n      const scopes = scopesData.old;\r\n      const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({\r\n        name: scopes[key],\r\n        value: key,\r\n      }));\r\n      return scopeOptions;\r\n    });\r\n  }\r\n\r\n  getScopesSig() {\r\n    const scopesSignal = httpResource<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(() => ({\r\n      url: this.apiUrl(webApiTypeScopes),\r\n      params: { appid: this.appId },\r\n    }));\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      // Access the value property directly without calling scopesSignal as a function\r\n      const value = scopesSignal.value;\r\n      const scopesData = value();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2Promise(): Promise<ScopeDetailsDto[]> {\r\n    return this.fetchPromise<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).then(scopesData => scopesData.scopes);\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../helpers/copy-to-clipboard.helper';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClipboardService {\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}","import { L as ListKeyManager } from './list-key-manager-C7tp3RbG.mjs';\n\nclass FocusKeyManager extends ListKeyManager {\n    _origin = 'program';\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\nexport { FocusKeyManager as F };\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBaseSignal {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\nconst webApiAppPartsGet = 'admin/appParts/get';\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBaseSignal {\r\n\r\n  getContentInfoLiveParam(scope: Signal<string>) {\r\n    return httpResource<ContentInfo>(() => {\r\n      return {\r\n        url: this.apiUrl(webApiAppPartsGet),\r\n        params: {\r\n          appid: this.appId,\r\n          zoneId: this.zoneId,\r\n          scope: scope()\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBaseSignal {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst logSpecs = {\r\n  all: true,\r\n  getAll: false,\r\n  getAllSig: true,\r\n  getAllLive: false,\r\n  getAllRes: true,\r\n  importQuery: false,\r\n  clonePipeline: false,\r\n  delete: false,\r\n  update: false,\r\n};\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  log = classLog({ PipelinesService }, logSpecs);\r\n  // TODO: @2dg, ask 2dm \r\n  getAll(contentType: string) {\r\n    const l = this.log.fnIf('getAll');\r\n    return l.r(this.getHttpApiUrl<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }));\r\n  }\r\n\r\n  // Full Code, repated x times\r\n  getAllLive(contentType: string, refresh: Signal<unknown>) {\r\n    this.log.fnIf('getAllLive', { contentType, refresh });\r\n    return httpResource<Query[]>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiEntityList),\r\n        params: { appId: this.appId, contentType: contentType }\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Experimental httpResource use! */\r\n  getAllRes(contentType: string, initial?: Query[]) {\r\n    const l = this.log.fnIf('getAllRes');\r\n    const res = httpResource<Query[]>(() => ({\r\n      url: webApiEntityList,\r\n      params: { appId: this.appId, contentType },\r\n    }), { defaultValue: initial });\r\n    return l.r(res);\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    const l = this.log.fnIf('importQuery');\r\n    const obs = from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n    return l.r(obs);\r\n  }\r\n\r\n  clonePipelinePromise(id: number): Promise<null> {\r\n    const l = this.log.fnIf('clonePipeline');\r\n    const obs = this.fetchPromise<null>(webApiQueryClone, {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n    return l.r(obs);\r\n  }\r\n\r\n  delete(id: number) {\r\n    const l = this.log.fnIf('delete');\r\n    const obs = this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n    return l.r(obs);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[4]}