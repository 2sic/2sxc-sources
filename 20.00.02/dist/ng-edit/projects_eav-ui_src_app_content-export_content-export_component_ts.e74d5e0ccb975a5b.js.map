{"version":3,"file":"projects_eav-ui_src_app_content-export_content-export_component_ts.e74d5e0ccb975a5b.js","mappings":"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","names":["webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","nameId","this","getHttpApiUrl","params","appId","contentTypeId","getType","httpResource","url","apiUrl","getTypes","scope","defaultValue","retrieveContentTypesPromise","fetchPromise","getScopesPromise","then","scopesData","scopes","old","Object","keys","map","key","name","value","getScopesSig","scopesSignal","appid","computed","getScopesV2Promise","save","contentType","http","post","delete","staticName","NameId","import","files","formData","FormData","file","append","zoneId","createGhost","sourceNameId","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_4__","jDH","factory","Éµfac","i0","lang_r3","ctx_r1","itemIds","length","$event","_r1","formValues","language","ContentExportComponent_Conditional_5_For_17_Template","recordExport","ContentExportComponent_Conditional_5_Conditional_26_Template","languageReferences","resourcesReferences","closeDialog","exportContent","languages","hasIdList","ngForm_r4","form","valid","ContentExportComponent","constructor","dialog","route","hostClass","contentExportService","transient","ContentExportService","contentTypesService","dialogConfigSvc","DialogConfigAppService","loading$","BehaviorSubject","contentType$","contentTypeStaticName","snapshot","paramMap","get","selectedIds","split","id","parseInt","ngOnInit","next","dialogSettings$","getCurrent$","forkJoin","subscribe","dialogSettings","Context","Language","List","defaultLanguage","Primary","ngOnDestroy","complete","close","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_3__","VBU","selectors","hostVars","hostBindings","rf","ctx","ContentExportComponent_Conditional_5_Template","tmp_0_0","Name","FormsModule","i3","MatFormFieldModule","i4","MatSelectModule","i5","MatOptionModule","MatRadioModule","i6","MatDialogActions","MatButtonModule","i7","AsyncPipe","styles"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/content-export/content-export.component.html","./projects/eav-ui/src/app/content-export/content-export.component.ts"],"sourcesContent":["import { httpResource } from '@angular/common/http';\r\nimport { computed, Injectable, Signal } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  // TODO: @2dg, ask 2dm \r\n  // content-export.component.ts\r\n  // content-import.component.ts\r\n  // data.component.ts\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  getType(nameId: string) {\r\n    return httpResource<ContentType>(() => ({\r\n      url: this.apiUrl(webApiTypeGet),\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }));\r\n  }\r\n\r\n  getTypes(scope: Signal<string>) {\r\n    return httpResource<ContentType[]>(() => ({\r\n      url: this.apiUrl(webApiTypes),\r\n      params: { appId: this.appId, scope: scope() }\r\n    }), {defaultValue: []});\r\n  }\r\n\r\n  retrieveContentTypesPromise(scope: string): Promise<ContentType[]> {\r\n    return this.fetchPromise<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  getScopesPromise(): Promise<ScopeOption[]> {\r\n    return this.fetchPromise<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).then(scopesData => {\r\n      const scopes = scopesData.old;\r\n      const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({\r\n        name: scopes[key],\r\n        value: key,\r\n      }));\r\n      return scopeOptions;\r\n    });\r\n  }\r\n\r\n  getScopesSig() {\r\n    const scopesSignal = httpResource<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(() => ({\r\n      url: this.apiUrl(webApiTypeScopes),\r\n      params: { appid: this.appId },\r\n    }));\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      // Access the value property directly without calling scopesSignal as a function\r\n      const value = scopesSignal.value;\r\n      const scopesData = value();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2Promise(): Promise<ScopeDetailsDto[]> {\r\n    return this.fetchPromise<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).then(scopesData => scopesData.scopes);\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Export {{ (contentType$ | async)?.Name }}</div>\r\n  </div>\r\n  @if ((loading$ | async) === false) {\r\n    <form #ngForm=\"ngForm\">\r\n      <div class=\"eav-dialog-content\">\r\n        <p>\r\n          This will generate an XML file which you can edit in Excel. If you just want to import new data, use this to export the schema\r\n          that you can then fill in using Excel. Please visit\r\n          <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n        </p>\r\n        <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n          <div>\r\n            <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n              <mat-label>Languages</mat-label>\r\n              <mat-select [(ngModel)]=\"formValues.language\" name=\"Language\">\r\n                <mat-option value=\"\">All</mat-option>\r\n                @for (lang of languages; track lang) {\r\n                  <mat-option [value]=\"lang.NameId\">{{ lang.NameId }}</mat-option>\r\n                }\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">Export data</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.recordExport\" name=\"RecordExport\" class=\"eav-radio-group\">\r\n              <mat-radio-button value=\"Blank\">No, just export blank data schema (for new data import) </mat-radio-button>\r\n              <mat-radio-button value=\"All\">Yes, export all content-items</mat-radio-button>\r\n              @if (hasIdList) {\r\n                <mat-radio-button value=\"Selection\"> Export selected {{ itemIds.length }} items </mat-radio-button>\r\n              }\r\n            </mat-radio-group>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">Value references to other languages</p>\r\n            <mat-radio-group\r\n              [(ngModel)]=\"formValues.languageReferences\"\r\n              name=\"LanguageReferences\"\r\n              [disabled]=\"formValues.recordExport === 'Blank'\"\r\n              class=\"eav-radio-group\"\r\n            >\r\n              <mat-radio-button value=\"Link\">Keep references to other languages (for re-import) </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">Replace references with values</mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">File / page references</p>\r\n            <mat-radio-group\r\n              [(ngModel)]=\"formValues.resourcesReferences\"\r\n              name=\"ResourcesReferences\"\r\n              [disabled]=\"formValues.recordExport === 'Blank'\"\r\n              class=\"eav-radio-group\"\r\n            >\r\n              <mat-radio-button value=\"Link\">Keep references (for re-import, for example Page:4711) </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">Replace references with real URLs (for example /Portals/0...) </mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <mat-dialog-actions align=\"end\">\r\n        <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button color=\"accent\" [disabled]=\"!ngForm.form.valid\" (click)=\"exportContent()\">Export Data</button>\r\n      </mat-dialog-actions>\r\n    </form>\r\n  }\r\n</div>\r\n","import { AsyncPipe } from '@angular/common';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { transient } from '../../../../core';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { DialogConfigAppService } from '../app-administration/services/dialog-config-app.service';\r\nimport { Language } from '../shared/models/language.model';\r\nimport { ContentExport } from './models/content-export.model';\r\nimport { ContentExportService } from './services/content-export.service';\r\n\r\n@Component({\r\n    selector: 'app-content-export',\r\n    templateUrl: './content-export.component.html',\r\n    styleUrls: ['./content-export.component.scss'],\r\n    imports: [\r\n        FormsModule,\r\n        MatFormFieldModule,\r\n        MatSelectModule,\r\n        MatOptionModule,\r\n        MatRadioModule,\r\n        MatDialogActions,\r\n        MatButtonModule,\r\n        AsyncPipe,\r\n    ]\r\n})\r\nexport class ContentExportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private contentExportService = transient(ContentExportService);\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private dialogConfigSvc = transient(DialogConfigAppService);\r\n\r\n  formValues: ContentExport;\r\n  languages: Language[];\r\n  itemIds: number[];\r\n  hasIdList = false;\r\n  loading$ = new BehaviorSubject(false);\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ContentExportComponent>,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    const selectedIds = this.route.snapshot.paramMap.get('selectedIds');\r\n    this.hasIdList = !!selectedIds;\r\n    if (this.hasIdList) {\r\n      this.itemIds = selectedIds.split(',').map(id => parseInt(id, 10));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.dialogConfigSvc.getCurrent$();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.languages = dialogSettings.Context.Language.List;\r\n\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentTypeStaticName: this.contentTypeStaticName,\r\n        language: '',\r\n        recordExport: this.hasIdList ? 'Selection' : 'All',\r\n        languageReferences: 'Link',\r\n        resourcesReferences: 'Link',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  exportContent() {\r\n    this.contentExportService.exportContent(this.formValues,\r\n      this.hasIdList && this.formValues.recordExport === 'Selection' ? this.itemIds : null);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}