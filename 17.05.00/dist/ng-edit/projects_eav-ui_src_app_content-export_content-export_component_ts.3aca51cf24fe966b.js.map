{"version":3,"file":"projects_eav-ui_src_app_content-export_content-export_component_ts.3aca51cf24fe966b.js","mappings":"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","names":["AppDialogConfigService","constructor","http","context","dnnContext","globalConfigService","featuresService","this","dialogSettings$","loadFromService","getShared$","appId","getDialogSettings","pipe","shareReplay","refCount","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","map","dialogSettings","Context","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","static","t","i0","i1","i2","i3","i4","i5","_angular_core__WEBPACK_IMPORTED_MODULE_5__","wxM","factory","Éµfac","lang_r4","NameId","ctx_r3","itemIds","length","$event","_r10","ctx_r9","formValues","ContentExportComponent_Conditional_5_For_17_Template","ctx_r11","recordExport","ContentExportComponent_Conditional_5_Conditional_26_Template","ctx_r12","languageReferences","ctx_r13","resourcesReferences","ctx_r14","closeDialog","ctx_r15","exportContent","ctx_r0","languages","hasIdList","_r1","form","valid","ContentExportComponent","dialogRef","route","contentExportService","appDialogConfigService","contentTypesService","hostClass","loading$","BehaviorSubject","contentType$","contentTypeStaticName","snapshot","paramMap","selectedIds","split","id","parseInt","ngOnInit","next","retrieveContentType","forkJoin","subscribe","contentType","defaultLanguage","Primary","ngOnDestroy","complete","close","_angular_core__WEBPACK_IMPORTED_MODULE_3__","In1","selectors","hostVars","hostBindings","rf","ctx","ContentExportService","ContentTypesService","decls","vars","consts","template","ContentExportComponent_Conditional_5_Template","tmp_0_0","Name","FormsModule","i6","MatFormFieldModule","i7","MatSelectModule","i8","i9","MatOptionModule","MatRadioModule","i10","MatDialogActions","MatButtonModule","i11","AsyncPipe","styles"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/content-export/content-export.component.html","./projects/eav-ui/src/app/content-export/content-export.component.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private dnnContext: DnnContext,\r\n    private globalConfigService: GlobalConfigService,\r\n    featuresService: FeaturesService,\r\n  ) {\r\n    featuresService.loadFromService(this);\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getShared$(appId?: number) {\r\n    appId ??= this.context.appId;\r\n    if (!this.dialogSettings$[appId])\r\n      this.dialogSettings$[appId] = this.getDialogSettings(appId).pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n    // TODO: probably should add an onDestroy and ensure all subscriptions are killed\r\n  }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dialogSettings => {\r\n        dialogSettings.Context.Language.List = dialogSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dialogSettings;\r\n      }),\r\n      tap(dialogSettings => {\r\n        this.globalConfigService.allowDebug(dialogSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Export {{ (contentType$ | async)?.Name }}</div>\r\n  </div>\r\n  @if ((loading$ | async) === false) {\r\n    <form #ngForm=\"ngForm\">\r\n      <div class=\"eav-dialog-content\">\r\n        <p>\r\n          This will generate an XML file which you can edit in Excel. If you just want to import new data, use this to\r\n          export the schema that you can then fill in using Excel. Please visit\r\n          <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n        </p>\r\n        <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n          <div>\r\n            <mat-form-field color=\"accent\" style=\"width: 100%;\">\r\n              <mat-label>Languages</mat-label>\r\n              <mat-select [(ngModel)]=\"formValues.language\" name=\"Language\">\r\n                <mat-option value=\"\">All</mat-option>\r\n                @for (lang of languages; track lang) {\r\n                  <mat-option [value]=\"lang.NameId\">{{ lang.NameId }}</mat-option>\r\n                }\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">Export data</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.recordExport\" name=\"RecordExport\" class=\"eav-radio-group\">\r\n              <mat-radio-button value=\"Blank\">No, just export blank data schema (for new data import)\r\n              </mat-radio-button>\r\n              <mat-radio-button value=\"All\">Yes, export all content-items</mat-radio-button>\r\n              @if (hasIdList) {\r\n                <mat-radio-button value=\"Selection\">\r\n                  Export selected {{ itemIds.length }} items\r\n                </mat-radio-button>\r\n              }\r\n            </mat-radio-group>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">Value references to other languages</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.languageReferences\" name=\"LanguageReferences\"\r\n              [disabled]=\"formValues.recordExport === 'Blank'\" class=\"eav-radio-group\">\r\n              <mat-radio-button value=\"Link\">Keep references to other languages (for re-import)\r\n              </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">Replace references with values</mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n          <div>\r\n            <p class=\"eav-radio-group-label\">File / page references</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.resourcesReferences\" name=\"ResourcesReferences\"\r\n              [disabled]=\"formValues.recordExport === 'Blank'\" class=\"eav-radio-group\">\r\n              <mat-radio-button value=\"Link\">Keep references (for re-import, for example Page:4711)\r\n              </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">Replace references with real URLs (for example\r\n                /Portals/0...)\r\n              </mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <mat-dialog-actions align=\"end\">\r\n        <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button color=\"accent\" [disabled]=\"!ngForm.form.valid\" (click)=\"exportContent()\">\r\n          Export Data\r\n        </button>\r\n      </mat-dialog-actions>\r\n    </form>\r\n  }\r\n</div>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Language } from '../edit/shared/models';\r\nimport { ContentExport } from './models/content-export.model';\r\nimport { ContentExportService } from './services/content-export.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-content-export',\r\n    templateUrl: './content-export.component.html',\r\n    styleUrls: ['./content-export.component.scss'],\r\n    standalone: true,\r\n    imports: [\r\n        FormsModule,\r\n        MatFormFieldModule,\r\n        MatSelectModule,\r\n        MatOptionModule,\r\n        MatRadioModule,\r\n        MatDialogActions,\r\n        MatButtonModule,\r\n        AsyncPipe,\r\n    ],\r\n    providers: [\r\n        ContentExportService,\r\n        ContentTypesService,\r\n        AppDialogConfigService,\r\n    ],\r\n})\r\nexport class ContentExportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  formValues: ContentExport;\r\n  languages: Language[];\r\n  itemIds: number[];\r\n  hasIdList = false;\r\n  loading$ = new BehaviorSubject(false);\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentExportComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentExportService: ContentExportService,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) {\r\n    const selectedIds = this.route.snapshot.paramMap.get('selectedIds');\r\n    this.hasIdList = !!selectedIds;\r\n    if (this.hasIdList) {\r\n      this.itemIds = selectedIds.split(',').map(id => parseInt(id, 10));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.appDialogConfigService.getShared$(); // .getDialogSettings();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.languages = dialogSettings.Context.Language.List;\r\n\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentTypeStaticName: this.contentTypeStaticName,\r\n        language: '',\r\n        recordExport: this.hasIdList ? 'Selection' : 'All',\r\n        languageReferences: 'Link',\r\n        resourcesReferences: 'Link',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportContent() {\r\n    this.contentExportService.exportContent(this.formValues,\r\n      this.hasIdList && this.formValues.recordExport === 'Selection' ? this.itemIds : null);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}