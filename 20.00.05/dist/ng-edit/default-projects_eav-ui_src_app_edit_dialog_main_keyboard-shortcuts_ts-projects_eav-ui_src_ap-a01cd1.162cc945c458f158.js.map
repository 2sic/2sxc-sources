{"version":3,"file":"default-projects_eav-ui_src_app_edit_dialog_main_keyboard-shortcuts_ts-projects_eav-ui_src_ap-a01cd1.162cc945c458f158.js","mappings":"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","names":["ExtendedFabSpeedDialActionDirective","constructor","elementRef","this","disabled","input","ngOnChanges","changes","nativeElement","toggleAttribute","static","__ngFactoryType__","i0","_angular_core__WEBPACK_IMPORTED_MODULE_1__","FsC","selectors","inputs","features","SaveCloseButtonBase","label","icon","ngClass","action","output","isDisabled","onClick","event","emit","outputs","ExtendedFabSpeedDialTriggerContentDirective","templateRef","_angular_core__WEBPACK_IMPORTED_MODULE_0__","ExtendedFabSpeedDialActionsContentDirective","MousedownStopPropagationDirective","onMousedown","stopPropagation","hostBindings","rf","ctx","$event","isEscape","key","isCtrlS","ctrlKey","metaKey","isCtrlEnter","BaseComponent","subscriptions","Subscription","ngOnDestroy","unsubscribe","VBU","decls","vars","template","encapsulation","logSpecs","doOnDialogClosed","DialogRoutingService","ServiceBase","router","route","super","log","classLog","snapshot","url","urlSegments","split","getParam","paramMap","get","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","fnIf","add","childDialogClosed$","subscribe","data","a","end","doOnDialogClosedWithData","#childDialogClosedWithData","urlSubRoute","params","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","navRelative","commands","events","pipe","filter","NavigationEnd","startWith","firstChild","map","pairwise","hadChildBefore","hasChildNow","tap","fn","snapShot","prev","curr","i1","_angular_core__WEBPACK_IMPORTED_MODULE_8__","jDH","factory","ɵfac","SaveCloseButtonComponent","consts","NgClass","MatIconModule","i2","MatRippleModule","i3","TranslateModule","i4","TippyDirective","styles","ExtendedFabSpeedDialTriggerDirective","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","toLowerCase","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","descendantElements","cloneElements","cloneUniqueId","source","type","value","name","context","getContext","drawImage","getMutableClientRect","element","rect","getBoundingClientRect","top","right","bottom","left","width","height","x","y","isInsideClientRect","clientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","target","_getEventTarget","cachedPosition","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","contains","window","scrollY","scrollX","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","extendStyles","dest","importantProperties","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","enable","userSelect","style","toggleVisibility","opacity","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","getTransform","Math","round","parseCssTimeUnitsToMs","multiplier","indexOf","parseFloat","parseCssPropertyValue","computedStyle","getPropertyValue","part","trim","Set","PreviewRef","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","_renderer","_previewEmbeddedView","_preview","attach","parent","_createPreview","supportsPopover","showPopover","destroy","remove","setTransform","addClass","className","classList","getTransitionDuration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","find","prop","propertyIndex","rawDurations","rawDelays","addEventListener","handler","listen","previewConfig","previewClass","previewTemplate","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","margin","setAttribute","Array","isArray","passiveEventListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","dragImportantProperties","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_rootElementCleanups","_cleanupShadowRootSelectStart","_previewContainer","_placeholderRef","_placeholder","_pickupPositionInElement","_anchor","_passiveTransform","_activeTransform","_hasStartedDragging","signal","_hasMoved","_initialContainer","_initialIndex","_parentPositions","_moveEvents","Subject","_pointerDirectionDelta","_pointerPositionAtLastDirectionChange","_lastKnownPointerPosition","_ownerSVGElement","_rootElementTapHighlight","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_lastTouchEventTime","_dragStartTime","_boundaryElement","_nativeInteractionsEnabled","_previewRect","_boundaryRect","_placeholderTemplate","_handles","_disabledHandles","_dropContainer","_parentDragRef","_cachedShadowRoot","lockAxis","dragStartDelay","scale","_disabled","_toggleNativeDragInteractions","handle","beforeStarted","started","released","ended","entered","exited","dropped","moved","constrainPosition","withRootElement","withParent","parentDragRef","registerDragItem","getPlaceholderElement","getRootElement","getVisibleElement","isDragging","withHandles","handles","coerceElement","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","rootElement","_removeRootElementListeners","renderer","runOutsideAngular","_pointerDown","_nativeDragStart","undefined","SVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","change","_containInsideBoundaryOnResize","dispose","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","complete","reset","resetToBoundary","isOverflowingParent","parentRect","childRect","offsetX","offsetY","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","setFreeDragPosition","_applyRootElementTransform","withPreviewContainer","_sortFromLastPointerPosition","_updateActiveDropContainer","_getConstrainedPointerPosition","next","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","abs","dragStartThreshold","isDelayElapsed","Date","now","_getDragStartDelay","_endDragSequence","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_updatePointerDirectionDelta","offset","activeTransform","observers","distance","_getDragDistance","delta","_pointerUp","stopDragging","webkitTapHighlightColor","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","shadowRoot","_getShadowRoot","dropContainer","shadowDomSelectStart","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","zIndex","_getPreviewInsertionPoint","body","replaceChild","start","getItemIndex","getScrollableParents","referenceElement","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","cleanupListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","cleanup","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","min","max","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","SingleAxisSortStrategy","_element","_sortPredicate","_itemPositions","_activeDraggables","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","transformAmount","activeDraggables","newPositionReference","_shouldEnterAsFirstChild","splice","parentElement","push","_cacheItemPositions","withSortPredicate","predicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","withElementContainer","elementToMeasure","b","immediateSibling","itemPositions","lastItemRect","firstItemRect","floor","MixedSortStrategy","_rootNode","_activeItems","deltaX","deltaY","_relatedNodes","childNodes","nextSibling","previousSwap","toSwapWith","current","overlapElement","after","before","newOverlapElement","_getRootNode","elementFromPoint","enterIndex","_getClosestItemIndexToPointer","targetItem","root","elementAtPoint","minDistance","Infinity","minIndex","hypot","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_container","_isDragging","_sortStrategy","_domRect","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_scrollNode","_stopScrollTimers","_scrollableElements","_initialScrollSnap","coercedElement","withOrientation","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","every","connectedTo","strategy","withScrollableParents","oldContainerIndex","newContainerIndex","unshift","size","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_startScrollInterval","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","interval","period","scheduler","asyncScheduler","timer","animationFrameScheduler","takeUntil","scrollStep","scrollBy","_canReceive","_startReceiving","activeSiblings","initiator","receiver","draggedItems","capturingEventOptions","activeCapturingEventOptions","_ResetsLoader","hostAttrs","changeDetection","DragDropRegistry","inject","NgZone","DOCUMENT","_styleLoader","_CdkPrivateStyleLoader","RendererFactory2","createRenderer","_cleanupDocumentTouchmove","_scroll","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","_domNodesToDirectives","_persistentTouchmoveListener","load","update","instances","startsWith","endEventHandler","e","toBind","_preventDefaultWhileDragging","options","_clearGlobalListeners","streams","Observable","observer","merge","registerDirectiveNode","dragRef","WeakMap","removeDirectiveNode","getDragDirectiveForNode","instance","some","token","providedIn","DEFAULT_CONFIG","DragDrop","ViewportRuler","createDrag","config","createDropList","CDK_DRAG_PARENT","InjectionToken","CDK_DRAG_HANDLE","CdkDragHandle","ElementRef","_parentDrag","optional","skipSelf","_stateChanges","_addHandle","ngAfterViewInit","ref","_removeHandle","booleanAttribute","provide","useExisting","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_viewContainerRef","ViewContainerRef","_dir","Directionality","_changeDetectorRef","ChangeDetectorRef","_selfHandle","self","_destroyed","BehaviorSubject","_dragRef","rootElementSelector","freeDragPosition","EventEmitter","subscription","movedEvent","_injector","Injector","dragDrop","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","afterNextRender","_updateRootElement","_setupHandlesListener","injector","rootSelectorChange","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","closest","_getBoundaryElement","boundary","dir","coerceNumberProperty","take","parentDrag","startEvent","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","handleElements","switchMap","handleInstance","hostVars","numberAttribute","exportAs","CDK_DROP_LIST_GROUP","CdkDropList","_scrollDispatcher","ScrollDispatcher","_group","_latestSortedRefs","_scrollableParentsResolved","id","_IdGenerator","getId","elementContainerSelector","_unsortedItems","_setupInputSyncSubscription","_dropLists","_items","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","coerceArray","list","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","querySelector","listAutoScrollDisabled","listOrientation","useValue","ExtendedFabSpeedDialComponent","open$","ngAfterContentInit","combineLatest","distinctUntilChanged","actionButtons","open","btn","all","step","transitionDuration","setOpen","pointerType","_angular_core__WEBPACK_IMPORTED_MODULE_6__","contentQueries","dirIndex","trigger","actions","NgTemplateOutlet"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial-action.directive.ts","./projects/eav-ui/src/app/shared/modules/save-close-button/save-close-button-base.directive.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial-trigger-content.directive.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial-actions-content.directive.ts","./projects/eav-ui/src/app/shared/directives/mousedown-stop-propagation.directive.ts","./projects/eav-ui/src/app/edit/dialog/main/keyboard-shortcuts.ts","./projects/eav-ui/src/app/shared/components/base.component.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/modules/save-close-button/save-close-button.component.ts","./projects/eav-ui/src/app/shared/modules/save-close-button/save-close-button.component.html","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial-trigger.directive.ts","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial.component.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial.component.html"],"sourcesContent":["import { Directive, ElementRef, input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n  selector: '[extended-fab-speed-dial-action]',\r\n})\r\nexport class ExtendedFabSpeedDialActionDirective implements OnChanges {\r\n  disabled = input<boolean>(false);\r\n\r\n  constructor(private elementRef: ElementRef<HTMLElement>) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.disabled != null) {\r\n      this.elementRef.nativeElement.toggleAttribute('disabled', this.disabled());\r\n    }\r\n  }\r\n}\r\n","import { Directive, input, output } from '@angular/core';\r\n\r\n// 2pp: needs to be a directive in order to make input, output functions work\r\n@Directive()\r\nexport abstract class SaveCloseButtonBase {\r\n  /** Button label, can be a translation key or plain text */\r\n  label = input<string>('Form.Buttons.SaveAndClose');\r\n\r\n  /** Material icon name to show */\r\n  icon = input<string>('done');\r\n\r\n  /** Classes to apply to the button */\r\n  ngClass = input<string>('');\r\n\r\n  /** If true, disables the button. Can also be a function returning boolean */\r\n  disabled = input<boolean | (() => boolean)>(false);\r\n\r\n  /** Emits when the button is clicked */\r\n  action = output<Event>();\r\n\r\n  /** Derived property for disabled state */\r\n  get isDisabled(): boolean {\r\n    return typeof this.disabled === 'function' ? !!this.disabled() : !!this.disabled;\r\n  }\r\n\r\n  onClick(event: Event) {\r\n    if (!this.isDisabled) {\r\n      this.action.emit(event);\r\n    }\r\n  }\r\n}","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n  selector: '[extendedFabSpeedDialTriggerContent]',\r\n})\r\nexport class ExtendedFabSpeedDialTriggerContentDirective {\r\n  constructor(public templateRef: TemplateRef<unknown>) { }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n  selector: '[extendedFabSpeedDialActionsContent]',\r\n})\r\nexport class ExtendedFabSpeedDialActionsContentDirective {\r\n  constructor(public templateRef: TemplateRef<unknown>) { }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appMousedownStopPropagation]',\r\n})\r\nexport class MousedownStopPropagationDirective {\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","/**\r\n * Checks if the keyboard event is triggered by the Escape key.\r\n * @param event KeyboardEvent\r\n * @returns boolean\r\n */\r\nexport function isEscape(event: KeyboardEvent): boolean {\r\n  return event.key === 'Escape';\r\n}\r\n\r\n/**\r\n * Checks if the keyboard event is triggered by Ctrl + S (or Cmd + S on Mac).\r\n * @param event KeyboardEvent\r\n * @returns boolean\r\n */\r\nexport function isCtrlS(event: KeyboardEvent): boolean {\r\n  return (event.key === 's' || event.key === 'S') && (event.ctrlKey || event.metaKey);\r\n}\r\n\r\n/**\r\n * Checks if the keyboard event is triggered by Ctrl + Enter (or Cmd + Enter on Mac).\r\n * @param event KeyboardEvent\r\n * @returns boolean\r\n */\r\nexport function isCtrlEnter(event: KeyboardEvent): boolean {\r\n  return event.key === 'Enter' && (event.ctrlKey || event.metaKey);\r\n}","import { Component, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * A newer base component, without Log being created / requested.\r\n * This is so it's easier to inherit than the BaseComponent,\r\n * which would make typed log with specs harder to implement.\r\n * \r\n * Note that as with time, we wish to get away from these, as we don't want to use many observables any more.\r\n */\r\n@Component({\r\n  selector: 'app-base-component',\r\n  template: '',\r\n})\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseComponent implements OnDestroy {\r\n  \r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe((data: unknown) => {\r\n        l.a('Dialog closed', { data });\r\n        return callback();\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  public doOnDialogClosedWithData(callback: (data: any) => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.#childDialogClosedWithData().subscribe(({ state }) => {\r\n        l.a('Dialog closed', { state });\r\n        callback(state);\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n  #childDialogClosedWithData() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      tap(event => {\r\n        const l = this.log.fn(\"childDialogClosed$\", {\r\n          event,\r\n          firstChild: this.route.snapshot.firstChild,\r\n          snapShot: this.route.snapshot,\r\n          state: this.router.getCurrentNavigation()?.extras.state,\r\n        });\r\n        l.a('NavigationEnd', { event });\r\n        l.end();\r\n      }),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => ({\r\n        hasChildNow: !!this.route.snapshot.firstChild,\r\n        state: this.router.getCurrentNavigation()?.extras.state,\r\n      })),\r\n      pairwise(),\r\n      filter(([prev, curr]) => prev.hasChildNow && !curr.hasChildNow),\r\n      map(([prev, curr]) => ({\r\n        hadChildBefore: prev.hasChildNow,\r\n        hasChildNow: curr.hasChildNow,\r\n        state: curr.state\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { ExtendedFabSpeedDialImports } from '../extended-fab-speed-dial/extended-fab-speed-dial.imports';\r\nimport { SaveCloseButtonBase } from './save-close-button-base.directive';\r\n\r\n@Component({\r\n  selector: 'app-save-close-button',\r\n  imports: [\r\n    NgClass,\r\n    MatIconModule,\r\n    ...ExtendedFabSpeedDialImports,\r\n    MatRippleModule,\r\n    TranslateModule,\r\n    TippyDirective,\r\n  ],\r\n  templateUrl: './save-close-button.component.html',\r\n  styleUrls: ['./save-close-button.component.scss'],\r\n})\r\nexport class SaveCloseButtonComponent extends SaveCloseButtonBase {}","<button\r\n  type=\"button\"\r\n  [tippy]=\"(label() | translate) + ' (' + ('Form.Buttons.ActionAndCloseShortcut' | translate) + ')'\"\r\n  tippyShowDelay=\"500\"\r\n  [ngClass]=\"ngClass()\"\r\n  [disabled]=\"isDisabled\"\r\n  (click)=\"onClick($event)\"\r\n  extended-fab-speed-dial-trigger\r\n  matRipple\r\n>\r\n  <span>{{ label() | translate }}</span>\r\n  <span class=\"keybinding-hint\">\r\n    <kbd>⌃</kbd><kbd>⏎</kbd>\r\n  </span>\r\n  <mat-icon>{{ icon() }}</mat-icon>\r\n</button>","import { Directive, ElementRef, input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n  selector: '[extended-fab-speed-dial-trigger]',\r\n})\r\nexport class ExtendedFabSpeedDialTriggerDirective implements OnChanges {\r\n  disabled = input<boolean>(false);\r\n\r\n  constructor(private elementRef: ElementRef<HTMLElement>) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.disabled != null) {\r\n      this.elementRef.nativeElement.toggleAttribute('disabled', this.disabled());\r\n    }\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { signal, Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, DOCUMENT, RendererFactory2, Injectable, InjectionToken, ElementRef, booleanAttribute, Directive, Input, ViewContainerRef, ChangeDetectorRef, EventEmitter, Injector, afterNextRender, numberAttribute, Output, TemplateRef, NgModule } from '@angular/core';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { _ as _getEventTarget, a as _getShadowRoot } from './shadow-dom-B0oHn41l.mjs';\nimport { a as isFakeTouchstartFromScreenReader, i as isFakeMousedownFromScreenReader } from './fake-event-detection-DWOdFTFz.mjs';\nimport { a as coerceElement, c as coerceNumberProperty } from './element-x4z00URv.mjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport { _ as _CdkPrivateStyleLoader } from './style-loader-B2sGQXxD.mjs';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from './scrolling.mjs';\nexport { CdkScrollable as ɵɵCdkScrollable } from './scrolling.mjs';\nimport { D as Directionality } from './directionality-CChdj3az.mjs';\nimport { _ as _IdGenerator } from './id-generator-LuoRZSid.mjs';\nimport { c as coerceArray } from './array-I1yfCXUO.mjs';\nimport './platform-DNDzkVcI.mjs';\nimport '@angular/common';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\nimport './recycle-view-repeater-strategy-SfuyU210.mjs';\nimport './data-source-D34wiQZj.mjs';\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Checks if the child element is overflowing from its parent.\n * @param parentRect - The bounding rect of the parent element.\n * @param childRect - The bounding rect of the child element.\n */\nfunction isOverflowingParent(parentRect, childRect) {\n    // check for horizontal overflow (left and right)\n    const isLeftOverflowing = childRect.left < parentRect.left;\n    const isRightOverflowing = childRect.left + childRect.width > parentRect.right;\n    // check for vertical overflow (top and bottom)\n    const isTopOverflowing = childRect.top < parentRect.top;\n    const isBottomOverflowing = childRect.top + childRect.height > parentRect.bottom;\n    return isLeftOverflowing || isRightOverflowing || isTopOverflowing || isBottomOverflowing;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    _document;\n    /** Cached positions of the scrollable parent elements. */\n    positions = new Map();\n    constructor(_document) {\n        this._document = _document;\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    _document;\n    _rootElement;\n    _direction;\n    _initialDomRect;\n    _previewTemplate;\n    _previewClass;\n    _pickupPositionOnPage;\n    _initialTransform;\n    _zIndex;\n    _renderer;\n    /** Reference to the view of the preview element. */\n    _previewEmbeddedView;\n    /** Reference to the preview element. */\n    _preview;\n    get element() {\n        return this._preview;\n    }\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex, _renderer) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n        this._renderer = _renderer;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if (supportsPopover(this._preview)) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        return this._renderer.listen(this._preview, name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n            // value for `margin-right` needs to be `auto` when opened as a popover, because our\n            // positioning is always top/left based, but native popover seems to position itself\n            // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n            // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n            'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element) {\n    return 'showPopover' in element;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = { passive: true };\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = { passive: false };\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = {\n    passive: false,\n    capture: true,\n};\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    _config;\n    _document;\n    _ngZone;\n    _viewportRuler;\n    _dragDropRegistry;\n    _renderer;\n    _rootElementCleanups;\n    _cleanupShadowRootSelectStart;\n    /** Element displayed next to the user's pointer while the element is dragged. */\n    _preview;\n    /** Container into which to insert the preview. */\n    _previewContainer;\n    /** Reference to the view of the placeholder element. */\n    _placeholderRef;\n    /** Element that is rendered instead of the draggable item while it is being sorted. */\n    _placeholder;\n    /** Coordinates within the element at which the user picked up the element. */\n    _pickupPositionInElement;\n    /** Coordinates on the page at which the user picked up the element. */\n    _pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     */\n    _anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n    _passiveTransform = { x: 0, y: 0 };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n    _activeTransform = { x: 0, y: 0 };\n    /** Inline `transform` value that the element had before the first dragging sequence. */\n    _initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n    _hasStartedDragging = signal(false);\n    /** Whether the element has moved since the user started dragging it. */\n    _hasMoved;\n    /** Drop container in which the DragRef resided when dragging began. */\n    _initialContainer;\n    /** Index at which the item started in its initial container. */\n    _initialIndex;\n    /** Cached positions of scrollable parent elements. */\n    _parentPositions;\n    /** Emits when the item is being moved. */\n    _moveEvents = new Subject();\n    /** Keeps track of the direction in which the user is dragging along each axis. */\n    _pointerDirectionDelta;\n    /** Pointer position at which the last change in the delta occurred. */\n    _pointerPositionAtLastDirectionChange;\n    /** Position of the pointer at the last pointer event. */\n    _lastKnownPointerPosition;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     */\n    _rootElement;\n    /**\n     * Nearest ancestor SVG, relative to which coordinates are calculated if dragging SVGElement\n     */\n    _ownerSVGElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     */\n    _rootElementTapHighlight;\n    /** Subscription to pointer movement events. */\n    _pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n    _pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n    _scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n    _resizeSubscription = Subscription.EMPTY;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     */\n    _lastTouchEventTime;\n    /** Time at which the last dragging sequence was started. */\n    _dragStartTime;\n    /** Cached reference to the boundary element. */\n    _boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n    _nativeInteractionsEnabled = true;\n    /** Client rect of the root element when the dragging sequence has started. */\n    _initialDomRect;\n    /** Cached dimensions of the preview element. Should be read via `_getPreviewRect`. */\n    _previewRect;\n    /** Cached dimensions of the boundary element. */\n    _boundaryRect;\n    /** Element that will be used as a template to create the draggable item's preview. */\n    _previewTemplate;\n    /** Template for placeholder element rendered to show where a draggable would be dropped. */\n    _placeholderTemplate;\n    /** Elements that can be used to drag the draggable item. */\n    _handles = [];\n    /** Registered handles that are currently disabled. */\n    _disabledHandles = new Set();\n    /** Droppable container that the draggable is a part of. */\n    _dropContainer;\n    /** Layout direction of the item. */\n    _direction = 'ltr';\n    /** Ref that the current drag item is nested in. */\n    _parentDragRef;\n    /**\n     * Cached shadow root that the element is placed in. `null` means that the element isn't in\n     * the shadow DOM and `undefined` means that it hasn't been resolved yet. Should be read via\n     * `_getShadowRoot`, not directly.\n     */\n    _cachedShadowRoot;\n    /** Axis along which dragging is locked. */\n    lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay = 0;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    _disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n    beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n    started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = this._moveEvents;\n    /** Arbitrary data that can be attached to the drag item. */\n    data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry, _renderer) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        this._renderer = _renderer;\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            this._removeRootElementListeners();\n            const renderer = this._renderer;\n            this._rootElementCleanups = this._ngZone.runOutsideAngular(() => [\n                renderer.listen(element, 'mousedown', this._pointerDown, activeEventListenerOptions),\n                renderer.listen(element, 'touchstart', this._pointerDown, passiveEventListenerOptions),\n                renderer.listen(element, 'dragstart', this._nativeDragStart, activeEventListenerOptions),\n            ]);\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners();\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /** Resets drag item to end of boundary element. */\n    resetToBoundary() {\n        if (\n        // can be null if the drag item was never dragged.\n        this._boundaryElement &&\n            this._rootElement &&\n            // check if we are overflowing off our boundary element\n            isOverflowingParent(this._boundaryElement.getBoundingClientRect(), this._rootElement.getBoundingClientRect())) {\n            const parentRect = this._boundaryElement.getBoundingClientRect();\n            const childRect = this._rootElement.getBoundingClientRect();\n            let offsetX = 0;\n            let offsetY = 0;\n            // check if we are overflowing from left or right\n            if (childRect.left < parentRect.left) {\n                offsetX = parentRect.left - childRect.left;\n            }\n            else if (childRect.right > parentRect.right) {\n                offsetX = parentRect.right - childRect.right;\n            }\n            // check if we are overflowing from top or bottom\n            if (childRect.top < parentRect.top) {\n                offsetY = parentRect.top - childRect.top;\n            }\n            else if (childRect.bottom > parentRect.bottom) {\n                offsetY = parentRect.bottom - childRect.bottom;\n            }\n            const currentLeft = this._activeTransform.x;\n            const currentTop = this._activeTransform.y;\n            let x = currentLeft + offsetX, y = currentTop + offsetY;\n            this._rootElement.style.transform = getTransform(x, y);\n            this._activeTransform = { x, y };\n            this._passiveTransform = { x, y };\n        }\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._cleanupShadowRootSelectStart?.();\n        this._cleanupShadowRootSelectStart = undefined;\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /** Handler for the `mousedown`/`touchstart` events. */\n    _pointerDown = (event) => {\n        this.beforeStarted.next();\n        // Delegate the event based on whether it started from a handle or the element itself.\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                this._initializeDragSequence(targetHandle, event);\n            }\n        }\n        else if (!this.disabled) {\n            this._initializeDragSequence(this._rootElement, event);\n        }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n    _pointerMove = (event) => {\n        const pointerPosition = this._getPointerPositionOnPage(event);\n        if (!this._hasStartedDragging()) {\n            const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n            const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n            const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n            // Only start dragging after the user has moved more than the minimum distance in either\n            // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n            // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n            // per pixel of movement (e.g. if the user moves their pointer quickly).\n            if (isOverThreshold) {\n                const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                const container = this._dropContainer;\n                if (!isDelayElapsed) {\n                    this._endDragSequence(event);\n                    return;\n                }\n                // Prevent other drag sequences from starting while something in the container is still\n                // being dragged. This can happen while we're waiting for the drop animation to finish\n                // and can cause errors, because some elements might still be moving around.\n                if (!container || (!container.isDragging() && !container.isReceiving())) {\n                    // Prevent the default action as soon as the dragging sequence is considered as\n                    // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                    if (event.cancelable) {\n                        event.preventDefault();\n                    }\n                    this._hasStartedDragging.set(true);\n                    this._ngZone.run(() => this._startDragSequence(event));\n                }\n            }\n            return;\n        }\n        // We prevent the default action down here so that we know that dragging has started. This is\n        // important for touch devices where doing this too early can unnecessarily block scrolling,\n        // if there's a dragging delay.\n        if (event.cancelable) {\n            event.preventDefault();\n        }\n        const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n        this._hasMoved = true;\n        this._lastKnownPointerPosition = pointerPosition;\n        this._updatePointerDirectionDelta(constrainedPointerPosition);\n        if (this._dropContainer) {\n            this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n        }\n        else {\n            // If there's a position constraint function, we want the element's top/left to be at the\n            // specific position on the page. Use the initial position as a reference if that's the case.\n            const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n            const activeTransform = this._activeTransform;\n            activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n            activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n            this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n        }\n        // Since this event gets fired for every pixel while dragging, we only\n        // want to fire it if the consumer opted into it. Also we have to\n        // re-enter the zone because we run all of the events on the outside.\n        if (this._moveEvents.observers.length) {\n            this._ngZone.run(() => {\n                this._moveEvents.next({\n                    source: this,\n                    pointerPosition: constrainedPointerPosition,\n                    event,\n                    distance: this._getDragDistance(constrainedPointerPosition),\n                    delta: this._pointerDirectionDelta,\n                });\n            });\n        }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n    _pointerUp = (event) => {\n        this._endDragSequence(event);\n    };\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging()) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                this._cleanupShadowRootSelectStart = this._renderer.listen(shadowRoot, 'selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor =\n                this._anchor ||\n                    this._document.createComment(typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-anchor' : ''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000, this._renderer);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasMoved = false;\n        this._hasStartedDragging.set(this._hasMoved);\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = (event) => {\n                    if (!event ||\n                        (this._preview &&\n                            _getEventTarget(event) === this._preview.element &&\n                            event.propertyName === 'transform')) {\n                        cleanupListener();\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                };\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                const cleanupListener = this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners() {\n        this._rootElementCleanups?.forEach(cleanup => cleanup());\n        this._rootElementCleanups = undefined;\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const scale = 1 / this.scale;\n        const transform = getTransform(x * scale, y * scale);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Handles a native `dragstart` event. */\n    _nativeDragStart = (event) => {\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                event.preventDefault();\n            }\n        }\n        else if (!this.disabled) {\n            // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n            // but some cases like dragging of links can slip through (see #24403).\n            event.preventDefault();\n        }\n    };\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Cache of the dimensions of all the items inside the container. */\n    _itemPositions = [];\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeDraggables;\n    /** Direction in which the list is oriented. */\n    orientation = 'vertical';\n    /** Layout direction of the drop list. */\n    direction;\n    constructor(_dragDropRegistry) {\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        delta: 0,\n        overlaps: false,\n    };\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${transformAmount}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${transformAmount}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this._element.appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables?.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        this._element = container;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nclass MixedSortStrategy {\n    _document;\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Lazily-resolved root node containing the list. Use `_getRootNode` to read this. */\n    _rootNode;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeItems;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        deltaX: 0,\n        deltaY: 0,\n        overlaps: false,\n    };\n    /**\n     * Keeps track of the relationship between a node and its next sibling. This information\n     * is used to restore the DOM to the order it was in before dragging started.\n     */\n    _relatedNodes = [];\n    constructor(_document, _dragDropRegistry) {\n        this._document = _document;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        const childNodes = this._element.childNodes;\n        this._relatedNodes = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const node = childNodes[i];\n            this._relatedNodes.push([node, node.nextSibling]);\n        }\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        const previousSwap = this._previousSwap;\n        if (newIndex === -1 || this._activeItems[newIndex] === item) {\n            return null;\n        }\n        const toSwapWith = this._activeItems[newIndex];\n        // Prevent too many swaps over the same item.\n        if (previousSwap.drag === toSwapWith &&\n            previousSwap.overlaps &&\n            previousSwap.deltaX === pointerDelta.x &&\n            previousSwap.deltaY === pointerDelta.y) {\n            return null;\n        }\n        const previousIndex = this.getItemIndex(item);\n        const current = item.getPlaceholderElement();\n        const overlapElement = toSwapWith.getRootElement();\n        if (newIndex > previousIndex) {\n            overlapElement.after(current);\n        }\n        else {\n            overlapElement.before(current);\n        }\n        moveItemInArray(this._activeItems, previousIndex, newIndex);\n        const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n        // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n        // break this functionality, because the same object is passed for all `sort` calls.\n        previousSwap.deltaX = pointerDelta.x;\n        previousSwap.deltaY = pointerDelta.y;\n        previousSwap.drag = toSwapWith;\n        previousSwap.overlaps =\n            overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n        return {\n            previousIndex,\n            currentIndex: newIndex,\n        };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        let enterIndex = index == null || index < 0\n            ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        // In some cases (e.g. when the container has padding) we might not be able to figure\n        // out which item to insert the dragged item next to, because the pointer didn't overlap\n        // with anything. In that case we find the item that's closest to the pointer.\n        if (enterIndex === -1) {\n            enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n        }\n        const targetItem = this._activeItems[enterIndex];\n        const currentIndex = this._activeItems.indexOf(item);\n        if (currentIndex > -1) {\n            this._activeItems.splice(currentIndex, 1);\n        }\n        if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n            this._activeItems.splice(enterIndex, 0, item);\n            targetItem.getRootElement().before(item.getPlaceholderElement());\n        }\n        else {\n            this._activeItems.push(item);\n            this._element.appendChild(item.getPlaceholderElement());\n        }\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeItems = items.slice();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        const root = this._element;\n        const previousSwap = this._previousSwap;\n        // Moving elements around in the DOM can break things like the `@for` loop, because it\n        // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n        // the DOM nodes in the list to their original order when the list is reset.\n        // Note that this could be simpler if we just saved all the nodes, cleared the root\n        // and then appended them in the original order. We don't do it, because it can break\n        // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n        // placeholder element which is removed after dragging.\n        for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n            const [node, nextSibling] = this._relatedNodes[i];\n            if (node.parentNode === root && node.nextSibling !== nextSibling) {\n                if (nextSibling === null) {\n                    root.appendChild(node);\n                }\n                else if (nextSibling.parentNode === root) {\n                    root.insertBefore(node, nextSibling);\n                }\n            }\n        }\n        this._relatedNodes = [];\n        this._activeItems = [];\n        previousSwap.drag = null;\n        previousSwap.deltaX = previousSwap.deltaY = 0;\n        previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeItems;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        return this._activeItems.indexOf(item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll() {\n        this._activeItems.forEach(item => {\n            if (this._dragDropRegistry.isDragging(item)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                item._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        if (container !== this._element) {\n            this._element = container;\n            this._rootNode = undefined;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY) {\n        const elementAtPoint = this._getRootNode().elementFromPoint(Math.floor(pointerX), Math.floor(pointerY));\n        const index = elementAtPoint\n            ? this._activeItems.findIndex(item => {\n                const root = item.getRootElement();\n                return elementAtPoint === root || root.contains(elementAtPoint);\n            })\n            : -1;\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n    /** Lazily resolves the list's root node. */\n    _getRootNode() {\n        // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n        if (!this._rootNode) {\n            this._rootNode = _getShadowRoot(this._element) || this._document;\n        }\n        return this._rootNode;\n    }\n    /**\n     * Finds the index of the item that's closest to the item being dragged.\n     * @param item Item being dragged.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _getClosestItemIndexToPointer(item, pointerX, pointerY) {\n        if (this._activeItems.length === 0) {\n            return -1;\n        }\n        if (this._activeItems.length === 1) {\n            return 0;\n        }\n        let minDistance = Infinity;\n        let minIndex = -1;\n        // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n        // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n        // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n        // for our purposes.\n        for (let i = 0; i < this._activeItems.length; i++) {\n            const current = this._activeItems[i];\n            if (current !== item) {\n                const { x, y } = current.getRootElement().getBoundingClientRect();\n                const distance = Math.hypot(pointerX - x, pointerY - y);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minIndex = i;\n                }\n            }\n        }\n        return minIndex;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    _dragDropRegistry;\n    _ngZone;\n    _viewportRuler;\n    /** Element that the drop list is attached to. */\n    element;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    disabled = false;\n    /** Whether sorting items within the list is disabled. */\n    sortingDisabled = false;\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n    autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Function that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n    beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n    dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new Subject();\n    /** Emits when a dragging sequence is started in a list connected to the current one. */\n    receivingStarted = new Subject();\n    /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n    receivingStopped = new Subject();\n    /** Arbitrary data that can be attached to the drop list. */\n    data;\n    /** Element that is the direct parent of the drag items. */\n    _container;\n    /** Whether an item in the list is being dragged. */\n    _isDragging = false;\n    /** Keeps track of the positions of any parent scrollable elements. */\n    _parentPositions;\n    /** Strategy being used to sort items within the list. */\n    _sortStrategy;\n    /** Cached `DOMRect` of the drop list. */\n    _domRect;\n    /** Draggable items in the container. */\n    _draggables = [];\n    /** Drop lists that are connected to the current one. */\n    _siblings = [];\n    /** Connected siblings that currently have a dragged item. */\n    _activeSiblings = new Set();\n    /** Subscription to the window being scrolled. */\n    _viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n    _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    /** Horizontal direction in which the list is currently scrolling. */\n    _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    /** Node that is being auto-scrolled. */\n    _scrollNode;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n    _stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n    _cachedShadowRoot = null;\n    /** Reference to the document. */\n    _document;\n    /** Elements that can be scrolled while the user is dragging. */\n    _scrollableElements = [];\n    /** Initial value for the element's `scroll-snap-type` style. */\n    _initialScrollSnap;\n    /** Direction of the list's layout. */\n    _direction = 'ltr';\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        const coercedElement = (this.element = coerceElement(element));\n        this._document = _document;\n        this.withOrientation('vertical').withElementContainer(coercedElement);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n            this._sortStrategy.direction = direction;\n        }\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        if (orientation === 'mixed') {\n            this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n        }\n        else {\n            const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n            strategy.direction = this._direction;\n            strategy.orientation = orientation;\n            this._sortStrategy = strategy;\n        }\n        this._sortStrategy.withElementContainer(this._container);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = this._container;\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /**\n     * Configures the drop list so that a different element is used as the container for the\n     * dragged items. This is useful for the cases when one might not have control over the\n     * full DOM that sets up the dragging.\n     * Note that the alternate container needs to be a descendant of the drop list.\n     * @param container New element container to be assigned.\n     */\n    withElementContainer(container) {\n        if (container === this._container) {\n            return this;\n        }\n        const element = coerceElement(this.element);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            container !== element &&\n            !element.contains(container)) {\n            throw new Error('Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.');\n        }\n        const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n        const newContainerIndex = this._scrollableElements.indexOf(container);\n        if (oldContainerIndex > -1) {\n            this._scrollableElements.splice(oldContainerIndex, 1);\n        }\n        if (newContainerIndex > -1) {\n            this._scrollableElements.splice(newContainerIndex, 1);\n        }\n        if (this._sortStrategy) {\n            this._sortStrategy.withElementContainer(container);\n        }\n        this._cachedShadowRoot = null;\n        this._scrollableElements.unshift(container);\n        this._container = container;\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = this._container.style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // Prevent the check from running on apps not using an alternate container. Ideally we\n            // would always run it, but introducing it at this stage would be a breaking change.\n            this._container !== coerceElement(this.element)) {\n            for (const drag of this._draggables) {\n                if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n                    throw new Error('Invalid DOM structure for drop list. All items must be placed directly inside of the element container.');\n                }\n            }\n        }\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(this._container).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = this._container.style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /** Starts the interval that'll auto-scroll the element. */\n    _startScrollInterval = () => {\n        this._stopScrolling();\n        interval(0, animationFrameScheduler)\n            .pipe(takeUntil(this._stopScrollTimers))\n            .subscribe(() => {\n            const node = this._scrollNode;\n            const scrollStep = this.autoScrollStep;\n            if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                node.scrollBy(0, -scrollStep);\n            }\n            else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                node.scrollBy(0, scrollStep);\n            }\n            if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                node.scrollBy(-scrollStep, 0);\n            }\n            else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                node.scrollBy(scrollStep, 0);\n            }\n        });\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(this._container);\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind a capturing event. */\nconst capturingEventOptions = {\n    capture: true,\n};\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n    passive: false,\n    capture: true,\n};\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\\n\"] }]\n        }] });\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\nclass DragDropRegistry {\n    _ngZone = inject(NgZone);\n    _document = inject(DOCUMENT);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _cleanupDocumentTouchmove;\n    _scroll = new Subject();\n    /** Registered drop container instances. */\n    _dropInstances = new Set();\n    /** Registered drag item instances. */\n    _dragInstances = new Set();\n    /** Drag item instances that are currently being dragged. */\n    _activeDragInstances = signal([]);\n    /** Keeps track of the event listeners that we've bound to the `document`. */\n    _globalListeners;\n    /**\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\n     * because it'll be called a lot and we don't want to create a new function every time.\n     */\n    _draggingPredicate = (item) => item.isDragging();\n    /**\n     * Map tracking DOM nodes and their corresponding drag directives. Note that this is different\n     * from looking through the `_dragInstances` and getting their root node, because the root node\n     * isn't necessarily the node that the directive is set on.\n     */\n    _domNodesToDirectives = null;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerMove = new Subject();\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerUp = new Subject();\n    constructor() { }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._cleanupDocumentTouchmove?.();\n                this._cleanupDocumentTouchmove = this._renderer.listen(this._document, 'touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._cleanupDocumentTouchmove?.();\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances().indexOf(drag) > -1) {\n            return;\n        }\n        this._styleLoader.load(_ResetsLoader);\n        this._activeDragInstances.update(instances => [...instances, drag]);\n        if (this._activeDragInstances().length === 1) {\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            const isTouchEvent = event.type.startsWith('touch');\n            const endEventHandler = (e) => this.pointerUp.next(e);\n            const toBind = [\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                ['scroll', (e) => this._scroll.next(e), capturingEventOptions],\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                ['selectstart', this._preventDefaultWhileDragging, activeCapturingEventOptions],\n            ];\n            if (isTouchEvent) {\n                toBind.push(['touchend', endEventHandler, capturingEventOptions], ['touchcancel', endEventHandler, capturingEventOptions]);\n            }\n            else {\n                toBind.push(['mouseup', endEventHandler, capturingEventOptions]);\n            }\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                toBind.push([\n                    'mousemove',\n                    (e) => this.pointerMove.next(e),\n                    activeCapturingEventOptions,\n                ]);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners = toBind.map(([name, handler, options]) => this._renderer.listen(this._document, name, handler, options));\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.update(instances => {\n            const index = instances.indexOf(drag);\n            if (index > -1) {\n                instances.splice(index, 1);\n                return [...instances];\n            }\n            return instances;\n        });\n        if (this._activeDragInstances().length === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances().indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this._scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const cleanup = this._renderer.listen(shadowRoot, 'scroll', (event) => {\n                        if (this._activeDragInstances().length) {\n                            observer.next(event);\n                        }\n                    }, capturingEventOptions);\n                    return () => {\n                        cleanup();\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    /**\n     * Tracks the DOM node which has a draggable directive.\n     * @param node Node to track.\n     * @param dragRef Drag directive set on the node.\n     */\n    registerDirectiveNode(node, dragRef) {\n        this._domNodesToDirectives ??= new WeakMap();\n        this._domNodesToDirectives.set(node, dragRef);\n    }\n    /**\n     * Stops tracking a draggable directive node.\n     * @param node Node to stop tracking.\n     */\n    removeDirectiveNode(node) {\n        this._domNodesToDirectives?.delete(node);\n    }\n    /**\n     * Gets the drag directive corresponding to a specific DOM node, if any.\n     * @param node Node for which to do the lookup.\n     */\n    getDragDirectiveForNode(node) {\n        return this._domNodesToDirectives?.get(node) || null;\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._domNodesToDirectives = null;\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * @param event Event whose default action should be prevented.\n     */\n    _preventDefaultWhileDragging = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            event.preventDefault();\n        }\n    };\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n    _persistentTouchmoveListener = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            // Note that we only want to prevent the default action after dragging has actually started.\n            // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n            // but it could be pushed back if the user has set up a drag delay or threshold.\n            if (this._activeDragInstances().some(this._draggingPredicate)) {\n                event.preventDefault();\n            }\n            this.pointerMove.next(event);\n        }\n    };\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners?.forEach(cleanup => cleanup());\n        this._globalListeners = undefined;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    _document = inject(DOCUMENT);\n    _ngZone = inject(NgZone);\n    _viewportRuler = inject(ViewportRuler);\n    _dragDropRegistry = inject(DragDropRegistry);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    constructor() { }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry, this._renderer);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDrop, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDrop, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    element = inject(ElementRef);\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    /** Emits when the state of the handle has changed. */\n    _stateChanges = new Subject();\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    _disabled = false;\n    constructor() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag?._addHandle(this);\n    }\n    ngAfterViewInit() {\n        if (!this._parentDrag) {\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const ref = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (ref) {\n                    this._parentDrag = ref;\n                    ref._addHandle(this);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragHandle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    element = inject(ElementRef);\n    dropContainer = inject(CDK_DROP_LIST, { optional: true, skipSelf: true });\n    _ngZone = inject(NgZone);\n    _viewContainerRef = inject(ViewContainerRef);\n    _dir = inject(Directionality, { optional: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _selfHandle = inject(CDK_DRAG_HANDLE, { optional: true, self: true });\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    _destroyed = new Subject();\n    _handles = new BehaviorSubject([]);\n    _previewTemplate;\n    _placeholderTemplate;\n    /** Reference to the underlying drag instance. */\n    _dragRef;\n    /** Arbitrary data to attach to this drag instance. */\n    data;\n    /** Locks the position of the dragged element along the specified axis. */\n    lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     */\n    rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     */\n    boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     */\n    freeDragPosition;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    _disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * Configures the place into which the preview of the item will be inserted. Can be configured\n     * globally through `CDK_DROP_LIST`. Possible values:\n     * - `global` - Preview will be inserted at the bottom of the `<body>`. The advantage is that\n     * you don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain\n     * its inherited styles.\n     * - `parent` - Preview will be inserted into the parent of the drag item. The advantage is that\n     * inherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be\n     * visible due to `z-index`. Furthermore, the preview is going to have an effect over selectors\n     * like `:nth-child` and some flexbox configurations.\n     * - `ElementRef<HTMLElement> | HTMLElement` - Preview will be inserted into a specific element.\n     * Same advantages and disadvantages as `parent`.\n     */\n    previewContainer;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Emits when the user starts dragging the item. */\n    started = new EventEmitter();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new EventEmitter();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new EventEmitter();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new EventEmitter();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new EventEmitter();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = new Observable((observer) => {\n        const subscription = this._dragRef.moved\n            .pipe(map(movedEvent => ({\n            source: this,\n            pointerPosition: movedEvent.pointerPosition,\n            event: movedEvent.event,\n            delta: movedEvent.delta,\n            distance: movedEvent.distance,\n        })))\n            .subscribe(observer);\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n    _injector = inject(Injector);\n    constructor() {\n        const dropContainer = this.dropContainer;\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        const dragDrop = inject(DragDrop);\n        this._dragRef = dragDrop.createDrag(this.element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        this._dragDropRegistry.registerDirectiveNode(this.element.nativeElement, this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n            // The drop container reads this so we need to sync it here.\n            dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._dragRef.scale = this.scale;\n            });\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /** Resets drag item to end of boundary element. */\n    resetToBoundary() {\n        this._dragRef.resetToBoundary();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // We need to wait until after render, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position, and then they get transferred to the portal.\n        afterNextRender(() => {\n            this._updateRootElement();\n            this._setupHandlesListener();\n            this._dragRef.scale = this.scale;\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }, { injector: this._injector });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in the `afterNextRender` queued up in the constructor.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Scale affects the free drag position so we need to sync it up here.\n        this._dragRef.scale = this.scale;\n        // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n        // constructor.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._dragDropRegistry.removeDirectiveNode(this.element.nativeElement);\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.scale = this.scale;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const parentDrag = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (parentDrag) {\n                    ref.withParent(parentDrag._dragRef);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDrag, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], scale: [\"cdkDragScale\", \"scale\", numberAttribute] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': 'cdk-drag',\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], scale: [{\n                type: Input,\n                args: [{ alias: 'cdkDragScale', transform: numberAttribute }]\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    /** Drop lists registered inside the group. */\n    _items = new Set();\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    disabled = false;\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    element = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _scrollDispatcher = inject(ScrollDispatcher);\n    _dir = inject(Directionality, { optional: true });\n    _group = inject(CDK_DROP_LIST_GROUP, {\n        optional: true,\n        skipSelf: true,\n    });\n    /** Refs that have been synced with the drop ref most recently. */\n    _latestSortedRefs;\n    /** Emits when the list has been destroyed. */\n    _destroyed = new Subject();\n    /** Whether the element's scrollable parents have been resolved. */\n    _scrollableParentsResolved;\n    /** Keeps track of the drop lists that are currently on the page. */\n    static _dropLists = [];\n    /** Reference to the underlying drop list instance. */\n    _dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     */\n    connectedTo = [];\n    /** Arbitrary data to attach to this container. */\n    data;\n    /** Direction in which the list is oriented. */\n    orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     */\n    id = inject(_IdGenerator).getId('cdk-drop-list-');\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    _disabled;\n    /** Whether sorting within this drop list is disabled. */\n    sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n    autoScrollDisabled;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep;\n    /**\n     * Selector that will be used to resolve an alternate element container for the drop list.\n     * Passing an alternate container is useful for the cases where one might not have control\n     * over the parent node of the draggable items within the list (e.g. due to content projection).\n     * This allows for usages like:\n     *\n     * ```\n     * <div cdkDropList cdkDropListElementContainer=\".inner\">\n     *   <div class=\"inner\">\n     *     <div cdkDrag></div>\n     *   </div>\n     * </div>\n     * ```\n     */\n    elementContainerSelector;\n    /** Emits when the user drops an item inside the container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new EventEmitter();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new EventEmitter();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new EventEmitter();\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     */\n    _unsortedItems = new Set();\n    constructor() {\n        const dragDrop = inject(DragDrop);\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(this.element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (this._group) {\n            this._group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        // Only sync the items while dragging since this method is\n        // called when items are being initialized one-by-one.\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef(this.getSortedItems().map(item => item._dragRef));\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        // This method might be called on destroy so we always want to sync with the ref.\n        // Note that we reuse the last set of synced items, rather than re-sorting the whole\n        // list, because it can slow down re-renders of large lists (see #30737).\n        if (this._latestSortedRefs) {\n            const index = this._latestSortedRefs.indexOf(item._dragRef);\n            if (index > -1) {\n                this._latestSortedRefs.splice(index, 1);\n                this._syncItemsWithRef(this._latestSortedRefs);\n            }\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._latestSortedRefs = undefined;\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            if (this.elementContainerSelector) {\n                const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n                if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throw new Error(`CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`);\n                }\n                ref.withElementContainer(container);\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef(this.getSortedItems().map(item => item._dragRef));\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef(items) {\n        this._latestSortedRefs = items;\n        this._dropListRef.withItems(items);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropList, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"], elementContainerSelector: [\"cdkDropListElementContainer\", \"elementContainerSelector\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], elementContainerSelector: [{\n                type: Input,\n                args: ['cdkDropListElementContainer']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the preview template instance. */\n    data;\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    matchSize = false;\n    constructor() {\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPreview, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the placeholder template instance. */\n    data;\n    constructor() {\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n","// tslint:disable-next-line:max-line-length\r\nimport { NgTemplateOutlet } from '@angular/common';\r\nimport { AfterContentInit, Component, ContentChild, ContentChildren, ElementRef, input, OnDestroy, QueryList, ViewEncapsulation } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, startWith } from 'rxjs';\r\nimport { BaseComponent } from '../../components/base.component';\r\nimport { ExtendedFabSpeedDialActionDirective } from './extended-fab-speed-dial-action.directive';\r\nimport { ExtendedFabSpeedDialActionsContentDirective } from './extended-fab-speed-dial-actions-content.directive';\r\nimport { ExtendedFabSpeedDialTriggerContentDirective } from './extended-fab-speed-dial-trigger-content.directive';\r\n\r\n/**\r\n * Special Speed-Dial kind of FAB which opens more menu items on hover.\r\n *\r\n * IMPORTANT: to work it needs ca. 4 more directives.\r\n * So never import this component directly, but instead import the ExtendedFabSpeedDialImports.\r\n */\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'extended-fab-speed-dial',\r\n    templateUrl: './extended-fab-speed-dial.component.html',\r\n    styleUrls: ['./extended-fab-speed-dial.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class ExtendedFabSpeedDialComponent extends BaseComponent implements AfterContentInit, OnDestroy {\r\n  @ContentChild(ExtendedFabSpeedDialTriggerContentDirective) trigger: ExtendedFabSpeedDialTriggerContentDirective;\r\n  @ContentChild(ExtendedFabSpeedDialActionsContentDirective) actions: ExtendedFabSpeedDialActionsContentDirective;\r\n  @ContentChildren(ExtendedFabSpeedDialActionDirective, { read: ElementRef }) actionButtons: QueryList<ElementRef<HTMLButtonElement>>;\r\n\r\n  disabled = input<boolean>(false);\r\n\r\n  open$ = new BehaviorSubject(false);\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this.subscriptions.add(\r\n      combineLatest([\r\n        this.open$.pipe(distinctUntilChanged()),\r\n        this.actionButtons.changes.pipe(startWith(undefined)),\r\n      ]).subscribe(([open]) => {\r\n        this.actionButtons.forEach((btn, i, all) => {\r\n          const min = 0.3;\r\n          const max = Math.min(min + (all.length - 1) * 0.05, 0.6);\r\n          const step = (max - min) / (all.length - 1);\r\n          const transitionDuration = `${open ? min + step * i : max - step * i}s`;\r\n          if (btn.nativeElement.style.transitionDuration !== transitionDuration) {\r\n            btn.nativeElement.style.transitionDuration = transitionDuration;\r\n          }\r\n        });\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.open$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  setOpen(event: PointerEvent, open: boolean): void {\r\n    if (event.pointerType === 'touch') return;\r\n    this.open$.next(open);\r\n  }\r\n}\r\n","<div class=\"extended-fab-speed-dial\" [attr.disabled]=\"disabled() || null\" (pointerenter)=\"setOpen($event, true)\"\r\n  (pointerleave)=\"setOpen($event, false)\">\r\n  <div class=\"extended-fab-speed-dial-trigger\">\r\n    <ng-container [ngTemplateOutlet]=\"trigger?.templateRef\"></ng-container>\r\n  </div>\r\n  <div class=\"extended-fab-speed-dial-actions\">\r\n    <ng-container [ngTemplateOutlet]=\"actions?.templateRef\"></ng-container>\r\n  </div>\r\n</div>\r\n"],"x_google_ignoreList":[11,12]}