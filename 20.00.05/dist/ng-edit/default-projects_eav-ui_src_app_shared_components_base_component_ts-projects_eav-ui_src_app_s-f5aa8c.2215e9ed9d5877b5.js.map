{"version":3,"file":"default-projects_eav-ui_src_app_shared_components_base_component_ts-projects_eav-ui_src_app_s-f5aa8c.2215e9ed9d5877b5.js","mappings":"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","names":["ExportAppService","HttpServiceBaseSignal","getAppInfo","httpResource","url","this","apiUrl","params","appid","appId","zoneId","exportAppUrl","webApiAppRoot","exportForVersionControl","_x","_this","_asyncToGenerator","includeContentGroups","resetAppGuid","withFiles","getStatusPromise","toString","withPortalFiles","apply","arguments","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_5__","jDH","factory","ɵfac","DataTypeCatalog","Boolean","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","webApiViews","ViewsService","getAllOnce","getAllLive","refresh","delete","id","Id","import","file","formData","FormData","append","http","post","export","window","open","getPolymorphismLive","getUsage","guid","newHttpResource","_angular_core__WEBPACK_IMPORTED_MODULE_4__","logSpecs","all","getEntities","getAvailableEntities","webApiEntityRoot","webApiEntityList","EntityService","constructor","log","classLog","queryService","transient","QueryService","getEntities$","fnIf","pipe","filter","p","switchMap","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","fields","map","data","Default","contentType","entityId","force","parentId","parentField","parent","_angular_core__WEBPACK_IMPORTED_MODULE_9__","calculateTypeIcon","typeName","calculateTypeLabel","webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","nameId","getHttpApiUrl","contentTypeId","getType","getTypes","scope","defaultValue","retrieveContentTypesPromise","fetchPromise","getScopesPromise","then","scopesData","scopes","old","Object","keys","key","name","value","getScopesSig","scopesSignal","computed","getScopesV2Promise","save","staticName","NameId","files","createGhost","sourceNameId","BaseComponent","subscriptions","Subscription","ngOnDestroy","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__","VBU","selectors","decls","vars","template","rf","ctx","encapsulation","context","getFromQuery","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","Guids","join","i0","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_2__","webApiAppPartsRoot","ImportAppPartsService","importAppParts","resetApp","_angular_core__WEBPACK_IMPORTED_MODULE_3__","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","_angular_core__WEBPACK_IMPORTED_MODULE_0__","EJ8","pure","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText","ExportAppPartsService","getContentInfoLiveParam","exportParts","contentTypeIds","entityIds","templateIds","ImportAppService","importApp","changedName","retryOnDuplicate","Messages","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","getAll","getAllSig","getAllRes","importQuery","clonePipeline","update","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","r","initial","l","res","obs","from","fileBase64","AppId","ContentBase64","success","Success","clonePipelinePromise","dataTypeLabels","label","description","webApiFieldsAll","webApiSetTitle","webApiFieldsGetShared","ContentTypesFieldsService","paramsAppId","more","dataTypes","resourceRef","rawData","calculateDataTypes","rawDataTypes","rawDataType","push","icon","loading","isLoading","getInputTypes","mapToFieldInputTypeOption","config","dataType","Type","indexOf","inputType","Label","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","sort","a","b","localeCompare","getReservedNames","getFieldsLive","contentTypeStaticName","fieldsResource","fld","Metadata","md","merged","All","InputType","getFieldsPromise","getShareableFieldsPromise","getShareableFieldsFor","attributeId","#getShareinfoPromise","getAncestors","getDescendants","endpoint","addInheritedField","targetContentTypeId","sourceType","sourceFieldGuid","sourceField","share","inherit","inheritMetadataOf","reOrder","idArray","order","JSON","stringify","setTitle","item","rename","fieldId","newName","IsTitle","Error","add","newField","ContentTypeId","StaticName","Index","SortOrder","updateInputType","field","root_effect_scheduler_DCy1y1b8"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/shared/fields/data-type-catalog.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.helpers.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/shared/components/base.component.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts"],"sourcesContent":["import { httpResource } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\nconst webApiAppRootStatistics = 'admin/app/Statistics';\r\nconst webApiAppRootSaveData = 'admin/app/SaveData';\r\n\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBaseSignal {\r\n\r\n  getAppInfo() {\r\n    return httpResource<AppInfo>(() => ({\r\n      url: this.apiUrl(webApiAppRootStatistics),\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    }));\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n  async exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }): Promise<number> {\r\n    return this.getStatusPromise(webApiAppRootSaveData, {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n}\r\n","export const DataTypeCatalog = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViews = 'admin/view/all';\r\nconst webApiViewDelete = 'admin/view/delete';\r\nconst webApiViewImport = 'admin/view/import';\r\nconst webApiViewPolymorph = 'admin/view/polymorphism';\r\nconst webApiViewUsage = 'admin/view/usage';\r\nconst webApiJson = 'admin/view/json';\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBaseSignal {\r\n\r\n  getAllOnce() {\r\n    return httpResource<View[]>(() => {\r\n      return ({\r\n        url: this.apiUrl(webApiViews),\r\n        params: { appId: this.appId }\r\n      });\r\n    });\r\n  }\r\n\r\n  getAllLive(refresh: Signal<unknown>) {\r\n    return httpResource<View[]>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiViews),\r\n        params: { appId: this.appId }\r\n      });\r\n    });\r\n  }\r\n\r\n  async delete(id: number): Promise<number> {\r\n    return this.getStatusPromise(webApiViewDelete, {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiJson)\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphismLive(refresh: Signal<unknown>) {\r\n    return httpResource<Polymorphism>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiViewPolymorph),\r\n        params: { appId: this.appId }\r\n      });\r\n    });\r\n  }\r\n  getUsage(guid: string) {\r\n    return this.newHttpResource<ViewUsage[]>(() => ({\r\n      url: this.apiUrl(webApiViewUsage),\r\n      params: { appId: this.appId, guid: guid }\r\n    }));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBaseSignal } from './http-service-base-signal';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBaseSignal {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\n\r\nexport function calculateTypeIcon(typeName: string): string {\r\n  const typeIconMap: Record<string, string> = {\r\n    [DataTypeCatalog.Boolean]: 'toggle_on',\r\n    [DataTypeCatalog.Custom]: 'extension',\r\n    [DataTypeCatalog.DateTime]: 'today',\r\n    [DataTypeCatalog.Empty]: 'crop_free',\r\n    [DataTypeCatalog.Entity]: 'share',\r\n    [DataTypeCatalog.Hyperlink]: 'link',\r\n    [DataTypeCatalog.Number]: 'dialpad',\r\n    [DataTypeCatalog.String]: 'text_fields',\r\n  };\r\n  return typeIconMap[typeName] ?? 'device_unknown';\r\n}\r\n\r\nexport function calculateTypeLabel(typeName: string): string {\r\n  const typeLabelMap: Record<string, string> = {\r\n    [DataTypeCatalog.Boolean]: 'Boolean (yes/no)',\r\n    [DataTypeCatalog.Custom]: 'Custom - ui-tools or custom types',\r\n    [DataTypeCatalog.DateTime]: 'Date and/or time',\r\n    [DataTypeCatalog.Empty]: 'Empty - for form-titles etc.',\r\n    [DataTypeCatalog.Entity]: 'Entity (other content-items)',\r\n    [DataTypeCatalog.Hyperlink]: 'Link / file reference',\r\n    [DataTypeCatalog.Number]: 'Number',\r\n    [DataTypeCatalog.String]: 'Text / string',\r\n  };\r\n  return typeLabelMap[typeName] ?? 'device_unknown';\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { computed, Injectable, Signal } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  // TODO: @2dg, ask 2dm \r\n  // content-export.component.ts\r\n  // content-import.component.ts\r\n  // data.component.ts\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  getType(nameId: string) {\r\n    return httpResource<ContentType>(() => ({\r\n      url: this.apiUrl(webApiTypeGet),\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }));\r\n  }\r\n\r\n  getTypes(scope: Signal<string>) {\r\n    return httpResource<ContentType[]>(() => ({\r\n      url: this.apiUrl(webApiTypes),\r\n      params: { appId: this.appId, scope: scope() }\r\n    }), {defaultValue: []});\r\n  }\r\n\r\n  retrieveContentTypesPromise(scope: string): Promise<ContentType[]> {\r\n    return this.fetchPromise<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  getScopesPromise(): Promise<ScopeOption[]> {\r\n    return this.fetchPromise<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).then(scopesData => {\r\n      const scopes = scopesData.old;\r\n      const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({\r\n        name: scopes[key],\r\n        value: key,\r\n      }));\r\n      return scopeOptions;\r\n    });\r\n  }\r\n\r\n  getScopesSig() {\r\n    const scopesSignal = httpResource<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(() => ({\r\n      url: this.apiUrl(webApiTypeScopes),\r\n      params: { appid: this.appId },\r\n    }));\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      // Access the value property directly without calling scopesSignal as a function\r\n      const value = scopesSignal.value;\r\n      const scopesData = value();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2Promise(): Promise<ScopeDetailsDto[]> {\r\n    return this.fetchPromise<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).then(scopesData => scopesData.scopes);\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * A newer base component, without Log being created / requested.\r\n * This is so it's easier to inherit than the BaseComponent,\r\n * which would make typed log with specs harder to implement.\r\n * \r\n * Note that as with time, we wish to get away from these, as we don't want to use many observables any more.\r\n */\r\n@Component({\r\n  selector: 'app-base-component',\r\n  template: '',\r\n})\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseComponent implements OnDestroy {\r\n  \r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      { Guids: itemIds} // 2dg Guids must be in the body as an array (API filter & too many IDs for URL parameters).\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBaseSignal {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safeHtml',\r\n})\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\nconst webApiAppPartsGet = 'admin/appParts/get';\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBaseSignal {\r\n\r\n  getContentInfoLiveParam(scope: Signal<string>) {\r\n    return httpResource<ContentInfo>(() => {\r\n      return {\r\n        url: this.apiUrl(webApiAppPartsGet),\r\n        params: {\r\n          appid: this.appId,\r\n          zoneId: this.zoneId,\r\n          scope: scope()\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBaseSignal {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst logSpecs = {\r\n  all: true,\r\n  getAll: false,\r\n  getAllSig: true,\r\n  getAllLive: false,\r\n  getAllRes: true,\r\n  importQuery: false,\r\n  clonePipeline: false,\r\n  delete: false,\r\n  update: false,\r\n};\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  log = classLog({ PipelinesService }, logSpecs);\r\n  // TODO: @2dg, ask 2dm \r\n  getAll(contentType: string) {\r\n    const l = this.log.fnIf('getAll');\r\n    return l.r(this.getHttpApiUrl<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }));\r\n  }\r\n\r\n  // Full Code, repated x times\r\n  getAllLive(contentType: string, refresh: Signal<unknown>) {\r\n    this.log.fnIf('getAllLive', { contentType, refresh });\r\n    return httpResource<Query[]>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiEntityList),\r\n        params: { appId: this.appId, contentType: contentType }\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Experimental httpResource use! */\r\n  getAllRes(contentType: string, initial?: Query[]) {\r\n    const l = this.log.fnIf('getAllRes');\r\n    const res = httpResource<Query[]>(() => ({\r\n      url: webApiEntityList,\r\n      params: { appId: this.appId, contentType },\r\n    }), { defaultValue: initial });\r\n    return l.r(res);\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    const l = this.log.fnIf('importQuery');\r\n    const obs = from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n    return l.r(obs);\r\n  }\r\n\r\n  clonePipelinePromise(id: number): Promise<null> {\r\n    const l = this.log.fnIf('clonePipeline');\r\n    const obs = this.fetchPromise<null>(webApiQueryClone, {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n    return l.r(obs);\r\n  }\r\n\r\n  delete(id: number) {\r\n    const l = this.log.fnIf('delete');\r\n    const obs = this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n    return l.r(obs);\r\n  }\r\n}\r\n","import { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\n\r\nconst dataTypeLabels: Record<string, { label: string, description: string }> = {\r\n  Boolean: { label: calculateTypeLabel(DataTypeCatalog.Boolean), description: 'Yes/no or true/false values' },\r\n  Custom: { label: calculateTypeLabel(DataTypeCatalog.Custom), description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: calculateTypeLabel(DataTypeCatalog.DateTime), description: 'For date, time or combined values' },\r\n  Empty: { label: calculateTypeLabel(DataTypeCatalog.Empty), description: 'Use to structure your form' },\r\n  Entity: { label: calculateTypeLabel(DataTypeCatalog.Entity), description: 'One or more other content-items' },\r\n  Hyperlink: { label: calculateTypeLabel(DataTypeCatalog.Hyperlink), description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: calculateTypeLabel(DataTypeCatalog.Number), description: 'Any kind of number' },\r\n  String: { label: calculateTypeLabel(DataTypeCatalog.String), description: 'Any kind of text' },\r\n};\r\n\r\nexport interface DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n","import { computed, Injectable, Signal } from '@angular/core';\r\nimport { Of } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services';\r\nimport { calculateDataTypes, DataType } from '../../content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers';\r\nimport { HttpServiceBaseSignal } from '../services/http-service-base-signal';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeCatalog } from './input-type-catalog';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\n\r\nexport const webApiFieldsAll = 'admin/field/all';\r\n\r\n// All WebApi paths - to easily search/find when looking for where these are used\r\nconst webApiDataTypes = 'admin/field/DataTypes';\r\nconst webApiReservedNames = 'admin/field/ReservedNames';\r\nconst webApiAddInheritedField = 'admin/field/AddInheritedField';\r\nconst webApiInputTypes = 'admin/field/InputTypes';\r\nconst webApiInputType = 'admin/field/InputType';\r\nconst webApiShare = 'admin/field/Share';\r\nconst webApiInherit = 'admin/field/Inherit';\r\nconst webApiSort = 'admin/field/Sort';\r\nconst webApiSetTitle = webApiTypeRoot + 'SetTitle';\r\nconst webApiRename = 'admin/field/Rename';\r\nconst webApiDelete = 'admin/field/Delete';\r\nconst webApiAdd = 'admin/field/Add';\r\nconst webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\nconst webApiGetAncestors = 'admin/field/GetAncestors';\r\nconst webApiGetDescendants = 'admin/field/GetDescendants';\r\n\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService extends HttpServiceBaseSignal {\r\n\r\n  protected paramsAppId(more: Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>> = {}) {\r\n    return {\r\n      params: {\r\n        appid: this.appId,\r\n        ...more,\r\n      },\r\n    };\r\n  }\r\n\r\n  /** Get list of data types available in the system, such as 'string', 'number' etc. */\r\n  dataTypes() {\r\n    const resourceRef = this.newHttpResource<string[]>(() => ({\r\n      url: this.apiUrl(webApiDataTypes),\r\n      params: this.paramsAppId().params,\r\n    }));\r\n    // Transform raw string data into rich DataType objects\r\n    const transformedData = computed(() => {\r\n      const rawData = resourceRef.value();\r\n      if (!rawData) return [];\r\n      return calculateDataTypes(rawData);\r\n    });\r\n    // Return a resource object with the transformed data, loading state and error information\r\n    return {\r\n      value: transformedData as Signal<DataType[]>,\r\n      loading: resourceRef.isLoading,\r\n      error: resourceRef.error,\r\n    };\r\n  }\r\n\r\n  // Returns a Signal-based resource with sorted and transformed FieldInputTypeOption objects\r\n  getInputTypes() {\r\n    const resourceRef = this.newHttpResource<InputTypeMetadata[]>(() => ({\r\n      url: this.apiUrl(webApiInputTypes),\r\n      params: this.paramsAppId().params,\r\n    }));\r\n\r\n    // This extracts and formats relevant information from each input type configuration\r\n    const mapToFieldInputTypeOption = (config: InputTypeMetadata): FieldInputTypeOption & { sort: string } => ({\r\n      dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n      inputType: config.Type,\r\n      label: config.Label,\r\n      description: config.Description,\r\n      isDefault: config.IsDefault,\r\n      isObsolete: config.IsObsolete,\r\n      isRecommended: config.IsRecommended,\r\n      obsoleteMessage: config.ObsoleteMessage,\r\n      icon: config.IsDefault ? 'stars' : config.IsRecommended ? 'star' : null,\r\n      sort: (config.IsObsolete ? 'z' : config.IsDefault ? 'a' : config.IsRecommended ? 'b' : 'c') + config.Label,\r\n    });\r\n\r\n    // Create a computed signal that automatically transforms and sorts the data when it changes\r\n    const transformedData = computed(() =>\r\n      resourceRef.value()?.map(mapToFieldInputTypeOption)\r\n        .sort((a, b) => a.sort.localeCompare(b.sort)) || []\r\n    );\r\n\r\n    return {\r\n      value: transformedData,\r\n      loading: resourceRef.isLoading,\r\n      error: resourceRef.error,\r\n    };\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.newHttpResource<Record<string, string>>(() => ({\r\n      url: this.apiUrl(webApiReservedNames),\r\n    }));\r\n  }\r\n\r\n  getFieldsLive(refresh: Signal<unknown>, contentTypeStaticName: string): Signal<Field[]> {\r\n    // Create the HTTP resource that will fetch the fields\r\n    const fieldsResource = this.newHttpResource<Field[]>(() => {\r\n      // Reference the refresh signal to trigger refetching when it changes\r\n      refresh();\r\n      return {\r\n        url: this.apiUrl(webApiFieldsAll),\r\n        params: this.paramsAppId({ staticName: contentTypeStaticName }).params,\r\n      };\r\n    }).value;\r\n\r\n    // Create a computed signal that processes the fetched fields\r\n    return computed(() => {\r\n      // Get the current state of the fields resource\r\n      const state = fieldsResource();\r\n\r\n      // Process fields just like in the Promise version\r\n      const fields = state || [];\r\n      for (const fld of fields) {\r\n        if (!fld.Metadata) continue;\r\n        const md = fld.Metadata;\r\n        const allMd = md.All;\r\n        const typeMd = md[fld.Type];\r\n        const inputMd = md[fld.InputType];\r\n        md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n      }\r\n      return fields;\r\n    });\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFieldsPromise(contentTypeStaticName: string): Promise<Field[]> {\r\n    return this.fetchPromise<Field[]>(\r\n      webApiFieldsAll,\r\n      this.paramsAppId({ staticName: contentTypeStaticName })\r\n    ).then(fields => {\r\n      if (fields) {\r\n        for (const fld of fields) {\r\n          if (!fld.Metadata) continue;\r\n          const md = fld.Metadata;\r\n          const allMd = md.All;\r\n          const typeMd = md[fld.Type];\r\n          const inputMd = md[fld.InputType];\r\n          md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n        }\r\n      }\r\n      return fields;\r\n    });\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFieldsPromise(): Promise<Field[]> {\r\n    return this.fetchPromise<Field[]>(webApiFieldsGetShared, {\r\n      params: this.paramsAppId().params\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    return this.#getShareinfoPromise(webApiFieldsGetShared, attributeId);\r\n  }\r\n\r\n  getAncestors(attributeId: number) {\r\n    return this.#getShareinfoPromise(webApiGetAncestors, attributeId);\r\n  }\r\n\r\n  getDescendants(attributeId: number) {\r\n    return this.#getShareinfoPromise(webApiGetDescendants, attributeId);\r\n  }\r\n\r\n  #getShareinfoPromise(endpoint: string, attributeId: number): Promise<Field[]> {\r\n    return this.fetchPromise<Field[]>(endpoint, {\r\n      params: this.paramsAppId({ attributeId }).params\r\n    });\r\n  }\r\n\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceType: string, sourceFieldGuid: string /* guid */, name: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiAddInheritedField), null, this.paramsAppId({\r\n      contentTypeId: targetContentTypeId.toString(),\r\n      sourceType,\r\n      sourceField: sourceFieldGuid,\r\n      name,\r\n    }));\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiShare), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiInherit), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiSort), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiSetTitle), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiRename), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle)\r\n      throw new Error('Can\\'t delete Title');\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiDelete), {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiAdd), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(attributeId: number, field: string, inputType: Of<typeof InputTypeCatalog>) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiInputType), null, {\r\n      params: { appId: this.appId, attributeId, field, inputType }\r\n    });\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}