{"version":3,"file":"projects_eav-ui_src_app_manage-content-list_manage-content-list_component_ts-projects_eav-ui_-8d5b99.6819c1540d30bae9.js","mappings":"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","names":["ServiceBase","constructor","this","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","jDH","factory","ɵfac","convert","obj","fn","getWith","$item","Id","i0","_r3","ctx_r1","editHeader","header","Title","ManageContentListComponent_Conditional_0_Conditional_11_Conditional_4_Template","ManageContentListComponent_Conditional_0_Conditional_11_Conditional_5_Template","Type","reordered","tmp_2_0","items","length","item_r5","_r4","$implicit","addFromExisting","Index","addBelow","remove","editItem","_r6","saveAndCloseList","_r7","saveList","_r1","closeDialog","ManageContentListComponent_Conditional_0_Conditional_11_Template","ManageContentListComponent_Conditional_0_Conditional_12_Template","$event","drop","ManageContentListComponent_Conditional_0_For_15_Template","_forTrack0","ManageContentListComponent_Conditional_0_ng_template_18_Template","ManageContentListComponent_Conditional_0_ng_template_19_Template","ManageContentListComponent","#dialogRoutes","#contentGroupSvc","#dialogConfigSvc","dialog","snackBar","translate","hostClass","transient","DialogRoutingService","ContentGroupService","DialogConfigAppService","signalObj","#contentGroup","getParams","p","id","guid","part","index","parseInt","#refresh","signal","getAllLive","value","ngOnInit","#watchKeyboardShortcuts","#fetchList","#fetchDialogSettings","doOnDialogClosed","#fetchHeader","getCurrent$","subscribe","dialogSettings","setDefaultLang","Context","Language","Primary","split","use","Current","close","open","duration","keydownEvents","event","isCtrlS","preventDefault","isCtrlEnter","form","EditPrep","relationship","formUrl","convertFormToUrl","navRelative","editId","queryParams","add","item","confirm","instant","removeItem","moveItemInArray","previousIndex","currentIndex","set","keepOrder","getListPromise","then","oldIds","map","some","includes","sortOrder","sort","a","b","aIndex","indexOf","bIndex","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_5__","VBU","selectors","hostVars","hostBindings","rf","ctx","ManageContentListComponent_Conditional_0_Template","RouterOutlet","CdkScrollable","MatButtonModule","i4","MatIconModule","i5","CdkDropList","CdkDrag","MatDialogActions","TranslateModule","MatDialogModule","TippyDirective","MousedownStopPropagationDirective","i6","i7","i8","i9","SaveCloseButtonComponent","styles","_c0","MAT_ICON_DEFAULT_OPTIONS","InjectionToken","MAT_ICON_LOCATION","providedIn","MAT_ICON_LOCATION_FACTORY","_document","inject","DOCUMENT","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","_elementRef","ElementRef","_iconRegistry","MatIconRegistry","_errorHandler","ErrorHandler","_defaultColor","color","_color","inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","_previousFontSetClass","_previousFontIconClass","_svgName","_svgNamespace","_previousPath","_elementsWithExternalReferences","_currentIconFetch","EMPTY","ariaHidden","HostAttributeToken","optional","defaults","nativeElement","setAttribute","_splitIconName","iconName","parts","Error","ngAfterViewChecked","cachedElements","size","newPath","_prependPathToReferences","clear","_usingFontIcon","_setSvgElement","svg","path","_cacheChildrenWithExternalReferences","appendChild","layoutElement","childCount","childNodes","child","nodeType","nodeName","toLowerCase","elem","fontSetClasses","classNameForFontAlias","getDefaultFontSetClass","filter","className","forEach","classList","trim","elements","attrs","element","name","elementsWithFuncIri","querySelectorAll","Map","i","elementWithReference","getAttribute","match","attributes","get","push","rawName","namespace","getNamedSvgIcon","pipe","take","err","handleError","message","type","hostAttrs","inputs","booleanAttribute","exportAs","ngContentSelectors","decls","vars","template","encapsulation","changeDetection","imports","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/services/service-base.ts","./projects/core/object-utilities.ts","./projects/eav-ui/src/app/manage-content-list/manage-content-list.component.html","./projects/eav-ui/src/app/manage-content-list/manage-content-list.component.ts","./node_modules/@angular/material/fesm2022/icon.mjs"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","\r\n/**\r\n * Conversion function to change something to something else, a bit like 'map' but for a single item.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `getWith` function, but has a different name to indicate the usage.\r\n */\r\nexport function convert<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n/**\r\n * Function to do something with an object and return the result.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `convert` function, but has a different name to indicate the usage.\r\n */\r\nexport function getWith<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n","@if (header() && items()) {\r\n  <div class=\"eav-dialog eav-no-scrollbar\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">\r\n        {{ 'ManageContentList.Title' | translate }}\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <router-outlet></router-outlet>\r\n      <div class=\"dialog-component-content fancy-scrollbar-light\" cdkScrollable>\r\n        @if (header()) {\r\n          <p>\r\n            {{ 'ManageContentList.Description' | translate }}\r\n          </p>\r\n          <p>\r\n            @if (header().Type) {\r\n              <span>{{ header().Title }}</span>\r\n              <button mat-icon-button tippy=\"Edit header\" (click)=\"editHeader()\">\r\n                <mat-icon>edit</mat-icon>\r\n              </button>\r\n            } @else {\r\n              {{ 'ManageContentList.NoHeader' | translate }}\r\n            }\r\n          </p>\r\n        }\r\n        @if (items()) {\r\n          <p class=\"eav-sort-title\">\r\n            {{\r\n              'ManageContentList.' + (reordered() ? 'ListHasBeenReordered' : items()?.length < 25 ? 'SortItems' : 'SortLotsOfItems')\r\n                | translate\r\n            }}\r\n          </p>\r\n        }\r\n\r\n        <!-- Items - with drag-and-drop -->\r\n        <div class=\"eav-dnd-list\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\r\n          <!-- we use both Index and Id because all demo items have Id=0 -->\r\n          @for (item of items(); track item.Index + '+' + item.Id) {\r\n            <div class=\"eav-dnd-item\" cdkDrag>\r\n              <div class=\"eav-dnd-item__title\">\r\n                <mat-icon class=\"eav-dnd-item__title-icon\" tippy=\"Drag to reorder the list\">drag_handle</mat-icon>\r\n                <span class=\"eav-dnd-item__title-text\" tippy=\"{{ item.Title }} ({{ item.Id }})\"> {{ item.Title }} ({{ item.Id }}) </span>\r\n              </div>\r\n              <div>\r\n                <!-- most buttons should only exist if it has a real ID, except for remove - which should also remove null-entries -->\r\n                <button\r\n                  mat-icon-button\r\n                  tippyTranslate=\"Fields.Picker.AddExistingItem\"\r\n                  appMousedownStopPropagation\r\n                  [disabled]=\"item.Id === 0\"\r\n                  (click)=\"addFromExisting(item.Index)\"\r\n                >\r\n                  <mat-icon>playlist_add</mat-icon>\r\n                </button>\r\n                <button\r\n                  mat-icon-button\r\n                  tippyTranslate=\"Fields.Picker.AddItemBelow\"\r\n                  appMousedownStopPropagation\r\n                  [disabled]=\"item.Id === 0 || reordered()\"\r\n                  (click)=\"addBelow(item.Index)\"\r\n                >\r\n                  <mat-icon>add</mat-icon>\r\n                </button>\r\n                <button\r\n                  mat-icon-button\r\n                  tippyTranslate=\"Fields.Picker.Remove\"\r\n                  appMousedownStopPropagation\r\n                  [disabled]=\"reordered()\"\r\n                  (click)=\"remove(item)\"\r\n                >\r\n                  <mat-icon>remove</mat-icon>\r\n                </button>\r\n                <button\r\n                  mat-icon-button\r\n                  tippyTranslate=\"Fields.Picker.Edit\"\r\n                  appMousedownStopPropagation\r\n                  [disabled]=\"item.Id === 0\"\r\n                  (click)=\"editItem(item.Id)\"\r\n                >\r\n                  <mat-icon>edit</mat-icon>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <extended-fab-speed-dial>\r\n        <ng-template extendedFabSpeedDialTriggerContent>\r\n          <app-save-close-button\r\n            [label]=\"'Form.Buttons.SaveAndClose'\"\r\n            (action)=\"saveAndCloseList()\"\r\n          ></app-save-close-button>\r\n        </ng-template>\r\n        <ng-template extendedFabSpeedDialActionsContent>\r\n          <button extended-fab-speed-dial-action\r\n            matRipple\r\n            (click)=\"saveList()\"\r\n          >\r\n            <span>{{ 'Form.Buttons.Save' | translate }}</span>\r\n            <mat-icon>save</mat-icon>\r\n          </button>\r\n        </ng-template>\r\n      </extended-fab-speed-dial>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { CdkDrag, CdkDragDrop, CdkDropList, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { CdkScrollable } from '@angular/cdk/scrolling';\r\nimport { Component, HostBinding, OnInit, signal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogActions, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { convert, transient } from '../../../../core';\r\nimport { DialogConfigAppService } from '../app-administration/services/dialog-config-app.service';\r\nimport { isCtrlEnter, isCtrlS } from '../edit/dialog/main/keyboard-shortcuts';\r\nimport { MousedownStopPropagationDirective } from '../shared/directives/mousedown-stop-propagation.directive';\r\nimport { TippyDirective } from '../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { ExtendedFabSpeedDialImports } from '../shared/modules/extended-fab-speed-dial/extended-fab-speed-dial.imports';\r\nimport { SaveCloseButtonComponent } from '../shared/modules/save-close-button/save-close-button.component';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { signalObj } from '../shared/signals/signal.utilities';\r\nimport { ContentGroup } from './models/content-group.model';\r\nimport { GroupHeader } from './models/group-header.model';\r\nimport { ContentGroupService } from './services/content-group.service';\r\n\r\n@Component({\r\n  selector: 'app-manage-content-list',\r\n  templateUrl: './manage-content-list.component.html',\r\n  styleUrls: ['./manage-content-list.component.scss'],\r\n  imports: [\r\n    RouterOutlet,\r\n    CdkScrollable,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    CdkDropList,\r\n    CdkDrag,\r\n    MatDialogActions,\r\n    TranslateModule,\r\n    MatDialogModule,\r\n    TippyDirective,\r\n    MousedownStopPropagationDirective,\r\n    ...ExtendedFabSpeedDialImports,\r\n    SaveCloseButtonComponent,\r\n  ]\r\n})\r\nexport class ManageContentListComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  #dialogRoutes = transient(DialogRoutingService);\r\n  #contentGroupSvc = transient(ContentGroupService);\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ManageContentListComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private translate: TranslateService,\r\n  ) { }\r\n\r\n  protected items = signalObj<GroupHeader[]>('items', null);\r\n\r\n  #contentGroup = convert(this.#dialogRoutes.getParams(['guid', 'part', 'index']), p => ({\r\n    id: null as number,\r\n    guid: p.guid,\r\n    part: p.part,\r\n    index: parseInt(p.index, 10),\r\n  } satisfies ContentGroup));\r\n\r\n  #refresh = signal(0);\r\n  header = this.#contentGroupSvc.getAllLive(this.#contentGroup, this.#refresh).value;\r\n\r\n  protected reordered = signalObj('reordered', false);\r\n\r\n  ngOnInit() {\r\n    this.#watchKeyboardShortcuts();\r\n\r\n    this.#fetchList();\r\n    this.#fetchDialogSettings();\r\n    this.#dialogRoutes.doOnDialogClosed(() => {\r\n      this.#fetchList(true);\r\n      this.#fetchHeader();\r\n    });\r\n  }\r\n\r\n  #fetchDialogSettings() {\r\n    this.#dialogConfigSvc.getCurrent$().subscribe(dialogSettings => {\r\n      this.translate.setDefaultLang(dialogSettings.Context.Language.Primary.split('-')[0]);\r\n      this.translate.use(dialogSettings.Context.Language.Current.split('-')[0]);\r\n    });\r\n  }\r\n\r\n  protected closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  protected saveList() {\r\n    this.snackBar.open('Saving...');\r\n    this.#contentGroupSvc.saveList(this.#contentGroup, this.items()).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.#fetchList();\r\n      this.#fetchHeader();\r\n    });\r\n  }\r\n\r\n  protected saveAndCloseList() {\r\n    this.snackBar.open('Saving...');\r\n    this.#contentGroupSvc.saveList(this.#contentGroup, this.items()).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  #watchKeyboardShortcuts(): void {\r\n    this.dialog.keydownEvents().subscribe(event => {\r\n\r\n      if (isCtrlS(event)) {\r\n        event.preventDefault();\r\n        this.saveList();\r\n      }\r\n\r\n      if (isCtrlEnter(event)) {\r\n        event.preventDefault();\r\n        this.saveAndCloseList();\r\n      }\r\n    });\r\n  }\r\n\r\n  protected editHeader() {\r\n    const form: EditForm = {\r\n      items: [\r\n        EditPrep.relationship(this.#contentGroup.guid, 'listcontent', 0, this.header().Id === 0),\r\n        EditPrep.relationship(this.#contentGroup.guid, 'listpresentation', 0, this.header().Id === 0),\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRoutes.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  protected editItem(id: number) {\r\n    const form: EditForm = {\r\n      items: [EditPrep.editId(id)],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRoutes.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  protected addFromExisting(index: number) {\r\n    const queryParams = { add: true };\r\n    this.#dialogRoutes.navRelative([`${this.#contentGroup.guid}/${this.#contentGroup.part}/${index + 1}/replace`], { queryParams });\r\n  }\r\n\r\n  addBelow(index: number) {\r\n    const form: EditForm = {\r\n      items: [EditPrep.relationship(this.#contentGroup.guid, this.#contentGroup.part, index + 1, true)],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRoutes.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  protected remove(item: GroupHeader) {\r\n    if (!confirm(this.translate.instant('ManageContentList.ConfirmRemove'))) return;\r\n    this.snackBar.open('Removing...');\r\n    this.#contentGroupSvc.removeItem(this.#contentGroup, item.Index).subscribe(() => {\r\n      this.snackBar.open('Removed', null, { duration: 2000 });\r\n      this.#fetchList();\r\n    });\r\n  }\r\n\r\n  protected drop(event: CdkDragDrop<GroupHeader[]>) {\r\n    const items = [...this.items()];\r\n    moveItemInArray(items, event.previousIndex, event.currentIndex);\r\n    this.items.set(items);\r\n    this.reordered.set(true);\r\n  }\r\n\r\n  #fetchList(keepOrder = false) {\r\n    this.#contentGroupSvc.getListPromise(this.#contentGroup).then(items => {\r\n      if (this.reordered()) {\r\n        const oldIds = this.items().map(item => item.Id);\r\n        const idsChanged = this.items().length !== items.length || items.some(item => !oldIds.includes(item.Id));\r\n        // for usecase where list is fetched on child closed and wasn't changed in the meantime keeps the order before child was opened\r\n        if (!idsChanged && keepOrder) {\r\n          const sortOrder = this.items().map(item => item.Index);\r\n          items.sort((a, b) => {\r\n            const aIndex = sortOrder.indexOf(a.Index);\r\n            const bIndex = sortOrder.indexOf(b.Index);\r\n            if (aIndex === -1 || bIndex === -1) { return 0; }\r\n            return aIndex - bIndex;\r\n          });\r\n        } else if (keepOrder)\r\n          this.snackBar.open('List was changed from somewhere else. Order of items is reset', null, { duration: 5000 });\r\n      }\r\n      this.items.set(items);\r\n      this.reordered.set(false);\r\n    });\r\n  }\r\n\r\n  #fetchHeader() {\r\n    this.#refresh.set(this.#refresh() + 1);\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, DOCUMENT, ElementRef, ErrorHandler, HostAttributeToken, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { M as MatIconRegistry } from './icon-registry-CwOTJ7YM.mjs';\nexport { d as ICON_REGISTRY_PROVIDER, I as ICON_REGISTRY_PROVIDER_FACTORY, c as getMatIconFailedToSanitizeLiteralError, b as getMatIconFailedToSanitizeUrlError, g as getMatIconNameNotFoundError, a as getMatIconNoHttpProviderError } from './icon-registry-CwOTJ7YM.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/common/http';\nimport '@angular/platform-browser';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/bidi';\n\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fontawesome-v4.github.io/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon {\n    _elementRef = inject(ElementRef);\n    _iconRegistry = inject(MatIconRegistry);\n    _location = inject(MAT_ICON_LOCATION);\n    _errorHandler = inject(ErrorHandler);\n    _defaultColor;\n    /**\n     * Theme color of the icon. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/icon/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color || this._defaultColor;\n    }\n    set color(value) {\n        this._color = value;\n    }\n    _color;\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    inline = false;\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    _svgIcon;\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    _fontSet;\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    _fontIcon;\n    _previousFontSetClass = [];\n    _previousFontIconClass;\n    _svgName;\n    _svgNamespace;\n    /** Keeps track of the current page path. */\n    _previousPath;\n    /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n    _elementsWithExternalReferences;\n    /** Subscription to the current in-progress SVG icon request. */\n    _currentIconFetch = Subscription.EMPTY;\n    constructor() {\n        const ariaHidden = inject(new HostAttributeToken('aria-hidden'), { optional: true });\n        const defaults = inject(MAT_ICON_DEFAULT_OPTIONS, { optional: true });\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this._defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            this._elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIcon, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatIcon, isStandalone: true, selector: \"mat-icon\", inputs: { color: \"color\", inline: [\"inline\", \"inline\", booleanAttribute], svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color, inherit)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color, inherit)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input\n            }], inline: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\nclass MatIconModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatIcon], exports: [MatIcon, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatIcon],\n                    exports: [MatIcon, MatCommonModule],\n                }]\n        }] });\n\nexport { MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry };\n"],"x_google_ignoreList":[4]}