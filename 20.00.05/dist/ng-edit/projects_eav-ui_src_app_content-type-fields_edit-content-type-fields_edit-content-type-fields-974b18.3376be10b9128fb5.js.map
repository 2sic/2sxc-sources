{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_edit-content-type-fields_edit-content-type-fields-974b18.3376be10b9128fb5.js","mappings":"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","names":["InputTypeCatalog","BooleanDefault","BooleanTristate","CustomDefault","CustomGps","CustomJsonEditor","DateTimeDefault","DefaultSuffix","EmptyDefault","EmptyEnd","EmptyMessage","EntityContentBlocks","EntityDefault","EntityQuery","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","NumberDefault","NumberDropdown","StringDefault","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","StringWysiwyg","EntityPicker","StringPicker","NumberPicker","Unknown","i0","ctx_r1","fieldNameError","staticName_r5","errors","reservedNames","EditContentTypeFieldsComponent_Conditional_9_For_4_Conditional_8_Conditional_0_Template","EditContentTypeFieldsComponent_Conditional_9_For_4_Conditional_8_Conditional_1_Template","pattern","dataType_r7","name","label","icon","option_r8","EditContentTypeFieldsComponent_Conditional_9_For_4_For_34_Conditional_2_Template","inputType","_c2","isObsolete","$event","field_r4","_r3","$implicit","StaticName","EditContentTypeFieldsComponent_Conditional_9_For_4_Conditional_8_Template","ɵ$index_23_r6","$index","setFieldType","value","EditContentTypeFieldsComponent_Conditional_9_For_4_For_20_Template","updateFieldPart","InputType","EditContentTypeFieldsComponent_Conditional_9_For_4_For_34_Template","fieldNamePattern","editMode","touched","Type","findIcon","findLabel","dataTypes","hints","data","tmp_31_0","getInputTypeOption","tmp_32_0","inputTypeOptions","input","_r1","saveAndClose","EditContentTypeFieldsComponent_Conditional_9_For_4_Template","_forTrack0","fields","canSave","EditContentTypeFieldsComponent","BaseComponent","#typesSvc","#typesFieldsSvc","constructor","dialog","route","snackBar","super","this","hostClass","formValid","signal","computed","saving","transient","ContentTypesService","ContentTypesFieldsService","calculateTypeIcon","calculateTypeLabel","snapshot","paramMap","get","filteredInputTypeOptions","#inputTypeOptions","getInputTypes","#contentTypeRouteName","getType","#existingFieldsLazy","contentTypeRouteName","untracked","getFieldsLive","NameId","initial","computedObj","length","routeId","editFieldId","parseInt","find","field","Id","#generateNewList","linkedSignal","source","computation","#reservedNamesSystem","getReservedNames","merged","ReservedNamesValidatorDirective","mergeReserved","all","map","i","filter","option","dataType","toLocaleLowerCase","description","obsoleteMessage","disableClose","subscriptions","add","backdropClick","subscribe","_","ngForm","dirty","confirm","closeDialog","ngAfterViewInit","set","form","valid","statusChanges","autoFocusInputField","setTimeout","first","nativeElement","focus","ngOnInit","#watchKeyboardShortcuts","existingFieldCount","Array","keys","k","DataTypeCatalog","String","IsTitle","SortOrder","index","patch","update","f","type","defaultInputName","options","inputName","close","open","doneAndClose","duration","rename","updateInputType","of","pipe","concatMap","catchError","toArray","keydownEvents","event","isCtrlEnter","preventDefault","static","__ngFactoryType__","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_5__","VBU","selectors","viewQuery","rf","ctx","NgForm","EditContentTypeFieldsComponent_Conditional_3_Template","EditContentTypeFieldsComponent_Conditional_4_Template","EditContentTypeFieldsComponent_Conditional_5_Template","EditContentTypeFieldsComponent_Conditional_9_Template","undefined","tmp_3_0","FormsModule","i4","MatFormFieldModule","i5","MatInputModule","i6","MatSelectModule","i7","MatIconModule","i8","MatOptionModule","NgClass","MatDialogActions","MatButtonModule","i9","TranslateModule","FieldHintComponent","SaveCloseButtonFabComponent","styles","ExtendedFabSpeedDialActionDirective","elementRef","disabled","ngOnChanges","changes","toggleAttribute","_angular_core__WEBPACK_IMPORTED_MODULE_1__","FsC","inputs","features","SaveCloseButtonBase","ngClass","action","output","isDisabled","onClick","emit","outputs","ExtendedFabSpeedDialTriggerContentDirective","templateRef","_angular_core__WEBPACK_IMPORTED_MODULE_0__","ExtendedFabSpeedDialActionsContentDirective","isEscape","key","isCtrlS","ctrlKey","metaKey","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","ngContentSelectors","_c0","decls","vars","consts","template","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","NgTemplateOutlet","reduce","accumulator","seed","operate","scanInternals","arguments","ExtendedFabSpeedDialTriggerDirective","ExtendedFabSpeedDialComponent","open$","BehaviorSubject","ngAfterContentInit","combineLatest","distinctUntilChanged","actionButtons","startWith","forEach","btn","max","Math","min","step","transitionDuration","style","ngOnDestroy","complete","setOpen","pointerType","next","_angular_core__WEBPACK_IMPORTED_MODULE_6__","contentQueries","dirIndex","ElementRef","trigger","actions","encapsulation","SaveCloseButtonFabComponent_ng_template_1_Template","MatRippleModule","TippyDirective"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial-action.directive.ts","./projects/eav-ui/src/app/shared/modules/save-close-button/save-close-button-base.directive.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial-trigger-content.directive.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial-actions-content.directive.ts","./projects/eav-ui/src/app/edit/dialog/main/keyboard-shortcuts.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./node_modules/rxjs/dist/esm/internal/operators/reduce.js","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial-trigger.directive.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial.component.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial.component.html","./projects/eav-ui/src/app/shared/modules/save-close-button-fab/save-close-button-fab.component.html","./projects/eav-ui/src/app/shared/modules/save-close-button-fab/save-close-button-fab.component.ts"],"sourcesContent":["export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      @if (editMode === undefined) {\r\n        Fields\r\n      }\r\n      @if (editMode === null) {\r\n        Add Fields\r\n      }\r\n      @if (editMode != null) {\r\n        Edit Field\r\n      }\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  @if (fields()?.length) {\r\n    <form #ngForm=\"ngForm\" (ngSubmit)=\"saveAndClose()\">\r\n      <div class=\"eav-dialog-content\">\r\n        @for (field of fields(); track field.SortOrder; let i = $index) {\r\n          <div class=\"eav-row-container\">\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Name</mat-label>\r\n                <input\r\n                  matInput\r\n                  [pattern]=\"fieldNamePattern\"\r\n                  [appReservedNames]=\"reservedNames()\"\r\n                  [(ngModel)]=\"field.StaticName\"\r\n                  [name]=\"'StaticName' + i\"\r\n                  #staticName=\"ngModel\"\r\n                  [disabled]=\"editMode === 'inputType'\"\r\n                  #autoFocusInputField\r\n                />\r\n              </mat-form-field>\r\n              @if (staticName.touched && staticName.errors) {\r\n                @if (staticName.errors.pattern) {\r\n                  <app-field-hint [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                }\r\n                @if (staticName.errors.reservedNames) {\r\n                  <app-field-hint [isError]=\"true\">\r\n                    {{ staticName.errors.reservedNames }}\r\n                  </app-field-hint>\r\n                }\r\n              }\r\n            </div>\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Data Type</mat-label>\r\n                <mat-select\r\n                  (selectionChange)=\"setFieldType(i, $event.value)\"\r\n                  [ngModel]=\"field.Type\"\r\n                  [name]=\"'Type' + i\"\r\n                  [disabled]=\"editMode != null\"\r\n                  panelClass=\"eav-type-field-type-select\"\r\n                  panelWidth=\"\"\r\n                >\r\n                  <mat-select-trigger>\r\n                    <mat-icon class=\"eav-type-icon\">{{ findIcon(field.Type) }}</mat-icon>\r\n                    <span>{{ findLabel(field.Type) }}</span>\r\n                  </mat-select-trigger>\r\n                  @for (dataType of dataTypes(); track dataType) {\r\n                    <mat-option [value]=\"dataType.name\">\r\n                      {{ dataType.label }}\r\n                      <!-- Icon must come last; Angular will put it first. Otherwise we can't type the name of the label to quickly find an entry -->\r\n                      <mat-icon class=\"eav-type-icon\">{{ dataType.icon }}</mat-icon>\r\n                    </mat-option>\r\n                  }\r\n                </mat-select>\r\n              </mat-form-field>\r\n              <app-field-hint>{{ hints()[i].data }}</app-field-hint>\r\n            </div>\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Input Type</mat-label>\r\n                <mat-select\r\n                  (selectionChange)=\"updateFieldPart(i, { InputType: $event.value })\"\r\n                  [ngModel]=\"field.InputType\"\r\n                  [name]=\"'InputType' + i\"\r\n                  [disabled]=\"editMode === 'name'\"\r\n                  panelClass=\"eav-type-field-input-type-select\"\r\n                  panelWidth=\"\"\r\n                >\r\n                  <mat-select-trigger>\r\n                    <span>{{ getInputTypeOption(field.InputType)?.label }}</span>\r\n                    <mat-icon class=\"eav-input-icon\">{{ getInputTypeOption(field.InputType)?.icon }}</mat-icon>\r\n                  </mat-select-trigger>\r\n                  @for (option of inputTypeOptions()[i]; track option) {\r\n                    <mat-option [value]=\"option.inputType\" [ngClass]=\"{ 'eav-input-obsolete': option.isObsolete }\">\r\n                      {{ option.label }}\r\n                      @if (option.icon) {\r\n                        <!-- span is needed here because <mat-option> by default puts mat-icon to the beginning -->\r\n                        <span>\r\n                          <mat-icon class=\"eav-input-icon\">{{ option.icon }}</mat-icon>\r\n                        </span>\r\n                      }\r\n                    </mat-option>\r\n                  }\r\n                </mat-select>\r\n              </mat-form-field>\r\n              <app-field-hint>{{ hints()[i].input }}</app-field-hint>\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n      <!-- Save / cancel buttons -->\r\n      <mat-dialog-actions align=\"end\">\r\n        <app-save-close-button-fab\r\n          [ngClass]=\"!canSave() ? 'disabled' : ''\"\r\n          [disabled]=\"!canSave()\"\r\n          (action)=\"saveAndClose()\"\r\n        />\r\n      </mat-dialog-actions>\r\n    </form>\r\n  }\r\n</div>","import { NgClass } from '@angular/common';\r\nimport { AfterViewInit, Component, computed, ElementRef, HostBinding, linkedSignal, OnInit, QueryList, signal, untracked, ViewChild, ViewChildren } from '@angular/core';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { catchError, concatMap, filter, of, toArray } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { isCtrlEnter } from '../../edit/dialog/main/keyboard-shortcuts';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { Field, FieldInputTypeOption } from '../../shared/fields/field.model';\r\nimport { InputTypeCatalog } from '../../shared/fields/input-type-catalog';\r\nimport { SaveCloseButtonFabComponent } from '../../shared/modules/save-close-button-fab/save-close-button-fab.component';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\nimport { ReservedNamesValidatorDirective } from './reserved-names.directive';\r\n\r\ninterface Hints {\r\n  input: string;\r\n  data: string;\r\n}\r\n\r\ntype FieldSubset = Pick<Field, 'Id' | 'Type' | 'InputType' | 'StaticName' | 'IsTitle' | 'SortOrder'>;\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type-fields',\r\n  templateUrl: './edit-content-type-fields.component.html',\r\n  styleUrls: ['./edit-content-type-fields.component.scss'],\r\n  imports: [\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    ReservedNamesValidatorDirective,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatOptionModule,\r\n    NgClass,\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    TranslateModule,\r\n    FieldHintComponent,\r\n    SaveCloseButtonFabComponent\r\n  ]\r\n})\r\nexport class EditContentTypeFieldsComponent extends BaseComponent implements AfterViewInit, OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private ngForm: NgForm;\r\n  @ViewChildren('autoFocusInputField') autoFocusInputField!: QueryList<ElementRef>;\r\n  \r\n  protected formValid = signal(false);\r\n  protected canSave = computed(() => this.formValid() && !this.saving());\r\n\r\n  #typesSvc = transient(ContentTypesService);\r\n  #typesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    protected dialog: MatDialogRef<EditContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    super();\r\n    this.dialog.disableClose = true;\r\n    this.subscriptions.add(\r\n      this.dialog.backdropClick().subscribe(_ => {\r\n        if (this.ngForm?.dirty) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) return;\r\n        }\r\n        this.closeDialog();\r\n      })\r\n    );\r\n  }\r\n\r\n  // External functions / constants to pass to the view\r\n  fieldNamePattern = fieldNamePattern;\r\n  fieldNameError = fieldNameError;\r\n  findIcon = calculateTypeIcon;\r\n  findLabel = calculateTypeLabel;\r\n\r\n  /** Edit mode is either not set (new fields) or edit-name / edit-inputType */\r\n  editMode = this.route.snapshot.paramMap.get('editMode') as 'name' | 'inputType';\r\n  filteredInputTypeOptions: FieldInputTypeOption[][] = [];\r\n  saving = signal(false);\r\n\r\n  /** Data types such as string, number, ... */\r\n  // dataTypes = this.#typesFieldsSvc.dataTypes();\r\n  dataTypes = this.#typesFieldsSvc.dataTypes().value;\r\n\r\n  #inputTypeOptions = this.#typesFieldsSvc.getInputTypes().value;\r\n\r\n  #contentTypeRouteName = this.#typesSvc.getType(this.route.snapshot.paramMap.get('contentTypeStaticName')).value;\r\n\r\n  #existingFieldsLazy = computed(() => {\r\n    const contentTypeRouteName = this.#contentTypeRouteName();\r\n    const data = untracked(() => {\r\n      return this.#typesFieldsSvc.getFieldsLive(signal(0), contentTypeRouteName?.NameId);\r\n    })\r\n    return data;\r\n  });\r\n\r\n\r\n  fields = (() => {\r\n    // Get the fields once the data is ready\r\n    const initial = computedObj('fields', () => {\r\n      const fields = this.#existingFieldsLazy()();\r\n      if (this.editMode != null) {\r\n        if (fields.length === 0) return [];\r\n        const routeId = this.route.snapshot.paramMap.get('id');\r\n        const editFieldId = routeId ? parseInt(routeId, 10) : null;\r\n        const editField = fields.find(field => field.Id === editFieldId);\r\n        return [editField];\r\n      } else\r\n        return this.#generateNewList(fields.length);\r\n    });\r\n\r\n    return linkedSignal({\r\n      source: initial,\r\n      computation: fields => fields,\r\n    });\r\n  })();\r\n\r\n  // Figure out the reserved names which should not be used as field names\r\n  #reservedNamesSystem = this.#typesFieldsSvc.getReservedNames().value;\r\n\r\n  reservedNames = computedObj('reservedNamesAll', () => {\r\n    // setup watchers\r\n    const fields = this.#existingFieldsLazy()();\r\n    const reservedNames = this.#reservedNamesSystem();\r\n    if (fields.length === 0)\r\n      return reservedNames;\r\n    const merged = ReservedNamesValidatorDirective.mergeReserved(reservedNames, fields);\r\n\r\n    // If we're about to rename, allow the current name to be reused\r\n    if (this.editMode === 'name')\r\n      delete merged[fields[0].StaticName];\r\n    return merged;\r\n  });\r\n\r\n  ngAfterViewInit(): void {\r\n    // Only run form logic if fields are loaded and form is rendered\r\n    if (this.fields().length && this.ngForm) {\r\n      this.formValid.set(this.ngForm?.form.valid ?? false);\r\n      this.ngForm?.form.statusChanges.subscribe(() => {\r\n        this.formValid.set(this.ngForm?.form.valid ?? false);\r\n      });\r\n    } else {\r\n      // Retry after a short delay if not ready\r\n      setTimeout(() => this.ngAfterViewInit(), 250);\r\n      return;\r\n    }\r\n    // Wait for the inputFields to be available\r\n    // But delay execution to ensure the view is fully rendered\r\n    if (this.autoFocusInputField)\r\n      setTimeout(() => this.autoFocusInputField.first?.nativeElement?.focus(), 250);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.#watchKeyboardShortcuts();\r\n\r\n  //   setTimeout(() => {\r\n  //     console.log(this.#contentTypeRouteName()?.NameId)\r\n\r\n  //   }, 110); // Force change detection to ensure the view is ready\r\n  //   this.#typesFieldsSvc.getFieldsPromise(this.#contentTypeRouteName()?.NameId).then(fields => {\r\n  //     console.log('Fields loaded', fields);\r\n  //     this.#existingFieldsLazy.set(fields);\r\n  //   })\r\n  }\r\n\r\n  #generateNewList(existingFieldCount: number): FieldSubset[] {\r\n    return [...Array(8).keys()].map(k => ({\r\n      Id: 0,\r\n      Type: DataTypeCatalog.String,\r\n      InputType: InputTypeCatalog.StringDefault,\r\n      StaticName: '',\r\n      // first one is title, if there were no fields before\r\n      IsTitle: existingFieldCount === 0 && k === 0,\r\n      SortOrder: existingFieldCount + k + 1,\r\n    } satisfies FieldSubset));\r\n  }\r\n\r\n  /** 2D array of all possible options (by field index) */\r\n  inputTypeOptions = computedObj('inputTypeOptions', () => {\r\n    const all = this.#inputTypeOptions();\r\n    const fields = this.fields();\r\n    return fields.map((field, i) => {\r\n      return all.filter(option => option.dataType === field.Type.toLocaleLowerCase());\r\n    });\r\n  });\r\n\r\n  updateFieldPart(index: number, patch: Partial<Field>) {\r\n    this.fields.update(fields => [...fields].map((f, i) => (i !== index) ? f : ({ ...f, ...patch })));\r\n  }\r\n\r\n  setFieldType(index: number, type: string) {\r\n    // First update the field, as we'll access this again indirectly through other signals\r\n    this.updateFieldPart(index, { Type: type });\r\n\r\n    // Check if it has a xxx-default like string-default in the list\r\n    const defaultInputName = type.toLocaleLowerCase() + InputTypeCatalog.DefaultSuffix;\r\n    const options = this.inputTypeOptions()[index];\r\n    const inputName = options.find(option => option.inputType === defaultInputName)?.inputType\r\n      ?? options[0].inputType;\r\n    this.updateFieldPart(index, { InputType: inputName });\r\n  }\r\n\r\n  hints = computedObj('hints', () => {\r\n    const fields = this.fields();\r\n    return fields.map((field, i) => {\r\n      const dataType = this.dataTypes().find(dataType => dataType.name === field.Type);\r\n      const inputType = this.#inputTypeOptions().find(option => option.inputType === field.InputType);\r\n      return {\r\n        data: dataType?.description ?? '',\r\n        input: inputType?.isObsolete\r\n          ? `OBSOLETE - ${inputType.obsoleteMessage}`\r\n          : inputType?.description ?? '',\r\n      } satisfies Hints;\r\n    });\r\n  });\r\n\r\n  getInputTypeOption(inputName: string) {\r\n    return this.#inputTypeOptions().find(option => option.inputType === inputName);\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  saveAndClose() {\r\n    this.saving.set(true);\r\n    this.snackBar.open('Saving...');\r\n\r\n    // Prepare finalize-action to reuse below\r\n    const doneAndClose = () => {\r\n      this.saving.set(false);\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    }\r\n\r\n    if (this.editMode != null) {\r\n      const field = this.fields()[0];\r\n      if (this.editMode === 'name') {\r\n        this.#typesFieldsSvc\r\n          .rename(field.Id, this.#contentTypeRouteName().Id, field.StaticName)\r\n          .subscribe(() => doneAndClose());\r\n      } else if (this.editMode === 'inputType') {\r\n        this.#typesFieldsSvc\r\n          .updateInputType(field.Id, field.StaticName, field.InputType)\r\n          .subscribe(() => doneAndClose());\r\n      }\r\n    } else {\r\n      of(...this.fields())\r\n        .pipe(\r\n          filter(field => !!field.StaticName),\r\n          concatMap(field =>\r\n            this.#typesFieldsSvc.add(field, this.#contentTypeRouteName().Id).pipe(catchError(_ => of(null)))\r\n          ),\r\n          toArray(),\r\n        )\r\n        .subscribe(() => doneAndClose());\r\n    }\r\n  }\r\n\r\n  #watchKeyboardShortcuts(): void {\r\n    this.dialog.keydownEvents().subscribe(event => {\r\n      if (isCtrlEnter(event) && this.canSave()) {\r\n        event.preventDefault();\r\n        this.saveAndClose();\r\n      }\r\n    });\r\n  }\r\n}","import { Directive, ElementRef, input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n  selector: '[extended-fab-speed-dial-action]',\r\n})\r\nexport class ExtendedFabSpeedDialActionDirective implements OnChanges {\r\n  disabled = input<boolean>(false);\r\n\r\n  constructor(private elementRef: ElementRef<HTMLElement>) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.disabled != null) {\r\n      this.elementRef.nativeElement.toggleAttribute('disabled', this.disabled());\r\n    }\r\n  }\r\n}\r\n","import { Directive, input, output } from '@angular/core';\r\n\r\n// 2pp: needs to be a directive in order to make input, output functions work\r\n@Directive()\r\nexport abstract class SaveCloseButtonBase {\r\n  /** Button label, can be a translation key or plain text */\r\n  label = input<string>('Form.Buttons.SaveAndClose');\r\n\r\n  /** Material icon name to show */\r\n  icon = input<string>('done');\r\n\r\n  /** Classes to apply to the button */\r\n  ngClass = input<string>('');\r\n\r\n  /** If true, disables the button. Can also be a function returning boolean */\r\n  disabled = input<boolean | (() => boolean)>(false);\r\n\r\n  /** Emits when the button is clicked */\r\n  action = output<Event>();\r\n\r\n  /** Derived property for disabled state */\r\n  get isDisabled(): boolean {\r\n    return typeof this.disabled === 'function' ? !!this.disabled() : !!this.disabled;\r\n  }\r\n\r\n  onClick(event: Event) {\r\n    if (!this.isDisabled) {\r\n      this.action.emit(event);\r\n    }\r\n  }\r\n}","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n  selector: '[extendedFabSpeedDialTriggerContent]',\r\n})\r\nexport class ExtendedFabSpeedDialTriggerContentDirective {\r\n  constructor(public templateRef: TemplateRef<unknown>) { }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n  selector: '[extendedFabSpeedDialActionsContent]',\r\n})\r\nexport class ExtendedFabSpeedDialActionsContentDirective {\r\n  constructor(public templateRef: TemplateRef<unknown>) { }\r\n}\r\n","/**\r\n * Checks if the keyboard event is triggered by the Escape key.\r\n * @param event KeyboardEvent\r\n * @returns boolean\r\n */\r\nexport function isEscape(event: KeyboardEvent): boolean {\r\n  return event.key === 'Escape';\r\n}\r\n\r\n/**\r\n * Checks if the keyboard event is triggered by Ctrl + S (or Cmd + S on Mac).\r\n * @param event KeyboardEvent\r\n * @returns boolean\r\n */\r\nexport function isCtrlS(event: KeyboardEvent): boolean {\r\n  return (event.key === 's' || event.key === 'S') && (event.ctrlKey || event.metaKey);\r\n}\r\n\r\n/**\r\n * Checks if the keyboard event is triggered by Ctrl + Enter (or Cmd + Enter on Mac).\r\n * @param event KeyboardEvent\r\n * @returns boolean\r\n */\r\nexport function isCtrlEnter(event: KeyboardEvent): boolean {\r\n  return event.key === 'Enter' && (event.ctrlKey || event.metaKey);\r\n}","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n    selector: 'app-field-hint',\r\n    templateUrl: './field-hint.component.html',\r\n    styleUrls: ['./field-hint.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        NgClass,\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { scanInternals } from './scanInternals';\nimport { operate } from '../util/lift';\nexport function reduce(accumulator, seed) {\n    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n","import { Directive, ElementRef, input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n  selector: '[extended-fab-speed-dial-trigger]',\r\n})\r\nexport class ExtendedFabSpeedDialTriggerDirective implements OnChanges {\r\n  disabled = input<boolean>(false);\r\n\r\n  constructor(private elementRef: ElementRef<HTMLElement>) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.disabled != null) {\r\n      this.elementRef.nativeElement.toggleAttribute('disabled', this.disabled());\r\n    }\r\n  }\r\n}\r\n","// tslint:disable-next-line:max-line-length\r\nimport { NgTemplateOutlet } from '@angular/common';\r\nimport { AfterContentInit, Component, ContentChild, ContentChildren, ElementRef, input, OnDestroy, QueryList, ViewEncapsulation } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, startWith } from 'rxjs';\r\nimport { BaseComponent } from '../../components/base.component';\r\nimport { ExtendedFabSpeedDialActionDirective } from './extended-fab-speed-dial-action.directive';\r\nimport { ExtendedFabSpeedDialActionsContentDirective } from './extended-fab-speed-dial-actions-content.directive';\r\nimport { ExtendedFabSpeedDialTriggerContentDirective } from './extended-fab-speed-dial-trigger-content.directive';\r\n\r\n/**\r\n * Special Speed-Dial kind of FAB which opens more menu items on hover.\r\n *\r\n * IMPORTANT: to work it needs ca. 4 more directives.\r\n * So never import this component directly, but instead import the ExtendedFabSpeedDialImports.\r\n */\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'extended-fab-speed-dial',\r\n    templateUrl: './extended-fab-speed-dial.component.html',\r\n    styleUrls: ['./extended-fab-speed-dial.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class ExtendedFabSpeedDialComponent extends BaseComponent implements AfterContentInit, OnDestroy {\r\n  @ContentChild(ExtendedFabSpeedDialTriggerContentDirective) trigger: ExtendedFabSpeedDialTriggerContentDirective;\r\n  @ContentChild(ExtendedFabSpeedDialActionsContentDirective) actions: ExtendedFabSpeedDialActionsContentDirective;\r\n  @ContentChildren(ExtendedFabSpeedDialActionDirective, { read: ElementRef }) actionButtons: QueryList<ElementRef<HTMLButtonElement>>;\r\n\r\n  disabled = input<boolean>(false);\r\n\r\n  open$ = new BehaviorSubject(false);\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this.subscriptions.add(\r\n      combineLatest([\r\n        this.open$.pipe(distinctUntilChanged()),\r\n        this.actionButtons.changes.pipe(startWith(undefined)),\r\n      ]).subscribe(([open]) => {\r\n        this.actionButtons.forEach((btn, i, all) => {\r\n          const min = 0.3;\r\n          const max = Math.min(min + (all.length - 1) * 0.05, 0.6);\r\n          const step = (max - min) / (all.length - 1);\r\n          const transitionDuration = `${open ? min + step * i : max - step * i}s`;\r\n          if (btn.nativeElement.style.transitionDuration !== transitionDuration) {\r\n            btn.nativeElement.style.transitionDuration = transitionDuration;\r\n          }\r\n        });\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.open$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  setOpen(event: PointerEvent, open: boolean): void {\r\n    if (event.pointerType === 'touch') return;\r\n    this.open$.next(open);\r\n  }\r\n}\r\n","<div class=\"extended-fab-speed-dial\" [attr.disabled]=\"disabled() || null\" (pointerenter)=\"setOpen($event, true)\"\r\n  (pointerleave)=\"setOpen($event, false)\">\r\n  <div class=\"extended-fab-speed-dial-trigger\">\r\n    <ng-container [ngTemplateOutlet]=\"trigger?.templateRef\"></ng-container>\r\n  </div>\r\n  <div class=\"extended-fab-speed-dial-actions\">\r\n    <ng-container [ngTemplateOutlet]=\"actions?.templateRef\"></ng-container>\r\n  </div>\r\n</div>\r\n","<extended-fab-speed-dial>\r\n  <ng-template extendedFabSpeedDialTriggerContent>\r\n    <button\r\n      type=\"button\"\r\n      [tippy]=\"(label() | translate) + ' (' + ('Form.Buttons.ActionAndCloseShortcut' | translate) + ')'\"\r\n      tippyShowDelay=\"500\"\r\n      [ngClass]=\"ngClass()\"\r\n      [disabled]=\"isDisabled\"\r\n      (click)=\"onClick($event)\"\r\n      extended-fab-speed-dial-trigger\r\n      matRipple\r\n    >\r\n      <span>{{ label() | translate }}</span>\r\n      <span class=\"keybinding-hint\">\r\n        <kbd>⌃</kbd><kbd>⏎</kbd>\r\n      </span>\r\n      <mat-icon>{{ icon() }}</mat-icon>\r\n    </button>\r\n  </ng-template>\r\n</extended-fab-speed-dial>\r\n","import { NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { ExtendedFabSpeedDialImports } from '../extended-fab-speed-dial/extended-fab-speed-dial.imports';\r\nimport { SaveCloseButtonBase } from '../save-close-button/save-close-button-base.directive';\r\n\r\n@Component({\r\n  selector: 'app-save-close-button-fab',\r\n  imports: [\r\n    NgClass,\r\n    MatIconModule,\r\n    ...ExtendedFabSpeedDialImports,\r\n    MatRippleModule,\r\n    TranslateModule,\r\n    TippyDirective,\r\n  ],\r\n  templateUrl: './save-close-button-fab.component.html',\r\n  styleUrls: ['../save-close-button/save-close-button.component.scss'],\r\n})\r\nexport class SaveCloseButtonFabComponent extends SaveCloseButtonBase {}"],"x_google_ignoreList":[10]}