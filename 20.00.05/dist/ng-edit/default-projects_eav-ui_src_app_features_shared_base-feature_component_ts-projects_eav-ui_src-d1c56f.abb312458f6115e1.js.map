{"version":3,"file":"default-projects_eav-ui_src_app_features_shared_base-feature_component_ts-projects_eav-ui_src-d1c56f.abb312458f6115e1.js","mappings":"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","names":["FeatureComponentBase","#matDialog","#viewContainerRef","#changeDetectorRef","#featuresService","constructor","this","featureNameId","input","required","showIf","inject","MatDialog","ViewContainerRef","ChangeDetectorRef","FeaturesService","feature","computedObj","getCurrent","show","feat","isEnabled","openDialog","openFeatureDialog","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_5__","FsC","inputs","dialog","featureId","viewContainerRef","changeDetectorRef","open","FeatureInfoDialogComponent","autoFocus","data","width","markForCheck","BADGE_CONTENT_CLASS","_MatBadgeStyleLoader","i0","type","selectors","decls","vars","template","rf","ctx","styles","encapsulation","changeDetection","MatBadge","_ngZone","NgZone","_elementRef","ElementRef","_ariaDescriber","AriaDescriber","_renderer","Renderer2","_animationsDisabled","_idGenerator","_IdGenerator","color","_color","value","_setColor","overlap","disabled","position","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","size","hidden","_badgeElement","_inlineBadgeDescription","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","styleLoader","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","isAbove","indexOf","isAfter","getBadgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","getId","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","hostAttrs","hostVars","hostBindings","booleanAttribute","MatBadgeModule","imports","A11yModule","MatCommonModule","_c0","_c1","EcoFabSpeedDialActionsComponent_Conditional_0_Template","_c2","_c3","_c4","_c5","getHostElement","miniFab","EcoFabSpeedDialActionsComponent","renderer","parent","EcoFabSpeedDialComponent","buttons","contentChildren","MatMiniFabButton","anchors","MatMiniFabAnchor","miniFabs","computed","initMiniFabStates","effect","forEach","matMini","i","hostElement","addClass","changeElementStyle","toString","setActionsVisibility","miniFabVisible","showMiniFabAnimation","hideMiniFab","resetAnimationState","setTimeout","transitionDelay","clearTimeout","unsubscribe","hide","length","obs","reverse","map","fromEvent","pipe","take","forkJoin","subscribe","total","elem","style","setStyle","contentQueries","dirIndex","ngContentSelectors","elementRef","document","documentClickUnlistener","model","processOpen","openChange","emit","direction","previousDirection","processDirection","setElementClass","output","childActions","contentChild","unsetDocumentClickListener","toggle","update","onClick","set","processOutsideClickState","elemClass","isAdd","finalClass","removeClass","setDocumentClickListener","listen","outputs","consts","EcoFabSpeedDialTriggerComponent","spin","event","stopPropagation","$event","ClipboardService","snackBar","copyToClipboard","text","duration","i1","_angular_core__WEBPACK_IMPORTED_MODULE_1__","jDH","factory","ɵfac","providedIn","webApiFeatureDetails","FeatureDetailService","HttpServiceBaseSignal","getFeatureDetail","nameId","newHttpResource","url","apiUrl","params","getFeatureDetails","nameIds","featureList","signal","fetchPromise","then","prev","ctx_r1","_r3","clipboard","guid","_r1","closeDialog","FeatureDetailsDialogComponent_Conditional_0_Conditional_16_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_17_Template","name","mySpecs","showStatus","showGuid","security","Impact","Message","link","FeatureDetailsDialogComponent","dialogSpecs","specs","transient","close","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_0__","VBU","FeatureDetailsDialogComponent_Conditional_0_Template","MatButtonModule","i2","MatIconModule","i3","SafeHtmlPipe","TranslateModule","i4","MatDialogActions","MatBadgeIconDirective","super","matBadgeIcon","iconElement","createText","RendererStyleFlags2","Important","features","#featureDetailSvc","dialogData","route","snapshot","featureDetails","FeatureInfoDialogComponent_Conditional_0_Template","tmp_0_0"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./node_modules/@angular/material/fesm2022/badge.mjs","./node_modules/@ecodev/fab-speed-dial/fesm2022/ecodev-fab-speed-dial.mjs","./projects/eav-ui/src/app/shared/services/clipboard.service.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./projects/eav-ui/src/app/shared/directives/mat-badge-icon.directive.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts"],"sourcesContent":["import { ChangeDetectorRef, Directive, ViewContainerRef, inject, input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { FeaturesService } from '../features.service';\r\n\r\n/**\r\n * Base component for various UI components which inform that a feature is not enabled.\r\n * It's meant to show the indicator/warning, and open a dialog with more information about the feature.\r\n */\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n\r\n  /** Feature NameId to check */\r\n  featureNameId = input.required<string>();\r\n\r\n  /** When to show it - typically when it is _not_ enabled (default) */\r\n  showIf = input<boolean>(false);\r\n\r\n  #matDialog = inject(MatDialog);\r\n  #viewContainerRef = inject(ViewContainerRef);\r\n  #changeDetectorRef = inject(ChangeDetectorRef);\r\n  #featuresService = inject(FeaturesService);\r\n\r\n  constructor() { }\r\n\r\n  feature = computedObj('feature', () => this.#featuresService.getCurrent(this.featureNameId()));\r\n\r\n  show = computedObj('show', () => {\r\n    const feat = this.feature();\r\n    if (feat == null) return false;\r\n    return this.showIf() == (feat?.isEnabled ?? false);\r\n  })\r\n\r\n  openDialog() {\r\n    openFeatureDialog(this.#matDialog, this.featureNameId(), this.#viewContainerRef, this.#changeDetectorRef);\r\n  }\r\n}\r\n\r\nexport function openFeatureDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n  dialog.open(FeatureInfoDialogComponent, {\r\n    autoFocus: false,\r\n    data: featureId,\r\n    viewContainerRef: viewContainerRef,\r\n    width: '400px',\r\n  });\r\n\r\n  changeDetectorRef?.markForCheck();\r\n}\r\n","import { AriaDescriber, _IdGenerator, InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, ElementRef, Renderer2, DOCUMENT, HOST_TAG_NAME, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/bidi';\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\\n\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber);\n    _renderer = inject(Renderer2);\n    _animationsDisabled = _animationsDisabled();\n    _idGenerator = inject(_IdGenerator);\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/badge/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    _color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    overlap = true;\n    /** Whether the badge is disabled. */\n    disabled;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position = 'above after';\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size = 'medium';\n    /** Whether the badge is hidden. */\n    hidden;\n    /** Visible badge element. */\n    _badgeElement;\n    /** Inline badge description. Used when the badge is applied to non-interactive host elements. */\n    _inlineBadgeDescription;\n    /** Whether the OnInit lifecycle hook has run yet */\n    _isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    _interactivityChecker = inject(InteractivityChecker);\n    _document = inject(DOCUMENT);\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_MatBadgeStyleLoader);\n        styleLoader.load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = this._elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const tagName = inject(HOST_TAG_NAME);\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.dev/components/badge/overview#accessibility\n            if (tagName.toLowerCase() === 'mat-icon' &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', this._idGenerator.getId('mat-badge-content-'));\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationsDisabled) {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && !this._animationsDisabled) {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadge, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\nexport { MatBadge, MatBadgeModule };\n","import * as i0 from '@angular/core';\nimport { inject, Renderer2, contentChildren, computed, effect, Component, ElementRef, DOCUMENT, model, input, output, contentChild, ViewEncapsulation } from '@angular/core';\nimport { MatMiniFabButton, MatMiniFabAnchor } from '@angular/material/button';\nimport { fromEvent, forkJoin } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst Z_INDEX_ITEM = 23;\nfunction getHostElement(miniFab) {\n    return miniFab._elementRef.nativeElement;\n}\nclass EcoFabSpeedDialActionsComponent {\n    renderer = inject(Renderer2);\n    parent = inject(EcoFabSpeedDialComponent);\n    buttons = contentChildren(MatMiniFabButton);\n    anchors = contentChildren(MatMiniFabAnchor);\n    miniFabs = computed(() => [...this.buttons(), ...this.anchors()]);\n    initMiniFabStates = effect(() => {\n        this.miniFabs().forEach((matMini, i) => {\n            const hostElement = getHostElement(matMini);\n            this.renderer.addClass(hostElement, 'eco-fab-action-item');\n            this.changeElementStyle(hostElement, 'z-index', '' + (Z_INDEX_ITEM - i).toString());\n        });\n        this.parent.setActionsVisibility();\n    });\n    /**\n     * Whether the mini-fab exist in DOM\n     */\n    miniFabVisible = false;\n    /**\n     * The timeout ID for the callback to show the mini-fabs\n     */\n    showMiniFabAnimation;\n    /**\n     * When we will remove mini-fab from DOM, after the animation is complete\n     */\n    hideMiniFab = null;\n    show() {\n        this.resetAnimationState();\n        this.miniFabVisible = true;\n        this.showMiniFabAnimation = setTimeout(() => {\n            this.miniFabs().forEach((miniFab, i) => {\n                const hostElement = getHostElement(miniFab);\n                this.changeElementStyle(hostElement, 'transition-delay', this.transitionDelay(i));\n                this.changeElementStyle(hostElement, 'transform', 'scale(1)');\n            });\n        }, 50); // Be sure that @if can show elements before trying to animate them\n    }\n    resetAnimationState() {\n        clearTimeout(this.showMiniFabAnimation);\n        if (this.hideMiniFab) {\n            this.hideMiniFab.unsubscribe();\n            this.hideMiniFab = null;\n        }\n    }\n    hide() {\n        this.resetAnimationState();\n        const miniFabs = this.miniFabs();\n        if (!miniFabs.length) {\n            this.miniFabVisible = false;\n            return;\n        }\n        const obs = [...miniFabs].reverse().map((miniFab, i) => {\n            const hostElement = getHostElement(miniFab);\n            this.changeElementStyle(hostElement, 'transition-delay', this.transitionDelay(i));\n            this.changeElementStyle(hostElement, 'transform', 'scale(0)');\n            return fromEvent(hostElement, 'transitionend').pipe(take(1));\n        });\n        // Wait for all animations to finish, then destroy their elements\n        this.hideMiniFab = forkJoin(obs).subscribe(() => (this.miniFabVisible = false));\n    }\n    transitionDelay(i) {\n        const total = 100; // Maximum of 100 ms seconds for all cumulated delays\n        const length = this.miniFabs().length;\n        const transitionDelayOne = length ? total / length : 0;\n        const transitionDelay = transitionDelayOne * i;\n        return transitionDelay.toString() + 'ms';\n    }\n    changeElementStyle(elem, style, value) {\n        this.renderer.setStyle(elem, style, value);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.2\", ngImport: i0, type: EcoFabSpeedDialActionsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.0.2\", type: EcoFabSpeedDialActionsComponent, isStandalone: true, selector: \"eco-fab-speed-dial-actions\", queries: [{ propertyName: \"buttons\", predicate: MatMiniFabButton, isSignal: true }, { propertyName: \"anchors\", predicate: MatMiniFabAnchor, isSignal: true }], ngImport: i0, template: `@if (miniFabVisible) {\n        <ng-content select=\"[mat-mini-fab]\" />\n    }`, isInline: true });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.2\", ngImport: i0, type: EcoFabSpeedDialActionsComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'eco-fab-speed-dial-actions',\n                    template: `@if (miniFabVisible) {\n        <ng-content select=\"[mat-mini-fab]\" />\n    }`,\n                }]\n        }] });\n/** @dynamic @see https://github.com/angular/angular/issues/20351#issuecomment-344009887 */\nclass EcoFabSpeedDialComponent {\n    elementRef = inject(ElementRef);\n    renderer = inject(Renderer2);\n    document = inject(DOCUMENT);\n    documentClickUnlistener = null;\n    /**\n     * Whether this speed dial is opened\n     */\n    open = model(false);\n    processOpen = effect(() => {\n        this.openChange.emit(this.open());\n        this.setActionsVisibility();\n    });\n    /**\n     * The direction of the speed dial. Can be 'up', 'down', 'left' or 'right'\n     */\n    direction = input('up');\n    previousDirection = this.direction();\n    processDirection = effect(() => {\n        this.setElementClass(this.previousDirection, false);\n        this.setElementClass(this.direction(), true);\n        this.previousDirection = this.direction();\n        this.setActionsVisibility();\n    });\n    openChange = output();\n    childActions = contentChild.required(EcoFabSpeedDialActionsComponent);\n    ngOnDestroy() {\n        this.unsetDocumentClickListener();\n    }\n    /**\n     * Toggle the open state of this speed dial\n     */\n    toggle() {\n        this.open.update(open => !open);\n    }\n    onClick() {\n        if (this.open()) {\n            this.open.set(false);\n        }\n    }\n    setActionsVisibility() {\n        if (this.open()) {\n            this.childActions().show();\n        }\n        else {\n            this.childActions().hide();\n        }\n        this.processOutsideClickState();\n    }\n    setElementClass(elemClass, isAdd) {\n        const finalClass = `eco-${elemClass}`;\n        if (isAdd) {\n            this.renderer.addClass(this.elementRef.nativeElement, finalClass);\n        }\n        else {\n            this.renderer.removeClass(this.elementRef.nativeElement, finalClass);\n        }\n    }\n    processOutsideClickState() {\n        if (this.open()) {\n            this.setDocumentClickListener();\n        }\n        else {\n            this.unsetDocumentClickListener();\n        }\n    }\n    setDocumentClickListener() {\n        if (!this.documentClickUnlistener) {\n            this.documentClickUnlistener = this.renderer.listen(this.document, 'click', () => {\n                this.open.set(false);\n            });\n        }\n    }\n    unsetDocumentClickListener() {\n        if (this.documentClickUnlistener) {\n            this.documentClickUnlistener();\n            this.documentClickUnlistener = null;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.2\", ngImport: i0, type: EcoFabSpeedDialComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.2.0\", version: \"20.0.2\", type: EcoFabSpeedDialComponent, isStandalone: true, selector: \"eco-fab-speed-dial\", inputs: { open: { classPropertyName: \"open\", publicName: \"open\", isSignal: true, isRequired: false, transformFunction: null }, direction: { classPropertyName: \"direction\", publicName: \"direction\", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { open: \"openChange\", openChange: \"openChange\" }, host: { listeners: { \"click\": \"onClick()\" }, properties: { \"class.eco-opened\": \"open()\" } }, queries: [{ propertyName: \"childActions\", first: true, predicate: EcoFabSpeedDialActionsComponent, descendants: true, isSignal: true }], ngImport: i0, template: `\n        <div class=\"eco-fab-speed-dial-container\">\n            <ng-content select=\"eco-fab-speed-dial-trigger\" />\n            <ng-content select=\"eco-fab-speed-dial-actions\" />\n        </div>\n    `, isInline: true, styles: [\"eco-fab-speed-dial{display:inline-block}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180{transform:rotate(180deg)}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transform:rotate(360deg)}eco-fab-speed-dial .eco-fab-speed-dial-container{position:relative;display:flex;align-items:center;z-index:20}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{pointer-events:auto;z-index:24}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180,eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transition:all .6s cubic-bezier(.4,0,.2,1)}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions{display:flex;position:absolute;height:0;width:0}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{transform:scale(0);transition:all .3s cubic-bezier(.55,0,.55,.2);transition-duration:.14286s}eco-fab-speed-dial.eco-down eco-fab-speed-dial-actions{bottom:2px;left:7px}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column;order:2}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-top:10px}eco-fab-speed-dial.eco-up eco-fab-speed-dial-actions{top:2px;left:7px}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column-reverse;order:1}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-bottom:10px}eco-fab-speed-dial.eco-left eco-fab-speed-dial-actions{top:7px;left:2px}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row-reverse;order:1}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-right:10px}eco-fab-speed-dial.eco-right eco-fab-speed-dial-actions{top:7px;right:2px}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row;order:2}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-left:10px}\\n\"], encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.2\", ngImport: i0, type: EcoFabSpeedDialComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'eco-fab-speed-dial', template: `\n        <div class=\"eco-fab-speed-dial-container\">\n            <ng-content select=\"eco-fab-speed-dial-trigger\" />\n            <ng-content select=\"eco-fab-speed-dial-actions\" />\n        </div>\n    `, encapsulation: ViewEncapsulation.None, host: {\n                        '[class.eco-opened]': 'open()',\n                        '(click)': 'onClick()',\n                    }, styles: [\"eco-fab-speed-dial{display:inline-block}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180{transform:rotate(180deg)}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transform:rotate(360deg)}eco-fab-speed-dial .eco-fab-speed-dial-container{position:relative;display:flex;align-items:center;z-index:20}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{pointer-events:auto;z-index:24}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180,eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transition:all .6s cubic-bezier(.4,0,.2,1)}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions{display:flex;position:absolute;height:0;width:0}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{transform:scale(0);transition:all .3s cubic-bezier(.55,0,.55,.2);transition-duration:.14286s}eco-fab-speed-dial.eco-down eco-fab-speed-dial-actions{bottom:2px;left:7px}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column;order:2}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-top:10px}eco-fab-speed-dial.eco-up eco-fab-speed-dial-actions{top:2px;left:7px}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column-reverse;order:1}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-bottom:10px}eco-fab-speed-dial.eco-left eco-fab-speed-dial-actions{top:7px;left:2px}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row-reverse;order:1}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-right:10px}eco-fab-speed-dial.eco-right eco-fab-speed-dial-actions{top:7px;right:2px}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row;order:2}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-left:10px}\\n\"] }]\n        }] });\nclass EcoFabSpeedDialTriggerComponent {\n    parent = inject(EcoFabSpeedDialComponent);\n    /**\n     * Whether this trigger should spin (360dg) while opening the speed dial\n     */\n    spin = input(false);\n    onClick(event) {\n        this.parent.toggle();\n        event.stopPropagation();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.2\", ngImport: i0, type: EcoFabSpeedDialTriggerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.1.0\", version: \"20.0.2\", type: EcoFabSpeedDialTriggerComponent, isStandalone: true, selector: \"eco-fab-speed-dial-trigger\", inputs: { spin: { classPropertyName: \"spin\", publicName: \"spin\", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { \"click\": \"onClick($event)\" }, properties: { \"class.eco-spin\": \"spin()\" } }, ngImport: i0, template: ` <ng-content select=\"[mat-fab]\" />`, isInline: true });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.2\", ngImport: i0, type: EcoFabSpeedDialTriggerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'eco-fab-speed-dial-trigger',\n                    template: ` <ng-content select=\"[mat-fab]\" />`,\n                    host: {\n                        '(click)': 'onClick($event)',\n                        '[class.eco-spin]': 'spin()',\n                    },\n                }]\n        }] });\n\n/*\n * Public API Surface of fab-speed-dial\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialTriggerComponent };\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../helpers/copy-to-clipboard.helper';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClipboardService {\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}","import { Injectable, signal, Signal } from '@angular/core';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { Feature } from '../models';\r\n\r\nconst webApiFeatureDetails = \"admin/feature/details\";\r\n@Injectable()\r\nexport class FeatureDetailService extends HttpServiceBaseSignal {\r\n  \r\n  getFeatureDetail(nameId: Signal<string>) {\r\n    return this.newHttpResource<Feature>(() => ({\r\n      url: this.apiUrl(webApiFeatureDetails),\r\n      params: { nameId: nameId() },\r\n    }));\r\n  }\r\n\r\n  getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n    const featureList = signal<Feature[]>([]);\r\n    for (const nameId of nameIds) {\r\n\r\n      this.fetchPromise<Feature>(webApiFeatureDetails, {\r\n        params: { nameId }\r\n      }).then(feature => {\r\n        featureList.update(prev => [...prev, feature]);\r\n      });\r\n    }\r\n    return featureList;\r\n  }\r\n}\r\n","@if (feature()) {\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">\r\n        {{ feature().name }}\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p [innerHtml]=\"feature().description | safeHtml\"></p>\r\n      <!-- Name ID -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">ID:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span (click)=\"clipboard.copyToClipboard(feature().nameId)\">{{ feature().nameId }}</span>\r\n        </div>\r\n      </div>\r\n      <!-- Status -->\r\n      @if (mySpecs().showStatus) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">{{ 'Features.Status' | translate }}:</div>\r\n          <div class=\"eav-info-row__value\">\r\n            <span>{{ (feature().isEnabled ? 'Features.Active' : 'Features.NotActive') | translate }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- GUID -->\r\n      @if (mySpecs().showGuid) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">GUID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span (click)=\"clipboard.copyToClipboard(feature().guid)\">{{ feature().guid }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- Security Rating -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Security Rating:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ feature().security.Impact + ': ' + feature().security.Message }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <a [href]=\"feature().link\" target=\"_blank\" mat-raised-button>\r\n        <mat-icon>open_in_new</mat-icon>\r\n        Find out more\r\n      </a>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { Component, Inject, input, Optional } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MAT_DIALOG_DATA, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core/transient';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { computedObj } from '../../../shared/signals/signal.utilities';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\n\r\n@Component({\r\n    selector: 'app-feature-details-dialog',\r\n    templateUrl: './feature-details-dialog.component.html',\r\n    imports: [\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        SafeHtmlPipe,\r\n        TranslateModule,\r\n        MatDialogActions,\r\n    ]\r\n})\r\nexport class FeatureDetailsDialogComponent {\r\n  specs = input<FeatureDetailsDialogData>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_DIALOG_DATA) private dialogSpecs: FeatureDetailsDialogData,\r\n    protected dialog: MatDialogRef<FeatureDetailsDialogComponent>,\r\n  ) { }\r\n\r\n  protected mySpecs = computedObj('mySpecs', () =>  this.specs() ?? this.dialogSpecs );\r\n  protected feature = computedObj('feature', () => this.mySpecs()?.feature);\r\n  protected clipboard = transient(ClipboardService);\r\n  \r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n}\r\n","import { Directive, Input, OnInit, Renderer2, RendererStyleFlags2 } from \"@angular/core\";\r\nimport { MatBadge } from \"@angular/material/badge\";\r\n\r\n@Directive({\r\n  selector: '[matBadgeIcon]',\r\n})\r\nexport class MatBadgeIconDirective extends MatBadge implements OnInit {\r\n  @Input() matBadgeIcon: string = '';\r\n\r\n  constructor( private renderer: Renderer2 ) { super(); }\r\n\r\n  ngOnInit(): void {\r\n    if(!this.matBadgeIcon)\r\n      return;\r\n\r\n    // TypeScript hack to get access to private function\r\n    const badgeElement = (this as any)['_createBadgeElement']();\r\n\r\n    // Style the badge element as a flex container\r\n    this.renderer.setStyle(badgeElement, 'display', 'flex');\r\n    \r\n    // Create the icon element\r\n    const iconElement = this.renderer.createElement('mat-icon');\r\n    this.renderer.appendChild(iconElement, this.renderer.createText(this.matBadgeIcon));\r\n    \r\n    // Set font for Material\r\n    this.renderer.setStyle(iconElement, 'font-family', 'Material Symbols Outlined');\r\n\r\n    // Set styles for the icon\r\n    this.renderer.setStyle(iconElement, 'font-size', '10');\r\n    this.renderer.setStyle(iconElement, 'height', '16px');\r\n    this.renderer.setStyle(iconElement, 'line-height', '16px');\r\n    this.renderer.setStyle(iconElement, 'color', '#fff', RendererStyleFlags2.Important);\r\n    \r\n    // Add Material icon classes\r\n    this.renderer.addClass(iconElement, 'mat-icon');\r\n    this.renderer.addClass(iconElement, 'material-icons');\r\n    \r\n    // Append the icon to the badge\r\n    this.renderer.appendChild(badgeElement, iconElement);\r\n  }\r\n}\r\n","@if (featureDetails(); as feature) {\r\n  <app-feature-details-dialog [specs]=\"{ feature: feature, showGuid: false, showStatus: true, showClose: true }\"></app-feature-details-dialog>\r\n}\r\n","import { Component, Inject, OnInit, signal } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { transient } from \"projects/core\";\r\nimport { FeatureDetailsDialogComponent } from \"../../apps-management/licence-info/feature-details-dialog/feature-details-dialog.component\";\r\nimport { ClipboardService } from \"../../shared/services/clipboard.service\";\r\nimport { FeatureDetailService } from \"../services/feature-detail.service\";\r\n\r\n@Component({\r\n    selector: 'app-feature-info-dialog',\r\n    templateUrl: './feature-info-dialog.component.html',\r\n    imports: [\r\n        FeatureDetailsDialogComponent\r\n    ]\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  #featureDetailSvc = transient(FeatureDetailService);\r\n  featureId = signal<string>('');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    protected dialog: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.featureId.set(this.route.snapshot.data['featureId'] || this.dialogData || '');\r\n    this.featureDetails = this.#featureDetailSvc.getFeatureDetail(this.featureId).value;\r\n  }\r\n\r\n  protected featureDetails: any;\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n"],"x_google_ignoreList":[1,2]}