{"version":3,"sources":["C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ecodev/fab-speed-dial/__ivy_ngcc__/fesm2015/ecodev-fab-speed-dial.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-spinner.js"],"names":["EcoFabSpeedDialActionsComponent_ng_content_0_Template","rf","ctx","_c0","_c1","_c2","_c3","_c4","_c5","EcoFabSpeedDialActionsComponent","injector","renderer","this","miniFabVisible","_parent","get","EcoFabSpeedDialComponent","_buttons","changes","subscribe","initButtonStates","setActionsVisibility","forEach","button","i","addClass","_getHostElement","changeElementStyle","resetAnimationState","showMiniFabAnimation","setTimeout","transform","transitionDelay","animationMode","getTranslateFunction","hostElement","clearTimeout","hideMiniFab","unsubscribe","obs","map","opacity","pipe","value","dir","direction","elem","style","setStyle","ɵfac","t","ɵcmp","type","selectors","contentQueries","dirIndex","_t","ngContentSelectors","decls","vars","consts","template","directives","encapsulation","elementRef","document","isInitialized","_direction","_open","_animationMode","_fixed","_documentClickUnlistener","openChange","_setElementClass","_unsetDocumentClickListener","open","fixed","_childActions","show","hide","_processOutsideClickState","elemClass","isAdd","finalClass","nativeElement","removeClass","_setDocumentClickListener","listen","previousOpen","emit","previousDirection","previousAnimationMode","Promise","resolve","then","first","hostVars","hostBindings","_onClick","inputs","outputs","styles","EcoFabSpeedDialTriggerComponent","spin","event","toggle","stopPropagation","$event","sp","EcoFabSpeedDialModule","ɵmod","ɵinj","factory","imports","MatProgressSpinner__svg_circle_1_Template","ctx_r0","_spinnerAnimationLabel","_getStrokeDashOffset","_getStrokeCircumference","_getCircleStrokeWidth","_getCircleRadius","MatProgressSpinner__svg_circle_2_Template","ctx_r1","MatSpinner__svg_circle_1_Template","MatSpinner__svg_circle_2_Template","MatProgressSpinnerBase","_elementRef","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","providedIn","diameter","MatProgressSpinner","platform","_document","defaults","_diameter","_value","_fallbackAnimation","mode","trackedDiameters","_diameters","_getSpinnerAnimationLabel","has","head","set","Set","EDGE","TRIDENT","_noopAnimations","_forceAnimations","strokeWidth","element","_styleRoot","_attachStyleNode","animationClass","classList","add","viewBox","Math","PI","styleRoot","currentDiameter","diameters","diametersForElement","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","strokeCircumference","replace","toString","size","_strokeWidth","newValue","max","min","hostAttrs","color","exportAs","features","_getViewBox","changeDetection","WeakMap","MatSpinner","MatProgressSpinnerModule"],"mappings":"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","file":"default~app-administration-app-administration-module~apps-management-apps-management-module~content-~33e631e1.6e8c99170f0a1c3feeff.js","sourcesContent":["import { Component, Injector, Renderer2, ContentChildren, EventEmitter, ViewEncapsulation, ElementRef, Inject, Input, HostBinding, Output, ContentChild, HostListener, NgModule } from '@angular/core';\nimport { MatButton } from '@angular/material/button';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { fromEvent, forkJoin } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction EcoFabSpeedDialActionsComponent_ng_content_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngIf\", \"miniFabVisible\"]);\n} }\nconst _c0 = [[[\"\", \"mat-mini-fab\", \"\"]]];\nconst _c1 = [\"[mat-mini-fab]\"];\nconst _c2 = [[[\"eco-fab-speed-dial-trigger\"]], [[\"eco-fab-speed-dial-actions\"]]];\nconst _c3 = [\"eco-fab-speed-dial-trigger\", \"eco-fab-speed-dial-actions\"];\nconst _c4 = [[[\"\", \"mat-fab\", \"\"]]];\nconst _c5 = [\"[mat-fab]\"];\nconst Z_INDEX_ITEM = 23;\nclass EcoFabSpeedDialActionsComponent {\n    constructor(injector, renderer) {\n        this.renderer = renderer;\n        /**\n         * Whether the min-fab button exist in DOM\n         */\n        this.miniFabVisible = false;\n        this._parent = injector.get(EcoFabSpeedDialComponent);\n    }\n    ngAfterContentInit() {\n        this._buttons.changes.subscribe(() => {\n            this.initButtonStates();\n            this._parent.setActionsVisibility();\n        });\n        this.initButtonStates();\n    }\n    initButtonStates() {\n        this._buttons.forEach((button, i) => {\n            this.renderer.addClass(button._getHostElement(), 'eco-fab-action-item');\n            this.changeElementStyle(button._getHostElement(), 'z-index', '' + (Z_INDEX_ITEM - i));\n        });\n    }\n    show() {\n        if (!this._buttons) {\n            return;\n        }\n        this.resetAnimationState();\n        this.miniFabVisible = true;\n        this.showMiniFabAnimation = setTimeout(() => {\n            this._buttons.forEach((button, i) => {\n                let transitionDelay = 0;\n                let transform;\n                if (this._parent.animationMode === 'scale') {\n                    // Incremental transition delay of 65ms for each action button\n                    transitionDelay = 3 + (65 * i);\n                    transform = 'scale(1)';\n                }\n                else {\n                    transform = this.getTranslateFunction('0');\n                }\n                const hostElement = button._getHostElement();\n                this.changeElementStyle(hostElement, 'transition-delay', transitionDelay + 'ms');\n                this.changeElementStyle(hostElement, 'opacity', '1');\n                this.changeElementStyle(hostElement, 'transform', transform);\n            });\n        }, 50); // Be sure that *ngIf can show elements before trying to animate them\n    }\n    resetAnimationState() {\n        clearTimeout(this.showMiniFabAnimation);\n        if (this.hideMiniFab) {\n            this.hideMiniFab.unsubscribe();\n            this.hideMiniFab = null;\n        }\n    }\n    hide() {\n        if (!this._buttons) {\n            return;\n        }\n        this.resetAnimationState();\n        const obs = this._buttons.map((button, i) => {\n            let opacity = '1';\n            let transitionDelay = 0;\n            let transform;\n            if (this._parent.animationMode === 'scale') {\n                transitionDelay = 3 - (65 * i);\n                transform = 'scale(0)';\n                opacity = '0';\n            }\n            else {\n                transform = this.getTranslateFunction((55 * (i + 1) - (i * 5)) + 'px');\n            }\n            const hostElement = button._getHostElement();\n            this.changeElementStyle(hostElement, 'transition-delay', transitionDelay + 'ms');\n            this.changeElementStyle(hostElement, 'opacity', opacity);\n            this.changeElementStyle(hostElement, 'transform', transform);\n            return fromEvent(hostElement, 'transitionend').pipe(take(1));\n        });\n        // Wait for all animation to finish, then destroy their elements\n        this.hideMiniFab = forkJoin(obs).subscribe(() => this.miniFabVisible = false);\n    }\n    getTranslateFunction(value) {\n        const dir = this._parent.direction;\n        const translateFn = (dir === 'up' || dir === 'down') ? 'translateY' : 'translateX';\n        const sign = (dir === 'down' || dir === 'right') ? '-' : '';\n        return translateFn + '(' + sign + value + ')';\n    }\n    changeElementStyle(elem, style, value) {\n        // FIXME - Find a way to create a \"wrapper\" around the action button(s) provided by the user, so we don't change it's style tag\n        this.renderer.setStyle(elem, style, value);\n    }\n}\nEcoFabSpeedDialActionsComponent.ɵfac = function EcoFabSpeedDialActionsComponent_Factory(t) { return new (t || EcoFabSpeedDialActionsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nEcoFabSpeedDialActionsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EcoFabSpeedDialActionsComponent, selectors: [[\"eco-fab-speed-dial-actions\"]], contentQueries: function EcoFabSpeedDialActionsComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButton, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttons = _t);\n    } }, ngContentSelectors: _c1, decls: 1, vars: 1, consts: [[4, \"ngIf\"]], template: function EcoFabSpeedDialActionsComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵtemplate(0, EcoFabSpeedDialActionsComponent_ng_content_0_Template, 1, 0, \"ng-content\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.miniFabVisible);\n    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });\nEcoFabSpeedDialActionsComponent.ctorParameters = () => [\n    { type: Injector },\n    { type: Renderer2 }\n];\nEcoFabSpeedDialActionsComponent.propDecorators = {\n    _buttons: [{ type: ContentChildren, args: [MatButton,] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EcoFabSpeedDialActionsComponent, [{\n        type: Component,\n        args: [{\n                selector: 'eco-fab-speed-dial-actions',\n                template: `\n        <ng-content select=\"[mat-mini-fab]\" *ngIf=\"miniFabVisible\"></ng-content>`\n            }]\n    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc0.Renderer2 }]; }, { _buttons: [{\n            type: ContentChildren,\n            args: [MatButton]\n        }] }); })();\n/** @dynamic @see https://github.com/angular/angular/issues/20351#issuecomment-344009887 */\nclass EcoFabSpeedDialComponent {\n    constructor(elementRef, renderer, document) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.document = document;\n        this.isInitialized = false;\n        this._direction = 'up';\n        this._open = false;\n        this._animationMode = 'fling';\n        this._fixed = false;\n        this._documentClickUnlistener = null;\n        this.openChange = new EventEmitter();\n    }\n    /**\n     * Whether this speed dial is fixed on screen (user cannot change it by clicking)\n     */\n    get fixed() {\n        return this._fixed;\n    }\n    set fixed(fixed) {\n        this._fixed = fixed;\n        this._processOutsideClickState();\n    }\n    /**\n     * Whether this speed dial is opened\n     */\n    get open() {\n        return this._open;\n    }\n    set open(open) {\n        const previousOpen = this._open;\n        this._open = open;\n        if (previousOpen !== this._open) {\n            this.openChange.emit(this._open);\n            if (this.isInitialized) {\n                this.setActionsVisibility();\n            }\n        }\n    }\n    /**\n     * The direction of the speed dial. Can be 'up', 'down', 'left' or 'right'\n     */\n    get direction() {\n        return this._direction;\n    }\n    set direction(direction) {\n        const previousDirection = this._direction;\n        this._direction = direction;\n        if (previousDirection !== this.direction) {\n            this._setElementClass(previousDirection, false);\n            this._setElementClass(this.direction, true);\n            if (this.isInitialized) {\n                this.setActionsVisibility();\n            }\n        }\n    }\n    /**\n     * The animation mode to open the speed dial. Can be 'fling' or 'scale'\n     */\n    get animationMode() {\n        return this._animationMode;\n    }\n    set animationMode(animationMode) {\n        const previousAnimationMode = this._animationMode;\n        this._animationMode = animationMode;\n        if (previousAnimationMode !== this._animationMode) {\n            this._setElementClass(previousAnimationMode, false);\n            this._setElementClass(this.animationMode, true);\n            if (this.isInitialized) {\n                // To start another detect lifecycle and force the \"close\" on the action buttons\n                Promise.resolve(null).then(() => this.open = false);\n            }\n        }\n    }\n    ngAfterContentInit() {\n        this.isInitialized = true;\n        this.setActionsVisibility();\n        this._setElementClass(this.direction, true);\n        this._setElementClass(this.animationMode, true);\n    }\n    ngOnDestroy() {\n        this._unsetDocumentClickListener();\n    }\n    /**\n     * Toggle the open state of this speed dial\n     */\n    toggle() {\n        this.open = !this.open;\n    }\n    _onClick() {\n        if (!this.fixed && this.open) {\n            this.open = false;\n        }\n    }\n    setActionsVisibility() {\n        if (!this._childActions) {\n            return;\n        }\n        if (this.open) {\n            this._childActions.show();\n        }\n        else {\n            this._childActions.hide();\n        }\n        this._processOutsideClickState();\n    }\n    _setElementClass(elemClass, isAdd) {\n        const finalClass = `eco-${elemClass}`;\n        if (isAdd) {\n            this.renderer.addClass(this.elementRef.nativeElement, finalClass);\n        }\n        else {\n            this.renderer.removeClass(this.elementRef.nativeElement, finalClass);\n        }\n    }\n    _processOutsideClickState() {\n        if (!this.fixed && this.open) {\n            this._setDocumentClickListener();\n        }\n        else {\n            this._unsetDocumentClickListener();\n        }\n    }\n    _setDocumentClickListener() {\n        if (!this._documentClickUnlistener) {\n            this._documentClickUnlistener = this.renderer.listen(this.document, 'click', () => {\n                this.open = false;\n            });\n        }\n    }\n    _unsetDocumentClickListener() {\n        if (this._documentClickUnlistener) {\n            this._documentClickUnlistener();\n            this._documentClickUnlistener = null;\n        }\n    }\n}\nEcoFabSpeedDialComponent.ɵfac = function EcoFabSpeedDialComponent_Factory(t) { return new (t || EcoFabSpeedDialComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nEcoFabSpeedDialComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EcoFabSpeedDialComponent, selectors: [[\"eco-fab-speed-dial\"]], contentQueries: function EcoFabSpeedDialComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, EcoFabSpeedDialActionsComponent, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._childActions = _t.first);\n    } }, hostVars: 2, hostBindings: function EcoFabSpeedDialComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function EcoFabSpeedDialComponent_click_HostBindingHandler() { return ctx._onClick(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"eco-opened\", ctx.open);\n    } }, inputs: { fixed: \"fixed\", open: \"open\", direction: \"direction\", animationMode: \"animationMode\" }, outputs: { openChange: \"openChange\" }, ngContentSelectors: _c3, decls: 3, vars: 0, consts: [[1, \"eco-fab-speed-dial-container\"]], template: function EcoFabSpeedDialComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\"eco-fab-speed-dial{display:inline-block}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180{transform:rotate(180deg)}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transform:rotate(1turn)}eco-fab-speed-dial .eco-fab-speed-dial-container{align-items:center;display:flex;position:relative;z-index:20}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{pointer-events:auto;z-index:24}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180,eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transition:all .6s cubic-bezier(.4,0,.2,1)}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions{display:flex;height:0;position:absolute;width:0}eco-fab-speed-dial.eco-fling .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{display:block;opacity:1;transition:all .3s cubic-bezier(.55,0,.55,.2)}eco-fab-speed-dial.eco-scale .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{transform:scale(0);transition:all .3s cubic-bezier(.55,0,.55,.2);transition-duration:.14286s}eco-fab-speed-dial.eco-down eco-fab-speed-dial-actions{bottom:2px;left:7px}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column;order:2}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-top:10px}eco-fab-speed-dial.eco-up eco-fab-speed-dial-actions{left:7px;top:2px}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column-reverse;order:1}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-bottom:10px}eco-fab-speed-dial.eco-left eco-fab-speed-dial-actions{left:2px;top:7px}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row-reverse;order:1}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-right:10px}eco-fab-speed-dial.eco-right eco-fab-speed-dial-actions{right:2px;top:7px}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row;order:2}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-left:10px}\"], encapsulation: 2 });\nEcoFabSpeedDialComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nEcoFabSpeedDialComponent.propDecorators = {\n    fixed: [{ type: Input }],\n    open: [{ type: HostBinding, args: ['class.eco-opened',] }, { type: Input }],\n    direction: [{ type: Input }],\n    animationMode: [{ type: Input }],\n    openChange: [{ type: Output }],\n    _childActions: [{ type: ContentChild, args: [EcoFabSpeedDialActionsComponent,] }],\n    _onClick: [{ type: HostListener, args: ['click',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EcoFabSpeedDialComponent, [{\n        type: Component,\n        args: [{\n                selector: 'eco-fab-speed-dial',\n                template: `\n        <div class=\"eco-fab-speed-dial-container\">\n            <ng-content select=\"eco-fab-speed-dial-trigger\"></ng-content>\n            <ng-content select=\"eco-fab-speed-dial-actions\"></ng-content>\n        </div>\n    `,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\"eco-fab-speed-dial{display:inline-block}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180{transform:rotate(180deg)}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transform:rotate(1turn)}eco-fab-speed-dial .eco-fab-speed-dial-container{align-items:center;display:flex;position:relative;z-index:20}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{pointer-events:auto;z-index:24}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180,eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transition:all .6s cubic-bezier(.4,0,.2,1)}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions{display:flex;height:0;position:absolute;width:0}eco-fab-speed-dial.eco-fling .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{display:block;opacity:1;transition:all .3s cubic-bezier(.55,0,.55,.2)}eco-fab-speed-dial.eco-scale .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{transform:scale(0);transition:all .3s cubic-bezier(.55,0,.55,.2);transition-duration:.14286s}eco-fab-speed-dial.eco-down eco-fab-speed-dial-actions{bottom:2px;left:7px}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column;order:2}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-top:10px}eco-fab-speed-dial.eco-up eco-fab-speed-dial-actions{left:7px;top:2px}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column-reverse;order:1}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-bottom:10px}eco-fab-speed-dial.eco-left eco-fab-speed-dial-actions{left:2px;top:7px}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row-reverse;order:1}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-right:10px}eco-fab-speed-dial.eco-right eco-fab-speed-dial-actions{right:2px;top:7px}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row;order:2}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-left:10px}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: Document, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { openChange: [{\n            type: Output\n        }], fixed: [{\n            type: Input\n        }], open: [{\n            type: HostBinding,\n            args: ['class.eco-opened']\n        }, {\n            type: Input\n        }], direction: [{\n            type: Input\n        }], animationMode: [{\n            type: Input\n        }], _onClick: [{\n            type: HostListener,\n            args: ['click']\n        }], _childActions: [{\n            type: ContentChild,\n            args: [EcoFabSpeedDialActionsComponent]\n        }] }); })();\nclass EcoFabSpeedDialTriggerComponent {\n    constructor(injector) {\n        this.spin = false;\n        this._parent = injector.get(EcoFabSpeedDialComponent);\n    }\n    /**\n     * Whether this trigger should spin (360dg) while opening the speed dial\n     */\n    get sp() {\n        return this.spin;\n    }\n    _onClick(event) {\n        if (!this._parent.fixed) {\n            this._parent.toggle();\n            event.stopPropagation();\n        }\n    }\n}\nEcoFabSpeedDialTriggerComponent.ɵfac = function EcoFabSpeedDialTriggerComponent_Factory(t) { return new (t || EcoFabSpeedDialTriggerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };\nEcoFabSpeedDialTriggerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: EcoFabSpeedDialTriggerComponent, selectors: [[\"eco-fab-speed-dial-trigger\"]], hostVars: 2, hostBindings: function EcoFabSpeedDialTriggerComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function EcoFabSpeedDialTriggerComponent_click_HostBindingHandler($event) { return ctx._onClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"eco-spin\", ctx.sp);\n    } }, inputs: { spin: \"spin\" }, ngContentSelectors: _c5, decls: 1, vars: 0, template: function EcoFabSpeedDialTriggerComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c4);\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2 });\nEcoFabSpeedDialTriggerComponent.ctorParameters = () => [\n    { type: Injector }\n];\nEcoFabSpeedDialTriggerComponent.propDecorators = {\n    sp: [{ type: HostBinding, args: ['class.eco-spin',] }],\n    spin: [{ type: Input }],\n    _onClick: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EcoFabSpeedDialTriggerComponent, [{\n        type: Component,\n        args: [{\n                selector: 'eco-fab-speed-dial-trigger',\n                template: `\n        <ng-content select=\"[mat-fab]\"></ng-content>`\n            }]\n    }], function () { return [{ type: ɵngcc0.Injector }]; }, { spin: [{\n            type: Input\n        }], sp: [{\n            type: HostBinding,\n            args: ['class.eco-spin']\n        }], _onClick: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }] }); })();\n\nclass EcoFabSpeedDialModule {\n}\nEcoFabSpeedDialModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: EcoFabSpeedDialModule });\nEcoFabSpeedDialModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function EcoFabSpeedDialModule_Factory(t) { return new (t || EcoFabSpeedDialModule)(); }, imports: [[CommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(EcoFabSpeedDialModule, { declarations: function () { return [EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialTriggerComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialTriggerComponent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EcoFabSpeedDialModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                declarations: [\n                    EcoFabSpeedDialActionsComponent,\n                    EcoFabSpeedDialComponent,\n                    EcoFabSpeedDialTriggerComponent,\n                ],\n                exports: [\n                    EcoFabSpeedDialActionsComponent,\n                    EcoFabSpeedDialComponent,\n                    EcoFabSpeedDialTriggerComponent,\n                ]\n            }]\n    }], null, null); })();\n\n/*\n * Public API Surface of fab-speed-dial\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialModule, EcoFabSpeedDialTriggerComponent };\n\n//# sourceMappingURL=ecodev-fab-speed-dial.js.map","import { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { _getShadowRoot, Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n} }\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n} }\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n} }\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n} }\nconst _c0 = \".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\";\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n    constructor(_elementRef, platform, _document, animationMode, defaults) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._fallbackAnimation = false;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        this._noopAnimations = animationMode === 'NoopAnimations' &&\n            (!!defaults && !defaults._forceAnimations);\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() { return this._diameter; }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (!this._fallbackAnimation && this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n        element.classList.add(animationClass);\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return this._getStrokeCircumference() * (100 - this._value) / 100;\n        }\n        // In fallback mode set the circle to 80% and rotate it with CSS.\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\n            return this._getStrokeCircumference() * 0.2;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return this.strokeWidth / this.diameter * 100;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`);\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n}\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatProgressSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\", mode: \"mode\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\nMatProgressSpinner.propDecorators = {\n    diameter: [{ type: Input }],\n    strokeWidth: [{ type: Input }],\n    mode: [{ type: Input }],\n    value: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                    '[attr.mode]': 'mode'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, { mode: [{\n            type: Input\n        }], diameter: [{\n            type: Input\n        }], strokeWidth: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n    constructor(elementRef, platform, document, animationMode, defaults) {\n        super(elementRef, platform, document, animationMode, defaults);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\nMatSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\nMatProgressSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); }, imports: [[MatCommonModule, CommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner, MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner, MatSpinner, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n\n//# sourceMappingURL=progress-spinner.js.map"],"sourceRoot":"webpack:///"}