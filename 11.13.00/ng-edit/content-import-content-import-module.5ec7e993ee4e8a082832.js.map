{"version":3,"sources":["./src/app/content-import/services/content-import.service.ts","./src/app/app-administration/services/content-types.service.ts","./src/app/content-import/content-import-dialog.config.ts","./src/app/content-import/content-import-routing.module.ts","./src/app/content-import/content-import.module.ts"],"names":["http","context","dnnContext","evaluateContent","formValues","file","pipe","fileBase64","requestData","AppId","appId","toString","DefaultLanguage","defaultLanguage","ContentType","contentType","ContentBase64","ResourcesReferences","resourcesReferences","ClearEntities","clearEntities","post","$2sxc","apiUrl","result","Success","Errors","Detail","importContent","ContentImportService","webApiTypeRoot","name","this","retrieveContentType","staticName","get","params","contentTypeId","retrieveContentTypes","scope","getScopes","scopes","Object","keys","map","key","value","save","appid","delete","StaticName","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService","contentImportDialog","initContext","panelSize","panelClass","getComponent","routes","path","component","data","dialog","ContentImportRoutingModule","forChild","ContentImportModule"],"mappings":"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","file":"content-import-content-import-module.5ec7e993ee4e8a082832.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentImport, EvaluateContentResult, ImportContentRequest, ImportContentResult } from '../models/content-import.model';\r\n\r\n@Injectable()\r\nexport class ContentImportService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  evaluateContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<EvaluateContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlPreview'), requestData).pipe(\r\n          map(result => {\r\n            if (!result.Success) {\r\n              result.Errors = result.Detail as any;\r\n              delete result.Detail;\r\n            }\r\n            return result;\r\n          }),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  importContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<ImportContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlUpload'), requestData);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Dictionary } from '../../shared/models/dictionary.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Dictionary<string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentImportDialog: DialogConfig = {\r\n  name: 'IMPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentImportComponent } = await import('./content-import.component');\r\n    return ContentImportComponent;\r\n  }\r\n};\r\n\r\nexport interface ContentImportDialogData {\r\n  files?: File[];\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentImportDialog } from './content-import-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: contentImportDialog } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentImportRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentImportRoutingModule } from './content-import-routing.module';\r\nimport { ContentImportComponent } from './content-import.component';\r\nimport { ContentImportService } from './services/content-import.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentImportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentImportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentImportRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentImportService,\r\n    AppDialogConfigService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentImportModule { }\r\n"],"sourceRoot":"webpack:///"}