{"version":3,"sources":["./src/app/content-items/content-item-import/content-item-import-dialog.config.ts","./src/app/content-items/content-items-dialog.config.ts","./src/app/content-items/content-items-routing.module.ts","./src/app/content-items/content-items.module.ts","./src/app/app-administration/services/content-types.service.ts"],"names":["contentItemImportDialog","name","initContext","panelSize","panelClass","getComponent","contentItemsDialog","routes","path","component","data","dialog","children","loadChildren","then","m","ContentExportModule","ContentImportModule","title","matcher","EditModule","RefreshEditModule","ContentItemsRoutingModule","forChild","ContentItemsModule","withComponents","webApiTypeRoot","http","context","dnnContext","apiUrl","this","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","scopes","Object","keys","map","key","value","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService"],"mappings":"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","file":"content-items-content-items-module.f0c17643e1afeff7786a.js","sourcesContent":["import { DialogConfig } from '../../shared/models/dialog-config.model';\r\n\r\nexport const contentItemImportDialog: DialogConfig = {\r\n  name: 'IMPORT_CONTENT_ITEM_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentItemImportComponent } = await import('./content-item-import.component');\r\n    return ContentItemImportComponent;\r\n  }\r\n};\r\n\r\nexport interface ContentItemImportDialogData {\r\n  files?: File[];\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentItemsDialog: DialogConfig = {\r\n  name: 'CONTENT_ITEMS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentItemsComponent } = await import('./content-items.component');\r\n    return ContentItemsComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../../../../edit/edit.matcher';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentItemImportDialog } from './content-item-import/content-item-import-dialog.config';\r\nimport { contentItemsDialog } from './content-items-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: contentItemsDialog }, children: [\r\n      {\r\n        path: 'export/:contentTypeStaticName',\r\n        loadChildren: () => import('../content-export/content-export.module').then(m => m.ContentExportModule)\r\n      },\r\n      {\r\n        path: 'export/:contentTypeStaticName/:selectedIds',\r\n        loadChildren: () => import('../content-export/content-export.module').then(m => m.ContentExportModule)\r\n      },\r\n      { path: 'import', component: DialogEntryComponent, data: { dialog: contentItemImportDialog } },\r\n      {\r\n        path: ':contentTypeStaticName/import',\r\n        loadChildren: () => import('../content-import/content-import.module').then(m => m.ContentImportModule),\r\n        data: { title: 'Import Items' },\r\n      },\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n      {\r\n        matcher: refreshEdit,\r\n        loadChildren: () => import('../../../../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentItemsRoutingModule { }\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { EcoFabSpeedDialModule } from '@ecodev/fab-speed-dial';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { ContentItemImportComponent } from './content-item-import/content-item-import.component';\r\nimport { ContentItemsRoutingModule } from './content-items-routing.module';\r\nimport { ContentItemsComponent } from './content-items.component';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentItemsComponent,\r\n    PubMetaFilterComponent,\r\n    ContentItemsStatusComponent,\r\n    ContentItemsActionsComponent,\r\n    ContentItemsEntityComponent,\r\n    ContentItemImportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentItemsComponent,\r\n    PubMetaFilterComponent,\r\n    ContentItemsStatusComponent,\r\n    ContentItemsActionsComponent,\r\n    ContentItemsEntityComponent,\r\n    ContentItemImportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentItemsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    AgGridModule.withComponents([]),\r\n    FormsModule,\r\n    MatRadioModule,\r\n    MatTooltipModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatProgressSpinnerModule,\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n    EcoFabSpeedDialModule,\r\n    MatMenuModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentItemsService,\r\n    EntitiesService,\r\n    ContentExportService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentItemsModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Dictionary } from '../../shared/models/dictionary.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Dictionary<string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}