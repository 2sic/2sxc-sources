{"version":3,"mappings":"6bAUO,IAAMA,EAAb,MAAM,QALNC,cAQEC,YAAS,GACTA,oBAAiB,GAGTA,cAAqB,GAE7BC,OAAOC,GACLF,KAAKG,aAAeD,EAGtBE,iBACE,MAAuB,KAAhBJ,KAAKK,QAAiBL,KAAKM,SAASC,OAAS,EAGtDC,eAAeN,GACb,GAAoB,KAAhBF,KAAKK,OAAe,CACtB,MAUMI,EAA+BT,KAAKG,aAAaO,YAVV,CAC3CC,IAAKX,KAAKG,aAAaQ,IACvBC,OAAQZ,KAAKG,aAAaS,OAC1BC,OAAQb,KAAKG,aAAaU,OAC1BC,UAAWd,KAAKG,aAAaW,UAC7BC,QAASf,KAAKG,aAAaY,QAC3BC,KAAMd,EAAOe,KAAKD,KAClBE,SAAWC,GAAUjB,EAAOe,KAAKD,KAAKG,GACtCF,KAAMf,EAAOe,OAIf,GADc,MAAVR,IACCA,EAAOW,KAAKC,KAAWA,GAASA,EAAMC,SAAStB,KAAKK,SAAY,OAAO,EAG9E,GAAIL,KAAKM,SAASC,OAAS,EAAG,CAC5B,MAAMgB,EAAsDrB,EAAOc,KAAKhB,KAAKG,aAAaS,OAAOY,YAEjG,GADa,MAATD,IACCvB,KAAKM,SAASc,KAAKK,GAAUF,EAAMH,KAAKM,GAAOA,EAAIC,KAAOF,IAAY,OAAO,EAGpF,OAAO,EAGTG,WACE,OAAK5B,KAAKI,iBACuB,CAC/ByB,WAAY,SACZxB,OAAQL,KAAKK,OACbC,SAAUN,KAAKM,eAJa,EAShCwB,SAASC,eACP/B,KAAKK,OAAsB,QAAb2B,EAAK,MAALC,OAAK,EAALA,EAAO5B,cAAM6B,QAAI,GAC/BlC,KAAKM,SAA0B,QAAf6B,EAAK,MAALF,OAAK,EAALA,EAAO3B,gBAAQ8B,QAAI,GACnCpC,KAAKqC,eAA2C,QAA1BC,EAAe,QAAfC,EAAK,MAALN,OAAK,EAALA,EAAO3B,gBAAQkC,eAAEC,KAAK,YAAIC,QAAI,GAGtDC,iBAAiBzC,GACfF,KAAK4C,cAAcC,cAAcC,QAGnCC,iBACE/C,KAAKM,SAAWN,KAAKqC,eAAeW,MAAM,KAAKC,IAAIC,GAAMC,SAASD,EAAI,KAAK7C,OAAO6C,IAAOE,MAAMF,IAGjGG,gBACErD,KAAKG,aAAamD,sEApETxD,8BAAqByD,iTCVlCC,4BAAqD,eACxCA,iBAAKA,QAChBA,qBAA4BA,sDAAoB,kCAAkBC,oBAAlED,UAGFA,4BAAqD,eACxCA,iCAAqBA,QAChCA,mBAA4BA,8DAA4B,2BAAkBC,0BAAkBA,oBAA5FD,iBAL4BA,mCAKAA,wNDGjB1D,GAAb,oJEII0D,oBAA2DA,iDAASE,eAClEF,oBAAUA,kBAAMA,QAChBA,gBAAMA,kBAAMA,kCAFQA,6CCHnB,IAAMG,GAAb,MAAM,QAKJ1D,OAAOC,GACLF,KAAKE,OAASA,EACdF,KAAK4D,KAAO1D,EAAOc,KAGrB6C,QAAQ3D,GACN,OAAO,EAGT4D,QACE9D,KAAKE,OAAO6D,QAAQ/D,KAAK4D,MAG3BI,SACEhE,KAAKE,OAAO+D,SAASjE,KAAK4D,MAG5BM,aACElE,KAAKE,OAAOiE,SAASnE,KAAK4D,oDAvBjBD,8BAA4BJ,mcDXzCC,iBAA+B,WAC6BA,gCAASC,YACjED,oBAAUA,qBAASA,UAErBA,iBAA6DA,gCAASC,aACpED,oBAAUA,0BAAcA,UAE1BA,iBAAqF,cACzEA,sBAAUA,YAIxBA,yBACEA,iCAMFA,gCAZ4DA,qGCI/CG,GAAb,2CCVEH,kBAA6CA,SAAcA,8BAAdA,4BCSxC,IAAMY,GAAb,MAAM,QAIJnE,OAAOC,IACAmE,MAAMC,QAAQpE,EAAOmB,SAE1BrB,KAAKuE,aAAevE,KAAKwE,WAAWtE,EAAOmB,MAAMoB,KAAK,OACjDvC,EAAOU,OAA0B6D,kBACpCzE,KAAK0E,SAAWxE,EAAOmB,MAAMd,SAIjCsD,QAAQ3D,GACN,OAAO,EAIDsE,WAAWG,GACjB,OAAOA,EAAKC,QAAQ,KAAM,SAASA,QAAQ,KAAM,UAAUA,QAAQ,KAAM,SAASA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,sDAnB7GR,8BAA2Bb,iKDVxCC,iBACEA,yBACAA,SACFA,eAHKA,8BACIA,kCACPA,+NCQWY,GAAb,iHCLEZ,iBAEEA,iDAASE,iBACTF,sBACiCA,SACjCA,kCAJAA,iEAAyE,2BAE/DA,2CAA0B,mCACHA,2FAGnCA,iBAA2F,gBAEtBA,SACnEA,gCAFUA,2CAA0B,mCAC+BA,iECFhE,IAAMqB,GAAb,MAAM,QASJ5E,OAAOC,WACLF,KAAKqB,MAAQnB,EAAOmB,MACpBrB,KAAKE,OAASA,EACdF,KAAK4D,KAAO1D,EAAOc,KACnBhB,KAAK8E,SAAW9E,KAAK4D,KAAKmB,UAAUC,SAEpChF,KAAKiF,cAA0C,QAA1B9C,EAAkB,QAAlBH,OAAK4B,KAAKsB,gBAAQhD,eAAE3B,cAAM6B,QAAI,EAEnDpC,KAAKmF,gBAAkBnF,KAAK4D,KAAKwB,IAC7B,uCACapF,KAAK4D,KAAKwB,IAAIC,uBACVrF,KAAK4D,KAAKwB,IAAIE,cAC9BtF,KAAK4D,KAAKwB,IAAIG,OAAS,aAAavF,KAAK4D,KAAKwB,IAAIG,SAAW,KAC7DvF,KAAK4D,KAAKwB,IAAII,OAAS,aAAaxF,KAAK4D,KAAKwB,IAAII,SAAW,KAC7DxF,KAAK4D,KAAKwB,IAAIK,KAAO,WAAWzF,KAAK4D,KAAKwB,IAAIK,OAAS,KACvDzF,KAAK4D,KAAKwB,IAAIM,MAAQ,YAAY1F,KAAK4D,KAAKwB,IAAIM,QAAU,IAC3D,6BACJ1F,KAAKmF,iBAAmB,qBAAqBnF,KAAKiF,cAAgB,EAAIjF,KAAKiF,cAAgB,uBAA8C,IAAvBjF,KAAKiF,cAAsB,OAAS,0BAGxJpB,QAAQ3D,GACN,OAAO,EAGTyF,eACE3F,KAAKE,OAAO0F,eAAe5F,KAAK4D,oDAlCvBiB,8BAA2BtB,2nBDZxCC,iBAA+B,UAA/BA,CAA+B,cAEjBA,SAAuDA,UAGnEA,wBAOAA,wBAKFA,eAhBgCA,sEAClBA,gEAGkCA,mCAOXA,wPCAxBqB,GAAb,mICRM,YAA+BgB,GACnC,OAAQC,IACN,IAAKA,EAAQzE,MAAS,OAAO,KAE7B,MAAM0E,EAA2BF,EAAKG,SAASD,QAAW1E,MACpD4E,EAAaH,EAAQzE,MAA0B6E,WAErD,OAAQH,QACDI,qBAEH,MAAO,WAD0BC,KAAKH,GACiB,KAA/B,CAAEI,oBAAoB,QAC3CF,mBAEH,MAAMG,EAAW,CAAC,IAAK,KAAKlF,KAAKmF,GAAWN,EAAU3E,SAASiF,IACzDC,EAAOP,EAAUQ,UACrBH,EAAW,EAAI,EACfA,EAAWL,EAAU1F,OAAS,EAAI0F,EAAU1F,QAG9C,OAAO,EADQmG,QAAYN,KAAKI,GACS,KAAxB,CAAEG,aAAa,GAEzB,QAEP,OAAO,qGCTLnD,yBACEA,SACFA,kCAFqDA,4BACnDA,2DAEFA,yBACEA,SACFA,oCAF2CA,uCACzCA,2EALJA,yBACEA,gCAGAA,gCAGFA,6CANiCA,8CAGlBA,kEAKfA,2CAGFA,6BAGEA,8HACFA,cAFEA,8CAGFA,6BAA8DA,SAAyBA,mCAA3CA,oBAAkBA,yDAC9DA,6BAEEA,oCACFA,cAFEA,2CAGFA,6BAEEA,oCACFA,cAFEA,8CASEA,yBACEA,SACFA,kCAFuDA,iBACrDA,kDAKNA,6BAEEA,oCACFA,cAFEA,8CAWEA,yBACEA,SACFA,kCAF0DA,4BACxDA,2DAPNA,4BACoG,eACvFA,wBAAYA,QAEvBA,yBAEEA,gCAGFA,qCAJEA,wEACoCA,oEAapCA,yBACEA,SACFA,kCAF0DA,uBACxDA,0DAPNA,4BACqL,eACxKA,iBAAKA,QAEhBA,yBAEEA,gCAGAA,yBAA0CA,oBAAQA,iDAJlDA,wEACoCA,yCAGxBA,qEAadA,mCAQQA,yBACEA,SACFA,kCAFmDA,sBACjDA,sEAHJA,yBAEEA,gCAGFA,oCAJEA,+DAC6BA,gEAK/BA,8CARFA,SACEA,gCAOAA,2BACFA,oCAReA,mCAOgBA,+DAM3BA,yBACEA,SACFA,kCAF0DA,4BACxDA,2DAHJA,yBAEEA,gCAGFA,oCAJEA,+DACoCA,gEAKtCA,8CARFA,SACEA,gCAOAA,2BACFA,oCAReA,mCAOgBA,2DAI7BA,mCADFA,SACEA,kCACFA,yCADiBA,gEAxBnBA,YACEA,kCAWAA,kCAWAA,kCAGFA,6CA1BcA,0CACGA,yEAWAA,qGAkBjBA,0CAEAA,8CAFAA,2BAEAA,gEAF6BA,oEAEEA,6JAIjCA,kBAAwF,eAEpFA,yCAASoD,EAATC,OAASD,iBAAgB,KACzBpD,oBAAUA,kBAAMA,UAElBA,qBACEA,yCAASsD,EAATD,OAASC,iBAAgB,KACzBtD,oBAAUA,uBAAWA,yCANeA,iDAIAA,0EAO1CA,6BACEA,oCACFA,cAF8FA,2CAG9FA,6BAEEA,oCACFA,cAFEA,2CAGFA,6BACEA,kCACFA,cAFiGA,6DA3JvGA,SACEA,iBAAsB,WACUA,2BAAeA,UAG/CA,eACEA,gGACIA,eAAqDA,gBAAIA,QAAIA,cACnEA,QAEAA,kBAA6C,WAA7CA,CAA6C,sBAA7CA,CAA6C,gBAK5BA,mBAAMA,QAEjBA,gCASAA,2BACFA,QAEAA,qCAKAA,qCACAA,qCAIAA,qCAMAA,6BAAqD,gBACxCA,qBAAQA,QAEnBA,0BACEA,iCAGFA,UAGFA,qCAMAA,qCAaAA,qCAaAA,2BACEA,yDACAA,iBAAkFA,qBAAQA,UAI5FA,6BAAqD,gBACxCA,gBAAGA,QAEdA,mCAGAA,6CA8BAA,6CAOAA,0BAUFA,QAEAA,qCAGAA,qCAIAA,qCAGFA,QAEAA,mBAAiC,0BAGDA,mDAAUuD,sBACtCvD,UACFA,QACAA,mBACAA,sBAAwCA,iDAASwD,gBAAexD,mBAAMA,QACtEA,sBAAgFA,iDAASyD,YACvFzD,sBACFA,YAGNA,iEAnKQA,mCAOaA,oCAS0BA,qCAItCA,oHAIcA,wCACAA,qJAIAA,oJAUkBA,2CAMlBA,4IAOdA,yGAaAA,qLAqBcA,oCAAuB,aAAvBA,CAAuB,cAwCGA,uDAY1BA,gIAGAA,0IAIAA,mIAOfA,6JAAqJ,wBAErJA,uDAIqDA,0CClJtD,IAAM0D,GAAb,MAAM,gBAA6CC,KAmBjDpH,YACUqH,EACArG,EACAsG,EACAC,GAERC,QALQvH,iBACAA,eACAA,2BACAA,2BAtBgBA,eAAY,mBAEtCA,kBAAemG,KACfnG,yBAAsBwH,IAwBtBC,WACEzH,KAAK0H,kBAAoBC,OAAOlH,OAAO0F,eAAuBlD,IAAI2E,GAAUD,iBAAMC,IAClF5H,KAAK6H,eAAiBF,OAAOlH,OAAO0F,eAEpCnG,KAAK8H,gBAAkB,IAAIC,IAAmC,IAC9D/H,KAAKgI,cAAgB,IAAID,IAA+B,IACxD/H,KAAKiI,YAAc,IAAIF,KAAgB,GACvC/H,KAAKkI,cAAgB,IAAIH,IAA+B,IACxD/H,KAAKmI,cAAgB,IAAIJ,IAA+B,IACxD/H,KAAKoI,WAAa,IAAIL,KAAgB,GAEtC/H,KAAKqI,cAELrI,KAAK6F,KAAO,IAAIyC,KAAU,IAC1BtI,KAAK6F,KAAK0C,WAAW,aAAc,IAAIC,KAAYrC,gCAAyC,CAACsC,cAAqBA,aAAmB,eACrIzI,KAAK6F,KAAK0C,WAAW,UAAW,IAAIC,KAAYrC,6BAAsC,CAACsC,iBACvFzI,KAAK6F,KAAK0C,WAAW,6BAA8B,IAAIC,KAAY,OACnExI,KAAK6F,KAAK0C,WAAW,uBAAwB,IAAIC,KAAYrC,4BAC7DnG,KAAK6F,KAAK0C,WAAW,MAAO,IAAIC,KAAY,KAAM,CAACC,cAAqBC,GAAqB1I,KAAK6F,SAElG7F,KAAK2I,aAAaC,IAChB5I,KAAK6F,KAAKG,SAAS6C,qBAAwBC,aAAaC,MACtDC,OAAUhJ,KAAK6F,KAAKG,SAAS6C,qBAAwBxH,QACrD4H,UACAC,UAAWC,IACmD,MAA1DnJ,KAAK6F,KAAKG,SAASoD,2BAA8B/H,OACnDrB,KAAK6F,KAAKG,SAASoD,2BAA8BC,WAAW,MAG1DF,IAAa3B,KACf2B,EAAWG,OAAO,mMAAwMnD,0BACrNnG,KAAKgI,cAAc3G,MAAMD,KAAKwG,GAAUA,EAAOvG,QAAU8H,IAK5DnJ,KAAKgI,cAAcuB,KAAK,CAJY,CAClCC,KAAML,EACN9H,MAAO8H,MAEmCnJ,KAAKgI,cAAc3G,QAEjErB,KAAK6F,KAAKG,SAAS6C,qBAAwBQ,WAAWF,IAEtDnJ,KAAKyJ,kBAAkBN,MAM7BnJ,KAAK2I,aAAaC,OAChBc,MACE1J,KAAK6F,KAAKG,SAAS2D,WAAcb,aAAaC,MAAKE,UACnDjJ,KAAK6F,KAAKG,SAASD,QAAW+C,aAAaC,MAAKE,WAChDC,UAAU,KACVlJ,KAAKoI,WAAWmB,MAAK,GAGC,MAAlBK,KADwC/D,KAAKgE,cAClCC,KAIb9J,KAAK6F,KAAKwD,WAHuC,CAC/CS,IAAK,UAQb9J,KAAK2I,aAAaC,IAChB5I,KAAK6F,KAAKG,SAASoD,2BAA8BN,aAAaC,MAC5DC,OAAUhJ,KAAK6F,KAAKG,SAASoD,2BAA8B/H,QAC3D4H,UACAC,UAAUa,IACV,MAAMH,EAAiC5J,KAAK6F,KAAKgE,cAC7CD,EAAWD,aAAexD,iCAA6D,MAAlByD,EAAWE,KAIlF9J,KAAK6F,KAAKwD,WAHuC,CAC/CS,IAAK,OAKT9J,KAAKqH,oBAAoB2C,OAAOD,GAAuBb,UAAU3H,IAC/DvB,KAAKkI,cAAcqB,KAAKhI,QAK9B,MAAM0I,EAAcjK,KAAK6F,KAAKiD,aAAaC,QACzCC,KAAUhJ,KAAK6F,KAAKgE,gBACpB5G,OAAI,IAAMjD,KAAK6F,KAAKgE,gBACpBZ,OAAqBiB,oBAGvBlK,KAAK2I,aAAaC,KAChBuB,OAAc,CAACF,EAAajK,KAAKiI,cAAciB,UAAU,EAAEU,EAAYQ,MAErE,MAAMC,EAAkBrK,KAAK0H,kBAAkB4C,KAAK1C,GAAUA,EAAO+B,aAAeC,EAAWD,YACzF9B,EAAiBuC,GAAcC,EAAkB,CAACA,EAAgBtE,SAAW,IAAI/F,KAAK6H,gBACvFqC,iBAA2BrC,EAAgB7H,KAAK8H,gBAAgBzG,QACnErB,KAAK8H,gBAAgByB,KAAK1B,GAI5B,MAAM0C,EAA2C,GAC5CvK,KAAK8H,gBAAgBzG,MAAMC,SAASsI,EAAW7D,WAClDwE,EAAYxE,QAAU/F,KAAK8H,gBAAgBzG,MAAM,IAInD,MAAMmJ,EAAgBJ,GAAcR,EAAWD,aAAexD,6BAC1DqE,GAAiBZ,EAAWE,MAAQ9J,KAAKe,QAAQ0J,QACnDF,EAAYT,IAAM9J,KAAKe,QAAQ0J,OAG7B9C,OAAO+C,KAAKH,GAAahK,QAC3BP,KAAK6F,KAAKwD,WAAWkB,GAIvBL,oBAA8BlK,KAAK6F,KAAKG,SAASD,QADzBqE,GAAcpK,KAAK8H,gBAAgBzG,MAAMd,QAAU,GAE3E2J,oBAA8BlK,KAAK6F,KAAKG,SAAS8D,IAAQU,MAI7DxK,KAAK2K,eAAgBR,OAAc,EACjCA,OAAc,CAACnK,KAAKiI,YAAajI,KAAK8H,gBAAiB9H,KAAKgI,cAAehI,KAAKkI,cAAelI,KAAKmI,mBACpGgC,KAAc,CAACF,EAAajK,KAAKoI,eAChCW,MACD9F,OAAI,GACDmH,EAAYvC,EAAgB+C,EAAcC,EAAcC,IACxDlB,EAAYmB,aAeb,MAbiD,CAC/CX,aACAY,mBAAoBhL,KAAK0H,kBAAkBtG,KAAKwG,GAAUA,EAAO+B,aAAeC,EAAWD,YAC3FsB,eAAgBb,IAAgG,QAAlFc,OAAKxD,kBAAkB4C,KAAK1C,GAAUA,EAAO+B,aAAeC,EAAWD,mBAAWzH,eAAEiJ,MAClHtD,iBACA+C,eACAG,YACAK,gBACE,CAACjF,gCAAyCA,sCAA8C7E,SAASsI,EAAWD,YAC9GC,aACAiB,eACAC,mBAORO,cACErL,KAAKiI,YAAYqD,WACjBtL,KAAK8H,gBAAgBwD,WACrBtL,KAAKkI,cAAcoD,WACnBtL,KAAKmI,cAAcmD,WACnBtL,KAAKoI,WAAWkD,WAChB/D,MAAM8D,cAGRE,YAAYC,GACVxL,KAAKoH,UAAUqE,MAAMD,GAGvBE,gBAAgBC,GACd3L,KAAKoI,WAAWmB,KAAKoC,GAGvBC,iBAAiBD,GACf3L,KAAKiI,YAAYsB,KAAKoC,EAAME,SAG9BC,gBACE,MAAMlC,EAAiC5J,KAAK6F,KAAKgE,cAE3C2B,EAAuB,CAC3BO,OAA0F,QAAlF9J,OAAKyF,kBAAkB4C,KAAK1C,GAAUA,EAAO+B,aAAeC,EAAWD,mBAAWzH,eAAE6J,OAC5FpC,WAAYC,EAAWD,WACvB5D,QAAS6D,EAAW7D,QAEpB+D,IAAKF,EAAW7D,UAAYI,mBAA8ByD,EAAWE,IAAelF,QAAQ,OAAQ,IAAMgF,EAAWE,IAAI5D,YAE3HlG,KAAKuL,YAAYC,GAGX/B,kBAAkBuC,GACxBhM,KAAKsH,oBAAoB2E,qBAAqBD,GAAO9C,UAAU4B,IAC7D9K,KAAKmI,cAAcoB,KAAKuB,KAIpBzC,cACNrI,KAAKsH,oBAAoB4E,YAAYhD,UAAUiD,IAC7CnM,KAAKgI,cAAcuB,KAAK4C,mDAxNjBjF,GAA6B1D,0EAA7B0D,EAA6B3D,2pEDtB1CC,0DAAeA,mVCsBF0D,GAAb,iBCZO,IAAMkF,GAAb,MAAM,QALNrM,cAMEC,eAAY,GACZA,cAAW,GACXA,iBAAc,GAIdC,OAAOC,GACLF,KAAKG,aAAeD,EAGtBE,iBACE,MAA0B,KAAnBJ,KAAKqM,WAAsC,KAAlBrM,KAAKsM,UAAwC,KAArBtM,KAAKuM,YAG/D/L,eAAeN,GACb,IAAIsM,GAAkB,EAClBC,GAAiB,EACjBC,GAAoB,EAExB,MAUMrL,EAAiBrB,KAAKG,aAAaO,YAVI,CAC3CC,IAAKX,KAAKG,aAAaQ,IACvBC,OAAQZ,KAAKG,aAAaS,OAC1BC,OAAQb,KAAKG,aAAaU,OAC1BC,UAAWd,KAAKG,aAAaW,UAC7BC,QAASf,KAAKG,aAAaY,QAC3BC,KAAMd,EAAOe,KAAKD,KAClBE,SAAWC,GAAUjB,EAAOe,KAAKD,KAAKG,GACtCF,KAAMf,EAAOe,OAGf,OAEIuL,EAFmB,KAAnBxM,KAAKqM,WACHhL,QAAMgL,WAGUhL,EAAMgL,UAAUnG,aAAelG,KAAKqM,UAOtDI,EAFkB,KAAtBzM,KAASsM,UACPK,MAAItL,EAAMiL,UAGSjL,EAAMiL,SAASpG,aAAelG,KAAKsM,SAOpDI,EAFqB,KAArB1M,KAAKuM,aACPI,MAAItL,EAAMkL,aAGYlL,EAAMkL,YAAYrG,aAAelG,KAAKuM,YAKvDC,GAAmBC,GAAkBC,EAG9C9K,WACE,OAAK5B,KAAKI,iBAEwB,CAChCyB,WAAY,WACZwK,UAAWrM,KAAKqM,UAChBC,SAAUtM,KAAKsM,SACfC,YAAavM,KAAKuM,kBANU,EAWhCzK,SAASC,GACP/B,KAAKqM,UAAYtK,EAAQA,EAAMsK,UAAY,GAC3CrM,KAAKsM,SAAWvK,EAAQA,EAAMuK,SAAW,GACzCtM,KAAKuM,YAAcxK,EAAQA,EAAMwK,YAAc,GAGjD5J,iBAAiBzC,IAGjBmD,gBACErD,KAAKG,aAAamD,sEAnFT8I,8BAAsB7I,oLCVnCC,iBAAmBA,qBAASA,QAC5BA,6BAAiBA,yDAAuB,kCAAkBC,oBACxDD,8BAA2BA,eAAGA,QAC9BA,8BAA+BA,qBAASA,QACxCA,8BAAgCA,yBAAaA,UAG/CA,iBAAmBA,wBAAWA,QAC9BA,8BAAiBA,wDAAsB,kCAAkBC,oBACvDD,+BAA2BA,gBAAGA,QAC9BA,+BAA+BA,wBAAWA,QAC1CA,+BAAgCA,4BAAeA,UAGjDA,kBAAmBA,yBAAYA,QAC/BA,8BAAiBA,2DAAyB,kCAAkBC,oBAC1DD,+BAA2BA,gBAAGA,QAC9BA,+BAA+BA,yBAAYA,QAC3CA,+BAAgCA,4BAAeA,iBAjBhCA,sCAOAA,qCAOAA,kSDLJ4I,GAAb,6GENQ5I,SACEA,SACFA,6BADEA,gEAYRA,4CACEA,oFA0BEA,qBACEA,iDAASoJ,gBACTpJ,oBAAUA,uBAAWA,QACrBA,gBAAMA,kBAAMA,WCCb,IAAMqJ,GAAb,MAAM,gBAAqCC,IAWzC/M,YACYgN,EACAC,EACF5F,EACAE,EACAD,EACA4F,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,IAERhG,MAAMwF,EAAQC,GAbJhN,cACAA,aACFA,iBACAA,2BACAA,2BACAA,uBACAA,4BACAA,gBACAA,2BACAA,cACAA,wBACAA,0BAtBVA,kBAAe,IAAI+H,SAA6ByF,GAChDxN,YAAS,IAAI+H,SAA+ByF,GAC5CxN,mBAAgBA,KAAKoN,oBAAoBK,mBACzCzN,iBAAW2H,iBACN+F,KAGG1N,cAAW,IAAI+H,IAAyB,MACxC/H,2BAAwBA,KAAKgN,MAAMW,SAASC,SAASC,IAAI,yBAmBjEpG,WACEzH,KAAK8N,mBACL9N,KAAK+N,aACL/N,KAAKgO,eACLhO,KAAK2I,aAAaC,IAAI5I,KAAKiO,8BAA8B/E,UAAU,KAAQlJ,KAAK+N,gBAGlF1C,cACErL,KAAKkO,aAAa5C,WAClBtL,KAAKmO,OAAO7C,WACZtL,KAAKoO,SAAS9C,WACd/D,MAAM8D,cAGRE,cACEvL,KAAKoH,UAAUqE,QAGjB4C,YAAYnO,GACVF,KAAKoO,SAAS7E,KAAKrJ,EAAOS,KAGpBmN,mBACN9N,KAAKsH,oBAAoBgH,oBAAoBtO,KAAK+J,uBAAuBb,UAAUqF,IACjFvO,KAAKkO,aAAa3E,KAAKgF,KAInBR,aACN/N,KAAKqH,oBAAoB2C,OAAOhK,KAAK+J,uBAAuBb,UAAU3H,IACpEvB,KAAKmO,OAAO5E,KAAKhI,KAIbyM,eACNhO,KAAKqH,oBAAoBmH,WAAWxO,KAAK+J,uBAAuBb,UAAUuF,IACxE,MAAMC,EAAa1O,KAAK2O,gBAAgBF,GAClCG,ECzGN,YAA2BC,EAAoBH,WACnD,IAAKG,EAAc,OAOnB,IAAIC,EAJ6C,MAA7CD,EAAWE,OAAOF,EAAWtO,OAAS,KACxCsO,EAAaG,KAAKH,IAIpB,IACEC,EAAUG,KAAKC,MAAML,SACdM,GACPC,QAAQD,MAAM,0CAA4CN,GAE5D,IAAKC,EAAW,OAGhB,MAAMF,EAAiC,GACvC,GAAIE,EAAQO,aAAeP,EAAQQ,WAAY,CAC7C,MAAMjP,EAA6B,CACjCwB,WAAY,WACZwK,UAA8B,QAAnBpK,IAAQoN,mBAAWnN,QAAI,GAClCoK,SAA4B,QAAlBtK,IAAQsN,kBAAUlN,QAAI,GAChCmK,YAAa,IAEfqC,EAAYW,OAASlP,EAIvBsH,cAAO6H,QAAQV,GACZzO,OAAO,EAAEyJ,EAAKzI,KAAmB,gBAARyI,GAAiC,eAARA,GAClD2F,QAAQ,EAAE3F,EAAKzI,YACd,MAAMqO,EAAYhB,EAAWpE,KAAKqF,GAAKA,EAAEnO,aAAesI,GACxD,IAAa,MAAT8F,OAAS,EAATA,EAAWvP,UAAWP,GAW1B,GAAqB,iBAAVuB,EAETuN,EAAY9E,GADoB,CAAEjI,WAAY,OAAQgO,KAAM,SAAUxP,OAAQgB,QAC3DhB,GACO,iBAAVgB,EAEhBuN,EAAY9E,GADsB,CAAEjI,WAAY,SAAUgO,KAAM,SAAUxP,OAAQgB,EAAOyO,SAAU,WAChFzP,GACO,kBAAVgB,EAAqB,CACrC,MAAMhB,EAA6B,CAAEwB,WAAY,UAAWxB,OAAQgB,EAAM6E,YAC1E0I,EAAY9E,GAAOzJ,OAnBrB,CAEE,MAAMA,EAA4B,CAChCwB,WAAY,SACZxB,OAAyB,iBAH3BgB,EAAsC,QAA9B0O,gBAAwB1O,UAAMa,QAAIb,GAGJA,OAAQmM,EAC5ClN,SAA2B,iBAAVe,EAAqB,CAACA,GAASgD,MAAMC,QAAQjD,GAASA,EAAMhB,OAAO0P,GAAkB,iBAANA,QAAkBvC,GAEpHoB,EAAY9E,GAAOzJ,KAgBlBuO,EDiDiBoB,CAAiBC,eAAeC,QAAQC,MAAazB,GACrE1O,KAAKoO,SAAS/M,MAChBrB,KAAKoQ,cAAc1B,EAAYE,GAE/B5O,KAAKoO,SAASrF,MACZ1I,OAAOgQ,GAAsB,MAAXA,IAClBC,OAAK,IACLpH,UAAUmH,IACVrQ,KAAKoQ,cAAc1B,EAAYE,OAM/BwB,cAAc1B,EAAsBE,GAC1C5O,KAAKoO,SAAS/M,MAAM+O,cAAc1B,GAC9BE,OACF2B,MAAkB,4BAA6B3B,GAC/C5O,KAAKoO,SAAS/M,MAAMmP,eAAe5B,IAIvCjJ,aAAa/B,GACX,MAAM6M,EAAMC,iBACV9M,EAAK6B,KACL,wBAAwB7B,EAAK+M,WAAW/M,EAAKjC,MAC7C3B,KAAK+J,uBAEP/J,KAAK+M,OAAO6D,SAAS,CAACH,GAAM,CAAEI,WAAY7Q,KAAKgN,QAGjD8D,SAASlN,GACP,MAOMmN,KAAUC,KAPO,CACrBzP,MAAO,CACG,MAARqC,EACI,CAAEqN,gBAAiBjR,KAAK+J,uBACxB,CAAEmH,SAAUtN,EAAKjC,OAIzB3B,KAAK+M,OAAO6D,SAAS,CAAC,QAAQG,KAAY,CAAEF,WAAY7Q,KAAKgN,QAG/DmE,gBACE,MAAMvC,EAAc5O,KAAKoO,SAAS/M,MAAM+P,iBAClCC,EAAa1J,OAAO+C,KAAKkE,GAAarO,OAAS,EAC/C+Q,EAAgB,GAClBD,GACFrR,KAAKoO,SAAS/M,MAAMkQ,8BAA8BC,IAEhDF,EAAIG,KAD6BD,EAAQxQ,KACpBW,MAGzB3B,KAAK+M,OAAO6D,SAAS,CAAC,UAAU5Q,KAAK+J,wBAAwBuH,EAAI/Q,OAAS,EAAI,IAAI+Q,IAAQ,MAAO,CAAET,WAAY7Q,KAAKgN,QAGtH0E,aAAaC,GACX,MAAMC,EAAaD,EAAM,GAEzB,OADYC,EAAWpI,KAAK/C,UAAUmL,EAAWpI,KAAKqI,YAAY,KAAO,GAAGC,yBAErE,MACH9R,KAAK+R,cAAcJ,GACnB,UACG,OACH3R,KAAKgS,WAAWL,IAKtBI,cAAcJ,GAEZ3R,KAAK+M,OAAO6D,SAAS,CAAC,GAAG5Q,KAAK+J,gCAAiC,CAAE8G,WAAY7Q,KAAKgN,MAAOiF,MAD7C,CAAEN,WAIhDK,WAAWL,GAET3R,KAAK+M,OAAO6D,SAAS,CAAC,UAAW,CAAEC,WAAY7Q,KAAKgN,MAAOiF,MADlB,CAAEN,WAI7CO,iBAC4BlS,KAAKqN,OAAO8E,KAAKjL,GAA+B,CACxEkL,WAAW,EACX9E,iBAAkBtN,KAAKsN,iBACvB+E,MAAO,UAESC,cAAcpJ,UAAWqJ,UACzC,GAAe,MAAXA,EAAmB,OAEvB,MAAM1M,EAAiB,CACrBtE,MAAO,CAAC,CACN0P,gBAAiBjR,KAAK+J,sBACtB3E,IAAGuC,2CACDtC,OAAsB,QAAdlD,IAAQ4J,cAAM7J,QAAIqQ,EAAQ5I,WAAWzD,WAC7CZ,WAAYiN,EAAQ5I,YAChB4I,EAAQxM,UAAYI,oBAA8B,CAAEV,KAAM8M,EAAQzI,MAClEyI,EAAQxM,UAAYI,sBAAgC,CAAEZ,OAAQpC,SAASoP,EAAQzI,IAAK,MACpFyI,EAAQxM,UAAYI,sBAAgC,CAAEX,OAAQ+M,EAAQzI,SAI1EiH,KAAUC,KAAiBnL,GACjC7F,KAAK+M,OAAO6D,SAAS,CAAC,QAAQG,KAAY,CAAEF,WAAY7Q,KAAKgN,QAC7DhN,KAAKuN,kBAAkBiF,iBAI3BC,cACErD,QAAQsD,KAAK,kBAAmB1S,KAAKoO,SAAS/M,MAAM+P,kBACpDpR,KAAKmN,SAASgF,KAAK,4CAAwC3E,EAAW,CAAEmF,SAAU,MAG5EhE,gBAAgBF,mBACtB,MAAMC,EAAuB,CAC3B,CACElN,WAAY,KACZL,MAAO,KACPkR,MAAO,GACPO,YAAa,QACbC,UAAU,EACVxS,OAAQ,uBACRyS,UAAY5S,IAEH,oCAAmC6S,EADF/R,KACc+D,UAAUC,SAAW,WAAa,KAAKhC,MAAM,KAErGtC,YAAcR,GACqBA,EAAOc,KACrBW,GAErBqR,aAAcC,IACdC,mBAC6C,CACzCC,cAAgBvP,GAAS,OAAOA,EAAKjC,eAAeiC,EAAKwP,wBAAwBxP,EAAK6B,SAK5F,CACEtE,MAAO,SACPkR,MAAO,GACPO,YAAa,QACbE,UAAW,8BAA8B9P,MAAM,KAC/C3C,OAAQ+L,GACR1L,YAAcR,IACZ,MAAM0D,EAAoB1D,EAAOc,KAMjC,MAL2B,CACzBqL,UAAWzI,EAAKyL,YAChB/C,WAAY1I,EAAKwB,IACjBmH,cAAa3I,EAAKsB,UAAWtB,EAAKsB,SAAS3E,OAAS,IAIxDyS,aAAcnO,GACdqO,mBAAqB,MACsB,CACvCtN,eAAiBhC,GAAS5D,KAAK2F,aAAa/B,KAF3B,IAOvB,CACEpC,WAAY,gBACZL,MAAO,SACPkS,KAAM,EACNC,SAAU,IACVR,UAAW,2BAA2B9P,MAAM,KAC5C6P,UAAU,EACVxS,OAAQ,qBACRkT,cAAgBrT,IAEdF,KAAK8Q,SAD4B5Q,EAAOc,OAG1CN,YAAcR,GACqBA,EAAOc,KACrB2P,QAGvB,CACEnP,WAAY,QACZgS,cAAe,+BACfrS,MAAO,QACPkR,MAAO,GACPO,YAAa,QACbE,UAAW,aACXD,UAAU,EACVxS,OAAQ,qBACRK,YAAcR,IACZ,MAAM0D,EAAoB1D,EAAOc,KACjC,MAAO,GAAG4C,EAAK6P,WAAW7P,EAAK8P,UAGnC,CACEZ,UAAW,8BAA8B9P,MAAM,KAC/CqP,MAAO,IACPsB,OAAQ,QACRX,aAAcrP,GACduP,mBAAqB,MACuB,CACxCnP,QAAUH,GAAS5D,KAAK8D,MAAMF,GAC9BK,SAAWL,GAAS5D,KAAKgE,OAAOJ,GAChCO,SAAWP,GAAS5D,KAAK4T,OAAOhQ,KAJf,KAUzB,UAAW/C,KAAU4N,EAAS,CAC5B,MAAM7N,EAAyB,CAC7BY,WAAYX,EAAOgT,WACnB1S,MAAON,EAAOgT,WACdR,KAAM,EACNC,SAAU,IACVR,UAAW,aACXD,UAAU,GAEZ,OAAQhS,EAAOiT,WACRC,WACHnT,EAAO6D,gBAA0D,QAAxClC,EAAuB,QAAvBJ,EAAe,QAAfH,IAAOkD,gBAAQhD,eAAE8R,cAAM5R,eAAE6R,uBAAezR,SACjE5B,EAAOoS,aAAe5O,GACtBxD,EAAOF,YAAcV,KAAKkU,uBAC1BtT,EAAOP,OAASP,EAChB,WACGiU,aACHnT,EAAOuT,cAAwD,QAAxCpE,EAAyB,QAAzBpD,EAAe,QAAfrK,IAAO4C,gBAAQxC,eAAE0R,gBAAQC,eAAEC,qBAAaC,SAC/D3T,EAAOF,YAAcV,KAAKwU,oBAC1B5T,EAAOP,OAAS,qBAChB,WACG0T,YACHnT,EAAOF,YAAcV,KAAKyU,mBAC1B7T,EAAOP,OAASqU,IAChB,WACGX,WACHnT,EAAOP,OAAS,uBAChB,cAEAO,EAAOP,OAAS,qBAGpBqO,EAAW+C,KAAK7Q,GAElB,OAAO8N,EAGD5K,MAAMF,GACZ,MAGMmN,KAAUC,KAHO,CACrBzP,MAAO,CAAC,CAAE0P,gBAAiBjR,KAAK+J,sBAAuB4K,gBAAiB/Q,EAAKjC,OAG/E3B,KAAK+M,OAAO6D,SAAS,CAAC,QAAQG,KAAY,CAAEF,WAAY7Q,KAAKgN,QAGvDhJ,OAAOJ,GACb5D,KAAKkN,qBAAqB0H,aAAahR,EAAKjC,GAAI3B,KAAK+J,uBAAuB,GAGtE6J,OAAOhQ,IACRkI,QAAQ,WAAWlI,EAAK+M,YAAY/M,EAAKwP,qBAC9CpT,KAAKmN,SAASgF,KAAK,eACnBnS,KAAKiN,gBAAgB2G,OAAO5T,KAAK+J,sBAAuBnG,EAAKwP,eAAe,GAAOlK,UAAU,CAC3FK,KAAM,KACJvJ,KAAKmN,SAASgF,KAAK,UAAW,KAAM,CAAEQ,SAAU,MAChD3S,KAAK+N,cAEPoB,MAAQ0F,IACN7U,KAAKmN,SAAS2H,UACThJ,QAAQ,GAAG+I,EAAI1F,MAAM4F,oDAAoDnR,EAAK+M,YAAY/M,EAAKwP,qBAGpGpT,KAAKmN,SAASgF,KAAK,eACnBnS,KAAKiN,gBAAgB2G,OAAO5T,KAAK+J,sBAAuBnG,EAAKwP,eAAe,GAAMlK,UAAU,KAC1FlJ,KAAKmN,SAASgF,KAAK,UAAW,KAAM,CAAEQ,SAAU,MAChD3S,KAAK+N,oBAMLmG,uBAAuBhU,GAC7B,MAAM8U,EAA0B9U,EAAOc,KAAKd,EAAOU,OAAOO,OAC1D,OAAwB,IAApB6T,EAASzU,OAAuB,KAC7ByU,EAAS/R,IAAIW,GAAQA,EAAK8B,OAG3B8O,oBAAoBtU,GAC1B,MAAM8U,EAAmB9U,EAAOc,KAAKd,EAAOU,OAAOO,OACnD,OAAK6T,EACG9U,EAAOU,OAA0BuT,cACrCa,EAASpQ,QAAQ,IAAK,KAAKA,QAAQ,IAAK,IACxCoQ,EAAShS,MAAM,KAAK,GAHA,KAMlByR,mBAAmBvU,GACzB,MAAM8U,EAAW9U,EAAOc,KAAKd,EAAOU,OAAOO,OAC3C,MAAwB,kBAAb6T,EAAiC,KACrCA,EAAS9O,yDAtWP2G,GAAqBrJ,0KAArBqJ,EAAqBtJ,k7BDhDlCC,iBAAkD,UAAlDA,CAAkD,UAAlDA,CAAkD,SAI1CA,kDAGAA,kBACFA,QACAA,oBAA6CA,gCAASC,kBACpDD,oBAAUA,iBAAKA,cAKrBA,0BAEAA,2CAIAA,kBAA0B,wBAEtBA,qCAAaC,kBAAbD,CAAiC,kCACjBC,sCAClBD,QAEAA,kBAAmC,eACUA,gCAASC,oBAClDD,qBAAUA,2BAAcA,QACxBA,iBAAMA,iBAAIA,UAEZA,sBAA2CA,gCAASC,oBAClDD,qBAAUA,yBAAYA,QACtBA,iBAAMA,iBAAIA,UAEZA,sBAAmDA,gCAASC,iBAC1DD,qBAAUA,yBAAYA,QACtBA,iBAAMA,iBAAIA,UAEZA,sBAA2CA,gCAASC,qBAClDD,qBAAUA,wBAAWA,QACrBA,iBAAMA,4BAAeA,UAEvBA,+CAKFA,QAEAA,sBAAoEA,gCAASC,WAAS,QACpFD,qBAAUA,gBAAGA,0BAhDIA,iDAafA,mHAKuCA,gDAA0B,4BAA1BA,CAA0B,+BAsBAA,iJCI5DqJ,GAAb,yGEzCO,IAAMC,EAAb,MAAM,gBAA6B3F,IAEjCpH,YACYgN,EACAC,GAEVzF,QAHUvH,cACAA,aAKZqL,cACE9D,MAAM8D,cAGE4J,2BACR,OAAOjV,KAAK+M,OAAOmI,OAAOnM,QACxB1I,KAAOsL,GAASA,aAAiBwJ,OACjCnM,SAAYhJ,KAAKgN,MAAMW,SAASyH,WAAWA,eAC3CnS,KAAI,MAAQjD,KAAKgN,MAAMW,SAASyH,WAAWA,aAC3CC,YACAhV,KAAO,EAAEiV,EAAUC,KAAcD,IAAaC,IAIxCtH,8BACR,OAAOjO,KAAK+M,OAAOmI,OAAOnM,MACxB1I,OAAOsL,GAASA,aAAiBwJ,OACjCnM,SAAYhJ,KAAKgN,MAAMW,SAASyH,eAChCnS,KAAI,MAAQjD,KAAKgN,MAAMW,SAASyH,aAChCC,YACAhV,KAAO,EAAEiV,EAAUC,KAAcD,IAAaC,kDA7BvCzI,GAAatJ,kDAAbsJ,EAAa0I,mBAAb1I,GAAb,qECGO,IAAM4H,EAAb,MAAM,QALN3U,cAMEC,YAAS,GAITC,OAAOC,GACLF,KAAKG,aAAeD,EAGtBE,iBACE,MAAuB,KAAhBJ,KAAKK,OAGdG,eAAeN,GACb,MAUMmB,EAAiBrB,KAAKG,aAAaO,YAVI,CAC3CC,IAAKX,KAAKG,aAAaQ,IACvBC,OAAQZ,KAAKG,aAAaS,OAC1BC,OAAQb,KAAKG,aAAaU,OAC1BC,UAAWd,KAAKG,aAAaW,UAC7BC,QAASf,KAAKG,aAAaY,QAC3BC,KAAMd,EAAOe,KAAKD,KAClBE,SAAWC,GAAUjB,EAAOe,KAAKD,KAAKG,GACtCF,KAAMf,EAAOe,OAGf,OAAa,MAATI,GACGA,EAAM6E,aAAelG,KAAKK,OAGnCuB,WACE,GAAK5B,KAAKI,iBACV,MAAO,CACLyB,WAAY,UACZxB,OAAQL,KAAKK,QAIjByB,SAASC,GACP/B,KAAKK,OAAS0B,EAAQA,EAAM1B,OAAS,GAGvCsC,iBAAiBzC,IAGjBmD,gBACErD,KAAKG,aAAamD,sEA7CToR,8BAAsBnR,sKCVnCC,6BAAiBA,sDAAoB,kCAAkBC,oBACrDD,8BAA2BA,eAAGA,QAC9BA,8BAA+BA,gBAAIA,QACnCA,8BAAgCA,iBAAKA,gBAHtBA,qODUJkR,GAAb,2FERIlR,kCADFA,oBACEA,gCACFA,uCADiBA,2DAIfA,kCADFA,qBACEA,gCACFA,uCADiBA,2DAKjBA,kECJK,IAAMiS,EAAb,MAAM,QAIJ1V,cAHSC,cAAU,EACnBA,cAAU,EAIV0V,gBACE1V,KAAK2V,SAAW3V,KAAK2V,sDAPZF,8BAAkBlS,mPDP/BC,iBAAsBA,gCAASC,oBAC7BD,4BAIAA,6BAGFA,QAEAA,iDAVgDA,sCAA0C,sBAC7EA,kCAICA,keCEDiS,GAAb,2KCKO,IAAMxC,EAAb,MAAM,QAKJlT,YAAoBoN,mBAEpBlN,OAAOC,GACLF,KAAK4V,GAAK1V,EAAOmB,MACjBrB,KAAK6V,MAA2B,iBAAZ7V,KAAK4V,GAAkB,MAAQ,QACnD5V,KAAK8V,QAAU5V,EAAOiT,cAAcjT,EAAOc,MAG7C6C,QAAQ3D,GACN,OAAO,EAGT6V,UACEC,KAAgBhW,KAAK8V,SACrB9V,KAAKmN,SAASgF,KAAK,sBAAuB,KAAM,CAAEQ,SAAU,oDAnBnDM,GAAgBzP,sCAAhByP,EAAgB1P,0KCZ7BC,iBAA0DA,gCAASC,WAIjED,kBAAiBA,SAAQA,QACzBA,sBAAuBA,qBAASA,iBALMA,yBAAiB,wDAItCA,glBDQNyP,GAAb,oCEVO,MAAMvF,EAAkC,CAC7CuI,cAAc,EACdC,aAAa,EACbC,yBAAyB,EACzBC,aAAc,GACdC,yBAAyB,EACzBC,YAAY,EACZC,cAAe,CAAEpW,aAAc,CAAEqW,cAAe,SAChDC,iBAAkB,EAClBC,iBAAkB,IAClBC,wBAAwB,mBCRpB,aACJ,MAAO,iHCFF,IAAMC,EAAb,MAAM,QAEJC,QAAQlL,GACNA,EAAMmL,gEAHGF,8BAA6BrT,+GAA7BE,qBAAb,4DCCO,IAAMsT,EAAb,MAAM,QAEJhX,YAAoBqN,8BAGpByJ,QAAQlL,IACwBqL,UAAUC,SAASC,MAAM,OAASvL,EAAMwL,QAAUxL,EAAMyL,UAAYzL,EAAM0L,UAAY1L,EAAM2L,SAExHtX,KAAKoN,oBAAoBmK,qBACzBC,OAAOC,eAAeC,iEATfX,GAAoBvT,sCAApBuT,EAAoBxT,sGAApBE,qBAAb,mBCHM,WAA0BkU,GAC9B,MAAMzU,EAAK0U,SAASC,cAAc,YAClC3U,EAAG7B,MAAQsW,EACXzU,EAAG4U,aAAa,WAAY,IAC5B5U,EAAG6U,MAAMC,SAAW,WACpB9U,EAAG6U,MAAME,KAAO,UAChBL,SAASM,KAAKC,YAAYjV,GAC1B,MAAMkV,EACJR,SAASH,eAAeY,WAAa,GACjCT,SAASH,eAAea,WAAW,GAEzCpV,EAAGqV,SACHX,SAASY,YAAY,QACrBZ,SAASM,KAAKO,YAAYvV,GACtBkV,IACFR,SAASH,eAAeC,kBACxBE,SAASH,eAAeiB,SAASN","names":["EntityFilterComponent","constructor","this","agInit","params","filterParams","isFilterActive","filter","idFilter","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","context","data","node","getValue","field","some","value","includes","items","headerName","idFltr","itm","Id","getModel","filterType","setModel","model","n","e","_a","i","_b","idFilterString","f","r","_c","join","_d","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","map","el","parseInt","isNaN","filterChanged","filterChangedCallback","selectors","i0","ctx","ctx_r2","ContentItemsActionsComponent","item","refresh","clone","onClone","export","onExport","deleteItem","onDelete","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","entities","text","replace","ContentItemsStatusComponent","readOnly","_EditInfo","ReadOnly","metadataCount","Metadata","metadataTooltip","For","Target","TargetType","Number","String","Guid","Title","openMetadata","onOpenMetadata","form","control","keyType","controls","testValue","toString","eavConstants","test","patternWholeNumber","hasCurly","bracket","guid","substring","guidRegex","patternGuid","ctx_r54","oxw","ctx_r56","ctx_r58","ctx_r60","ctx_r61","CreateMetadataDialogComponent","BaseSubsinkComponent","dialogRef","contentItemsService","contentTypesService","super","dropdownInsertValue","ngOnInit","targetTypeOptions","Object","option","keyTypeOptions","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","FormGroup","addControl","FormControl","Validators","metadataKeyValidator","subscription","add","scopeForContentTypes","valueChanges","pipe","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","name","fetchContentTypes","merge","targetType","formValues","getRawValue","key","contentTypeStaticName","getAll","formValues$","GeneralHelpers","combineLatest","guidedMode","foundTargetType","find","updatedForm","isAppMetadata","appId","keys","templateVars$","scopeOptions","contentItems","contentTypes","guidedKey","unknownTargetType","targetTypeHint","u","hint","guidedKeyExists","ngOnDestroy","complete","closeDialog","result","close","toggleGuidedKey","event","toggleGuidedMode","checked","confirm","target","scope","retrieveContentTypes","getScopes","scopes","PubMetaFilterComponent","published","metadata","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","d","ctx_r5","ContentItemsComponent","BaseComponent","router","route","entitiesService","contentExportService","snackBar","globalConfigService","dialog","viewContainerRef","changeDetectorRef","undefined","getDebugEnabled$","defaultGridOptions","snapshot","paramMap","get","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosedShallow","contentType$","items$","gridApi$","onGridReady","retrieveContentType","contentType","getColumns","columns","columnDefs","buildColumnDefs","filterModel","urlFilters","filters","charAt","atob","JSON","parse","error","console","IsPublished","IsMetadata","Status","entries","forEach","columnDef","c","O","type","filterTo","v","buildFilterModel","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","consoleLogAngular","setFilterModel","url","GoToMetadata","_Title","navigate","relativeTo","editItem","formUrl","convertFormToUrl","ContentTypeName","EntityId","exportContent","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","filesDropped","files","importFile","lastIndexOf","toLocaleLowerCase","importContent","importItem","state","createMetadata","open","autoFocus","width","afterClosed","itemFor","markForCheck","debugFilter","warn","duration","headerClass","sortable","cellClass","contentItem","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","_RepositoryId","flex","minWidth","onCellClicked","headerTooltip","_Used","_Uses","pinned","delete","StaticName","Type","DataTypeConstants","Entity","AllowMultiValue","valueGetterEntityField","useTimePicker","DateTime","_e","UseTimePicker","_f","valueGetterDateTime","valueGetterBoolean","BooleanFilterComponent","DuplicateEntity","exportEntity","err","dismiss","ExceptionMessage","rawValue","refreshOnChildClosedDeep","events","NavigationEnd","firstChild","pairwise","hadChild","hasChild","features","FieldHintComponent","toggleIsShort","isShort","id","align","tooltip","copy","copyToClipboard","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","valueCache","defaultColDef","newRowsAction","tooltipShowDelay","tooltipHideDelay","suppressMovableColumns","ClickStopPropagationDirective","onClick","stopPropagation","ToggleDebugDirective","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","str","document","createElement","setAttribute","style","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange"],"sources":["./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/shared/components/base-component/base.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.html","./projects/eav-ui/src/app/shared/constants/default-grid-options.constants.ts","./projects/eav-ui/src/app/shared/constants/guid.constants.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field appearance=\"standard\" color=\"accent\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"standard\" color=\"accent\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\" like-button highlight\" matRipple tippy=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.ReadOnly\" (click)=\"deleteItem()\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ICellRendererParams & ContentItemsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsParams): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone(): void {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export(): void {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem(): void {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple *ngIf=\"!readOnly\"\r\n    [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\"\r\n      matBadgePosition=\"below after\">{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"readOnly && !(!metadataCount && !value.metadata)\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\">{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  readOnly: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ICellRendererParams & ContentItemsStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusParams): void {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.readOnly = this.item._EditInfo.ReadOnly;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    this.metadataTooltip = this.item.For\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${this.item.For.Target}`\r\n      + `\\nTargetType: ${this.item.For.TargetType}`\r\n      + (this.item.For.Number ? `\\nNumber: ${this.item.For.Number}` : '')\r\n      + (this.item.For.String ? `\\nString: ${this.item.For.String}` : '')\r\n      + (this.item.For.Guid ? `\\nGuid: ${this.item.For.Guid}` : '')\r\n      + (this.item.For.Title ? `\\nTitle: ${this.item.For.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata(): void {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { AbstractControl, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: FormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create Metadata</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This is a special operation to add an item which is metadata for another item,\r\n    see <a href=\"http://r.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- Target Type -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Target</mat-label>\r\n\r\n        <mat-select *ngIf=\"data.guidedMode\" formControlName=\"targetType\" required>\r\n          <mat-option *ngFor=\"let option of targetTypeOptions\" [value]=\"option.targetType\">\r\n            {{ option.label }}\r\n          </mat-option>\r\n          <mat-option *ngIf=\"data.unknownTargetType\" [value]=\"data.formValues.targetType\">\r\n            {{ data.formValues.targetType }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"number\" min=\"0\" *ngIf=\"!data.guidedMode\" formControlName=\"targetType\" required>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint\r\n        *ngIf=\"form.controls['targetType'].touched && !form.controls['targetType'].invalid && data.unknownTargetType\"\r\n        [isError]=\"false\">\r\n        Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"data.targetTypeHint\" [isError]=\"false\">{{ data.targetTypeHint }}</app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern\"\r\n        [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n\r\n      <!-- Key Type -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Key type</mat-label>\r\n\r\n        <mat-select formControlName=\"keyType\" required>\r\n          <mat-option *ngFor=\"let option of data.keyTypeOptions\" [value]=\"option\">\r\n            {{ option }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint *ngIf=\"form.controls['keyType'].touched && form.controls['keyType'].errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n\r\n      <!-- Content Type for Content Items -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\"\r\n        *ngIf=\"data.guidedMode && data.formValues.targetType === eavConstants.metadata.entity.targetType\">\r\n        <mat-label>Content Type</mat-label>\r\n\r\n        <mat-select formControlName=\"contentTypeForContentItems\"\r\n          [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <!-- Scope for Content Types -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\"\r\n        *ngIf=\"data.guidedMode && (data.formValues.targetType === eavConstants.metadata.entity.targetType || data.formValues.targetType === eavConstants.metadata.contentType.targetType)\">\r\n        <mat-label>Scope</mat-label>\r\n\r\n        <mat-select formControlName=\"scopeForContentTypes\"\r\n          [placeholder]=\"!data.scopeOptions.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n            {{ scopeOption.name }}\r\n          </mat-option>\r\n          <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint>\r\n        The scope should almost never be changed -\r\n        <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n      </app-field-hint>\r\n\r\n      <!-- Key -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Key</mat-label>\r\n\r\n        <ng-container *ngIf=\"data.guidedMode; then specialKeyInputs else defaultKeyInput\">\r\n        </ng-container>\r\n\r\n        <ng-template #specialKeyInputs>\r\n          <ng-container [ngSwitch]=\"data.formValues.targetType\">\r\n            <ng-container *ngSwitchCase=\"eavConstants.metadata.entity.targetType\">\r\n              <mat-select *ngIf=\"data.guidedKey\" formControlName=\"key\" required\r\n                [placeholder]=\"!data.contentItems.length ? 'No items found' : ''\">\r\n                <mat-option *ngFor=\"let item of data.contentItems\" [value]=\"item.Guid\">\r\n                  {{ item.Title }} ({{ item.Id }})\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n              <input matInput type=\"text\" *ngIf=\"!data.guidedKey\" formControlName=\"key\" required>\r\n            </ng-container>\r\n\r\n            <ng-container *ngSwitchCase=\"eavConstants.metadata.contentType.targetType\">\r\n              <mat-select *ngIf=\"data.guidedKey\" formControlName=\"key\" required\r\n                [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n                <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n              <input matInput type=\"text\" *ngIf=\"!data.guidedKey\" formControlName=\"key\" required>\r\n            </ng-container>\r\n\r\n            <ng-container *ngSwitchDefault>\r\n              <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n            </ng-container>\r\n          </ng-container>\r\n        </ng-template>\r\n\r\n        <ng-template #defaultKeyInput>\r\n          <input matInput type=\"text\" *ngIf=\"data.formValues.keyType !== eavConstants.keyTypes.number\"\r\n            formControlName=\"key\" required>\r\n          <input matInput type=\"number\" *ngIf=\"data.formValues.keyType === eavConstants.keyTypes.number\"\r\n            formControlName=\"key\" required>\r\n        </ng-template>\r\n\r\n        <div matSuffix class=\"selection-suffix\" *ngIf=\"data.guidedMode && data.guidedKeyExists\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': data.guidedKey }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedKey(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !data.guidedKey }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedKey(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber\"\r\n        [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternGuid\" [isError]=\"true\">\r\n        Must be a valid GUID\r\n      </app-field-hint>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <mat-slide-toggle color=\"accent\"\r\n        [tippy]=\"data.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n        [checked]=\"data.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n        {{ data.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith, Subscription } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogTemplateVars, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss']\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: FormGroup;\r\n  templateVars$: Observable<MetadataDialogTemplateVars>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { \r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('targetType', new FormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new FormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new FormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new FormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new FormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscription.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscription.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscription.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!GeneralHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value)) {\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n        }\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType)) {\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n        }\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId) {\r\n          updatedForm.key = this.context.appId;\r\n        }\r\n\r\n        if (Object.keys(updatedForm).length) {\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        GeneralHelpers.disableControl(this.form.controls['keyType'], keyTypeDisabled);\r\n        GeneralHelpers.disableControl(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.templateVars$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const templateVars: MetadataDialogTemplateVars = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>\r\n        <ng-container *ngIf=\"contentType$ | async as contentType\">\r\n          {{ contentType.Label || contentType.Name }}\r\n        </ng-container>\r\n        Data\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div *ngIf=\"(contentType$ | async)?.Properties?.ListInstructions as listInstructions\"\r\n    [innerHTML]=\"listInstructions | safeHtml\">\r\n  </div>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items$ | async\" [gridOptions]=\"gridOptions\"\r\n      (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n      (filesDropped)=\"filesDropped($event)\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\">\r\n      <button mat-button tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon>cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n        <mat-icon>local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      <button mat-button color=\"accent\" tippy=\"Print filter to console\" *ngIf=\"debugEnabled$ | async\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon>filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n    </div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, filter, map, pairwise, startWith, Subscription, take } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { GlobalConfigService } from '../edit/shared/store/ngrx-data';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BaseComponent } from '../shared/components/base-component/base.component';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogAngular } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './content-items-status/content-items-status.models';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n})\r\nexport class ContentItemsComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(undefined);\r\n  items$ = new BehaviorSubject<ContentItem[]>(undefined);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { \r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.subscription.add(this.refreshOnChildClosedShallow().subscribe(() => { this.fetchItems(); }));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      const columnDefs = this.buildColumnDefs(columns);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogAngular('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.contentTypeStaticName,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        const contentItem: ContentItem = rowNode.data;\r\n        ids.push(contentItem.Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: itemFor.target ?? itemFor.targetType.toString(),\r\n            TargetType: itemFor.targetType,\r\n            ...(itemFor.keyType === eavConstants.keyTypes.guid && { Guid: itemFor.key }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.number && { Number: parseInt(itemFor.key, 10) }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.string && { String: itemFor.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID',\r\n        field: 'Id',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        sortable: true,\r\n        filter: 'agNumberColumnFilter',\r\n        cellClass: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return `id-action no-padding no-outline ${contentItem._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' ');\r\n        },\r\n        valueGetter: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return contentItem.Id;\r\n        },\r\n        cellRenderer: IdFieldComponent,\r\n        cellRendererParams: (() => {\r\n          const params: IdFieldParams<ContentItem> = {\r\n            tooltipGetter: (item) => `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`,\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsStatusParams = {\r\n            onOpenMetadata: (item) => this.openMetadata(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'primary-action highlight'.split(' '),\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        onCellClicked: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          this.editItem(contentItem);\r\n        },\r\n        valueGetter: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return contentItem._Title;\r\n        },\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          return `${item._Used} / ${item._Uses}`;\r\n        },\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        width: 122,\r\n        pinned: 'right',\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            onClone: (item) => this.clone(item),\r\n            onExport: (item) => this.export(item),\r\n            onDelete: (item) => this.delete(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { GeneralHelpers } from '../edit/shared/helpers';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) { return; }\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = GeneralHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, Subscription } from 'rxjs';\r\nimport { BaseSubsinkComponent } from '../base-subsink-component/base-subsink.component';\r\n\r\n@Directive()\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport class BaseComponent extends BaseSubsinkComponent implements OnDestroy {\r\n  \r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  protected refreshOnChildClosedDeep() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild.firstChild),\r\n      pairwise(),\r\n      filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n    )\r\n  }\r\n\r\n  protected refreshOnChildClosedShallow() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n    )\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy(): void {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>","import { GridOptions } from '@ag-grid-community/core';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  tooltipHideDelay: 100000,\r\n  suppressMovableColumns: true,\r\n} as const;\r\n","/**\r\n * Do not reuse regex:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#using_test_on_a_regex_with_the_global_flag\r\n */\r\nexport function guidRegex(): RegExp {\r\n  return /^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$/i;\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_content-items_content-items_component_ts.871dc4f15dcc344a.js"}