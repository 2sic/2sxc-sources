{"version":3,"mappings":"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","names":["i0","ctx_r6","ctx_r8","ctx_r10","ctx_r12","ContentTypeFieldsActionsComponent","constructor","agInit","params","this","field","data","metadataCount","Metadata","Object","keys","filter","key","length","enablePermissions","InputType","InputTypeConstants","Type","DataTypeConstants","refresh","openMetadata","onOpenMetadata","rename","onRename","openPermissions","onOpenPermissions","deleteField","onDelete","selectors","ctx_r2","ContentTypeFieldsInputTypeComponent","value","changeInputType","onChangeInputType","ContentTypeFieldsSpecialComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ContentTypeFieldsTitleComponent","isTitle","setTitle","onSetTitle","ContentTypeFieldsTypeComponent","icon","calculateTypeIcon","ContentTypeFieldsComponent","dialogRef","route","router","contentTypesService","contentTypesFieldsService","snackBar","BehaviorSubject","undefined","AllCommunityModules","defaultGridOptions","getRowClass","rowClass","EditInfo","ReadOnly","push","columnDefs","rowDrag","width","cellClass","split","cellRenderer","valueGetter","IsTitle","cellRendererParams","flex","minWidth","sortable","onCellClicked","editFieldMetadata","nameCellRenderer","StaticName","headerClass","headerName","inputTypeValueGetter","d","p","_a","All","_b","Name","Notes","pinned","delete","snapshot","paramMap","get","Subscription","ngOnInit","fetchFields","refreshOnChildClosed","ngOnDestroy","contentType$","complete","fields$","subscription","unsubscribe","closeDialog","close","onGridReady","gridApi","api","columnApi","onRowDragEnter","event","setEnableCellTextSelection","onRowDragEnd","setSuppressRowDrag","idArray","map","Id","reOrder","subscribe","onRowDragMove","movingNode","node","overNode","overData","newFields","fromIndex","indexOf","toIndex","moveInArray","next","clearFocusedCell","arr","element","splice","onSortChanged","columnStates","getColumnState","sortApplied","some","state","sort","suppressRowDrag","onFilterChanged","filterModel","getFilterModel","fieldsFiltered","filterApplied","shouldSuppress","rowDragSuppressed","add","navigate","contentTypeStaticName","relativeTo","currentField","includes","isGroupOpen","substring","callback","retrieveContentType","of","getFields","forkJoin","contentType","fields","form","items","createItemDefinition","formUrl","convertFormToUrl","metadataType","EntityId","ContentTypeName","For","Target","eavConstants","TargetType","Number","Prefill","open","duration","confirm","GoToPermissions","url","GoToMetadata","events","pipe","NavigationEnd","startWith","firstChild","pairwise","hadChild","hasChild","ctx"],"sources":["./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-actions/content-type-fields-actions.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-special/content-type-fields-special.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-special/content-type-fields-special.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-title/content-type-fields-title.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-title/content-type-fields-title.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-type/content-type-fields-type.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-type/content-type-fields-type.component.html","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.component.html","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.component.ts"],"sourcesContent":["<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple *ngIf=\"!field.EditInfo.ReadOnly\" tippy=\"Metadata\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\">\r\n      local_offer\r\n    </mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"field.EditInfo.ReadOnly\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\">\r\n      local_offer\r\n    </mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Permissions\" *ngIf=\"!field.EditInfo.ReadOnly && enablePermissions\"\r\n    (click)=\"openPermissions()\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\">\r\n      person\r\n    </mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"field.EditInfo.ReadOnly || !enablePermissions\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\">\r\n      person\r\n    </mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.ReadOnly\" (click)=\"rename()\">\r\n      <mat-icon>text_fields</mat-icon>\r\n      <span>Rename</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.ReadOnly || field.IsTitle\" (click)=\"deleteField()\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { DataTypeConstants } from '../../constants/data-type.constants';\r\nimport { InputTypeConstants } from '../../constants/input-type.constants';\r\nimport { Field } from '../../models/field.model';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-actions',\r\n  templateUrl: './content-type-fields-actions.component.html',\r\n  styleUrls: ['./content-type-fields-actions.component.scss'],\r\n})\r\nexport class ContentTypeFieldsActionsComponent implements ICellRendererAngularComp {\r\n  field: Field;\r\n  metadataCount: number;\r\n  enablePermissions: boolean;\r\n  private params: ContentTypeFieldsActionsParams;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ContentTypeFieldsActionsParams) {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    this.metadataCount = this.field.Metadata ? Object.keys(this.field.Metadata).filter(key => key !== 'merged').length : 0;\r\n    this.enablePermissions = this.field.InputType === InputTypeConstants.StringWysiwyg || this.field.Type === DataTypeConstants.Hyperlink;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata() {\r\n    this.params.onOpenMetadata(this.field);\r\n  }\r\n\r\n  rename() {\r\n    this.params.onRename(this.field);\r\n  }\r\n\r\n  openPermissions() {\r\n    this.params.onOpenPermissions(this.field);\r\n  }\r\n\r\n  deleteField() {\r\n    this.params.onDelete(this.field);\r\n  }\r\n}\r\n","<div matRipple class=\"input-component highlight\" *ngIf=\"!field.EditInfo.ReadOnly\" (click)=\"changeInputType()\">\r\n  <div class=\"text\">{{ value }}</div>\r\n  <div class=\"like-button\">\r\n    <mat-icon>arrow_drop_down</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"input-component disabled\" *ngIf=\"field.EditInfo.ReadOnly\">\r\n  <div class=\"text disabled\">{{ value }}</div>\r\n  <div class=\"like-button disabled\">\r\n    <mat-icon>arrow_drop_down</mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../models/field.model';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-input-type',\r\n  templateUrl: './content-type-fields-input-type.component.html',\r\n  styleUrls: ['./content-type-fields-input-type.component.scss'],\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  field: Field;\r\n\r\n  private params: ContentTypeFieldsInputTypeParams;\r\n\r\n  agInit(params: ContentTypeFieldsInputTypeParams) {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  changeInputType(): void {\r\n    this.params.onChangeInputType(this.field);\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon *ngIf=\"hasFormulas\" tippy=\"Has Formulas\">functions</mat-icon>\r\n  <mat-icon *ngIf=\"isEphemeral\" tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../models/field.model';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-special',\r\n  templateUrl: './content-type-fields-special.component.html',\r\n  styleUrls: ['./content-type-fields-special.component.scss'],\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple *ngIf=\"!field.EditInfo.ReadOnly\" tippy=\"Use as title field\"\r\n    (click)=\"setTitle()\">\r\n    <mat-icon>{{ isTitle ? 'star' : 'star_outline' }}</mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"field.EditInfo.ReadOnly\">\r\n    <mat-icon>{{ isTitle ? 'star' : 'star_outline' }}</mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../models/field.model';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-title',\r\n  templateUrl: './content-type-fields-title.component.html',\r\n  styleUrls: ['./content-type-fields-title.component.scss'],\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n  isTitle: boolean;\r\n  field: Field;\r\n\r\n  private params: ContentTypeFieldsTitleParams;\r\n\r\n  agInit(params: ContentTypeFieldsTitleParams) {\r\n    this.params = params;\r\n    this.isTitle = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  setTitle(): void {\r\n    this.params.onSetTitle(this.field);\r\n  }\r\n}\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { calculateTypeIcon } from '../../content-type-fields.helpers';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-type',\r\n  templateUrl: './content-type-fields-type.component.html',\r\n  styleUrls: ['./content-type-fields-type.component.scss'],\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","<div class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>\r\n        <ng-container *ngIf=\"contentType$ | async as contentType\">\r\n          {{ contentType.Label || contentType.Name }}\r\n        </ng-container>\r\n        Fields\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"fields$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (rowDragEnter)=\"onRowDragEnter($event)\" (rowDragEnd)=\"onRowDragEnd($event)\"\r\n      (rowDragMove)=\"onRowDragMove($event)\" (gridReady)=\"onGridReady($event)\" (sortChanged)=\"onSortChanged($event)\"\r\n      (filterChanged)=\"onFilterChanged($event)\" [ngClass]=\"{\r\n        'grid-sorted': sortApplied,\r\n        'grid-filtered': filterApplied\r\n      }\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\"></div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add fields\"\r\n      [disabled]=\"(contentType$ | async) == null || (contentType$ | async).EditInfo.ReadOnly\" (click)=\"add()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AllCommunityModules, ColumnApi, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowClassParams, RowDragEvent, SortChangedEvent } from '@ag-grid-community/all-modules';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin, of, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { AddItem, EditForm, EditItem } from '../shared/models/edit-form.model';\r\nimport { ContentTypeFieldsActionsComponent } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsInputTypeComponent } from './ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component';\r\n// tslint:disable-next-line:max-line-length\r\nimport { ContentTypeFieldsInputTypeParams } from './ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.models';\r\nimport { ContentTypeFieldsSpecialComponent } from './ag-grid-components/content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './ag-grid-components/content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTitleParams } from './ag-grid-components/content-type-fields-title/content-type-fields-title.models';\r\nimport { ContentTypeFieldsTypeComponent } from './ag-grid-components/content-type-fields-type/content-type-fields-type.component';\r\nimport { InputTypeConstants } from './constants/input-type.constants';\r\nimport { Field } from './models/field.model';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  styleUrls: ['./content-type-fields.component.scss'],\r\n})\r\nexport class ContentTypeFieldsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(undefined);\r\n  fields$ = new BehaviorSubject<Field[]>(undefined);\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    getRowClass(params: RowClassParams) {\r\n      const field: Field = params.data;\r\n      const rowClass: string[] = [];\r\n      if (field.EditInfo.ReadOnly) { rowClass.push('disable-row-drag'); }\r\n      if (field.InputType === InputTypeConstants.EmptyDefault) { rowClass.push('group-start-row'); }\r\n      if (field.InputType === InputTypeConstants.EmptyEnd) { rowClass.push('group-end-row'); }\r\n      return rowClass;\r\n    },\r\n    columnDefs: [\r\n      { rowDrag: true, width: 18, cellClass: 'no-select no-padding no-outline'.split(' ') },\r\n      {\r\n        field: 'Title', width: 42, cellClass: 'secondary-action no-padding no-outline'.split(' '),\r\n        cellRenderer: ContentTypeFieldsTitleComponent, valueGetter: (params) => (params.data as Field).IsTitle,\r\n        cellRendererParams: {\r\n          onSetTitle: (field) => this.setTitle(field),\r\n        } as ContentTypeFieldsTitleParams,\r\n      },\r\n      {\r\n        field: 'Name', flex: 2, minWidth: 250, cellClass: 'primary-action highlight'.split(' '),\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: (params) => this.editFieldMetadata(params.data as Field),\r\n        cellRenderer: (params: ICellRendererParams) => this.nameCellRenderer(params),\r\n        valueGetter: (params) => (params.data as Field).StaticName,\r\n      },\r\n      {\r\n        field: 'Type', width: 70, headerClass: 'dense', cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter', cellRenderer: ContentTypeFieldsTypeComponent,\r\n        valueGetter: (params) => (params.data as Field).Type,\r\n      },\r\n      {\r\n        headerName: 'Input', field: 'InputType', width: 160,\r\n        // tslint:disable-next-line:max-line-length\r\n        cellClass: (params) => `${(params.data as Field).EditInfo.ReadOnly ? 'no-outline no-padding' : 'secondary-action no-padding'}`.split(' '),\r\n        sortable: true, filter: 'agTextColumnFilter', cellRenderer: ContentTypeFieldsInputTypeComponent,\r\n        valueGetter: (params) => this.inputTypeValueGetter(params.data as Field),\r\n        cellRendererParams: {\r\n          onChangeInputType: (field) => this.changeInputType(field),\r\n        } as ContentTypeFieldsInputTypeParams,\r\n      },\r\n      {\r\n        field: 'Label', flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter', valueGetter: (params) => (params.data as Field).Metadata?.All?.Name,\r\n      },\r\n      {\r\n        field: 'Special', width: 66, headerClass: 'dense', cellClass: 'no-outline', cellRenderer: ContentTypeFieldsSpecialComponent,\r\n      },\r\n      {\r\n        field: 'Notes', flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter', valueGetter: (params) => (params.data as Field).Metadata?.All?.Notes,\r\n      },\r\n      {\r\n        width: 122, cellClass: 'secondary-action no-padding'.split(' '), cellRenderer: ContentTypeFieldsActionsComponent, pinned: 'right',\r\n        cellRendererParams: {\r\n          onRename: (field) => this.rename(field),\r\n          onDelete: (field) => this.delete(field),\r\n          onOpenPermissions: (field) => this.openPermissions(field),\r\n          onOpenMetadata: (field) => this.openMetadata(field),\r\n        } as ContentTypeFieldsActionsParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n  private gridApi: GridApi;\r\n  private columnApi: ColumnApi;\r\n  private rowDragSuppressed = false;\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchFields();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.fields$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n    this.columnApi = params.columnApi;\r\n  }\r\n\r\n  onRowDragEnter(event: RowDragEvent) {\r\n    this.gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(event: RowDragEvent) {\r\n    this.gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields$.value.map(field => field.Id);\r\n    this.contentTypesFieldsService.reOrder(idArray, this.contentType$.value).subscribe(() => {\r\n      this.fetchFields(() => {\r\n        this.gridApi.setEnableCellTextSelection(true);\r\n        this.gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const movingNode = event.node;\r\n    const overNode = event.overNode;\r\n    if (!overNode) { return; }\r\n    const rowNeedsToMove = movingNode !== overNode;\r\n    if (rowNeedsToMove) {\r\n      const movingData: Field = movingNode.data;\r\n      const overData: Field = overNode.data;\r\n      const newFields = [...this.fields$.value];\r\n      const fromIndex = newFields.indexOf(movingData);\r\n      const toIndex = newFields.indexOf(overData);\r\n      this.moveInArray(newFields, fromIndex, toIndex);\r\n      this.fields$.next(newFields);\r\n      this.gridApi.clearFocusedCell();\r\n    }\r\n  }\r\n\r\n  private moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n  }\r\n\r\n  onSortChanged(params: SortChangedEvent) {\r\n    const columnStates = this.columnApi.getColumnState();\r\n    this.sortApplied = columnStates.some(state => state.sort != null);\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(params: FilterChangedEvent) {\r\n    const filterModel = this.gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  private suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = true;\r\n      this.gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = false;\r\n      this.gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.router.navigate([`add/${this.contentTypeStaticName}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private nameCellRenderer(params: ICellRendererParams) {\r\n    const currentField: Field = params.data;\r\n    const empties: string[] = [InputTypeConstants.EmptyDefault, InputTypeConstants.EmptyEnd];\r\n    if (empties.includes(currentField.InputType)) {\r\n      return params.value;\r\n    }\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields$.value) {\r\n      if (field.InputType === InputTypeConstants.EmptyDefault) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (field.InputType === InputTypeConstants.EmptyEnd) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === currentField.StaticName) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  private inputTypeValueGetter(field: Field) {\r\n    const inputType = field.InputType.substring(field.InputType.indexOf('-') + 1);\r\n    return inputType;\r\n  }\r\n\r\n  private fetchFields(callback?: () => void) {\r\n    const contentType$ = this.contentType$.value == null\r\n      ? this.contentTypesService.retrieveContentType(this.contentTypeStaticName)\r\n      : of(this.contentType$.value);\r\n    const fields$ = this.contentTypesFieldsService.getFields(this.contentTypeStaticName);\r\n    forkJoin([contentType$, fields$]).subscribe(([contentType, fields]) => {\r\n      this.contentType$.next(contentType);\r\n      this.fields$.next(fields);\r\n      if (callback != null) { callback(); }\r\n    });\r\n  }\r\n\r\n  private editFieldMetadata(field: Field) {\r\n    const form: EditForm = {\r\n      items: [\r\n        this.createItemDefinition(field, 'All'),\r\n        this.createItemDefinition(field, field.Type),\r\n        this.createItemDefinition(field, field.InputType),\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private createItemDefinition(field: Field, metadataType: string): AddItem | EditItem {\r\n    return field.Metadata[metadataType] != null\r\n      ? { EntityId: field.Metadata[metadataType].Id } // if defined, return the entity-number to edit\r\n      : {\r\n        ContentTypeName: '@' + metadataType, // otherwise the content type for new-assignment\r\n        For: {\r\n          Target: eavConstants.metadata.attribute.target,\r\n          TargetType: eavConstants.metadata.attribute.targetType,\r\n          Number: field.Id,\r\n        },\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n  private setTitle(field: Field) {\r\n    this.snackBar.open('Setting title...');\r\n    this.contentTypesFieldsService.setTitle(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private changeInputType(field: Field) {\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/inputType`], { relativeTo: this.route });\r\n  }\r\n\r\n  private rename(field: Field) {\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/name`], { relativeTo: this.route });\r\n  }\r\n\r\n  private delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.contentTypesFieldsService.delete(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private openPermissions(field: Field) {\r\n    this.router.navigate([GoToPermissions.getUrlAttribute(field.Id)], { relativeTo: this.route });\r\n  }\r\n\r\n  private openMetadata(field: Field) {\r\n    const url = GoToMetadata.getUrlAttribute(\r\n      field.Id,\r\n      `Metadata for Field: ${field.StaticName} (${field.Id})`,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchFields();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_content-type-fields_content-type-fields_component_ts.e584ecded16b46f0.js"}