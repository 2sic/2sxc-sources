{"version":3,"mappings":"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","names":["defaultGridOptions","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","valueCache","defaultColDef","filterParams","newRowsAction","tooltipShowDelay","suppressMovableColumns","extendStatics","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","return","__spread","arguments","length","concat","ClientSideNodeManager","rootNode","gridOptionsWrapper","eventService","columnModel","gridApi","columnApi","selectionService","beans","this","nextId","allNodesMap","group","level","id","ROOT_NODE_ID","allLeafChildren","childrenAfterGroup","childrenAfterSort","childrenAfterFilter","postConstruct","prototype","suppressParentsInRowNodes","isSuppressParentsInRowNodes","isRowMasterFunc","getIsRowMasterFunc","doingTreeData","isTreeData","doingMasterDetail","isMasterDetail","getCopyOfNodesMap","_","getRowNode","setRowData","rowData","_this","sibling","childrenMapped","updateHasChildren","t","map","dataItem","createNode","TOP_LEVEL","console","warn","updateRowData","rowDataTran","rowNodeOrder","rowNodeTransaction","remove","update","add","nodesToUnselect","executeRemove","executeUpdate","executeAdd","updateSelection","selectionChanged","forEach","rowNode","setSelected","updateGroupsFromChildrenSelections","dispatchEvent","type","Events","api","addIndex","newNodes","item","existingLeafChildren","nodesBeforeIndex","slice","nodesAfterIndex","rowIdsRemoved","lookupRowNode","isSelected","clearRowTopAndRowIndex","filter","updateData","selectable","setMasterForRow","data","getRowIdFunc","find","node","parent","RowNode","setDataAndId","toString","setExpanded","setMaster","expanded","rowGroupColumns","getRowGroupColumns","master","isExpanded","expandByDefault","getGroupDefaultExpanded","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","constructor","create","__","__decorate","decorators","target","key","desc","c","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","RecursionType","Normal","AfterFilter","AfterFilterAndSort","PivotNodes","ClientSideRowModel","_super","apply","init","refreshEverythingFunc","refreshModel","bind","step","ClientSideRowModelSteps","animate","isSuppressAnimationFrame","refreshEverythingAfterColsChangedFunc","afterColumnsChanged","keepRenderedRows","addManagedListener","onValueChanged","onFilterChanged","onSortChanged","refreshMapListener","GridOptionsWrapper","nodeManager","start","getRowData","ensureRowHeightsValid","startPixel","endPixel","startLimitIndex","endLimitIndex","atLeastOneChange","res","rowAtStartPixel","getRowIndexAtPixel","rowAtEndPixel","firstRow","Math","max","lastRow","min","rowIndex","getRow","rowHeightEstimated","rowHeight","getRowHeightForNode","setRowHeight","height","setRowTopAndRowIndex","defaultRowHeight","getDefaultRowHeight","nextRowTop","displayedRowsMapped","Set","allowEstimate","getDomLayout","Constants","rowsToDisplay","estimated","setRowTop","setRowIndex","changedPath","changedPathActive","isActive","clearIfNotDisplayed","has","recurse","detailNode","hasChildren","ensureRowsAtPixel","rowNodes","pixel","increment","indexAtPixelNow","rowNodeAtPixelNow","idx","keepEditingRows","highlightRowAtPixel","highlight","getHighlightPosition","lastHighlightedRow","setHighlighted","index","RowHighlightPosition","rowTop","getLastHighlightedRowNode","isLastRowIndexKnown","getRowCount","getTopLevelRowCount","getTopLevelRowDisplayedIndex","topLevelIndex","isGroupHideOpenParents","getRowBounds","onRowGroupOpened","isAnimateRows","event","afterDataChange","getType","isPivotActive","createChangePath","rowNodeTransactions","noTransactions","ChangedPath","setInactive","isSuppressModelUpdateAfterUpdateTransaction","params","transWithAddsOrDeletes","tx","doRowGrouping","groupState","doFilter","doPivot","doAggregate","doSort","doRowsToDisplay","displayedNodesMapped","newData","newPage","$scope","window","setTimeout","$apply","isEmpty","rowsMissing","isReady","isRowsToRender","getNodesInRangeForSelection","firstInRange","lastInRange","firstRowHit","lastRowHit","result","groupsSelectChildren","isGroupSelectsChildren","forEachNodeAfterFilterAndSort","lookingForLastRow","inRange","childOfLastRow","isParentOfNode","setDatasource","datasource","getTopLevelNodes","getRootNode","isRowPresent","indexOf","pixelToMatch","bottomPointer","topPointer","midPointer","floor","currentRowNode","isRowInPixel","forEachLeafNode","callback","forEachNode","recursivelyWalkNodesAndCallback","forEachNodeAfterFilter","forEachPivotNode","nodes","recursionType","nodeChildren","s","leafGroup","aggregationStage","execute","expandOrCollapseAll","expand","usingTreeData","recursiveExpandOrCollapse","source","sortStage","groupStage","restoreGroupState","filterStage","pivotStage","getGroupState","isRememberGroupStateWhenNewData","res_1","undefined","batchUpdateRowData","rowDataTransaction","applyAsyncTransactionsTimeout","rowDataTransactionBatch","waitMillis","getAsyncTransactionWaitMillis","executeBatchUpdateRowData","flushAsyncTransactions","clearTimeout","onDataChanged","callbackFuncsBound","rowNodeTrans","forceRowNodeOrder","tranItem","rowNodeTran","commonUpdateRowData","func","event_1","getApi","getColumnApi","results","createRowNodeOrder","isSuppressMaintainUnsortedOrder","orderMap","flattenStage","onRowHeightChanged","resetRowHeights","atLeastOne","Autowired","Optional","PostConstruct","Bean","BeanStub","FilterStage","filterService","selectableService","updateSelectableAfterFiltering","SortStage","sortOptions","sortController","getSortOptions","sortActive","deltaSort","isDeltaSort","dirtyLeafNodes","calculateDirtyNodes","noAggregations","getValueColumns","sortContainsGroupColumns","some","opt","column","getColDef","showRowGroup","sortService","sort","dirtyNodes","addNodesFunc","tran","FlattenStage","skipLeafNodes","isPivotMode","showRootNode","recursivelyAddToRowsToDisplay","isGroupIncludeTotalFooter","ensureFooterNodeExists","addRowNodeToRowsToDisplay","rowsToFlatten","uiLevel","hideOpenParents","groupRemoveSingleChildren","isGroupRemoveSingleChildren","groupRemoveLowestSingleChildren","isGroupRemoveLowestSingleChildren","isParent","isRemovedSingleChildrenGroup","isRemovedLowestSingleChildrenGroup","excludedParent","isGroupIncludeFooter","createDetailNode","isGroupMultiAutoColumn","setUiLevel","groupNode","footerNode","keys","footer","oldRowTop","masterNode","detail","SortService","postSortFunc","getPostSortFunc","groupMaintainOrder","isGroupMaintainOrder","groupColumnsPresent","getAllGridColumns","isRowGroupActive","forEachChangedNodeDepthFirst","pullDownGroupDataForHideOpenParents","doDeltaSort","rowNodeSorter","doFullSort","updateChildIndexes","updateGroupDataForHideOpenParents","mapNodeToSortedNode","pos","currentPos","cleanNodes","passesDirtyNodesCheck","passesChangedPathCheck","canSkip","cleanNodesMapped","sortedRowNode","changedNodes","compareRowNodes","mergeSortedArrays","arr1","arr2","j","compareResult","listToSort","child","lastChild","setFirstChild","setLastChild","setChildIndex","executeFromRootNode","clearOperation","childRowNode","getGroupDisplayColumns","groupDisplayCol","rowGroupColumn","getPrimaryColumn","setGroupValue","getId","parentToStealFrom","getFirstChildOfFirstChild","FilterService","filterActive","filterManager","isAnyFilterPresent","filterNodes","filterCallback","includeChildNodes","childNode","passBecauseChildren","passBecauseDataPasses","doesRowPassFilter","setAllChildrenCount","doingTreeDataFiltering","treeDataDepthFirstFilter_1","alreadyFoundInParent","foundInParent","setAllChildrenCountTreeData","allChildrenCount","setAllChildrenCountGridGrouping","isExcludeChildrenWhenTreeDataFiltering","ImmutableService","rowModel","clientSideRowModel","isImmutableData","transactionAndMap","createTransactionForRowData","_a","nodeTransaction","rowRenderer","refreshFullWidthRows","transaction","existingNodesMap","existingNode","ClientSideRowModelModule","moduleName","ModuleNames","rowModels","clientSide","InfiniteBlock","parentCache","startRow","blockSize","endRow","createRowNodes","getBlockStateJson","state","blockNumber","getStartRow","getEndRow","pageStatus","getState","alreadyRendered","loadFromDatasource","createLoadParams","getRows","processServerFail","successCallback","pageLoaded","getVersion","failCallback","pageLoadFailed","sortModel","filterModel","context","getContext","sequence","rowCount","getLastAccessed","lastAccessed","dontTouchLastAccessed","lastAccessedSequence","processServerResult","destroyRowNodes","PreDestroy","RowNodeBlock","__param","paramIndex","decorator","InfiniteCache","lastRowIndexKnown","blocks","blockCount","initialRowCount","setBeans","loggerFactory","logger","dontCreatePage","blockId","block","createBlock","newBlock","createBean","purgeBlocksIfNeeded","rowNodeBlockLoader","addBlock","refreshCache","purgeCache","getBlocksInOrder","setStateWaitingToLoad","checkBlockToLoad","destroyAllBlocks","destroyBlock","isAlive","log","checkRowCount","onCacheUpdated","blockToExclude","blocksForPurging","a","maxBlocksProvided","maxBlocksInCache","blocksToKeep","emptyBlocksToKeep","MAX_EMPTY_BLOCKS_TO_KEEP","isBlockCurrentlyDisplayed","isBlockFocused","removeBlockFromCache","focusedCell","focusService","getFocusCellToUseAfterRefresh","rowPinned","blockIndexStart","blockIndexEnd","startIndex","endIndex","isRangeInRenderedViewport","blockToRemove","lastRowIndexPlusOverflow","overflowSize","setRowCount","forEachNodeDeep","NumberSequence","destroyBean","removeBlock","destroyAllBlocksPastVirtualRowCount","blocksToDestroy","getRowNodesInRange","lastBlockId","inActiveRange","numberSequence","foundGapInSelection","hitFirstOrLast","Qualifier","InfiniteRowModel","isRowModelInfinite","getRowHeightAsNumber","addEventListeners","addDestroyFunc","destroyCache","verifyProps","getDefaultGroupOrderComparator","getDatasource","destroyDatasource","datasourceChanged","onColumnEverything","reset","cacheParams","isSortModelDifferent","getSortModel","infiniteCache","resetCache","createModelUpdatedEvent","getFilterModel","defaultIfInvalid","getInfiniteInitialRowCount","getMaxBlocksInCache","getCacheOverflowSize","getCacheBlockSize","defaultValue","rowIndexForPixel","lastRowIndex","InfiniteRowModelModule","infinite","BaseCreator","getFileName","fileName","extension","getDefaultFileExtension","getDefaultFileName","getData","serializingSession","createSerializingSession","gridSerializer","serialize","BaseGridSerializingSession","config","groupColumns","valueService","processCellCallback","processHeaderCallback","processGroupHeaderCallback","processRowGroupCallback","prepare","columnsToExport","col","extractHeaderValue","getHeaderName","extractRowCellValue","accumulatedRowIndex","valueForCell","groupIndex","rowGroupIndex","isGroupUseEntireRow","createValueForGroupNode","getValue","processCell","getDisplayNameForColumn","reverse","join","Downloader","download","content","win","document","defaultView","element","createElement","url","URL","createObjectURL","setAttribute","style","display","body","appendChild","MouseEvent","bubbles","cancelable","view","removeChild","revokeObjectURL","CsvSerializingSession","isFirstLine","columnSeparator","suppressQuotes","addCustomContent","test","beginNewLine","replace","row","cell","putInQuotes","mergeAcross","appendEmptyCells","onNewHeaderGroupingRow","onColumn","onNewHeaderGroupingRowColumn","header","span","count","onNewHeaderRow","onNewHeaderRowColumn","onNewBodyRow","onNewBodyRowColumn","stringValue","parse","CsvCreator","getMergedParams","baseParams","getDefaultExportParams","assign","export","userParams","isExportSuppressed","mergedParams","packagedFile","Blob","exportDataAsCsv","getDataAsCsv","isSuppressCsvExport","GridSerializer","gridSerializingSession","getColumnsToExport","allColumns","columnKeys","prepareSession","prependContent","exportColumnGroups","exportHeaders","processPinnedTopRows","processRows","processPinnedBottomRows","appendContent","serializeChain","processRow","rowSkipper","shouldRowBeSkipped","skipSingleChildrenGroup","skipLowestSingleChildrenGroup","isLeafNode","shouldSkipCurrentGroup","skipGroups","skipRowGroups","rowPosition","onlySelected","position","rowPositionUtils","sameRow","skipPinnedTop","skipPinnedBottom","rowAccumulator","getCustomContentBelowRow","customFooter","customHeader","skipColumnGroupHeaders","columnGroups","groupInstanceIdCreator","GroupInstanceIdCreator","displayedGroups","displayedGroupCreator","createDisplayedGroups","getGridBalancedTree","recursivelyAddHeaderGroups","skipHeader","skipColumnHeaders","gridRowIterator_1","pinnedRowModel","forEachPinnedTopRow","rowModelType","usingCsrm","usingSsrm","onlySelectedNonStandardModel","onlySelectedAllPages","getSelectedNodes","forEachPinnedBottomRow","getGridColumns","getAllPrimaryColumns","getAllDisplayedColumns","directChildrenHeaderGroups","columnGroupChild","getChildren","it","ColumnGroup","doAddHeaderHeader","gridRowIterator","columnIndex","name","columnGroup","getDisplayNameForColumnGroup","collapsibleGroupRanges","getLeafColumns","reduce","collapsibleGroups","currentColumn","currentIdx","arr","lastGroup","getColumnGroupShow","CsvExportModule","LINE_SEPARATOR","crcTable","XmlFactory","createHeader","headerElement","version","encoding","standalone","headerStart","createXml","xmlElement","booleanTransformer","props","properties","prefixedAttributes","prefixedSet","returnAttributeIfPopulated","prefix","rawMap","children","textNode","xmlValue","Uint32Array","AllCommunityModules","ZipContainer","addFolders","paths","addFolder","path","folders","created","Date","isBase64","addFile","files","getContent","mimeType","textOutput","buildFileStream","uInt8Output","buildUint8Array","clearStream","fData","e_1","totalFiles","len","foData","lL","cL","totalFiles_1","TypeError","__values","totalFiles_1_1","_b","getHeader","fileHeader","folderHeader","e_1_1","buildFolderEnd","currentFile","offset","decToHex","utfPath","utf8_encode","isUTF8","time","convertTime","dt","convertDate","extraFields","uExtraFieldPath","getFromCrc32Table","getConvertedContent","size","convertedContent","split","atob","tLen","cLen","lLen","uint8","Uint8Array","charCodeAt","iterable","crc","date","getHours","getMinutes","getSeconds","getFullYear","getMonth","getDate"],"sources":["./projects/ng-dialogs/src/app/shared/constants/default-grid-options.constants.ts","./node_modules/@ag-grid-community/client-side-row-model/dist/esm/es5/clientSideRowModel/clientSideRowModel.js","./node_modules/@ag-grid-community/client-side-row-model/dist/esm/es5/clientSideRowModel/clientSideNodeManager.js","./node_modules/@ag-grid-community/client-side-row-model/dist/esm/es5/clientSideRowModel/filterStage.js","./node_modules/@ag-grid-community/client-side-row-model/dist/esm/es5/clientSideRowModel/sortStage.js","./node_modules/@ag-grid-community/client-side-row-model/dist/esm/es5/clientSideRowModel/flattenStage.js","./node_modules/@ag-grid-community/client-side-row-model/dist/esm/es5/clientSideRowModel/sortService.js","./node_modules/@ag-grid-community/client-side-row-model/dist/esm/es5/clientSideRowModel/filterService.js","./node_modules/@ag-grid-community/client-side-row-model/dist/esm/es5/clientSideRowModel/immutableService.js","./node_modules/@ag-grid-community/client-side-row-model/dist/esm/es5/clientSideRowModelModule.js","./node_modules/@ag-grid-community/infinite-row-model/dist/esm/es5/infiniteRowModel/infiniteBlock.js","./node_modules/@ag-grid-community/infinite-row-model/dist/esm/es5/infiniteRowModel/infiniteCache.js","./node_modules/@ag-grid-community/infinite-row-model/dist/esm/es5/infiniteRowModel/infiniteRowModel.js","./node_modules/@ag-grid-community/infinite-row-model/dist/esm/es5/infiniteRowModelModule.js","./node_modules/@ag-grid-community/csv-export/dist/esm/es5/csvExport/baseCreator.js","./node_modules/@ag-grid-community/csv-export/dist/esm/es5/csvExport/sessions/baseGridSerializingSession.js","./node_modules/@ag-grid-community/csv-export/dist/esm/es5/csvExport/downloader.js","./node_modules/@ag-grid-community/csv-export/dist/esm/es5/csvExport/sessions/csvSerializingSession.js","./node_modules/@ag-grid-community/csv-export/dist/esm/es5/csvExport/csvCreator.js","./node_modules/@ag-grid-community/csv-export/dist/esm/es5/csvExport/gridSerializer.js","./node_modules/@ag-grid-community/csv-export/dist/esm/es5/csvExportModule.js","./node_modules/@ag-grid-community/csv-export/dist/esm/es5/csvExport/xmlFactory.js","./node_modules/@ag-grid-community/csv-export/dist/esm/es5/csvExport/zipContainer.js","./node_modules/@ag-grid-community/all-modules/dist/esm/es5/main.js"],"sourcesContent":["import { GridOptions } from '@ag-grid-community/all-modules';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  suppressMovableColumns: true,\r\n};\r\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, ChangedPath, Constants, Events, GridOptionsWrapper, Optional, PostConstruct, ClientSideRowModelSteps, RowNode, RowHighlightPosition } from \"@ag-grid-community/core\";\nimport { ClientSideNodeManager } from \"./clientSideNodeManager\";\nvar RecursionType;\n(function (RecursionType) {\n    RecursionType[RecursionType[\"Normal\"] = 0] = \"Normal\";\n    RecursionType[RecursionType[\"AfterFilter\"] = 1] = \"AfterFilter\";\n    RecursionType[RecursionType[\"AfterFilterAndSort\"] = 2] = \"AfterFilterAndSort\";\n    RecursionType[RecursionType[\"PivotNodes\"] = 3] = \"PivotNodes\";\n})(RecursionType || (RecursionType = {}));\nvar ClientSideRowModel = /** @class */ (function (_super) {\n    __extends(ClientSideRowModel, _super);\n    function ClientSideRowModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ClientSideRowModel.prototype.init = function () {\n        var refreshEverythingFunc = this.refreshModel.bind(this, { step: ClientSideRowModelSteps.EVERYTHING });\n        var animate = !this.gridOptionsWrapper.isSuppressAnimationFrame();\n        var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {\n            step: ClientSideRowModelSteps.EVERYTHING,\n            afterColumnsChanged: true,\n            keepRenderedRows: true,\n            animate: animate\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refreshEverythingAfterColsChangedFunc);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: ClientSideRowModelSteps.PIVOT }));\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);\n        var refreshMapListener = this.refreshModel.bind(this, {\n            step: ClientSideRowModelSteps.MAP,\n            keepRenderedRows: true,\n            animate: animate\n        });\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapListener);\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapListener);\n        this.rootNode = new RowNode(this.beans);\n        this.nodeManager = new ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.eventService, this.columnModel, this.gridApi, this.columnApi, this.selectionService, this.beans);\n    };\n    ClientSideRowModel.prototype.start = function () {\n        var rowData = this.gridOptionsWrapper.getRowData();\n        if (rowData) {\n            this.setRowData(rowData);\n        }\n    };\n    ClientSideRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n        var atLeastOneChange;\n        var res = false;\n        // we do this multiple times as changing the row heights can also change the first and last rows,\n        // so the first pass can make lots of rows smaller, which means the second pass we end up changing\n        // more rows.\n        do {\n            atLeastOneChange = false;\n            var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\n            var rowAtEndPixel = this.getRowIndexAtPixel(endPixel);\n            // keep check to current page if doing pagination\n            var firstRow = Math.max(rowAtStartPixel, startLimitIndex);\n            var lastRow = Math.min(rowAtEndPixel, endLimitIndex);\n            for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n                var rowNode = this.getRow(rowIndex);\n                if (rowNode.rowHeightEstimated) {\n                    var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);\n                    rowNode.setRowHeight(rowHeight.height);\n                    atLeastOneChange = true;\n                    res = true;\n                }\n            }\n            if (atLeastOneChange) {\n                this.setRowTopAndRowIndex();\n            }\n        } while (atLeastOneChange);\n        return res;\n    };\n    ClientSideRowModel.prototype.setRowTopAndRowIndex = function () {\n        var defaultRowHeight = this.gridOptionsWrapper.getDefaultRowHeight();\n        var nextRowTop = 0;\n        // mapping displayed rows is not needed for this method, however it's used in\n        // clearRowTopAndRowIndex(), and given we are looping through this.rowsToDisplay here,\n        // we create the map here for performance reasons, so we don't loop a second time\n        // in clearRowTopAndRowIndex()\n        var displayedRowsMapped = new Set();\n        // we don't estimate if doing fullHeight or autoHeight, as all rows get rendered all the time\n        // with these two layouts.\n        var allowEstimate = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;\n        for (var i = 0; i < this.rowsToDisplay.length; i++) {\n            var rowNode = this.rowsToDisplay[i];\n            if (rowNode.id != null) {\n                displayedRowsMapped.add(rowNode.id);\n            }\n            if (rowNode.rowHeight == null) {\n                var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode, allowEstimate, defaultRowHeight);\n                rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\n            }\n            rowNode.setRowTop(nextRowTop);\n            rowNode.setRowIndex(i);\n            nextRowTop += rowNode.rowHeight;\n        }\n        return displayedRowsMapped;\n    };\n    ClientSideRowModel.prototype.clearRowTopAndRowIndex = function (changedPath, displayedRowsMapped) {\n        var changedPathActive = changedPath.isActive();\n        var clearIfNotDisplayed = function (rowNode) {\n            if (rowNode && rowNode.id != null && !displayedRowsMapped.has(rowNode.id)) {\n                rowNode.clearRowTopAndRowIndex();\n            }\n        };\n        var recurse = function (rowNode) {\n            clearIfNotDisplayed(rowNode);\n            clearIfNotDisplayed(rowNode.detailNode);\n            clearIfNotDisplayed(rowNode.sibling);\n            if (rowNode.hasChildren()) {\n                if (rowNode.childrenAfterGroup) {\n                    // if a changedPath is active, it means we are here because of a transaction update or\n                    // a change detection. neither of these impacts the open/closed state of groups. so if\n                    // a group is not open this time, it was not open last time. so we know all closed groups\n                    // already have their top positions cleared. so there is no need to traverse all the way\n                    // when changedPath is active and the rowNode is not expanded.\n                    var isRootNode = rowNode.level == -1; // we need to give special consideration for root node,\n                    // as expanded=undefined for root node\n                    var skipChildren = changedPathActive && !isRootNode && !rowNode.expanded;\n                    if (!skipChildren) {\n                        rowNode.childrenAfterGroup.forEach(recurse);\n                    }\n                }\n            }\n        };\n        recurse(this.rootNode);\n    };\n    // returns false if row was moved, otherwise true\n    ClientSideRowModel.prototype.ensureRowsAtPixel = function (rowNodes, pixel, increment) {\n        var _this = this;\n        if (increment === void 0) { increment = 0; }\n        var indexAtPixelNow = this.getRowIndexAtPixel(pixel);\n        var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\n        var animate = !this.gridOptionsWrapper.isSuppressAnimationFrame();\n        if (rowNodeAtPixelNow === rowNodes[0]) {\n            return false;\n        }\n        rowNodes.forEach(function (rowNode) {\n            _.removeFromArray(_this.rootNode.allLeafChildren, rowNode);\n        });\n        rowNodes.forEach(function (rowNode, idx) {\n            _.insertIntoArray(_this.rootNode.allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);\n        });\n        this.refreshModel({\n            step: ClientSideRowModelSteps.EVERYTHING,\n            keepRenderedRows: true,\n            keepEditingRows: true,\n            animate: animate\n        });\n        return true;\n    };\n    ClientSideRowModel.prototype.highlightRowAtPixel = function (rowNode, pixel) {\n        var indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;\n        var rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;\n        if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {\n            if (this.lastHighlightedRow) {\n                this.lastHighlightedRow.setHighlighted(null);\n                this.lastHighlightedRow = null;\n            }\n            return;\n        }\n        var highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);\n        if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {\n            this.lastHighlightedRow.setHighlighted(null);\n            this.lastHighlightedRow = null;\n        }\n        rowNodeAtPixelNow.setHighlighted(highlight);\n        this.lastHighlightedRow = rowNodeAtPixelNow;\n    };\n    ClientSideRowModel.prototype.getHighlightPosition = function (pixel, rowNode) {\n        if (!rowNode) {\n            var index = this.getRowIndexAtPixel(pixel);\n            rowNode = this.getRow(index || 0);\n            if (!rowNode) {\n                return RowHighlightPosition.Below;\n            }\n        }\n        var rowTop = rowNode.rowTop, rowHeight = rowNode.rowHeight;\n        return pixel - rowTop < rowHeight / 2 ? RowHighlightPosition.Above : RowHighlightPosition.Below;\n    };\n    ClientSideRowModel.prototype.getLastHighlightedRowNode = function () {\n        return this.lastHighlightedRow;\n    };\n    ClientSideRowModel.prototype.isLastRowIndexKnown = function () {\n        return true;\n    };\n    ClientSideRowModel.prototype.getRowCount = function () {\n        if (this.rowsToDisplay) {\n            return this.rowsToDisplay.length;\n        }\n        return 0;\n    };\n    ClientSideRowModel.prototype.getTopLevelRowCount = function () {\n        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n        if (showingRootNode) {\n            return 1;\n        }\n        return this.rootNode.childrenAfterFilter ? this.rootNode.childrenAfterFilter.length : 0;\n    };\n    ClientSideRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n        if (showingRootNode) {\n            return topLevelIndex;\n        }\n        var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];\n        if (this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            // if hideOpenParents, and this row open, then this row is now displayed at this index, first child is\n            while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\n                rowNode = rowNode.childrenAfterSort[0];\n            }\n        }\n        return rowNode.rowIndex;\n    };\n    ClientSideRowModel.prototype.getRowBounds = function (index) {\n        if (_.missing(this.rowsToDisplay)) {\n            return null;\n        }\n        var rowNode = this.rowsToDisplay[index];\n        if (rowNode) {\n            return {\n                rowTop: rowNode.rowTop,\n                rowHeight: rowNode.rowHeight\n            };\n        }\n        return null;\n    };\n    ClientSideRowModel.prototype.onRowGroupOpened = function () {\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, animate: animate });\n    };\n    ClientSideRowModel.prototype.onFilterChanged = function (event) {\n        if (event.afterDataChange) {\n            return;\n        }\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: ClientSideRowModelSteps.FILTER, keepRenderedRows: true, animate: animate });\n    };\n    ClientSideRowModel.prototype.onSortChanged = function () {\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: ClientSideRowModelSteps.SORT, keepRenderedRows: true, animate: animate, keepEditingRows: true });\n    };\n    ClientSideRowModel.prototype.getType = function () {\n        return Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n    };\n    ClientSideRowModel.prototype.onValueChanged = function () {\n        if (this.columnModel.isPivotActive()) {\n            this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });\n        }\n        else {\n            this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });\n        }\n    };\n    ClientSideRowModel.prototype.createChangePath = function (rowNodeTransactions) {\n        // for updates, if the row is updated at all, then we re-calc all the values\n        // in that row. we could compare each value to each old value, however if we\n        // did this, we would be calling the valueService twice, once on the old value\n        // and once on the new value. so it's less valueGetter calls if we just assume\n        // each column is different. that way the changedPath is used so that only\n        // the impacted parent rows are recalculated, parents who's children have\n        // not changed are not impacted.\n        var noTransactions = _.missingOrEmpty(rowNodeTransactions);\n        var changedPath = new ChangedPath(false, this.rootNode);\n        if (noTransactions || this.gridOptionsWrapper.isTreeData()) {\n            changedPath.setInactive();\n        }\n        return changedPath;\n    };\n    ClientSideRowModel.prototype.isSuppressModelUpdateAfterUpdateTransaction = function (params) {\n        if (!this.gridOptionsWrapper.isSuppressModelUpdateAfterUpdateTransaction()) {\n            return false;\n        }\n        // return true if we are only doing update transactions\n        if (params.rowNodeTransactions == null) {\n            return false;\n        }\n        var transWithAddsOrDeletes = params.rowNodeTransactions.filter(function (tx) {\n            return (tx.add != null && tx.add.length > 0) || (tx.remove != null && tx.remove.length > 0);\n        });\n        var transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;\n        return transactionsContainUpdatesOnly;\n    };\n    ClientSideRowModel.prototype.refreshModel = function (params) {\n        var _this = this;\n        if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {\n            return;\n        }\n        // this goes through the pipeline of stages. what's in my head is similar\n        // to the diagram on this page:\n        // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html\n        // however we want to keep the results of each stage, hence we manually call\n        // each step rather than have them chain each other.\n        // fallthrough in below switch is on purpose,\n        // eg if STEP_FILTER, then all steps below this\n        // step get done\n        // let start: number;\n        // console.log('======= start =======');\n        var changedPath = this.createChangePath(params.rowNodeTransactions);\n        switch (params.step) {\n            case ClientSideRowModelSteps.EVERYTHING:\n                this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, !!params.afterColumnsChanged);\n            case ClientSideRowModelSteps.FILTER:\n                this.doFilter(changedPath);\n            case ClientSideRowModelSteps.PIVOT:\n                this.doPivot(changedPath);\n            case ClientSideRowModelSteps.AGGREGATE: // depends on agg fields\n                this.doAggregate(changedPath);\n            case ClientSideRowModelSteps.SORT:\n                this.doSort(params.rowNodeTransactions, changedPath);\n            case ClientSideRowModelSteps.MAP:\n                this.doRowsToDisplay();\n        }\n        // set all row tops to null, then set row tops on all visible rows. if we don't\n        // do this, then the algorithm below only sets row tops, old row tops from old rows\n        // will still lie around\n        var displayedNodesMapped = this.setRowTopAndRowIndex();\n        this.clearRowTopAndRowIndex(changedPath, displayedNodesMapped);\n        var event = {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            animate: params.animate,\n            keepRenderedRows: params.keepRenderedRows,\n            newData: params.newData,\n            newPage: false\n        };\n        this.eventService.dispatchEvent(event);\n        if (this.$scope) {\n            window.setTimeout(function () {\n                _this.$scope.$apply();\n            }, 0);\n        }\n    };\n    ClientSideRowModel.prototype.isEmpty = function () {\n        var rowsMissing = _.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;\n        return _.missing(this.rootNode) || rowsMissing || !this.columnModel.isReady();\n    };\n    ClientSideRowModel.prototype.isRowsToRender = function () {\n        return _.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;\n    };\n    ClientSideRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        // if lastSelectedNode is missing, we start at the first row\n        var firstRowHit = !lastInRange;\n        var lastRowHit = false;\n        var lastRow;\n        var result = [];\n        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        this.forEachNodeAfterFilterAndSort(function (rowNode) {\n            var lookingForLastRow = firstRowHit && !lastRowHit;\n            // check if we need to flip the select switch\n            if (!firstRowHit) {\n                if (rowNode === lastInRange || rowNode === firstInRange) {\n                    firstRowHit = true;\n                }\n            }\n            var skipThisGroupNode = rowNode.group && groupsSelectChildren;\n            if (!skipThisGroupNode) {\n                var inRange = firstRowHit && !lastRowHit;\n                var childOfLastRow = rowNode.isParentOfNode(lastRow);\n                if (inRange || childOfLastRow) {\n                    result.push(rowNode);\n                }\n            }\n            if (lookingForLastRow) {\n                if (rowNode === lastInRange || rowNode === firstInRange) {\n                    lastRowHit = true;\n                    if (rowNode === lastInRange) {\n                        lastRow = lastInRange;\n                    }\n                    else {\n                        lastRow = firstInRange;\n                    }\n                }\n            }\n        });\n        return result;\n    };\n    ClientSideRowModel.prototype.setDatasource = function (datasource) {\n        console.error('AG Grid: should never call setDatasource on clientSideRowController');\n    };\n    ClientSideRowModel.prototype.getTopLevelNodes = function () {\n        return this.rootNode ? this.rootNode.childrenAfterGroup : null;\n    };\n    ClientSideRowModel.prototype.getRootNode = function () {\n        return this.rootNode;\n    };\n    ClientSideRowModel.prototype.getRow = function (index) {\n        return this.rowsToDisplay[index];\n    };\n    ClientSideRowModel.prototype.isRowPresent = function (rowNode) {\n        return this.rowsToDisplay.indexOf(rowNode) >= 0;\n    };\n    ClientSideRowModel.prototype.getRowIndexAtPixel = function (pixelToMatch) {\n        if (this.isEmpty()) {\n            return -1;\n        }\n        // do binary search of tree\n        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/\n        var bottomPointer = 0;\n        var topPointer = this.rowsToDisplay.length - 1;\n        // quick check, if the pixel is out of bounds, then return last row\n        if (pixelToMatch <= 0) {\n            // if pixel is less than or equal zero, it's always the first row\n            return 0;\n        }\n        var lastNode = _.last(this.rowsToDisplay);\n        if (lastNode.rowTop <= pixelToMatch) {\n            return this.rowsToDisplay.length - 1;\n        }\n        while (true) {\n            var midPointer = Math.floor((bottomPointer + topPointer) / 2);\n            var currentRowNode = this.rowsToDisplay[midPointer];\n            if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\n                return midPointer;\n            }\n            if (currentRowNode.rowTop < pixelToMatch) {\n                bottomPointer = midPointer + 1;\n            }\n            else if (currentRowNode.rowTop > pixelToMatch) {\n                topPointer = midPointer - 1;\n            }\n        }\n    };\n    ClientSideRowModel.prototype.isRowInPixel = function (rowNode, pixelToMatch) {\n        var topPixel = rowNode.rowTop;\n        var bottomPixel = rowNode.rowTop + rowNode.rowHeight;\n        var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;\n        return pixelInRow;\n    };\n    ClientSideRowModel.prototype.forEachLeafNode = function (callback) {\n        if (this.rootNode.allLeafChildren) {\n            this.rootNode.allLeafChildren.forEach(function (rowNode, index) { return callback(rowNode, index); });\n        }\n    };\n    ClientSideRowModel.prototype.forEachNode = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);\n    };\n    ClientSideRowModel.prototype.forEachNodeAfterFilter = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);\n    };\n    ClientSideRowModel.prototype.forEachNodeAfterFilterAndSort = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);\n    };\n    ClientSideRowModel.prototype.forEachPivotNode = function (callback) {\n        this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);\n    };\n    // iterates through each item in memory, and calls the callback function\n    // nodes - the rowNodes to traverse\n    // callback - the user provided callback\n    // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\n    // index - works similar to the index in forEach in javascript's array function\n    ClientSideRowModel.prototype.recursivelyWalkNodesAndCallback = function (nodes, callback, recursionType, index) {\n        if (!nodes) {\n            return index;\n        }\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            callback(node, index++);\n            // go to the next level if it is a group\n            if (node.hasChildren()) {\n                // depending on the recursion type, we pick a difference set of children\n                var nodeChildren = null;\n                switch (recursionType) {\n                    case RecursionType.Normal:\n                        nodeChildren = node.childrenAfterGroup;\n                        break;\n                    case RecursionType.AfterFilter:\n                        nodeChildren = node.childrenAfterFilter;\n                        break;\n                    case RecursionType.AfterFilterAndSort:\n                        nodeChildren = node.childrenAfterSort;\n                        break;\n                    case RecursionType.PivotNodes:\n                        // for pivot, we don't go below leafGroup levels\n                        nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\n                        break;\n                }\n                if (nodeChildren) {\n                    index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);\n                }\n            }\n        }\n        return index;\n    };\n    // it's possible to recompute the aggregate without doing the other parts\n    // + gridApi.recomputeAggregates()\n    ClientSideRowModel.prototype.doAggregate = function (changedPath) {\n        if (this.aggregationStage) {\n            this.aggregationStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n        }\n    };\n    // + gridApi.expandAll()\n    // + gridApi.collapseAll()\n    ClientSideRowModel.prototype.expandOrCollapseAll = function (expand) {\n        var usingTreeData = this.gridOptionsWrapper.isTreeData();\n        if (this.rootNode) {\n            recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);\n        }\n        function recursiveExpandOrCollapse(rowNodes) {\n            if (!rowNodes) {\n                return;\n            }\n            rowNodes.forEach(function (rowNode) {\n                var shouldExpandOrCollapse = usingTreeData ? _.exists(rowNode.childrenAfterGroup) : rowNode.group;\n                if (shouldExpandOrCollapse) {\n                    rowNode.expanded = expand;\n                    recursiveExpandOrCollapse(rowNode.childrenAfterGroup);\n                }\n            });\n        }\n        this.refreshModel({ step: ClientSideRowModelSteps.MAP });\n        var eventSource = expand ? 'expandAll' : 'collapseAll';\n        var event = {\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            type: Events.EVENT_EXPAND_COLLAPSE_ALL,\n            source: eventSource\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ClientSideRowModel.prototype.doSort = function (rowNodeTransactions, changedPath) {\n        this.sortStage.execute({\n            rowNode: this.rootNode,\n            rowNodeTransactions: rowNodeTransactions,\n            changedPath: changedPath\n        });\n    };\n    ClientSideRowModel.prototype.doRowGrouping = function (groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {\n        if (this.groupStage) {\n            if (rowNodeTransactions) {\n                this.groupStage.execute({\n                    rowNode: this.rootNode,\n                    rowNodeTransactions: rowNodeTransactions,\n                    rowNodeOrder: rowNodeOrder,\n                    changedPath: changedPath\n                });\n            }\n            else {\n                this.groupStage.execute({\n                    rowNode: this.rootNode,\n                    changedPath: changedPath,\n                    afterColumnsChanged: afterColumnsChanged\n                });\n                // set open/closed state on groups\n                this.restoreGroupState(groupState);\n            }\n            if (this.gridOptionsWrapper.isGroupSelectsChildren()) {\n                this.selectionService.updateGroupsFromChildrenSelections(changedPath);\n            }\n        }\n        else {\n            this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;\n            if (this.rootNode.sibling) {\n                this.rootNode.sibling.childrenAfterGroup = this.rootNode.childrenAfterGroup;\n            }\n            this.rootNode.updateHasChildren();\n        }\n    };\n    ClientSideRowModel.prototype.restoreGroupState = function (groupState) {\n        if (!groupState) {\n            return;\n        }\n        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {\n            // if the group was open last time, then open it this time. however\n            // if was not open last time, then don't touch the group, so the 'groupDefaultExpanded'\n            // setting will take effect.\n            if (typeof groupState[key] === 'boolean') {\n                node.expanded = groupState[key];\n            }\n        });\n    };\n    ClientSideRowModel.prototype.doFilter = function (changedPath) {\n        this.filterStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n    };\n    ClientSideRowModel.prototype.doPivot = function (changedPath) {\n        if (this.pivotStage) {\n            this.pivotStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n        }\n    };\n    ClientSideRowModel.prototype.getGroupState = function () {\n        if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {\n            return null;\n        }\n        var result = {};\n        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) { return result[key] = node.expanded; });\n        return result;\n    };\n    ClientSideRowModel.prototype.getCopyOfNodesMap = function () {\n        return this.nodeManager.getCopyOfNodesMap();\n    };\n    ClientSideRowModel.prototype.getRowNode = function (id) {\n        // although id is typed a string, this could be called by the user, and they could have passed a number\n        var idIsGroup = typeof id == 'string' && id.indexOf(RowNode.ID_PREFIX_ROW_GROUP) == 0;\n        if (idIsGroup) {\n            // only one users complained about getRowNode not working for groups, after years of\n            // this working for normal rows. so have done quick implementation. if users complain\n            // about performance, then GroupStage should store / manage created groups in a map,\n            // which is a chunk of work.\n            var res_1 = undefined;\n            this.forEachNode(function (node) {\n                if (node.id === id) {\n                    res_1 = node;\n                }\n            });\n            return res_1;\n        }\n        else {\n            return this.nodeManager.getRowNode(id);\n        }\n    };\n    // rows: the rows to put into the model\n    ClientSideRowModel.prototype.setRowData = function (rowData) {\n        // no need to invalidate cache, as the cache is stored on the rowNode,\n        // so new rowNodes means the cache is wiped anyway.\n        // remember group state, so we can expand groups that should be expanded\n        var groupState = this.getGroupState();\n        this.nodeManager.setRowData(rowData);\n        // this event kicks off:\n        // - clears selection\n        // - updates filters\n        // - shows 'no rows' overlay if needed\n        var rowDataChangedEvent = {\n            type: Events.EVENT_ROW_DATA_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(rowDataChangedEvent);\n        this.refreshModel({\n            step: ClientSideRowModelSteps.EVERYTHING,\n            groupState: groupState,\n            newData: true\n        });\n    };\n    ClientSideRowModel.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {\n        var _this = this;\n        if (this.applyAsyncTransactionsTimeout == null) {\n            this.rowDataTransactionBatch = [];\n            var waitMillis = this.gridOptionsWrapper.getAsyncTransactionWaitMillis();\n            this.applyAsyncTransactionsTimeout = window.setTimeout(function () {\n                _this.executeBatchUpdateRowData();\n            }, waitMillis);\n        }\n        this.rowDataTransactionBatch.push({ rowDataTransaction: rowDataTransaction, callback: callback });\n    };\n    ClientSideRowModel.prototype.flushAsyncTransactions = function () {\n        if (this.applyAsyncTransactionsTimeout != null) {\n            clearTimeout(this.applyAsyncTransactionsTimeout);\n            this.executeBatchUpdateRowData();\n        }\n    };\n    ClientSideRowModel.prototype.executeBatchUpdateRowData = function () {\n        var _this = this;\n        this.valueCache.onDataChanged();\n        var callbackFuncsBound = [];\n        var rowNodeTrans = [];\n        // The rowGroup stage uses rowNodeOrder if order was provided. if we didn't pass 'true' to\n        // commonUpdateRowData, using addIndex would have no effect when grouping.\n        var forceRowNodeOrder = false;\n        if (this.rowDataTransactionBatch) {\n            this.rowDataTransactionBatch.forEach(function (tranItem) {\n                var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, undefined);\n                rowNodeTrans.push(rowNodeTran);\n                if (tranItem.callback) {\n                    callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));\n                }\n                if (typeof tranItem.rowDataTransaction.addIndex === 'number') {\n                    forceRowNodeOrder = true;\n                }\n            });\n        }\n        this.commonUpdateRowData(rowNodeTrans, undefined, forceRowNodeOrder);\n        // do callbacks in next VM turn so it's async\n        if (callbackFuncsBound.length > 0) {\n            window.setTimeout(function () {\n                callbackFuncsBound.forEach(function (func) { return func(); });\n            }, 0);\n        }\n        if (rowNodeTrans.length > 0) {\n            var event_1 = {\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                type: Events.EVENT_ASYNC_TRANSACTIONS_FLUSHED,\n                results: rowNodeTrans\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n        this.rowDataTransactionBatch = null;\n        this.applyAsyncTransactionsTimeout = undefined;\n    };\n    ClientSideRowModel.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n        this.valueCache.onDataChanged();\n        var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);\n        // if doing immutableData, addIndex is never present. however if doing standard transaction, and user\n        // provided addIndex, then this is used in updateRowData. However if doing Enterprise, then the rowGroup\n        // stage also uses the\n        var forceRowNodeOrder = typeof rowDataTran.addIndex === 'number';\n        this.commonUpdateRowData([rowNodeTran], rowNodeOrder, forceRowNodeOrder);\n        return rowNodeTran;\n    };\n    ClientSideRowModel.prototype.createRowNodeOrder = function () {\n        var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();\n        if (suppressSortOrder) {\n            return;\n        }\n        var orderMap = {};\n        if (this.rootNode && this.rootNode.allLeafChildren) {\n            for (var index = 0; index < this.rootNode.allLeafChildren.length; index++) {\n                var node = this.rootNode.allLeafChildren[index];\n                orderMap[node.id] = index;\n            }\n        }\n        return orderMap;\n    };\n    // common to updateRowData and batchUpdateRowData\n    ClientSideRowModel.prototype.commonUpdateRowData = function (rowNodeTrans, rowNodeOrder, forceRowNodeOrder) {\n        var animate = !this.gridOptionsWrapper.isSuppressAnimationFrame();\n        if (forceRowNodeOrder) {\n            rowNodeOrder = this.createRowNodeOrder();\n        }\n        this.refreshModel({\n            step: ClientSideRowModelSteps.EVERYTHING,\n            rowNodeTransactions: rowNodeTrans,\n            rowNodeOrder: rowNodeOrder,\n            keepRenderedRows: true,\n            keepEditingRows: true,\n            animate: animate\n        });\n        var event = {\n            type: Events.EVENT_ROW_DATA_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ClientSideRowModel.prototype.doRowsToDisplay = function () {\n        this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });\n    };\n    ClientSideRowModel.prototype.onRowHeightChanged = function () {\n        this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, keepEditingRows: true });\n    };\n    ClientSideRowModel.prototype.resetRowHeights = function () {\n        var atLeastOne = false;\n        this.forEachNode(function (rowNode) {\n            rowNode.setRowHeight(rowNode.rowHeight, true);\n            // we keep the height each row is at, however we set estimated=true rather than clear the height.\n            // this means the grid will not reset the row heights back to defaults, rather it will re-calc\n            // the height for each row as the row is displayed. otherwise the scroll will jump when heights are reset.\n            var detailNode = rowNode.detailNode;\n            if (detailNode) {\n                detailNode.setRowHeight(detailNode.rowHeight, true);\n            }\n            atLeastOne = true;\n        });\n        if (atLeastOne) {\n            this.onRowHeightChanged();\n        }\n    };\n    __decorate([\n        Autowired('columnModel')\n    ], ClientSideRowModel.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('$scope')\n    ], ClientSideRowModel.prototype, \"$scope\", void 0);\n    __decorate([\n        Autowired('selectionService')\n    ], ClientSideRowModel.prototype, \"selectionService\", void 0);\n    __decorate([\n        Autowired('valueCache')\n    ], ClientSideRowModel.prototype, \"valueCache\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], ClientSideRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], ClientSideRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('animationFrameService')\n    ], ClientSideRowModel.prototype, \"animationFrameService\", void 0);\n    __decorate([\n        Autowired('beans')\n    ], ClientSideRowModel.prototype, \"beans\", void 0);\n    __decorate([\n        Autowired('filterStage')\n    ], ClientSideRowModel.prototype, \"filterStage\", void 0);\n    __decorate([\n        Autowired('sortStage')\n    ], ClientSideRowModel.prototype, \"sortStage\", void 0);\n    __decorate([\n        Autowired('flattenStage')\n    ], ClientSideRowModel.prototype, \"flattenStage\", void 0);\n    __decorate([\n        Optional('groupStage')\n    ], ClientSideRowModel.prototype, \"groupStage\", void 0);\n    __decorate([\n        Optional('aggregationStage')\n    ], ClientSideRowModel.prototype, \"aggregationStage\", void 0);\n    __decorate([\n        Optional('pivotStage')\n    ], ClientSideRowModel.prototype, \"pivotStage\", void 0);\n    __decorate([\n        PostConstruct\n    ], ClientSideRowModel.prototype, \"init\", null);\n    ClientSideRowModel = __decorate([\n        Bean('rowModel')\n    ], ClientSideRowModel);\n    return ClientSideRowModel;\n}(BeanStub));\nexport { ClientSideRowModel };\n","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nimport { _, Events, RowNode } from \"@ag-grid-community/core\";\nvar ClientSideNodeManager = /** @class */ (function () {\n    function ClientSideNodeManager(rootNode, gridOptionsWrapper, eventService, columnModel, gridApi, columnApi, selectionService, beans) {\n        this.nextId = 0;\n        // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n        this.allNodesMap = {};\n        this.rootNode = rootNode;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.eventService = eventService;\n        this.columnModel = columnModel;\n        this.gridApi = gridApi;\n        this.columnApi = columnApi;\n        this.beans = beans;\n        this.selectionService = selectionService;\n        this.rootNode.group = true;\n        this.rootNode.level = -1;\n        this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;\n        this.rootNode.allLeafChildren = [];\n        this.rootNode.childrenAfterGroup = [];\n        this.rootNode.childrenAfterSort = [];\n        this.rootNode.childrenAfterFilter = [];\n        // if we make this class a bean, then can annotate postConstruct\n        this.postConstruct();\n    }\n    // @PostConstruct - this is not a bean, so postConstruct called by constructor\n    ClientSideNodeManager.prototype.postConstruct = function () {\n        // func below doesn't have 'this' pointer, so need to pull out these bits\n        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();\n        this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();\n        this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();\n    };\n    ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {\n        return _.cloneObject(this.allNodesMap);\n    };\n    ClientSideNodeManager.prototype.getRowNode = function (id) {\n        return this.allNodesMap[id];\n    };\n    ClientSideNodeManager.prototype.setRowData = function (rowData) {\n        var _this = this;\n        if (typeof rowData === 'string') {\n            console.warn('AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');\n            return;\n        }\n        var rootNode = this.rootNode;\n        var sibling = this.rootNode.sibling;\n        rootNode.childrenAfterFilter = null;\n        rootNode.childrenAfterGroup = null;\n        rootNode.childrenAfterSort = null;\n        rootNode.childrenMapped = null;\n        rootNode.updateHasChildren();\n        this.nextId = 0;\n        this.allNodesMap = {};\n        if (rowData) {\n            // we use rootNode as the parent, however if using ag-grid-enterprise, the grouping stage\n            // sets the parent node on each row (even if we are not grouping). so setting parent node\n            // here is for benefit of ag-grid-community users\n            rootNode.allLeafChildren = rowData.map(function (dataItem) { return _this.createNode(dataItem, _this.rootNode, ClientSideNodeManager.TOP_LEVEL); });\n        }\n        else {\n            rootNode.allLeafChildren = [];\n            rootNode.childrenAfterGroup = [];\n        }\n        if (sibling) {\n            sibling.childrenAfterFilter = rootNode.childrenAfterFilter;\n            sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n            sibling.childrenAfterSort = rootNode.childrenAfterSort;\n            sibling.childrenMapped = rootNode.childrenMapped;\n            sibling.allLeafChildren = rootNode.allLeafChildren;\n        }\n    };\n    ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n        var rowNodeTransaction = {\n            remove: [],\n            update: [],\n            add: []\n        };\n        var nodesToUnselect = [];\n        this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.executeAdd(rowDataTran, rowNodeTransaction);\n        this.updateSelection(nodesToUnselect);\n        if (rowNodeOrder) {\n            _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n        }\n        return rowNodeTransaction;\n    };\n    ClientSideNodeManager.prototype.updateSelection = function (nodesToUnselect) {\n        var selectionChanged = nodesToUnselect.length > 0;\n        if (selectionChanged) {\n            nodesToUnselect.forEach(function (rowNode) {\n                rowNode.setSelected(false, false, true);\n            });\n        }\n        // we do this regardless of nodes to unselect or not, as it's possible\n        // a new node was inserted, so a parent that was previously selected (as all\n        // children were selected) should not be tri-state (as new one unselected against\n        // all other selected children).\n        this.selectionService.updateGroupsFromChildrenSelections();\n        if (selectionChanged) {\n            var event_1 = {\n                type: Events.EVENT_SELECTION_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n    };\n    ClientSideNodeManager.prototype.executeAdd = function (rowDataTran, rowNodeTransaction) {\n        var _this = this;\n        var add = rowDataTran.add, addIndex = rowDataTran.addIndex;\n        if (_.missingOrEmpty(add)) {\n            return;\n        }\n        // create new row nodes for each data item\n        var newNodes = add.map(function (item) { return _this.createNode(item, _this.rootNode, ClientSideNodeManager.TOP_LEVEL); });\n        // add new row nodes to the root nodes 'allLeafChildren'\n        var useIndex = typeof addIndex === 'number' && addIndex >= 0;\n        if (useIndex) {\n            // new rows are inserted in one go by concatenating them in between the existing rows at the desired index.\n            // this is much faster than splicing them individually into 'allLeafChildren' when there are large inserts.\n            var existingLeafChildren = this.rootNode.allLeafChildren;\n            var nodesBeforeIndex = existingLeafChildren.slice(0, addIndex);\n            var nodesAfterIndex = existingLeafChildren.slice(addIndex, existingLeafChildren.length);\n            this.rootNode.allLeafChildren = __spread(nodesBeforeIndex, newNodes, nodesAfterIndex);\n        }\n        else {\n            this.rootNode.allLeafChildren = __spread(this.rootNode.allLeafChildren, newNodes);\n        }\n        if (this.rootNode.sibling) {\n            this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n        }\n        // add new row nodes to the transaction add items\n        rowNodeTransaction.add = newNodes;\n    };\n    ClientSideNodeManager.prototype.executeRemove = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        var _this = this;\n        var remove = rowDataTran.remove;\n        if (_.missingOrEmpty(remove)) {\n            return;\n        }\n        var rowIdsRemoved = {};\n        remove.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n            if (rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            // so row renderer knows to fade row out (and not reposition it)\n            rowNode.clearRowTopAndRowIndex();\n            // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially\n            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n            rowIdsRemoved[rowNode.id] = true;\n            // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n            delete _this.allNodesMap[rowNode.id];\n            rowNodeTransaction.remove.push(rowNode);\n        });\n        this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function (rowNode) { return !rowIdsRemoved[rowNode.id]; });\n        if (this.rootNode.sibling) {\n            this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n        }\n    };\n    ClientSideNodeManager.prototype.executeUpdate = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        var _this = this;\n        var update = rowDataTran.update;\n        if (_.missingOrEmpty(update)) {\n            return;\n        }\n        update.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            rowNode.updateData(item);\n            if (!rowNode.selectable && rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            _this.setMasterForRow(rowNode, item, ClientSideNodeManager.TOP_LEVEL, false);\n            rowNodeTransaction.update.push(rowNode);\n        });\n    };\n    ClientSideNodeManager.prototype.lookupRowNode = function (data) {\n        var getRowIdFunc = this.gridOptionsWrapper.getRowIdFunc();\n        var rowNode;\n        if (getRowIdFunc) {\n            // find rowNode using id\n            var id = getRowIdFunc({ data: data, level: 0, api: this.gridApi, columnApi: this.columnApi });\n            rowNode = this.allNodesMap[id];\n            if (!rowNode) {\n                console.error(\"AG Grid: could not find row id=\" + id + \", data item was not found for this id\");\n                return null;\n            }\n        }\n        else {\n            // find rowNode using object references\n            rowNode = this.rootNode.allLeafChildren.find(function (node) { return node.data === data; });\n            if (!rowNode) {\n                console.error(\"AG Grid: could not find data item as object was not found\", data);\n                console.error(\"Consider using getRowId to help the Grid find matching row data\");\n                return null;\n            }\n        }\n        return rowNode || null;\n    };\n    ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {\n        var node = new RowNode(this.beans);\n        node.group = false;\n        this.setMasterForRow(node, dataItem, level, true);\n        if (parent && !this.suppressParentsInRowNodes) {\n            node.parent = parent;\n        }\n        node.level = level;\n        node.setDataAndId(dataItem, this.nextId.toString());\n        if (this.allNodesMap[node.id]) {\n            console.warn(\"AG Grid: duplicate node id '\" + node.id + \"' detected from getRowNodeId callback, this could cause issues in your grid.\");\n        }\n        this.allNodesMap[node.id] = node;\n        this.nextId++;\n        return node;\n    };\n    ClientSideNodeManager.prototype.setMasterForRow = function (rowNode, data, level, setExpanded) {\n        if (this.doingTreeData) {\n            rowNode.setMaster(false);\n            if (setExpanded) {\n                rowNode.expanded = false;\n            }\n        }\n        else {\n            // this is the default, for when doing grid data\n            if (this.doingMasterDetail) {\n                // if we are doing master detail, then the\n                // default is that everything can be a Master Row.\n                if (this.isRowMasterFunc) {\n                    rowNode.setMaster(this.isRowMasterFunc(data));\n                }\n                else {\n                    rowNode.setMaster(true);\n                }\n            }\n            else {\n                rowNode.setMaster(false);\n            }\n            if (setExpanded) {\n                var rowGroupColumns = this.columnModel.getRowGroupColumns();\n                var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n                // need to take row group into account when determining level\n                var masterRowLevel = level + numRowGroupColumns;\n                rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n            }\n        }\n    };\n    ClientSideNodeManager.prototype.isExpanded = function (level) {\n        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();\n        if (expandByDefault === -1) {\n            return true;\n        }\n        return level < expandByDefault;\n    };\n    ClientSideNodeManager.TOP_LEVEL = 0;\n    ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';\n    return ClientSideNodeManager;\n}());\nexport { ClientSideNodeManager };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, BeanStub } from \"@ag-grid-community/core\";\nvar FilterStage = /** @class */ (function (_super) {\n    __extends(FilterStage, _super);\n    function FilterStage() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FilterStage.prototype.execute = function (params) {\n        var rowNode = params.rowNode, changedPath = params.changedPath;\n        this.filterService.filter(changedPath);\n        this.selectableService.updateSelectableAfterFiltering(rowNode);\n    };\n    __decorate([\n        Autowired('selectableService')\n    ], FilterStage.prototype, \"selectableService\", void 0);\n    __decorate([\n        Autowired('filterService')\n    ], FilterStage.prototype, \"filterService\", void 0);\n    FilterStage = __decorate([\n        Bean('filterStage')\n    ], FilterStage);\n    return FilterStage;\n}(BeanStub));\nexport { FilterStage };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub } from \"@ag-grid-community/core\";\nvar SortStage = /** @class */ (function (_super) {\n    __extends(SortStage, _super);\n    function SortStage() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SortStage.prototype.execute = function (params) {\n        var sortOptions = this.sortController.getSortOptions();\n        var sortActive = _.exists(sortOptions) && sortOptions.length > 0;\n        var deltaSort = sortActive\n            && _.exists(params.rowNodeTransactions)\n            // in time we can remove this check, so that delta sort is always\n            // on if transactions are present. it's off for now so that we can\n            // selectively turn it on and test it with some select users before\n            // rolling out to everyone.\n            && this.gridOptionsWrapper.isDeltaSort();\n        // we only need dirty nodes if doing delta sort\n        var dirtyLeafNodes = deltaSort ? this.calculateDirtyNodes(params.rowNodeTransactions) : null;\n        var noAggregations = _.missingOrEmpty(this.columnModel.getValueColumns());\n        var sortContainsGroupColumns = sortOptions.some(function (opt) { return !!opt.column.getColDef().showRowGroup; });\n        this.sortService.sort(sortOptions, sortActive, deltaSort, dirtyLeafNodes, params.changedPath, noAggregations, sortContainsGroupColumns);\n    };\n    SortStage.prototype.calculateDirtyNodes = function (rowNodeTransactions) {\n        var dirtyNodes = {};\n        var addNodesFunc = function (rowNodes) {\n            if (rowNodes) {\n                rowNodes.forEach(function (rowNode) { return dirtyNodes[rowNode.id] = true; });\n            }\n        };\n        // all leaf level nodes in the transaction were impacted\n        if (rowNodeTransactions) {\n            rowNodeTransactions.forEach(function (tran) {\n                addNodesFunc(tran.add);\n                addNodesFunc(tran.update);\n                addNodesFunc(tran.remove);\n            });\n        }\n        return dirtyNodes;\n    };\n    __decorate([\n        Autowired('sortService')\n    ], SortStage.prototype, \"sortService\", void 0);\n    __decorate([\n        Autowired('sortController')\n    ], SortStage.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('columnModel')\n    ], SortStage.prototype, \"columnModel\", void 0);\n    SortStage = __decorate([\n        Bean('sortStage')\n    ], SortStage);\n    return SortStage;\n}(BeanStub));\nexport { SortStage };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, RowNode } from \"@ag-grid-community/core\";\nvar FlattenStage = /** @class */ (function (_super) {\n    __extends(FlattenStage, _super);\n    function FlattenStage() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FlattenStage.prototype.execute = function (params) {\n        var rootNode = params.rowNode;\n        // even if not doing grouping, we do the mapping, as the client might\n        // of passed in data that already has a grouping in it somewhere\n        var result = [];\n        // putting value into a wrapper so it's passed by reference\n        var nextRowTop = { value: 0 };\n        var skipLeafNodes = this.columnModel.isPivotMode();\n        // if we are reducing, and not grouping, then we want to show the root node, as that\n        // is where the pivot values are\n        var showRootNode = skipLeafNodes && rootNode.leafGroup;\n        var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;\n        this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0);\n        // we do not want the footer total if the gris is empty\n        var atLeastOneRowPresent = result.length > 0;\n        var includeGroupTotalFooter = !showRootNode\n            // don't show total footer when showRootNode is true (i.e. in pivot mode and no groups)\n            && atLeastOneRowPresent\n            && this.gridOptionsWrapper.isGroupIncludeTotalFooter();\n        if (includeGroupTotalFooter) {\n            this.ensureFooterNodeExists(rootNode);\n            this.addRowNodeToRowsToDisplay(rootNode.sibling, result, nextRowTop, 0);\n        }\n        return result;\n    };\n    FlattenStage.prototype.recursivelyAddToRowsToDisplay = function (rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {\n        if (_.missingOrEmpty(rowsToFlatten)) {\n            return;\n        }\n        var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();\n        // these two are mutually exclusive, so if first set, we don't set the second\n        var groupRemoveSingleChildren = this.gridOptionsWrapper.isGroupRemoveSingleChildren();\n        var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n        for (var i = 0; i < rowsToFlatten.length; i++) {\n            var rowNode = rowsToFlatten[i];\n            // check all these cases, for working out if this row should be included in the final mapped list\n            var isParent = rowNode.hasChildren();\n            var isSkippedLeafNode = skipLeafNodes && !isParent;\n            var isRemovedSingleChildrenGroup = groupRemoveSingleChildren &&\n                isParent &&\n                rowNode.childrenAfterGroup.length === 1;\n            var isRemovedLowestSingleChildrenGroup = groupRemoveLowestSingleChildren &&\n                isParent &&\n                rowNode.leafGroup &&\n                rowNode.childrenAfterGroup.length === 1;\n            // hide open parents means when group is open, we don't show it. we also need to make sure the\n            // group is expandable in the first place (as leaf groups are not expandable if pivot mode is on).\n            // the UI will never allow expanding leaf  groups, however the user might via the API (or menu option 'expand all')\n            var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;\n            var isHiddenOpenParent = hideOpenParents && rowNode.expanded && (!neverAllowToExpand);\n            var thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent &&\n                !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;\n            if (thisRowShouldBeRendered) {\n                this.addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);\n            }\n            // if we are pivoting, we never map below the leaf group\n            if (skipLeafNodes && rowNode.leafGroup) {\n                continue;\n            }\n            if (isParent) {\n                var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;\n                // we traverse the group if it is expended, however we always traverse if the parent node\n                // was removed (as the group will never be opened if it is not displayed, we show the children instead)\n                if (rowNode.expanded || excludedParent) {\n                    // if the parent was excluded, then ui level is that of the parent\n                    var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;\n                    this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren);\n                    // put a footer in if user is looking for it\n                    if (this.gridOptionsWrapper.isGroupIncludeFooter()) {\n                        this.ensureFooterNodeExists(rowNode);\n                        this.addRowNodeToRowsToDisplay(rowNode.sibling, result, nextRowTop, uiLevel);\n                    }\n                }\n            }\n            else if (rowNode.master && rowNode.expanded) {\n                var detailNode = this.createDetailNode(rowNode);\n                this.addRowNodeToRowsToDisplay(detailNode, result, nextRowTop, uiLevel);\n            }\n        }\n    };\n    // duplicated method, it's also in floatingRowModel\n    FlattenStage.prototype.addRowNodeToRowsToDisplay = function (rowNode, result, nextRowTop, uiLevel) {\n        var isGroupMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();\n        result.push(rowNode);\n        rowNode.setUiLevel(isGroupMultiAutoColumn ? 0 : uiLevel);\n    };\n    FlattenStage.prototype.ensureFooterNodeExists = function (groupNode) {\n        // only create footer node once, otherwise we have daemons and\n        // the animate screws up with the daemons hanging around\n        if (_.exists(groupNode.sibling)) {\n            return;\n        }\n        var footerNode = new RowNode(this.beans);\n        Object.keys(groupNode).forEach(function (key) {\n            footerNode[key] = groupNode[key];\n        });\n        footerNode.footer = true;\n        footerNode.setRowTop(null);\n        footerNode.setRowIndex(null);\n        // manually set oldRowTop to null so we discard any\n        // previous information about its position.\n        footerNode.oldRowTop = null;\n        if (_.exists(footerNode.id)) {\n            footerNode.id = 'rowGroupFooter_' + footerNode.id;\n        }\n        // get both header and footer to reference each other as siblings. this is never undone,\n        // only overwritten. so if a group is expanded, then contracted, it will have a ghost\n        // sibling - but that's fine, as we can ignore this if the header is contracted.\n        footerNode.sibling = groupNode;\n        groupNode.sibling = footerNode;\n    };\n    FlattenStage.prototype.createDetailNode = function (masterNode) {\n        if (_.exists(masterNode.detailNode)) {\n            return masterNode.detailNode;\n        }\n        var detailNode = new RowNode(this.beans);\n        detailNode.detail = true;\n        detailNode.selectable = false;\n        detailNode.parent = masterNode;\n        if (_.exists(masterNode.id)) {\n            detailNode.id = 'detail_' + masterNode.id;\n        }\n        detailNode.data = masterNode.data;\n        detailNode.level = masterNode.level + 1;\n        masterNode.detailNode = detailNode;\n        return detailNode;\n    };\n    __decorate([\n        Autowired('columnModel')\n    ], FlattenStage.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('beans')\n    ], FlattenStage.prototype, \"beans\", void 0);\n    FlattenStage = __decorate([\n        Bean('flattenStage')\n    ], FlattenStage);\n    return FlattenStage;\n}(BeanStub));\nexport { FlattenStage };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, PostConstruct, BeanStub } from \"@ag-grid-community/core\";\nvar SortService = /** @class */ (function (_super) {\n    __extends(SortService, _super);\n    function SortService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SortService.prototype.init = function () {\n        this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();\n    };\n    SortService.prototype.sort = function (sortOptions, sortActive, deltaSort, dirtyLeafNodes, changedPath, noAggregations, sortContainsGroupColumns) {\n        var _this = this;\n        var groupMaintainOrder = this.gridOptionsWrapper.isGroupMaintainOrder();\n        var groupColumnsPresent = this.columnModel.getAllGridColumns().some(function (c) { return c.isRowGroupActive(); });\n        var callback = function (rowNode) {\n            // we clear out the 'pull down open parents' first, as the values mix up the sorting\n            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterFilter, true);\n            // Javascript sort is non deterministic when all the array items are equals, ie Comparator always returns 0,\n            // so to ensure the array keeps its order, add an additional sorting condition manually, in this case we\n            // are going to inspect the original array position. This is what sortedRowNodes is for.\n            if (sortActive) {\n                // when 'groupMaintainOrder' is enabled we skip sorting groups unless we are sorting on group columns\n                var skipSortingGroups = groupMaintainOrder && groupColumnsPresent && !rowNode.leafGroup && !sortContainsGroupColumns;\n                if (skipSortingGroups) {\n                    rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);\n                }\n                else {\n                    rowNode.childrenAfterSort = deltaSort ?\n                        _this.doDeltaSort(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations)\n                        : _this.rowNodeSorter.doFullSort(rowNode.childrenAfterFilter, sortOptions);\n                }\n            }\n            else {\n                rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);\n            }\n            if (rowNode.sibling) {\n                rowNode.sibling.childrenAfterSort = rowNode.childrenAfterSort;\n            }\n            _this.updateChildIndexes(rowNode);\n            if (_this.postSortFunc) {\n                _this.postSortFunc(rowNode.childrenAfterSort);\n            }\n        };\n        if (changedPath) {\n            changedPath.forEachChangedNodeDepthFirst(callback);\n        }\n        this.updateGroupDataForHideOpenParents(changedPath);\n    };\n    SortService.prototype.mapNodeToSortedNode = function (rowNode, pos) {\n        return { currentPos: pos, rowNode: rowNode };\n    };\n    SortService.prototype.doDeltaSort = function (rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) {\n        // clean nodes will be a list of all row nodes that remain in the set\n        // and ordered. we start with the old sorted set and take out any nodes\n        // that were removed or changed (but not added, added doesn't make sense,\n        // if a node was added, there is no way it could be here from last time).\n        var cleanNodes = rowNode.childrenAfterSort\n            .filter(function (node) {\n            // take out all nodes that were changed as part of the current transaction.\n            // a changed node could a) be in a different sort position or b) may\n            // no longer be in this set as the changed node may not pass filtering,\n            // or be in a different group.\n            var passesDirtyNodesCheck = !dirtyLeafNodes[node.id];\n            // also remove group nodes in the changed path, as they can have different aggregate\n            // values which could impact the sort order.\n            // note: changed path is not active if a) no value columns or b) no transactions. it is never\n            // (b) in deltaSort as we only do deltaSort for transactions. for (a) if no value columns, then\n            // there is no value in the group that could of changed (ie no aggregate values)\n            var passesChangedPathCheck = noAggregations || (changedPath && changedPath.canSkip(node));\n            return passesDirtyNodesCheck && passesChangedPathCheck;\n        })\n            .map(this.mapNodeToSortedNode.bind(this));\n        // for fast access below, we map them\n        var cleanNodesMapped = {};\n        cleanNodes.forEach(function (sortedRowNode) { return cleanNodesMapped[sortedRowNode.rowNode.id] = sortedRowNode.rowNode; });\n        // these are all nodes that need to be placed\n        var changedNodes = rowNode.childrenAfterFilter\n            // ignore nodes in the clean list\n            .filter(function (node) { return !cleanNodesMapped[node.id]; })\n            .map(this.mapNodeToSortedNode.bind(this));\n        // sort changed nodes. note that we don't need to sort cleanNodes as they are\n        // already sorted from last time.\n        changedNodes.sort(this.rowNodeSorter.compareRowNodes.bind(this, sortOptions));\n        var result;\n        if (changedNodes.length === 0) {\n            result = cleanNodes;\n        }\n        else if (cleanNodes.length === 0) {\n            result = changedNodes;\n        }\n        else {\n            result = this.mergeSortedArrays(sortOptions, cleanNodes, changedNodes);\n        }\n        return result.map(function (item) { return item.rowNode; });\n    };\n    // Merge two sorted arrays into each other\n    SortService.prototype.mergeSortedArrays = function (sortOptions, arr1, arr2) {\n        var res = [];\n        var i = 0;\n        var j = 0;\n        // Traverse both array, adding them in order\n        while (i < arr1.length && j < arr2.length) {\n            // Check if current element of first\n            // array is smaller than current element\n            // of second array. If yes, store first\n            // array element and increment first array\n            // index. Otherwise do same with second array\n            var compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);\n            if (compareResult < 0) {\n                res.push(arr1[i++]);\n            }\n            else {\n                res.push(arr2[j++]);\n            }\n        }\n        // add remaining from arr1\n        while (i < arr1.length) {\n            res.push(arr1[i++]);\n        }\n        // add remaining from arr2\n        while (j < arr2.length) {\n            res.push(arr2[j++]);\n        }\n        return res;\n    };\n    SortService.prototype.updateChildIndexes = function (rowNode) {\n        if (_.missing(rowNode.childrenAfterSort)) {\n            return;\n        }\n        var listToSort = rowNode.childrenAfterSort;\n        for (var i = 0; i < listToSort.length; i++) {\n            var child = listToSort[i];\n            var firstChild = i === 0;\n            var lastChild = i === rowNode.childrenAfterSort.length - 1;\n            child.setFirstChild(firstChild);\n            child.setLastChild(lastChild);\n            child.setChildIndex(i);\n        }\n    };\n    SortService.prototype.updateGroupDataForHideOpenParents = function (changedPath) {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            return;\n        }\n        if (this.gridOptionsWrapper.isTreeData()) {\n            var msg_1 = \"AG Grid: The property hideOpenParents dose not work with Tree Data. This is because Tree Data has values at the group level, it doesn't make sense to hide them (as opposed to Row Grouping, which only has Aggregated Values at the group level).\";\n            _.doOnce(function () { return console.warn(msg_1); }, 'sortService.hideOpenParentsWithTreeData');\n            return false;\n        }\n        // recurse breadth first over group nodes after sort to 'pull down' group data to child groups\n        var callback = function (rowNode) {\n            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);\n            rowNode.childrenAfterSort.forEach(function (child) {\n                if (child.hasChildren()) {\n                    callback(child);\n                }\n            });\n        };\n        if (changedPath) {\n            changedPath.executeFromRootNode(function (rowNode) { return callback(rowNode); });\n        }\n    };\n    SortService.prototype.pullDownGroupDataForHideOpenParents = function (rowNodes, clearOperation) {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents() || _.missing(rowNodes)) {\n            return;\n        }\n        rowNodes.forEach(function (childRowNode) {\n            var groupDisplayCols = _this.columnModel.getGroupDisplayColumns();\n            groupDisplayCols.forEach(function (groupDisplayCol) {\n                var showRowGroup = groupDisplayCol.getColDef().showRowGroup;\n                if (typeof showRowGroup !== 'string') {\n                    console.error('AG Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup');\n                    return;\n                }\n                var displayingGroupKey = showRowGroup;\n                var rowGroupColumn = _this.columnModel.getPrimaryColumn(displayingGroupKey);\n                var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;\n                if (thisRowNodeMatches) {\n                    return;\n                }\n                if (clearOperation) {\n                    // if doing a clear operation, we clear down the value for every possible group column\n                    childRowNode.setGroupValue(groupDisplayCol.getId(), undefined);\n                }\n                else {\n                    // if doing a set operation, we set only where the pull down is to occur\n                    var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);\n                    if (parentToStealFrom) {\n                        childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);\n                    }\n                }\n            });\n        });\n    };\n    __decorate([\n        Autowired('columnModel')\n    ], SortService.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('rowNodeSorter')\n    ], SortService.prototype, \"rowNodeSorter\", void 0);\n    __decorate([\n        PostConstruct\n    ], SortService.prototype, \"init\", null);\n    SortService = __decorate([\n        Bean('sortService')\n    ], SortService);\n    return SortService;\n}(BeanStub));\nexport { SortService };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct, BeanStub } from \"@ag-grid-community/core\";\nvar FilterService = /** @class */ (function (_super) {\n    __extends(FilterService, _super);\n    function FilterService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FilterService.prototype.postConstruct = function () {\n        this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n    };\n    FilterService.prototype.filter = function (changedPath) {\n        var filterActive = this.filterManager.isAnyFilterPresent();\n        this.filterNodes(filterActive, changedPath);\n    };\n    FilterService.prototype.filterNodes = function (filterActive, changedPath) {\n        var _this = this;\n        var filterCallback = function (rowNode, includeChildNodes) {\n            // recursively get all children that are groups to also filter\n            if (rowNode.hasChildren()) {\n                // result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes\n                if (filterActive && !includeChildNodes) {\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function (childNode) {\n                        // a group is included in the result if it has any children of it's own.\n                        // by this stage, the child groups are already filtered\n                        var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;\n                        // both leaf level nodes and tree data nodes have data. these get added if\n                        // the data passes the filter\n                        var passBecauseDataPasses = childNode.data\n                            && _this.filterManager.doesRowPassFilter({ rowNode: childNode });\n                        // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass\n                        return passBecauseChildren || passBecauseDataPasses;\n                    });\n                }\n                else {\n                    // if not filtering, the result is the original list\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n                }\n                _this.setAllChildrenCount(rowNode);\n            }\n            else {\n                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n                rowNode.setAllChildrenCount(null);\n            }\n            if (rowNode.sibling) {\n                rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;\n            }\n        };\n        if (this.doingTreeDataFiltering()) {\n            var treeDataDepthFirstFilter_1 = function (rowNode, alreadyFoundInParent) {\n                // tree data filter traverses the hierarchy depth first and includes child nodes if parent passes\n                // filter, and parent nodes will be include if any children exist.\n                if (rowNode.childrenAfterGroup) {\n                    for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                        var childNode = rowNode.childrenAfterGroup[i];\n                        // first check if current node passes filter before invoking child nodes\n                        var foundInParent = alreadyFoundInParent\n                            || _this.filterManager.doesRowPassFilter({ rowNode: childNode });\n                        if (childNode.childrenAfterGroup) {\n                            treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);\n                        }\n                        else {\n                            filterCallback(childNode, foundInParent);\n                        }\n                    }\n                }\n                filterCallback(rowNode, alreadyFoundInParent);\n            };\n            var treeDataFilterCallback = function (rowNode) { return treeDataDepthFirstFilter_1(rowNode, false); };\n            changedPath.executeFromRootNode(treeDataFilterCallback);\n        }\n        else {\n            var defaultFilterCallback = function (rowNode) { return filterCallback(rowNode, false); };\n            changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n        }\n    };\n    FilterService.prototype.setAllChildrenCountTreeData = function (rowNode) {\n        // for tree data, we include all children, groups and leafs\n        var allChildrenCount = 0;\n        rowNode.childrenAfterFilter.forEach(function (child) {\n            // include child itself\n            allChildrenCount++;\n            // include children of children\n            allChildrenCount += child.allChildrenCount;\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    };\n    FilterService.prototype.setAllChildrenCountGridGrouping = function (rowNode) {\n        // for grid data, we only count the leafs\n        var allChildrenCount = 0;\n        rowNode.childrenAfterFilter.forEach(function (child) {\n            if (child.group) {\n                allChildrenCount += child.allChildrenCount;\n            }\n            else {\n                allChildrenCount++;\n            }\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    };\n    FilterService.prototype.setAllChildrenCount = function (rowNode) {\n        if (this.doingTreeData) {\n            this.setAllChildrenCountTreeData(rowNode);\n        }\n        else {\n            this.setAllChildrenCountGridGrouping(rowNode);\n        }\n    };\n    FilterService.prototype.doingTreeDataFiltering = function () {\n        return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();\n    };\n    __decorate([\n        Autowired('filterManager')\n    ], FilterService.prototype, \"filterManager\", void 0);\n    __decorate([\n        PostConstruct\n    ], FilterService.prototype, \"postConstruct\", null);\n    FilterService = __decorate([\n        Bean(\"filterService\")\n    ], FilterService);\n    return FilterService;\n}(BeanStub));\nexport { FilterService };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { _, Autowired, Bean, Constants, PostConstruct, BeanStub } from \"@ag-grid-community/core\";\nvar ImmutableService = /** @class */ (function (_super) {\n    __extends(ImmutableService, _super);\n    function ImmutableService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ImmutableService.prototype.postConstruct = function () {\n        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            this.clientSideRowModel = this.rowModel;\n        }\n    };\n    ImmutableService.prototype.isActive = function () {\n        return this.gridOptionsWrapper.isImmutableData();\n    };\n    ImmutableService.prototype.setRowData = function (rowData) {\n        var transactionAndMap = this.createTransactionForRowData(rowData);\n        if (!transactionAndMap) {\n            return;\n        }\n        var _a = __read(transactionAndMap, 2), transaction = _a[0], orderIdMap = _a[1];\n        var nodeTransaction = this.clientSideRowModel.updateRowData(transaction, orderIdMap);\n        // need to force updating of full width rows - note this wouldn't be necessary the full width cell comp listened\n        // to the data change event on the row node and refreshed itself.\n        if (nodeTransaction) {\n            this.rowRenderer.refreshFullWidthRows(nodeTransaction.update);\n        }\n    };\n    // converts the setRowData() command to a transaction\n    ImmutableService.prototype.createTransactionForRowData = function (rowData) {\n        var _this = this;\n        if (_.missing(this.clientSideRowModel)) {\n            console.error('AG Grid: ImmutableService only works with ClientSideRowModel');\n            return;\n        }\n        var getRowIdFunc = this.gridOptionsWrapper.getRowIdFunc();\n        if (getRowIdFunc == null) {\n            console.error('AG Grid: ImmutableService requires getRowId() callback to be implemented, your row data needs IDs!');\n            return;\n        }\n        // convert the data into a transaction object by working out adds, removes and updates\n        var transaction = {\n            remove: [],\n            update: [],\n            add: []\n        };\n        var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();\n        var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();\n        var orderMap = suppressSortOrder ? undefined : {};\n        if (_.exists(rowData)) {\n            // split all the new data in the following:\n            // if new, push to 'add'\n            // if update, push to 'update'\n            // if not changed, do not include in the transaction\n            rowData.forEach(function (data, index) {\n                var id = getRowIdFunc({ data: data, level: 0, api: _this.gridApi, columnApi: _this.columnApi });\n                var existingNode = existingNodesMap[id];\n                if (orderMap) {\n                    orderMap[id] = index;\n                }\n                if (existingNode) {\n                    var dataHasChanged = existingNode.data !== data;\n                    if (dataHasChanged) {\n                        transaction.update.push(data);\n                    }\n                    // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta\n                    // remove from list, so we know the item is not to be removed\n                    existingNodesMap[id] = undefined;\n                }\n                else {\n                    transaction.add.push(data);\n                }\n            });\n        }\n        // at this point, all rows that are left, should be removed\n        _.iterateObject(existingNodesMap, function (id, rowNode) {\n            if (rowNode) {\n                transaction.remove.push(rowNode.data);\n            }\n        });\n        return [transaction, orderMap];\n    };\n    __decorate([\n        Autowired('rowModel')\n    ], ImmutableService.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], ImmutableService.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], ImmutableService.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], ImmutableService.prototype, \"gridApi\", void 0);\n    __decorate([\n        PostConstruct\n    ], ImmutableService.prototype, \"postConstruct\", null);\n    ImmutableService = __decorate([\n        Bean('immutableService')\n    ], ImmutableService);\n    return ImmutableService;\n}(BeanStub));\nexport { ImmutableService };\n","import { ModuleNames } from \"@ag-grid-community/core\";\nimport { ClientSideRowModel } from \"./clientSideRowModel/clientSideRowModel\";\nimport { FilterStage } from \"./clientSideRowModel/filterStage\";\nimport { SortStage } from \"./clientSideRowModel/sortStage\";\nimport { FlattenStage } from \"./clientSideRowModel/flattenStage\";\nimport { SortService } from \"./clientSideRowModel/sortService\";\nimport { FilterService } from \"./clientSideRowModel/filterService\";\nimport { ImmutableService } from \"./clientSideRowModel/immutableService\";\nexport var ClientSideRowModelModule = {\n    moduleName: ModuleNames.ClientSideRowModelModule,\n    beans: [FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService],\n    rowModels: { clientSide: ClientSideRowModel }\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, PostConstruct, PreDestroy, RowNode, RowNodeBlock, Autowired } from \"@ag-grid-community/core\";\nvar InfiniteBlock = /** @class */ (function (_super) {\n    __extends(InfiniteBlock, _super);\n    function InfiniteBlock(id, parentCache, params) {\n        var _this = _super.call(this, id) || this;\n        _this.parentCache = parentCache;\n        _this.params = params;\n        // we don't need to calculate these now, as the inputs don't change,\n        // however it makes the code easier to read if we work them out up front\n        _this.startRow = id * params.blockSize;\n        _this.endRow = _this.startRow + params.blockSize;\n        return _this;\n    }\n    InfiniteBlock.prototype.postConstruct = function () {\n        this.createRowNodes();\n    };\n    InfiniteBlock.prototype.getBlockStateJson = function () {\n        return {\n            id: '' + this.getId(),\n            state: {\n                blockNumber: this.getId(),\n                startRow: this.getStartRow(),\n                endRow: this.getEndRow(),\n                pageStatus: this.getState()\n            }\n        };\n    };\n    InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {\n        // if there's no id and the rowNode was rendered before, it means this\n        // was a placeholder rowNode and should not be recycled. Setting\n        // `alreadyRendered`  to `false` forces the rowRenderer to flush it.\n        if (!rowNode.id && rowNode.alreadyRendered) {\n            rowNode.alreadyRendered = false;\n        }\n        if (_.exists(data)) {\n            // this means if the user is not providing id's we just use the\n            // index for the row. this will allow selection to work (that is based\n            // on index) as long user is not inserting or deleting rows,\n            // or wanting to keep selection between server side sorting or filtering\n            rowNode.setDataAndId(data, index.toString());\n        }\n        else {\n            rowNode.setDataAndId(undefined, undefined);\n        }\n    };\n    InfiniteBlock.prototype.loadFromDatasource = function () {\n        var _this = this;\n        var params = this.createLoadParams();\n        if (_.missing(this.params.datasource.getRows)) {\n            console.warn(\"AG Grid: datasource is missing getRows method\");\n            return;\n        }\n        // put in timeout, to force result to be async\n        window.setTimeout(function () {\n            _this.params.datasource.getRows(params);\n        }, 0);\n    };\n    InfiniteBlock.prototype.processServerFail = function () {\n        // todo - this method has better handling in SSRM\n    };\n    InfiniteBlock.prototype.createLoadParams = function () {\n        // PROBLEM . . . . when the user sets sort via colDef.sort, then this code\n        // is executing before the sort is set up, so server is not getting the sort\n        // model. need to change with regards order - so the server side request is\n        // AFTER thus it gets the right sort model.\n        var params = {\n            startRow: this.getStartRow(),\n            endRow: this.getEndRow(),\n            successCallback: this.pageLoaded.bind(this, this.getVersion()),\n            failCallback: this.pageLoadFailed.bind(this, this.getVersion()),\n            sortModel: this.params.sortModel,\n            filterModel: this.params.filterModel,\n            context: this.gridOptionsWrapper.getContext()\n        };\n        return params;\n    };\n    InfiniteBlock.prototype.forEachNode = function (callback, sequence, rowCount) {\n        var _this = this;\n        this.rowNodes.forEach(function (rowNode, index) {\n            var rowIndex = _this.startRow + index;\n            if (rowIndex < rowCount) {\n                callback(rowNode, sequence.next());\n            }\n        });\n    };\n    InfiniteBlock.prototype.getLastAccessed = function () {\n        return this.lastAccessed;\n    };\n    InfiniteBlock.prototype.getRow = function (rowIndex, dontTouchLastAccessed) {\n        if (dontTouchLastAccessed === void 0) { dontTouchLastAccessed = false; }\n        if (!dontTouchLastAccessed) {\n            this.lastAccessed = this.params.lastAccessedSequence.next();\n        }\n        var localIndex = rowIndex - this.startRow;\n        return this.rowNodes[localIndex];\n    };\n    InfiniteBlock.prototype.getStartRow = function () {\n        return this.startRow;\n    };\n    InfiniteBlock.prototype.getEndRow = function () {\n        return this.endRow;\n    };\n    // creates empty row nodes, data is missing as not loaded yet\n    InfiniteBlock.prototype.createRowNodes = function () {\n        this.rowNodes = [];\n        for (var i = 0; i < this.params.blockSize; i++) {\n            var rowIndex = this.startRow + i;\n            var rowNode = new RowNode(this.beans);\n            rowNode.setRowHeight(this.params.rowHeight);\n            rowNode.uiLevel = 0;\n            rowNode.setRowIndex(rowIndex);\n            rowNode.setRowTop(this.params.rowHeight * rowIndex);\n            this.rowNodes.push(rowNode);\n        }\n    };\n    InfiniteBlock.prototype.processServerResult = function (params) {\n        var _this = this;\n        this.rowNodes.forEach(function (rowNode, index) {\n            var data = params.rowData ? params.rowData[index] : undefined;\n            _this.setDataAndId(rowNode, data, _this.startRow + index);\n        });\n        var finalRowCount = params.rowCount != null && params.rowCount >= 0 ? params.rowCount : undefined;\n        this.parentCache.pageLoaded(this, finalRowCount);\n    };\n    InfiniteBlock.prototype.destroyRowNodes = function () {\n        this.rowNodes.forEach(function (rowNode) {\n            // this is needed, so row render knows to fade out the row, otherwise it\n            // sees row top is present, and thinks the row should be shown.\n            rowNode.clearRowTopAndRowIndex();\n        });\n    };\n    __decorate([\n        Autowired('beans')\n    ], InfiniteBlock.prototype, \"beans\", void 0);\n    __decorate([\n        PostConstruct\n    ], InfiniteBlock.prototype, \"postConstruct\", null);\n    __decorate([\n        PreDestroy\n    ], InfiniteBlock.prototype, \"destroyRowNodes\", null);\n    return InfiniteBlock;\n}(RowNodeBlock));\nexport { InfiniteBlock };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Autowired, BeanStub, Events, NumberSequence, PreDestroy, Qualifier, _ } from \"@ag-grid-community/core\";\nimport { InfiniteBlock } from \"./infiniteBlock\";\nvar InfiniteCache = /** @class */ (function (_super) {\n    __extends(InfiniteCache, _super);\n    function InfiniteCache(params) {\n        var _this = _super.call(this) || this;\n        _this.lastRowIndexKnown = false;\n        _this.blocks = {};\n        _this.blockCount = 0;\n        _this.rowCount = params.initialRowCount;\n        _this.params = params;\n        return _this;\n    }\n    InfiniteCache.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('InfiniteCache');\n    };\n    // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,\n    // it will want new pages in the cache as it asks for rows. only when we are inserting /\n    // removing rows via the api is dontCreatePage set, where we move rows between the pages.\n    InfiniteCache.prototype.getRow = function (rowIndex, dontCreatePage) {\n        if (dontCreatePage === void 0) { dontCreatePage = false; }\n        var blockId = Math.floor(rowIndex / this.params.blockSize);\n        var block = this.blocks[blockId];\n        if (!block) {\n            if (dontCreatePage) {\n                return undefined;\n            }\n            block = this.createBlock(blockId);\n        }\n        return block.getRow(rowIndex);\n    };\n    InfiniteCache.prototype.createBlock = function (blockNumber) {\n        var newBlock = this.createBean(new InfiniteBlock(blockNumber, this, this.params));\n        this.blocks[newBlock.getId()] = newBlock;\n        this.blockCount++;\n        this.purgeBlocksIfNeeded(newBlock);\n        this.params.rowNodeBlockLoader.addBlock(newBlock);\n        return newBlock;\n    };\n    // we have this on infinite row model only, not server side row model,\n    // because for server side, it would leave the children in inconsistent\n    // state - eg if a node had children, but after the refresh it had data\n    // for a different row, then the children would be with the wrong row node.\n    InfiniteCache.prototype.refreshCache = function () {\n        var nothingToRefresh = this.blockCount == 0;\n        if (nothingToRefresh) {\n            this.purgeCache();\n            return;\n        }\n        this.getBlocksInOrder().forEach(function (block) { return block.setStateWaitingToLoad(); });\n        this.params.rowNodeBlockLoader.checkBlockToLoad();\n    };\n    InfiniteCache.prototype.destroyAllBlocks = function () {\n        var _this = this;\n        this.getBlocksInOrder().forEach(function (block) { return _this.destroyBlock(block); });\n    };\n    InfiniteCache.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n    InfiniteCache.prototype.isLastRowIndexKnown = function () {\n        return this.lastRowIndexKnown;\n    };\n    // block calls this, when page loaded\n    InfiniteCache.prototype.pageLoaded = function (block, lastRow) {\n        // if we are not active, then we ignore all events, otherwise we could end up getting the\n        // grid to refresh even though we are no longer the active cache\n        if (!this.isAlive()) {\n            return;\n        }\n        this.logger.log(\"onPageLoaded: page = \" + block.getId() + \", lastRow = \" + lastRow);\n        this.checkRowCount(block, lastRow);\n        // we fire cacheUpdated even if the row count has not changed, as some items need updating even\n        // if no new rows to render. for example the pagination panel has '?' as the total rows when loading\n        // is underway, which would need to get updated when loading finishes.\n        this.onCacheUpdated();\n    };\n    InfiniteCache.prototype.purgeBlocksIfNeeded = function (blockToExclude) {\n        var _this = this;\n        // we exclude checking for the page just created, as this has yet to be accessed and hence\n        // the lastAccessed stamp will not be updated for the first time yet\n        var blocksForPurging = this.getBlocksInOrder().filter(function (b) { return b != blockToExclude; });\n        var lastAccessedComparator = function (a, b) { return b.getLastAccessed() - a.getLastAccessed(); };\n        blocksForPurging.sort(lastAccessedComparator);\n        // we remove (maxBlocksInCache - 1) as we already excluded the 'just created' page.\n        // in other words, after the splice operation below, we have taken out the blocks\n        // we want to keep, which means we are left with blocks that we can potentially purge\n        var maxBlocksProvided = this.params.maxBlocksInCache > 0;\n        var blocksToKeep = maxBlocksProvided ? this.params.maxBlocksInCache - 1 : null;\n        var emptyBlocksToKeep = InfiniteCache.MAX_EMPTY_BLOCKS_TO_KEEP - 1;\n        blocksForPurging.forEach(function (block, index) {\n            var purgeBecauseBlockEmpty = block.getState() === InfiniteBlock.STATE_WAITING_TO_LOAD && index >= emptyBlocksToKeep;\n            var purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep : false;\n            if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {\n                // if the block currently has rows been displayed, then don't remove it either.\n                // this can happen if user has maxBlocks=2, and blockSize=5 (thus 10 max rows in cache)\n                // but the screen is showing 20 rows, so at least 4 blocks are needed.\n                if (_this.isBlockCurrentlyDisplayed(block)) {\n                    return;\n                }\n                // don't want to loose keyboard focus, so keyboard navigation can continue. so keep focused blocks.\n                if (_this.isBlockFocused(block)) {\n                    return;\n                }\n                // at this point, block is not needed, so burn baby burn\n                _this.removeBlockFromCache(block);\n            }\n        });\n    };\n    InfiniteCache.prototype.isBlockFocused = function (block) {\n        var focusedCell = this.focusService.getFocusCellToUseAfterRefresh();\n        if (!focusedCell) {\n            return false;\n        }\n        if (focusedCell.rowPinned != null) {\n            return false;\n        }\n        var blockIndexStart = block.getStartRow();\n        var blockIndexEnd = block.getEndRow();\n        var hasFocus = focusedCell.rowIndex >= blockIndexStart && focusedCell.rowIndex < blockIndexEnd;\n        return hasFocus;\n    };\n    InfiniteCache.prototype.isBlockCurrentlyDisplayed = function (block) {\n        var startIndex = block.getStartRow();\n        var endIndex = block.getEndRow() - 1;\n        return this.rowRenderer.isRangeInRenderedViewport(startIndex, endIndex);\n    };\n    InfiniteCache.prototype.removeBlockFromCache = function (blockToRemove) {\n        if (!blockToRemove) {\n            return;\n        }\n        this.destroyBlock(blockToRemove);\n        // we do not want to remove the 'loaded' event listener, as the\n        // concurrent loads count needs to be updated when the load is complete\n        // if the purged page is in loading state\n    };\n    InfiniteCache.prototype.checkRowCount = function (block, lastRow) {\n        // if client provided a last row, we always use it, as it could change between server calls\n        // if user deleted data and then called refresh on the grid.\n        if (typeof lastRow === 'number' && lastRow >= 0) {\n            this.rowCount = lastRow;\n            this.lastRowIndexKnown = true;\n        }\n        else if (!this.lastRowIndexKnown) {\n            // otherwise, see if we need to add some virtual rows\n            var lastRowIndex = (block.getId() + 1) * this.params.blockSize;\n            var lastRowIndexPlusOverflow = lastRowIndex + this.params.overflowSize;\n            if (this.rowCount < lastRowIndexPlusOverflow) {\n                this.rowCount = lastRowIndexPlusOverflow;\n            }\n        }\n    };\n    InfiniteCache.prototype.setRowCount = function (rowCount, lastRowIndexKnown) {\n        this.rowCount = rowCount;\n        // if undefined is passed, we do not set this value, if one of {true,false}\n        // is passed, we do set the value.\n        if (_.exists(lastRowIndexKnown)) {\n            this.lastRowIndexKnown = lastRowIndexKnown;\n        }\n        // if we are still searching, then the row count must not end at the end\n        // of a particular page, otherwise the searching will not pop into the\n        // next page\n        if (!this.lastRowIndexKnown) {\n            if (this.rowCount % this.params.blockSize === 0) {\n                this.rowCount++;\n            }\n        }\n        this.onCacheUpdated();\n    };\n    InfiniteCache.prototype.forEachNodeDeep = function (callback) {\n        var _this = this;\n        var sequence = new NumberSequence();\n        this.getBlocksInOrder().forEach(function (block) { return block.forEachNode(callback, sequence, _this.rowCount); });\n    };\n    InfiniteCache.prototype.getBlocksInOrder = function () {\n        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order\n        var blockComparator = function (a, b) { return a.getId() - b.getId(); };\n        var blocks = _.getAllValuesInObject(this.blocks).sort(blockComparator);\n        return blocks;\n    };\n    InfiniteCache.prototype.destroyBlock = function (block) {\n        delete this.blocks[block.getId()];\n        this.destroyBean(block);\n        this.blockCount--;\n        this.params.rowNodeBlockLoader.removeBlock(block);\n    };\n    // gets called 1) row count changed 2) cache purged 3) items inserted\n    InfiniteCache.prototype.onCacheUpdated = function () {\n        if (this.isAlive()) {\n            // if the virtualRowCount is shortened, then it's possible blocks exist that are no longer\n            // in the valid range. so we must remove these. this can happen if user explicitly sets\n            // the virtual row count, or the datasource returns a result and sets lastRow to something\n            // less than virtualRowCount (can happen if user scrolls down, server reduces dataset size).\n            this.destroyAllBlocksPastVirtualRowCount();\n            // this results in both row models (infinite and server side) firing ModelUpdated,\n            // however server side row model also updates the row indexes first\n            var event_1 = {\n                type: Events.EVENT_STORE_UPDATED\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n    };\n    InfiniteCache.prototype.destroyAllBlocksPastVirtualRowCount = function () {\n        var _this = this;\n        var blocksToDestroy = [];\n        this.getBlocksInOrder().forEach(function (block) {\n            var startRow = block.getId() * _this.params.blockSize;\n            if (startRow >= _this.rowCount) {\n                blocksToDestroy.push(block);\n            }\n        });\n        if (blocksToDestroy.length > 0) {\n            blocksToDestroy.forEach(function (block) { return _this.destroyBlock(block); });\n        }\n    };\n    InfiniteCache.prototype.purgeCache = function () {\n        var _this = this;\n        this.getBlocksInOrder().forEach(function (block) { return _this.removeBlockFromCache(block); });\n        this.lastRowIndexKnown = false;\n        // if zero rows in the cache, we need to get the SSRM to start asking for rows again.\n        // otherwise if set to zero rows last time, and we don't update the row count, then after\n        // the purge there will still be zero rows, meaning the SSRM won't request any rows.\n        // to kick things off, at least one row needs to be asked for.\n        if (this.rowCount === 0) {\n            this.rowCount = this.params.initialRowCount;\n        }\n        this.onCacheUpdated();\n    };\n    InfiniteCache.prototype.getRowNodesInRange = function (firstInRange, lastInRange) {\n        var _this = this;\n        var result = [];\n        var lastBlockId = -1;\n        var inActiveRange = false;\n        var numberSequence = new NumberSequence();\n        // if only one node passed, we start the selection at the top\n        if (_.missing(firstInRange)) {\n            inActiveRange = true;\n        }\n        var foundGapInSelection = false;\n        this.getBlocksInOrder().forEach(function (block) {\n            if (foundGapInSelection) {\n                return;\n            }\n            if (inActiveRange && (lastBlockId + 1 !== block.getId())) {\n                foundGapInSelection = true;\n                return;\n            }\n            lastBlockId = block.getId();\n            block.forEachNode(function (rowNode) {\n                var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;\n                if (inActiveRange || hitFirstOrLast) {\n                    result.push(rowNode);\n                }\n                if (hitFirstOrLast) {\n                    inActiveRange = !inActiveRange;\n                }\n            }, numberSequence, _this.rowCount);\n        });\n        // inActiveRange will be still true if we never hit the second rowNode\n        var invalidRange = foundGapInSelection || inActiveRange;\n        return invalidRange ? [] : result;\n    };\n    // this property says how many empty blocks should be in a cache, eg if scrolls down fast and creates 10\n    // blocks all for loading, the grid will only load the last 2 - it will assume the blocks the user quickly\n    // scrolled over are not needed to be loaded.\n    InfiniteCache.MAX_EMPTY_BLOCKS_TO_KEEP = 2;\n    __decorate([\n        Autowired('rowRenderer')\n    ], InfiniteCache.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired(\"focusService\")\n    ], InfiniteCache.prototype, \"focusService\", void 0);\n    __decorate([\n        __param(0, Qualifier('loggerFactory'))\n    ], InfiniteCache.prototype, \"setBeans\", null);\n    __decorate([\n        PreDestroy\n    ], InfiniteCache.prototype, \"destroyAllBlocks\", null);\n    return InfiniteCache;\n}(BeanStub));\nexport { InfiniteCache };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, Constants, Events, NumberSequence, PostConstruct, PreDestroy } from \"@ag-grid-community/core\";\nimport { InfiniteCache } from \"./infiniteCache\";\nvar InfiniteRowModel = /** @class */ (function (_super) {\n    __extends(InfiniteRowModel, _super);\n    function InfiniteRowModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    InfiniteRowModel.prototype.getRowBounds = function (index) {\n        return {\n            rowHeight: this.rowHeight,\n            rowTop: this.rowHeight * index\n        };\n    };\n    // we don't implement as lazy row heights is not supported in this row model\n    InfiniteRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n        return false;\n    };\n    InfiniteRowModel.prototype.init = function () {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isRowModelInfinite()) {\n            return;\n        }\n        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n        this.addEventListeners();\n        this.addDestroyFunc(function () { return _this.destroyCache(); });\n        this.verifyProps();\n    };\n    InfiniteRowModel.prototype.verifyProps = function () {\n        if (this.gridOptionsWrapper.getDefaultGroupOrderComparator() != null) {\n            var message_1 = \"AG Grid: defaultGroupOrderComparator cannot be used with Infinite Row Model. If using Infinite Row Model, then sorting is done on the server side, nothing to do with the client.\";\n            _.doOnce(function () { return console.warn(message_1); }, 'IRM.DefaultGroupOrderComparator');\n        }\n    };\n    InfiniteRowModel.prototype.start = function () {\n        this.setDatasource(this.gridOptionsWrapper.getDatasource());\n    };\n    InfiniteRowModel.prototype.destroyDatasource = function () {\n        if (this.datasource) {\n            this.getContext().destroyBean(this.datasource);\n            this.rowRenderer.datasourceChanged();\n            this.datasource = null;\n        }\n    };\n    InfiniteRowModel.prototype.addEventListeners = function () {\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_STORE_UPDATED, this.onCacheUpdated.bind(this));\n    };\n    InfiniteRowModel.prototype.onFilterChanged = function () {\n        this.reset();\n    };\n    InfiniteRowModel.prototype.onSortChanged = function () {\n        this.reset();\n    };\n    InfiniteRowModel.prototype.onColumnEverything = function () {\n        var resetRequired;\n        // if cache params, we require reset only if sort model has changed. we don't need to check\n        // for filter model, as the filter manager will fire an event when columns change that result\n        // in the filter changing.\n        if (this.cacheParams) {\n            resetRequired = this.isSortModelDifferent();\n        }\n        else {\n            // if no cacheParams, means first time creating the cache, so always create one\n            resetRequired = true;\n        }\n        if (resetRequired) {\n            this.reset();\n        }\n    };\n    InfiniteRowModel.prototype.isSortModelDifferent = function () {\n        return !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());\n    };\n    InfiniteRowModel.prototype.getType = function () {\n        return Constants.ROW_MODEL_TYPE_INFINITE;\n    };\n    InfiniteRowModel.prototype.setDatasource = function (datasource) {\n        this.destroyDatasource();\n        this.datasource = datasource;\n        // only reset if we have a valid datasource to working with\n        if (datasource) {\n            this.reset();\n        }\n    };\n    InfiniteRowModel.prototype.isEmpty = function () {\n        return !this.infiniteCache;\n    };\n    InfiniteRowModel.prototype.isRowsToRender = function () {\n        return !!this.infiniteCache;\n    };\n    InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];\n    };\n    InfiniteRowModel.prototype.reset = function () {\n        // important to return here, as the user could be setting filter or sort before\n        // data-source is set\n        if (!this.datasource) {\n            return;\n        }\n        // if user is providing id's, then this means we can keep the selection between datasource hits,\n        // as the rows will keep their unique id's even if, for example, server side sorting or filtering\n        // is done.\n        var getRowIdFunc = this.gridOptionsWrapper.getRowIdFunc();\n        var userGeneratingIds = getRowIdFunc != null;\n        if (!userGeneratingIds) {\n            this.selectionService.reset();\n        }\n        this.resetCache();\n        var event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    };\n    InfiniteRowModel.prototype.createModelUpdatedEvent = function () {\n        return {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            // not sure if these should all be false - noticed if after implementing,\n            // maybe they should be true?\n            newPage: false,\n            newData: false,\n            keepRenderedRows: true,\n            animate: false\n        };\n    };\n    InfiniteRowModel.prototype.resetCache = function () {\n        // if not first time creating a cache, need to destroy the old one\n        this.destroyCache();\n        this.cacheParams = {\n            // the user provided datasource\n            datasource: this.datasource,\n            // sort and filter model\n            filterModel: this.filterManager.getFilterModel(),\n            sortModel: this.sortController.getSortModel(),\n            rowNodeBlockLoader: this.rowNodeBlockLoader,\n            // properties - this way we take a snapshot of them, so if user changes any, they will be\n            // used next time we create a new cache, which is generally after a filter or sort change,\n            // or a new datasource is set\n            initialRowCount: this.defaultIfInvalid(this.gridOptionsWrapper.getInfiniteInitialRowCount(), 1),\n            maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),\n            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n            // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past\n            // the current page and request first row of next page\n            overflowSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheOverflowSize(), 1),\n            // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the\n            // server for one page at a time. so the default if not specified is 100.\n            blockSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheBlockSize(), 100),\n            // the cache could create this, however it is also used by the pages, so handy to create it\n            // here as the settings are also passed to the pages\n            lastAccessedSequence: new NumberSequence()\n        };\n        this.infiniteCache = this.createBean(new InfiniteCache(this.cacheParams));\n    };\n    InfiniteRowModel.prototype.defaultIfInvalid = function (value, defaultValue) {\n        return value > 0 ? value : defaultValue;\n    };\n    InfiniteRowModel.prototype.destroyCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache = this.destroyBean(this.infiniteCache);\n        }\n    };\n    InfiniteRowModel.prototype.onCacheUpdated = function () {\n        var event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    };\n    InfiniteRowModel.prototype.getRow = function (rowIndex) {\n        if (!this.infiniteCache) {\n            return undefined;\n        }\n        if (rowIndex >= this.infiniteCache.getRowCount()) {\n            return undefined;\n        }\n        return this.infiniteCache.getRow(rowIndex);\n    };\n    InfiniteRowModel.prototype.getRowNode = function (id) {\n        var result;\n        this.forEachNode(function (rowNode) {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n        });\n        return result;\n    };\n    InfiniteRowModel.prototype.forEachNode = function (callback) {\n        if (this.infiniteCache) {\n            this.infiniteCache.forEachNodeDeep(callback);\n        }\n    };\n    InfiniteRowModel.prototype.getTopLevelRowCount = function () {\n        return this.getRowCount();\n    };\n    InfiniteRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        return topLevelIndex;\n    };\n    InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n        if (this.rowHeight !== 0) { // avoid divide by zero error\n            var rowIndexForPixel = Math.floor(pixel / this.rowHeight);\n            var lastRowIndex = this.getRowCount() - 1;\n            if (rowIndexForPixel > lastRowIndex) {\n                return lastRowIndex;\n            }\n            return rowIndexForPixel;\n        }\n        return 0;\n    };\n    InfiniteRowModel.prototype.getRowCount = function () {\n        return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;\n    };\n    InfiniteRowModel.prototype.isRowPresent = function (rowNode) {\n        var foundRowNode = this.getRowNode(rowNode.id);\n        return !!foundRowNode;\n    };\n    InfiniteRowModel.prototype.refreshCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.refreshCache();\n        }\n    };\n    InfiniteRowModel.prototype.purgeCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.purgeCache();\n        }\n    };\n    // for iRowModel\n    InfiniteRowModel.prototype.isLastRowIndexKnown = function () {\n        if (this.infiniteCache) {\n            return this.infiniteCache.isLastRowIndexKnown();\n        }\n        return false;\n    };\n    InfiniteRowModel.prototype.setRowCount = function (rowCount, lastRowIndexKnown) {\n        if (this.infiniteCache) {\n            this.infiniteCache.setRowCount(rowCount, lastRowIndexKnown);\n        }\n    };\n    __decorate([\n        Autowired('filterManager')\n    ], InfiniteRowModel.prototype, \"filterManager\", void 0);\n    __decorate([\n        Autowired('sortController')\n    ], InfiniteRowModel.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('selectionService')\n    ], InfiniteRowModel.prototype, \"selectionService\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], InfiniteRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], InfiniteRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], InfiniteRowModel.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired('rowNodeBlockLoader')\n    ], InfiniteRowModel.prototype, \"rowNodeBlockLoader\", void 0);\n    __decorate([\n        PostConstruct\n    ], InfiniteRowModel.prototype, \"init\", null);\n    __decorate([\n        PreDestroy\n    ], InfiniteRowModel.prototype, \"destroyDatasource\", null);\n    InfiniteRowModel = __decorate([\n        Bean('rowModel')\n    ], InfiniteRowModel);\n    return InfiniteRowModel;\n}(BeanStub));\nexport { InfiniteRowModel };\n","import { ModuleNames } from \"@ag-grid-community/core\";\nimport { InfiniteRowModel } from \"./infiniteRowModel/infiniteRowModel\";\nexport var InfiniteRowModelModule = {\n    moduleName: ModuleNames.InfiniteRowModelModule,\n    rowModels: { infinite: InfiniteRowModel }\n};\n","var BaseCreator = /** @class */ (function () {\n    function BaseCreator() {\n    }\n    BaseCreator.prototype.setBeans = function (beans) {\n        this.beans = beans;\n    };\n    BaseCreator.prototype.getFileName = function (fileName) {\n        var extension = this.getDefaultFileExtension();\n        if (fileName == null || !fileName.length) {\n            fileName = this.getDefaultFileName();\n        }\n        return fileName.indexOf('.') === -1 ? fileName + \".\" + extension : fileName;\n    };\n    BaseCreator.prototype.getData = function (params) {\n        var serializingSession = this.createSerializingSession(params);\n        var data = this.beans.gridSerializer.serialize(serializingSession, params);\n        return data;\n    };\n    return BaseCreator;\n}());\nexport { BaseCreator };\n","var BaseGridSerializingSession = /** @class */ (function () {\n    function BaseGridSerializingSession(config) {\n        this.groupColumns = [];\n        var columnModel = config.columnModel, valueService = config.valueService, gridOptionsWrapper = config.gridOptionsWrapper, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, processGroupHeaderCallback = config.processGroupHeaderCallback, processRowGroupCallback = config.processRowGroupCallback;\n        this.columnModel = columnModel;\n        this.valueService = valueService;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.processCellCallback = processCellCallback;\n        this.processHeaderCallback = processHeaderCallback;\n        this.processGroupHeaderCallback = processGroupHeaderCallback;\n        this.processRowGroupCallback = processRowGroupCallback;\n    }\n    BaseGridSerializingSession.prototype.prepare = function (columnsToExport) {\n        this.groupColumns = columnsToExport.filter(function (col) { return !!col.getColDef().showRowGroup; });\n    };\n    BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {\n        var value = this.getHeaderName(this.processHeaderCallback, column);\n        return value != null ? value : '';\n    };\n    BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, accumulatedRowIndex, type, node) {\n        // we render the group summary text e.g. \"-> Parent -> Child\"...\n        var groupIndex = this.gridOptionsWrapper.isGroupMultiAutoColumn() ? node.rowGroupIndex : 0;\n        var renderGroupSummaryCell = \n        // on group rows\n        node && node.group\n            && (\n            // in the group column if groups appear in regular grid cells\n            index === groupIndex && this.groupColumns.indexOf(column) !== -1\n                // or the first cell in the row, if we're doing full width rows\n                || (index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnModel.isPivotMode())));\n        var valueForCell;\n        if (renderGroupSummaryCell) {\n            valueForCell = this.createValueForGroupNode(node);\n        }\n        else {\n            valueForCell = this.valueService.getValue(column, node);\n        }\n        var value = this.processCell(accumulatedRowIndex, node, column, valueForCell, this.processCellCallback, type);\n        return value != null ? value : '';\n    };\n    BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {\n        if (callback) {\n            return callback({\n                column: column,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext()\n            });\n        }\n        return this.columnModel.getDisplayNameForColumn(column, 'csv', true);\n    };\n    BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {\n        if (this.processRowGroupCallback) {\n            return this.processRowGroupCallback({\n                node: node,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n            });\n        }\n        var keys = [node.key];\n        if (!this.gridOptionsWrapper.isGroupMultiAutoColumn()) {\n            while (node.parent) {\n                node = node.parent;\n                keys.push(node.key);\n            }\n        }\n        return keys.reverse().join(' -> ');\n    };\n    BaseGridSerializingSession.prototype.processCell = function (accumulatedRowIndex, rowNode, column, value, processCellCallback, type) {\n        if (processCellCallback) {\n            return processCellCallback({\n                accumulatedRowIndex: accumulatedRowIndex,\n                column: column,\n                node: rowNode,\n                value: value,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n                type: type\n            });\n        }\n        return value != null ? value : '';\n    };\n    return BaseGridSerializingSession;\n}());\nexport { BaseGridSerializingSession };\n","var Downloader = /** @class */ (function () {\n    function Downloader() {\n    }\n    Downloader.download = function (fileName, content) {\n        var win = document.defaultView || window;\n        if (!win) {\n            console.warn('AG Grid: There is no `window` associated with the current `document`');\n            return;\n        }\n        var element = document.createElement('a');\n        // @ts-ignore\n        var url = win.URL.createObjectURL(content);\n        element.setAttribute('href', url);\n        element.setAttribute('download', fileName);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.dispatchEvent(new MouseEvent('click', {\n            bubbles: false,\n            cancelable: true,\n            view: win\n        }));\n        document.body.removeChild(element);\n        win.setTimeout(function () {\n            // @ts-ignore\n            win.URL.revokeObjectURL(url);\n        }, 0);\n    };\n    return Downloader;\n}());\nexport { Downloader };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Constants } from \"@ag-grid-community/core\";\nimport { BaseGridSerializingSession } from \"./baseGridSerializingSession\";\nvar LINE_SEPARATOR = '\\r\\n';\nvar CsvSerializingSession = /** @class */ (function (_super) {\n    __extends(CsvSerializingSession, _super);\n    function CsvSerializingSession(config) {\n        var _this = _super.call(this, config) || this;\n        _this.isFirstLine = true;\n        _this.result = '';\n        var suppressQuotes = config.suppressQuotes, columnSeparator = config.columnSeparator;\n        _this.suppressQuotes = suppressQuotes;\n        _this.columnSeparator = columnSeparator;\n        return _this;\n    }\n    CsvSerializingSession.prototype.addCustomContent = function (content) {\n        var _this = this;\n        if (!content) {\n            return;\n        }\n        if (typeof content === 'string') {\n            if (!/^\\s*\\n/.test(content)) {\n                this.beginNewLine();\n            }\n            // replace whatever newlines are supplied with the style we're using\n            content = content.replace(/\\r?\\n/g, LINE_SEPARATOR);\n            this.result += content;\n        }\n        else {\n            content.forEach(function (row) {\n                _this.beginNewLine();\n                row.forEach(function (cell, index) {\n                    if (index !== 0) {\n                        _this.result += _this.columnSeparator;\n                    }\n                    _this.result += _this.putInQuotes(cell.data.value || '');\n                    if (cell.mergeAcross) {\n                        _this.appendEmptyCells(cell.mergeAcross);\n                    }\n                });\n            });\n        }\n    };\n    CsvSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewHeaderGroupingRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function (header, index, span) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(header);\n        this.appendEmptyCells(span);\n    };\n    CsvSerializingSession.prototype.appendEmptyCells = function (count) {\n        for (var i = 1; i <= count; i++) {\n            this.result += this.columnSeparator + this.putInQuotes(\"\");\n        }\n    };\n    CsvSerializingSession.prototype.onNewHeaderRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewHeaderRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewHeaderRowColumn = function (column, index) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(this.extractHeaderValue(column));\n    };\n    CsvSerializingSession.prototype.onNewBodyRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewBodyRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewBodyRowColumn = function (column, index, node) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(this.extractRowCellValue(column, index, index, Constants.EXPORT_TYPE_CSV, node));\n    };\n    CsvSerializingSession.prototype.putInQuotes = function (value) {\n        if (this.suppressQuotes) {\n            return value;\n        }\n        if (value === null || value === undefined) {\n            return '\"\"';\n        }\n        var stringValue;\n        if (typeof value === 'string') {\n            stringValue = value;\n        }\n        else if (typeof value.toString === 'function') {\n            stringValue = value.toString();\n        }\n        else {\n            console.warn('AG Grid: unknown value type during csv conversion');\n            stringValue = '';\n        }\n        // replace each \" with \"\" (ie two sets of double quotes is how to do double quotes in csv)\n        var valueEscaped = stringValue.replace(/\"/g, \"\\\"\\\"\");\n        return '\"' + valueEscaped + '\"';\n    };\n    CsvSerializingSession.prototype.parse = function () {\n        return this.result;\n    };\n    CsvSerializingSession.prototype.beginNewLine = function () {\n        if (!this.isFirstLine) {\n            this.result += LINE_SEPARATOR;\n        }\n        this.isFirstLine = false;\n    };\n    return CsvSerializingSession;\n}(BaseGridSerializingSession));\nexport { CsvSerializingSession };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"@ag-grid-community/core\";\nimport { BaseCreator } from \"./baseCreator\";\nimport { Downloader } from \"./downloader\";\nimport { CsvSerializingSession } from \"./sessions/csvSerializingSession\";\nvar CsvCreator = /** @class */ (function (_super) {\n    __extends(CsvCreator, _super);\n    function CsvCreator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CsvCreator.prototype.postConstruct = function () {\n        this.setBeans({\n            gridSerializer: this.gridSerializer,\n            gridOptionsWrapper: this.gridOptionsWrapper\n        });\n    };\n    CsvCreator.prototype.getMergedParams = function (params) {\n        var baseParams = this.gridOptionsWrapper.getDefaultExportParams('csv');\n        return Object.assign({}, baseParams, params);\n    };\n    CsvCreator.prototype.export = function (userParams) {\n        if (this.isExportSuppressed()) {\n            console.warn(\"AG Grid: Export cancelled. Export is not allowed as per your configuration.\");\n            return '';\n        }\n        var mergedParams = this.getMergedParams(userParams);\n        var data = this.getData(mergedParams);\n        var packagedFile = new Blob([\"\\ufeff\", data], { type: 'text/plain' });\n        Downloader.download(this.getFileName(mergedParams.fileName), packagedFile);\n        return data;\n    };\n    CsvCreator.prototype.exportDataAsCsv = function (params) {\n        return this.export(params);\n    };\n    CsvCreator.prototype.getDataAsCsv = function (params) {\n        var mergedParams = this.getMergedParams(params);\n        return this.getData(mergedParams);\n    };\n    CsvCreator.prototype.getDefaultFileName = function () {\n        return 'export.csv';\n    };\n    CsvCreator.prototype.getDefaultFileExtension = function () {\n        return 'csv';\n    };\n    CsvCreator.prototype.createSerializingSession = function (params) {\n        var _a = this, columnModel = _a.columnModel, valueService = _a.valueService, gridOptionsWrapper = _a.gridOptionsWrapper;\n        var _b = params, processCellCallback = _b.processCellCallback, processHeaderCallback = _b.processHeaderCallback, processGroupHeaderCallback = _b.processGroupHeaderCallback, processRowGroupCallback = _b.processRowGroupCallback, suppressQuotes = _b.suppressQuotes, columnSeparator = _b.columnSeparator;\n        return new CsvSerializingSession({\n            columnModel: columnModel,\n            valueService: valueService,\n            gridOptionsWrapper: gridOptionsWrapper,\n            processCellCallback: processCellCallback || undefined,\n            processHeaderCallback: processHeaderCallback || undefined,\n            processGroupHeaderCallback: processGroupHeaderCallback || undefined,\n            processRowGroupCallback: processRowGroupCallback || undefined,\n            suppressQuotes: suppressQuotes || false,\n            columnSeparator: columnSeparator || ','\n        });\n    };\n    CsvCreator.prototype.isExportSuppressed = function () {\n        return this.gridOptionsWrapper.isSuppressCsvExport();\n    };\n    __decorate([\n        Autowired('columnModel')\n    ], CsvCreator.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], CsvCreator.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('gridSerializer')\n    ], CsvCreator.prototype, \"gridSerializer\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], CsvCreator.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], CsvCreator.prototype, \"postConstruct\", null);\n    CsvCreator = __decorate([\n        Bean('csvCreator')\n    ], CsvCreator);\n    return CsvCreator;\n}(BaseCreator));\nexport { CsvCreator };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, ColumnGroup, Constants, GroupInstanceIdCreator } from \"@ag-grid-community/core\";\nexport var RowType;\n(function (RowType) {\n    RowType[RowType[\"HEADER_GROUPING\"] = 0] = \"HEADER_GROUPING\";\n    RowType[RowType[\"HEADER\"] = 1] = \"HEADER\";\n    RowType[RowType[\"BODY\"] = 2] = \"BODY\";\n})(RowType || (RowType = {}));\nvar GridSerializer = /** @class */ (function (_super) {\n    __extends(GridSerializer, _super);\n    function GridSerializer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GridSerializer.prototype.serialize = function (gridSerializingSession, params) {\n        if (params === void 0) { params = {}; }\n        var columnsToExport = this.getColumnsToExport(params.allColumns, params.columnKeys);\n        var serializeChain = _.compose(\n        // first pass, put in the header names of the cols\n        this.prepareSession(columnsToExport), this.prependContent(params), this.exportColumnGroups(params, columnsToExport), this.exportHeaders(params, columnsToExport), this.processPinnedTopRows(params, columnsToExport), this.processRows(params, columnsToExport), this.processPinnedBottomRows(params, columnsToExport), this.appendContent(params));\n        return serializeChain(gridSerializingSession).parse();\n    };\n    GridSerializer.prototype.processRow = function (gridSerializingSession, params, columnsToExport, node) {\n        var _this = this;\n        var rowSkipper = params.shouldRowBeSkipped || (function () { return false; });\n        var gridOptionsWrapper = this.gridOptionsWrapper;\n        var context = gridOptionsWrapper.getContext();\n        var api = gridOptionsWrapper.getApi();\n        var columnApi = gridOptionsWrapper.getColumnApi();\n        var skipSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveSingleChildren();\n        var hideOpenParents = gridOptionsWrapper.isGroupHideOpenParents();\n        var skipLowestSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n        var isLeafNode = this.columnModel.isPivotMode() ? node.leafGroup : !node.group;\n        var skipRowGroups = params.skipGroups || params.skipRowGroups;\n        var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;\n        var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);\n        if (skipRowGroups && params.skipGroups) {\n            _.doOnce(function () { return console.warn('AG Grid: Since v25.2 `skipGroups` has been renamed to `skipRowGroups`.'); }, 'gridSerializer-skipGroups');\n        }\n        var rowPosition = { rowIndex: node.rowIndex, rowPinned: node.rowPinned };\n        if ((!isLeafNode && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents)) ||\n            (params.onlySelected && !node.isSelected()) ||\n            (params.rowNodes && !params.rowNodes.some(function (position) { return _this.rowPositionUtils.sameRow(position, rowPosition); })) ||\n            (params.skipPinnedTop && node.rowPinned === 'top') ||\n            (params.skipPinnedBottom && node.rowPinned === 'bottom')) {\n            return;\n        }\n        // if we are in pivotMode, then the grid will show the root node only\n        // if it's not a leaf group\n        var nodeIsRootNode = node.level === -1;\n        if (nodeIsRootNode && !node.leafGroup) {\n            return;\n        }\n        var shouldRowBeSkipped = rowSkipper({ node: node, api: api, context: context });\n        if (shouldRowBeSkipped) {\n            return;\n        }\n        var rowAccumulator = gridSerializingSession.onNewBodyRow();\n        columnsToExport.forEach(function (column, index) {\n            rowAccumulator.onColumn(column, index, node);\n        });\n        if (params.getCustomContentBelowRow) {\n            var content = params.getCustomContentBelowRow({ node: node, api: api, columnApi: columnApi, context: context });\n            if (content) {\n                gridSerializingSession.addCustomContent(content);\n            }\n        }\n    };\n    GridSerializer.prototype.appendContent = function (params) {\n        return function (gridSerializingSession) {\n            var appendContent = params.customFooter || params.appendContent;\n            if (appendContent) {\n                if (params.customFooter) {\n                    _.doOnce(function () { return console.warn('AG Grid: Since version 25.2.0 the `customFooter` param has been deprecated. Use `appendContent` instead.'); }, 'gridSerializer-customFooter');\n                }\n                gridSerializingSession.addCustomContent(appendContent);\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.prependContent = function (params) {\n        return function (gridSerializingSession) {\n            var prependContent = params.customHeader || params.prependContent;\n            if (prependContent) {\n                if (params.customHeader) {\n                    _.doOnce(function () { return console.warn('AG Grid: Since version 25.2.0 the `customHeader` param has been deprecated. Use `prependContent` instead.'); }, 'gridSerializer-customHeader');\n                }\n                gridSerializingSession.addCustomContent(prependContent);\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.prepareSession = function (columnsToExport) {\n        return function (gridSerializingSession) {\n            gridSerializingSession.prepare(columnsToExport);\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.exportColumnGroups = function (params, columnsToExport) {\n        var _this = this;\n        return function (gridSerializingSession) {\n            if (!params.skipColumnGroupHeaders) {\n                var groupInstanceIdCreator = new GroupInstanceIdCreator();\n                var displayedGroups = _this.displayedGroupCreator.createDisplayedGroups(columnsToExport, _this.columnModel.getGridBalancedTree(), groupInstanceIdCreator, null);\n                _this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);\n            }\n            else if (params.columnGroups) {\n                _.doOnce(function () { return console.warn('AG Grid: Since v25.2 the `columnGroups` param has deprecated, and groups are exported by default.'); }, 'gridSerializer-columnGroups');\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.exportHeaders = function (params, columnsToExport) {\n        return function (gridSerializingSession) {\n            if (!params.skipHeader && !params.skipColumnHeaders) {\n                var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();\n                columnsToExport.forEach(function (column, index) {\n                    gridRowIterator_1.onColumn(column, index, undefined);\n                });\n            }\n            else if (params.skipHeader) {\n                _.doOnce(function () { return console.warn('AG Grid: Since v25.2 the `skipHeader` param has been renamed to `skipColumnHeaders`.'); }, 'gridSerializer-skipHeader');\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.processPinnedTopRows = function (params, columnsToExport) {\n        var _this = this;\n        return function (gridSerializingSession) {\n            var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);\n            _this.pinnedRowModel.forEachPinnedTopRow(processRow);\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.processRows = function (params, columnsToExport) {\n        var _this = this;\n        return function (gridSerializingSession) {\n            // when in pivot mode, we always render cols on screen, never 'all columns'\n            var rowModel = _this.rowModel;\n            var rowModelType = rowModel.getType();\n            var usingCsrm = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n            var usingSsrm = rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;\n            var onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;\n            var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);\n            if (_this.columnModel.isPivotMode()) {\n                if (usingCsrm) {\n                    rowModel.forEachPivotNode(processRow);\n                }\n                else {\n                    // must be enterprise, so we can just loop through all the nodes\n                    rowModel.forEachNode(processRow);\n                }\n            }\n            else {\n                // onlySelectedAllPages: user doing pagination and wants selected items from\n                // other pages, so cannot use the standard row model as it won't have rows from\n                // other pages.\n                // onlySelectedNonStandardModel: if user wants selected in non standard row model\n                // (eg viewport) then again RowModel cannot be used, so need to use selected instead.\n                if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {\n                    var selectedNodes = _this.selectionService.getSelectedNodes();\n                    selectedNodes.forEach(processRow);\n                }\n                else {\n                    // here is everything else - including standard row model and selected. we don't use\n                    // the selection model even when just using selected, so that the result is the order\n                    // of the rows appearing on the screen.\n                    if (usingCsrm) {\n                        rowModel.forEachNodeAfterFilterAndSort(processRow);\n                    }\n                    else if (usingSsrm) {\n                        rowModel.forEachNodeAfterFilterAndSort(processRow);\n                    }\n                    else {\n                        rowModel.forEachNode(processRow);\n                    }\n                }\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.processPinnedBottomRows = function (params, columnsToExport) {\n        var _this = this;\n        return function (gridSerializingSession) {\n            var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);\n            _this.pinnedRowModel.forEachPinnedBottomRow(processRow);\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.getColumnsToExport = function (allColumns, columnKeys) {\n        if (allColumns === void 0) { allColumns = false; }\n        var isPivotMode = this.columnModel.isPivotMode();\n        if (columnKeys && columnKeys.length) {\n            return this.columnModel.getGridColumns(columnKeys);\n        }\n        if (allColumns && !isPivotMode) {\n            // add auto group column for tree data\n            var columns = this.gridOptionsWrapper.isTreeData()\n                ? this.columnModel.getGridColumns([Constants.GROUP_AUTO_COLUMN_ID])\n                : [];\n            return columns.concat(this.columnModel.getAllPrimaryColumns() || []);\n        }\n        return this.columnModel.getAllDisplayedColumns();\n    };\n    GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession, processGroupHeaderCallback) {\n        var directChildrenHeaderGroups = [];\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            if (!columnGroup.getChildren) {\n                return;\n            }\n            columnGroup.getChildren().forEach(function (it) { return directChildrenHeaderGroups.push(it); });\n        });\n        if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {\n            this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);\n        }\n        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\n            this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);\n        }\n    };\n    GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups, processGroupHeaderCallback) {\n        var _this = this;\n        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();\n        var columnIndex = 0;\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            var name;\n            if (processGroupHeaderCallback) {\n                name = processGroupHeaderCallback({\n                    columnGroup: columnGroup,\n                    api: _this.gridOptionsWrapper.getApi(),\n                    columnApi: _this.gridOptionsWrapper.getColumnApi(),\n                    context: _this.gridOptionsWrapper.getContext()\n                });\n            }\n            else {\n                name = _this.columnModel.getDisplayNameForColumnGroup(columnGroup, 'header');\n            }\n            var collapsibleGroupRanges = columnGroup.getLeafColumns().reduce(function (collapsibleGroups, currentColumn, currentIdx, arr) {\n                var lastGroup = _.last(collapsibleGroups);\n                var groupShow = currentColumn.getColumnGroupShow() === 'open';\n                if (!groupShow) {\n                    if (lastGroup && lastGroup[1] == null) {\n                        lastGroup[1] = currentIdx - 1;\n                    }\n                }\n                else if (!lastGroup || lastGroup[1] != null) {\n                    lastGroup = [currentIdx];\n                    collapsibleGroups.push(lastGroup);\n                }\n                if (currentIdx === arr.length - 1 && lastGroup && lastGroup[1] == null) {\n                    lastGroup[1] = currentIdx;\n                }\n                return collapsibleGroups;\n            }, []);\n            gridRowIterator.onColumn(name || '', columnIndex++, columnGroup.getLeafColumns().length - 1, collapsibleGroupRanges);\n        });\n    };\n    __decorate([\n        Autowired('displayedGroupCreator')\n    ], GridSerializer.prototype, \"displayedGroupCreator\", void 0);\n    __decorate([\n        Autowired('columnModel')\n    ], GridSerializer.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], GridSerializer.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('pinnedRowModel')\n    ], GridSerializer.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        Autowired('selectionService')\n    ], GridSerializer.prototype, \"selectionService\", void 0);\n    __decorate([\n        Autowired('rowPositionUtils')\n    ], GridSerializer.prototype, \"rowPositionUtils\", void 0);\n    GridSerializer = __decorate([\n        Bean(\"gridSerializer\")\n    ], GridSerializer);\n    return GridSerializer;\n}(BeanStub));\nexport { GridSerializer };\n","import { ModuleNames } from \"@ag-grid-community/core\";\nimport { CsvCreator } from \"./csvExport/csvCreator\";\nimport { GridSerializer } from \"./csvExport/gridSerializer\";\nexport var CsvExportModule = {\n    moduleName: ModuleNames.CsvExportModule,\n    beans: [CsvCreator, GridSerializer]\n};\n","var LINE_SEPARATOR = '\\r\\n';\nvar XmlFactory = /** @class */ (function () {\n    function XmlFactory() {\n    }\n    XmlFactory.createHeader = function (headerElement) {\n        if (headerElement === void 0) { headerElement = {}; }\n        var headerStart = '<?';\n        var headerEnd = '?>';\n        var keys = ['version'];\n        if (!headerElement.version) {\n            headerElement.version = \"1.0\";\n        }\n        if (headerElement.encoding) {\n            keys.push('encoding');\n        }\n        if (headerElement.standalone) {\n            keys.push('standalone');\n        }\n        var att = keys.map(function (key) { return key + \"=\\\"\" + headerElement[key] + \"\\\"\"; }).join(' ');\n        return headerStart + \"xml \" + att + \" \" + headerEnd;\n    };\n    XmlFactory.createXml = function (xmlElement, booleanTransformer) {\n        var _this = this;\n        var props = '';\n        if (xmlElement.properties) {\n            if (xmlElement.properties.prefixedAttributes) {\n                xmlElement.properties.prefixedAttributes.forEach(function (prefixedSet) {\n                    Object.keys(prefixedSet.map).forEach(function (key) {\n                        props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);\n                    });\n                });\n            }\n            if (xmlElement.properties.rawMap) {\n                Object.keys(xmlElement.properties.rawMap).forEach(function (key) {\n                    props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);\n                });\n            }\n        }\n        var result = '<' + xmlElement.name + props;\n        if (!xmlElement.children && xmlElement.textNode == null) {\n            return result + '/>' + LINE_SEPARATOR;\n        }\n        if (xmlElement.textNode != null) {\n            return result + '>' + xmlElement.textNode + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n        }\n        result += '>' + LINE_SEPARATOR;\n        if (xmlElement.children) {\n            xmlElement.children.forEach(function (it) {\n                result += _this.createXml(it, booleanTransformer);\n            });\n        }\n        return result + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n    };\n    XmlFactory.returnAttributeIfPopulated = function (key, value, booleanTransformer) {\n        if (!value && value !== '' && value !== 0) {\n            return '';\n        }\n        var xmlValue = value;\n        if ((typeof (value) === 'boolean')) {\n            if (booleanTransformer) {\n                xmlValue = booleanTransformer(value);\n            }\n        }\n        return \" \" + key + \"=\\\"\" + xmlValue + \"\\\"\";\n    };\n    return XmlFactory;\n}());\nexport { XmlFactory };\n","var __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { _ } from \"@ag-grid-community/core\";\n// table for crc calculation\n// from: https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references\nvar crcTable = new Uint32Array([\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,\n    0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,\n    0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,\n    0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\n    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,\n    0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,\n    0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,\n    0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,\n    0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,\n    0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,\n    0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\n    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,\n    0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,\n    0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,\n    0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,\n    0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,\n    0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,\n    0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,\n    0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,\n    0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,\n    0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,\n    0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\n    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,\n    0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,\n    0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,\n    0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,\n    0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\n    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d\n]);\nvar ZipContainer = /** @class */ (function () {\n    function ZipContainer() {\n    }\n    ZipContainer.addFolders = function (paths) {\n        paths.forEach(this.addFolder.bind(this));\n    };\n    ZipContainer.addFolder = function (path) {\n        this.folders.push({\n            path: path,\n            created: new Date(),\n            isBase64: false\n        });\n    };\n    ZipContainer.addFile = function (path, content, isBase64) {\n        if (isBase64 === void 0) { isBase64 = false; }\n        this.files.push({\n            path: path,\n            created: new Date(),\n            content: content,\n            isBase64: isBase64\n        });\n    };\n    ZipContainer.getContent = function (mimeType) {\n        if (mimeType === void 0) { mimeType = 'application/zip'; }\n        var textOutput = this.buildFileStream();\n        var uInt8Output = this.buildUint8Array(textOutput);\n        this.clearStream();\n        return new Blob([uInt8Output], { type: mimeType });\n    };\n    ZipContainer.clearStream = function () {\n        this.folders = [];\n        this.files = [];\n    };\n    ZipContainer.buildFileStream = function (fData) {\n        var e_1, _a;\n        if (fData === void 0) { fData = ''; }\n        var totalFiles = this.folders.concat(this.files);\n        var len = totalFiles.length;\n        var foData = '';\n        var lL = 0;\n        var cL = 0;\n        try {\n            for (var totalFiles_1 = __values(totalFiles), totalFiles_1_1 = totalFiles_1.next(); !totalFiles_1_1.done; totalFiles_1_1 = totalFiles_1.next()) {\n                var currentFile = totalFiles_1_1.value;\n                var _b = this.getHeader(currentFile, lL), fileHeader = _b.fileHeader, folderHeader = _b.folderHeader, content = _b.content;\n                lL += fileHeader.length + content.length;\n                cL += folderHeader.length;\n                fData += fileHeader + content;\n                foData += folderHeader;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (totalFiles_1_1 && !totalFiles_1_1.done && (_a = totalFiles_1.return)) _a.call(totalFiles_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var foEnd = this.buildFolderEnd(len, cL, lL);\n        return fData + foData + foEnd;\n    };\n    ZipContainer.getHeader = function (currentFile, offset) {\n        var content = currentFile.content, path = currentFile.path, created = currentFile.created, isBase64 = currentFile.isBase64;\n        var utf8_encode = _.utf8_encode, decToHex = _.decToHex;\n        var utfPath = utf8_encode(path);\n        var isUTF8 = utfPath !== path;\n        var time = this.convertTime(created);\n        var dt = this.convertDate(created);\n        var extraFields = '';\n        if (isUTF8) {\n            var uExtraFieldPath = decToHex(1, 1) + decToHex(this.getFromCrc32Table(utfPath), 4) + utfPath;\n            extraFields = \"\\x75\\x70\" + decToHex(uExtraFieldPath.length, 2) + uExtraFieldPath;\n        }\n        var _a = !content ? { size: 0, content: '' } : this.getConvertedContent(content, isBase64), size = _a.size, convertedContent = _a.content;\n        var header = '\\x0A\\x00' +\n            (isUTF8 ? '\\x00\\x08' : '\\x00\\x00') +\n            '\\x00\\x00' +\n            decToHex(time, 2) + // last modified time\n            decToHex(dt, 2) + // last modified date\n            decToHex(size ? this.getFromCrc32Table(convertedContent) : 0, 4) +\n            decToHex(size, 4) + // compressed size\n            decToHex(size, 4) + // uncompressed size\n            decToHex(utfPath.length, 2) + // file name length\n            decToHex(extraFields.length, 2); // extra field length\n        var fileHeader = 'PK\\x03\\x04' + header + utfPath + extraFields;\n        var folderHeader = 'PK\\x01\\x02' + // central header\n            '\\x14\\x00' +\n            header + // file header\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            (content ? '\\x00\\x00\\x00\\x00' : '\\x10\\x00\\x00\\x00') + // external file attributes\n            decToHex(offset, 4) + // relative offset of local header\n            utfPath + // file name\n            extraFields; // extra field\n        return { fileHeader: fileHeader, folderHeader: folderHeader, content: convertedContent || '' };\n    };\n    ZipContainer.getConvertedContent = function (content, isBase64) {\n        if (isBase64 === void 0) { isBase64 = false; }\n        if (isBase64) {\n            content = content.split(';base64,')[1];\n        }\n        content = isBase64 ? atob(content) : content;\n        return {\n            size: content.length,\n            content: content\n        };\n    };\n    ZipContainer.buildFolderEnd = function (tLen, cLen, lLen) {\n        var decToHex = _.decToHex;\n        return 'PK\\x05\\x06' + // central folder end\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            decToHex(tLen, 2) + // total number of entries in the central folder\n            decToHex(tLen, 2) + // total number of entries in the central folder\n            decToHex(cLen, 4) + // size of the central folder\n            decToHex(lLen, 4) + // central folder start offset\n            '\\x00\\x00';\n    };\n    ZipContainer.buildUint8Array = function (content) {\n        var uint8 = new Uint8Array(content.length);\n        for (var i = 0; i < uint8.length; i++) {\n            uint8[i] = content.charCodeAt(i);\n        }\n        return uint8;\n    };\n    ZipContainer.getFromCrc32Table = function (content) {\n        if (!content.length) {\n            return 0;\n        }\n        var size = content.length;\n        var iterable = new Uint8Array(size);\n        for (var i = 0; i < size; i++) {\n            iterable[i] = content.charCodeAt(i);\n        }\n        var crc = 0 ^ (-1);\n        var j = 0;\n        var k = 0;\n        var l = 0;\n        for (var i = 0; i < size; i++) {\n            j = iterable[i];\n            k = (crc ^ j) & 0xFF;\n            l = crcTable[k];\n            crc = (crc >>> 8) ^ l;\n        }\n        return crc ^ (-1);\n    };\n    ZipContainer.convertTime = function (date) {\n        var time = date.getHours();\n        time <<= 6;\n        time = time | date.getMinutes();\n        time <<= 5;\n        time = time | date.getSeconds() / 2;\n        return time;\n    };\n    ZipContainer.convertDate = function (date) {\n        var dt = date.getFullYear() - 1980;\n        dt <<= 4;\n        dt = dt | (date.getMonth() + 1);\n        dt <<= 5;\n        dt = dt | date.getDate();\n        return dt;\n    };\n    ZipContainer.folders = [];\n    ZipContainer.files = [];\n    return ZipContainer;\n}());\nexport { ZipContainer };\n","import { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { InfiniteRowModelModule } from '@ag-grid-community/infinite-row-model';\nimport { CsvExportModule } from '@ag-grid-community/csv-export';\nexport var AllCommunityModules = [ClientSideRowModelModule, InfiniteRowModelModule, CsvExportModule];\nexport * from \"@ag-grid-community/client-side-row-model\";\nexport * from \"@ag-grid-community/csv-export\";\nexport * from \"@ag-grid-community/infinite-row-model\";\nexport * from \"@ag-grid-community/core\";\n"],"sourceRoot":"webpack:///","file":"default-projects_ng-dialogs_src_app_shared_constants_default-grid-options_constants_ts-node_m-956a3f.bf5c630c781c92c4.js"}