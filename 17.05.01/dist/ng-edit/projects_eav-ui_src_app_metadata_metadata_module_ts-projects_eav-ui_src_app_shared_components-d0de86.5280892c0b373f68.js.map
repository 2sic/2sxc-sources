{"version":3,"file":"projects_eav-ui_src_app_metadata_metadata_module_ts-projects_eav-ui_src_app_shared_components-d0de86.5280892c0b373f68.js","mappings":"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","names":["metadataDialog","name","initContext","panelSize","panelClass","getComponent","_asyncToGenerator","MetadataComponent","Promise","all","__webpack_require__","e","then","bind","routes","path","component","DialogEntryComponent","data","dialog","children","matcher","edit","loadChildren","m","EditModule","refreshEdit","RefreshEditModule","MetadataRoutingModule","static","this","t","fesm2022_core","a4G","s3X","RouterModule","forChild","MetadataModule","Context","MetadataService","EntitiesService","provide","MAT_FORM_FIELD_DEFAULT_OPTIONS","useValue","subscriptSizing","MAT_SELECT_CONFIG","hideSingleSelectionIndicator","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","hideIcon","imports","CommonModule","SharedComponentsModule","MatDialogModule","MatButtonModule","MatIconModule","SxcGridModule","MatRippleModule","MatSnackBarModule","ReactiveFormsModule","MatFormFieldModule","MatSelectModule","MatInputModule","MatSlideToggleModule","EcoFabSpeedDialModule","MatBadgeModule","MatCardModule","BaseComponent","BaseSubsinkComponent","constructor","router","route","log","super","EavLogger","ngOnDestroy","refreshOnChildClosedShallow","events","pipe","filter","event","NavigationEnd","startWith","snapshot","firstChild","map","pairwise","hadChild","hasChild","i0","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_7__","Sc5","features","IdFieldComponent","snackBar","agInit","params","id","value","align","tooltip","tooltipGetter","refresh","copy","copyToClipboard","open","duration","_angular_core__WEBPACK_IMPORTED_MODULE_1__","In1","selectors","decls","vars","consts","template","rf","ctx","_c0","defaultGridOptions","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","valueCache","defaultColDef","filterParams","newRowsAction","tooltipShowDelay","tooltipHideDelay","suppressMovableColumns","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/metadata/metadata-dialog.config.ts","./projects/eav-ui/src/app/metadata/metadata-routing.module.ts","./projects/eav-ui/src/app/metadata/metadata.module.ts","./projects/eav-ui/src/app/shared/components/base-component/base.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.html","./projects/eav-ui/src/app/shared/constants/default-grid-options.constants.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const metadataDialog: DialogConfig = {\r\n  name: 'METADATA_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { MetadataComponent } = await import('./metadata.component');\r\n    return MetadataComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../edit/edit.matcher';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { metadataDialog } from './metadata-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: metadataDialog }, children: [\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n      {\r\n        matcher: refreshEdit,\r\n        loadChildren: () => import('../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class MetadataRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MAT_SELECT_CONFIG, MatSelectModule } from '@angular/material/select';\r\nimport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { EcoFabSpeedDialModule } from '@ecodev/fab-speed-dial';\r\nimport { EntitiesService } from '../content-items/services/entities.service';\r\nimport { MetadataService } from '../permissions';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ConfirmDeleteDialogComponent } from './confirm-delete-dialog/confirm-delete-dialog.component';\r\nimport { MetadataActionsComponent } from './metadata-actions/metadata-actions.component';\r\nimport { MetadataContentTypeComponent } from './metadata-content-type/metadata-content-type.component';\r\nimport { MetadataRoutingModule } from './metadata-routing.module';\r\nimport { MetadataSaveDialogComponent } from './metadata-save-dialog/metadata-save-dialog.component';\r\nimport { MetadataComponent } from './metadata.component';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatCardModule } from '@angular/material/card';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MetadataComponent,\r\n    MetadataActionsComponent,\r\n    MetadataSaveDialogComponent,\r\n    MetadataContentTypeComponent,\r\n    ConfirmDeleteDialogComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MetadataRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    SxcGridModule,\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatInputModule,\r\n    MatSlideToggleModule,\r\n    EcoFabSpeedDialModule,\r\n    MatBadgeModule,\r\n    MatCardModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    MetadataService,\r\n    EntitiesService,\r\n    { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { subscriptSizing: 'dynamic' } },\r\n    { provide: MAT_SELECT_CONFIG, useValue: { hideSingleSelectionIndicator: true } },\r\n    { provide: MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, useValue: { hideIcon: true } }\r\n  ],\r\n})\r\nexport class MetadataModule { }\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { BaseSubsinkComponent } from '../base-subsink-component/base-subsink.component';\r\nimport { EavLogger } from '../../logging/eav-logger';\r\n\r\n@Directive()\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport class BaseComponent extends BaseSubsinkComponent implements OnDestroy {\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    public log?: EavLogger\r\n  ) {\r\n    super();\r\n    this.log ??= new EavLogger('BaseComponent', false);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  // TODO @2dg not longer in use after refactoring SideNav with Routing\r\n  // protected refreshOnChildClosedDeep() {\r\n  //   return this.router.events.pipe(\r\n  //     filter(event => event instanceof NavigationEnd),\r\n  //     startWith(!!this.route.snapshot.firstChild.firstChild),\r\n  //     map(() => !!this.route.snapshot.firstChild.firstChild),\r\n  //     pairwise(),\r\n  //     filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n  //   )\r\n  // }\r\n\r\n  protected refreshOnChildClosedShallow() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n    )\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy(): void {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>","import { GridOptions } from '@ag-grid-community/core';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  tooltipHideDelay: 100000,\r\n  suppressMovableColumns: true,\r\n} as const;\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}