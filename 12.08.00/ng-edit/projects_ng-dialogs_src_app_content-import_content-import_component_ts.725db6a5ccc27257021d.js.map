{"version":3,"sources":["./projects/ng-dialogs/src/app/content-import/content-import.component.html","./projects/ng-dialogs/src/app/content-import/content-import.component.ts"],"names":["dialogData","dialogRef","route","contentImportService","appDialogConfigService","contentTypesService","hostClass","contentType$","loading$","viewStates","waiting","default","evaluated","imported","viewStateSelected$","this","evaluationResult$","importResult$","templateVars$","pipe","contentType","loading","viewStateSelected","evaluationResult","importResult","errors","0","1","2","3","4","5","6","7","8","contentTypeStaticName","snapshot","paramMap","get","ngOnInit","next","retrieveContentType","dialogSettings$","getDialogSettings","subscribe","dialogSettings","formValues","defaultLanguage","Context","Language","Primary","file","files","resourcesReferences","clearEntities","ngOnDestroy","complete","closeDialog","close","evaluateContent","result","importContent","back","fileChange","event","target","filesDropped","ContentImportComponent"],"mappings":"0bAiBM,sBACE,kBACE,eACE,qBAAoD,kDAAS,UAC3D,gBAAM,SAAoE,QAC5E,QACA,uBAA8B,oEAA9B,QACF,QAEA,eACE,iBAAuB,wCAA2B,QAClD,+BAAiB,8FACf,gCACE,6EACF,QACA,gCACE,iDACF,QACF,QACF,QAEA,gBACE,iBAAuB,qCAAwB,QAC/C,+BAAiB,wFACf,gCACE,oDACF,QACA,gCACE,sDACF,QACF,QACF,QAEA,iBAAgB,+CAAkC,QACpD,QAEA,mBACE,sBAA0B,kEAAwB,mBAAM,QACxD,sBACE,sEACA,6BACF,QACF,QACF,Q,uBAvCc,+EAOS,2DAYA,qDAesB,yE,sBAS7C,gBAA8C,2CAA+B,S,yBAOzE,kBACE,gBAA6B,SAA+C,QAC5E,gBAA6B,0BAAc,QAC3C,iBACE,cAAI,SAAyF,QAC7F,cAAI,SAAqE,QACzE,eAAI,UACoE,QAC1E,QACA,iBAA6B,0CAA6B,QAC1D,kBACE,eAAI,UAA+E,QACnF,eAAI,UAA+E,QACnF,eAAI,UAA+E,QACnF,eAAI,UACqE,QAC3E,QACA,iBAAgB,+EAAkE,QACpF,S,mCAjB+B,kEAGvB,uGACA,mFACA,2JAKA,6FACA,6FACA,6FACA,qK,yBAYF,eAA+B,aAAG,SAAgC,QAAI,S,6BAApC,8C,yBAClC,eAA8B,aAAG,SAA+B,QAAI,S,6BAAnC,6C,yBACjC,eAA8B,aAAG,SAAoC,QAAI,S,6BAAxC,kD,yBAJnC,cACE,eAAK,SAA6B,QAClC,uBACA,uBACA,uBACF,S,kCAJO,sCACC,qCACA,oCACA,qC,yBAPZ,kBACE,gBAA6B,SAA+C,QAC5E,iBACE,uBAMF,QACF,S,mCAT+B,kEAEL,qD,sCA1B5B,SAEE,0BAqBA,wBAYA,kBACE,qBAA0B,2DAAiB,gBAAI,QAC/C,qBACE,oEACA,oBACF,QACF,QACF,Q,4BAxCQ,kDAqBA,mDAcqC,wD,yBAtC/C,SACE,gCA2CF,S,yBA3CiB,2C,sBAiDb,aAAqC,wBAAY,S,sBACjD,aAAsC,0BAAc,S,yBAFtD,kBACE,qBACA,qBACF,S,yBAFM,8CACA,gD,sCAHR,eACE,wBAIA,kBACE,qBAAyC,kEAAwB,iBAAK,QACxE,QACF,Q,4BAPQ,uC,yBAxGZ,SACE,WAGE,yBA+CA,qBAIA,iCAgDA,wBAUF,QACF,S,wBAjHgB,+CAGgC,iCA+CxC,iCAIW,iCAgDT,kC,sCApHZ,iBAA2E,2EAGzE,iBACE,iBAA8B,SAAwC,QACxE,QAEA,eACE,oOAEA,eAAgD,iCAAqB,QAAK,oCAC5E,QAEA,gCAmHF,Q,+BAhIgD,gCAId,8EASjB,2CCDjB,iBAwCE,WACmCA,EACzBC,EACAC,EACAC,EACAC,EACAC,GALyB,KAAAL,aACzB,KAAAC,YACA,KAAAC,QACA,KAAAC,uBACA,KAAAC,yBACA,KAAAC,sBAxCgB,KAAAC,UAAY,mBAG9B,KAAAC,aAAe,IAAI,IAA6B,MAChD,KAAAC,SAAW,IAAI,KAAgB,GAC/B,KAAAC,WAAa,CACnBC,QAAS,EACTC,QAAS,EACTC,UAAW,EACXC,SAAU,GAEJ,KAAAC,mBAAqB,IAAI,IAAwBC,KAAKN,WAAWE,SACjE,KAAAK,kBAAoB,IAAI,IAAuC,MAC/D,KAAAC,cAAgB,IAAI,IAAqC,MACjE,KAAAC,eAAgB,QAAc,CAC5BH,KAAKR,aAAcQ,KAAKP,SAAUO,KAAKD,mBAAoBC,KAAKC,kBAAmBD,KAAKE,gBACvFE,MACD,OAAI,SAAC,G,IAAA,gBACH,OAAGC,YADY,KACCC,QADQ,KACCC,kBADkB,KACCC,iBADiB,KACCC,aADa,SAG/E,KAAAC,OAAiC,CAC/BC,EAAG,yBACHC,EAAG,wCACHC,EAAG,oCACHC,EAAG,yEACHC,EAAG,iCACHC,EAAG,gEACHC,EAAG,sEACHC,EAAG,mFACHC,EAAG,8DAGG,KAAAC,sBAAwBpB,KAAKb,MAAMkC,SAASC,SAASC,IAAI,yB,OAWjE,YAAAC,SAAA,sBACExB,KAAKP,SAASgC,MAAK,GACnB,IAAMjC,EAAeQ,KAAKV,oBAAoBoC,oBAAoB1B,KAAKoB,uBACjEO,EAAkB3B,KAAKX,uBAAuBuC,qBACpD,OAAS,CAACpC,EAAcmC,IAAkBE,UAAU,SAAC,G,IAAA,gBAAcC,EAAc,KAC/E,EAAKtC,aAAaiC,KAD6C,MAE/D,EAAKM,WAAa,CAChBC,gBAAiBF,EAAeG,QAAQC,SAASC,QACjD9B,YAAa,EAAKe,sBAClBgB,KAA+B,MAAzB,EAAKnD,WAAWoD,MAAgB,EAAKpD,WAAWoD,MAAM,GAAK,KACjEC,oBAAqB,OACrBC,cAAe,QAEjB,EAAK9C,SAASgC,MAAK,MAIvB,YAAAe,YAAA,WACExC,KAAKR,aAAaiD,WAClBzC,KAAKP,SAASgD,WACdzC,KAAKD,mBAAmB0C,WACxBzC,KAAKC,kBAAkBwC,WACvBzC,KAAKE,cAAcuC,YAGrB,YAAAC,YAAA,WACE1C,KAAKd,UAAUyD,SAGjB,YAAAC,gBAAA,sBACE5C,KAAKD,mBAAmB0B,KAAKzB,KAAKN,WAAWC,SAC7CK,KAAKZ,qBAAqBwD,gBAAgB5C,KAAK+B,YAAYF,UAAU,SAAAgB,GACnE,EAAK5C,kBAAkBwB,KAAKoB,GAC5B,EAAK9C,mBAAmB0B,KAAK,EAAK/B,WAAWG,cAIjD,YAAAiD,cAAA,sBACE9C,KAAKD,mBAAmB0B,KAAKzB,KAAKN,WAAWC,SAC7CK,KAAKZ,qBAAqB0D,cAAc9C,KAAK+B,YAAYF,UAAU,SAAAgB,GACjE,EAAK3C,cAAcuB,KAAKoB,GACxB,EAAK9C,mBAAmB0B,KAAK,EAAK/B,WAAWI,aAIjD,YAAAiD,KAAA,WACE/C,KAAKD,mBAAmB0B,KAAKzB,KAAKN,WAAWE,SAC7CI,KAAKC,kBAAkBwB,KAAK,OAG9B,YAAAuB,WAAA,SAAWC,GACTjD,KAAK+B,WAAWK,KAAQa,EAAMC,OAA4Bb,MAAM,IAGlE,YAAAc,aAAA,SAAad,GAEXrC,KAAK+B,WAAWK,KADGC,EAAM,I,sCAnGhBe,GAAsB,MAoCvB,MAAe,2D,wBApCdA,EAAsB,8E,q3CDjBnC,wB,uBACG,0C,wqBCWH","file":"projects_ng-dialogs_src_app_content-import_content-import_component_ts.725db6a5ccc27257021d.js","sourcesContent":["<div class=\"dialog-form-wrapper\" appDragAndDrop [allowedFileTypes]=\"'xml'\" (filesDropped)=\"filesDropped($event)\"\r\n  *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">{{ data.contentType?.Name }} Import Data</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This will import content-items into 2sxc. It requires that you already defined the content-type before you try\r\n    importing, and that you created the import-file using the template provided by the Export. Please visit\r\n    <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n  </p>\r\n\r\n  <ng-container *ngIf=\"formValues != null\">\r\n    <ng-container [ngSwitch]=\"data.viewStateSelected\">\r\n\r\n      <!-- FORM -->\r\n      <form #ngForm=\"ngForm\" class=\"dialog-form\" *ngSwitchCase=\"1\">\r\n        <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n          <div>\r\n            <button mat-raised-button tippy=\"Open file browser\" (click)=\"fileInput.click()\">\r\n              <span>{{ formValues.file ? formValues.file.name : 'Select or drop file' }}</span>\r\n            </button>\r\n            <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n          </div>\r\n\r\n          <div>\r\n            <p class=\"field-label\">References to pages / files</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.resourcesReferences\" name=\"ResourcesReferences\">\r\n              <mat-radio-button value=\"Keep\">\r\n                Import links as written in the file (for example /Portals/...)\r\n              </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">\r\n                Try to resolve paths to references\r\n              </mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n\r\n          <div>\r\n            <p class=\"field-label\">Clear all other entities</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.clearEntities\" name=\"ClearEntities\">\r\n              <mat-radio-button value=\"None\">\r\n                Keep all entities not found in import\r\n              </mat-radio-button>\r\n              <mat-radio-button value=\"All\">\r\n                Remove all entities not found in import\r\n              </mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n\r\n          <p class=\"hint\">Remember to backup your DNN first!</p>\r\n        </div>\r\n\r\n        <div class=\"dialog-form-actions\">\r\n          <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n          <button mat-raised-button color=\"accent\" [disabled]=\"!formValues.file || !formValues.file.name\"\r\n            (click)=\"evaluateContent()\">\r\n            Preview Import\r\n          </button>\r\n        </div>\r\n      </form>\r\n      <!-- END FORM -->\r\n\r\n      <!-- WAITING -->\r\n      <p *ngSwitchCase=\"0\" class=\"progress-message\">Please wait while processing...</p>\r\n      <!-- END WAITING -->\r\n\r\n      <!-- EVALUATION RESULT -->\r\n      <ng-container *ngSwitchCase=\"2\">\r\n        <ng-container *ngIf=\"data.evaluationResult\">\r\n          <!-- DETAILS / STATISTICS -->\r\n          <div *ngIf=\"data.evaluationResult.Success\" class=\"dialog-component-content fancy-scrollbar-light\">\r\n            <p class=\"evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n            <p class=\"evaluation__title\">File contains:</p>\r\n            <ul class=\"evaluation__content\">\r\n              <li>{{ data.evaluationResult.Detail.DocumentElementsCount }} content-items (records/entities)</li>\r\n              <li>{{ data.evaluationResult.Detail.LanguagesInDocumentCount }} languages</li>\r\n              <li>{{ data.evaluationResult.Detail.AttributeNamesInDocument.length }} columns:\r\n                {{ data.evaluationResult.Detail.AttributeNamesInDocument.join(', ') }}</li>\r\n            </ul>\r\n            <p class=\"evaluation__title\">If you press Import, it will:</p>\r\n            <ul class=\"evaluation__content\">\r\n              <li>Create {{ data.evaluationResult.Detail.AmountOfEntitiesCreated }} content-items</li>\r\n              <li>Update {{ data.evaluationResult.Detail.AmountOfEntitiesUpdated }} content-items</li>\r\n              <li>Delete {{ data.evaluationResult.Detail.AmountOfEntitiesDeleted }} content-items</li>\r\n              <li>Ignore {{ data.evaluationResult.Detail.AttributeNamesNotImported.length }} columns:\r\n                {{ data.evaluationResult.Detail.AttributeNamesNotImported.join(', ') }}</li>\r\n            </ul>\r\n            <p class=\"hint\">Note: The import validates much data and may take several minutes.</p>\r\n          </div>\r\n          <!-- END DETAILS / STATISTICS -->\r\n          <!-- ERRORS -->\r\n          <div *ngIf=\"!data.evaluationResult.Success\" class=\"dialog-component-content fancy-scrollbar-light\">\r\n            <p class=\"evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n            <ul class=\"evaluation__content\">\r\n              <li *ngFor=\"let error of data.evaluationResult.Errors\">\r\n                <div>{{ errors[error.ErrorCode] }}</div>\r\n                <div *ngIf=\"error.ErrorDetail\"><i>Details: {{ error.ErrorDetail }}</i></div>\r\n                <div *ngIf=\"error.LineNumber\"><i>Line-no: {{ error.LineNumber }}</i></div>\r\n                <div *ngIf=\"error.LineDetail\"><i>Line-details: {{ error.LineDetail }}</i></div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <!-- END ERRORS -->\r\n          <div class=\"dialog-component-actions\">\r\n            <button mat-raised-button (click)=\"back()\">Back</button>\r\n            <button mat-raised-button color=\"accent\" [disabled]=\"!data.evaluationResult.Success\"\r\n              (click)=\"importContent()\">\r\n              Import\r\n            </button>\r\n          </div>\r\n        </ng-container>\r\n      </ng-container>\r\n      <!-- END EVALUATION RESULT -->\r\n\r\n      <!-- IMPORT RESULT -->\r\n      <div *ngSwitchCase=\"3\">\r\n        <div *ngIf=\"data.importResult\" class=\"progress-message\">\r\n          <p *ngIf=\"data.importResult.Success\">Import done.</p>\r\n          <p *ngIf=\"!data.importResult.Success\">Import failed.</p>\r\n        </div>\r\n        <div class=\"dialog-component-actions\">\r\n          <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n        </div>\r\n      </div>\r\n      <!-- END IMPORT RESULT -->\r\n    </ng-container>\r\n  </ng-container>\r\n</div>\r\n","import { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentImportDialogData } from './content-import-dialog.config';\r\nimport { ContentImport, EvaluateContentResult, ImportContentResult } from './models/content-import.model';\r\nimport { ContentImportService } from './services/content-import.service';\r\n\r\n@Component({\r\n  selector: 'app-content-import',\r\n  templateUrl: './content-import.component.html',\r\n  styleUrls: ['./content-import.component.scss'],\r\n})\r\nexport class ContentImportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  formValues: ContentImport;\r\n  private contentType$ = new BehaviorSubject<ContentType>(null);\r\n  private loading$ = new BehaviorSubject(false);\r\n  private viewStates = {\r\n    waiting: 0,\r\n    default: 1,\r\n    evaluated: 2,\r\n    imported: 3,\r\n  };\r\n  private viewStateSelected$ = new BehaviorSubject<number>(this.viewStates.default);\r\n  private evaluationResult$ = new BehaviorSubject<EvaluateContentResult>(null);\r\n  private importResult$ = new BehaviorSubject<ImportContentResult>(null);\r\n  templateVars$ = combineLatest([\r\n    this.contentType$, this.loading$, this.viewStateSelected$, this.evaluationResult$, this.importResult$,\r\n  ]).pipe(\r\n    map(([contentType, loading, viewStateSelected, evaluationResult, importResult]) =>\r\n      ({ contentType, loading, viewStateSelected, evaluationResult, importResult })),\r\n  );\r\n  errors: Record<number, string> = {\r\n    0: 'Unknown error occured.',\r\n    1: 'Selected content-type does not exist.',\r\n    2: 'Document is not a valid XML file.',\r\n    3: 'Selected content-type does not match the content-type in the XML file.',\r\n    4: 'The language is not supported.',\r\n    5: 'The document does not specify all languages for all entities.',\r\n    6: 'Language reference cannot be parsed, the language is not supported.',\r\n    7: 'Language reference cannot be parsed, the read-write protection is not supported.',\r\n    8: 'Value cannot be read, because of it has an invalid format.'\r\n  };\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ContentImportDialogData,\r\n    private dialogRef: MatDialogRef<ContentImportComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentImportService: ContentImportService,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.appDialogConfigService.getDialogSettings();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentType: this.contentTypeStaticName,\r\n        file: this.dialogData.files != null ? this.dialogData.files[0] : null,\r\n        resourcesReferences: 'Keep',\r\n        clearEntities: 'None',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n    this.viewStateSelected$.complete();\r\n    this.evaluationResult$.complete();\r\n    this.importResult$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  evaluateContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.evaluateContent(this.formValues).subscribe(result => {\r\n      this.evaluationResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.evaluated);\r\n    });\r\n  }\r\n\r\n  importContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.importContent(this.formValues).subscribe(result => {\r\n      this.importResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.imported);\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.viewStateSelected$.next(this.viewStates.default);\r\n    this.evaluationResult$.next(null);\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    this.formValues.file = (event.target as HTMLInputElement).files[0];\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.formValues.file = importFile;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}