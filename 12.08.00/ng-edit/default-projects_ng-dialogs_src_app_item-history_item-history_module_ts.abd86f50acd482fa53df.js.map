{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/tooltip.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/paginator.js","./projects/ng-dialogs/src/app/item-history/item-history-dialog.config.ts","./projects/ng-dialogs/src/app/item-history/item-history-routing.module.ts","./projects/ng-dialogs/src/app/item-history/item-history.module.ts","./projects/ng-dialogs/src/app/item-history/services/versions.service.ts"],"names":["matTooltipAnimations","tooltipState","opacity","transform","offset","PANEL_CLASS","passiveListenerOptions","passive","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","showDelay","hideDelay","touchendHideDelay","_MatTooltipBase","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_document","this","_position","_disabled","_viewInitialized","_pointerExitEventsInitialized","_viewportMargin","_cssClassPrefix","touchGestures","_message","_passiveListeners","_destroyed","Subject","_handleKeydown","event","_isTooltipVisible","keyCode","preventDefault","stopPropagation","run","hide","_scrollStrategy","position","change","pipe","takeUntil","subscribe","_overlayRef","_updatePosition","runOutsideAngular","nativeElement","addEventListener","value","_a","_tooltipInstance","show","updatePosition","_setupPointerEnterEventsIfNeeded","removeDescription","String","trim","_updateTooltipMessage","Promise","resolve","then","describe","message","_tooltipClass","_setTooltipClass","monitor","origin","clearTimeout","_touchstartTimeout","dispose","removeEventListener","forEach","length","next","complete","stopMonitoring","delay","disabled","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","_tooltipComponent","attach","instance","afterHidden","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","_addOffset","Object","assign","main","fallback","originPosition","isLtr","originX","originY","_invertPosition","x","y","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","take","tooltipClass","newPosition","_currentPosition","classPrefix","removePanelClass","addPanelClass","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","_wheelListener","touchendListener","listeners","IOS","ANDROID","elementUnderPointer","elementFromPoint","clientX","clientY","element","contains","gestures","style","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵfac","t","undefined","ɵdir","type","inputs","MatTooltip","elementRef","scrollDispatcher","viewContainerRef","ngZone","platform","ariaDescriber","focusMonitor","dir","defaultOptions","TooltipComponent","selectors","hostAttrs","exportAs","features","_TooltipComponentBase","_changeDetectorRef","_visibility","_closeOnInteraction","_onHide","_onShow","toState","markForCheck","changeDetectorRef","_breakpointObserver","_isHandset","observe","ɵcmp","hostVars","hostBindings","rf","ctx","_handleBodyInteraction","decls","vars","consts","template","tmp_0_0","_animationStart","$event","_animationDone","matches","directives","pipes","styles","encapsulation","data","animation","changeDetection","MatTooltipModule","ɵmod","ɵinj","providers","imports","MatPaginator_div_2_mat_form_field_3_mat_option_2_Template","pageSizeOption_r6","$implicit","MatPaginator_div_2_mat_form_field_3_Template","_r8","_changePageSize","ctx_r3","_formFieldAppearance","color","pageSize","_intl","itemsPerPageLabel","_displayedPageSizeOptions","MatPaginator_div_2_div_4_Template","ctx_r4","MatPaginator_div_2_Template","ctx_r0","MatPaginator_button_6_Template","_r10","firstPage","ctx_r1","firstPageLabel","_previousButtonsDisabled","MatPaginator_button_13_Template","_r12","lastPage","ctx_r2","lastPageLabel","_nextButtonsDisabled","MatPaginatorIntl","changes","nextPageLabel","previousPageLabel","getRangeLabel","page","startIndex","endIndex","Math","max","min","ɵprov","token","MAT_PAGINATOR_INTL_PROVIDER","parentIntl","MAT_PAGINATOR_DEFAULT_OPTIONS","_MatPaginatorMixinBase","_MatPaginatorBase","defaults","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","pageSizeOptions","hidePageSize","showFirstLastButtons","_pageSize","_updateDisplayedPageSizeOptions","map","p","_initialized","_markInitialized","unsubscribe","hasNextPage","previousPageIndex","pageIndex","_emitPageEvent","hasPreviousPage","getNumberOfPages","maxPageIndex","ceil","floor","slice","indexOf","sort","a","b","emit","outputs","MatPaginator","intl","formFieldAppearance","previousPage","nextPage","MatPaginatorModule","itemHistoryDialog","name","initContext","panelSize","getComponent","routes","path","component","dialog","title","ItemHistoryRoutingModule","ItemHistoryModule","http","context","dnnContext","fetchVersions","entityId","post","$2sxc","apiUrl","webApiVersions","params","appId","toString","restore","changeId","VersionsService"],"mappings":"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","file":"default-projects_ng-dialogs_src_app_item-history_item-history_module_ts.abd86f50acd482fa53df.js","sourcesContent":["import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Input, Optional, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\nclass _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        /** The default delay in ms before showing the tooltip after show is called */\n        this.showDelay = this._defaultOptions.showDelay;\n        /** The default delay in ms before hiding the tooltip after hide is called */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Handles the keydown events on the host element.\n         * Needs to be an arrow function so that we can use it in addEventListener.\n         */\n        this._handleKeydown = (event) => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        };\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n        _ngZone.runOutsideAngular(() => {\n            _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() { return this._position; }\n    set position(value) {\n        var _a;\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() { return this._message; }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() { return this._tooltipClass; }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor.monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal ||\n            new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)),\n            this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback))\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled || !this.message || !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners\n                .push(['mouseenter', () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                }]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners\n                .push(['touchstart', () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                }]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                    style.MozUserSelect = 'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\n_MatTooltipBase.ɵfac = function _MatTooltipBase_Factory(t) { return new (t || _MatTooltipBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\n_MatTooltipBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatTooltipBase, inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] } });\n_MatTooltipBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined },\n    { type: Directionality },\n    { type: undefined },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n_MatTooltipBase.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    touchGestures: [{ type: Input, args: ['matTooltipTouchGestures',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatTooltipBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined }, { type: ɵngcc5.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], touchGestures: [{\n            type: Input,\n            args: ['matTooltipTouchGestures']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatTooltip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostAttrs: [1, \"mat-tooltip-trigger\"], exportAs: [\"matTooltip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    'class': 'mat-tooltip-trigger'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId);\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(() => {\n            this._visibility = 'visible';\n            this._showTimeoutId = undefined;\n            this._onShow();\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(() => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = undefined;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    ngOnDestroy() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n        this._onHide.complete();\n    }\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    _animationDone(event) {\n        const toState = event.toState;\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n}\n_TooltipComponentBase.ɵfac = function _TooltipComponentBase_Factory(t) { return new (t || _TooltipComponentBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_TooltipComponentBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _TooltipComponentBase });\n_TooltipComponentBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_TooltipComponentBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _breakpointObserver) {\n        super(changeDetectorRef);\n        this._breakpointObserver = _breakpointObserver;\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody)(\"auxclick\", function TooltipComponent_auxclick_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        let tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, directives: [ɵngcc7.NgClass], pipes: [ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matTooltipAnimations.tooltipState],\n                host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    '(body:auxclick)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true'\n                },\n                styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); };\nMatTooltipModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            A11yModule,\n            CommonModule,\n            OverlayModule,\n            MatCommonModule,\n        ], MatCommonModule, CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n\n//# sourceMappingURL=tooltip.js.map","import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, ChangeDetectorRef, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinInitialized, MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/material/tooltip';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/material/select';\nimport * as ɵngcc6 from '@angular/material/core';\n\nfunction MatPaginator_div_2_mat_form_field_3_mat_option_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-option\", 19);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const pageSizeOption_r6 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"value\", pageSizeOption_r6);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", pageSizeOption_r6, \" \");\n} }\nfunction MatPaginator_div_2_mat_form_field_3_Template(rf, ctx) { if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"mat-form-field\", 16);\n    ɵngcc0.ɵɵelementStart(1, \"mat-select\", 17);\n    ɵngcc0.ɵɵlistener(\"selectionChange\", function MatPaginator_div_2_mat_form_field_3_Template_mat_select_selectionChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7._changePageSize($event.value); });\n    ɵngcc0.ɵɵtemplate(2, MatPaginator_div_2_mat_form_field_3_mat_option_2_Template, 2, 2, \"mat-option\", 18);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"appearance\", ctx_r3._formFieldAppearance)(\"color\", ctx_r3.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"value\", ctx_r3.pageSize)(\"disabled\", ctx_r3.disabled)(\"aria-label\", ctx_r3._intl.itemsPerPageLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3._displayedPageSizeOptions);\n} }\nfunction MatPaginator_div_2_div_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 20);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4.pageSize);\n} }\nfunction MatPaginator_div_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, MatPaginator_div_2_mat_form_field_3_Template, 3, 6, \"mat-form-field\", 14);\n    ɵngcc0.ɵɵtemplate(4, MatPaginator_div_2_div_4_Template, 2, 1, \"div\", 15);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0._intl.itemsPerPageLabel, \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length > 1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length <= 1);\n} }\nfunction MatPaginator_button_6_Template(rf, ctx) { if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 21);\n    ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.firstPage(); });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 7);\n    ɵngcc0.ɵɵelement(2, \"path\", 22);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"matTooltip\", ctx_r1._intl.firstPageLabel)(\"matTooltipDisabled\", ctx_r1._previousButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx_r1._previousButtonsDisabled());\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1._intl.firstPageLabel);\n} }\nfunction MatPaginator_button_13_Template(rf, ctx) { if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 23);\n    ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_button_13_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.lastPage(); });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 7);\n    ɵngcc0.ɵɵelement(2, \"path\", 24);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"matTooltip\", ctx_r2._intl.lastPageLabel)(\"matTooltipDisabled\", ctx_r2._nextButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx_r2._nextButtonsDisabled());\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2._intl.lastPageLabel);\n} }\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the page size selector. */\n        this.itemsPerPageLabel = 'Items per page:';\n        /** A label for the button that increments the current page. */\n        this.nextPageLabel = 'Next page';\n        /** A label for the button that decrements the current page. */\n        this.previousPageLabel = 'Previous page';\n        /** A label for the button that moves to the first page. */\n        this.firstPageLabel = 'First page';\n        /** A label for the button that moves to the last page. */\n        this.lastPageLabel = 'Last page';\n        /** A label for the range of items within the current page and the length of the whole list. */\n        this.getRangeLabel = (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ?\n                Math.min(startIndex + pageSize, length) :\n                startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        };\n    }\n}\nMatPaginatorIntl.ɵfac = function MatPaginatorIntl_Factory(t) { return new (t || MatPaginatorIntl)(); };\nMatPaginatorIntl.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatPaginatorIntl_Factory() { return new MatPaginatorIntl(); }, token: MatPaginatorIntl, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatPaginatorIntl, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to _MatPaginatorBase.\n/** @docs-private */\nconst _MatPaginatorMixinBase = mixinDisabled(mixinInitialized(class {\n}));\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\nclass _MatPaginatorBase extends _MatPaginatorMixinBase {\n    constructor(_intl, _changeDetectorRef, defaults) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /** Event emitted when the paginator changes the page size or page index. */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n        if (defaults) {\n            const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons, } = defaults;\n            if (pageSize != null) {\n                this._pageSize = pageSize;\n            }\n            if (pageSizeOptions != null) {\n                this._pageSizeOptions = pageSizeOptions;\n            }\n            if (hidePageSize != null) {\n                this._hidePageSize = hidePageSize;\n            }\n            if (showFirstLastButtons != null) {\n                this._showFirstLastButtons = showFirstLastButtons;\n            }\n        }\n    }\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    get pageIndex() { return this._pageIndex; }\n    set pageIndex(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    get length() { return this._length; }\n    set length(value) {\n        this._length = coerceNumberProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Number of items to display on a page. By default set to 50. */\n    get pageSize() { return this._pageSize; }\n    set pageSize(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** The set of provided page size options to display to the user. */\n    get pageSizeOptions() { return this._pageSizeOptions; }\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** Whether to hide the page size selection UI from the user. */\n    get hidePageSize() { return this._hidePageSize; }\n    set hidePageSize(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /** Whether to show the first/last buttons UI to the user. */\n    get showFirstLastButtons() { return this._showFirstLastButtons; }\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /** Advances to the next page if it exists. */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex++;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move back to the previous page if it exists. */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex--;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the first page if not already there. */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the last page if not already there. */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Whether there is a previous page. */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage() {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /** Calculate the number of pages */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        const startIndex = this.pageIndex * this.pageSize;\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize = this.pageSizeOptions.length != 0 ?\n                this.pageSizeOptions[0] :\n                DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((a, b) => a - b);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length\n        });\n    }\n}\n_MatPaginatorBase.ɵfac = function _MatPaginatorBase_Factory(t) { return new (t || _MatPaginatorBase)(ɵngcc0.ɵɵdirectiveInject(MatPaginatorIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(undefined)); };\n_MatPaginatorBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatPaginatorBase, inputs: { pageIndex: \"pageIndex\", length: \"length\", pageSize: \"pageSize\", pageSizeOptions: \"pageSizeOptions\", hidePageSize: \"hidePageSize\", showFirstLastButtons: \"showFirstLastButtons\", color: \"color\" }, outputs: { page: \"page\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatPaginatorBase.ctorParameters = () => [\n    { type: MatPaginatorIntl },\n    { type: ChangeDetectorRef },\n    { type: undefined }\n];\n_MatPaginatorBase.propDecorators = {\n    color: [{ type: Input }],\n    pageIndex: [{ type: Input }],\n    length: [{ type: Input }],\n    pageSize: [{ type: Input }],\n    pageSizeOptions: [{ type: Input }],\n    hidePageSize: [{ type: Input }],\n    showFirstLastButtons: [{ type: Input }],\n    page: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatPaginatorBase, [{\n        type: Directive\n    }], function () { return [{ type: MatPaginatorIntl }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined }]; }, { page: [{\n            type: Output\n        }], pageIndex: [{\n            type: Input\n        }], length: [{\n            type: Input\n        }], pageSize: [{\n            type: Input\n        }], pageSizeOptions: [{\n            type: Input\n        }], hidePageSize: [{\n            type: Input\n        }], showFirstLastButtons: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    constructor(intl, changeDetectorRef, defaults) {\n        super(intl, changeDetectorRef, defaults);\n        if (defaults && defaults.formFieldAppearance != null) {\n            this._formFieldAppearance = defaults.formFieldAppearance;\n        }\n    }\n}\nMatPaginator.ɵfac = function MatPaginator_Factory(t) { return new (t || MatPaginator)(ɵngcc0.ɵɵdirectiveInject(MatPaginatorIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_PAGINATOR_DEFAULT_OPTIONS, 8)); };\nMatPaginator.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatPaginator, selectors: [[\"mat-paginator\"]], hostAttrs: [\"role\", \"group\", 1, \"mat-paginator\"], inputs: { disabled: \"disabled\" }, exportAs: [\"matPaginator\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 14, vars: 14, consts: [[1, \"mat-paginator-outer-container\"], [1, \"mat-paginator-container\"], [\"class\", \"mat-paginator-page-size\", 4, \"ngIf\"], [1, \"mat-paginator-range-actions\"], [1, \"mat-paginator-range-label\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-previous\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"viewBox\", \"0 0 24 24\", \"focusable\", \"false\", 1, \"mat-paginator-icon\"], [\"d\", \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-next\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [1, \"mat-paginator-page-size\"], [1, \"mat-paginator-page-size-label\"], [\"class\", \"mat-paginator-page-size-select\", 3, \"appearance\", \"color\", 4, \"ngIf\"], [\"class\", \"mat-paginator-page-size-value\", 4, \"ngIf\"], [1, \"mat-paginator-page-size-select\", 3, \"appearance\", \"color\"], [3, \"value\", \"disabled\", \"aria-label\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"mat-paginator-page-size-value\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"]], template: function MatPaginator_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatPaginator_div_2_Template, 5, 3, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n        ɵngcc0.ɵɵtext(5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, MatPaginator_button_6_Template, 3, 5, \"button\", 5);\n        ɵngcc0.ɵɵelementStart(7, \"button\", 6);\n        ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_7_listener() { return ctx.previousPage(); });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(8, \"svg\", 7);\n        ɵngcc0.ɵɵelement(9, \"path\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelementStart(10, \"button\", 9);\n        ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_10_listener() { return ctx.nextPage(); });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(11, \"svg\", 7);\n        ɵngcc0.ɵɵelement(12, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(13, MatPaginator_button_13_Template, 3, 5, \"button\", 11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hidePageSize);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx._intl.getRangeLabel(ctx.pageIndex, ctx.pageSize, ctx.length), \" \");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matTooltip\", ctx._intl.previousPageLabel)(\"matTooltipDisabled\", ctx._previousButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx._previousButtonsDisabled());\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx._intl.previousPageLabel);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"matTooltip\", ctx._intl.nextPageLabel)(\"matTooltipDisabled\", ctx._nextButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx._nextButtonsDisabled());\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx._intl.nextPageLabel);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton, ɵngcc3.MatTooltip, ɵngcc4.MatFormField, ɵngcc5.MatSelect, ɵngcc1.NgForOf, ɵngcc6.MatOption], styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-paginator-icon{fill:CanvasText}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatPaginator.ctorParameters = () => [\n    { type: MatPaginatorIntl },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_PAGINATOR_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatPaginator, [{\n        type: Component,\n        args: [{\n                selector: 'mat-paginator',\n                exportAs: 'matPaginator',\n                template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['disabled'],\n                host: {\n                    'class': 'mat-paginator',\n                    'role': 'group'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-paginator-icon{fill:CanvasText}\\n\"]\n            }]\n    }], function () { return [{ type: MatPaginatorIntl }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPaginatorModule {\n}\nMatPaginatorModule.ɵfac = function MatPaginatorModule_Factory(t) { return new (t || MatPaginatorModule)(); };\nMatPaginatorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatPaginatorModule });\nMatPaginatorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_PAGINATOR_INTL_PROVIDER], imports: [[\n            CommonModule,\n            MatButtonModule,\n            MatSelectModule,\n            MatTooltipModule,\n            MatCommonModule,\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatPaginatorModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatButtonModule,\n                    MatSelectModule,\n                    MatTooltipModule,\n                    MatCommonModule,\n                ],\n                exports: [MatPaginator],\n                declarations: [MatPaginator],\n                providers: [MAT_PAGINATOR_INTL_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatPaginatorModule, { declarations: function () { return [MatPaginator]; }, imports: function () { return [CommonModule,\n        MatButtonModule,\n        MatSelectModule,\n        MatTooltipModule,\n        MatCommonModule]; }, exports: function () { return [MatPaginator]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent, _MatPaginatorBase };\n\n//# sourceMappingURL=paginator.js.map","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const itemHistoryDialog: DialogConfig = {\r\n  name: 'ITEM_HISTORY_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ItemHistoryComponent } = await import('./item-history.component');\r\n    return ItemHistoryComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { itemHistoryDialog } from './item-history-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: itemHistoryDialog, title: 'Item History' } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ItemHistoryRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ItemHistoryRoutingModule } from './item-history-routing.module';\r\nimport { ItemHistoryComponent } from './item-history.component';\r\nimport { VersionsService } from './services/versions.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ItemHistoryComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ItemHistoryRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatExpansionModule,\r\n    MatSnackBarModule,\r\n    MatPaginatorModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatDividerModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    VersionsService,\r\n  ]\r\n})\r\nexport class ItemHistoryModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Version } from '../models/version.model';\r\n\r\nconst webApiVersions = 'cms/history/';\r\n\r\n@Injectable()\r\nexport class VersionsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  fetchVersions(entityId: number) {\r\n    return this.http.post<Version[]>(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiVersions + 'get'),\r\n      { entityId },\r\n      {\r\n        params: { appId: this.context.appId.toString() },\r\n      },\r\n    );\r\n  }\r\n\r\n  restore(entityId: number, changeId: number) {\r\n    return this.http.post<boolean>(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiVersions + 'restore'),\r\n      { entityId },\r\n      {\r\n        params: { appId: this.context.appId.toString(), changeId: changeId.toString() },\r\n      },\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}