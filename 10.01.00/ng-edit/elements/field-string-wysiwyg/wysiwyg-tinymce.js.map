{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"ng.common\"","webpack:///./src/app/tinymce-wysiwyg/tinymce-content.css","webpack:///C:/Projects/eav-item-dialog-angular/src/icons/font-awesome/file.svg","webpack:///C:/Projects/eav-item-dialog-angular/src/icons/font-awesome/anchor.svg","webpack:///C:/Projects/eav-item-dialog-angular/src/icons/glyphicon-halflings/glyphicons-halflings-249-object-align-right.svg","webpack:///C:/Projects/eav-item-dialog-angular/src/icons/font-awesome/file-pdf.svg","webpack:///C:/Projects/eav-item-dialog-angular/src/icons/glyphicon-halflings/glyphicons-halflings-248-object-align-vertical.svg","webpack:///C:/Projects/eav-item-dialog-angular/src/icons/2sxc/content-block.svg","webpack:///external \"rxjs\"","webpack:///C:/Projects/eav-item-dialog-angular/src/icons/glyphicon-halflings/glyphicons-halflings-247-object-align-left.svg","webpack:///external \"ng.elements\"","webpack:///C:/Projects/eav-item-dialog-angular/src/icons/font-awesome/sitemap.svg","webpack:///external \"ng.platformBrowser\"","webpack:///external \"ng.core\"","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/EmptyError.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/isFunction.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/config.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/hostReportError.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/Observer.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/isArray.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/errorObject.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/tryCatch.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/Subscription.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/isObject.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/Subscriber.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/operators/filter.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/symbol/observable.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/noop.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/Observable.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/toSubscriber.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/canReportError.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/pipe.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/operators/take.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/operators/tap.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/util/identity.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/operators/skip.js.pre-build-optimizer.js","webpack:///./src/app/helper/math-helper.ts","webpack:///./src/app/helper/load-icons-helper.ts","webpack:///./src/app/services/tinymce-wysiwyg-toolbar.ts","webpack:///./src/app/tinymce-wysiwyg/tinymce-wysiwyg.component.ts","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/operators/first.js.pre-build-optimizer.js","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.component.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/app.component.css.shim.ngstyle.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/operators/map.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/@angular/forms/fesm2015/forms.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/@tinymce/tinymce-angular/fesm2015/tinymce-tinymce-angular.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/@tinymce/tinymce-angular/tinymce-tinymce-angular.ngfactory.js.pre-build-optimizer.js","webpack:///C:/Projects/eav-item-dialog-angular/node_modules/@tinymce/tinymce-angular/tinymce-tinymce-angular.d.ts.EditorComponent.html","webpack:///./src/app/services/tinymce-wysiwyg-config.ts","webpack:///./src/app/services/tinymce-dnnbridge-service.ts","webpack:///./src/app/services/tinymce-adam-service.ts","webpack:///./src/app/tinymce-wysiwyg/tinymce-wysiwyg.component.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/tinymce-wysiwyg/tinymce-wysiwyg.component.scss.ngstyle.js.pre-build-optimizer.js","webpack:///./src/app/tinymce-wysiwyg/tinymce-wysiwyg.component.html","webpack:///./src/app/app.module.ngfactory.js.pre-build-optimizer.js","webpack:///./src/main.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ng","common","rxjs","elements","platformBrowser","core","EmptyErrorImpl","Error","this","message","EmptyError","isFunction","x","_enable_super_gross_mode_that_will_cause_bad_things","config_config","Promise","undefined","useDeprecatedSynchronousErrorHandling","hostReportError","err","setTimeout","empty","closed","[object Object]","isArray","Array","length","errorObject","e","tryCatchTarget","tryCatcher","apply","arguments","tryCatch","fn","UnsubscriptionErrorImpl","errors","map","toString","join","UnsubscriptionError","Subscription_Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","remove","flattenUnsubscriptionErrors","sub","concat","push","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","reduce","errs","rxSubscriber","Math","random","Subscriber_Subscriber","destinationOrNext","error","complete","super","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","_parentSubscription","destination","add","Subscriber_SafeSubscriber","next","subscriber","_next","_error","_complete","_parentSubscriber","observerOrNext","context","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","FilterOperator","predicate","thisArg","source","subscribe","filter_FilterSubscriber","count","result","ArgumentOutOfRangeErrorImpl","ArgumentOutOfRangeError","observable","noop","Observable_Observable","_isScalar","_subscribe","operator","sink","nextOrObserver","toSubscriber","_trySubscribe","observer","canReportError","console","warn","promiseCtor","getPromiseCtor","resolve","reject","operations","fns","input","prev","take_TakeOperator","total","take_TakeSubscriber","DefaultIfEmptyOperator","defaultValue","defaultIfEmpty_DefaultIfEmptySubscriber","isEmpty","DoOperator","tap_TapSubscriber","_tapNext","_tapError","_tapComplete","throwIfEmpty","errorFactory","lift","tap","hasValue","identity","SkipOperator","skip_SkipSubscriber","MathHelper","CHARS","split","uuid","radix","chars","j","uuidFast","rnd","uuidCompact","replace","icons","alignLeft","glyphicons_halflings_247_object_align_left_default","a","alignVertical","glyphicons_halflings_248_object_align_vertical_default","alignRight","glyphicons_halflings_249_object_align_right_default","anchor","anchor_default","contentBlock","content_block_default","file","file_default","filePdf","file_pdf_default","sitemap","replaceIcon","iconSelector","newIcon","buttonClassNames","icon","document","querySelector","button","parentElement","removeChild","insertAdjacentHTML","forEach","className","classList","tinymce_wysiwyg_toolbar_TinyMceToolbarButtons","vm","editor","imgSizes","on","registerTinyMceFormats","host","addButton","type","title","onclick","toggleAdam","onPostRender","head","getElementsByTagName","link","createElement","rel","href","media","appendChild","menu","text","tooltip","linkgroup","initOnPostRender","execCommand","openDnnDialog","linkgroupPro","assign","cmd","switchModes","tag","self","setup","formatter","formatChanged","state","active","buttons","h3","h4","h5","h6","classes","guid","toLowerCase","insertContent","imgMenuArray","imgs","config","makeImgFormatCall","resizeimg100","addContextToolbar","makeTagDetector","watchChange","imgformats","selector","collapsed","styles","width","register","settings","toolbar","modes","menubar","editorManager","init","getElementById","focus","size","tagWeNeedInTheTagPath","currentElement","dom","is","getBody","contains","tinymce_wysiwyg_component_TinymceWysiwygComponent","tinymceWysiwygConfig","tinyMceDnnBridgeService","tinyMceAdamService","adamSetValueCallback","adamSetValue","adamAfterUploadCallback","adamAfterUpload","calculateInitialValues","subscribeToFormChanges","enableContentBlocks","selectorOptions","body_class","content_style","tinymce_content","height","branding","tinyMceInitCallback","enableContentBlocksIfPossible","tempOptions","getDefaultOptions","options","setLanguageOptions","translateService","currentLang","event","validateValue","connector","data","update","disabled","isReadOnly","id","readonly","setMode","newValue","oldValue","getContent","log","setContent","attachAdam","setAdamConfig","adamModeConfig","usePortalRoot","allowAssetsInRoot","autoLoad","enableSelect","folderDepth","fileFilter","metadataContentTypes","subFolder","showImagesOnly","language","addTranslations","attachDnnBridgeService","svc","addTinyMceToolbarButtons","changeCheck","pow","field","value$","pipe","hasDefaultValue","filter","v","take","defaultIfEmpty","first","firstValue","initialValue","experimental","formGroup","controls","setValue","formSetValueChange$","formSet","allInputTypeNames","inputType","app_module_AppModule","injector","el","external_ng_elements_","customElements","define","AppComponent","RenderType_AppComponent","external_ng_core_","encapsulation","View_AppComponent_0","_l","View_AppComponent_Host_0","_ck","_v","AppComponentNgFactory","MapOperator","project","map_MapSubscriber","AbstractControlDirective","control","valid","invalid","pending","enabled","pristine","dirty","touched","status","untouched","statusChanges","valueChanges","path","reset","errorCode","hasError","getError","ControlContainer","formDirective","isEmptyInputValue","EMAIL_REGEXP","forms_Validators","min","parseFloat","isNaN","actual","max","required","test","email","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","pattern","nullValidator","regex","regexStr","charAt","RegExp","requiredPattern","actualValue","validators","presentValidators","isPresent","_mergeErrors","_executeValidators","observables","_executeAsyncValidators","toObservable","external_rxjs_","TypeError","obs","arrayOfErrors","res","keys","NG_VALUE_ACCESSOR","DefaultValueAccessor","_renderer","_elementRef","_compositionMode","onChange","_","onTouched","_composing","userAgent","external_ng_platformBrowser_","getUserAgent","_isAndroid","setProperty","nativeElement","isDisabled","normalizeValidator","validator","validate","normalizeAsyncValidator","unimplemented","NgControl","valueAccessor","_rawValidators","_rawAsyncValidators","asyncValidator","RadioControlRegistry","_accessors","accessor","_isSameGroup","fireUncheck","controlPair","_control","FormErrorExamples","formControlName","formGroupName","formArrayName","ngModelGroup","ngModelWithFormGroup","ReactiveErrors","directiveName","controlPath","setUpControl","dir","_throwError","compose","composeAsync","writeValue","registerOnChange","_pendingValue","_pendingChange","_pendingDirty","updateOn","updateControl","setUpViewChangePipeline","emitModelEvent","viewToModelUpdate","setUpModelChangePipeline","registerOnTouched","_pendingTouched","markAsTouched","setUpBlurPipeline","setDisabledState","registerOnDisabledChange","registerOnValidatorChange","updateValueAndValidity","markAsDirty","emitModelToViewChange","setUpFormContainer","_noControlError","messageEnd","composeValidators","composeAsyncValidators","isPropertyUpdated","changes","viewModel","change","isFirstChange","currentValue","BUILTIN_ACCESSORS","_optionMap","Map","_idCounter","_compareWith","compareWith","JSON","stringify","_getOptionId","valueString","slice","_buildValueString","_getOptionValue","from","_extractId","has","optionSelectedStateSetter","ids","opt","_setSelected","selected","selectedOptions","item","val","set","_value","_extractId$1","_registry","_injector","_checkName","_state","_fn","select","_throwNameError","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","constructor","some","isBuiltInAccessor","_ngModelWarning","instance","warningConfig","_ngModelWarningSentOnce","_ngModelWarningSent","ngModelWarning","AbstractFormGroupDirective","_checkParentType","addFormGroup","removeFormGroup","getFormGroup","_validators","_asyncValidators","TemplateDrivenErrors","NG_FORM_SELECTOR_WARNING","NgFormSelectorWarning","ngFormWarning","_ngFormWarning","forms_FormControlDirective","asyncValidators","_ngModelWarningConfig","disabledAttrWarning","_isControlChanged","form","emitEvent","model","emit","forms_FormGroupDirective","submitted","directives","ngSubmit","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","ctrl","list","removeDir","$event","_syncPendingControls","resetForm","newCtrl","_clearChangeFns","cleanUpControl","_updateTreeValidity","_registerOnCollectionChange","_oldForm","sync","async","missingFormException","FormGroupName","_hasInvalidParent","groupParentException","FormArrayName","addFormArray","removeFormArray","getFormArray","arrayParentException","forms_FormControlName","_added","_setUpControl","updateModel","removeControl","ngModelGroupException","controlParentException","addControl","InternalFormsSharedModule","FormsModule","opts","ngModule","providers","provide","useValue","warnOnDeprecatedNgFormSelector","tinymce_tinymce_angular_Events","onBeforePaste","onBlur","onClick","onContextMenu","onCopy","onCut","onDblclick","onDrag","onDragDrop","onDragEnd","onDragGesture","onDragOver","onDrop","onFocus","onFocusIn","onFocusOut","onKeyDown","onKeyPress","onKeyUp","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onPaste","onSelectionChange","onActivate","onAddUndo","onBeforeAddUndo","onBeforeExecCommand","onBeforeGetContent","onBeforeRenderUI","onBeforeSetContent","onClearUndos","onDeactivate","onDirty","onExecCommand","onGetContent","onHide","onInit","onLoadContent","onNodeChange","onPostProcess","onPreInit","onPreProcess","onProgressState","onRedo","onRemove","onReset","onSaveContent","onSetAttrib","onObjectResizeStart","onObjectResized","onObjectSelected","onSetContent","onShow","onSubmit","onUndo","onVisualAid","validEvents","bindHandlers","ctx","initEvent","eventName","eventEmitter","observers","ngZone","run","substring","unique","prefix","time","Date","getTime","floor","String","isTextarea","element","tagName","normalizePluginArray","plugins","mergePlugins","initPlugins","inputPlugins","load","doc","url","callback","scriptLoaded","listeners","scriptId","scriptTag","addEventListener","src","injectScriptTag","getTinymce","w","window","tinymce","scriptState","tinymce_tinymce_angular_EditorComponent","elementRef","platformId","onTouchedCallback","onChangeCallback","initialise","_disabled","initialized","external_ng_common_","inline","ownerDocument","cloudChannel","apiKey","style","visibility","finalInit","target","initEditor","runOutsideAngular","content","format","EditorModule","RenderType_EditorComponent","View_EditorComponent_1","View_EditorComponent_0","TinymceWysiwygConfig","defaultLanguage","languages","validateAlso","buildModes","standard","contextmenu","advanced","automatic_uploads","autosave_ask_before_unload","paste_as_text","extended_valid_elements","custom_elements","relative_urls","default_link_target","object_resizing","skin","theme","statusbar","debounce","lang2","substr","language_url","primaryLan","mceTranslations","all","translations","instant","k","addI18n","TinyMceDnnBridgeService","Paths","FileFilter","processResultOfDnnBridge","getUrlOfIdDnnDialog","FileId","urlCallback","previouslySelected","selection","TinyMceAdamService","adam","fileItem","modeImage","adamModeImage","fileName","Name","lastIndexOf","FullPath","Type","imagesOnly","adamConfig","RenderType_TinymceWysiwygComponent","View_TinymceWysiwygComponent_1","p0_0","_co","component","View_TinymceWysiwygComponent_0","ngIf","View_TinymceWysiwygComponent_Host_0","TinymceWysiwygComponentNgFactory","AppModuleNgFactory","p0_1","p0_2","p1_0","p2_0","p2_1","p2_2","p2_3","bootstrapModuleFactory","catch"],"mappings":"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","file":"wysiwyg-tinymce.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","module.exports = ng.common;","module.exports = \".field-string-wysiwyg-mce-box {\\r\\n    position: relative;\\r\\n    border-style: solid;\\r\\n    border-width: 1px;\\r\\n    border-color: rgb(170,178,189);\\r\\n    border-radius: 4px;\\r\\n    /* padding: 8px; */\\r\\n    padding-left: 0;\\r\\n    overflow: auto;\\r\\n    margin: 0;\\r\\n    padding: 0 8px 1px 8px;\\r\\n\\r\\n    font-size: medium;\\r\\n    color:rgb(69, 79, 99);\\r\\n\\r\\n    font-family: 'Roboto', sans-serif;\\r\\n    font-style: normal;\\r\\n    font-weight: 400; \\r\\n\\r\\n    /*  For iFrame mode */\\r\\n    border: none;\\r\\n    border-radius: 0;\\r\\n    box-shadow: inset 0 -10px 10px -10px #888;\\r\\n\\r\\n    /* IE 10+ */\\r\\n    -ms-overflow-style: none;\\r\\n    /* Firefox */\\r\\n    overflow: -moz-scrollbars-none;\\r\\n}\\r\\n.field-string-wysiwyg-mce-box {\\r\\n    scrollbar-width: none;\\r\\n}\\r\\n.field-string-wysiwyg-mce-box::-webkit-scrollbar {\\r\\n    display: none;\\r\\n}\\r\\ndiv.wrap-float-label .field-string-wysiwyg-mce-box.mce-edit-focus {\\r\\n    padding-left: 8px;\\r\\n}\\r\\n.mce-i-apple:before {\\r\\n    position: relative;\\r\\n    top: 1px;\\r\\n    display: inline-block;\\r\\n    font-family: 'Glyphicons Halflings';\\r\\n    font-style: normal;\\r\\n    font-weight: normal;\\r\\n    line-height: 1;\\r\\n\\r\\n    -webkit-font-smoothing: antialiased;\\r\\n    -moz-osx-font-smoothing: grayscale;\\r\\n\\r\\n    content:\\\"\\\\f179\\\"\\r\\n}\\r\\n/* content block placeholders */\\r\\n/* added in 08.04.06 - purpose still secret :)*/\\r\\nhr[sxc] {\\r\\n    background-color: #B0DCFF; /* temporary color */\\r\\n    height: 75px;\\r\\n}\\r\\nhr[sxc]::after {\\r\\n    color: white;\\r\\n    content: \\\"App / Content\\\";\\r\\n    position: absolute;\\r\\n    text-align: center;\\r\\n    font-size: 25px;\\r\\n    display: inline-block;\\r\\n    width: 100%;\\r\\n    margin-top: 17px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RzL2ZpZWxkLXN0cmluZy13eXNpd3lnL3NyYy9hcHAvdGlueW1jZS13eXNpd3lnL3RpbnltY2UtY29udGVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxtQkFBbUI7SUFDbkIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQiwrQkFBK0I7SUFDL0IsbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLFVBQVU7SUFDVix1QkFBdUI7O0lBRXZCLGtCQUFrQjtJQUNsQixzQkFBc0I7O0lBRXRCLGtDQUFrQztJQUNsQyxtQkFBbUI7SUFDbkIsaUJBQWlCOztJQUVqQixzQkFBc0I7SUFDdEIsYUFBYTtJQUNiLGlCQUFpQjtJQUdqQiwwQ0FBMEM7O0lBRTFDLFlBQVk7SUFDWix5QkFBeUI7SUFDekIsYUFBYTtJQUNiLCtCQUErQjtDQUNsQztBQUNEO0lBQ0ksc0JBQXNCO0NBQ3pCO0FBQ0Q7SUFDSSxjQUFjO0NBQ2pCO0FBRUQ7SUFDSSxrQkFBa0I7Q0FDckI7QUFFRDtJQUNJLG1CQUFtQjtJQUNuQixTQUFTO0lBQ1Qsc0JBQXNCO0lBQ3RCLG9DQUFvQztJQUNwQyxtQkFBbUI7SUFDbkIsb0JBQW9CO0lBQ3BCLGVBQWU7O0lBRWYsb0NBQW9DO0lBQ3BDLG1DQUFtQzs7SUFFbkMsZUFBZTtDQUNsQjtBQUVELGdDQUFnQztBQUNoQyxnREFBZ0Q7QUFDaEQ7SUFDSSwwQkFBMEIsQ0FBQyxxQkFBcUI7SUFDaEQsYUFBYTtDQUNoQjtBQUVEO0lBQ0ksYUFBYTtJQUNiLHlCQUF5QjtJQUN6QixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLGdCQUFnQjtJQUNoQixzQkFBc0I7SUFDdEIsWUFBWTtJQUNaLGlCQUFpQjtDQUNwQiIsImZpbGUiOiJwcm9qZWN0cy9maWVsZC1zdHJpbmctd3lzaXd5Zy9zcmMvYXBwL3RpbnltY2Utd3lzaXd5Zy90aW55bWNlLWNvbnRlbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmZpZWxkLXN0cmluZy13eXNpd3lnLW1jZS1ib3gge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxuICAgIGJvcmRlci13aWR0aDogMXB4O1xyXG4gICAgYm9yZGVyLWNvbG9yOiByZ2IoMTcwLDE3OCwxODkpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgLyogcGFkZGluZzogOHB4OyAqL1xyXG4gICAgcGFkZGluZy1sZWZ0OiAwO1xyXG4gICAgb3ZlcmZsb3c6IGF1dG87XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBwYWRkaW5nOiAwIDhweCAxcHggOHB4O1xyXG5cclxuICAgIGZvbnQtc2l6ZTogbWVkaXVtO1xyXG4gICAgY29sb3I6cmdiKDY5LCA3OSwgOTkpO1xyXG5cclxuICAgIGZvbnQtZmFtaWx5OiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcclxuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcclxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7IFxyXG5cclxuICAgIC8qICBGb3IgaUZyYW1lIG1vZGUgKi9cclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDA7XHJcbiAgICAtbW96LWJveC1zaGFkb3c6IGluc2V0IDAgLTEwcHggMTBweCAtMTBweCAjODg4O1xyXG4gICAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldCAwIC0xMHB4IDEwcHggLTEwcHggIzg4ODtcclxuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgLTEwcHggMTBweCAtMTBweCAjODg4O1xyXG5cclxuICAgIC8qIElFIDEwKyAqL1xyXG4gICAgLW1zLW92ZXJmbG93LXN0eWxlOiBub25lO1xyXG4gICAgLyogRmlyZWZveCAqL1xyXG4gICAgb3ZlcmZsb3c6IC1tb3otc2Nyb2xsYmFycy1ub25lO1xyXG59XHJcbi5maWVsZC1zdHJpbmctd3lzaXd5Zy1tY2UtYm94IHtcclxuICAgIHNjcm9sbGJhci13aWR0aDogbm9uZTtcclxufVxyXG4uZmllbGQtc3RyaW5nLXd5c2l3eWctbWNlLWJveDo6LXdlYmtpdC1zY3JvbGxiYXIge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxufVxyXG5cclxuZGl2LndyYXAtZmxvYXQtbGFiZWwgLmZpZWxkLXN0cmluZy13eXNpd3lnLW1jZS1ib3gubWNlLWVkaXQtZm9jdXMge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA4cHg7XHJcbn1cclxuXHJcbi5tY2UtaS1hcHBsZTpiZWZvcmUge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgdG9wOiAxcHg7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBmb250LWZhbWlseTogJ0dseXBoaWNvbnMgSGFsZmxpbmdzJztcclxuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcclxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbiAgICBsaW5lLWhlaWdodDogMTtcclxuXHJcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcclxuICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XHJcblxyXG4gICAgY29udGVudDpcIlxcZjE3OVwiXHJcbn1cclxuXHJcbi8qIGNvbnRlbnQgYmxvY2sgcGxhY2Vob2xkZXJzICovXHJcbi8qIGFkZGVkIGluIDA4LjA0LjA2IC0gcHVycG9zZSBzdGlsbCBzZWNyZXQgOikqL1xyXG5ocltzeGNdIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNCMERDRkY7IC8qIHRlbXBvcmFyeSBjb2xvciAqL1xyXG4gICAgaGVpZ2h0OiA3NXB4O1xyXG59XHJcblxyXG5ocltzeGNdOjphZnRlciB7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBjb250ZW50OiBcIkFwcCAvIENvbnRlbnRcIjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGZvbnQtc2l6ZTogMjVweDtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLXRvcDogMTdweDtcclxufVxyXG4iXX0= */\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 384 512\\\"><path d=\\\"M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zm-22.6 22.7c2.1 2.1 3.5 4.6 4.2 7.4H256V32.5c2.8.7 5.3 2.1 7.4 4.2l83.9 83.9zM336 480H48c-8.8 0-16-7.2-16-16V48c0-8.8 7.2-16 16-16h176v104c0 13.3 10.7 24 24 24h104v304c0 8.8-7.2 16-16 16z\\\"/></svg>\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 576 512\\\"><path d=\\\"M504.485 264.485c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h49.129C461.111 420.749 390.501 473.6 304 479.452V192h52c6.627 0 12-5.373 12-12v-8c0-6.627-5.373-12-12-12h-52v-34.016c28.513-7.339 49.336-33.833 47.933-64.947-1.48-32.811-28.101-59.458-60.911-60.967C254.302-1.619 224 27.652 224 64c0 29.821 20.396 54.879 48 61.984V160h-52c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h52v287.452C185.498 473.6 114.888 420.749 97.901 352h49.129c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.03c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.03C-3.074 339.074 2.28 352 12.971 352h52.136C83.963 448.392 182.863 512 288 512c110.901 0 204.938-68.213 222.893-160h52.136c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.03zM256 64c0-17.645 14.355-32 32-32s32 14.355 32 32-14.355 32-32 32-32-14.355-32-32zM61.255 320L80 301.255 98.745 320h-37.49zm416 0L496 301.255 514.745 320h-37.49z\\\"/></svg>\"","module.exports = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\r\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\r\\n\\t viewBox=\\\"0 0 24 24\\\" style=\\\"enable-background:new 0 0 24 24;\\\" xml:space=\\\"preserve\\\">\\r\\n<g id=\\\"object-align-right\\\">\\r\\n\\t<path d=\\\"M19,6v12h-1V6H19z M7.5,13C7.225,13,7,13.225,7,13.5v4C7,17.775,7.225,18,7.5,18h9c0.275,0,0.5-0.225,0.5-0.5v-4\\r\\n\\t\\tc0-0.275-0.225-0.5-0.5-0.5H7.5z M16,8h-3v3h3V8L16,8z M16.5,7C16.775,7,17,7.225,17,7.5v4c0,0.275-0.225,0.5-0.5,0.5h-4\\r\\n\\t\\tc-0.275,0-0.5-0.225-0.5-0.5v-4C12,7.225,12.225,7,12.5,7H16.5L16.5,7z\\\"/>\\r\\n</g>\\r\\n</svg>\\r\\n\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 384 512\\\"><path d=\\\"M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zm-22.6 22.7c2.1 2.1 3.5 4.6 4.2 7.4H256V32.5c2.8.7 5.3 2.1 7.4 4.2l83.9 83.9zM336 480H48c-8.8 0-16-7.2-16-16V48c0-8.8 7.2-16 16-16h176v104c0 13.3 10.7 24 24 24h104v304c0 8.8-7.2 16-16 16zm-22-171.2c-13.5-13.3-55-9.2-73.7-6.7-21.2-12.8-35.2-30.4-45.1-56.6 4.3-18 12-47.2 6.4-64.9-4.4-28.1-39.7-24.7-44.6-6.8-5 18.3-.3 44.4 8.4 77.8-11.9 28.4-29.7 66.9-42.1 88.6-20.8 10.7-54.1 29.3-58.8 52.4-3.5 16.8 22.9 39.4 53.1 6.4 9.1-9.9 19.3-24.8 31.3-45.5 26.7-8.8 56.1-19.8 82-24 21.9 12 47.6 19.9 64.6 19.9 27.7.1 28.9-30.2 18.5-40.6zm-229.2 89c5.9-15.9 28.6-34.4 35.5-40.8-22.1 35.3-35.5 41.5-35.5 40.8zM180 175.5c8.7 0 7.8 37.5 2.1 47.6-5.2-16.3-5-47.6-2.1-47.6zm-28.4 159.3c11.3-19.8 21-43.2 28.8-63.7 9.7 17.7 22.1 31.7 35.1 41.5-24.3 4.7-45.4 15.1-63.9 22.2zm153.4-5.9s-5.8 7-43.5-9.1c41-3 47.7 6.4 43.5 9.1z\\\"/></svg>\"","module.exports = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\r\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\r\\n\\t viewBox=\\\"0 0 24 24\\\" style=\\\"enable-background:new 0 0 24 24;\\\" xml:space=\\\"preserve\\\">\\r\\n<g id=\\\"object-align-vertical\\\">\\r\\n\\t<path d=\\\"M17.5,13H13v-1h1.5c0.275,0,0.5-0.225,0.5-0.5v-4C15,7.225,14.775,7,14.5,7H13V6h-1v1h-1.5C10.225,7,10,7.225,10,7.5v4\\r\\n\\t\\tc0,0.275,0.225,0.5,0.5,0.5H12v1H8.5C8.225,13,8,13.225,8,13.5v4C8,17.775,8.225,18,8.5,18H12h1h4.5c0.275,0,0.5-0.225,0.5-0.5v-4\\r\\n\\t\\tC18,13.225,17.775,13,17.5,13z M11,8h3v3h-3V8z\\\"/>\\r\\n</g>\\r\\n</svg>\\r\\n\"","module.exports = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<!-- Generator: Adobe Illustrator 20.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\r\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\r\\n\\t viewBox=\\\"0 0 64 64\\\" style=\\\"enable-background:new 0 0 64 64;\\\" xml:space=\\\"preserve\\\">\\r\\n<style type=\\\"text/css\\\">\\r\\n\\t.st0{fill:#0088F4;}\\r\\n\\t.st1{fill:#FFFFFF;}\\r\\n\\t.st2{fill:none;}\\r\\n\\t.st3{fill:#FFFFFF;stroke:#000000;stroke-miterlimit:10;}\\r\\n</style>\\r\\n<path class=\\\"st1\\\" d=\\\"M20.9,0C9.3,0,0,9.6,0,21.1V64h43.9C55.4,64,64,53.7,64,42.1V0H20.9z M50,37.5C50,44,45.9,50,39.4,50H14V25.7\\r\\n\\tC14,19.2,19.1,14,25.6,14H50V37.5z\\\"/>\\r\\n</svg>\\r\\n\"","module.exports = rxjs;","module.exports = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\r\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\r\\n\\t viewBox=\\\"0 0 24 24\\\" style=\\\"enable-background:new 0 0 24 24;\\\" xml:space=\\\"preserve\\\">\\r\\n<g id=\\\"object-align-left\\\">\\r\\n\\t<path d=\\\"M8,6v12H7V6H8z M9.5,13C9.225,13,9,13.225,9,13.5v4C9,17.775,9.225,18,9.5,18h9c0.275,0,0.5-0.225,0.5-0.5v-4\\r\\n\\t\\tc0-0.275-0.225-0.5-0.5-0.5H9.5z M13,8h-3v3h3V8L13,8z M13.5,7C13.775,7,14,7.225,14,7.5v4c0,0.275-0.225,0.5-0.5,0.5h-4\\r\\n\\t\\tC9.225,12,9,11.775,9,11.5v-4C9,7.225,9.225,7,9.5,7H13.5L13.5,7z\\\"/>\\r\\n</g>\\r\\n</svg>\\r\\n\"","module.exports = ng.elements;","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 640 512\\\"><path d=\\\"M608 352h-32v-97.59c0-16.77-13.62-30.41-30.41-30.41H336v-64h48c17.67 0 32-14.33 32-32V32c0-17.67-14.33-32-32-32H256c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h48v64H94.41C77.62 224 64 237.64 64 254.41V352H32c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-96c0-17.67-14.33-32-32-32H96v-96h208v96h-32c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-96c0-17.67-14.33-32-32-32h-32v-96h208v96h-32c-17.67 0-32 14.33-32 32v96c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-96c0-17.67-14.33-32-32-32zm-480 32v96H32v-96h96zm240 0v96h-96v-96h96zM256 128V32h128v96H256zm352 352h-96v-96h96v96z\\\"/></svg>\"","module.exports = ng.platformBrowser;","module.exports = ng.core;","function EmptyErrorImpl() {\n    Error.call(this);\n    this.message = 'no elements in sequence';\n    this.name = 'EmptyError';\n    return this;\n}\nEmptyErrorImpl.prototype = Object.create(Error.prototype);\nexport const EmptyError = EmptyErrorImpl;\n//# sourceMappingURL=EmptyError.js.map","export function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","let _enable_super_gross_mode_that_will_cause_bad_things = false;\nexport const config = {\n    Promise: undefined,\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            const error = new Error();\n            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map","export function hostReportError(err) {\n    setTimeout(() => { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map","import { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport const empty = {\n    closed: true,\n    next(value) { },\n    error(err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete() { }\n};\n//# sourceMappingURL=Observer.js.map","export const isArray = Array.isArray || ((x) => x && typeof x.length === 'number');\n//# sourceMappingURL=isArray.js.map","export const errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","import { errorObject } from './errorObject';\nlet tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map","function UnsubscriptionErrorImpl(errors) {\n    Error.call(this);\n    this.message = errors ?\n        `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n}\nUnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\nexport const UnsubscriptionError = UnsubscriptionErrorImpl;\n//# sourceMappingURL=UnsubscriptionError.js.map","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nexport class Subscription {\n    constructor(unsubscribe) {\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    unsubscribe() {\n        let hasErrors = false;\n        let errors;\n        if (this.closed) {\n            return;\n        }\n        let { _parent, _parents, _unsubscribe, _subscriptions } = this;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        let index = -1;\n        let len = _parents ? _parents.length : 0;\n        while (_parent) {\n            _parent.remove(this);\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            let trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                const sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    let trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        let err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    }\n    add(teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        let subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function') {\n                    const tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        const subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    }\n    remove(subscription) {\n        const subscriptions = this._subscriptions;\n        if (subscriptions) {\n            const subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    }\n    _addParent(parent) {\n        let { _parent, _parents } = this;\n        if (!_parent || _parent === parent) {\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            _parents.push(parent);\n        }\n    }\n}\nSubscription.EMPTY = (function (empty) {\n    empty.closed = true;\n    return empty;\n}(new Subscription()));\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n//# sourceMappingURL=Subscription.js.map","export function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map","export const rxSubscriber = typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random();\nexport const $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport class Subscriber extends Subscription {\n    constructor(destinationOrNext, error, complete) {\n        super();\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        this._parentSubscription = null;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        this.destination = destinationOrNext;\n                        destinationOrNext.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    [rxSubscriberSymbol]() { return this; }\n    static create(next, error, complete) {\n        const subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    }\n    next(value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    }\n    unsubscribe() {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        super.unsubscribe();\n    }\n    _next(value) {\n        this.destination.next(value);\n    }\n    _error(err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.destination.complete();\n        this.unsubscribe();\n    }\n    _unsubscribeAndRecycle() {\n        const { _parent, _parents } = this;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        this._parentSubscription = null;\n        return this;\n    }\n}\nexport class SafeSubscriber extends Subscriber {\n    constructor(_parentSubscriber, observerOrNext, error, complete) {\n        super();\n        this._parentSubscriber = _parentSubscriber;\n        let next;\n        let context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    next(value) {\n        if (!this.isStopped && this._next) {\n            const { _parentSubscriber } = this;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            const { useDeprecatedSynchronousErrorHandling } = config;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            if (this._complete) {\n                const wrappedComplete = () => this._complete.call(this._context);\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    }\n    __tryOrUnsub(fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    }\n    __tryOrSetError(parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    }\n    _unsubscribe() {\n        const { _parentSubscriber } = this;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nclass FilterOperator {\n    constructor(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    }\n}\nclass FilterSubscriber extends Subscriber {\n    constructor(destination, predicate, thisArg) {\n        super(destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    }\n}\n//# sourceMappingURL=filter.js.map","function ArgumentOutOfRangeErrorImpl() {\n    Error.call(this);\n    this.message = 'argument out of range';\n    this.name = 'ArgumentOutOfRangeError';\n    return this;\n}\nArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);\nexport const ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map","export const observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map","export function noop() { }\n//# sourceMappingURL=noop.js.map","import { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport class Observable {\n    constructor(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    lift(operator) {\n        const observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n    subscribe(observerOrNext, error, complete) {\n        const { operator } = this;\n        const sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    }\n    _trySubscribe(sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    }\n    forEach(next, promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let subscription;\n            subscription = this.subscribe((value) => {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        return source && source.subscribe(subscriber);\n    }\n    [Symbol_observable]() {\n        return this;\n    }\n    pipe(...operations) {\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    }\n    toPromise(promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let value;\n            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));\n        });\n    }\n}\nObservable.create = (subscribe) => {\n    return new Observable(subscribe);\n};\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n    while (observer) {\n        const { closed, destination, isStopped } = observer;\n        if (closed || isStopped) {\n            return false;\n        }\n        else if (destination && destination instanceof Subscriber) {\n            observer = destination;\n        }\n        else {\n            observer = null;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=canReportError.js.map","import { noop } from './noop';\nexport function pipe(...fns) {\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn) => fn(prev), input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n    return (source) => {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nclass TakeOperator {\n    constructor(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    }\n}\nclass TakeSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(value) {\n        const total = this.total;\n        const count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    }\n}\n//# sourceMappingURL=take.js.map","import { Subscriber } from '../Subscriber';\nexport function defaultIfEmpty(defaultValue = null) {\n    return (source) => source.lift(new DefaultIfEmptyOperator(defaultValue));\n}\nclass DefaultIfEmptyOperator {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    }\n}\nclass DefaultIfEmptySubscriber extends Subscriber {\n    constructor(destination, defaultValue) {\n        super(destination);\n        this.defaultValue = defaultValue;\n        this.isEmpty = true;\n    }\n    _next(value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    }\n    _complete() {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=defaultIfEmpty.js.map","import { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nclass DoOperator {\n    constructor(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    }\n}\nclass TapSubscriber extends Subscriber {\n    constructor(destination, observerOrNext, error, complete) {\n        super(destination);\n        this._tapNext = noop;\n        this._tapError = noop;\n        this._tapComplete = noop;\n        this._tapError = error || noop;\n        this._tapComplete = complete || noop;\n        if (isFunction(observerOrNext)) {\n            this._context = this;\n            this._tapNext = observerOrNext;\n        }\n        else if (observerOrNext) {\n            this._context = observerOrNext;\n            this._tapNext = observerOrNext.next || noop;\n            this._tapError = observerOrNext.error || noop;\n            this._tapComplete = observerOrNext.complete || noop;\n        }\n    }\n    _next(value) {\n        try {\n            this._tapNext.call(this._context, value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(value);\n    }\n    _error(err) {\n        try {\n            this._tapError.call(this._context, err);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.error(err);\n    }\n    _complete() {\n        try {\n            this._tapComplete.call(this._context);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        return this.destination.complete();\n    }\n}\n//# sourceMappingURL=tap.js.map","import { tap } from './tap';\nimport { EmptyError } from '../util/EmptyError';\nexport const throwIfEmpty = (errorFactory = defaultErrorFactory) => tap({\n    hasValue: false,\n    next() { this.hasValue = true; },\n    complete() {\n        if (!this.hasValue) {\n            throw errorFactory();\n        }\n    }\n});\nfunction defaultErrorFactory() {\n    return new EmptyError();\n}\n//# sourceMappingURL=throwIfEmpty.js.map","export function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map","import { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return (source) => source.lift(new SkipOperator(count));\n}\nclass SkipOperator {\n    constructor(total) {\n        this.total = total;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    }\n}\nclass SkipSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    }\n}\n//# sourceMappingURL=skip.js.map","\r\n/*!\r\nMath.uuid.js (v1.4)\r\nhttp://www.broofa.com\r\nmailto:robert@broofa.com\r\n\r\nCopyright (c) 2010 Robert Kieffer\r\nDual licensed under the MIT and GPL licenses.\r\n*/\r\n\r\n/*\r\n * Generate a random uuid.\r\n *\r\n * USAGE: Math.uuid(length, radix)\r\n *   length - the desired number of characters\r\n *   radix  - the number of allowable values for each character.\r\n *\r\n * EXAMPLES:\r\n *   // No arguments  - returns RFC4122, version 4 ID\r\n *   >>> Math.uuid()\r\n *   \"92329D39-6F5C-4520-ABFC-AAB64544E172\"\r\n *\r\n *   // One argument - returns ID of the specified length\r\n *   >>> Math.uuid(15)     // 15 character ID (default base=62)\r\n *   \"VcydxgltxrVZSTV\"\r\n *\r\n *   // Two arguments - returns ID of the specified length, and radix. (Radix must be <= 62)\r\n *   >>> Math.uuid(8, 2)  // 8 character ID (base=2)\r\n *   \"01001010\"\r\n *   >>> Math.uuid(8, 10) // 8 character ID (base=10)\r\n *   \"47473046\"\r\n *   >>> Math.uuid(8, 16) // 8 character ID (base=16)\r\n *   \"098F4D35\"\r\n */\r\nexport class MathHelper {\r\n    // Private array of chars to use\r\n    private static CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\r\n\r\n    public static uuid = function (len?, radix?) {\r\n        const chars = MathHelper.CHARS, uuid = [];\r\n        radix = radix || chars.length;\r\n\r\n        if (len) {\r\n            // Compact form\r\n            for (let j = 0; j < len; j++) {\r\n                uuid[j] = chars[0 || Math.random() * radix];\r\n            }\r\n        } else {\r\n            // rfc4122, version 4 form\r\n            let r;\r\n\r\n            // rfc4122 requires these characters\r\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\r\n            uuid[14] = '4';\r\n\r\n            // Fill in random data.  At i==19 set the high bits of clock sequence as\r\n            // per rfc4122, sec. 4.1.5\r\n            for (let j = 0; j < 36; j++) {\r\n                if (!uuid[j]) {\r\n                    r = 0 || Math.random() * 16;\r\n                    uuid[j] = chars[(j === 19) ? (r && 0x3) || 0x8 : r];\r\n                }\r\n            }\r\n        }\r\n\r\n        return uuid.join('');\r\n    };\r\n\r\n    // A more performant, but slightly bulkier, RFC4122v4 solution.  We boost performance\r\n    // by minimizing calls to random()\r\n    public static uuidFast = function () {\r\n        const chars = MathHelper.CHARS, uuid = new Array(36);\r\n        let rnd = 0, r;\r\n        for (let i = 0; i < 36; i++) {\r\n            if (i === 8 || i === 13 || i === 18 || i === 23) {\r\n                uuid[i] = '-';\r\n            } else if (i === 14) {\r\n                uuid[i] = '4';\r\n            } else {\r\n                if (rnd <= 0x02) { rnd = 0x2000000 + (Math.random() * 0x1000000) || 0; }\r\n                r = rnd && 0xf;\r\n                // tslint:disable-next-line:no-bitwise\r\n                rnd = rnd >> 4;\r\n                uuid[i] = chars[(i === 19) ? (r && 0x3) || 0x8 : r];\r\n            }\r\n        }\r\n        return uuid.join('');\r\n    };\r\n\r\n    // A more compact, but less performant, RFC4122v4 solution:\r\n    public static uuidCompact = function () {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            const r = Math.random() * 16 || 0, v = c === 'x' ? r : (r && 0x3 || 0x8);\r\n            return v.toString(16);\r\n        });\r\n    };\r\n}\r\n","import alignLeft from '!raw-loader!../../../../../src/icons/glyphicon-halflings/glyphicons-halflings-247-object-align-left.svg';\r\nimport alignVertical from '!raw-loader!../../../../../src/icons/glyphicon-halflings/glyphicons-halflings-248-object-align-vertical.svg';\r\nimport alignRight from '!raw-loader!../../../../../src/icons/glyphicon-halflings/glyphicons-halflings-249-object-align-right.svg';\r\nimport anchor from '!raw-loader!../../../../../src/icons/font-awesome/anchor.svg';\r\nimport contentBlock from '!raw-loader!../../../../../src/icons/2sxc/content-block.svg';\r\nimport file from '!raw-loader!../../../../../src/icons/font-awesome/file.svg';\r\nimport filePdf from '!raw-loader!../../../../../src/icons/font-awesome/file-pdf.svg';\r\nimport sitemap from '!raw-loader!../../../../../src/icons/font-awesome/sitemap.svg';\r\n\r\nexport const icons = {\r\n  alignLeft,\r\n  alignVertical,\r\n  alignRight,\r\n  anchor,\r\n  contentBlock,\r\n  file,\r\n  filePdf,\r\n  sitemap,\r\n};\r\n\r\nexport const replaceIcon = (iconSelector, newIcon, buttonClassNames) => {\r\n  let icon = document.querySelector(iconSelector);\r\n  const button = icon.parentElement;\r\n  button.removeChild(icon);\r\n  icon = null;\r\n  button.insertAdjacentHTML('afterbegin', newIcon);\r\n  buttonClassNames.forEach(className => {\r\n    button.classList.add(className);\r\n  });\r\n};\r\n","import { MathHelper } from '../helper/math-helper';\r\nimport { icons, replaceIcon } from '../helper/load-icons-helper';\r\n\r\nexport class TinyMceToolbarButtons {\r\n    /**\r\n     * This is attribute type (not attribute inputType)\r\n     * @param config\r\n     * @param attributeKey\r\n     */\r\n    static addTinyMceToolbarButtons(vm: any, editor: any, imgSizes: any) {\r\n        // call register once the editor-object is ready\r\n        editor.on('init', () => {\r\n            this.registerTinyMceFormats(editor, vm.host, imgSizes);\r\n        });\r\n\r\n        //#endregion\r\n\r\n        // group with adam-link, dnn-link\r\n        editor.addButton('linkfiles', {\r\n            type: 'splitbutton',\r\n            icon: ' eav-icon-file-pdf',\r\n            title: 'Link.AdamFile.Tooltip',\r\n            onclick: () => {\r\n                vm.toggleAdam(false);\r\n            },\r\n            onPostRender: () => {\r\n                replaceIcon('.eav-icon-file-pdf', icons.filePdf, ['toolbar-icon']);\r\n                const head = document.getElementsByTagName('head')[0];\r\n                const link = document.createElement('link');\r\n                link.rel = 'stylesheet';\r\n                link.type = 'text/css';\r\n                link.href = 'https://fonts.googleapis.com/icon?family=Material+Icons';\r\n                link.media = 'all';\r\n                head.appendChild(link);\r\n            },\r\n            menu: [\r\n                {\r\n                    text: 'Link.AdamFile',\r\n                    tooltip: 'Link.AdamFile.Tooltip',\r\n                    icon: ' eav-icon-file-pdf',\r\n                    onclick: () => {\r\n                        vm.toggleAdam(false);\r\n                    },\r\n                    onPostRender: () => {\r\n                        replaceIcon('.eav-icon-file-pdf', icons.filePdf, ['toolbar-icon', 'dropdown-icon']);\r\n                    },\r\n                }, {\r\n                    text: 'Link.DnnFile',\r\n                    tooltip: 'Link.DnnFile.Tooltip',\r\n                    icon: ' eav-icon-file',\r\n                    onclick: () => {\r\n                        vm.toggleAdam(false, true);\r\n                    },\r\n                    onPostRender: () => {\r\n                        replaceIcon('.eav-icon-file', icons.file, ['toolbar-icon', 'dropdown-icon']);\r\n                    },\r\n                }\r\n            ]\r\n        });\r\n\r\n        //#region link group with web-link, page-link, unlink, anchor\r\n        const linkgroup = {\r\n            type: 'splitbutton',\r\n            icon: 'link',\r\n            title: 'Link',\r\n            onPostRender: this.initOnPostRender('link', editor),\r\n            onclick: () => {\r\n                editor.execCommand('mceLink');\r\n            },\r\n\r\n            menu: [\r\n                { icon: 'link', text: 'Link', onclick: () => { editor.execCommand('mceLink'); } },\r\n                {\r\n                    text: 'Link.Page',\r\n                    tooltip: 'Link.Page.Tooltip',\r\n                    icon: ' eav-icon-sitemap',\r\n                    onclick: () => {\r\n                        vm.openDnnDialog('pagepicker');\r\n                    },\r\n                    onPostRender: () => {\r\n                        replaceIcon('.eav-icon-sitemap', icons.sitemap, ['toolbar-icon', 'dropdown-icon']);\r\n                    },\r\n                }\r\n            ]\r\n        };\r\n        const linkgroupPro = { ...linkgroup };\r\n        linkgroupPro.menu.push({\r\n            icon: ' eav-icon-anchor',\r\n            text: 'Anchor',\r\n            tooltip: 'Link.Anchor.Tooltip',\r\n            onclick: () => { editor.execCommand('mceAnchor'); },\r\n            onPostRender: () => {\r\n                replaceIcon('.eav-icon-anchor', icons.anchor, ['toolbar-icon', 'dropdown-icon']);\r\n            },\r\n        });\r\n        editor.addButton('linkgroup', linkgroup);\r\n        editor.addButton('linkgrouppro', linkgroupPro);\r\n        //#endregion\r\n\r\n        // group with images (adam) - only in PRO mode\r\n        editor.addButton('images', {\r\n            type: 'splitbutton',\r\n            text: '',\r\n            icon: 'image',\r\n            onclick: () => {\r\n                vm.toggleAdam(true);\r\n            },\r\n            menu: [\r\n                {\r\n                    text: 'Image.AdamImage',\r\n                    tooltip: 'Image.AdamImage.Tooltip',\r\n                    icon: 'image',\r\n                    onclick: () => {\r\n                        vm.toggleAdam(true);\r\n                    }\r\n                }, {\r\n                    text: 'Image.DnnImage',\r\n                    tooltip: 'Image.DnnImage.Tooltip',\r\n                    icon: 'image',\r\n                    onclick: () => {\r\n                        vm.toggleAdam(true, true);\r\n                    }\r\n                }, {\r\n                    text: 'Insert\\/edit image', // i18n tinyMce standard\r\n                    icon: 'image',\r\n                    onclick: () => { editor.execCommand('mceImage'); }\r\n\r\n                },\r\n                // note: all these use i18n from tinyMce standard\r\n                { icon: 'alignleft', tooltip: 'Align left', onclick: () => { editor.execCommand('JustifyLeft'); } },\r\n                { icon: 'aligncenter', tooltip: 'Align center', onclick: () => { editor.execCommand('JustifyCenter'); } },\r\n                { icon: 'alignright', tooltip: 'Align right', onclick: () => { editor.execCommand('JustifyRight'); } }\r\n            ]\r\n        });\r\n\r\n        // drop-down with italic, strikethrough, ...\r\n        editor.addButton('formatgroup', {\r\n            type: 'splitbutton',\r\n            tooltip: 'Italic',  // will be autotranslated\r\n            text: '',\r\n            icon: 'italic',\r\n            cmd: 'italic',\r\n            onPostRender: this.initOnPostRender('italic', editor),\r\n            menu: [\r\n                { icon: 'strikethrough', text: 'Strikethrough', onclick: () => { editor.execCommand('strikethrough'); } },\r\n                { icon: 'superscript', text: 'Superscript', onclick: () => { editor.execCommand('superscript'); } },\r\n                { icon: 'subscript', text: 'Subscript', onclick: () => { editor.execCommand('subscript'); } }\r\n            ]\r\n        });\r\n\r\n        // drop-down with italic, strikethrough, ...\r\n        editor.addButton('listgroup', {\r\n            type: 'splitbutton',\r\n            tooltip: 'Numbered list',  // official tinymce key\r\n            text: '',\r\n            icon: 'numlist',\r\n            cmd: 'InsertOrderedList',\r\n            // for unknown reasons, this just doesn't activate correctly :( - neither does the bullist\r\n            onPostRender: this.initOnPostRender('numlist', editor),\r\n            menu: [\r\n                {\r\n                    icon: 'bullist',\r\n                    text: 'Bullet list',\r\n                    onPostRender: this.initOnPostRender('bullist', editor),\r\n                    onclick: () => { editor.execCommand('InsertUnorderedList'); }\r\n                },\r\n                { icon: 'outdent', text: 'Outdent', onclick: () => { editor.execCommand('Outdent'); } },\r\n                { icon: 'indent', text: 'Indent', onclick: () => { editor.execCommand('Indent'); } }\r\n            ]\r\n        });\r\n\r\n\r\n        editor.addButton('modestandard', {\r\n            icon: ' eav-icon-cancel',\r\n            tooltip: 'SwitchMode.Standard',\r\n            onclick: () => { this.switchModes('standard', editor); },\r\n            onPostRender: () => {\r\n                replaceIcon('.eav-icon-cancel', '<i class=\"material-icons\">clear</i>', ['toolbar-icon']);\r\n            }\r\n        });\r\n\r\n        editor.addButton('modeadvanced', {\r\n            icon: ' eav-icon-pro',\r\n            tooltip: 'SwitchMode.Pro',\r\n            onclick: () => { this.switchModes('advanced', editor); },\r\n            onPostRender: () => {\r\n                replaceIcon('.eav-icon-pro', '<i class=\"material-icons\">school</i>', ['toolbar-icon']);\r\n            }\r\n        });\r\n        //#endregion\r\n\r\n        //#region h1, h2, etc. buttons, inspired by http://blog.ionelmc.ro/2013/10/17/tinymce-formatting-toolbar-buttons/\r\n        // note that the complex array is needede because auto-translate only happens if the string is identical\r\n        [['pre', 'Preformatted', 'Preformatted'],\r\n        ['p', 'Paragraph', 'Paragraph'],\r\n        ['code', 'Code', 'Code'],\r\n        ['h1', 'Heading 1', 'H1'],\r\n        ['h2', 'Heading 2', 'H2'],\r\n        ['h3', 'Heading 3', 'H3'],\r\n        ['h4', 'Heading 4', 'Heading 4'],\r\n        ['h5', 'Heading 5', 'Heading 5'],\r\n        ['h6', 'Heading 6', 'Heading 6']].forEach((tag) => {\r\n            editor.addButton(tag[0], {\r\n                tooltip: tag[1],\r\n                text: tag[2],\r\n                onclick: () => { editor.execCommand('mceToggleFormat', false, tag[0]); },\r\n                onPostRender: function () {\r\n                    const self = this,\r\n                        setup = function () {\r\n                            editor.formatter.formatChanged(tag[0], function (state) {\r\n                                self.active(state);\r\n                            });\r\n                        };\r\n                    const x = editor.formatter ? setup() : editor.on('init', setup);\r\n                }\r\n            });\r\n        });\r\n\r\n        // group of buttons with an h3 to start and showing h4-6 + p // ) angular.extend({}, editor.buttons.h3,\r\n        editor.addButton('hgroup', Object.assign({}, editor.buttons.h3,\r\n            {\r\n                type: 'splitbutton',\r\n                menu: [\r\n                    editor.buttons.h4,\r\n                    editor.buttons.h5,\r\n                    editor.buttons.h6,\r\n                    editor.buttons.p\r\n                ]\r\n            }));\r\n        //#endregion\r\n\r\n        // #region inside content\r\n        editor.addButton('addcontentblock', {\r\n            icon: ' eav-icon-content-block',\r\n            classes: 'btn-addcontentblock',\r\n            tooltip: 'ContentBlock.Add',\r\n            onclick: () => {\r\n                const guid = MathHelper.uuid().toLowerCase(); // requires the uuid-generator to be included\r\n                editor.insertContent('<hr sxc=\\'sxc-content-block\\' guid=\\'' + guid + '\\' />');\r\n            },\r\n            onPostRender: () => {\r\n                replaceIcon('.eav-icon-content-block', icons.contentBlock, ['toolbar-icon']);\r\n            },\r\n        });\r\n        // #endregion\r\n\r\n        //#region image alignment / size buttons\r\n        editor.addButton('alignimgleft',\r\n            {\r\n                icon: ' eav-icon-align-left', tooltip: 'Align left', cmd: 'JustifyLeft',\r\n                onPostRender: () => {\r\n                    replaceIcon('.eav-icon-align-left', icons.alignLeft, ['toolbar-icon']);\r\n                    this.initOnPostRender('alignleft', editor);\r\n                },\r\n            }\r\n        );\r\n        editor.addButton('alignimgcenter',\r\n            {\r\n                icon: ' eav-icon-align-center', tooltip: 'Align center', cmd: 'justifycenter',\r\n                onPostRender: () => {\r\n                    replaceIcon('.eav-icon-align-center', icons.alignVertical, ['toolbar-icon']);\r\n                    this.initOnPostRender('aligncenter', editor);\r\n                },\r\n            }\r\n        );\r\n        editor.addButton('alignimgright',\r\n            {\r\n                icon: ' eav-icon-align-right', tooltip: 'Align right', cmd: 'justifyright',\r\n                onPostRender: () => {\r\n                    replaceIcon('.eav-icon-align-right', icons.alignRight, ['toolbar-icon']);\r\n                    this.initOnPostRender('alignright', editor);\r\n                },\r\n            }\r\n        );\r\n\r\n        const imgMenuArray = [];\r\n        for (let imgs = 0; imgs < imgSizes.length; imgs++) {\r\n            const config = {\r\n                icon: ' eav-icon-resize-horizontal',\r\n                tooltip: imgSizes[imgs] + '%',\r\n                text: imgSizes[imgs] + '%',\r\n                onclick: this.makeImgFormatCall(imgSizes[imgs], editor),\r\n                onPostRender: () => {\r\n                    replaceIcon('.eav-icon-resize-horizontal', '<i class=\"material-icons\">photo_size_select_large</i>', ['toolbar-icon']);\r\n                    this.initOnPostRender('imgwidth' + imgSizes[imgs], editor);\r\n                }\r\n            };\r\n            editor.addButton('imgresize' + imgSizes[imgs], config);\r\n            imgMenuArray.push(config);\r\n\r\n            editor.addButton('resizeimg100', {\r\n                icon: ' eav-icon-resize-horizontal', tooltip: '100%',\r\n                onclick: () => { editor.formatter.apply('imgwidth100'); },\r\n                onPostRender: () => {\r\n                    replaceIcon('.eav-icon-resize-horizontal', '<i class=\"material-icons\">photo_size_select_large</i>', ['toolbar-icon']);\r\n                    this.initOnPostRender('imgwidth100', editor);\r\n                }\r\n            });\r\n\r\n            // group of buttons to resize an image 100%, 50%, etc.\r\n            editor.addButton('imgresponsive', Object.assign({}, editor.buttons.resizeimg100,\r\n                { type: 'splitbutton', menu: imgMenuArray }));\r\n            //#endregion\r\n\r\n            editor.addContextToolbar(this.makeTagDetector('a', editor), 'link unlink');\r\n            editor.addContextToolbar(this.makeTagDetector('img', editor),\r\n                'image | alignimgleft alignimgcenter alignimgright imgresponsive | removeformat | remove');\r\n            editor.addContextToolbar(this.makeTagDetector('li,ol,ul', editor), 'bullist numlist | outdent indent');\r\n        }\r\n    }\r\n\r\n    // helper function to add activate/deactivate to buttons like alignleft, alignright etc.\r\n    // tslint:disable-next-line:max-line-length\r\n    static initOnPostRender(name, editor) { // copied/modified from\r\n        // tslint:disable-next-line:max-line-length\r\n        // https://github.com/tinymce/tinymce/blob/ddfa0366fc700334f67b2c57f8c6e290abf0b222/js/tinymce/classes/ui/FormatControls.js#L232-L249\r\n        return function () {\r\n            const self = this; // keep ref to the current button?\r\n\r\n            function watchChange() {\r\n                editor.formatter.formatChanged(name, function (state) {\r\n                    self.active(state);\r\n                });\r\n            }\r\n\r\n            if (editor.formatter) {\r\n                watchChange();\r\n            } else {\r\n                editor.on('init', watchChange);\r\n            }\r\n        };\r\n    }\r\n    //#endregion\r\n\r\n    //#region register formats\r\n\r\n    // the method that will register all formats - like img-sizes\r\n    static registerTinyMceFormats(editor, host, imgSizes: any) {\r\n        const imgformats = {};\r\n        for (let imgs = 0; imgs < imgSizes.length; imgs++) {\r\n            imgformats['imgwidth' + imgSizes[imgs]] = [{ selector: 'img', collapsed: false, styles: { 'width': imgSizes[imgs] + '%' } }];\r\n        }\r\n        editor.formatter.register(imgformats);\r\n    }\r\n\r\n    //#region mode switching and the buttons for it\r\n    static switchModes(mode, editor) {\r\n        editor.settings.toolbar = editor.settings.modes[mode].toolbar;\r\n        editor.settings.menubar = editor.settings.modes[mode].menubar;\r\n        // editor.settings.contextmenu = editor.settings.modes[mode].contextmenu; - doesn't work at the moment\r\n\r\n        // refresh editor toolbar when it's in inline mode  (inline true)\r\n        // editor.theme.panel.remove();    // kill current toolbar\r\n        // editor.theme.renderUI(editor);\r\n\r\n        // refresh editor toolbar when it's NOT in inline mode (inline false)\r\n        editor.editorManager.remove(editor);\r\n        editor.editorManager.init(editor.settings);\r\n\r\n        editor.execCommand('mceFocus');\r\n\r\n        // focus away...\r\n        document.getElementById('dummyfocus').focus();\r\n\r\n        // ...and focus back a bit later\r\n        setTimeout(() => {\r\n            editor.focus();\r\n        }, 100);\r\n    }\r\n\r\n    static makeImgFormatCall(size, editor) {\r\n        return () => {\r\n            editor.formatter.apply('imgwidth' + size);\r\n        };\r\n    }\r\n\r\n    //#region my context toolbars for links, images and lists (ul/li)\r\n    static makeTagDetector(tagWeNeedInTheTagPath, editor) {\r\n        return function tagDetector(currentElement) {\r\n            // check if we are in a tag within a specific tag\r\n            const selectorMatched = editor.dom.is(currentElement, tagWeNeedInTheTagPath) && editor.getBody().contains(currentElement);\r\n            return selectorMatched;\r\n        };\r\n    }\r\n}\r\n","import { Component, OnInit, Input, OnDestroy, ViewEncapsulation } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { skip, first } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { TinymceWysiwygConfig } from '../services/tinymce-wysiwyg-config';\r\nimport { TinyMceDnnBridgeService } from '../services/tinymce-dnnbridge-service';\r\nimport { TinyMceToolbarButtons } from '../services/tinymce-wysiwyg-toolbar';\r\nimport { TinyMceAdamService } from '../services/tinymce-adam-service';\r\nimport { ConnectorObservable } from '../../../../shared/connector';\r\n// tslint:disable-next-line:max-line-length\r\nimport { ExperimentalProps } from '../../../../../src/app/eav-material-controls/input-types/custom/external-webcomponent-properties/external-webcomponent-properties';\r\nimport { InputTypeName } from '../../../../../src/app/shared/models/input-field-models';\r\nimport * as contentStyle from './tinymce-content.css';\r\n\r\n@Component({\r\n  selector: 'app-tinymce-wysiwyg',\r\n  templateUrl: './tinymce-wysiwyg.component.html',\r\n  styleUrls: ['./tinymce-wysiwyg.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class TinymceWysiwygComponent implements OnInit, OnDestroy {\r\n  @Input() connector: ConnectorObservable<string>;\r\n  @Input() experimental: ExperimentalProps;\r\n  @Input() host: any;\r\n  @Input() translateService: TranslateService;\r\n  @Input()\r\n  set adamSetValueCallback(value: any) {\r\n    this.adamSetValue(value);\r\n  }\r\n  get adamSetValueCallback(): any { return this.adamSetValue; }\r\n  @Input()\r\n  set adamAfterUploadCallback(value: any) {\r\n    this.adamAfterUpload(value);\r\n  }\r\n  get adamAfterUploadCallback(): any { return this.adamAfterUpload; }\r\n\r\n  id: string;\r\n  initialValue: any;\r\n  disabled: boolean;\r\n  options: any;\r\n  adam: any;\r\n  editor: any;\r\n  setAdamConfig: any;\r\n  adamSetValue: any;\r\n  adamAfterUpload: any;\r\n  processResultOfDnnBridge: any;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(public tinymceWysiwygConfig: TinymceWysiwygConfig,\r\n    public tinyMceDnnBridgeService: TinyMceDnnBridgeService,\r\n    public tinyMceAdamService: TinyMceAdamService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    // this.loadMaterialIcons();\r\n    this.calculateInitialValues();\r\n    this.subscribeToFormChanges();\r\n\r\n    const settings = {\r\n      enableContentBlocks: false,\r\n    };\r\n\r\n    const selectorOptions = {\r\n      // selector: 'editor#' + this.id,\r\n      body_class: 'field-string-wysiwyg-mce-box', // when inline=false\r\n      content_style: contentStyle,\r\n      height: '100%',\r\n      branding: false,\r\n      setup: this.tinyMceInitCallback.bind(this),\r\n    };\r\n\r\n    this.enableContentBlocksIfPossible(settings);\r\n    const tempOptions = Object.assign(selectorOptions, this.tinymceWysiwygConfig.getDefaultOptions(settings));\r\n\r\n    const currentLang = this.translateService.currentLang;\r\n    this.options = this.tinymceWysiwygConfig.setLanguageOptions(currentLang, tempOptions);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n  }\r\n\r\n  // /**\r\n  //  * function call on change\r\n  //  * @param {*} event\r\n  //  * @param {*} value\r\n  //  */\r\n  changeCheck(event, value) {\r\n    // do validity checks\r\n    const isValid = this.validateValue(value);\r\n    if (isValid) {\r\n      this.connector.data.update(value);\r\n    }\r\n  }\r\n\r\n  // /**\r\n  //  * For validating value\r\n  //  * @param {*} value\r\n  //  */\r\n  validateValue(value) {\r\n    // TODO: show validate message ???\r\n    return true;\r\n  }\r\n\r\n  // /**\r\n  //  * On render and change set configuration of control\r\n  //  * @param {*} disabled\r\n  //  */\r\n  setOptions(disabled) {\r\n    const isReadOnly = this.editor.editorManager.get(this.id).readonly;\r\n    if (disabled && !isReadOnly) {\r\n      this.editor.editorManager.get(this.id).setMode('readonly');\r\n    } else if (!disabled && isReadOnly) {\r\n      this.editor.editorManager.get(this.id).setMode('code');\r\n    }\r\n  }\r\n\r\n  // /**\r\n  //  * New value from the form into the view\r\n  //  * This function can be triggered from outside when value changed\r\n  //  * @param {*} newValue\r\n  //  */\r\n  setValue(newValue = '') {\r\n    const oldValue = this.editor.editorManager.get(this.id).getContent();\r\n    console.log('TinymceWysiwygComponent setValue', 'id:', this.id, 'old:', oldValue, 'new:', newValue);\r\n    if (newValue !== oldValue) {\r\n      this.editor.editorManager.get(this.id).setContent(newValue);\r\n    }\r\n  }\r\n\r\n  // /**\r\n  //  * on tinyMce setup we set toolbarButtons and change event listener\r\n  //  * @param {*} editor\r\n  //  */\r\n  tinyMceInitCallback(editor) {\r\n    // set editor\r\n    this.editor = editor;\r\n    // Attach adam\r\n    this.tinyMceAdamService.attachAdam(this, editor.editorManager);\r\n    // Set Adam configuration\r\n    this.setAdamConfig({\r\n      adamModeConfig: { usePortalRoot: false },\r\n      allowAssetsInRoot: true,\r\n      autoLoad: false,\r\n      enableSelect: true,\r\n      folderDepth: 0,\r\n      fileFilter: '',\r\n      metadataContentTypes: '',\r\n      subFolder: '',\r\n      showImagesOnly: false  // adamModeImage?\r\n    });\r\n\r\n    if (editor.settings.language) {\r\n      this.tinymceWysiwygConfig.addTranslations(editor.settings.language, this.translateService, editor.editorManager);\r\n    }\r\n    // Attach DnnBridgeService\r\n    this.tinyMceDnnBridgeService.attachDnnBridgeService(this, editor);\r\n\r\n    const imgSizes = this.tinymceWysiwygConfig.svc().imgSizes;\r\n    TinyMceToolbarButtons.addTinyMceToolbarButtons(this, editor, imgSizes);\r\n    editor.on('init', e => {\r\n      // editor.selection.select(editor.getBody(), true);\r\n      // editor.selection.collapse(false);\r\n      console.log('Petar wysiwyg order: editor.on init => this.host.setInitValues();', editor.getContent());\r\n    });\r\n\r\n    editor.on('change', e => {\r\n      this.changeCheck(e, editor.getContent());\r\n      console.log('Petar wysiwyg order: editor.on change => this.changeCheck(e, editor.getContent()); => this.host.update(value);',\r\n        editor.getContent());\r\n    });\r\n  }\r\n\r\n  // private loadMaterialIcons() {\r\n  //   const head = document.getElementsByTagName('head')[0];\r\n  //   const link = document.createElement('link');\r\n  //   link.rel = 'stylesheet';\r\n  //   link.type = 'text/css';\r\n  //   link.href = 'https://fonts.googleapis.com/icon?family=Material+Icons';\r\n  //   link.media = 'all';\r\n  //   head.appendChild(link);\r\n  // }\r\n\r\n  private calculateInitialValues(): void {\r\n    // spm 2019.04.05. id will clash if we open the same entity as a sub form, e.g. in entity-default field\r\n    this.id = `string-wysiwyg-tinymce-${Math.random() * Math.pow(10, 17)}-${this.connector.field.name}`;\r\n    this.connector.data.value$.pipe(first()).subscribe((firstValue: any) => {\r\n      this.initialValue = firstValue;\r\n    });\r\n    this.disabled = this.experimental.formGroup.controls[this.connector.field.name].disabled;\r\n  }\r\n\r\n  private subscribeToFormChanges(): void {\r\n    this.subscriptions.push(\r\n      this.connector.data.value$.pipe(skip(1)).subscribe((newValue: any) => {\r\n        this.setValue(newValue);\r\n      }),\r\n      // spm 2019.04.17. disabled check doesn't work when field is translated without value change\r\n      this.experimental.formSetValueChange$.subscribe(formSet => {\r\n        this.disabled = this.experimental.formGroup.controls[this.connector.field.name].disabled;\r\n      })\r\n    );\r\n  }\r\n\r\n  private enableContentBlocksIfPossible(settings) {\r\n    // quit if there are no following fields\r\n    if (this.experimental.allInputTypeNames.length === this.connector.field.index + 1) {\r\n      return;\r\n    }\r\n    const nextField: InputTypeName = this.experimental.allInputTypeNames[this.connector.field.index + 1];\r\n    if (nextField.inputType === 'entity-content-blocks') {\r\n      settings.enableContentBlocks = true;\r\n    }\r\n  }\r\n}\r\n","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\nexport function first(predicate, defaultValue) {\n    const hasDefaultValue = arguments.length >= 2;\n    return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));\n}\n//# sourceMappingURL=first.js.map","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule, Injector } from '@angular/core';\r\nimport { createCustomElement } from '@angular/elements';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { TinymceWysiwygComponent } from './tinymce-wysiwyg/tinymce-wysiwyg.component';\r\nimport { EditorModule } from '@tinymce/tinymce-angular';\r\nimport { TinymceWysiwygConfig } from './services/tinymce-wysiwyg-config';\r\nimport { TinyMceDnnBridgeService } from './services/tinymce-dnnbridge-service';\r\nimport { TinyMceAdamService } from './services/tinymce-adam-service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    TinymceWysiwygComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    EditorModule\r\n  ],\r\n  providers: [\r\n    TinymceWysiwygConfig,\r\n    TinyMceDnnBridgeService,\r\n    TinyMceAdamService,\r\n  ],\r\n  entryComponents: [AppComponent, TinymceWysiwygComponent]\r\n})\r\nexport class AppModule {\r\n  constructor(private injector: Injector) {\r\n    const el = createCustomElement(TinymceWysiwygComponent, { injector });\r\n    // if (customElements.get('field-string-wysiwyg')) {\r\n    //   console.log('exist', customElements.get('field-string-wysiwyg'));\r\n    // }\r\n    // try {\r\n    console.log('field-string-wysiwyg define', el);\r\n    customElements.define('field-string-wysiwyg', el);\r\n    // } catch (error) {\r\n    //   console.log('error:', error);\r\n    // }\r\n  }\r\n  ngDoBootstrap() { }\r\n}\r\n\r\n\r\n","import { Component, ViewEncapsulation, Input, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n  // encapsulation: ViewEncapsulation.Native\r\n})\r\nexport class AppComponent implements OnInit {\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"./app.component.css.shim.ngstyle\";\nimport * as i1 from \"@angular/core\";\nimport * as i2 from \"./app.component\";\nvar styles_AppComponent = [i0.styles];\nvar RenderType_AppComponent = i1.ɵcrt({ encapsulation: 0, styles: styles_AppComponent, data: {} });\nexport { RenderType_AppComponent as RenderType_AppComponent };\nexport function View_AppComponent_0(_l) { return i1.ɵvid(0, [], null, null); }\nexport function View_AppComponent_Host_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"app-root\", [], null, null, null, View_AppComponent_0, RenderType_AppComponent)), i1.ɵdid(1, 114688, null, 0, i2.AppComponent, [], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar AppComponentNgFactory = i1.ɵccf(\"app-root\", i2.AppComponent, View_AppComponent_Host_0, {}, {}, []);\nexport { AppComponentNgFactory as AppComponentNgFactory };\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nvar styles = [\"\\n/*# sourceMappingURL=https://sources.2sxc.org/10.01.00/ng-edit/elements/field-string-wysiwyg/C:/Projects/eav-item-dialog-angular/projects/field-string-wysiwyg/src/app/app.component.css.map*/\"];\nexport { styles as styles };\n","import { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexport class MapOperator {\n    constructor(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    }\n}\nclass MapSubscriber extends Subscriber {\n    constructor(destination, project, thisArg) {\n        super(destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=map.js.map","/**\n * @license Angular v7.2.1\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken, ɵisPromise, ɵisObservable, forwardRef, Directive, Renderer2, ElementRef, Optional, Inject, Injectable, Injector, Input, ɵlooseIdentical, Host, isDevMode, Self, EventEmitter, SkipSelf, Output, Version, NgModule } from '@angular/core';\nimport { forkJoin, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * \\@publicApi\n * @abstract\n */\nclass AbstractControlDirective {\n    /**\n     * \\@description\n     * Reports the value of the control if it is present, otherwise null.\n     * @return {?}\n     */\n    get value() { return this.control ? this.control.value : null; }\n    /**\n     * \\@description\n     * Reports whether the control is valid. A control is considered valid if no\n     * validation errors exist with the current value.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get valid() { return this.control ? this.control.valid : null; }\n    /**\n     * \\@description\n     * Reports whether the control is invalid, meaning that an error exists in the input value.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get invalid() { return this.control ? this.control.invalid : null; }\n    /**\n     * \\@description\n     * Reports whether a control is pending, meaning that that async validation is occurring and\n     * errors are not yet available for the input value. If the control is not present, null is\n     * returned.\n     * @return {?}\n     */\n    get pending() { return this.control ? this.control.pending : null; }\n    /**\n     * \\@description\n     * Reports whether the control is disabled, meaning that the control is disabled\n     * in the UI and is exempt from validation checks and excluded from aggregate\n     * values of ancestor controls. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get disabled() { return this.control ? this.control.disabled : null; }\n    /**\n     * \\@description\n     * Reports whether the control is enabled, meaning that the control is included in ancestor\n     * calculations of validity or value. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get enabled() { return this.control ? this.control.enabled : null; }\n    /**\n     * \\@description\n     * Reports the control's validation errors. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get errors() { return this.control ? this.control.errors : null; }\n    /**\n     * \\@description\n     * Reports whether the control is pristine, meaning that the user has not yet changed\n     * the value in the UI. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get pristine() { return this.control ? this.control.pristine : null; }\n    /**\n     * \\@description\n     * Reports whether the control is dirty, meaning that the user has changed\n     * the value in the UI. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get dirty() { return this.control ? this.control.dirty : null; }\n    /**\n     * \\@description\n     * Reports whether the control is touched, meaning that the user has triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get touched() { return this.control ? this.control.touched : null; }\n    /**\n     * \\@description\n     * Reports the validation status of the control. Possible values include:\n     * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get status() { return this.control ? this.control.status : null; }\n    /**\n     * \\@description\n     * Reports whether the control is untouched, meaning that the user has not yet triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get untouched() { return this.control ? this.control.untouched : null; }\n    /**\n     * \\@description\n     * Returns a multicasting observable that emits a validation status whenever it is\n     * calculated for the control. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get statusChanges() {\n        return this.control ? this.control.statusChanges : null;\n    }\n    /**\n     * \\@description\n     * Returns a multicasting observable of value changes for the control that emits every time the\n     * value of the control changes in the UI or programmatically.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get valueChanges() {\n        return this.control ? this.control.valueChanges : null;\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return null; }\n    /**\n     * \\@description\n     * Resets the control with the provided value if the control is present.\n     * @param {?=} value\n     * @return {?}\n     */\n    reset(value = undefined) {\n        if (this.control)\n            this.control.reset(value);\n    }\n    /**\n     * \\@description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    }\n    /**\n     * \\@description\n     * Reports error data for the control with the given path.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n *\n * \\@publicApi\n * @abstract\n */\nclass ControlContainer extends AbstractControlDirective {\n    /**\n     * \\@description\n     * The top-level form directive for the control.\n     * @return {?}\n     */\n    get formDirective() { return null; }\n    /**\n     * \\@description\n     * The path to this group.\n     * @return {?}\n     */\n    get path() { return null; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmptyInputValue(value) {\n    // we don't check for string here so it also works with arrays\n    return value == null || value.length === 0;\n}\n/**\n * \\@description\n * An `InjectionToken` for registering additional synchronous validators used with `AbstractControl`s.\n *\n * @see `NG_ASYNC_VALIDATORS`\n *\n * \\@usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst NG_VALIDATORS = new InjectionToken('NgValidators');\n/**\n * \\@description\n * An `InjectionToken` for registering additional asynchronous validators used with `AbstractControl`s.\n *\n * @see `NG_VALIDATORS`\n *\n * \\@publicApi\n * @type {?}\n */\nconst NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');\n/** @type {?} */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n/**\n * \\@description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n * \\@publicApi\n */\nclass Validators {\n    /**\n     * \\@description\n     * Validator that requires the control's value to be greater than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate against a minimum of 3\n     *\n     * ```typescript\n     * const control = new FormControl(2, Validators.min(3));\n     *\n     * console.log(control.errors); // {min: {min: 3, actual: 2}}\n     * ```\n     *\n     * @param {?} min\n     * @return {?} A validator function that returns an error map with the\n     * `min` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static min(min) {\n        return (control) => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n        };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value to be less than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate against a maximum of 15\n     *\n     * ```typescript\n     * const control = new FormControl(16, Validators.max(15));\n     *\n     * console.log(control.errors); // {max: {max: 15, actual: 16}}\n     * ```\n     *\n     * @param {?} max\n     * @return {?} A validator function that returns an error map with the\n     * `max` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static max(max) {\n        return (control) => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n        };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control have a non-empty value.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field is non-empty\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.required);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @param {?} control\n     * @return {?} An error map with the `required` property\n     * if the validation check fails, otherwise `null`.\n     *\n     */\n    static required(control) {\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value be true. This validator is commonly\n     * used for required checkboxes.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field value is true\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.requiredTrue);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @param {?} control\n     * @return {?} An error map that contains the `required` property\n     * set to `true` if the validation check fails, otherwise `null`.\n     */\n    static requiredTrue(control) {\n        return control.value === true ? null : { 'required': true };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value pass an email validation test.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field matches a valid email pattern\n     *\n     * ```typescript\n     * const control = new FormControl('bad\\@', Validators.email);\n     *\n     * console.log(control.errors); // {email: true}\n     * ```\n     *\n     * @param {?} control\n     * @return {?} An error map with the `email` property\n     * if the validation check fails, otherwise `null`.\n     *\n     */\n    static email(control) {\n        if (isEmptyInputValue(control.value)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n    }\n    /**\n     * \\@description\n     * Validator that requires the length of the control's value to be greater than or equal\n     * to the provided minimum length. This validator is also provided by default if you use the\n     * the HTML5 `minlength` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field has a minimum of 3 characters\n     *\n     * ```typescript\n     * const control = new FormControl('ng', Validators.minLength(3));\n     *\n     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n     * ```\n     *\n     * ```html\n     * <input minlength=\"5\">\n     * ```\n     *\n     * @param {?} minLength\n     * @return {?} A validator function that returns an error map with the\n     * `minlength` if the validation check fails, otherwise `null`.\n     */\n    static minLength(minLength) {\n        return (control) => {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const length = control.value ? control.value.length : 0;\n            return length < minLength ?\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                null;\n        };\n    }\n    /**\n     * \\@description\n     * Validator that requires the length of the control's value to be less than or equal\n     * to the provided maximum length. This validator is also provided by default if you use the\n     * the HTML5 `maxlength` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field has maximum of 5 characters\n     *\n     * ```typescript\n     * const control = new FormControl('Angular', Validators.maxLength(5));\n     *\n     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n     * ```\n     *\n     * ```html\n     * <input maxlength=\"5\">\n     * ```\n     *\n     * @param {?} maxLength\n     * @return {?} A validator function that returns an error map with the\n     * `maxlength` property if the validation check fails, otherwise `null`.\n     */\n    static maxLength(maxLength) {\n        return (control) => {\n            /** @type {?} */\n            const length = control.value ? control.value.length : 0;\n            return length > maxLength ?\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                null;\n        };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value to match a regex pattern. This validator is also\n     * provided by default if you use the HTML5 `pattern` attribute.\n     *\n     * Note that if a Regexp is provided, the Regexp is used as is to test the values. On the other\n     * hand, if a string is passed, the `^` character is prepended and the `$` character is\n     * appended to the provided string (if not already present), and the resulting regular\n     * expression is used to test the values.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field only contains letters or spaces\n     *\n     * ```typescript\n     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n     *\n     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n     * ```\n     *\n     * ```html\n     * <input pattern=\"[a-zA-Z ]*\">\n     * ```\n     *\n     * @param {?} pattern\n     * @return {?} A validator function that returns an error map with the\n     * `pattern` property if the validation check fails, otherwise `null`.\n     */\n    static pattern(pattern) {\n        if (!pattern)\n            return Validators.nullValidator;\n        /** @type {?} */\n        let regex;\n        /** @type {?} */\n        let regexStr;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n            if (pattern.charAt(0) !== '^')\n                regexStr += '^';\n            regexStr += pattern;\n            if (pattern.charAt(pattern.length - 1) !== '$')\n                regexStr += '$';\n            regex = new RegExp(regexStr);\n        }\n        else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        return (control) => {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const value = control.value;\n            return regex.test(value) ? null :\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n        };\n    }\n    /**\n     * \\@description\n     * Validator that performs no operation.\n     * @param {?} control\n     * @return {?}\n     */\n    static nullValidator(control) { return null; }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    static compose(validators) {\n        if (!validators)\n            return null;\n        /** @type {?} */\n        const presentValidators = (/** @type {?} */ (validators.filter(isPresent)));\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            return _mergeErrors(_executeValidators(control, presentValidators));\n        };\n    }\n    /**\n     * \\@description\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error objects for the provided control.\n     *\n     * @param {?} validators\n     * @return {?} A validator function that returns an error map with the\n     * merged error objects of the async validators if the validation check fails, otherwise `null`.\n     */\n    static composeAsync(validators) {\n        if (!validators)\n            return null;\n        /** @type {?} */\n        const presentValidators = (/** @type {?} */ (validators.filter(isPresent)));\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            /** @type {?} */\n            const observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n            return forkJoin(observables).pipe(map(_mergeErrors));\n        };\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPresent(o) {\n    return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction toObservable(r) {\n    /** @type {?} */\n    const obs = ɵisPromise(r) ? from(r) : r;\n    if (!(ɵisObservable(obs))) {\n        throw new Error(`Expected validator to return Promise or Observable.`);\n    }\n    return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control, validators) {\n    return validators.map(v => v(control));\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control, validators) {\n    return validators.map(v => v(control));\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors) {\n    /** @type {?} */\n    const res = arrayOfErrors.reduce((res, errors) => {\n        return errors != null ? Object.assign({}, (/** @type {?} */ (res)), errors) : (/** @type {?} */ (res));\n    }, {});\n    return Object.keys(res).length === 0 ? null : res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n * \\@publicApi\n * @type {?}\n */\nconst NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxControlValueAccessor),\n    multi: true,\n};\n/**\n * \\@description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * \\@usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass CheckboxControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the \"checked\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) { this.onChange = fn; }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nCheckboxControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                providers: [CHECKBOX_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nCheckboxControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DefaultValueAccessor),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\nfunction _isAndroid() {\n    /** @type {?} */\n    const userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * \\@description\n * Provide this token to control if form directives buffer IME input until\n * the \"compositionend\" event occurs.\n * \\@publicApi\n * @type {?}\n */\nconst COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');\n/**\n * \\@description\n * The default `ControlValueAccessor` for writing a value and listening to changes on input\n * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * \\@usageNotes\n *\n * ### Using the default value accessor\n *\n * The following example shows how to use an input element that activates the default value accessor\n * (in this case, a text field).\n *\n * ```ts\n * const firstNameControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"text\" [formControl]=\"firstNameControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass DefaultValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _compositionMode\n     */\n    constructor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        /**\n         * \\@description\n         * The registered callback function called when an input event occurs on the input element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n        /**\n         * Whether the user is creating a composition string (IME events).\n         */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        /** @type {?} */\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) { this.onChange = fn; }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _handleInput(value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _compositionStart() { this._composing = true; }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _compositionEnd(value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    }\n}\nDefaultValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                // TODO: vsavkin replace the above selector with the one below it once\n                // https://github.com/angular/angular/issues/3011 is implemented\n                // selector: '[ngModel],[formControl],[formControlName]',\n                host: {\n                    '(input)': '$any(this)._handleInput($event.target.value)',\n                    '(blur)': 'onTouched()',\n                    '(compositionstart)': '$any(this)._compositionStart()',\n                    '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n                },\n                providers: [DEFAULT_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nDefaultValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeValidator(validator) {\n    if (((/** @type {?} */ (validator))).validate) {\n        return (c) => ((/** @type {?} */ (validator))).validate(c);\n    }\n    else {\n        return (/** @type {?} */ (validator));\n    }\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeAsyncValidator(validator) {\n    if (((/** @type {?} */ (validator))).validate) {\n        return (c) => ((/** @type {?} */ (validator))).validate(c);\n    }\n    else {\n        return (/** @type {?} */ (validator));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberValueAccessor),\n    multi: true\n};\n/**\n * \\@description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * \\@usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n */\nclass NumberValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@description\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        /** @type {?} */\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nNumberValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [NUMBER_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nNumberValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction unimplemented() {\n    throw new Error('unimplemented');\n}\n/**\n * \\@description\n * A base class that all control `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n *\n * \\@publicApi\n * @abstract\n */\nclass NgControl extends AbstractControlDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * \\@description\n         * The parent form for the control.\n         *\n         * \\@internal\n         */\n        this._parent = null;\n        /**\n         * \\@description\n         * The name for the control\n         */\n        this.name = null;\n        /**\n         * \\@description\n         * The value accessor for the control\n         */\n        this.valueAccessor = null;\n        /**\n         * \\@description\n         * The uncomposed array of synchronous validators for the control\n         *\n         * \\@internal\n         */\n        this._rawValidators = [];\n        /**\n         * \\@description\n         * The uncomposed array of async validators for the control\n         *\n         * \\@internal\n         */\n        this._rawAsyncValidators = [];\n    }\n    /**\n     * \\@description\n     * The registered synchronous validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     * @return {?}\n     */\n    get validator() { return (/** @type {?} */ (unimplemented())); }\n    /**\n     * \\@description\n     * The registered async validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     * @return {?}\n     */\n    get asyncValidator() { return (/** @type {?} */ (unimplemented())); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioControlValueAccessor),\n    multi: true\n};\n/**\n * \\@description\n * Class used by Angular to track radio buttons. For internal use only.\n */\nclass RadioControlRegistry {\n    constructor() {\n        this._accessors = [];\n    }\n    /**\n     * \\@description\n     * Adds a control to the internal registry. For internal use only.\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    add(control, accessor) {\n        this._accessors.push([control, accessor]);\n    }\n    /**\n     * \\@description\n     * Removes a control from the internal registry. For internal use only.\n     * @param {?} accessor\n     * @return {?}\n     */\n    remove(accessor) {\n        for (let i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    }\n    /**\n     * \\@description\n     * Selects a radio button. For internal use only.\n     * @param {?} accessor\n     * @return {?}\n     */\n    select(accessor) {\n        this._accessors.forEach((c) => {\n            if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    }\n    /**\n     * @private\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    _isSameGroup(controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    }\n}\nRadioControlRegistry.decorators = [\n    { type: Injectable }\n];\n/**\n * \\@description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * \\@usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass RadioControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _registry\n     * @param {?} _injector\n     */\n    constructor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = () => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive is initialized. For internal use only.\n     *\n     * @return {?}\n     */\n    ngOnInit() {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     *\n     * @return {?}\n     */\n    ngOnDestroy() { this._registry.remove(this); }\n    /**\n     * \\@description\n     * Sets the \"checked\" property value on the radio input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._state = value === this.value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._fn = fn;\n        this.onChange = () => {\n            fn(this.value);\n            this._registry.select(this);\n        };\n    }\n    /**\n     * Sets the \"value\" on the radio input element and unchecks it.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    fireUncheck(value) { this.writeValue(value); }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _throwNameError() {\n        throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n    }\n}\nRadioControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                providers: [RADIO_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nRadioControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: RadioControlRegistry },\n    { type: Injector }\n];\nRadioControlValueAccessor.propDecorators = {\n    name: [{ type: Input }],\n    formControlName: [{ type: Input }],\n    value: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RangeValueAccessor),\n    multi: true\n};\n/**\n * \\@description\n * The `ControlValueAccessor` for writing a range value and listening to range input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * \\@usageNotes\n *\n * ### Using a range input with a reactive form\n *\n * The following example shows how to use a range input with a reactive form.\n *\n * ```ts\n * const ageControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"range\" [formControl]=\"ageControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n */\nclass RangeValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@description\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the range input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nRangeValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [RANGE_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nRangeValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst FormErrorExamples = {\n    formControlName: `\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });`,\n    formGroupName: `\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });`,\n    formArrayName: `\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });`,\n    ngModelGroup: `\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>`,\n    ngModelWithFormGroup: `\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  `\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ReactiveErrors {\n    /**\n     * @return {?}\n     */\n    static controlParentException() {\n        throw new Error(`formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${FormErrorExamples.formControlName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static ngModelGroupException() {\n        throw new Error(`formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ${FormErrorExamples.formGroupName}\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ${FormErrorExamples.ngModelGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static missingFormException() {\n        throw new Error(`formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ${FormErrorExamples.formControlName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static groupParentException() {\n        throw new Error(`formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${FormErrorExamples.formGroupName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static arrayParentException() {\n        throw new Error(`formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ${FormErrorExamples.formArrayName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static disabledAttrWarning() {\n        console.warn(`\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    `);\n    }\n    /**\n     * @param {?} directiveName\n     * @return {?}\n     */\n    static ngModelWarning(directiveName) {\n        console.warn(`\n    It looks like you're using ngModel on the same form field as ${directiveName}. \n    Support for using the ngModel input property and ngModelChange event with \n    reactive form directives has been deprecated in Angular v6 and will be removed \n    in Angular v7.\n    \n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective'\n            : 'FormControlName'}#use-with-ngmodel\n    `);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectControlValueAccessor),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * \\@description\n * The `ControlValueAccessor` for writing select control values and listening to select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * \\@usageNotes\n *\n * ### Using select controls in a reactive form\n *\n * The following examples show how to use a select control in a reactive form.\n *\n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Using select controls in a template-driven form\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * ### Customizing option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ```ts\n * const selectedCountriesControl = new FormControl();\n * ```\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * **Note:** We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass SelectControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n        this._compareWith = ɵlooseIdentical;\n    }\n    /**\n     * \\@description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on the input element. The \"selectedIndex\"\n     * property is also set if an ID is provided on the option element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        /** @type {?} */\n        const id = this._getOptionId(value);\n        if (id == null) {\n            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        /** @type {?} */\n        const valueString = _buildValueString(id, value);\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (valueString) => {\n            this.value = this._getOptionValue(valueString);\n            fn(this.value);\n        };\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _registerOption() { return (this._idCounter++).toString(); }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    _getOptionValue(valueString) {\n        /** @type {?} */\n        const id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    }\n}\nSelectControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                providers: [SELECT_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nSelectControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nSelectControlValueAccessor.propDecorators = {\n    compareWith: [{ type: Input }]\n};\n/**\n * \\@description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectControlValueAccessor`\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgSelectOption {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    /**\n     * \\@description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     * @param {?} value\n     * @return {?}\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._select._optionMap.set(this.id, value);\n        this._setElementValue(_buildValueString(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * \\@description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this._setElementValue(value);\n        if (this._select)\n            this._select.writeValue(this._select.value);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nNgSelectOption.decorators = [\n    { type: Directive, args: [{ selector: 'option' },] }\n];\n/** @nocollapse */\nNgSelectOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host }] }\n];\nNgSelectOption.propDecorators = {\n    ngValue: [{ type: Input, args: ['ngValue',] }],\n    value: [{ type: Input, args: ['value',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (typeof value === 'string')\n        value = `'${value}'`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * \\@description\n * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @see `SelectControlValueAccessor`\n *\n * \\@usageNotes\n *\n * ### Using a multi-select control\n *\n * The follow example shows you how to use a multi-select control with a reactive form.\n *\n * ```ts\n * const countryControl = new FormControl();\n * ```\n *\n * ```\n * <select multiple name=\"countries\" [formControl]=\"countryControl\">\n *   <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *     {{ country.name }}\n *   </option>\n * </select>\n * ```\n *\n * ### Customizing option selection\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * See the `SelectControlValueAccessor` for usage.\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass SelectMultipleControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n        this._compareWith = ɵlooseIdentical;\n    }\n    /**\n     * \\@description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * \\@description\n     * Sets the \"value\" property on one or of more\n     * of the select's options.\n     *\n     * @param {?} value The value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        /** @type {?} */\n        let optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            /** @type {?} */\n            const ids = value.map((v) => this._getOptionId(v));\n            optionSelectedStateSetter = (opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); };\n        }\n        else {\n            optionSelectedStateSetter = (opt, o) => { opt._setSelected(false); };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes\n     * and writes an array of the selected options.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (_) => {\n            /** @type {?} */\n            const selected = [];\n            if (_.hasOwnProperty('selectedOptions')) {\n                /** @type {?} */\n                const options = _.selectedOptions;\n                for (let i = 0; i < options.length; i++) {\n                    /** @type {?} */\n                    const opt = options.item(i);\n                    /** @type {?} */\n                    const val = this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            // Degrade on IE\n            else {\n                /** @type {?} */\n                const options = (/** @type {?} */ (_.options));\n                for (let i = 0; i < options.length; i++) {\n                    /** @type {?} */\n                    const opt = options.item(i);\n                    if (opt.selected) {\n                        /** @type {?} */\n                        const val = this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            this.value = selected;\n            fn(selected);\n        };\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _registerOption(value) {\n        /** @type {?} */\n        const id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith((/** @type {?} */ (this._optionMap.get(id)))._value, value))\n                return id;\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    _getOptionValue(valueString) {\n        /** @type {?} */\n        const id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? (/** @type {?} */ (this._optionMap.get(id)))._value : valueString;\n    }\n}\nSelectMultipleControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nSelectMultipleControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nSelectMultipleControlValueAccessor.propDecorators = {\n    compareWith: [{ type: Input }]\n};\n/**\n * \\@description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectMultipleControlValueAccessor`\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgSelectMultipleOption {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    /**\n     * \\@description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     * @param {?} value\n     * @return {?}\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._value = value;\n        this._setElementValue(_buildValueString$1(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * \\@description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this._select) {\n            this._value = value;\n            this._setElementValue(_buildValueString$1(this.id, value));\n            this._select.writeValue(this._select.value);\n        }\n        else {\n            this._setElementValue(value);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    _setSelected(selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nNgSelectMultipleOption.decorators = [\n    { type: Directive, args: [{ selector: 'option' },] }\n];\n/** @nocollapse */\nNgSelectMultipleOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host }] }\n];\nNgSelectMultipleOption.propDecorators = {\n    ngValue: [{ type: Input, args: ['ngValue',] }],\n    value: [{ type: Input, args: ['value',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\nfunction controlPath(name, parent) {\n    return [...(/** @type {?} */ (parent.path)), name];\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpControl(control, dir) {\n    if (!control)\n        _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor)\n        _throwError(dir, 'No value accessor for form control with');\n    control.validator = Validators.compose([(/** @type {?} */ (control.validator)), dir.validator]);\n    control.asyncValidator = Validators.composeAsync([(/** @type {?} */ (control.asyncValidator)), dir.asyncValidator]);\n    (/** @type {?} */ (dir.valueAccessor)).writeValue(control.value);\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    if ((/** @type {?} */ (dir.valueAccessor)).setDisabledState) {\n        control.registerOnDisabledChange((isDisabled) => { (/** @type {?} */ ((/** @type {?} */ (dir.valueAccessor)).setDisabledState))(isDisabled); });\n    }\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    dir._rawValidators.forEach((validator) => {\n        if (((/** @type {?} */ (validator))).registerOnValidatorChange)\n            (/** @type {?} */ (((/** @type {?} */ (validator))).registerOnValidatorChange))(() => control.updateValueAndValidity());\n    });\n    dir._rawAsyncValidators.forEach((validator) => {\n        if (((/** @type {?} */ (validator))).registerOnValidatorChange)\n            (/** @type {?} */ (((/** @type {?} */ (validator))).registerOnValidatorChange))(() => control.updateValueAndValidity());\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction cleanUpControl(control, dir) {\n    (/** @type {?} */ (dir.valueAccessor)).registerOnChange(() => _noControlError(dir));\n    (/** @type {?} */ (dir.valueAccessor)).registerOnTouched(() => _noControlError(dir));\n    dir._rawValidators.forEach((validator) => {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    dir._rawAsyncValidators.forEach((validator) => {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    if (control)\n        control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpViewChangePipeline(control, dir) {\n    (/** @type {?} */ (dir.valueAccessor)).registerOnChange((newValue) => {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpBlurPipeline(control, dir) {\n    (/** @type {?} */ (dir.valueAccessor)).registerOnTouched(() => {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction updateControl(control, dir) {\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    dir.viewToModelUpdate(control._pendingValue);\n    control._pendingChange = false;\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpModelChangePipeline(control, dir) {\n    control.registerOnChange((newValue, emitModelEvent) => {\n        // control -> view\n        (/** @type {?} */ (dir.valueAccessor)).writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null)\n        _throwError(dir, 'Cannot find control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\nfunction _throwError(dir, message) {\n    /** @type {?} */\n    let messageEnd;\n    if ((/** @type {?} */ (dir.path)).length > 1) {\n        messageEnd = `path: '${(/** @type {?} */ (dir.path)).join(' -> ')}'`;\n    }\n    else if ((/** @type {?} */ (dir.path))[0]) {\n        messageEnd = `name: '${dir.path}'`;\n    }\n    else {\n        messageEnd = 'unspecified name attribute';\n    }\n    throw new Error(`${message} ${messageEnd}`);\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeValidators(validators) {\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n        null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    /** @type {?} */\n    const change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !ɵlooseIdentical(viewModel, change.currentValue);\n}\n/** @type {?} */\nconst BUILTIN_ACCESSORS = [\n    CheckboxControlValueAccessor,\n    RangeValueAccessor,\n    NumberValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\nfunction isBuiltInAccessor(valueAccessor) {\n    return BUILTIN_ACCESSORS.some(a => valueAccessor.constructor === a);\n}\n/**\n * @param {?} form\n * @param {?} directives\n * @return {?}\n */\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach(dir => {\n        /** @type {?} */\n        const control = (/** @type {?} */ (dir.control));\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    });\n}\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    if (!Array.isArray(valueAccessors))\n        _throwError(dir, 'Value accessor was not provided as an array for form control with');\n    /** @type {?} */\n    let defaultAccessor = undefined;\n    /** @type {?} */\n    let builtinAccessor = undefined;\n    /** @type {?} */\n    let customAccessor = undefined;\n    valueAccessors.forEach((v) => {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor)\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor)\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    _throwError(dir, 'No valid value accessor for form control with');\n    return null;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction removeDir(list, el) {\n    /** @type {?} */\n    const index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n// TODO(kara): remove after deprecation period\n/**\n * @param {?} name\n * @param {?} type\n * @param {?} instance\n * @param {?} warningConfig\n * @return {?}\n */\nfunction _ngModelWarning(name, type, instance, warningConfig) {\n    if (!isDevMode() || warningConfig === 'never')\n        return;\n    if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||\n        (warningConfig === 'always' && !instance._ngModelWarningSent)) {\n        ReactiveErrors.ngModelWarning(name);\n        type._ngModelWarningSentOnce = true;\n        instance._ngModelWarningSent = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n * \\@publicApi\n */\nclass AbstractFormGroupDirective extends ControlContainer {\n    /**\n     * \\@description\n     * An internal callback method triggered on the instance after the inputs are set.\n     * Registers the group with its parent group.\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkParentType();\n        (/** @type {?} */ (this.formDirective)).addFormGroup(this);\n    }\n    /**\n     * \\@description\n     * An internal callback method triggered before the instance is destroyed.\n     * Removes the group from its parent group.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormGroup(this);\n        }\n    }\n    /**\n     * \\@description\n     * The `FormGroup` bound to this directive.\n     * @return {?}\n     */\n    get control() { return (/** @type {?} */ (this.formDirective)).getFormGroup(this); }\n    /**\n     * \\@description\n     * The path to this group from the top-level directive.\n     * @return {?}\n     */\n    get path() { return controlPath(this.name, this._parent); }\n    /**\n     * \\@description\n     * The top-level directive for this group if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\n    /**\n     * \\@description\n     * The synchronous validators registered with this group.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._validators); }\n    /**\n     * \\@description\n     * The async validators registered with this group.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._asyncValidators);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _checkParentType() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AbstractControlStatus {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) { this._cd = cd; }\n    /**\n     * @return {?}\n     */\n    get ngClassUntouched() { return this._cd.control ? this._cd.control.untouched : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassTouched() { return this._cd.control ? this._cd.control.touched : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassPristine() { return this._cd.control ? this._cd.control.pristine : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassDirty() { return this._cd.control ? this._cd.control.dirty : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassValid() { return this._cd.control ? this._cd.control.valid : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassInvalid() { return this._cd.control ? this._cd.control.invalid : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassPending() { return this._cd.control ? this._cd.control.pending : false; }\n}\n/** @type {?} */\nconst ngControlStatusHost = {\n    '[class.ng-untouched]': 'ngClassUntouched',\n    '[class.ng-touched]': 'ngClassTouched',\n    '[class.ng-pristine]': 'ngClassPristine',\n    '[class.ng-dirty]': 'ngClassDirty',\n    '[class.ng-valid]': 'ngClassValid',\n    '[class.ng-invalid]': 'ngClassInvalid',\n    '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * \\@description\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status.\n *\n * \\@usageNotes\n *\n * ### CSS classes applied\n *\n * The following classes are applied as the properties become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgControlStatus extends AbstractControlStatus {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) { super(cd); }\n}\nNgControlStatus.decorators = [\n    { type: Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] }\n];\n/** @nocollapse */\nNgControlStatus.ctorParameters = () => [\n    { type: NgControl, decorators: [{ type: Self }] }\n];\n/**\n * \\@description\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * @see `NgControlStatus`\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgControlStatusGroup extends AbstractControlStatus {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) { super(cd); }\n}\nNgControlStatusGroup.decorators = [\n    { type: Directive, args: [{\n                selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                host: ngControlStatusHost\n            },] }\n];\n/** @nocollapse */\nNgControlStatusGroup.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Self }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\n *\n * @see `status`\n * @type {?}\n */\nconst VALID = 'VALID';\n/**\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\n *\n * @see `status`\n * @type {?}\n */\nconst INVALID = 'INVALID';\n/**\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see `markAsPending`\n * @see `status`\n * @type {?}\n */\nconst PENDING = 'PENDING';\n/**\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see `markAsDisabled`\n * @see `status`\n * @type {?}\n */\nconst DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control, path, delimiter) {\n    if (path == null)\n        return null;\n    if (!(path instanceof Array)) {\n        path = ((/** @type {?} */ (path))).split(delimiter);\n    }\n    if (path instanceof Array && (path.length === 0))\n        return null;\n    return ((/** @type {?} */ (path))).reduce((v, name) => {\n        if (v instanceof FormGroup) {\n            return v.controls.hasOwnProperty((/** @type {?} */ (name))) ? v.controls[name] : null;\n        }\n        if (v instanceof FormArray) {\n            return v.at((/** @type {?} */ (name))) || null;\n        }\n        return null;\n    }, control);\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToValidator(validatorOrOpts) {\n    /** @type {?} */\n    const validator = (/** @type {?} */ ((isOptionsObj(validatorOrOpts) ? ((/** @type {?} */ (validatorOrOpts))).validators :\n        validatorOrOpts)));\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * @param {?=} asyncValidator\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\n    /** @type {?} */\n    const origAsyncValidator = (/** @type {?} */ ((isOptionsObj(validatorOrOpts) ? ((/** @type {?} */ (validatorOrOpts))).asyncValidators :\n        asyncValidator)));\n    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\n        origAsyncValidator || null;\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction isOptionsObj(validatorOrOpts) {\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object';\n}\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * @see [Forms Guide](/guide/forms)\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n * @see [Dynamic Forms Guide](/guide/dynamic-form)\n *\n * \\@publicApi\n * @abstract\n */\nclass AbstractControl {\n    /**\n     * Initialize the AbstractControl instance.\n     *\n     * @param {?} validator The function that determines the synchronous validity of this control.\n     * @param {?} asyncValidator The function that determines the asynchronous validity of this\n     * control.\n     */\n    constructor(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        /**\n         * \\@internal\n         */\n        this._onCollectionChange = () => { };\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * @return True if the user has not yet changed the value in the UI; compare `dirty`.\n         * Programmatic changes to a control's value do not mark it dirty.\n         */\n        this.pristine = true;\n        /**\n         * True if the control is marked as `touched`.\n         *\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        this.touched = false;\n        /**\n         * \\@internal\n         */\n        this._onDisabledChange = [];\n    }\n    /**\n     * The parent control.\n     * @return {?}\n     */\n    get parent() { return this._parent; }\n    /**\n     * A control is `valid` when its `status` is `VALID`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if the control has passed all of its validation tests,\n     * false otherwise.\n     */\n    get valid() { return this.status === VALID; }\n    /**\n     * A control is `invalid` when its `status` is `INVALID`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if this control has failed one or more of its validation checks,\n     * false otherwise.\n     */\n    get invalid() { return this.status === INVALID; }\n    /**\n     * A control is `pending` when its `status` is `PENDING`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if this control is in the process of conducting a validation check,\n     * false otherwise.\n     */\n    get pending() { return this.status == PENDING; }\n    /**\n     * A control is `disabled` when its `status` is `DISABLED`.\n     *\n     * Disabled controls are exempt from validation checks and\n     * are not included in the aggregate value of their ancestor\n     * controls.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if the control is disabled, false otherwise.\n     */\n    get disabled() { return this.status === DISABLED; }\n    /**\n     * A control is `enabled` as long as its `status` is not `DISABLED`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if the control has any status other than 'DISABLED',\n     * false if the status is 'DISABLED'.\n     *\n     */\n    get enabled() { return this.status !== DISABLED; }\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * @return {?} True if the user has changed the value of this control in the UI; compare `pristine`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n    get dirty() { return !this.pristine; }\n    /**\n     * True if the control has not been marked as touched\n     *\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     * @return {?}\n     */\n    get untouched() { return !this.touched; }\n    /**\n     * Reports the update strategy of the `AbstractControl` (meaning\n     * the event on which the control updates itself).\n     * Possible values: `'change'` | `'blur'` | `'submit'`\n     * Default value: `'change'`\n     * @return {?}\n     */\n    get updateOn() {\n        return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n    }\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this overwrites any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    setValidators(newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    }\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * overwrites any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    setAsyncValidators(newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    }\n    /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    clearValidators() { this.validator = null; }\n    /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    clearAsyncValidators() { this.asyncValidator = null; }\n    /**\n     * Marks the control as `touched`. A control is touched by focus and\n     * blur events that do not change the value.\n     *\n     * @see `markAsUntouched()` / `markAsDirty()` / `markAsPristine()`\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n    markAsTouched(opts = {}) {\n        ((/** @type {?} */ (this))).touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    }\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, also marks all children as `untouched`\n     * and recalculates the `touched` status of all parent controls.\n     *\n     * @see `markAsTouched()` / `markAsDirty()` / `markAsPristine()`\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events after the marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n    markAsUntouched(opts = {}) {\n        ((/** @type {?} */ (this))).touched = false;\n        this._pendingTouched = false;\n        this._forEachChild((control) => { control.markAsUntouched({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /**\n     * Marks the control as `dirty`. A control becomes dirty when\n     * the control's value is changed through the UI; compare `markAsTouched`.\n     *\n     * @see `markAsTouched()` / `markAsUntouched()` / `markAsPristine()`\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n    markAsDirty(opts = {}) {\n        ((/** @type {?} */ (this))).pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    }\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, marks all children as `pristine`,\n     * and recalculates the `pristine` status of all parent\n     * controls.\n     *\n     * @see `markAsTouched()` / `markAsUntouched()` / `markAsDirty()`\n     *\n     * @param {?=} opts Configuration options that determine how the control emits events after\n     * marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * @return {?}\n     */\n    markAsPristine(opts = {}) {\n        ((/** @type {?} */ (this))).pristine = true;\n        this._pendingDirty = false;\n        this._forEachChild((control) => { control.markAsPristine({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /**\n     * Marks the control as `pending`.\n     *\n     * A control is pending while the control performs async validation.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes and\n     * emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n     * observable emits an event with the latest status the control is marked pending.\n     * When false, no events are emitted.\n     *\n     * @return {?}\n     */\n    markAsPending(opts = {}) {\n        ((/** @type {?} */ (this))).status = PENDING;\n        if (opts.emitEvent !== false) {\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    }\n    /**\n     * Disables the control. This means the control is exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children are also disabled.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates\n     * changes and emits events after the control is disabled.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is disabled.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    disable(opts = {}) {\n        ((/** @type {?} */ (this))).status = DISABLED;\n        ((/** @type {?} */ (this))).errors = null;\n        this._forEachChild((control) => { control.disable(Object.assign({}, opts, { onlySelf: true })); });\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            ((/** @type {?} */ (this.valueChanges))).emit(this.value);\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        this._updateAncestors(opts);\n        this._onDisabledChange.forEach((changeFn) => changeFn(true));\n    }\n    /**\n     * Enables the control. This means the control is included in validation checks and\n     * the aggregate value of its parent. Its status recalculates based on its value and\n     * its validators.\n     *\n     * By default, if the control has children, all children are enabled.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @param {?=} opts Configure options that control how the control propagates changes and\n     * emits events when marked as untouched\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is enabled.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    enable(opts = {}) {\n        ((/** @type {?} */ (this))).status = VALID;\n        this._forEachChild((control) => { control.enable(Object.assign({}, opts, { onlySelf: true })); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors(opts);\n        this._onDisabledChange.forEach((changeFn) => changeFn(false));\n    }\n    /**\n     * @private\n     * @param {?} opts\n     * @return {?}\n     */\n    _updateAncestors(opts) {\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n            this._parent._updatePristine();\n            this._parent._updateTouched();\n        }\n    }\n    /**\n     * @param {?} parent Sets the parent of the control\n     * @return {?}\n     */\n    setParent(parent) { this._parent = parent; }\n    /**\n     * Recalculates the value and validation status of the control.\n     *\n     * By default, it also updates the value and validity of its ancestors.\n     *\n     * @param {?=} opts Configuration options determine how the control propagates changes and emits events\n     * after updates and validity checks are applied.\n     * * `onlySelf`: When true, only update this control. When false or not supplied,\n     * update all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is updated.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    updateValueAndValidity(opts = {}) {\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            ((/** @type {?} */ (this))).errors = this._runValidator();\n            ((/** @type {?} */ (this))).status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            ((/** @type {?} */ (this.valueChanges))).emit(this.value);\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _updateTreeValidity(opts = { emitEvent: true }) {\n        this._forEachChild((ctrl) => ctrl._updateTreeValidity(opts));\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setInitialStatus() {\n        ((/** @type {?} */ (this))).status = this._allControlsDisabled() ? DISABLED : VALID;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _runValidator() {\n        return this.validator ? this.validator(this) : null;\n    }\n    /**\n     * @private\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    _runAsyncValidator(emitEvent) {\n        if (this.asyncValidator) {\n            ((/** @type {?} */ (this))).status = PENDING;\n            /** @type {?} */\n            const obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription =\n                obs.subscribe((errors) => this.setErrors(errors, { emitEvent }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _cancelExistingSubscription() {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Sets errors on a form control when running validations manually, rather than automatically.\n     *\n     * Calling `setErrors` also updates the validity of the parent control.\n     *\n     * \\@usageNotes\n     * ### Manually set the errors for a control\n     *\n     * ```\n     * const login = new FormControl('someLogin');\n     * login.setErrors({\n     *   notUnique: true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({ notUnique: true });\n     *\n     * login.setValue('someOtherLogin');\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    setErrors(errors, opts = {}) {\n        ((/** @type {?} */ (this))).errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    }\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * \\@usageNotes\n     * ### Retrieve a nested control\n     *\n     * For example, to get a `name` control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path A dot-delimited string or array of string/number values that define the path to the\n     * control.\n     *\n     * @return {?}\n     */\n    get(path) { return _find(this, path, '.'); }\n    /**\n     * \\@description\n     * Reports error data for the control with the given path.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        /** @type {?} */\n        const control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    }\n    /**\n     * \\@description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return !!this.getError(errorCode, path);\n    }\n    /**\n     * Retrieves the top-level ancestor of this control.\n     * @return {?}\n     */\n    get root() {\n        /** @type {?} */\n        let x = this;\n        while (x._parent) {\n            x = x._parent;\n        }\n        return x;\n    }\n    /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    _updateControlsErrors(emitEvent) {\n        ((/** @type {?} */ (this))).status = this._calculateStatus();\n        if (emitEvent) {\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _initObservables() {\n        ((/** @type {?} */ (this))).valueChanges = new EventEmitter();\n        ((/** @type {?} */ (this))).statusChanges = new EventEmitter();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _calculateStatus() {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    }\n    /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    _anyControlsHaveStatus(status) {\n        return this._anyControls((control) => control.status === status);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _anyControlsDirty() {\n        return this._anyControls((control) => control.dirty);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _anyControlsTouched() {\n        return this._anyControls((control) => control.touched);\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _updatePristine(opts = {}) {\n        ((/** @type {?} */ (this))).pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _updateTouched(opts = {}) {\n        ((/** @type {?} */ (this))).touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    _isBoxedValue(formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    _registerOnCollectionChange(fn) { this._onCollectionChange = fn; }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _setUpdateStrategy(opts) {\n        if (isOptionsObj(opts) && ((/** @type {?} */ (opts))).updateOn != null) {\n            this._updateOn = (/** @type {?} */ (((/** @type {?} */ (opts))).updateOn));\n        }\n    }\n}\n/**\n * Tracks the value and validation status of an individual form control.\n *\n * This is one of the three fundamental building blocks of Angular forms, along with\n * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that\n * implements most of the base functionality for accessing the value, validation status,\n * user interactions and events.\n *\n * @see `AbstractControl`\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see [Usage Notes](#usage-notes)\n *\n * \\@usageNotes\n *\n * ### Initializing Form Controls\n *\n * Instantiate a `FormControl`, with an initial value.\n *\n * ```ts\n * const control = new FormControl('some value');\n * console.log(control.value);     // 'some value'\n * ```\n *\n * The following example initializes the control with a form state object. The `value`\n * and `disabled` keys are required in this case.\n *\n * ```ts\n * const control = new FormControl({ value: 'n/a', disabled: true });\n * console.log(control.value);     // 'n/a'\n * console.log(control.status);    // 'DISABLED'\n * ```\n *\n * The following example initializes the control with a sync validator.\n *\n * ```ts\n * const control = new FormControl('', Validators.required);\n * console.log(control.value);      // ''\n * console.log(control.status);     // 'INVALID'\n * ```\n *\n * The following example initializes the control using an options object.\n *\n * ```ts\n * const control = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * ### Configure the control to update on a blur event\n *\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * ### Configure the control to update on a submit event\n *\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'submit' });\n * ```\n *\n * ### Reset the control back to an initial value\n *\n * You reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n *\n * ```ts\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n *\n * control.reset('Drew');\n *\n * console.log(control.value); // 'Drew'\n * ```\n *\n * ### Reset the control back to an initial value and disabled\n *\n * ```\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n * console.log(control.status); // 'VALID'\n *\n * control.reset({ value: 'Drew', disabled: true });\n *\n * console.log(control.value); // 'Drew'\n * console.log(control.status); // 'DISABLED'\n * ```\n *\n * \\@publicApi\n */\nclass FormControl extends AbstractControl {\n    /**\n     * Creates a new `FormControl` instance.\n     *\n     * @param {?=} formState Initializes the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(formState = null, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        /**\n         * \\@internal\n         */\n        this._onChange = [];\n        this._applyFormState(formState);\n        this._setUpdateStrategy(validatorOrOpts);\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        this._initObservables();\n    }\n    /**\n     * Sets a new value for the form control.\n     *\n     * @param {?} value The new value for the control.\n     * @param {?=} options Configuration options that determine how the control proopagates changes\n     * and emits events when the value changes.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\n     * `onChange` event to\n     * update the view.\n     * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\n     * `ngModelChange`\n     * event to update the model.\n     *\n     * @return {?}\n     */\n    setValue(value, options = {}) {\n        ((/** @type {?} */ (this))).value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach((changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));\n        }\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     *\n     * @see `setValue` for options\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    patchValue(value, options = {}) {\n        this.setValue(value, options);\n    }\n    /**\n     * Resets the form control, marking it `pristine` and `untouched`, and setting\n     * the value to null.\n     *\n     * @param {?=} formState Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     *\n     * @return {?}\n     */\n    reset(formState = null, options = {}) {\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateValue() { }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    _anyControls(condition) { return false; }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _allControlsDisabled() { return this.disabled; }\n    /**\n     * Register a listener for change events.\n     *\n     * @param {?} fn The method that is called when the value changes\n     * @return {?}\n     */\n    registerOnChange(fn) { this._onChange.push(fn); }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _clearChangeFns() {\n        this._onChange = [];\n        this._onDisabledChange = [];\n        this._onCollectionChange = () => { };\n    }\n    /**\n     * Register a listener for disabled events.\n     *\n     * @param {?} fn The method that is called when the disabled status changes.\n     * @return {?}\n     */\n    registerOnDisabledChange(fn) {\n        this._onDisabledChange.push(fn);\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    _forEachChild(cb) { }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _syncPendingControls() {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} formState\n     * @return {?}\n     */\n    _applyFormState(formState) {\n        if (this._isBoxedValue(formState)) {\n            ((/** @type {?} */ (this))).value = this._pendingValue = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            ((/** @type {?} */ (this))).value = this._pendingValue = formState;\n        }\n    }\n}\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormArray`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * \\@usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n *\n * \\@publicApi\n */\nclass FormGroup extends AbstractControl {\n    /**\n     * Creates a new `FormGroup` instance.\n     *\n     * @param {?} controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control.\n     * Use {\\@link FormGroup#addControl addControl} instead.\n     *\n     * @param {?} name The control name to register in the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n    registerControl(name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    }\n    /**\n     * Add a control to this group.\n     *\n     * This method also updates the value and validity of the control.\n     *\n     * @param {?} name The control name to add to the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n    addControl(name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Remove a control from this group.\n     *\n     * @param {?} name The control name to remove from the collection\n     * @return {?}\n     */\n    removeControl(name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param {?} name The control name to replace in the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n    setControl(name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * Reports false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     *\n     * @param {?} controlName\n     * @return {?} false for disabled controls, true otherwise.\n     */\n    contains(controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    }\n    /**\n     * Sets the value of the `FormGroup`. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * \\@usageNotes\n     * ### Set the complete value for the form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl(),\n     *   last: new FormControl()\n     * });\n     *\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.setValue({first: 'Nancy', last: 'Drew'});\n     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     * ```\n     *\n     * @throws When strict checks fail, such as setting the value of a control\n     * that doesn't exist or if you excluding the value of a control.\n     *\n     * @param {?} value The new value for the control that matches the structure of the group.\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    setValue(value, options = {}) {\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach(name => {\n            this._throwIfControlMissing(name);\n            this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormGroup`. It accepts an object with control\n     * names as keys, and does its best to match the values to the correct controls\n     * in the group.\n     *\n     * It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     * \\@usageNotes\n     * ### Patch the value for a form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *    first: new FormControl(),\n     *    last: new FormControl()\n     * });\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.patchValue({first: 'Nancy'});\n     * console.log(form.value);   // {first: 'Nancy', last: null}\n     * ```\n     *\n     * @param {?} value The object that matches the structure of the group.\n     * @param {?=} options Configuration options that determine how the control propagates changes and\n     * emits events after the value is patched.\n     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n     * true.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    patchValue(value, options = {}) {\n        Object.keys(value).forEach(name => {\n            if (this.controls[name]) {\n                this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\n     * the value of all descendants to null.\n     *\n     * You reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * is a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * \\@usageNotes\n     *\n     * ### Reset the form group values\n     *\n     * ```ts\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * console.log(form.value);  // {first: 'first name', last: 'last name'}\n     *\n     * form.reset({ first: 'name', last: 'last name' });\n     *\n     * console.log(form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * ### Reset the form group values and disabled status\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events when the group is reset.\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * @return {?}\n     */\n    reset(value = {}, options = {}) {\n        this._forEachChild((control, name) => {\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    }\n    /**\n     * The aggregate value of the `FormGroup`, including any disabled controls.\n     *\n     * Retrieves all values regardless of disabled status.\n     * The `value` property is the best way to get the value of the group, because\n     * it excludes disabled controls in the `FormGroup`.\n     * @return {?}\n     */\n    getRawValue() {\n        return this._reduceChildren({}, (acc, control, name) => {\n            acc[name] = control instanceof FormControl ? control.value : ((/** @type {?} */ (control))).getRawValue();\n            return acc;\n        });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _syncPendingControls() {\n        /** @type {?} */\n        let subtreeUpdated = this._reduceChildren(false, (updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        });\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    _throwIfControlMissing(name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(`\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n        }\n        if (!this.controls[name]) {\n            throw new Error(`Cannot find form control with name: ${name}.`);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    _forEachChild(cb) {\n        Object.keys(this.controls).forEach(k => cb(this.controls[k], k));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _setUpControls() {\n        this._forEachChild((control) => {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateValue() { ((/** @type {?} */ (this))).value = this._reduceValue(); }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    _anyControls(condition) {\n        /** @type {?} */\n        let res = false;\n        this._forEachChild((control, name) => {\n            res = res || (this.contains(name) && condition(control));\n        });\n        return res;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _reduceValue() {\n        return this._reduceChildren({}, (acc, control, name) => {\n            if (control.enabled || this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    }\n    /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    _reduceChildren(initValue, fn) {\n        /** @type {?} */\n        let res = initValue;\n        this._forEachChild((control, name) => { res = fn(res, control, name); });\n        return res;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _allControlsDisabled() {\n        for (const controlName of Object.keys(this.controls)) {\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _checkAllValuesPresent(value) {\n        this._forEachChild((control, name) => {\n            if (value[name] === undefined) {\n                throw new Error(`Must supply a value for form control with name: '${name}'.`);\n            }\n        });\n    }\n}\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormGroup`.\n *\n * \\@usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n * \\@publicApi\n */\nclass FormArray extends AbstractControl {\n    /**\n     * Creates a new `FormArray` instance.\n     *\n     * @param {?} controls An array of child controls. Each child control is given an index\n     * where it is registered.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    }\n    /**\n     * Get the `AbstractControl` at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to retrieve the control\n     * @return {?}\n     */\n    at(index) { return this.controls[index]; }\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     *\n     * @param {?} control Form control to be inserted\n     * @return {?}\n     */\n    push(control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to insert the control\n     * @param {?} control Form control to be inserted\n     * @return {?}\n     */\n    insert(index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Remove the control at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to remove the control\n     * @return {?}\n     */\n    removeAt(index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(() => { });\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param {?} index Index in the array to replace the control\n     * @param {?} control The `AbstractControl` control to replace the existing control\n     * @return {?}\n     */\n    setControl(index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(() => { });\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Length of the control array.\n     * @return {?}\n     */\n    get length() { return this.controls.length; }\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     *\n     * This method performs strict checks, and throws an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     * \\@usageNotes\n     * ### Set the values for the controls in the form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl(),\n     *   new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.setValue(['Nancy', 'Drew']);\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * ```\n     *\n     * @param {?} value Array of values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    setValue(value, options = {}) {\n        this._checkAllValuesPresent(value);\n        value.forEach((newValue, index) => {\n            this._throwIfControlMissing(index);\n            this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormArray`. It accepts an array that matches the\n     * structure of the control, and does its best to match the values to the correct\n     * controls in the group.\n     *\n     * It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     * \\@usageNotes\n     * ### Patch the values for controls in a form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.patchValue(['Nancy']);\n     * console.log(arr.value);   // ['Nancy', null]\n     * ```\n     *\n     * @param {?} value Array of latest values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    patchValue(value, options = {}) {\n        value.forEach((newValue, index) => {\n            if (this.at(index)) {\n                this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n     * value of all descendants to null or null maps.\n     *\n     * You reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state is a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * \\@usageNotes\n     * ### Reset the values in a form array\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * ### Reset the values in a form array and the disabled status for the first control\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     *\n     * @param {?=} value Array of values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    reset(value = [], options = {}) {\n        this._forEachChild((control, index) => {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    }\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * Reports all values regardless of disabled status.\n     * For enabled controls only, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    getRawValue() {\n        return this.controls.map((control) => {\n            return control instanceof FormControl ? control.value : ((/** @type {?} */ (control))).getRawValue();\n        });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _syncPendingControls() {\n        /** @type {?} */\n        let subtreeUpdated = this.controls.reduce((updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        }, false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    _throwIfControlMissing(index) {\n        if (!this.controls.length) {\n            throw new Error(`\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n        }\n        if (!this.at(index)) {\n            throw new Error(`Cannot find form control at index ${index}`);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    _forEachChild(cb) {\n        this.controls.forEach((control, index) => { cb(control, index); });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateValue() {\n        ((/** @type {?} */ (this))).value =\n            this.controls.filter((control) => control.enabled || this.disabled)\n                .map((control) => control.value);\n    }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    _anyControls(condition) {\n        return this.controls.some((control) => control.enabled && condition(control));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _setUpControls() {\n        this._forEachChild((control) => this._registerControl(control));\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _checkAllValuesPresent(value) {\n        this._forEachChild((control, i) => {\n            if (value[i] === undefined) {\n                throw new Error(`Must supply a value for form control at index: ${i}.`);\n            }\n        });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _allControlsDisabled() {\n        for (const control of this.controls) {\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    }\n    /**\n     * @private\n     * @param {?} control\n     * @return {?}\n     */\n    _registerControl(control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgForm)\n};\n/** @type {?} */\nconst resolvedPromise = Promise.resolve(null);\n/**\n * \\@description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * \\@usageNotes\n *\n * ### Migrating from deprecated ngForm selector\n *\n * Support for using `ngForm` element selector has been deprecated in Angular v6 and will be removed\n * in Angular v9.\n *\n * This has been deprecated to keep selectors consistent with other core Angular selectors,\n * as element selectors are typically written in kebab-case.\n *\n * Now deprecated:\n * ```html\n * <ngForm #myForm=\"ngForm\">\n * ```\n *\n * After:\n * ```html\n * <ng-form #myForm=\"ngForm\">\n * ```\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgForm extends ControlContainer {\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(validators, asyncValidators) {\n        super();\n        /**\n         * \\@description\n         * Returns whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        this._directives = [];\n        /**\n         * \\@description\n         * Event emitter for the \"ngSubmit\" event\n         */\n        this.ngSubmit = new EventEmitter();\n        this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n    }\n    /**\n     * \\@description\n     * Lifecycle method called after the view is initialized. For internal use only.\n     * @return {?}\n     */\n    ngAfterViewInit() { this._setUpdateStrategy(); }\n    /**\n     * \\@description\n     * The directive instance.\n     * @return {?}\n     */\n    get formDirective() { return this; }\n    /**\n     * \\@description\n     * The internal `FormGroup` instance.\n     * @return {?}\n     */\n    get control() { return this.form; }\n    /**\n     * \\@description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it is always an empty array.\n     * @return {?}\n     */\n    get path() { return []; }\n    /**\n     * \\@description\n     * Returns a map of the controls in this group.\n     * @return {?}\n     */\n    get controls() { return this.form.controls; }\n    /**\n     * \\@description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param {?} dir The `NgModel` directive instance.\n     * @return {?}\n     */\n    addControl(dir) {\n        resolvedPromise.then(() => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            ((/** @type {?} */ (dir))).control =\n                (/** @type {?} */ (container.registerControl(dir.name, dir.control)));\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            this._directives.push(dir);\n        });\n    }\n    /**\n     * \\@description\n     * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n     *\n     * @param {?} dir The `NgModel` directive instance.\n     * @return {?}\n     */\n    getControl(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * \\@description\n     * Removes the `NgModel` instance from the internal list of directives\n     *\n     * @param {?} dir The `NgModel` directive instance.\n     * @return {?}\n     */\n    removeControl(dir) {\n        resolvedPromise.then(() => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            removeDir(this._directives, dir);\n        });\n    }\n    /**\n     * \\@description\n     * Adds a new `NgModelGroup` directive instance to the form.\n     *\n     * @param {?} dir The `NgModelGroup` directive instance.\n     * @return {?}\n     */\n    addFormGroup(dir) {\n        resolvedPromise.then(() => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            /** @type {?} */\n            const group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    }\n    /**\n     * \\@description\n     * Removes the `NgModelGroup` directive instance from the form.\n     *\n     * @param {?} dir The `NgModelGroup` directive instance.\n     * @return {?}\n     */\n    removeFormGroup(dir) {\n        resolvedPromise.then(() => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    }\n    /**\n     * \\@description\n     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n     *\n     * @param {?} dir The `NgModelGroup` directive instance.\n     * @return {?}\n     */\n    getFormGroup(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * Sets the new value for the provided `NgControl` directive.\n     *\n     * @param {?} dir The `NgControl` directive instance.\n     * @param {?} value The new value for the directive's control.\n     * @return {?}\n     */\n    updateModel(dir, value) {\n        resolvedPromise.then(() => {\n            /** @type {?} */\n            const ctrl = (/** @type {?} */ (this.form.get((/** @type {?} */ (dir.path)))));\n            ctrl.setValue(value);\n        });\n    }\n    /**\n     * \\@description\n     * Sets the value for this `FormGroup`.\n     *\n     * @param {?} value The new value\n     * @return {?}\n     */\n    setValue(value) { this.control.setValue(value); }\n    /**\n     * \\@description\n     * Method called when the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param {?} $event The \"submit\" event object\n     * @return {?}\n     */\n    onSubmit($event) {\n        ((/** @type {?} */ (this))).submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * \\@description\n     * Method called when the \"reset\" event is triggered on the form.\n     * @return {?}\n     */\n    onReset() { this.resetForm(); }\n    /**\n     * \\@description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param {?=} value The new value for the form.\n     * @return {?}\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        ((/** @type {?} */ (this))).submitted = false;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    _findContainer(path) {\n        path.pop();\n        return path.length ? (/** @type {?} */ (this.form.get(path))) : this.form;\n    }\n}\nNgForm.decorators = [\n    { type: Directive, args: [{\n                selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,ng-form,[ngForm]',\n                providers: [formDirectiveProvider],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                outputs: ['ngSubmit'],\n                exportAs: 'ngForm'\n            },] }\n];\n/** @nocollapse */\nNgForm.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nNgForm.propDecorators = {\n    options: [{ type: Input, args: ['ngFormOptions',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TemplateDrivenErrors {\n    /**\n     * @return {?}\n     */\n    static modelParentException() {\n        throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ${FormErrorExamples.formControlName}\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ${FormErrorExamples.ngModelWithFormGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static formGroupNameException() {\n        throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ${FormErrorExamples.formGroupName}\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ${FormErrorExamples.ngModelGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static missingNameException() {\n        throw new Error(`If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n    }\n    /**\n     * @return {?}\n     */\n    static modelGroupParentException() {\n        throw new Error(`\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ${FormErrorExamples.formGroupName}\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ${FormErrorExamples.ngModelGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static ngFormWarning() {\n        console.warn(`\n    It looks like you're using 'ngForm'.\n\n    Support for using the 'ngForm' element selector has been deprecated in Angular v6 and will be removed\n    in Angular v9.\n\n    Use 'ng-form' instead.\n\n    Before:\n    <ngForm #myForm=\"ngForm\">\n\n    After:\n    <ng-form #myForm=\"ngForm\">\n    `);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * `InjectionToken` to provide to turn off the warning when using 'ngForm' deprecated selector.\n * @type {?}\n */\nconst NG_FORM_SELECTOR_WARNING = new InjectionToken('NgFormSelectorWarning');\n/**\n * This directive is solely used to display warnings when the deprecated `ngForm` selector is used.\n *\n * @deprecated in Angular v6 and will be removed in Angular v9.\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgFormSelectorWarning {\n    /**\n     * @param {?} ngFormWarning\n     */\n    constructor(ngFormWarning) {\n        if (((!ngFormWarning || ngFormWarning === 'once') && !NgFormSelectorWarning._ngFormWarning) ||\n            ngFormWarning === 'always') {\n            TemplateDrivenErrors.ngFormWarning();\n            NgFormSelectorWarning._ngFormWarning = true;\n        }\n    }\n}\n/**\n * Static property used to track whether the deprecation warning for this selector has been sent.\n * Used to support warning config of \"once\".\n *\n * \\@internal\n */\nNgFormSelectorWarning._ngFormWarning = false;\nNgFormSelectorWarning.decorators = [\n    { type: Directive, args: [{ selector: 'ngForm' },] }\n];\n/** @nocollapse */\nNgFormSelectorWarning.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_FORM_SELECTOR_WARNING,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgModelGroup)\n};\n/**\n * \\@description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * \\@usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgModelGroup extends AbstractFormGroupDirective {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    }\n}\nNgModelGroup.decorators = [\n    { type: Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] }\n];\n/** @nocollapse */\nNgModelGroup.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nNgModelGroup.propDecorators = {\n    name: [{ type: Input, args: ['ngModelGroup',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => NgModel)\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n * @type {?}\n */\nconst resolvedPromise$1 = Promise.resolve(null);\n/**\n * \\@description\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex: `#myVar=\"ngModel\"`).\n * You then access the control using the directive's `control` property,\n * but most properties used (like `valid` and `dirty`) fall through to the control anyway for direct access.\n * See a full list of properties directly available in `AbstractControlDirective`.\n *\n * @see `RadioControlValueAccessor`\n * @see `SelectControlValueAccessor`\n *\n * \\@usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel name attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. The name attribute is used\n * within a custom form component, and the name `\\@Input` property serves a different purpose.\n *\n * ```html\n * <form>\n *   <my-person-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-person-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgModel extends NgControl {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    constructor(parent, validators, asyncValidators, valueAccessors) {\n        super();\n        this.control = new FormControl();\n        /**\n         * \\@internal\n         */\n        this._registered = false;\n        /**\n         * \\@description\n         * Event emitter for producing the `ngModelChange` event after\n         * the view model updates.\n         */\n        this.update = new EventEmitter();\n        this._parent = parent;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal\n     * use only.\n     * @return {?}\n     */\n    ngOnDestroy() { this.formDirective && this.formDirective.removeControl(this); }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() {\n        return this._parent ? controlPath(this.name, this._parent) : [this.name];\n    }\n    /**\n     * \\@description\n     * The top-level directive for this control if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._rawValidators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * \\@description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param {?} newValue The new value emitted by `ngModelChange`.\n     * @return {?}\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpControl() {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() :\n            this.formDirective.addControl(this);\n        this._registered = true;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _isStandalone() {\n        return !this._parent || !!(this.options && this.options.standalone);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpStandalone() {\n        setUpControl(this.control, this);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkForErrors() {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            TemplateDrivenErrors.formGroupNameException();\n        }\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelParentException();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkName() {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _updateValue(value) {\n        resolvedPromise$1.then(() => { this.control.setValue(value, { emitViewToModelChange: false }); });\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _updateDisabled(changes) {\n        /** @type {?} */\n        const disabledValue = changes['isDisabled'].currentValue;\n        /** @type {?} */\n        const isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then(() => {\n            if (isDisabled && !this.control.disabled) {\n                this.control.disable();\n            }\n            else if (!isDisabled && this.control.disabled) {\n                this.control.enable();\n            }\n        });\n    }\n}\nNgModel.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngModel]:not([formControlName]):not([formControl])',\n                providers: [formControlBinding],\n                exportAs: 'ngModel'\n            },] }\n];\n/** @nocollapse */\nNgModel.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] }\n];\nNgModel.propDecorators = {\n    name: [{ type: Input }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    options: [{ type: Input, args: ['ngModelOptions',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n * @type {?}\n */\nconst NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken('NgModelWithFormControlWarning');\n/** @type {?} */\nconst formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlDirective)\n};\n/**\n * \\@description\n * * Syncs a standalone `FormControl` instance to a form control element.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * \\@usageNotes\n *\n * ### Registering a single form control\n *\n * The following examples shows how to register a standalone control and set its value.\n *\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <input [formControl]=\"control\" [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <input [formControl]=\"control\">\n * ```\n *\n * ```ts\n * this.control.setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormControlDirective extends NgControl {\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     * @param {?} _ngModelWarningConfig\n     */\n    constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        /**\n         * @deprecated as of v6\n         */\n        this.update = new EventEmitter();\n        /**\n         * \\@description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n         *\n         * \\@internal\n         */\n        this._ngModelWarningSent = false;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * \\@description\n     * Triggers a warning that this input should not be used with reactive forms.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    set isDisabled(isDisabled) { ReactiveErrors.disabledAttrWarning(); }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && (/** @type {?} */ (this.valueAccessor)).setDisabledState) {\n                (/** @type {?} */ ((/** @type {?} */ (this.valueAccessor)).setDisabledState))(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return []; }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._rawValidators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * \\@description\n     * The `FormControl` bound to this directive.\n     * @return {?}\n     */\n    get control() { return this.form; }\n    /**\n     * \\@description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param {?} newValue The new value for the view model.\n     * @return {?}\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _isControlChanged(changes) {\n        return changes.hasOwnProperty('form');\n    }\n}\n/**\n * \\@description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlDirective. Used to support warning config of \"once\".\n *\n * \\@internal\n */\nFormControlDirective._ngModelWarningSentOnce = false;\nFormControlDirective.decorators = [\n    { type: Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] }\n];\n/** @nocollapse */\nFormControlDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }\n];\nFormControlDirective.propDecorators = {\n    form: [{ type: Input, args: ['formControl',] }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupDirective)\n};\n/**\n * \\@description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormGroupDirective extends ControlContainer {\n    /**\n     * @param {?} _validators\n     * @param {?} _asyncValidators\n     */\n    constructor(_validators, _asyncValidators) {\n        super();\n        this._validators = _validators;\n        this._asyncValidators = _asyncValidators;\n        /**\n         * \\@description\n         * Reports whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        /**\n         * \\@description\n         * Tracks the list of added `FormControlName` instances\n         */\n        this.directives = [];\n        /**\n         * \\@description\n         * Tracks the `FormGroup` bound to this directive.\n         */\n        this.form = (/** @type {?} */ (null));\n        /**\n         * \\@description\n         * Emits an event when the form submission has been triggered.\n         */\n        this.ngSubmit = new EventEmitter();\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n        }\n    }\n    /**\n     * \\@description\n     * Returns this directive's instance.\n     * @return {?}\n     */\n    get formDirective() { return this; }\n    /**\n     * \\@description\n     * Returns the `FormGroup` bound to this directive.\n     * @return {?}\n     */\n    get control() { return this.form; }\n    /**\n     * \\@description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it always an empty array.\n     * @return {?}\n     */\n    get path() { return []; }\n    /**\n     * \\@description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @return {?}\n     */\n    addControl(dir) {\n        /** @type {?} */\n        const ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    }\n    /**\n     * \\@description\n     * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @return {?}\n     */\n    getControl(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * \\@description\n     * Removes the `FormControlName` instance from the internal list of directives\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @return {?}\n     */\n    removeControl(dir) { removeDir(this.directives, dir); }\n    /**\n     * Adds a new `FormGroupName` directive instance to the form.\n     *\n     * @param {?} dir The `FormGroupName` directive instance.\n     * @return {?}\n     */\n    addFormGroup(dir) {\n        /** @type {?} */\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * No-op method to remove the form group.\n     *\n     * @param {?} dir The `FormGroupName` directive instance.\n     * @return {?}\n     */\n    removeFormGroup(dir) { }\n    /**\n     * \\@description\n     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n     *\n     * @param {?} dir The `FormGroupName` directive instance.\n     * @return {?}\n     */\n    getFormGroup(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * Adds a new `FormArrayName` directive instance to the form.\n     *\n     * @param {?} dir The `FormArrayName` directive instance.\n     * @return {?}\n     */\n    addFormArray(dir) {\n        /** @type {?} */\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * No-op method to remove the form array.\n     *\n     * @param {?} dir The `FormArrayName` directive instance.\n     * @return {?}\n     */\n    removeFormArray(dir) { }\n    /**\n     * \\@description\n     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n     *\n     * @param {?} dir The `FormArrayName` directive instance.\n     * @return {?}\n     */\n    getFormArray(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * Sets the new value for the provided `FormControlName` directive.\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @param {?} value The new value for the directive's control.\n     * @return {?}\n     */\n    updateModel(dir, value) {\n        /** @type {?} */\n        const ctrl = (/** @type {?} */ (this.form.get(dir.path)));\n        ctrl.setValue(value);\n    }\n    /**\n     * \\@description\n     * Method called with the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param {?} $event The \"submit\" event object\n     * @return {?}\n     */\n    onSubmit($event) {\n        ((/** @type {?} */ (this))).submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * \\@description\n     * Method called when the \"reset\" event is triggered on the form.\n     * @return {?}\n     */\n    onReset() { this.resetForm(); }\n    /**\n     * \\@description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param {?=} value The new value for the form.\n     * @return {?}\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        ((/** @type {?} */ (this))).submitted = false;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateDomValue() {\n        this.directives.forEach(dir => {\n            /** @type {?} */\n            const newCtrl = this.form.get(dir.path);\n            if (dir.control !== newCtrl) {\n                cleanUpControl(dir.control, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                ((/** @type {?} */ (dir))).control = newCtrl;\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateRegistrations() {\n        this.form._registerOnCollectionChange(() => this._updateDomValue());\n        if (this._oldForm)\n            this._oldForm._registerOnCollectionChange(() => { });\n        this._oldForm = this.form;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateValidators() {\n        /** @type {?} */\n        const sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([(/** @type {?} */ (this.form.validator)), (/** @type {?} */ (sync))]);\n        /** @type {?} */\n        const async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([(/** @type {?} */ (this.form.asyncValidator)), (/** @type {?} */ (async))]);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkFormPresent() {\n        if (!this.form) {\n            ReactiveErrors.missingFormException();\n        }\n    }\n}\nFormGroupDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[formGroup]',\n                providers: [formDirectiveProvider$1],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                exportAs: 'ngForm'\n            },] }\n];\n/** @nocollapse */\nFormGroupDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormGroupDirective.propDecorators = {\n    form: [{ type: Input, args: ['formGroup',] }],\n    ngSubmit: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupName)\n};\n/**\n * \\@description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` to link, and\n * looks for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * \\@usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the {\\@link AbstractControl#get get} method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the {\\@link AbstractControl#get get} method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormGroupName extends AbstractFormGroupDirective {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.groupParentException();\n        }\n    }\n}\nFormGroupName.decorators = [\n    { type: Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] }\n];\n/** @nocollapse */\nFormGroupName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormGroupName.propDecorators = {\n    name: [{ type: Input, args: ['formGroupName',] }]\n};\n/** @type {?} */\nconst formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormArrayName)\n};\n/**\n * \\@description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormArrayName extends ControlContainer {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n     *\n     * @throws If the directive does not have a valid parent.\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkParentType();\n        (/** @type {?} */ (this.formDirective)).addFormArray(this);\n    }\n    /**\n     * \\@description\n     * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    }\n    /**\n     * \\@description\n     * The `FormArray` bound to this directive.\n     * @return {?}\n     */\n    get control() { return (/** @type {?} */ (this.formDirective)).getFormArray(this); }\n    /**\n     * \\@description\n     * The top-level directive for this group if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() {\n        return this._parent ? (/** @type {?} */ (this._parent.formDirective)) : null;\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return controlPath(this.name, this._parent); }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._validators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._asyncValidators);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.arrayParentException();\n        }\n    }\n}\nFormArrayName.decorators = [\n    { type: Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] }\n];\n/** @nocollapse */\nFormArrayName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormArrayName.propDecorators = {\n    name: [{ type: Input, args: ['formArrayName',] }]\n};\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlName)\n};\n/**\n * \\@description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * \\@usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\" [(ngModel)]=\"value\">\n * </form>\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\">\n * </form>\n * ```\n *\n * ```ts\n * this.form.get('first').setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormControlName extends NgControl {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     * @param {?} _ngModelWarningConfig\n     */\n    constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this._added = false;\n        /**\n         * @deprecated as of v6\n         */\n        this.update = new EventEmitter();\n        /**\n         * \\@description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular FormControlName instance. Used to support warning config of \"always\".\n         *\n         * \\@internal\n         */\n        this._ngModelWarningSent = false;\n        this._parent = parent;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * \\@description\n     * Triggers a warning that this input should not be used with reactive forms.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    set isDisabled(isDisabled) { ReactiveErrors.disabledAttrWarning(); }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    }\n    /**\n     * \\@description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param {?} newValue The new value for the view model.\n     * @return {?}\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return controlPath(this.name, (/** @type {?} */ (this._parent))); }\n    /**\n     * \\@description\n     * The top-level directive for this group if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._rawValidators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return (/** @type {?} */ (composeAsyncValidators(this._rawAsyncValidators)));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkParentType() {\n        if (!(this._parent instanceof FormGroupName) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            ReactiveErrors.ngModelGroupException();\n        }\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n            !(this._parent instanceof FormArrayName)) {\n            ReactiveErrors.controlParentException();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpControl() {\n        this._checkParentType();\n        ((/** @type {?} */ (this))).control = this.formDirective.addControl(this);\n        if (this.control.disabled && (/** @type {?} */ (this.valueAccessor)).setDisabledState) {\n            (/** @type {?} */ ((/** @type {?} */ (this.valueAccessor)).setDisabledState))(true);\n        }\n        this._added = true;\n    }\n}\n/**\n * \\@description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlName. Used to support warning config of \"once\".\n *\n * \\@internal\n */\nFormControlName._ngModelWarningSentOnce = false;\nFormControlName.decorators = [\n    { type: Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] }\n];\n/** @nocollapse */\nFormControlName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }\n];\nFormControlName.propDecorators = {\n    name: [{ type: Input, args: ['formControlName',] }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => RequiredValidator),\n    multi: true\n};\n/**\n * \\@description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => CheckboxRequiredValidator),\n    multi: true\n};\n/**\n * \\@description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass RequiredValidator {\n    /**\n     * \\@description\n     * Tracks changes to the required attribute bound to this directive.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = value != null && value !== false && `${value}` !== 'false';\n        if (this._onChange)\n            this._onChange();\n    }\n    /**\n     * \\@description\n     * Method that validates whether the control is empty.\n     * Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.required ? Validators.required(control) : null;\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n}\nRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                providers: [REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] }\n];\nRequiredValidator.propDecorators = {\n    required: [{ type: Input }]\n};\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an ngModel binding.\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * \\@publicApi\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\nclass CheckboxRequiredValidator extends RequiredValidator {\n    /**\n     * \\@description\n     * Method that validates whether or not the checkbox has been checked.\n     * Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.required ? Validators.requiredTrue(control) : null;\n    }\n}\nCheckboxRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] }\n];\n/**\n * \\@description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => EmailValidator),\n    multi: true\n};\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel binding.\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * \\@publicApi\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\nclass EmailValidator {\n    /**\n     * \\@description\n     * Tracks changes to the email attribute bound to this directive.\n     * @param {?} value\n     * @return {?}\n     */\n    set email(value) {\n        this._enabled = value === '' || value === true || value === 'true';\n        if (this._onChange)\n            this._onChange();\n    }\n    /**\n     * \\@description\n     * Method that validates whether an email address is valid.\n     * Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this._enabled ? Validators.email(control) : null;\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n}\nEmailValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                providers: [EMAIL_VALIDATOR]\n            },] }\n];\nEmailValidator.propDecorators = {\n    email: [{ type: Input }]\n};\n/**\n * \\@description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinLengthValidator),\n    multi: true\n};\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` mult-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass MinLengthValidator {\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * \\@description\n     * Method that validates whether the value meets a minimum length\n     * requirement. Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.minlength == null ? null : this._validator(control);\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createValidator() {\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\n    }\n}\nMinLengthValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                providers: [MIN_LENGTH_VALIDATOR],\n                host: { '[attr.minlength]': 'minlength ? minlength : null' }\n            },] }\n];\nMinLengthValidator.propDecorators = {\n    minlength: [{ type: Input }]\n};\n/**\n * \\@description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxLengthValidator),\n    multi: true\n};\n/**\n * A directive that adds max length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass MaxLengthValidator {\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * \\@description\n     * Method that validates whether the value exceeds\n     * the maximum length requirement.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.maxlength != null ? this._validator(control) : null;\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createValidator() {\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n    }\n}\nMaxLengthValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                providers: [MAX_LENGTH_VALIDATOR],\n                host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n            },] }\n];\nMaxLengthValidator.propDecorators = {\n    maxlength: [{ type: Input }]\n};\n/**\n * \\@description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => PatternValidator),\n    multi: true\n};\n/**\n * \\@description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass PatternValidator {\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * \\@description\n     * Method that validates whether the value matches the\n     * the pattern requirement.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) { return this._validator(control); }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createValidator() { this._validator = Validators.pattern(this.pattern); }\n}\nPatternValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                providers: [PATTERN_VALIDATOR],\n                host: { '[attr.pattern]': 'pattern ? pattern : null' }\n            },] }\n];\nPatternValidator.propDecorators = {\n    pattern: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} options\n * @return {?}\n */\nfunction isAbstractControlOptions(options) {\n    return ((/** @type {?} */ (options))).asyncValidators !== undefined ||\n        ((/** @type {?} */ (options))).validators !== undefined ||\n        ((/** @type {?} */ (options))).updateOn !== undefined;\n}\n/**\n * \\@description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\n * forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * \\@publicApi\n */\nclass FormBuilder {\n    /**\n     * \\@description\n     * Construct a new `FormGroup` instance.\n     *\n     * @param {?} controlsConfig A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param {?=} options Configuration options object for the `FormGroup`. The object can\n     * have two shapes:\n     *\n     * 1) `AbstractControlOptions` object (preferred), which consists of:\n     * * `validators`: A synchronous validator function, or an array of validator functions\n     * * `asyncValidators`: A single async validator or array of async validator functions\n     * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur' |\n     * submit')\n     *\n     * 2) Legacy configuration object, which consists of:\n     * * `validator`: A synchronous validator function, or an array of validator functions\n     * * `asyncValidator`: A single async validator or array of async validator functions\n     *\n     * @return {?}\n     */\n    group(controlsConfig, options = null) {\n        /** @type {?} */\n        const controls = this._reduceControls(controlsConfig);\n        /** @type {?} */\n        let validators = null;\n        /** @type {?} */\n        let asyncValidators = null;\n        /** @type {?} */\n        let updateOn = undefined;\n        if (options != null) {\n            if (isAbstractControlOptions(options)) {\n                // `options` are `AbstractControlOptions`\n                validators = options.validators != null ? options.validators : null;\n                asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;\n                updateOn = options.updateOn != null ? options.updateOn : undefined;\n            }\n            else {\n                // `options` are legacy form group options\n                validators = options.validator != null ? options.validator : null;\n                asyncValidators = options.asyncValidator != null ? options.asyncValidator : null;\n            }\n        }\n        return new FormGroup(controls, { asyncValidators, updateOn, validators });\n    }\n    /**\n     * \\@description\n     * Construct a new `FormControl` with the given state, validators and options.\n     *\n     * \\@usageNotes\n     *\n     * ### Initialize a control as disabled\n     *\n     * The following example returns a control with an initial value in a disabled state.\n     *\n     * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\"\n     *   linenums=\"false\" region=\"disabled-control\">\n     * </code-example>\n     * @param {?} formState Initializes the control with an initial state value, or\n     * with an object that contains both a value and a disabled status.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator\n     * functions.\n     *\n     * @return {?}\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n        return new FormControl(formState, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * Constructs a new `FormArray` from the given array of configurations,\n     * validators and options.\n     *\n     * @param {?} controlsConfig An array of child controls or control configs. Each\n     * child control is given an index when it is registered.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator\n     * functions.\n     * @return {?}\n     */\n    array(controlsConfig, validatorOrOpts, asyncValidator) {\n        /** @type {?} */\n        const controls = controlsConfig.map(c => this._createControl(c));\n        return new FormArray(controls, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    _reduceControls(controlsConfig) {\n        /** @type {?} */\n        const controls = {};\n        Object.keys(controlsConfig).forEach(controlName => {\n            controls[controlName] = this._createControl(controlsConfig[controlName]);\n        });\n        return controls;\n    }\n    /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    _createControl(controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            /** @type {?} */\n            const value = controlConfig[0];\n            /** @type {?} */\n            const validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            /** @type {?} */\n            const asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    }\n}\nFormBuilder.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('7.2.1');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * \\@publicApi\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n */\nclass NgNoValidate {\n}\nNgNoValidate.decorators = [\n    { type: Directive, args: [{\n                selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                host: { 'novalidate': '' },\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SHARED_FORM_DIRECTIVES = [\n    NgNoValidate,\n    NgSelectOption,\n    NgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\n/** @type {?} */\nconst TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm, NgFormSelectorWarning];\n/** @type {?} */\nconst REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nclass InternalFormsSharedModule {\n}\nInternalFormsSharedModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: SHARED_FORM_DIRECTIVES,\n                exports: SHARED_FORM_DIRECTIVES,\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Guide](/guide/forms)\n *\n * \\@publicApi\n */\nclass FormsModule {\n    /**\n     * \\@description\n     * Provides options for configuring the template-driven forms module.\n     *\n     * @param {?} opts An object of configuration options\n     * * `warnOnDeprecatedNgFormSelector` Configures when to emit a warning when the deprecated\n     * `ngForm` selector is used.\n     * @return {?}\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: FormsModule,\n            providers: [{ provide: NG_FORM_SELECTOR_WARNING, useValue: opts.warnOnDeprecatedNgFormSelector }]\n        };\n    }\n}\nFormsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                providers: [RadioControlRegistry],\n                exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n            },] }\n];\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n * @see [Forms](guide/reactive-forms)\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * \\@publicApi\n */\nclass ReactiveFormsModule {\n    /**\n     * \\@description\n     * Provides options for configuring the reactive forms module.\n     *\n     * @param {?} opts An object of configuration options\n     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n     * binding is used with reactive form directives.\n     * @return {?}\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: ReactiveFormsModule,\n            providers: [{\n                    provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,\n                    useValue: opts.warnOnNgModelWithFormControl\n                }]\n        };\n    }\n}\nReactiveFormsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                providers: [FormBuilder, RadioControlRegistry],\n                exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InternalFormsSharedModule as ɵangular_packages_forms_forms_bc, REACTIVE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_bb, SHARED_FORM_DIRECTIVES as ɵangular_packages_forms_forms_z, TEMPLATE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_ba, CHECKBOX_VALUE_ACCESSOR as ɵangular_packages_forms_forms_a, DEFAULT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_b, AbstractControlStatus as ɵangular_packages_forms_forms_c, ngControlStatusHost as ɵangular_packages_forms_forms_d, formDirectiveProvider as ɵangular_packages_forms_forms_e, NG_FORM_SELECTOR_WARNING as ɵangular_packages_forms_forms_f, formControlBinding as ɵangular_packages_forms_forms_g, modelGroupProvider as ɵangular_packages_forms_forms_h, NgNoValidate as ɵangular_packages_forms_forms_bh, NUMBER_VALUE_ACCESSOR as ɵangular_packages_forms_forms_bd, NumberValueAccessor as ɵangular_packages_forms_forms_be, RADIO_VALUE_ACCESSOR as ɵangular_packages_forms_forms_i, RadioControlRegistry as ɵangular_packages_forms_forms_j, RANGE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_bf, RangeValueAccessor as ɵangular_packages_forms_forms_bg, NG_MODEL_WITH_FORM_CONTROL_WARNING as ɵangular_packages_forms_forms_k, formControlBinding$1 as ɵangular_packages_forms_forms_l, controlNameBinding as ɵangular_packages_forms_forms_m, formDirectiveProvider$1 as ɵangular_packages_forms_forms_n, formArrayNameProvider as ɵangular_packages_forms_forms_p, formGroupNameProvider as ɵangular_packages_forms_forms_o, SELECT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_q, NgSelectMultipleOption as ɵangular_packages_forms_forms_s, SELECT_MULTIPLE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_r, CHECKBOX_REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_u, EMAIL_VALIDATOR as ɵangular_packages_forms_forms_v, MAX_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_x, MIN_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_w, PATTERN_VALIDATOR as ɵangular_packages_forms_forms_y, REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_t, AbstractControlDirective, AbstractFormGroupDirective, CheckboxControlValueAccessor, ControlContainer, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE, DefaultValueAccessor, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgFormSelectorWarning, NgModel, NgModelGroup, RadioControlValueAccessor, FormControlDirective, FormControlName, FormGroupDirective, FormArrayName, FormGroupName, NgSelectOption, SelectControlValueAccessor, SelectMultipleControlValueAccessor, CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator, FormBuilder, AbstractControl, FormArray, FormControl, FormGroup, NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators, VERSION, FormsModule, ReactiveFormsModule };\n//# sourceMappingURL=forms.js.map\n","import { Output, EventEmitter, Component, Input, ElementRef, forwardRef, NgZone, Inject, PLATFORM_ID, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass Events {\n    constructor() {\n        this.onBeforePaste = new EventEmitter();\n        this.onBlur = new EventEmitter();\n        this.onClick = new EventEmitter();\n        this.onContextMenu = new EventEmitter();\n        this.onCopy = new EventEmitter();\n        this.onCut = new EventEmitter();\n        this.onDblclick = new EventEmitter();\n        this.onDrag = new EventEmitter();\n        this.onDragDrop = new EventEmitter();\n        this.onDragEnd = new EventEmitter();\n        this.onDragGesture = new EventEmitter();\n        this.onDragOver = new EventEmitter();\n        this.onDrop = new EventEmitter();\n        this.onFocus = new EventEmitter();\n        this.onFocusIn = new EventEmitter();\n        this.onFocusOut = new EventEmitter();\n        this.onKeyDown = new EventEmitter();\n        this.onKeyPress = new EventEmitter();\n        this.onKeyUp = new EventEmitter();\n        this.onMouseDown = new EventEmitter();\n        this.onMouseEnter = new EventEmitter();\n        this.onMouseLeave = new EventEmitter();\n        this.onMouseMove = new EventEmitter();\n        this.onMouseOut = new EventEmitter();\n        this.onMouseOver = new EventEmitter();\n        this.onMouseUp = new EventEmitter();\n        this.onPaste = new EventEmitter();\n        this.onSelectionChange = new EventEmitter();\n        this.onActivate = new EventEmitter();\n        this.onAddUndo = new EventEmitter();\n        this.onBeforeAddUndo = new EventEmitter();\n        this.onBeforeExecCommand = new EventEmitter();\n        this.onBeforeGetContent = new EventEmitter();\n        this.onBeforeRenderUI = new EventEmitter();\n        this.onBeforeSetContent = new EventEmitter();\n        this.onChange = new EventEmitter();\n        this.onClearUndos = new EventEmitter();\n        this.onDeactivate = new EventEmitter();\n        this.onDirty = new EventEmitter();\n        this.onExecCommand = new EventEmitter();\n        this.onGetContent = new EventEmitter();\n        this.onHide = new EventEmitter();\n        this.onInit = new EventEmitter();\n        this.onLoadContent = new EventEmitter();\n        this.onNodeChange = new EventEmitter();\n        this.onPostProcess = new EventEmitter();\n        this.onPostRender = new EventEmitter();\n        this.onPreInit = new EventEmitter();\n        this.onPreProcess = new EventEmitter();\n        this.onProgressState = new EventEmitter();\n        this.onRedo = new EventEmitter();\n        this.onRemove = new EventEmitter();\n        this.onReset = new EventEmitter();\n        this.onSaveContent = new EventEmitter();\n        this.onSetAttrib = new EventEmitter();\n        this.onObjectResizeStart = new EventEmitter();\n        this.onObjectResized = new EventEmitter();\n        this.onObjectSelected = new EventEmitter();\n        this.onSetContent = new EventEmitter();\n        this.onShow = new EventEmitter();\n        this.onSubmit = new EventEmitter();\n        this.onUndo = new EventEmitter();\n        this.onVisualAid = new EventEmitter();\n    }\n}\nEvents.propDecorators = {\n    \"onBeforePaste\": [{ type: Output },],\n    \"onBlur\": [{ type: Output },],\n    \"onClick\": [{ type: Output },],\n    \"onContextMenu\": [{ type: Output },],\n    \"onCopy\": [{ type: Output },],\n    \"onCut\": [{ type: Output },],\n    \"onDblclick\": [{ type: Output },],\n    \"onDrag\": [{ type: Output },],\n    \"onDragDrop\": [{ type: Output },],\n    \"onDragEnd\": [{ type: Output },],\n    \"onDragGesture\": [{ type: Output },],\n    \"onDragOver\": [{ type: Output },],\n    \"onDrop\": [{ type: Output },],\n    \"onFocus\": [{ type: Output },],\n    \"onFocusIn\": [{ type: Output },],\n    \"onFocusOut\": [{ type: Output },],\n    \"onKeyDown\": [{ type: Output },],\n    \"onKeyPress\": [{ type: Output },],\n    \"onKeyUp\": [{ type: Output },],\n    \"onMouseDown\": [{ type: Output },],\n    \"onMouseEnter\": [{ type: Output },],\n    \"onMouseLeave\": [{ type: Output },],\n    \"onMouseMove\": [{ type: Output },],\n    \"onMouseOut\": [{ type: Output },],\n    \"onMouseOver\": [{ type: Output },],\n    \"onMouseUp\": [{ type: Output },],\n    \"onPaste\": [{ type: Output },],\n    \"onSelectionChange\": [{ type: Output },],\n    \"onActivate\": [{ type: Output },],\n    \"onAddUndo\": [{ type: Output },],\n    \"onBeforeAddUndo\": [{ type: Output },],\n    \"onBeforeExecCommand\": [{ type: Output },],\n    \"onBeforeGetContent\": [{ type: Output },],\n    \"onBeforeRenderUI\": [{ type: Output },],\n    \"onBeforeSetContent\": [{ type: Output },],\n    \"onChange\": [{ type: Output },],\n    \"onClearUndos\": [{ type: Output },],\n    \"onDeactivate\": [{ type: Output },],\n    \"onDirty\": [{ type: Output },],\n    \"onExecCommand\": [{ type: Output },],\n    \"onGetContent\": [{ type: Output },],\n    \"onHide\": [{ type: Output },],\n    \"onInit\": [{ type: Output },],\n    \"onLoadContent\": [{ type: Output },],\n    \"onNodeChange\": [{ type: Output },],\n    \"onPostProcess\": [{ type: Output },],\n    \"onPostRender\": [{ type: Output },],\n    \"onPreInit\": [{ type: Output },],\n    \"onPreProcess\": [{ type: Output },],\n    \"onProgressState\": [{ type: Output },],\n    \"onRedo\": [{ type: Output },],\n    \"onRemove\": [{ type: Output },],\n    \"onReset\": [{ type: Output },],\n    \"onSaveContent\": [{ type: Output },],\n    \"onSetAttrib\": [{ type: Output },],\n    \"onObjectResizeStart\": [{ type: Output },],\n    \"onObjectResized\": [{ type: Output },],\n    \"onObjectSelected\": [{ type: Output },],\n    \"onSetContent\": [{ type: Output },],\n    \"onShow\": [{ type: Output },],\n    \"onSubmit\": [{ type: Output },],\n    \"onUndo\": [{ type: Output },],\n    \"onVisualAid\": [{ type: Output },],\n};\nconst /** @type {?} */ validEvents = [\n    'onActivate',\n    'onAddUndo',\n    'onBeforeAddUndo',\n    'onBeforeExecCommand',\n    'onBeforeGetContent',\n    'onBeforeRenderUI',\n    'onBeforeSetContent',\n    'onBeforePaste',\n    'onBlur',\n    'onChange',\n    'onClearUndos',\n    'onClick',\n    'onContextMenu',\n    'onCopy',\n    'onCut',\n    'onDblclick',\n    'onDeactivate',\n    'onDirty',\n    'onDrag',\n    'onDragDrop',\n    'onDragEnd',\n    'onDragGesture',\n    'onDragOver',\n    'onDrop',\n    'onExecCommand',\n    'onFocus',\n    'onFocusIn',\n    'onFocusOut',\n    'onGetContent',\n    'onHide',\n    'onInit',\n    'onKeyDown',\n    'onKeyPress',\n    'onKeyUp',\n    'onLoadContent',\n    'onMouseDown',\n    'onMouseEnter',\n    'onMouseLeave',\n    'onMouseMove',\n    'onMouseOut',\n    'onMouseOver',\n    'onMouseUp',\n    'onNodeChange',\n    'onObjectResizeStart',\n    'onObjectResized',\n    'onObjectSelected',\n    'onPaste',\n    'onPostProcess',\n    'onPostRender',\n    'onPreProcess',\n    'onProgressState',\n    'onRedo',\n    'onRemove',\n    'onReset',\n    'onSaveContent',\n    'onSelectionChange',\n    'onSetAttrib',\n    'onSetContent',\n    'onShow',\n    'onSubmit',\n    'onUndo',\n    'onVisualAid'\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ bindHandlers = (ctx, editor, initEvent) => {\n    validEvents.forEach((eventName) => {\n        const /** @type {?} */ eventEmitter = ctx[eventName];\n        if (eventEmitter.observers.length > 0) {\n            if (eventName === 'onInit') {\n                ctx.ngZone.run(() => eventEmitter.emit({ event: initEvent, editor }));\n            }\n            else {\n                editor.on(eventName.substring(2), ctx.ngZone.run(() => (event) => eventEmitter.emit({ event, editor })));\n            }\n        }\n    });\n};\nlet /** @type {?} */ unique = 0;\nconst /** @type {?} */ uuid = (prefix) => {\n    const /** @type {?} */ date = new Date();\n    const /** @type {?} */ time = date.getTime();\n    const /** @type {?} */ random = Math.floor(Math.random() * 1000000000);\n    unique++;\n    return prefix + '_' + random + unique + String(time);\n};\nconst /** @type {?} */ isTextarea = (element) => {\n    return typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';\n};\nconst /** @type {?} */ normalizePluginArray = (plugins) => {\n    if (typeof plugins === 'undefined' || plugins === '') {\n        return [];\n    }\n    return Array.isArray(plugins) ? plugins : plugins.split(' ');\n};\nconst /** @type {?} */ mergePlugins = (initPlugins, inputPlugins) => normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ injectScriptTag = (scriptId, doc, url, callback) => {\n    const /** @type {?} */ scriptTag = doc.createElement('script');\n    scriptTag.type = 'application/javascript';\n    scriptTag.id = scriptId;\n    scriptTag.addEventListener('load', callback);\n    scriptTag.src = url;\n    if (doc.head) {\n        doc.head.appendChild(scriptTag);\n    }\n};\nconst /** @type {?} */ create = () => {\n    return {\n        listeners: [],\n        scriptId: uuid('tiny-script'),\n        scriptLoaded: false\n    };\n};\nconst /** @type {?} */ load = (state, doc, url, callback) => {\n    if (state.scriptLoaded) {\n        callback();\n    }\n    else {\n        state.listeners.push(callback);\n        if (!doc.getElementById(state.scriptId)) {\n            injectScriptTag(state.scriptId, doc, url, () => {\n                state.listeners.forEach((fn) => fn());\n                state.scriptLoaded = true;\n            });\n        }\n    }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Copyright (c) 2017-present, Ephox, Inc.\n *\n * This source code is licensed under the Apache 2 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst /** @type {?} */ getTinymce = () => {\n    const /** @type {?} */ w = typeof window !== 'undefined' ? (/** @type {?} */ (window)) : undefined;\n    return w && w.tinymce ? w.tinymce : null;\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ scriptState = create();\nconst /** @type {?} */ EDITOR_COMPONENT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => EditorComponent),\n    multi: true\n};\nclass EditorComponent extends Events {\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} platformId\n     */\n    constructor(elementRef, ngZone, platformId) {\n        super();\n        this.platformId = platformId;\n        this.element = undefined;\n        this.id = '';\n        this.toolbar = null;\n        this.onTouchedCallback = () => { };\n        this.onChangeCallback = (x) => { };\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n        this.initialise = this.initialise.bind(this);\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set disabled(val) {\n        this._disabled = val;\n        if (this.editor && this.editor.initialized) {\n            this.editor.setMode(val ? 'readonly' : 'design');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.initialValue = value || this.initialValue;\n        value = value || '';\n        if (this.editor && this.editor.initialized && typeof value === 'string') {\n            this.editor.setContent(value);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChangeCallback = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouchedCallback = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        if (this.editor) {\n            this.editor.setMode(isDisabled ? 'readonly' : 'design');\n        }\n        else if (isDisabled) {\n            this.init = Object.assign({}, this.init, { readonly: true });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.id = this.id || uuid('tiny-angular');\n            this.inline =\n                typeof this.inline !== 'undefined' ? (typeof this.inline === 'boolean' ? this.inline : true) : this.init && this.init[\"inline\"];\n            this.createElement();\n            if (getTinymce() !== null) {\n                this.initialise();\n            }\n            else if (this.element && this.element.ownerDocument) {\n                const /** @type {?} */ doc = this.element.ownerDocument;\n                const /** @type {?} */ channel = this.cloudChannel || 'stable';\n                const /** @type {?} */ apiKey = this.apiKey || '';\n                load(scriptState, doc, `https://cloud.tinymce.com/${channel}/tinymce.min.js?apiKey=${apiKey}`, this.initialise);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (getTinymce() !== null) {\n            getTinymce().remove(this.editor);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    createElement() {\n        const /** @type {?} */ tagName = typeof this.tagName === 'string' ? this.tagName : 'div';\n        this.element = document.createElement(this.inline ? tagName : 'textarea');\n        if (this.element) {\n            this.element.id = this.id;\n            if (isTextarea(this.element)) {\n                this.element.style.visibility = 'hidden';\n            }\n            this.elementRef.nativeElement.appendChild(this.element);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    initialise() {\n        const /** @type {?} */ finalInit = Object.assign({}, this.init, { target: this.element, inline: this.inline, readonly: this.disabled, plugins: mergePlugins(this.init && this.init[\"plugins\"], this.plugins), toolbar: this.toolbar || (this.init && this.init[\"toolbar\"]), setup: (editor) => {\n                this.editor = editor;\n                editor.on('init', (e) => {\n                    this.initEditor(e, editor);\n                });\n                if (this.init && typeof this.init[\"setup\"] === 'function') {\n                    this.init[\"setup\"](editor);\n                }\n            } });\n        if (isTextarea(this.element)) {\n            this.element.style.visibility = '';\n        }\n        this.ngZone.runOutsideAngular(() => {\n            getTinymce().init(finalInit);\n        });\n    }\n    /**\n     * @param {?} initEvent\n     * @param {?} editor\n     * @return {?}\n     */\n    initEditor(initEvent, editor) {\n        if (typeof this.initialValue === 'string') {\n            this.ngZone.run(() => editor.setContent(this.initialValue));\n        }\n        editor.on('blur', () => this.ngZone.run(() => this.onTouchedCallback()));\n        editor.on('setcontent', ({ content, format }) => format === 'html' && content && this.ngZone.run(() => this.onChangeCallback(content)));\n        editor.on('change keyup undo redo', () => this.ngZone.run(() => this.onChangeCallback(editor.getContent())));\n        bindHandlers(this, editor, initEvent);\n    }\n}\nEditorComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'editor',\n                template: '<ng-template></ng-template>',\n                providers: [EDITOR_COMPONENT_VALUE_ACCESSOR],\n                styles: [':host { display: block; }']\n            }] }\n];\n/** @nocollapse */\nEditorComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: NgZone, },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },\n];\nEditorComponent.propDecorators = {\n    \"cloudChannel\": [{ type: Input },],\n    \"apiKey\": [{ type: Input },],\n    \"init\": [{ type: Input },],\n    \"id\": [{ type: Input },],\n    \"initialValue\": [{ type: Input },],\n    \"inline\": [{ type: Input },],\n    \"tagName\": [{ type: Input },],\n    \"plugins\": [{ type: Input },],\n    \"toolbar\": [{ type: Input },],\n    \"disabled\": [{ type: Input },],\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass EditorModule {\n}\nEditorModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, FormsModule],\n                declarations: [EditorComponent],\n                exports: [EditorComponent]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { EditorComponent, EditorModule, Events as ɵa };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@tinymce/tinymce-angular\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nvar EditorModuleNgFactory = i0.ɵcmf(i1.EditorModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID, [2, i2.ɵangular_packages_common_common_a]]), i0.ɵmpd(4608, i3.ɵangular_packages_forms_forms_j, i3.ɵangular_packages_forms_forms_j, []), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1073742336, i3.ɵangular_packages_forms_forms_bc, i3.ɵangular_packages_forms_forms_bc, []), i0.ɵmpd(1073742336, i3.FormsModule, i3.FormsModule, []), i0.ɵmpd(1073742336, i1.EditorModule, i1.EditorModule, [])]); });\nexport { EditorModuleNgFactory as EditorModuleNgFactory };\nvar styles_EditorComponent = [\"[_nghost-%COMP%] { display: block; }\"];\nvar RenderType_EditorComponent = i0.ɵcrt({ encapsulation: 0, styles: styles_EditorComponent, data: {} });\nexport { RenderType_EditorComponent as RenderType_EditorComponent };\nfunction View_EditorComponent_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵand(0, null, null, 0))], null, null); }\nexport function View_EditorComponent_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵand(0, null, null, 0, null, View_EditorComponent_1))], null, null); }\nexport function View_EditorComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 2, \"editor\", [], null, null, null, View_EditorComponent_0, RenderType_EditorComponent)), i0.ɵprd(5120, null, i3.NG_VALUE_ACCESSOR, function (p0_0) { return [p0_0]; }, [i1.EditorComponent]), i0.ɵdid(2, 4374528, null, 0, i1.EditorComponent, [i0.ElementRef, i0.NgZone, i0.PLATFORM_ID], null, null)], null, null); }\nvar EditorComponentNgFactory = i0.ɵccf(\"editor\", i1.EditorComponent, View_EditorComponent_Host_0, { cloudChannel: \"cloudChannel\", apiKey: \"apiKey\", init: \"init\", id: \"id\", initialValue: \"initialValue\", inline: \"inline\", tagName: \"tagName\", plugins: \"plugins\", toolbar: \"toolbar\", disabled: \"disabled\" }, { onBeforePaste: \"onBeforePaste\", onBlur: \"onBlur\", onClick: \"onClick\", onContextMenu: \"onContextMenu\", onCopy: \"onCopy\", onCut: \"onCut\", onDblclick: \"onDblclick\", onDrag: \"onDrag\", onDragDrop: \"onDragDrop\", onDragEnd: \"onDragEnd\", onDragGesture: \"onDragGesture\", onDragOver: \"onDragOver\", onDrop: \"onDrop\", onFocus: \"onFocus\", onFocusIn: \"onFocusIn\", onFocusOut: \"onFocusOut\", onKeyDown: \"onKeyDown\", onKeyPress: \"onKeyPress\", onKeyUp: \"onKeyUp\", onMouseDown: \"onMouseDown\", onMouseEnter: \"onMouseEnter\", onMouseLeave: \"onMouseLeave\", onMouseMove: \"onMouseMove\", onMouseOut: \"onMouseOut\", onMouseOver: \"onMouseOver\", onMouseUp: \"onMouseUp\", onPaste: \"onPaste\", onSelectionChange: \"onSelectionChange\", onActivate: \"onActivate\", onAddUndo: \"onAddUndo\", onBeforeAddUndo: \"onBeforeAddUndo\", onBeforeExecCommand: \"onBeforeExecCommand\", onBeforeGetContent: \"onBeforeGetContent\", onBeforeRenderUI: \"onBeforeRenderUI\", onBeforeSetContent: \"onBeforeSetContent\", onChange: \"onChange\", onClearUndos: \"onClearUndos\", onDeactivate: \"onDeactivate\", onDirty: \"onDirty\", onExecCommand: \"onExecCommand\", onGetContent: \"onGetContent\", onHide: \"onHide\", onInit: \"onInit\", onLoadContent: \"onLoadContent\", onNodeChange: \"onNodeChange\", onPostProcess: \"onPostProcess\", onPostRender: \"onPostRender\", onPreInit: \"onPreInit\", onPreProcess: \"onPreProcess\", onProgressState: \"onProgressState\", onRedo: \"onRedo\", onRemove: \"onRemove\", onReset: \"onReset\", onSaveContent: \"onSaveContent\", onSetAttrib: \"onSetAttrib\", onObjectResizeStart: \"onObjectResizeStart\", onObjectResized: \"onObjectResized\", onObjectSelected: \"onObjectSelected\", onSetContent: \"onSetContent\", onShow: \"onShow\", onSubmit: \"onSubmit\", onUndo: \"onUndo\", onVisualAid: \"onVisualAid\" }, []);\nexport { EditorComponentNgFactory as EditorComponentNgFactory };\n","<ng-template></ng-template>","import { Injectable, ɵConsole } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class TinymceWysiwygConfig {\r\n    svc = () => {\r\n        return {\r\n            // cdn root\r\n            // cdnRoot: '//cdn.tinymce.com/4',\r\n            // these are the sizes we can auto-resize to\r\n            imgSizes: [100, 75, 70, 66, 60, 50, 40, 33, 30, 25, 10],\r\n\r\n            // the default language, in which we have all labels/translations\r\n            defaultLanguage: 'en',\r\n\r\n            // all other languages\r\n            languages: 'de,es,fr,it,uk,nl'.split(','),\r\n\r\n            // tinyMCE plugins we're using\r\n            plugins: [\r\n                'code', // allow view / edit source\r\n                'contextmenu', // right-click menu for things like insert, etc.\r\n                'autolink', // automatically convert www.xxx links to real links\r\n                'tabfocus', // get in an out of the editor with tab\r\n                'image', // image button and image-settings\r\n                'link', // link button + ctrl+k to add link\r\n                // 'autosave',     // temp-backups the content in case the browser crashes, allows restore\r\n                'paste', // enables paste as text from word etc. https://www.tinymce.com/docs/plugins/paste/\r\n                'anchor', // allows users to set an anchor inside the text\r\n                'charmap', // character map https://www.tinymce.com/docs/plugins/visualchars/\r\n                'hr', // hr\r\n                'media', // video embed\r\n                'nonbreaking', // add button to insert &nbsp; https://www.tinymce.com/docs/plugins/nonbreaking/\r\n                'searchreplace', // search/replace https://www.tinymce.com/docs/plugins/searchreplace/\r\n                'table', // https://www.tinymce.com/docs/plugins/searchreplace/\r\n                'lists', // should fix bug with fonts in list-items (https://github.com/tinymce/tinymce/issues/2330),\r\n                'textpattern' // enable typing like '1. text' to create lists etc.\r\n            ],\r\n\r\n            validateAlso: '@[class]' // allow classes on all elements,\r\n                + ',i' // allow i elements (allows icon-font tags like <i class='fa fa-...'>)\r\n                + ',hr[sxc|guid]' // experimental: allow inline content-blocks\r\n        };\r\n    }\r\n\r\n    buildModes = (settings) => {\r\n        // the WYSIWYG-modes we offer, standard with simple toolbar and advanced with much more\r\n        return {\r\n            standard: {\r\n                menubar: false,\r\n                toolbar: ' undo redo removeformat '\r\n                    + '| bold formatgroup '\r\n                    + '| h1 h2 hgroup '\r\n                    + '| listgroup '\r\n                    + '| linkfiles linkgroup '\r\n                    + '| ' + (settings.enableContentBlocks ? ' addcontentblock ' : '') + 'modeadvanced ',\r\n                contextmenu: 'charmap hr' + (settings.enableContentBlocks ? ' addcontentblock' : '')\r\n            },\r\n            advanced: {\r\n                menubar: true,\r\n                toolbar: ' undo redo removeformat '\r\n                    + '| styleselect '\r\n                    + '| bold italic '\r\n                    + '| h1 h2 hgroup '\r\n                    + '| bullist numlist outdent indent '\r\n                    + '| images linkfiles linkgrouppro '\r\n                    + '| code modestandard ',\r\n                contextmenu: 'link image | charmap hr adamimage'\r\n            }\r\n        };\r\n        // return modes;\r\n    }\r\n\r\n    getDefaultOptions = (settings) => {\r\n        const modes = this.buildModes(settings);\r\n        const svc = this.svc();\r\n        return {\r\n            // baseURL: svc.cdnRoot, // main script is loaded as a dependency to this webcomponent in eav-field.directive.ts\r\n            // inline: true, // use the div, not an iframe\r\n            automatic_uploads: false, // we're using our own upload mechanism\r\n            modes: modes, // for later switch to another mode\r\n            menubar: modes.standard.menubar, // basic menu (none)\r\n            toolbar: modes.standard.toolbar, // basic toolbar\r\n            plugins: svc.plugins.join(' '),\r\n            contextmenu: modes.standard.contextmenu, // 'link image | charmap hr adamimage',\r\n            autosave_ask_before_unload: false,\r\n            paste_as_text: true,\r\n            extended_valid_elements: svc.validateAlso,\r\n            // '@[class]' // allow classes on all elements,\r\n            // + ',i' // allow i elements (allows icon-font tags like <i class='fa fa-...'>)\r\n            // + ',hr[sxc|guid]', // experimental: allow inline content-blocks\r\n            custom_elements: 'hr',\r\n\r\n            // Url Rewriting in images and pages\r\n            // convert_urls: false,  // don't use this, would keep the domain which is often a test-domain\r\n            // keep urls with full path so starting with a '/' - otherwise it would rewrite them to a '../../..' syntax\r\n            relative_urls: false,\r\n            default_link_target: '_blank', // auto-use blank as default link-target\r\n            object_resizing: false, // don't allow manual scaling of images\r\n\r\n            // General looks\r\n            skin: 'lightgray',\r\n            theme: 'modern',\r\n            statusbar: false,    // doesn't work in inline :(\r\n\r\n            language: svc.defaultLanguage,\r\n\r\n            debounce: false, // DONT slow-down model updates - otherwise we sometimes miss the last changes\r\n            // link_context_toolbar: true,\r\n\r\n            // paste_preprocess: function (plugin, args) {\r\n            //    console.log(args.content);\r\n            //    args.content += ' preprocess';\r\n            // },\r\n\r\n            // paste_postprocess: function (plugin, args) {\r\n            //    console.log(args.node);\r\n            //    args.node.setAttribute('id', '42');\r\n            // }\r\n        };\r\n    }\r\n\r\n    setLanguageOptions = (currentLang, options) => {\r\n        // check if it's an additionally translated language and load the translations\r\n        const lang2 = currentLang.substr(0, 2); //  /* 'de' */\r\n        if (this.svc().languages.indexOf(lang2) >= 0) {\r\n            options = Object.assign(options, {\r\n                language: lang2,\r\n                language_url: '/DesktopModules/ToSIC_SexyContent/dist/i18n/lib/tinymce/' + lang2 + '.js'\r\n            });\r\n        }\r\n        return options;\r\n    }\r\n\r\n    // added tinymce\r\n    addTranslations(language, translateService, tinymce) {\r\n        const primaryLan = this.svc().defaultLanguage;\r\n        const keys = [], mceTranslations = {}, prefix = 'Extension.TinyMce', prefixDot = 'Extension.TinyMce.'; //  pLen = prefix.length;\r\n\r\n        // find all relevant keys by querying the primary language\r\n        // var all = translateService.getTranslationTable(primaryLan);\r\n        const all = translateService.translations[primaryLan];\r\n        // ReSharper disable once MissingHasOwnPropertyInForeach\r\n        for (const key in all) {\r\n            if (key.indexOf(prefix) === 0) {\r\n                keys.push(key);\r\n            }\r\n        }\r\n\r\n        const translations = translateService.instant(keys);\r\n\r\n        for (let k = 0; k < keys.length; k++) {\r\n            mceTranslations[keys[k].replace(prefixDot, '')] = translations[keys[k]];\r\n        }\r\n\r\n        tinymce.addI18n(language, translations[keys[0]]);\r\n    }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class TinyMceDnnBridgeService {\r\n    result: any = {};\r\n\r\n    attachDnnBridgeService(vm, editor): void {\r\n        // open the dialog - note: strong dependency on the buttons, not perfect here\r\n        vm.openDnnDialog = (type) => {\r\n            // vm.host.openDnnDialog('', { Paths: null, FileFilter: null }, vm.processResultOfDnnBridge);\r\n            vm.host.openDnnDialog('', { Paths: null, FileFilter: null }, vm.processResultOfDnnBridge);\r\n        };\r\n\r\n        // the callback when something was selected\r\n        vm.processResultOfDnnBridge = (value) => {\r\n            this.result = value;\r\n            if (!value) { return; }\r\n            vm.host.getUrlOfIdDnnDialog('page:' + (value.id || value.FileId), vm.urlCallback);\r\n\r\n            //  return value;\r\n            // $scope.$apply(function () {\r\n            //     if (!value) return;\r\n\r\n            //     var previouslySelected = vm.editor.selection.getContent();\r\n\r\n            //     var promise = dnnBridgeSvc.getUrlOfId(\"page:\" + (value.id || value.FileId)); // id on page, FileId on file\r\n            //     return promise.then(function (result) {\r\n            //         vm.editor.insertContent(\"<a href=\\\"\" + result.data + \"\\\">\" + (previouslySelected || value.name) + \"</a>\");\r\n            //     });\r\n            // });\r\n        };\r\n\r\n        vm.urlCallback = (data) => {\r\n            const previouslySelected = editor.selection.getContent();\r\n            editor.insertContent('<a href=\\\"' + data + '\\\">' + (previouslySelected || this.result.name) + '</a>');\r\n        };\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class TinyMceAdamService {\r\n\r\n    attachAdam(vm, tinymce) {\r\n        vm.adam = vm.host.attachAdam();\r\n\r\n        vm.adamSetValue = (fileItem, modeImage) => {\r\n            if (modeImage === undefined) {  // if not supplied, use the setting in the adam\r\n                modeImage = vm.adam.adamModeImage;\r\n            }\r\n\r\n            const fileName = fileItem.Name.substr(0, fileItem.Name.lastIndexOf('.'));\r\n\r\n            const content = modeImage\r\n                ? '<img src=\"' + fileItem.FullPath + '\" + alt=\"' + fileName + '\">'\r\n                : '<a href=\"' + fileItem.FullPath + '\">' + fileName + '</a>';\r\n            // var body = vm.editor.getBody();\r\n            // vm.editor.selection.setCursorLocation(body, 0);\r\n            // debugger;\r\n            // var range = window.savedRange;\r\n            // vm.editor.selection.setCursorLocati\r\n\r\n            tinymce.get(vm.id).insertContent(content);\r\n        };\r\n\r\n        vm.adamAfterUpload = (fileItem) => {\r\n            vm.adamSetValue(fileItem, fileItem.Type === 'image');\r\n        };\r\n\r\n        vm.toggleAdam = (imagesOnly, usePortalRoot) => {\r\n            vm.adam.adamModeImage = imagesOnly;\r\n            vm.adam.toggleAdam({\r\n                showImagesOnly: imagesOnly,\r\n                usePortalRoot: usePortalRoot\r\n            });\r\n        };\r\n\r\n        vm.setAdamConfig = (adamConfig) => {\r\n            vm.adam.setAdamConfig(adamConfig);\r\n        };\r\n    }\r\n}\r\n\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"./tinymce-wysiwyg.component.scss.ngstyle\";\nimport * as i1 from \"@angular/core\";\nimport * as i2 from \"../../../../../node_modules/@tinymce/tinymce-angular/tinymce-tinymce-angular.ngfactory\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@tinymce/tinymce-angular\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"./tinymce-wysiwyg.component\";\nimport * as i7 from \"../services/tinymce-wysiwyg-config\";\nimport * as i8 from \"../services/tinymce-dnnbridge-service\";\nimport * as i9 from \"../services/tinymce-adam-service\";\nvar styles_TinymceWysiwygComponent = [i0.styles];\nvar RenderType_TinymceWysiwygComponent = i1.ɵcrt({ encapsulation: 2, styles: styles_TinymceWysiwygComponent, data: {} });\nexport { RenderType_TinymceWysiwygComponent as RenderType_TinymceWysiwygComponent };\nfunction View_TinymceWysiwygComponent_1(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 2, \"editor\", [[\"class\", \"field-string-wysiwyg-mce-box\"], [\"style\", \"height:100%\"]], null, null, null, i2.View_EditorComponent_0, i2.RenderType_EditorComponent)), i1.ɵprd(5120, null, i3.NG_VALUE_ACCESSOR, function (p0_0) { return [p0_0]; }, [i4.EditorComponent]), i1.ɵdid(2, 4374528, null, 0, i4.EditorComponent, [i1.ElementRef, i1.NgZone, i1.PLATFORM_ID], { init: [0, \"init\"], id: [1, \"id\"], initialValue: [2, \"initialValue\"], disabled: [3, \"disabled\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.options; var currVal_1 = _co.id; var currVal_2 = _co.initialValue; var currVal_3 = _co.disabled; _ck(_v, 2, 0, currVal_0, currVal_1, currVal_2, currVal_3); }, null); }\nexport function View_TinymceWysiwygComponent_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 3, \"div\", [[\"class\", \"wrap-float-label\"], [\"style\", \"height:100% !important\"]], null, null, null, null, null)), (_l()(), i1.ɵand(16777216, null, null, 1, null, View_TinymceWysiwygComponent_1)), i1.ɵdid(2, 16384, null, 0, i5.NgIf, [i1.ViewContainerRef, i1.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i1.ɵeld(3, 0, null, null, 0, \"span\", [[\"id\", \"dummyfocus\"], [\"tabindex\", \"-1\"]], null, null, null, null, null))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.options; _ck(_v, 2, 0, currVal_0); }, null); }\nexport function View_TinymceWysiwygComponent_Host_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"app-tinymce-wysiwyg\", [], null, null, null, View_TinymceWysiwygComponent_0, RenderType_TinymceWysiwygComponent)), i1.ɵdid(1, 245760, null, 0, i6.TinymceWysiwygComponent, [i7.TinymceWysiwygConfig, i8.TinyMceDnnBridgeService, i9.TinyMceAdamService], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar TinymceWysiwygComponentNgFactory = i1.ɵccf(\"app-tinymce-wysiwyg\", i6.TinymceWysiwygComponent, View_TinymceWysiwygComponent_Host_0, { connector: \"connector\", experimental: \"experimental\", host: \"host\", translateService: \"translateService\", adamSetValueCallback: \"adamSetValueCallback\", adamAfterUploadCallback: \"adamAfterUploadCallback\" }, {}, []);\nexport { TinymceWysiwygComponentNgFactory as TinymceWysiwygComponentNgFactory };\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nvar styles = [\".mce-toolbar-grp{z-index:30;box-shadow:0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12),0 2px 4px -1px rgba(0,0,0,.2)}.mce-i-apple:before{position:relative;top:1px;display:inline-block;font-family:'Glyphicons Halflings';font-style:normal;font-weight:400;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;content:\\\"\\\\f179\\\"}.c-ew__dialog-content .mce-tinymce{height:100%}.c-ew__dialog-content .mce-edit-area,.c-ew__dialog-content .mce-stack-layout,.c-ew__dialog-content div.wrap-float-label{display:flex!important;flex-direction:column;flex:1;align-items:stretch}.c-ew__dialog-content .mce-tinymce iframe{flex:1}.mce-tinymce.mce-container.mce-tinymce-inline,.mce-tinymce.mce-container.mce-toolbar{background-color:#0087f4}.mce-btn,.mce-container,.mce-panel{color:#fff!important;background-color:#0087f4!important}.mce-container,.mce-container *,.mce-ico,.mce-menubar .mce-menubtn button span,.mce-reset,.mce-widget,.mce-widget *{color:#fff!important}.mce-textbox{color:#333!important}.mce-btn:focus,.mce-btn:hover{border-color:#f5f5f5!important}.mce-splitbtn .mce-open.mce-active{opacity:.5}.mce-menu-item{padding-left:4px!important}.mce-menu-item .mce-ico{padding-right:8px!important}.mce-menu-item .mce-caret{border-left-color:#f5f5f5!important}.mce-caret{border-top-color:#f5f5f5!important}.mce-tab{background-color:#329ff6!important}.mce-tab.mce-active{background-color:#0087f4!important}.toolbar-icon i,.toolbar-icon svg{fill:#fff;width:16px;height:16px;font-size:16px;margin-top:2px}.dropdown-icon svg{margin-top:0;padding-right:8px}\"];\nexport { styles as styles };\n","<div class=\"wrap-float-label\" style=\"height:100% !important\">\r\n  <editor *ngIf=\"options\" [id]=\"id\" [init]=\"options\" class=\"field-string-wysiwyg-mce-box\" [disabled]=\"disabled\"\r\n    [initialValue]=\"initialValue\" style=\"height:100%\"></editor>\r\n  <span id=\"dummyfocus\" tabindex=\"-1\"></span>\r\n</div>\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app.module\";\nimport * as i2 from \"./app.component.ngfactory\";\nimport * as i3 from \"./tinymce-wysiwyg/tinymce-wysiwyg.component.ngfactory\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/platform-browser\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"./services/tinymce-wysiwyg-config\";\nimport * as i8 from \"./services/tinymce-dnnbridge-service\";\nimport * as i9 from \"./services/tinymce-adam-service\";\nimport * as i10 from \"@tinymce/tinymce-angular\";\nvar AppModuleNgFactory = i0.ɵcmf(i1.AppModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.AppComponentNgFactory, i3.TinymceWysiwygComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(5120, i0.LOCALE_ID, i0.ɵangular_packages_core_core_r, [[3, i0.LOCALE_ID]]), i0.ɵmpd(4608, i4.NgLocalization, i4.NgLocaleLocalization, [i0.LOCALE_ID, [2, i4.ɵangular_packages_common_common_a]]), i0.ɵmpd(4608, i0.Compiler, i0.Compiler, []), i0.ɵmpd(5120, i0.APP_ID, i0.ɵangular_packages_core_core_g, []), i0.ɵmpd(5120, i0.IterableDiffers, i0.ɵangular_packages_core_core_p, []), i0.ɵmpd(5120, i0.KeyValueDiffers, i0.ɵangular_packages_core_core_q, []), i0.ɵmpd(4608, i5.DomSanitizer, i5.ɵDomSanitizerImpl, [i4.DOCUMENT]), i0.ɵmpd(6144, i0.Sanitizer, null, [i5.DomSanitizer]), i0.ɵmpd(4608, i5.HAMMER_GESTURE_CONFIG, i5.HammerGestureConfig, []), i0.ɵmpd(5120, i5.EVENT_MANAGER_PLUGINS, function (p0_0, p0_1, p0_2, p1_0, p2_0, p2_1, p2_2, p2_3) { return [new i5.ɵDomEventsPlugin(p0_0, p0_1, p0_2), new i5.ɵKeyEventsPlugin(p1_0), new i5.ɵHammerGesturesPlugin(p2_0, p2_1, p2_2, p2_3)]; }, [i4.DOCUMENT, i0.NgZone, i0.PLATFORM_ID, i4.DOCUMENT, i4.DOCUMENT, i5.HAMMER_GESTURE_CONFIG, i0.ɵConsole, [2, i5.HAMMER_LOADER]]), i0.ɵmpd(4608, i5.EventManager, i5.EventManager, [i5.EVENT_MANAGER_PLUGINS, i0.NgZone]), i0.ɵmpd(135680, i5.ɵDomSharedStylesHost, i5.ɵDomSharedStylesHost, [i4.DOCUMENT]), i0.ɵmpd(4608, i5.ɵDomRendererFactory2, i5.ɵDomRendererFactory2, [i5.EventManager, i5.ɵDomSharedStylesHost]), i0.ɵmpd(6144, i0.RendererFactory2, null, [i5.ɵDomRendererFactory2]), i0.ɵmpd(6144, i5.ɵSharedStylesHost, null, [i5.ɵDomSharedStylesHost]), i0.ɵmpd(4608, i0.Testability, i0.Testability, [i0.NgZone]), i0.ɵmpd(4608, i6.ɵangular_packages_forms_forms_j, i6.ɵangular_packages_forms_forms_j, []), i0.ɵmpd(4608, i7.TinymceWysiwygConfig, i7.TinymceWysiwygConfig, []), i0.ɵmpd(4608, i8.TinyMceDnnBridgeService, i8.TinyMceDnnBridgeService, []), i0.ɵmpd(4608, i9.TinyMceAdamService, i9.TinyMceAdamService, []), i0.ɵmpd(1073742336, i4.CommonModule, i4.CommonModule, []), i0.ɵmpd(1024, i0.ErrorHandler, i5.ɵangular_packages_platform_browser_platform_browser_a, []), i0.ɵmpd(1024, i0.APP_INITIALIZER, function (p0_0) { return [i5.ɵangular_packages_platform_browser_platform_browser_j(p0_0)]; }, [[2, i0.NgProbeToken]]), i0.ɵmpd(512, i0.ApplicationInitStatus, i0.ApplicationInitStatus, [[2, i0.APP_INITIALIZER]]), i0.ɵmpd(131584, i0.ApplicationRef, i0.ApplicationRef, [i0.NgZone, i0.ɵConsole, i0.Injector, i0.ErrorHandler, i0.ComponentFactoryResolver, i0.ApplicationInitStatus]), i0.ɵmpd(1073742336, i0.ApplicationModule, i0.ApplicationModule, [i0.ApplicationRef]), i0.ɵmpd(1073742336, i5.BrowserModule, i5.BrowserModule, [[3, i5.BrowserModule]]), i0.ɵmpd(1073742336, i6.ɵangular_packages_forms_forms_bc, i6.ɵangular_packages_forms_forms_bc, []), i0.ɵmpd(1073742336, i6.FormsModule, i6.FormsModule, []), i0.ɵmpd(1073742336, i10.EditorModule, i10.EditorModule, []), i0.ɵmpd(1073742336, i1.AppModule, i1.AppModule, [i0.Injector]), i0.ɵmpd(256, i0.ɵAPP_ROOT, true, [])]); });\nexport { AppModuleNgFactory as AppModuleNgFactory };\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  // enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":""}