{"version":3,"sources":["./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-actions/content-type-fields-actions.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-special/content-type-fields-special.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-special/content-type-fields-special.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-title/content-type-fields-title.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-title/content-type-fields-title.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-type/content-type-fields-type.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-type/content-type-fields-type.component.html","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.component.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.component.html"],"names":["agInit","params","this","field","data","enablePermissions","InputType","Type","refresh","rename","onRename","openPermissions","onOpenPermissions","deleteField","onDelete","ContentTypeFieldsActionsComponent","value","ContentTypeFieldsInputTypeComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ContentTypeFieldsSpecialComponent","isTitle","ContentTypeFieldsTitleComponent","icon","ContentTypeFieldsTypeComponent","dialogRef","route","router","contentTypesService","contentTypesFieldsService","snackBar","contentType$","BehaviorSubject","fields$","modules","gridOptions","getRowClass","frameworkComponents","contentTypeFieldsTitleComponent","contentTypeFieldsTypeComponent","contentTypeFieldsInputTypeComponent","contentTypeFieldsSpecialComponent","contentTypeFieldsActionsComponent","columnDefs","rowDrag","width","cellClass","headerName","cellRenderer","onCellClicked","setTitle","bind","flex","minWidth","sortable","filter","editFieldMetadata","nameCellRenderer","headerClass","changeInputType","valueGetter","inputTypeValueGetter","pinned","cellRendererParams","delete","sortApplied","filterApplied","rowDragSuppressed","contentTypeStaticName","snapshot","paramMap","get","subscription","Subscription","ngOnInit","fetchFields","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","closeDialog","close","onGridReady","gridApi","api","onRowDragEnter","event","setEnableCellTextSelection","onRowDragEnd","setSuppressRowDrag","idArray","map","Id","reOrder","subscribe","res","onRowDragMove","movingNode","node","overNode","movingData","overData","newFields","fromIndex","indexOf","toIndex","moveInArray","next","clearFocusedCell","arr","element","splice","onSortChanged","sortModel","getSortModel","length","suppressRowDrag","onFilterChanged","filterModel","getFilterModel","fieldsFiltered","Object","keys","shouldSuppress","add","navigate","relativeTo","currentField","includes","isGroupOpen","StaticName","substring","callback","retrieveContentType","pipe","share","mergeMap","contentType","getFields","forkJoin","fields","form","items","createItemDefinition","formUrl","metadataType","Metadata","EntityId","ContentTypeName","For","Target","Number","Prefill","Name","open","duration","confirm","events","startWith","firstChild","pairwise","ContentTypeFieldsComponent"],"mappings":"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","file":"projects_ng-dialogs_src_app_content-type-fields_content-type-fields_component_ts.f066845a75ff86cbd96c.js","sourcesContent":["<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Permissions\" *ngIf=\"enablePermissions\"\r\n    (click)=\"openPermissions()\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgePosition=\"after\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n      *ngIf=\"field.Permissions.Count\">\r\n      person\r\n    </mat-icon>\r\n    <mat-icon *ngIf=\"!field.Permissions.Count\">person</mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"!enablePermissions\">\r\n    <mat-icon>person</mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <button mat-menu-item (click)=\"rename()\">\r\n    <mat-icon>text_fields</mat-icon>\r\n    <span>Rename</span>\r\n  </button>\r\n\r\n  <button mat-menu-item [disabled]=\"field.IsTitle\" (click)=\"deleteField()\">\r\n    <mat-icon>delete</mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { DataTypeConstants } from '../../constants/data-type.constants';\r\nimport { InputTypeConstants } from '../../constants/input-type.constants';\r\nimport { Field } from '../../models/field.model';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-actions',\r\n  templateUrl: './content-type-fields-actions.component.html',\r\n  styleUrls: ['./content-type-fields-actions.component.scss'],\r\n})\r\nexport class ContentTypeFieldsActionsComponent implements ICellRendererAngularComp {\r\n  field: Field;\r\n  enablePermissions: boolean;\r\n  private params: ContentTypeFieldsActionsParams;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ContentTypeFieldsActionsParams) {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    this.enablePermissions = this.field.InputType === InputTypeConstants.StringWysiwyg || this.field.Type === DataTypeConstants.Hyperlink;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  rename() {\r\n    this.params.onRename(this.field);\r\n  }\r\n\r\n  openPermissions() {\r\n    this.params.onOpenPermissions(this.field);\r\n  }\r\n\r\n  deleteField() {\r\n    this.params.onDelete(this.field);\r\n  }\r\n}\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-input-type',\r\n  templateUrl: './content-type-fields-input-type.component.html',\r\n  styleUrls: ['./content-type-fields-input-type.component.scss'],\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div matRipple class=\"input-component highlight\">\r\n  <div class=\"text\">{{ value }}</div>\r\n  <div class=\"like-button\">\r\n    <mat-icon>arrow_drop_down</mat-icon>\r\n  </div>\r\n</div>\r\n","<div class=\"icon-container\">\r\n  <mat-icon *ngIf=\"hasFormulas\" tippy=\"Has Formulas\">functions</mat-icon>\r\n  <mat-icon *ngIf=\"isEphemeral\" tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../models/field.model';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-special',\r\n  templateUrl: './content-type-fields-special.component.html',\r\n  styleUrls: ['./content-type-fields-special.component.scss'],\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Use as title field\">\r\n    <mat-icon *ngIf=\"isTitle\" svgIcon=\"star\"></mat-icon>\r\n    <mat-icon *ngIf=\"!isTitle\">star_outline</mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-title',\r\n  templateUrl: './content-type-fields-title.component.html',\r\n  styleUrls: ['./content-type-fields-title.component.scss'],\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n  isTitle: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.isTitle = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { calculateTypeIcon } from '../../content-type-fields.helpers';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-type',\r\n  templateUrl: './content-type-fields-type.component.html',\r\n  styleUrls: ['./content-type-fields-type.component.scss'],\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AllCommunityModules, CellClickedEvent, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowDragEvent, SortChangedEvent, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin, Subscription } from 'rxjs';\r\nimport { filter, map, mergeMap, pairwise, share, startWith } from 'rxjs/operators';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { AddItem, EditForm, EditItem } from '../shared/models/edit-form.model';\r\nimport { ContentTypeFieldsActionsComponent } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsInputTypeComponent } from './ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsSpecialComponent } from './ag-grid-components/content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './ag-grid-components/content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTypeComponent } from './ag-grid-components/content-type-fields-type/content-type-fields-type.component';\r\nimport { InputTypeConstants } from './constants/input-type.constants';\r\nimport { Field } from './models/field.model';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  styleUrls: ['./content-type-fields.component.scss'],\r\n})\r\nexport class ContentTypeFieldsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n  fields$ = new BehaviorSubject<Field[]>(null);\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    getRowClass(params/*: RowClassParams*/) {\r\n      const field: Field = params.data;\r\n      if (field.InputType === InputTypeConstants.EmptyDefault) { return 'group-start-row'; }\r\n      if (field.InputType === InputTypeConstants.EmptyEnd) { return 'group-end-row'; }\r\n      return '';\r\n    },\r\n    frameworkComponents: {\r\n      contentTypeFieldsTitleComponent: ContentTypeFieldsTitleComponent,\r\n      contentTypeFieldsTypeComponent: ContentTypeFieldsTypeComponent,\r\n      contentTypeFieldsInputTypeComponent: ContentTypeFieldsInputTypeComponent,\r\n      contentTypeFieldsSpecialComponent: ContentTypeFieldsSpecialComponent,\r\n      contentTypeFieldsActionsComponent: ContentTypeFieldsActionsComponent,\r\n    },\r\n    columnDefs: [\r\n      { rowDrag: true, width: 18, cellClass: 'no-select no-padding no-outline' },\r\n      {\r\n        headerName: 'Title', field: 'IsTitle', width: 42, cellClass: 'secondary-action no-padding no-outline',\r\n        cellRenderer: 'contentTypeFieldsTitleComponent', onCellClicked: this.setTitle.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Name', field: 'StaticName', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: this.editFieldMetadata.bind(this),\r\n        cellRenderer: this.nameCellRenderer.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Type', field: 'Type', width: 70, headerClass: 'dense', cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter', cellRenderer: 'contentTypeFieldsTypeComponent',\r\n      },\r\n      {\r\n        headerName: 'Input', field: 'InputType', width: 160, cellClass: 'secondary-action no-padding',\r\n        sortable: true, filter: 'agTextColumnFilter', cellRenderer: 'contentTypeFieldsInputTypeComponent',\r\n        onCellClicked: this.changeInputType.bind(this), valueGetter: this.inputTypeValueGetter,\r\n      },\r\n      {\r\n        headerName: 'Label', field: 'Metadata.All.Name', flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter',\r\n      },\r\n      {\r\n        headerName: 'Special', width: 66, headerClass: 'dense', cellClass: 'no-outline',\r\n        cellRenderer: 'contentTypeFieldsSpecialComponent',\r\n      },\r\n      {\r\n        headerName: 'Notes', field: 'Metadata.All.Notes', flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter',\r\n      },\r\n      {\r\n        width: 80, cellClass: 'secondary-action no-padding', cellRenderer: 'contentTypeFieldsActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onRename: this.rename.bind(this),\r\n          onDelete: this.delete.bind(this),\r\n          onOpenPermissions: this.openPermissions.bind(this),\r\n        } as ContentTypeFieldsActionsParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n  private gridApi: GridApi;\r\n  private rowDragSuppressed = false;\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchFields();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.fields$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n  }\r\n\r\n  onRowDragEnter(event: RowDragEvent) {\r\n    this.gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(event: RowDragEvent) {\r\n    this.gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields$.value.map(field => field.Id);\r\n    this.contentTypesFieldsService.reOrder(idArray, this.contentType$.value).subscribe(res => {\r\n      this.fetchFields(() => {\r\n        this.gridApi.setEnableCellTextSelection(true);\r\n        this.gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const movingNode = event.node;\r\n    const overNode = event.overNode;\r\n    if (!overNode) { return; }\r\n    const rowNeedsToMove = movingNode !== overNode;\r\n    if (rowNeedsToMove) {\r\n      const movingData: Field = movingNode.data;\r\n      const overData: Field = overNode.data;\r\n      const newFields = [...this.fields$.value];\r\n      const fromIndex = newFields.indexOf(movingData);\r\n      const toIndex = newFields.indexOf(overData);\r\n      this.moveInArray(newFields, fromIndex, toIndex);\r\n      this.fields$.next(newFields);\r\n      this.gridApi.clearFocusedCell();\r\n    }\r\n  }\r\n\r\n  private moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n  }\r\n\r\n  onSortChanged(params: SortChangedEvent) {\r\n    const sortModel = this.gridApi.getSortModel();\r\n    this.sortApplied = sortModel.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(params: FilterChangedEvent) {\r\n    const filterModel = this.gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  private suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = true;\r\n      this.gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = false;\r\n      this.gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.router.navigate([`add/${this.contentTypeStaticName}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private nameCellRenderer(params: ICellRendererParams) {\r\n    const currentField: Field = params.data;\r\n    const empties: string[] = [InputTypeConstants.EmptyDefault, InputTypeConstants.EmptyEnd];\r\n    if (empties.includes(currentField.InputType)) {\r\n      return params.value;\r\n    }\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields$.value) {\r\n      if (field.InputType === InputTypeConstants.EmptyDefault) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (field.InputType === InputTypeConstants.EmptyEnd) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === currentField.StaticName) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  private inputTypeValueGetter(params: ValueGetterParams) {\r\n    const field: Field = params.data;\r\n    const inputType = field.InputType.substring(field.InputType.indexOf('-') + 1);\r\n    return inputType;\r\n  }\r\n\r\n  private fetchFields(callback?: () => void) {\r\n    if (this.contentType$.value == null) {\r\n      const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName).pipe(share());\r\n      const fields$ = contentType$.pipe(mergeMap(contentType => this.contentTypesFieldsService.getFields(contentType)));\r\n      forkJoin([contentType$, fields$]).subscribe(([contentType, fields]) => {\r\n        this.contentType$.next(contentType);\r\n        this.fields$.next(fields);\r\n        if (callback != null) { callback(); }\r\n      });\r\n    } else {\r\n      this.contentTypesFieldsService.getFields(this.contentType$.value).subscribe(fields => {\r\n        this.fields$.next(fields);\r\n        if (callback != null) { callback(); }\r\n      });\r\n    }\r\n  }\r\n\r\n  private editFieldMetadata(params: CellClickedEvent) {\r\n    const field: Field = params.data;\r\n    const form: EditForm = {\r\n      items: [\r\n        this.createItemDefinition(field, 'All'),\r\n        this.createItemDefinition(field, field.Type),\r\n        this.createItemDefinition(field, field.InputType),\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private createItemDefinition(field: Field, metadataType: string): AddItem | EditItem {\r\n    return field.Metadata[metadataType] != null\r\n      ? { EntityId: field.Metadata[metadataType].Id } // if defined, return the entity-number to edit\r\n      : {\r\n        ContentTypeName: '@' + metadataType, // otherwise the content type for new-assignment\r\n        For: {\r\n          Target: eavConstants.metadata.attribute.target,\r\n          Number: field.Id,\r\n        },\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n  private setTitle(params: CellClickedEvent) {\r\n    const field: Field = params.data;\r\n    this.snackBar.open('Setting title...');\r\n    this.contentTypesFieldsService.setTitle(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private changeInputType(params: CellClickedEvent) {\r\n    const field: Field = params.data;\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/inputType`], { relativeTo: this.route });\r\n  }\r\n\r\n  private rename(field: Field) {\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/name`], { relativeTo: this.route });\r\n  }\r\n\r\n  private delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.contentTypesFieldsService.delete(field, this.contentType$.value).subscribe(res => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private openPermissions(field: Field) {\r\n    this.router.navigate([GoToPermissions.goAttribute(field.Id)], { relativeTo: this.route });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchFields();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ (contentType$ | async)?.Name }} Fields</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"fields$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (rowDragEnter)=\"onRowDragEnter($event)\" (rowDragEnd)=\"onRowDragEnd($event)\"\r\n      (rowDragMove)=\"onRowDragMove($event)\" (gridReady)=\"onGridReady($event)\" (sortChanged)=\"onSortChanged($event)\"\r\n      (filterChanged)=\"onFilterChanged($event)\" [ngClass]=\"{\r\n        'grid-sorted': sortApplied,\r\n        'grid-filtered': filterApplied\r\n      }\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\"></div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add fields\" (click)=\"add()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n"],"sourceRoot":"webpack:///"}