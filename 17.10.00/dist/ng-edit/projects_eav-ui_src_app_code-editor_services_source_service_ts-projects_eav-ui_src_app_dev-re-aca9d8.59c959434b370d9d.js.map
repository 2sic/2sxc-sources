{"version":3,"file":"projects_eav-ui_src_app_code-editor_services_source_service_ts-projects_eav-ui_src_app_dev-re-aca9d8.59c959434b370d9d.js","mappings":"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","names":["appFilesAsset","SourceService","constructor","http","context","dnnContext","this","get","viewKey","global","urlItems","$2sxc","apiUrl","params","appId","templateIdOrPath","pipe","map","view","Type","toLocaleLowerCase","Extension","save","post","getAll","mask","Files","forEach","file","Shared","getWebApis","files","isShared","isCompiled","splitIndex","path","lastIndexOf","fileExtIndex","folder","substring","name","endpointPath","edition","getWebApiDetails","apiPath","zoneId","getPredefinedTemplates","purpose","type","getPreview","templateKey","create","test","find","i","EntityId","toString","IsShared","Path","templateId","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","wxM","factory","ɵfac","devRestDialog","initContext","panelSize","panelClass","getComponent","_asyncToGenerator","DevRestEntryComponent","__webpack_require__","e","then","bind","routes","component","DialogEntryComponent","data","dialog","title","children","GoToDevRest","paramQuery","DevRestQueryComponent","GoToPermissions","route","paramApiPath","DevRestApiComponent","DevRestRoutingModule","core","a4G","s3X","RouterModule","forChild","DevRestModule","nextId","BADGE_CONTENT_CLASS","MatBadge","color","_color","value","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","hidden","disabled","inputs","booleanAttribute","features","MatBadgeModule","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/code-editor/services/source.service.ts","./projects/eav-ui/src/app/dev-rest/dev-rest-dialog.config.ts","./projects/eav-ui/src/app/dev-rest/dev-rest-routing.module.ts","./projects/eav-ui/src/app/dev-rest/dev-rest.module.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { WebApi, WebApiDetails } from '../../app-administration/models';\r\nimport { ViewOrFileIdentifier } from '../../shared/models/edit-form.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { FileAsset } from '../models/file-asset.model';\r\nimport { PredefinedTemplatesResponse } from '../models/predefined-template.model';\r\nimport { Preview } from '../models/preview.models';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\nconst appFilesAll = 'admin/AppFiles/AppFiles';\r\nconst appFilesAsset = 'admin/AppFiles/asset';\r\nconst appFilesCreate = 'admin/AppFiles/create';\r\nconst apiExplorerInspect = 'admin/ApiExplorer/inspect';\r\nconst apiExplorerAppApiFiles = 'admin/ApiExplorer/AppApiFiles';\r\nconst appFilesPredefinedTemplates = 'admin/AppFiles/GetTemplates';\r\nconst appFilesPreview = 'admin/AppFiles/preview';\r\n\r\n@Injectable()\r\nexport class SourceService {\r\n\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  /** ViewKey is templateId or path */\r\n  get(viewKey: string, global: boolean, urlItems: ViewOrFileIdentifier[]): Observable<SourceView> {\r\n    return this.http.get<SourceView>(this.dnnContext.$2sxc.http.apiUrl(appFilesAsset), {\r\n      params: {\r\n        appId: this.context.appId,\r\n        global,\r\n        ...this.templateIdOrPath(viewKey, global, urlItems),\r\n      },\r\n    }).pipe(\r\n      map(view => {\r\n        if (view.Type.toLocaleLowerCase() === 'auto') {\r\n          switch (view.Extension.toLocaleLowerCase()) {\r\n            case '.cs':\r\n            case '.cshtml':\r\n              view.Type = 'Razor';\r\n              break;\r\n            case '.html':\r\n            case '.css':\r\n            case '.js':\r\n              view.Type = 'Token';\r\n              break;\r\n          }\r\n        }\r\n        return view;\r\n      })\r\n    );\r\n  }\r\n\r\n  /** ViewKey is templateId or path */\r\n  save(viewKey: string, global: boolean, view: SourceView, urlItems: ViewOrFileIdentifier[]): Observable<boolean> {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(appFilesAsset), view, {\r\n      params: {\r\n        appId: this.context.appId,\r\n        global,\r\n        ...this.templateIdOrPath(viewKey, global, urlItems),\r\n      },\r\n    });\r\n  }\r\n\r\n  getAll(mask?: string): Observable<FileAsset[]> {\r\n    return this.http.get<{ Files: FileAsset[] }>(this.dnnContext.$2sxc.http.apiUrl(appFilesAll), {\r\n      params: {\r\n        appId: this.context.appId,\r\n        ...(mask && { mask }),\r\n      },\r\n    }).pipe(\r\n      map(({ Files }) => {\r\n        Files.forEach(file => {\r\n          file.Shared ??= false;\r\n        });\r\n        return Files;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getWebApis(): Observable<WebApi[]> {\r\n    return this.http.get<{ files: WebApi[] }>(this.dnnContext.$2sxc.http.apiUrl(apiExplorerAppApiFiles), {\r\n      params: {\r\n        appId: this.context.appId,\r\n      },\r\n    }).pipe(\r\n      map(({ files }) => {\r\n        files.forEach(file => {\r\n          file.isShared ??= false;\r\n          file.isCompiled ??= false;\r\n        });\r\n        return files;\r\n      }),\r\n    ).pipe(\r\n      map(files => {\r\n        const webApis: WebApi[] = files.map(file => {\r\n          const splitIndex = file.path.lastIndexOf('/');\r\n          const fileExtIndex = file.path.lastIndexOf('.');\r\n          const folder = file.path.substring(0, splitIndex);\r\n          const name = file.path.substring(splitIndex + 1, fileExtIndex);\r\n          const webApi: WebApi = { path: file.path, folder, name, isShared: file.isShared, endpointPath: file.endpointPath, isCompiled: file.isCompiled, edition: file.edition };\r\n          return webApi;\r\n        });\r\n        return webApis;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getWebApiDetails(apiPath: string): Observable<WebApiDetails> {\r\n    return this.http.get<WebApiDetails>(this.dnnContext.$2sxc.http.apiUrl(apiExplorerInspect), {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId, path: apiPath },\r\n    });\r\n  }\r\n\r\n  getPredefinedTemplates(purpose?: 'Template' | 'Search' | 'Api', type?: 'Token' | 'Razor'): Observable<PredefinedTemplatesResponse> {\r\n    return this.http.get<PredefinedTemplatesResponse>(this.dnnContext.$2sxc.http.apiUrl(appFilesPredefinedTemplates), {\r\n      params: {\r\n        ...(purpose && { purpose }),\r\n        ...(type && { type }),\r\n      },\r\n    });\r\n  }\r\n\r\n  getPreview(path: string, global: boolean, templateKey: string): Observable<Preview> {\r\n    return this.http.get<Preview>(this.dnnContext.$2sxc.http.apiUrl(appFilesPreview), {\r\n      params: {\r\n        appId: this.context.appId,\r\n        path,\r\n        templateKey,\r\n        global,\r\n      },\r\n    });\r\n  }\r\n\r\n  create(path: string, global: boolean, templateKey: string): Observable<boolean> {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(appFilesCreate), {}, {\r\n      params: {\r\n        appId: this.context.appId,\r\n        global,\r\n        purpose: 'auto',\r\n        path,\r\n        templateKey,\r\n      },\r\n    });\r\n  }\r\n\r\n  private templateIdOrPath(viewKey: string, global: boolean, urlItems: ViewOrFileIdentifier[]) {\r\n    if (/^[0-9]*$/g.test(viewKey)) {\r\n      const path = urlItems.find(i => i.EntityId?.toString() === viewKey && i.IsShared === global)?.Path;\r\n      return {\r\n        templateId: viewKey,\r\n        ...(path != null && { path }),\r\n      };\r\n    } else {\r\n      return { path: viewKey };\r\n    }\r\n  }\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const devRestDialog: DialogConfig = {\r\n  name: 'DEV_REST_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { DevRestEntryComponent } = await import('./entry/entry.component');\r\n    return DevRestEntryComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { DevRestApiComponent } from './api/api.component';\r\nimport { devRestDialog } from './dev-rest-dialog.config';\r\nimport { GoToDevRest } from './go-to-dev-rest';\r\nimport { DevRestQueryComponent } from './query/query.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: devRestDialog, title: 'REST API' }, children: [\r\n      // 2dm 2024-03-19 should not be used any more, as now a primary route in /app\r\n      // {\r\n      //   path: `data/:${GoToDevRest.paramTypeName}`, component: DevRestDataComponent, children: [\r\n      //     GoToPermissions.route,\r\n      //   ]\r\n      // },\r\n      /* This route is used in Visual Query to open REST as Dialog */\r\n      {\r\n        path: `query/:${GoToDevRest.paramQuery}`, component: DevRestQueryComponent, children: [\r\n          GoToPermissions.route,\r\n        ]\r\n      },\r\n      { path: `custom/:${GoToDevRest.paramApiPath}`, component: DevRestApiComponent },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DevRestRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\r\nimport { MAT_SELECT_CONFIG } from '@angular/material/select';\r\nimport { DevRestRoutingModule } from './dev-rest-routing.module';\r\n@NgModule({\r\n    imports: [\r\n      // TODO:: Remove routing module from imports (Standalone)\r\n      DevRestRoutingModule\r\n    ],\r\n    providers: [\r\n      // @2dg, no impact of style since angular 16+\r\n        // { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { subscriptSizing: 'dynamic' } },\r\n\r\n        // @2dg, dev-rest not use Icon in a select\r\n        // { provide: MAT_SELECT_CONFIG, useValue: { hideSingleSelectionIndicator: true } }\r\n    ],\r\n})\r\nexport class DevRestModule { }\r\n","import * as i0 from '@angular/core';\nimport { inject, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.4\", type: MatBadge, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[4]}