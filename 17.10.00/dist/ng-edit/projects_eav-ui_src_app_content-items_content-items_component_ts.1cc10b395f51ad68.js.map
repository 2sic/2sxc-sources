{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts.1cc10b395f51ad68.js","mappings":"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","names":["AppDialogConfigService","ServiceBase","constructor","http","context","globalConfigService","featuresService","super","EavLogger","this","dialogSettings$","log","add","svcId","loadFromService","ngOnDestroy","destroy","getCurrent$","appId","getShared$","getSitePrimaryApp$","pipe","map","dc","Context","Site","PrimaryApp","getGlobalPrimaryApp$","System","getDialogSettings","shareReplay","refCount","reqBy","get","params","toString","dlgSettings","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","static","t","i0","i1","i2","i3","i4","_angular_core__WEBPACK_IMPORTED_MODULE_8__","wxM","factory","ɵfac","ExportAppPartsService","dnnContext","getContentInfo","scope","$2sxc","apiUrl","webApiAppPartsRoot","appid","zoneId","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ExportAppService","getAppInfo","webApiAppRoot","exportApp","includeContentGroups","resetAppGuid","exportForVersionControl","withFiles","withPortalFiles","ImportAppPartsService","importAppParts","file","formData","FormData","append","post","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","contentType","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","delete","_angular_core__WEBPACK_IMPORTED_MODULE_6__","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","import","export","getPolymorphism","getUsage","guid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","EntityFilterComponent","idFilterString","idFilter","agInit","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","data","node","getValue","field","some","value","includes","items","headerName","idFltr","itm","getModel","filterType","setModel","model","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","el","parseInt","isNaN","filterChanged","filterChangedCallback","core","In1","selectors","viewQuery","rf","ctx","$event","_r3","ctx_r2","deleteItem","ctx_r1","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","refresh","clone","onClone","onExport","onDelete","decls","vars","consts","template","ContentItemsActionsComponent_ng_template_12_Template","_r0","ctx_r0","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","openMetadata","_c0","metadataCount","metadata","metadataTooltip","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","onOpenMetadata","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","metadataKeyValidator","form","control","keyType","controls","testValue","eavConstants","keyTypes","number","test","patternWholeNumber","hasCurly","bracket","substring","guidRegex","patternGuid","option_r22","targetType","label","vm_r1","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_14_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Conditional_3_Template","targetTypeOptions","unknownTargetType","targetTypeHint","option_r30","contentType_r36","StaticName","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_27_For_5_Template","contentTypes","scopeOption_r43","name","CreateMetadataDialogComponent_Conditional_0_Conditional_28_For_5_Template","scopeOptions","ctx_r11","dropdownInsertValue","item_r55","Guid","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_1_Template","guidedKey","contentType_r65","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_ng_container_0_Template","_r15","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_contFlowTmp","ctx_r12","entity","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_1_Template","ctx_r13","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_1_Template","ctx_r14","_r81","ctx_r80","toggleGuidedKey","ctx_r82","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_15_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_16_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_For_25_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_26_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_27_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_40_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_43_Template","_r85","ctx_r84","toggleGuidedMode","ctx_r86","closeDialog","ctx_r87","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","key","valid","CreateMetadataDialogComponent","BaseSubsinkComponent","dialogRef","contentItemsService","contentTypesService","hostClass","ngOnInit","Object","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","scopes","default","subscription","scopeForContentTypes","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","contentTypeStaticName","formValues$","GeneralHelpers","objectsEqual","combineLatest","foundTargetType","find","arraysEqual","updatedForm","isAppMetadata","app","keys","disableControl","viewModel$","hint","complete","result","close","event","checked","target","retrieveContentTypes","getScopes","hostVars","hostBindings","CreateMetadataDialogComponent_Conditional_0_Template","CreateMetadataDialogComponent_contFlowTmp","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","_r6","ctx_r5","debugFilter","_r8","ctx_r7","ContentItemsComponent_Conditional_0_Conditional_9_Template","ctx_r9","onGridReady","ctx_r10","filesDropped","exportContent","importContent","importItem","createMetadata","ContentItemsComponent_Conditional_0_Conditional_34_Template","ctx_r15","editItem","Name","ContentItemsComponent_Conditional_0_contFlowTmp","Properties","ListInstructions","gridOptions","debugEnabled","ContentItemsComponent","BaseComponent","router","route","entitiesService","contentExportService","snackBar","dialog","viewContainerRef","changeDetectorRef","contentType$","Subject","items$","undefined","defaultGridOptions","gridApi$","snapshot","paramMap","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosedShallow","getDebugEnabled$","retrieveContentType","getColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","tryParse","v","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","consoleLogDev","setFilterModel","GoToMetadata","getUrlEntity","_Title","navigate","relativeTo","formUrl","convertFormToUrl","ContentTypeName","EntityId","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","files","importFile","lastIndexOf","toLocaleLowerCase","state","autoFocus","width","afterClosed","itemFor","Number","string","String","markForCheck","warn","duration","headerClass","sortable","cellClass","ReadOnly","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","_RepositoryId","flex","minWidth","onCellClicked","headerTooltip","_Used","_Uses","pinned","Type","DataTypeConstants","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","DuplicateEntity","exportEntity","err","dismiss","ExceptionMessage","rawValue","i5","i6","i7","i8","features","ContentItemsComponent_Conditional_0_Template","ContentItemsComponent_contFlowTmp","ImportAppService","importApp","changedName","retryOnDuplicate","MessageType","FileUploadMessageTypes","Warning","folderName","Text","of","_angular_core__WEBPACK_IMPORTED_MODULE_4__","events","NavigationEnd","firstChild","pairwise","hadChild","hasChild","_angular_core__WEBPACK_IMPORTED_MODULE_7__","Sc5","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FieldHintComponent_Case_1_ng_container_1_Template","FieldHintComponent_Case_2_ng_container_1_Template","FieldHintComponent","isError","isShort","toggleIsShort","inputs","ngContentSelectors","_c1","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","FieldHintComponent_contFlowTmp","align","tooltip","copy","copyToClipboard","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","valueCache","defaultColDef","newRowsAction","tooltipShowDelay","tooltipHideDelay","suppressMovableColumns","ClickStopPropagationDirective","onClick","stopPropagation","ToggleDebugDirective","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","str","document","createElement","setAttribute","style","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/components/base-component/base.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.html","./projects/eav-ui/src/app/shared/constants/default-grid-options.constants.ts","./projects/eav-ui/src/app/shared/constants/dropdown-insert-value.constant.ts","./projects/eav-ui/src/app/shared/constants/guid.constants.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { ServiceBase } from '../../shared/services/service-base';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { DialogContextSiteApp } from '../../shared/models/dialog-context.models';\r\n\r\nconst logThis = false;\r\n\r\nconst webApiSettings = 'admin/dialog/settings';\r\n\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService extends ServiceBase implements OnDestroy {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    // private dnnContext: DnnContext,\r\n    private globalConfigService: GlobalConfigService,\r\n    featuresService: FeaturesService,\r\n  ) {\r\n    super(new EavLogger('AppDialogConfigService', logThis));\r\n    this.log.add('using context #', this.context.log.svcId);\r\n    featuresService.loadFromService(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.destroy();\r\n    // TODO: probably should add an onDestroy and ensure all subscriptions in dialogSettings$ are killed\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getCurrent$(): Observable<DialogSettings> {\r\n    const appId = this.context.appId;\r\n    this.log.add('getCurrent$', 'appId', appId);\r\n    return this.getShared$(appId);\r\n  }\r\n\r\n    // new 2dg\r\n    getSitePrimaryApp$(): Observable<DialogContextSiteApp> {\r\n      return this.getCurrent$().pipe(map(dc => dc?.Context.Site.PrimaryApp));\r\n    }\r\n  \r\n    getGlobalPrimaryApp$(): Observable<DialogContextSiteApp> {\r\n      return this.getCurrent$().pipe(map(dc => dc?.Context.System.PrimaryApp));\r\n    }\r\n  \r\n\r\n  getShared$(appId: number): Observable<DialogSettings> {\r\n    this.log.add('getShared$', 'appId', appId);\r\n    // if (!this.dialogSettings$[appIdToUse])\r\n    this.dialogSettings$[appId] ??= this.getDialogSettings(appId, 'getShared$').pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n  }\r\n\r\n  getDialogSettings(appId?: number, reqBy?: string): Observable<DialogSettings> {\r\n    this.log.add('getDialogSettings', 'appId', appId, 'reqBy', reqBy);\r\n    return this.http.get<DialogSettings>(webApiSettings, {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dlgSettings => {\r\n        dlgSettings.Context.Language.List = dlgSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dlgSettings;\r\n      }),\r\n      tap(dlgSettings => {\r\n        this.globalConfigService.allowDebug(dlgSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { webApiEntityList } from '../../edit/shared/services';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\" eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"deleteItem()\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ICellRendererParams & ContentItemsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsParams): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone(): void {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export(): void {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem(): void {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n    <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple\r\n      [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n      (click)=\"openMetadata()\">\r\n      <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty'\r\n        : 'local_offer' }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ICellRendererParams & ContentItemsStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusParams): void {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata(): void {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This is a special operation to add an item which is metadata for another item,\r\n        see <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <form [formGroup]=\"form\">\r\n        <!-- Target Type -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Target</mat-label>\r\n          @if (vm.guidedMode) {\r\n            <mat-select formControlName=\"targetType\" required>\r\n              @for (option of targetTypeOptions; track option) {\r\n                <mat-option [value]=\"option.targetType\">\r\n                  {{ option.label }}\r\n                </mat-option>\r\n              }\r\n              @if (vm.unknownTargetType) {\r\n                <mat-option [value]=\"vm.formValues.targetType\">\r\n                  {{ vm.formValues.targetType }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          }\r\n          @if (!vm.guidedMode) {\r\n            <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required>\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType) {\r\n          <app-field-hint\r\n            [isError]=\"false\">\r\n            Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're\r\n            doing\r\n          </app-field-hint>\r\n        }\r\n        @if (vm.targetTypeHint) {\r\n          <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.required) {\r\n          <app-field-hint\r\n            [isError]=\"true\">\r\n            This field is required\r\n          </app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern) {\r\n          <app-field-hint\r\n            [isError]=\"true\">\r\n            Must be a whole number\r\n          </app-field-hint>\r\n        }\r\n        <!-- Key Type -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Key type</mat-label>\r\n          <mat-select formControlName=\"keyType\" required>\r\n            @for (option of vm.keyTypeOptions; track option) {\r\n              <mat-option [value]=\"option\">\r\n                {{ option }}\r\n              </mat-option>\r\n            }\r\n          </mat-select>\r\n        </mat-form-field>\r\n        @if (form.controls['keyType'].touched && form.controls['keyType'].errors?.required) {\r\n          <app-field-hint\r\n            [isError]=\"true\">\r\n            This field is required\r\n          </app-field-hint>\r\n        }\r\n        <!-- Content Type for Content Items -->\r\n        @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n          <mat-form-field color=\"accent\" class=\"eav-form-field\"\r\n            >\r\n            <mat-label>Content Type</mat-label>\r\n            <mat-select formControlName=\"contentTypeForContentItems\"\r\n              [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n              @for (contentType of vm.contentTypes; track contentType) {\r\n                <mat-option [value]=\"contentType.StaticName\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <!-- Scope for Content Types -->\r\n        @if (vm.guidedMode && (vm.formValues.targetType === eavConstants.metadata.entity.targetType || vm.formValues.targetType === eavConstants.metadata.contentType.targetType)) {\r\n          <mat-form-field color=\"accent\" class=\"eav-form-field\"\r\n            >\r\n            <mat-label>Scope</mat-label>\r\n            <mat-select formControlName=\"scopeForContentTypes\"\r\n              [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n              @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n                <mat-option [value]=\"scopeOption.value\">\r\n                  {{ scopeOption.name }}\r\n                </mat-option>\r\n              }\r\n              <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n        <!-- Key -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Key</mat-label>\r\n          @if (vm.guidedMode) {\r\n            @switch (vm.formValues.targetType) {\r\n              @case (eavConstants.metadata.entity.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required\r\n                    [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                    @for (item of vm.contentItems; track item) {\r\n                      <mat-option [value]=\"item.Guid\">\r\n                        {{ item.Title }} ({{ item.Id }})\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                }\r\n                @if (!vm.guidedKey) {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required>\r\n                }\r\n              }\r\n              @case (eavConstants.metadata.contentType.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required\r\n                    [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                    @for (contentType of vm.contentTypes; track contentType) {\r\n                      <mat-option [value]=\"contentType.StaticName\">\r\n                        {{ contentType.Label }}\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                }\r\n                @if (!vm.guidedKey) {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required>\r\n                }\r\n              }\r\n              @default {\r\n                <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n              }\r\n            }\r\n          } @else {\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\"\r\n                formControlName=\"key\" required>\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\"\r\n                formControlName=\"key\" required>\r\n            }\r\n          }\r\n          <ng-template #defaultKeyInput>\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\"\r\n                formControlName=\"key\" required>\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\"\r\n                formControlName=\"key\" required>\r\n            }\r\n          </ng-template>\r\n          @if (vm.guidedMode && vm.guidedKeyExists) {\r\n            <div matTextSuffix class=\"eav-selection-suffix\">\r\n              <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\" [ngClass]=\"{ 'active': vm.guidedKey }\" tippy=\"Pick existing value\"\r\n                (click)=\"toggleGuidedKey(true)\">\r\n                <mat-icon class=\"eav-icon\">search</mat-icon>\r\n              </button>\r\n              <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\" [ngClass]=\"{ 'active': !vm.guidedKey }\" tippy=\"Manual entry\"\r\n                (click)=\"toggleGuidedKey(false)\">\r\n                <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n              </button>\r\n            </div>\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\">\r\n            This field is required\r\n          </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber) {\r\n          <app-field-hint\r\n            [isError]=\"true\">\r\n            Must be a whole number\r\n          </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternGuid) {\r\n          <app-field-hint\r\n            [isError]=\"true\">\r\n            Must be a valid GUID\r\n          </app-field-hint>\r\n        }\r\n      </form>\r\n    </div>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <mat-slide-toggle color=\"accent\"\r\n        [tippy]=\"vm.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n        [checked]=\"vm.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n        {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div>\r\n        <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n          Confirm\r\n        </button>\r\n      </div>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith, Subscription } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss']\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscription.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscription.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscription.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!GeneralHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value)) {\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n        }\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType)) {\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n        }\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId) {\r\n          updatedForm.key = this.context.appId;\r\n        }\r\n\r\n        if (Object.keys(updatedForm).length) {\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        GeneralHelpers.disableControl(this.form.controls['keyType'], keyTypeDisabled);\r\n        GeneralHelpers.disableControl(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","@if (viewModel$ | async; as vm) {\r\n  <div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">\r\n        {{ vm.contentType.Label || vm.contentType.Name }} Data\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"eav-dialog-content nav-component-wrapper\">\r\n      <router-outlet></router-outlet>\r\n      @if (vm.contentType?.Properties?.ListInstructions; as listInstructions) {\r\n        <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n      }\r\n      <div class=\"grid-wrapper\">\r\n        <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.items\" [gridOptions]=\"gridOptions\"\r\n          (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n          (filesDropped)=\"filesDropped($event)\">\r\n        </ag-grid-angular>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <div class=\"eav-dialog-actions-div\">\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n          <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n          <span>Data</span>\r\n        </button>\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" (click)=\"importContent()\">\r\n          <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n          <span>Data</span>\r\n        </button>\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" (click)=\"importItem()\">\r\n          <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n          <span>Item</span>\r\n        </button>\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n          <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n          <span>Create Metadata</span>\r\n        </button>\r\n        @if (vm.debugEnabled) {\r\n          <button mat-button class=\"eav-button__with-icon\" color=\"accent\" tippy=\"Print filter to console\" (click)=\"debugFilter()\">\r\n            <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n            <span>Filter</span>\r\n          </button>\r\n        }\r\n      </div>\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, filter, map, Observable, pairwise, startWith, Subject, Subscription, take } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { GlobalConfigService } from '../edit/shared/store/ngrx-data';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BaseComponent } from '../shared/components/base-component/base.component';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogDev } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './content-items-status/content-items-status.models';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n})\r\nexport class ContentItemsComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  contentType$ = new Subject<ContentType>();\r\n  items$ = new BehaviorSubject<ContentItem[]>(undefined);\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  viewModel$: Observable<ContentItemsViewModel>;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { \r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.subscription.add(this.refreshOnChildClosedShallow().subscribe(() => { this.fetchItems(); }));\r\n\r\n    this.viewModel$ = combineLatest([\r\n      this.contentType$, this.items$, this.globalConfigService.getDebugEnabled$()\r\n    ]).pipe(\r\n      map(([contentType, items, debugEnabled]) => ({ contentType, items, debugEnabled }))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogDev('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.contentTypeStaticName,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        const contentItem: ContentItem = rowNode.data;\r\n        ids.push(contentItem.Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: itemFor.target ?? itemFor.targetType.toString(),\r\n            TargetType: itemFor.targetType,\r\n            ...(itemFor.keyType === eavConstants.keyTypes.guid && { Guid: itemFor.key }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.number && { Number: parseInt(itemFor.key, 10) }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.string && { String: itemFor.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID',\r\n        field: 'Id',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        sortable: true,\r\n        filter: 'agNumberColumnFilter',\r\n        cellClass: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return `id-action no-padding no-outline ${contentItem._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' ');\r\n        },\r\n        valueGetter: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return contentItem.Id;\r\n        },\r\n        cellRenderer: IdFieldComponent,\r\n        cellRendererParams: (() => {\r\n          const params: IdFieldParams<ContentItem> = {\r\n            tooltipGetter: (item) => `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`,\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsStatusParams = {\r\n            onOpenMetadata: (item) => this.openMetadata(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'primary-action highlight'.split(' '),\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        onCellClicked: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          this.editItem(contentItem);\r\n        },\r\n        valueGetter: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return contentItem._Title;\r\n        },\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          return `${item._Used} / ${item._Uses}`;\r\n        },\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        width: 122,\r\n        pinned: 'right',\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            onClone: (item) => this.clone(item),\r\n            onExport: (item) => this.export(item),\r\n            onDelete: (item) => this.delete(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n\r\ninterface ContentItemsViewModel {\r\n  contentType: ContentType;\r\n  items: ContentItem[];\r\n  debugEnabled: boolean;\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { GeneralHelpers } from '../edit/shared/helpers';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) { return; }\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = GeneralHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { BaseSubsinkComponent } from '../base-subsink-component/base-subsink.component';\r\nimport { EavLogger } from '../../logging/eav-logger';\r\n\r\n@Directive()\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport class BaseComponent extends BaseSubsinkComponent implements OnDestroy {\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    public log?: EavLogger\r\n  ) {\r\n    super();\r\n    this.log ??= new EavLogger('BaseComponent', false);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  // TODO @2dg not longer in use after refactoring SideNav with Routing\r\n  // protected refreshOnChildClosedDeep() {\r\n  //   return this.router.events.pipe(\r\n  //     filter(event => event instanceof NavigationEnd),\r\n  //     startWith(!!this.route.snapshot.firstChild.firstChild),\r\n  //     map(() => !!this.route.snapshot.firstChild.firstChild),\r\n  //     pairwise(),\r\n  //     filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n  //   )\r\n  // }\r\n\r\n  protected refreshOnChildClosedShallow() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n    )\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy(): void {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>","import { GridOptions } from '@ag-grid-community/core';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  tooltipHideDelay: 100000,\r\n  suppressMovableColumns: true,\r\n} as const;\r\n","export const dropdownInsertValue = 'DROPDOWN_INSERT_VALUE' as const;\r\n","/**\r\n * Do not reuse regex:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#using_test_on_a_regex_with_the_global_flag\r\n */\r\nexport function guidRegex(): RegExp {\r\n  return /^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$/i;\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}