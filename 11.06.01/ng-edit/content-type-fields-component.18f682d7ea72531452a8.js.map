{"version":3,"sources":["./src/app/content-type-fields/ag-grid-components/content-type-fields-title/content-type-fields-title.component.ts","./src/app/content-type-fields/ag-grid-components/content-type-fields-title/content-type-fields-title.component.html","./src/app/content-type-fields/ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component.ts","./src/app/content-type-fields/ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component.html","./src/app/content-type-fields/ag-grid-components/content-type-fields-actions/content-type-fields-actions.component.html","./src/app/content-type-fields/ag-grid-components/content-type-fields-actions/content-type-fields-actions.component.ts","./src/app/content-type-fields/ag-grid-components/content-type-fields-type/content-type-fields-type.component.ts","./src/app/content-type-fields/ag-grid-components/content-type-fields-type/content-type-fields-type.component.html","./src/app/content-type-fields/content-type-fields.component.ts","./src/app/content-type-fields/content-type-fields.component.html"],"names":["agInit","params","this","icon","value","refresh","ContentTypeFieldsTitleComponent","ContentTypeFieldsInputTypeComponent","field","data","showPermissions","InputType","StringWysiwyg","Type","Hyperlink","rename","onRename","delete","onDelete","openPermissions","onOpenPermissions","ContentTypeFieldsActionsComponent","ContentTypeFieldsTypeComponent","dialogRef","route","router","contentTypesService","contentTypesFieldsService","snackBar","contentType$","BehaviorSubject","fields$","modules","gridOptions","getRowClass","EmptyDefault","frameworkComponents","contentTypeFieldsTitleComponent","contentTypeFieldsTypeComponent","contentTypeFieldsInputTypeComponent","contentTypeFieldsActionsComponent","columnDefs","rowDrag","width","cellClass","headerName","cellRenderer","onCellClicked","setTitle","bind","flex","minWidth","sortable","filter","editFieldMetadata","headerClass","changeInputType","valueGetter","inputTypeValueGetter","cellRendererParams","sortApplied","filterApplied","rowDragSuppressed","contentTypeStaticName","snapshot","paramMap","get","subscription","Subscription","ngOnInit","fetchFields","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","onGridReady","gridApi","api","onRowDragEnter","event","setEnableCellTextSelection","onRowDragEnd","setSuppressRowDrag","idArray","map","Id","reOrder","subscribe","res","onRowDragMove","movingNode","node","overNode","movingData","overData","newFields","fromIndex","indexOf","toIndex","moveInArray","next","clearFocusedCell","arr","element","splice","onSortChanged","sortModel","getSortModel","length","suppressRowDrag","onFilterChanged","filterModel","getFilterModel","fieldsFiltered","Object","keys","shouldSuppress","closeDialog","close","add","navigate","relativeTo","substring","callback","retrieveContentType","pipe","share","mergeMap","contentType","getFields","forkJoin","fields","form","items","createItemDefinition","formUrl","metadataType","Metadata","EntityId","ContentTypeName","For","Target","metadata","attribute","target","Number","Prefill","Name","StaticName","open","duration","newName","prompt","trim","replace","match","confirm","type","keyTypes","number","events","startWith","firstChild","pairwise","ContentTypeFieldsComponent"],"mappings":"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","file":"content-type-fields-component.18f682d7ea72531452a8.js","sourcesContent":["import { Component, ChangeDetectionStrategy } from '@angular/core';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/all-modules';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-title',\r\n  templateUrl: './content-type-fields-title.component.html',\r\n  styleUrls: ['./content-type-fields-title.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const value: boolean = params.value;\r\n    this.icon = value ? 'star' : 'star_border';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Use as title field\">\r\n    <mat-icon>{{ icon }}</mat-icon>\r\n  </div>\r\n</div>\r\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/all-modules';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-input-type',\r\n  templateUrl: './content-type-fields-input-type.component.html',\r\n  styleUrls: ['./content-type-fields-input-type.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div matRipple class=\"input-component highlight\">\r\n  <div class=\"text\">{{ value }}</div>\r\n  <div class=\"like-button\">\r\n    <mat-icon>arrow_drop_down</mat-icon>\r\n  </div>\r\n</div>\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Rename\" (click)=\"rename()\">\r\n    <mat-icon>settings</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Delete\" *ngIf=\"!field.IsTitle\" (click)=\"delete()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"field.IsTitle\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Permissions\" *ngIf=\"showPermissions\"\r\n    (click)=\"openPermissions()\">\r\n    <mat-icon>person</mat-icon>\r\n  </div>\r\n</div>\r\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\n\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\nimport { Field } from '../../models/field.model';\r\nimport { InputTypeConstants } from '../../constants/input-type.constants';\r\nimport { DataTypeConstants } from '../../constants/data-type.constants';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-actions',\r\n  templateUrl: './content-type-fields-actions.component.html',\r\n  styleUrls: ['./content-type-fields-actions.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentTypeFieldsActionsComponent implements ICellRendererAngularComp {\r\n  field: Field;\r\n  showPermissions: boolean;\r\n  private params: ContentTypeFieldsActionsParams;\r\n\r\n  agInit(params: ContentTypeFieldsActionsParams) {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    this.showPermissions = this.field.InputType === InputTypeConstants.StringWysiwyg || this.field.Type === DataTypeConstants.Hyperlink;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  rename() {\r\n    this.params.onRename(this.field);\r\n  }\r\n\r\n  delete() {\r\n    this.params.onDelete(this.field);\r\n  }\r\n\r\n  openPermissions() {\r\n    this.params.onOpenPermissions(this.field);\r\n  }\r\n}\r\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/all-modules';\r\n\r\nimport { calculateTypeIcon } from '../../content-type-fields.helpers';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-type',\r\n  templateUrl: './content-type-fields-type.component.html',\r\n  styleUrls: ['./content-type-fields-type.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [matTooltip]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","import { Component, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\r\nimport { ActivatedRoute, Router, NavigationEnd } from '@angular/router';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Subscription, BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { filter, startWith, map, pairwise, mergeMap, share } from 'rxjs/operators';\r\n// tslint:disable-next-line:max-line-length\r\nimport { GridReadyEvent, AllCommunityModules, GridOptions, RowDragEvent, GridApi, CellClickedEvent, SortChangedEvent, FilterChangedEvent, ValueGetterParams } from '@ag-grid-community/all-modules';\r\n\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { Field } from './models/field.model';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { EditForm, AddItem, EditItem } from '../shared/models/edit-form.model';\r\nimport { fieldNamePattern, fieldNameError } from '../app-administration/constants/field-name.patterns';\r\nimport { ContentTypeFieldsTitleComponent } from './ag-grid-components/content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsInputTypeComponent } from './ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsActionsComponent } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsTypeComponent } from './ag-grid-components/content-type-fields-type/content-type-fields-type.component';\r\nimport { InputTypeConstants } from './constants/input-type.constants';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  styleUrls: ['./content-type-fields.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentTypeFieldsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n  fields$ = new BehaviorSubject<Field[]>(null);\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    getRowClass(params: any) {\r\n      const field: Field = params.data;\r\n      return field.InputType === InputTypeConstants.EmptyDefault ? 'group-row' : '';\r\n    },\r\n    frameworkComponents: {\r\n      contentTypeFieldsTitleComponent: ContentTypeFieldsTitleComponent,\r\n      contentTypeFieldsTypeComponent: ContentTypeFieldsTypeComponent,\r\n      contentTypeFieldsInputTypeComponent: ContentTypeFieldsInputTypeComponent,\r\n      contentTypeFieldsActionsComponent: ContentTypeFieldsActionsComponent,\r\n    },\r\n    columnDefs: [\r\n      { rowDrag: true, width: 18, cellClass: 'no-select no-padding no-outline' },\r\n      {\r\n        headerName: 'Title', field: 'IsTitle', width: 42, cellClass: 'secondary-action no-padding no-outline',\r\n        cellRenderer: 'contentTypeFieldsTitleComponent', onCellClicked: this.setTitle.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Name', field: 'StaticName', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: this.editFieldMetadata.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Type', field: 'Type', width: 70, headerClass: 'dense', cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter', cellRenderer: 'contentTypeFieldsTypeComponent',\r\n      },\r\n      {\r\n        headerName: 'Input', field: 'InputType', width: 160, cellClass: 'secondary-action no-padding',\r\n        sortable: true, filter: 'agTextColumnFilter', cellRenderer: 'contentTypeFieldsInputTypeComponent',\r\n        onCellClicked: this.changeInputType.bind(this), valueGetter: this.inputTypeValueGetter,\r\n      },\r\n      {\r\n        width: 120, cellClass: 'secondary-action no-padding', cellRenderer: 'contentTypeFieldsActionsComponent',\r\n        cellRendererParams: {\r\n          onRename: this.rename.bind(this),\r\n          onDelete: this.delete.bind(this),\r\n          onOpenPermissions: this.openPermissions.bind(this),\r\n        } as ContentTypeFieldsActionsParams,\r\n      },\r\n      {\r\n        headerName: 'Label', field: 'Metadata.All.Name', flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter',\r\n      },\r\n      {\r\n        headerName: 'Notes', field: 'Metadata.All.Notes', flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter',\r\n      },\r\n    ],\r\n  };\r\n\r\n  private gridApi: GridApi;\r\n  private sortApplied = false;\r\n  private filterApplied = false;\r\n  private rowDragSuppressed = false;\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchFields();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.fields$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n  }\r\n\r\n  onRowDragEnter(event: RowDragEvent) {\r\n    this.gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(event: RowDragEvent) {\r\n    this.gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields$.value.map(field => field.Id);\r\n    this.contentTypesFieldsService.reOrder(idArray, this.contentType$.value).subscribe(res => {\r\n      this.fetchFields(() => {\r\n        this.gridApi.setEnableCellTextSelection(true);\r\n        this.gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const movingNode = event.node;\r\n    const overNode = event.overNode;\r\n    if (!overNode) { return; }\r\n    const rowNeedsToMove = movingNode !== overNode;\r\n    if (rowNeedsToMove) {\r\n      const movingData: Field = movingNode.data;\r\n      const overData: Field = overNode.data;\r\n      const newFields = [...this.fields$.value];\r\n      const fromIndex = newFields.indexOf(movingData);\r\n      const toIndex = newFields.indexOf(overData);\r\n      this.moveInArray(newFields, fromIndex, toIndex);\r\n      this.fields$.next(newFields);\r\n      this.gridApi.clearFocusedCell();\r\n    }\r\n  }\r\n\r\n  private moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n  }\r\n\r\n  onSortChanged(params: SortChangedEvent) {\r\n    const sortModel = this.gridApi.getSortModel();\r\n    this.sortApplied = sortModel.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(params: FilterChangedEvent) {\r\n    const filterModel = this.gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  private suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = true;\r\n      this.gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = false;\r\n      this.gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  add() {\r\n    this.router.navigate([`add/${this.contentTypeStaticName}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private inputTypeValueGetter(params: ValueGetterParams) {\r\n    const field: Field = params.data;\r\n    const inputType = field.InputType.substring(field.InputType.indexOf('-') + 1);\r\n    return inputType;\r\n  }\r\n\r\n  private fetchFields(callback?: () => void) {\r\n    if (this.contentType$.value == null) {\r\n      const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName).pipe(share());\r\n      const fields$ = contentType$.pipe(mergeMap(contentType => this.contentTypesFieldsService.getFields(contentType)));\r\n      forkJoin([contentType$, fields$]).subscribe(([contentType, fields]) => {\r\n        this.contentType$.next(contentType);\r\n        this.fields$.next(fields);\r\n        if (callback != null) { callback(); }\r\n      });\r\n    } else {\r\n      this.contentTypesFieldsService.getFields(this.contentType$.value).subscribe(fields => {\r\n        this.fields$.next(fields);\r\n        if (callback != null) { callback(); }\r\n      });\r\n    }\r\n  }\r\n\r\n  private editFieldMetadata(params: CellClickedEvent) {\r\n    const field: Field = params.data;\r\n    const form: EditForm = {\r\n      items: [\r\n        this.createItemDefinition(field, 'All'),\r\n        this.createItemDefinition(field, field.Type),\r\n        this.createItemDefinition(field, field.InputType),\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private createItemDefinition(field: Field, metadataType: string): AddItem | EditItem {\r\n    return field.Metadata[metadataType] != null\r\n      ? { EntityId: field.Metadata[metadataType].Id } // if defined, return the entity-number to edit\r\n      : {\r\n        ContentTypeName: '@' + metadataType, // otherwise the content type for new-assignment\r\n        For: {\r\n          Target: eavConstants.metadata.attribute.target,\r\n          Number: field.Id,\r\n        },\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n  private setTitle(params: CellClickedEvent) {\r\n    const field: Field = params.data;\r\n    this.snackBar.open('Setting title...');\r\n    this.contentTypesFieldsService.setTitle(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private changeInputType(params: CellClickedEvent) {\r\n    const field: Field = params.data;\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private rename(field: Field) {\r\n    let newName = prompt(`What new name would you like for '${field.StaticName}' (${field.Id})?`, field.StaticName);\r\n    if (newName === null) { return; }\r\n    newName = newName.trim().replace(/\\s\\s+/g, ' '); // remove multiple white spaces and tabs\r\n    if (newName === field.StaticName) { return; }\r\n    while (!newName.match(fieldNamePattern)) {\r\n      newName = prompt(`What new name would you like for '${field.StaticName}' (${field.Id})?\\n${fieldNameError}`, newName);\r\n      if (newName === null) { return; }\r\n      newName = newName.trim().replace(/\\s\\s+/g, ' '); // remove multiple white spaces and tabs\r\n      if (newName === field.StaticName) { return; }\r\n    }\r\n    this.snackBar.open('Saving...');\r\n    this.contentTypesFieldsService.rename(field, this.contentType$.value, newName).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.contentTypesFieldsService.delete(field, this.contentType$.value).subscribe(res => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private openPermissions(field: Field) {\r\n    this.router.navigate(\r\n      [`permissions/${eavConstants.metadata.attribute.type}/${eavConstants.keyTypes.number}/${field.Id}`],\r\n      { relativeTo: this.route }\r\n    );\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchFields();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ (contentType$ | async)?.Name }} Fields</div>\r\n      <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"fields$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (rowDragEnter)=\"onRowDragEnter($event)\" (rowDragEnd)=\"onRowDragEnd($event)\"\r\n      (rowDragMove)=\"onRowDragMove($event)\" (gridReady)=\"onGridReady($event)\" (sortChanged)=\"onSortChanged($event)\"\r\n      (filterChanged)=\"onFilterChanged($event)\">\r\n    </ag-grid-angular>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" matTooltip=\"Add fields\" (click)=\"add()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n"],"sourceRoot":"webpack:///"}