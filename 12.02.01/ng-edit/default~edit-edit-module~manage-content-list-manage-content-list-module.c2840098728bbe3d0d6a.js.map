{"version":3,"sources":["./node_modules/rxjs/_esm2015/internal/observable/interval.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js","./projects/ng-dialogs/src/app/shared/components/dialog-entry/dialog-entry.component.ts"],"names":["dispatch","state","subscriber","counter","period","next","this","schedule","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","toggleVisibility","styles","position","top","opacity","left","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","_document","_viewportRuler","positions","Map","clear","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","event","target","cachedPosition","get","newTop","newLeft","scrolledParentNode","documentElement","viewportScrollPosition","topDifference","leftDifference","node","contains","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","_a","passiveEventListenerOptions","passive","activeEventListenerOptions","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","find","handle","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","_previewRect","_preview","preventDefault","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","run","distance","_getDragDistance","delta","_pointerDirectionDelta","Math","abs","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","_startDragSequence","_pointerUp","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","newValue","_toggleNativeDragInteractions","_placeholder","getPlaceholderElement","getRootElement","handles","disabledHandles","add","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","_ownerSVGElement","ownerSVGElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","transform","delete","direction","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","body","appendChild","replaceChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","pointerMove","pointerUp","scroll","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","getTransformTransitionDurationInMs","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","_cachedShadowRoot","round","min","max","removeChild","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_draggables","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","scheduler","isNumeric","Observable","interval","animationFrame","pipe","takeUntil","_scrollNode","scrollStep","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","index","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","splice","parentElement","_shouldEnterAsFirstChild","reference","unshift","push","_cacheItemPositions","_cacheParentPositions","_reset","items","previousItems","_withDropContainer","filter","every","_cacheItems","slice","orientation","_scrollableElements","findIndex","reverse","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getElementScrollDirections","getViewportSize","window","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","elementToMeasure","getVisibleElement","sort","a","b","_stopReceiving","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","nativeElement","activeSiblings","_sortFromLastPointerPosition","draggedItems","_startReceiving","predicate","amount","scrollBy","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","instance","ɵfac","t","ɵprov","factory","token","providedIn","DEFAULT_CONFIG","DragDrop","CDK_DRAG_PARENT","CDK_DROP_LIST_GROUP","CDK_DRAG_CONFIG","_uniqueIdCounter","CDK_DROP_LIST","CdkDropList","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_group","_destroyed","connectedTo","id","_unsortedItems","_dropListRef","createDropList","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","_items","_syncItemsWithRef","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","dispose","ref","startWith","withDirection","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","ɵdir","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","inputs","outputs","exportAs","features","provide","useValue","useExisting","CDK_DRAG_HANDLE","CDK_DRAG_PLACEHOLDER","CDK_DRAG_PREVIEW","CdkDrag","_viewContainerRef","_selfHandle","_parentDrag","observer","subscription","movedEvent","createDrag","addItem","_syncInputs","reset","getFreeDragPosition","onStable","take","_updateRootElement","changes","tap","childHandleElements","rootElementSelector","withHandles","switchMap","merge","_stateChanges","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","getClosestMatchingAncestor","boundary","dir","templateRef","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","_b","contentQueries","dirIndex","_t","first","currentElement","matches","msMatchesSelector","DragDropModule","ɵmod","ɵinj","providers","imports","dialog","viewContainerRef","router","route","changeDetectorRef","navigation","getCurrentNavigation","dialogData","extras","ngOnInit","dialogConfig","snapshot","Error","getComponent","component","initContext","init","dialogRef","open","autoFocus","backdropClass","closeOnNavigation","panelClass","panelSize","showScrollbar","afterClosed","navRes","navigateUrl","pathFromRoot","$2sxc","totalPopup","close","error","navigate","url","relativeTo","ngOnDestroy","DialogEntryComponent"],"mappings":"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","file":"default~edit-edit-module~manage-content-list-manage-content-list-module.c2840098728bbe3d0d6a.js","sourcesContent":["import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n//# sourceMappingURL=interval.js.map","import { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @docs-private\n */\nfunction toggleVisibility(element, enable) {\n    const styles = element.style;\n    styles.position = enable ? '' : 'fixed';\n    styles.top = styles.opacity = enable ? '' : '0';\n    styles.left = enable ? '' : '-999em';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = event.target;\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = this._parentDragRef = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const preview = this._preview = this._createPreviewElement();\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document, shadowRoot).appendChild(preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp(x, minX, maxX);\n            y = clamp(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = event.target;\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef, shadowRoot) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return shadowRoot ||\n        documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp$1(fromIndex, array.length - 1);\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -scrollStep);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, scrollStep);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const index = findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return (index === -1 || !this.sortPredicate(index, item, this)) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) && items.every(item => {\n            // Note that we have to add an exception to the `enterPredicate` for items that started off\n            // in this drop list. The drag ref has logic that allows an item to return to its initial\n            // container, if it has left the initial container and none of the connected containers\n            // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n            return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n        })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /** Emits when the viewport has been scrolled while the user is dragging an item. */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` +\n            `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate =\n            (index, drag, drop) => {\n                return this.sortPredicate(index, drag.data, drop.data);\n            };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: ScrollDispatcher },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    sortPredicate: [{ type: Input, args: ['cdkDropListSortPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    autoScrollStep: [{ type: Input, args: ['cdkDropListAutoScrollStep',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[attr.id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], sortPredicate: [{\n            type: Input,\n            args: ['cdkDropListSortPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }], autoScrollStep: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollStep']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                // Usually handles are only allowed to be a descendant of the drag element, but if\n                // the consumer defined a different drag root, we should allow the drag element\n                // itself to be a handle too.\n                if (this._selfHandle && this.rootElementSelector) {\n                    childHandleElements.push(this.element);\n                }\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            var _a, _b;\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                // `classList` needs to be null checked, because IE doesn't have it on some elements.\n                if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(((_b = CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag._dragInstances = [];\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] },\n    { type: CdkDrag, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [CDK_DRAG_PARENT,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': DRAG_HOST_CLASS,\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }, { type: CdkDrag, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = function DragDropModule_Factory(t) { return new (t || DragDropModule)(); };\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n//# sourceMappingURL=drag-drop.js.map","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { NavigateFormResult } from '../../../../../../edit/shared/models';\r\nimport { consoleLogAngular } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { Dictionary } from '../../models/dictionary.model';\r\nimport { EavWindow } from '../../models/eav-window.model';\r\nimport { Context } from '../../services/context';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: Dictionary;\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogAngular('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      if (dialogConfig.initContext) {\r\n        this.context.init(this.route);\r\n      }\r\n\r\n      this.dialogRef = this.dialog.open(component, {\r\n        autoFocus: false,\r\n        backdropClass: 'dialog-backdrop',\r\n        closeOnNavigation: false,\r\n        data: this.dialogData,\r\n        panelClass: [\r\n          'dialog-panel',\r\n          `dialog-panel-${dialogConfig.panelSize}`,\r\n          dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n          ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n        ],\r\n        // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n        // Real top margin is overwritten in css e.g. dialog-panel-large\r\n        position: { top: '0' },\r\n        viewContainerRef: this.viewContainerRef,\r\n      });\r\n\r\n      this.dialogRef.afterClosed().pipe(take(1)).subscribe((data: any) => {\r\n        consoleLogAngular('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n        const navRes = data as NavigateFormResult;\r\n        if (navRes?.navigateUrl != null) {\r\n          this.router.navigate([navRes.navigateUrl]);\r\n          return;\r\n        }\r\n\r\n        if (this.route.pathFromRoot.length <= 3) {\r\n          try {\r\n            window.parent.$2sxc.totalPopup.close();\r\n          } catch (error) { }\r\n          return;\r\n        }\r\n\r\n        if (this.route.snapshot.url.length > 0) {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n        } else {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n        }\r\n      });\r\n\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}