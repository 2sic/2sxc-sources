{"version":3,"sources":["C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/clientSideRowModel.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/clientSideNodeManager.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/gridSerializer.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/filterStage.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/sortStage.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/flattenStage.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/sortService.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/filterService.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/immutableService.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModelModule.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModel/infiniteBlock.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModel/infiniteCache.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModel/infiniteRowModel.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModelModule.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/csvCreator.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/downloader.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/xmlFactory.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/zipContainer.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/all-modules/dist/es6/main.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@ag-grid-community/csv-export/dist/es6/csvExportModule.js","./src/app/shared/constants/default-grid-options.constants.ts"],"names":["extendStatics","RecursionType","ClientSideNodeManager","rootNode","gridOptionsWrapper","context","eventService","columnController","gridApi","columnApi","selectionController","this","nextId","allNodesMap","group","level","id","ROOT_NODE_ID","allLeafChildren","childrenAfterGroup","childrenAfterSort","childrenAfterFilter","postConstruct","prototype","suppressParentsInRowNodes","isSuppressParentsInRowNodes","isRowMasterFunc","getIsRowMasterFunc","doingTreeData","isTreeData","doingMasterDetail","isMasterDetail","getCopyOfNodesMap","_","cloneObject","getRowNode","setRowData","rowData","childrenMapped","updateHasChildren","recursiveFunction","TOP_LEVEL","updateRowData","rowDataTran","rowNodeOrder","rowNodeTransaction","remove","update","add","nodesToUnselect","executeAdd","executeRemove","executeUpdate","updateSelection","sortRowNodesByOrder","selectionChanged","length","forEach","rowNode","setSelected","updateGroupsFromChildrenSelections","dispatchEvent","type","Events","EVENT_SELECTION_CHANGED","api","_this","addIndex","missingOrEmpty","reverse","item","newRowNode","addRowNode","push","rowIdsRemoved","lookupRowNode","isSelected","clearRowTop","filter","updateData","selectable","setMasterForRow","data","index","newNode","createNode","exists","insertIntoArray","rowNodeIdFunc","getRowNodeIdFunc","console","error","find","parent","rowNodes","dataItem","node","warn","RowNode","createBean","setDataAndId","toString","setExpanded","setMaster","expanded","rowGroupColumns","getRowGroupColumns","master","isExpanded","expandByDefault","getGroupDefaultExpanded","setLeafChildren","childAfterGroup","leafChild","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","create","__decorate","decorators","target","key","desc","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","RowType","ClientSideRowModel","_super","apply","init","refreshEverythingFunc","refreshModel","bind","step","Constants","STEP_EVERYTHING","refreshEverythingAfterColsChangedFunc","afterColumnsChanged","keepRenderedRows","animate","addManagedListener","EVENT_COLUMN_EVERYTHING_CHANGED","EVENT_COLUMN_ROW_GROUP_CHANGED","EVENT_COLUMN_VALUE_CHANGED","onValueChanged","EVENT_COLUMN_PIVOT_CHANGED","STEP_PIVOT","EVENT_ROW_GROUP_OPENED","onRowGroupOpened","EVENT_FILTER_CHANGED","onFilterChanged","EVENT_SORT_CHANGED","onSortChanged","EVENT_COLUMN_PIVOT_MODE_CHANGED","refreshMapListener","STEP_MAP","GridOptionsWrapper","PROP_GROUP_REMOVE_SINGLE_CHILDREN","PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN","nodeManager","getContext","start","getRowData","ensureRowHeightsValid","startPixel","endPixel","startLimitIndex","endLimitIndex","atLeastOneChange","res","rowAtStartPixel","getRowIndexAtPixel","rowAtEndPixel","firstRow","Math","max","lastRow","min","rowIndex","getRow","rowHeightEstimated","rowHeight","getRowHeightForNode","setRowHeight","height","setRowTops","nextRowTop","rowsToDisplay","allowEstimate","getDomLayout","DOM_LAYOUT_NORMAL","missing","estimated","setRowTop","setRowIndex","resetRowTops","changedPath","hasChildren","isActive","sibling","detailNode","ensureRowsAtPixel","pixel","increment","indexAtPixelNow","removeFromArray","idx","keepEditingRows","highlightRowAtPixel","rowNodeAtPixelNow","highlight","getHighlightPosition","lastHighlightedRow","setHighlighted","rowTop","getLastHighlightedRowNode","isLastRowFound","getRowCount","getTopLevelRowCount","getTopLevelRowDisplayedIndex","topLevelIndex","isGroupHideOpenParents","getRowBounds","isAnimateRows","event","afterDataChange","STEP_FILTER","STEP_SORT","getType","ROW_MODEL_TYPE_CLIENT_SIDE","isPivotActive","STEP_AGGREGATE","createChangePath","rowNodeTransactions","noTransactions","ChangedPath","setInactive","params","constants","doRowGrouping","groupState","doFilter","doPivot","doAggregate","doSort","doRowsToDisplay","EVENT_MODEL_UPDATED","newData","newPage","$scope","window","setTimeout","$apply","isEmpty","rowsMissing","isReady","isRowsToRender","getNodesInRangeForSelection","firstInRange","lastInRange","firstRowHit","lastRowHit","result","groupsSelectChildren","isGroupSelectsChildren","forEachNodeAfterFilterAndSort","lookingForLastRow","inRange","childOfLastRow","isParentOfNode","setDatasource","datasource","getTopLevelNodes","getRootNode","isRowPresent","indexOf","pixelToMatch","bottomPointer","topPointer","last","midPointer","floor","currentRowNode","isRowInPixel","getCurrentPageHeight","forEachLeafNode","callback","forEachNode","recursivelyWalkNodesAndCallback","Normal","forEachNodeAfterFilter","AfterFilter","AfterFilterAndSort","forEachPivotNode","PivotNodes","nodes","recursionType","nodeChildren","leafGroup","aggregationStage","execute","expandOrCollapseAll","expand","usingTreeData","recursiveExpandOrCollapse","EVENT_EXPAND_COLLAPSE_ALL","source","sortStage","groupStage","removeGroupsFromSelection","restoreGroupState","traverseNodesWithKey","filterStage","pivotStage","getGroupState","isRememberGroupStateWhenNewData","EVENT_ROW_DATA_CHANGED","batchUpdateRowData","rowDataTransaction","applyAsyncTransactionsTimeout","rowDataTransactionBatch","waitMillis","getAsyncTransactionWaitMillis","executeBatchUpdateRowData","flushAsyncTransactions","clearTimeout","valueCache","onDataChanged","callbackFuncsBound","rowNodeTrans","tranItem","rowNodeTran","commonUpdateRowData","func","undefined","EVENT_ROW_DATA_UPDATED","flattenStage","onRowHeightChanged","resetRowHeights","Autowired","Optional","PostConstruct","Bean","BeanStub","FilterStage","filterService","selectableService","updateSelectableAfterFiltering","SortStage","sortOptions","sortController","getSortForRowController","sortActive","deltaSort","isDeltaSort","dirtyLeafNodes","calculateDirtyNodes","valueColumns","getValueColumns","noAggregations","sortService","sort","dirtyNodes","addNodesFunc","tran","FlattenStage","value","skipLeafNodes","isPivotMode","showRootNode","recursivelyAddToRowsToDisplay","isGroupIncludeTotalFooter","ensureFooterNodeExists","addRowNodeToRowsToDisplay","rowsToFlatten","uiLevel","hideOpenParents","groupRemoveSingleChildren","isGroupRemoveSingleChildren","groupRemoveLowestSingleChildren","isGroupRemoveLowestSingleChildren","isParent","isRemovedSingleChildrenGroup","isRemovedLowestSingleChildrenGroup","excludedParent","isGroupIncludeFooter","createDetailNode","isGroupMultiAutoColumn","setUiLevel","groupNode","footerNode","keys","footer","oldRowTop","masterNode","detail","SortService","postSortFunc","getPostSortFunc","forEachChangedNodeDepthFirst","pullDownGroupDataForHideOpenParents","sortedRowNodes","doDeltaSort","doFullSort","map","sorted","slice","updateChildIndexes","updateGroupDataForHiddenOpenParents","mapNodeToSortedNode","compareRowNodes","pos","currentPos","cleanNodes","passesDirtyNodesCheck","passesChangedPathCheck","canSkip","cleanNodesMapped","sortedRowNode","changedNodes","mergeSortedArrays","arr1","arr2","j","compareResult","sortedNodeA","sortedNodeB","nodeA","nodeB","len","comparatorResult","sortOption","isInverted","inverter","valueA","getValue","column","valueB","getColDef","comparator","defaultComparator","isAccentedSort","valueService","listToSort","child","lastChild","setFirstChild","setLastChild","setChildIndex","executeFromRootNode","clearOperation","childRowNode","getGroupDisplayColumns","groupDisplayCol","showRowGroup","rowGroupColumn","getPrimaryColumn","setGroupValue","getId","parentToStealFrom","getFirstChildOfFirstChild","FilterService","filterActive","filterManager","isAnyFilterPresent","filterNodes","filterCallback","includeChildNodes","childNode","passBecauseChildren","passBecauseDataPasses","doesRowPassFilter","setAllChildrenCount","doingTreeDataFiltering","treeDataDepthFirstFilter_1","alreadyFoundInParent","foundInParent","setAllChildrenCountTreeData","allChildrenCount","setAllChildrenCountGridGrouping","isExcludeChildrenWhenTreeDataFiltering","ImmutableService","rowModel","clientSideRowModel","createTransactionForRowData","transaction","existingNodesMap","orderMap","isSuppressMaintainUnsortedOrder","existingNode","iterateObject","ClientSideRowModelModule","moduleName","ModuleNames","beans","rowModels","clientSide","InfiniteBlock","pageNumber","call","cacheParams","getDisplayIndexStart","getBlockNumber","blockSize","getDisplayIndexEnd","createBlankRowNode","setIndexAndTopOnRowNode","setRowNode","rowRenderer","getNodeIdPrefix","displayIndex","getRowUsingLocalIndex","loadFromDatasource","startRow","getStartRow","endRow","getEndRow","successCallback","pageLoaded","getVersion","failCallback","pageLoadFailed","sortModel","filterModel","getRows","RowNodeBlock","InfiniteCache","setBeans","loggerFactory","logger","moveItemsDown","block","moveFromIndex","moveCount","indexOfLastRowToMove","currentRowIndex","nodeForThisIndex","setBlankRowNode","setDirty","insertItems","indexToInsert","items","pageStartRow","pageEndRow","newRowNodes","setNewData","insertItemsAtIndex","newNodes","forEachBlockInReverseOrder","isMaxRowFound","hack_setVirtualRowCount","getVirtualRowCount","onCacheUpdated","dontCreatePage","blockId","getBlock","createBlock","blockNumber","newBlock","postCreateBlock","refreshCache","forEachBlockInOrder","checkBlockToLoad","decorator","Qualifier","RowNodeCache","InfiniteRowModel","isRowModelInfinite","getRowHeightAsNumber","addEventListeners","addDestroyFunc","destroyCache","getDatasource","destroyDatasource","destroyBean","datasourceChanged","infiniteCache","onColumnEverything","reset","isSortModelDifferent","jsonEquals","getSortModel","ROW_MODEL_TYPE_INFINITE","getRowNodesInRange","resetCache","createModelUpdatedEvent","maxConcurrentRequests","getMaxConcurrentDatasourceRequests","blockLoadDebounceMillis","getBlockLoadDebounceMillis","rowNodeBlockLoader","RowNodeBlockLoader","getFilterModel","overflowSize","getCacheOverflowSize","initialRowCount","getInfiniteInitialRowCount","maxBlocksInCache","getMaxBlocksInCache","getCacheBlockSize","lastAccessedSequence","NumberSequence","addEventListener","EVENT_CACHE_UPDATED","forEachNodeDeep","rowIndexForPixel","lastRowIndex","purgeCache","setVirtualRowCount","rowCount","maxRowFound","getBlockState","PreDestroy","InfiniteRowModelModule","BaseGridSerializingSession","config","groupColumns","processCellCallback","processHeaderCallback","processGroupHeaderCallback","processRowGroupCallback","prepare","columnsToExport","col","extractHeaderValue","getHeaderName","extractRowCellValue","valueForCell","groupIndex","rowGroupIndex","isGroupUseEntireRow","createValueForGroupNode","processCell","getApi","getColumnApi","getDisplayNameForColumn","join","GridSerializer","serialize","gridSerializingSession","rowSkipper","shouldRowBeSkipped","skipSingleChildrenGroup","skipLowestSingleChildrenGroup","rowModelNormal","onlySelectedNonStandardModel","onlySelected","existsAndNotEmpty","columnKeys","getGridColumns","allColumns","GROUP_AUTO_COLUMN_ID","concat","getAllPrimaryColumns","getAllDisplayedColumns","customHeader","addCustomContent","columnGroups","groupInstanceIdCreator","GroupInstanceIdCreator","displayedGroups","displayedGroupCreator","createDisplayedGroups","getGridBalancedTree","recursivelyAddHeaderGroups","skipHeader","gridRowIterator_1","onNewHeaderRow","onColumn","processRow","skipGroups","skipFooters","skipPinnedTop","rowPinned","skipPinnedBottom","rowAccumulator","onNewBodyRow","getCustomContentBelowRow","content","pinnedRowModel","forEachPinnedTopRow","onlySelectedAllPages","getSelectedNodes","forEachPinnedBottomRow","customFooter","parse","directChildrenHeaderGroups","columnGroupChild","getChildren","it","ColumnGroup","doAddHeaderHeader","gridRowIterator","onNewHeaderGroupingRow","columnIndex","name","columnGroup","getDisplayNameForColumnGroup","getLeafColumns","CsvSerializingSession","isFirstLine","columnSeparator","suppressQuotes","test","beginNewLine","replace","row","cell","putInQuotes","mergeAcross","appendEmptyCells","onNewHeaderGroupingRowColumn","header","span","count","onNewHeaderRowColumn","onNewBodyRowColumn","EXPORT_TYPE_CSV","stringValue","CsvCreator","downloader","gridSerializer","exportDataAsCsv","export","getDataAsCsv","getData","getMimeType","getDefaultFileName","getDefaultFileExtension","createSerializingSession","_a","isExportSuppressed","isSuppressCsvExport","BaseCreator","userParams","getMergedParamsAndData","mergedParams","fileName","download","packageFile","mergeDefaultParams","baseParams","getDefaultExportParams","assign","Blob","navigator","msSaveOrOpenBlob","Downloader","element","document","createElement","url_1","URL","createObjectURL","setAttribute","style","display","body","appendChild","MouseEvent","bubbles","cancelable","view","removeChild","revokeObjectURL","LINE_SEPARATOR","XmlFactory","createHeader","headerElement","version","encoding","standalone","headerStart","createXml","xmlElement","booleanTransformer","props","properties","prefixedAttributes","prefixedSet","returnAttributeIfPopulated","prefix","rawMap","children","textNode","xmlValue","crcTable","ZipContainer","folders","files","addFolder","path","created","Date","addFolders","paths","addFile","clearStream","getContent","mimeType","textOutput","buildFileStream","uInt8Output","buildUint8Array","fData","totalFiles","foData","lL","cL","_i","totalFiles_1","getHeader","fileHeader","folderHeader","buildFolderEnd","currentFile","offset","decToHex","utfPath","utf8_encode","isUTF8","time","convertTime","dt","convertDate","extraFields","uExtraFieldPath","getFromCrc32Table","tLen","cLen","lLen","uint8","Uint8Array","charCodeAt","crc","date","getHours","getMinutes","getSeconds","getFullYear","getMonth","getDate","AllCommunityModules","CsvExportModule","defaultGridOptions","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","defaultColDef","filterParams","newRowsAction","tooltipShowDelay"],"mappings":"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","file":"default~app-administration-app-administration-module~apps-management-nav-component~content-items-com~5fad1bc0.7f52eb45020555ad8441.js","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, ChangedPath, Constants as constants, Constants, Events, GridOptionsWrapper, Optional, PostConstruct, RowNode } from \"@ag-grid-community/core\";\nimport { ClientSideNodeManager } from \"./clientSideNodeManager\";\nvar RecursionType;\n(function (RecursionType) {\n    RecursionType[RecursionType[\"Normal\"] = 0] = \"Normal\";\n    RecursionType[RecursionType[\"AfterFilter\"] = 1] = \"AfterFilter\";\n    RecursionType[RecursionType[\"AfterFilterAndSort\"] = 2] = \"AfterFilterAndSort\";\n    RecursionType[RecursionType[\"PivotNodes\"] = 3] = \"PivotNodes\";\n})(RecursionType || (RecursionType = {}));\nvar ClientSideRowModel = /** @class */ (function (_super) {\n    __extends(ClientSideRowModel, _super);\n    function ClientSideRowModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ClientSideRowModel.prototype.init = function () {\n        var refreshEverythingFunc = this.refreshModel.bind(this, { step: Constants.STEP_EVERYTHING });\n        var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {\n            step: Constants.STEP_EVERYTHING,\n            afterColumnsChanged: true,\n            keepRenderedRows: true,\n            animate: true\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_EVERYTHING_CHANGED, refreshEverythingAfterColsChangedFunc);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: Constants.STEP_PIVOT }));\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);\n        var refreshMapListener = this.refreshModel.bind(this, {\n            step: Constants.STEP_MAP,\n            keepRenderedRows: true,\n            animate: true\n        });\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapListener);\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapListener);\n        this.rootNode = new RowNode();\n        this.nodeManager = new ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.getContext(), this.eventService, this.columnController, this.gridApi, this.columnApi, this.selectionController);\n        this.createBean(this.rootNode);\n    };\n    ClientSideRowModel.prototype.start = function () {\n        var rowData = this.gridOptionsWrapper.getRowData();\n        if (rowData) {\n            this.setRowData(rowData);\n        }\n    };\n    ClientSideRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n        var atLeastOneChange;\n        var res = false;\n        // we do this multiple times as changing the row heights can also change the first and last rows,\n        // so the first pass can make lots of rows smaller, which means the second pass we end up changing\n        // more rows.\n        do {\n            atLeastOneChange = false;\n            var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\n            var rowAtEndPixel = this.getRowIndexAtPixel(endPixel);\n            // keep check to current page if doing pagination\n            var firstRow = Math.max(rowAtStartPixel, startLimitIndex);\n            var lastRow = Math.min(rowAtEndPixel, endLimitIndex);\n            for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n                var rowNode = this.getRow(rowIndex);\n                if (rowNode.rowHeightEstimated) {\n                    var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);\n                    rowNode.setRowHeight(rowHeight.height);\n                    atLeastOneChange = true;\n                    res = true;\n                }\n            }\n            if (atLeastOneChange) {\n                this.setRowTops();\n            }\n        } while (atLeastOneChange);\n        return res;\n    };\n    ClientSideRowModel.prototype.setRowTops = function () {\n        var nextRowTop = 0;\n        for (var i = 0; i < this.rowsToDisplay.length; i++) {\n            // we don't estimate if doing fullHeight or autoHeight, as all rows get rendered all the time\n            // with these two layouts.\n            var allowEstimate = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;\n            var rowNode = this.rowsToDisplay[i];\n            if (_.missing(rowNode.rowHeight)) {\n                var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode, allowEstimate);\n                rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\n            }\n            rowNode.setRowTop(nextRowTop);\n            rowNode.setRowIndex(i);\n            nextRowTop += rowNode.rowHeight;\n        }\n    };\n    ClientSideRowModel.prototype.resetRowTops = function (rowNode, changedPath) {\n        rowNode.clearRowTop();\n        if (rowNode.hasChildren()) {\n            if (rowNode.childrenAfterGroup) {\n                // if a changedPath is active, it means we are here because of a transaction update or\n                // a change detection. neither of these impacts the open/closed state of groups. so if\n                // a group is not open this time, it was not open last time. so we know all closed groups\n                // already have their top positions cleared. so there is no need to traverse all the way\n                // when changedPath is active and the rowNode is not expanded.\n                var skipChildren = changedPath.isActive() && !rowNode.expanded;\n                if (!skipChildren) {\n                    for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                        this.resetRowTops(rowNode.childrenAfterGroup[i], changedPath);\n                    }\n                }\n            }\n            if (rowNode.sibling) {\n                rowNode.sibling.clearRowTop();\n            }\n        }\n        if (rowNode.detailNode) {\n            rowNode.detailNode.clearRowTop();\n        }\n    };\n    // returns false if row was moved, otherwise true\n    ClientSideRowModel.prototype.ensureRowsAtPixel = function (rowNodes, pixel, increment) {\n        var _this = this;\n        if (increment === void 0) { increment = 0; }\n        var indexAtPixelNow = this.getRowIndexAtPixel(pixel);\n        var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\n        if (rowNodeAtPixelNow === rowNodes[0]) {\n            return false;\n        }\n        rowNodes.forEach(function (rowNode) {\n            _.removeFromArray(_this.rootNode.allLeafChildren, rowNode);\n        });\n        rowNodes.forEach(function (rowNode, idx) {\n            _.insertIntoArray(_this.rootNode.allLeafChildren, rowNode, indexAtPixelNow + increment + idx);\n        });\n        this.refreshModel({\n            step: Constants.STEP_EVERYTHING,\n            keepRenderedRows: true,\n            animate: true,\n            keepEditingRows: true\n        });\n        return true;\n    };\n    ClientSideRowModel.prototype.highlightRowAtPixel = function (rowNode, pixel) {\n        var indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;\n        var rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;\n        if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {\n            if (this.lastHighlightedRow) {\n                this.lastHighlightedRow.setHighlighted(null);\n                this.lastHighlightedRow = null;\n            }\n            return;\n        }\n        var highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);\n        if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {\n            this.lastHighlightedRow.setHighlighted(null);\n            this.lastHighlightedRow = null;\n        }\n        rowNodeAtPixelNow.setHighlighted(highlight);\n        this.lastHighlightedRow = rowNodeAtPixelNow;\n    };\n    ClientSideRowModel.prototype.getHighlightPosition = function (pixel, rowNode) {\n        if (!rowNode) {\n            var index = this.getRowIndexAtPixel(pixel);\n            rowNode = this.getRow(index || 0);\n            if (!rowNode) {\n                return 'below';\n            }\n        }\n        var rowTop = rowNode.rowTop, rowHeight = rowNode.rowHeight;\n        return pixel - rowTop < rowHeight / 2 ? 'above' : 'below';\n    };\n    ClientSideRowModel.prototype.getLastHighlightedRowNode = function () {\n        return this.lastHighlightedRow;\n    };\n    ClientSideRowModel.prototype.isLastRowFound = function () {\n        return true;\n    };\n    ClientSideRowModel.prototype.getRowCount = function () {\n        if (this.rowsToDisplay) {\n            return this.rowsToDisplay.length;\n        }\n        return 0;\n    };\n    ClientSideRowModel.prototype.getTopLevelRowCount = function () {\n        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n        if (showingRootNode) {\n            return 1;\n        }\n        return this.rootNode.childrenAfterFilter ? this.rootNode.childrenAfterFilter.length : 0;\n    };\n    ClientSideRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n        if (showingRootNode) {\n            return topLevelIndex;\n        }\n        var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];\n        if (this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            // if hideOpenParents, and this row open, then this row is now displayed at this index, first child is\n            while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\n                rowNode = rowNode.childrenAfterSort[0];\n            }\n        }\n        return rowNode.rowIndex;\n    };\n    ClientSideRowModel.prototype.getRowBounds = function (index) {\n        if (_.missing(this.rowsToDisplay)) {\n            return null;\n        }\n        var rowNode = this.rowsToDisplay[index];\n        if (rowNode) {\n            return {\n                rowTop: rowNode.rowTop,\n                rowHeight: rowNode.rowHeight\n            };\n        }\n        return null;\n    };\n    ClientSideRowModel.prototype.onRowGroupOpened = function () {\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: Constants.STEP_MAP, keepRenderedRows: true, animate: animate });\n    };\n    ClientSideRowModel.prototype.onFilterChanged = function (event) {\n        if (event.afterDataChange) {\n            return;\n        }\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: Constants.STEP_FILTER, keepRenderedRows: true, animate: animate });\n    };\n    ClientSideRowModel.prototype.onSortChanged = function () {\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: Constants.STEP_SORT, keepRenderedRows: true, animate: animate, keepEditingRows: true });\n    };\n    ClientSideRowModel.prototype.getType = function () {\n        return Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n    };\n    ClientSideRowModel.prototype.onValueChanged = function () {\n        if (this.columnController.isPivotActive()) {\n            this.refreshModel({ step: Constants.STEP_PIVOT });\n        }\n        else {\n            this.refreshModel({ step: Constants.STEP_AGGREGATE });\n        }\n    };\n    ClientSideRowModel.prototype.createChangePath = function (rowNodeTransactions) {\n        // for updates, if the row is updated at all, then we re-calc all the values\n        // in that row. we could compare each value to each old value, however if we\n        // did this, we would be calling the valueService twice, once on the old value\n        // and once on the new value. so it's less valueGetter calls if we just assume\n        // each column is different. that way the changedPath is used so that only\n        // the impacted parent rows are recalculated, parents who's children have\n        // not changed are not impacted.\n        var noTransactions = _.missingOrEmpty(rowNodeTransactions);\n        var changedPath = new ChangedPath(false, this.rootNode);\n        if (noTransactions || this.gridOptionsWrapper.isTreeData()) {\n            changedPath.setInactive();\n        }\n        return changedPath;\n    };\n    ClientSideRowModel.prototype.refreshModel = function (params) {\n        // this goes through the pipeline of stages. what's in my head is similar\n        // to the diagram on this page:\n        // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html\n        // however we want to keep the results of each stage, hence we manually call\n        // each step rather than have them chain each other.\n        var _this = this;\n        // fallthrough in below switch is on purpose,\n        // eg if STEP_FILTER, then all steps below this\n        // step get done\n        // let start: number;\n        // console.log('======= start =======');\n        var changedPath = this.createChangePath(params.rowNodeTransactions);\n        switch (params.step) {\n            case constants.STEP_EVERYTHING:\n                // start = new Date().getTime();\n                this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, params.afterColumnsChanged);\n            // console.log('rowGrouping = ' + (new Date().getTime() - start));\n            case constants.STEP_FILTER:\n                // start = new Date().getTime();\n                this.doFilter(changedPath);\n            // console.log('filter = ' + (new Date().getTime() - start));\n            case constants.STEP_PIVOT:\n                this.doPivot(changedPath);\n            case constants.STEP_AGGREGATE: // depends on agg fields\n                // start = new Date().getTime();\n                this.doAggregate(changedPath);\n            // console.log('aggregation = ' + (new Date().getTime() - start));\n            case constants.STEP_SORT:\n                // start = new Date().getTime();\n                this.doSort(params.rowNodeTransactions, changedPath);\n            // console.log('sort = ' + (new Date().getTime() - start));\n            case constants.STEP_MAP:\n                // start = new Date().getTime();\n                this.doRowsToDisplay();\n            // console.log('rowsToDisplay = ' + (new Date().getTime() - start));\n        }\n        // set all row tops to null, then set row tops on all visible rows. if we don't\n        // do this, then the algorithm below only sets row tops, old row tops from old rows\n        // will still lie around\n        this.resetRowTops(this.rootNode, changedPath);\n        this.setRowTops();\n        var event = {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            animate: params.animate,\n            keepRenderedRows: params.keepRenderedRows,\n            newData: params.newData,\n            newPage: false\n        };\n        this.eventService.dispatchEvent(event);\n        if (this.$scope) {\n            window.setTimeout(function () {\n                _this.$scope.$apply();\n            }, 0);\n        }\n    };\n    ClientSideRowModel.prototype.isEmpty = function () {\n        var rowsMissing = _.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;\n        return _.missing(this.rootNode) || rowsMissing || !this.columnController.isReady();\n    };\n    ClientSideRowModel.prototype.isRowsToRender = function () {\n        return _.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;\n    };\n    ClientSideRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        // if lastSelectedNode is missing, we start at the first row\n        var firstRowHit = !lastInRange;\n        var lastRowHit = false;\n        var lastRow;\n        var result = [];\n        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        this.forEachNodeAfterFilterAndSort(function (rowNode) {\n            var lookingForLastRow = firstRowHit && !lastRowHit;\n            // check if we need to flip the select switch\n            if (!firstRowHit) {\n                if (rowNode === lastInRange || rowNode === firstInRange) {\n                    firstRowHit = true;\n                }\n            }\n            var skipThisGroupNode = rowNode.group && groupsSelectChildren;\n            if (!skipThisGroupNode) {\n                var inRange = firstRowHit && !lastRowHit;\n                var childOfLastRow = rowNode.isParentOfNode(lastRow);\n                if (inRange || childOfLastRow) {\n                    result.push(rowNode);\n                }\n            }\n            if (lookingForLastRow) {\n                if (rowNode === lastInRange || rowNode === firstInRange) {\n                    lastRowHit = true;\n                    if (rowNode === lastInRange) {\n                        lastRow = lastInRange;\n                    }\n                    else {\n                        lastRow = firstInRange;\n                    }\n                }\n            }\n        });\n        return result;\n    };\n    ClientSideRowModel.prototype.setDatasource = function (datasource) {\n        console.error('ag-Grid: should never call setDatasource on clientSideRowController');\n    };\n    ClientSideRowModel.prototype.getTopLevelNodes = function () {\n        return this.rootNode ? this.rootNode.childrenAfterGroup : null;\n    };\n    ClientSideRowModel.prototype.getRootNode = function () {\n        return this.rootNode;\n    };\n    ClientSideRowModel.prototype.getRow = function (index) {\n        return this.rowsToDisplay[index];\n    };\n    ClientSideRowModel.prototype.isRowPresent = function (rowNode) {\n        return this.rowsToDisplay.indexOf(rowNode) >= 0;\n    };\n    ClientSideRowModel.prototype.getRowIndexAtPixel = function (pixelToMatch) {\n        if (this.isEmpty()) {\n            return -1;\n        }\n        // do binary search of tree\n        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/\n        var bottomPointer = 0;\n        var topPointer = this.rowsToDisplay.length - 1;\n        // quick check, if the pixel is out of bounds, then return last row\n        if (pixelToMatch <= 0) {\n            // if pixel is less than or equal zero, it's always the first row\n            return 0;\n        }\n        var lastNode = _.last(this.rowsToDisplay);\n        if (lastNode.rowTop <= pixelToMatch) {\n            return this.rowsToDisplay.length - 1;\n        }\n        while (true) {\n            var midPointer = Math.floor((bottomPointer + topPointer) / 2);\n            var currentRowNode = this.rowsToDisplay[midPointer];\n            if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\n                return midPointer;\n            }\n            if (currentRowNode.rowTop < pixelToMatch) {\n                bottomPointer = midPointer + 1;\n            }\n            else if (currentRowNode.rowTop > pixelToMatch) {\n                topPointer = midPointer - 1;\n            }\n        }\n    };\n    ClientSideRowModel.prototype.isRowInPixel = function (rowNode, pixelToMatch) {\n        var topPixel = rowNode.rowTop;\n        var bottomPixel = rowNode.rowTop + rowNode.rowHeight;\n        var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;\n        return pixelInRow;\n    };\n    ClientSideRowModel.prototype.getCurrentPageHeight = function () {\n        if (this.rowsToDisplay && this.rowsToDisplay.length > 0) {\n            var lastRow = _.last(this.rowsToDisplay);\n            var lastPixel = lastRow.rowTop + lastRow.rowHeight;\n            return lastPixel;\n        }\n        return 0;\n    };\n    ClientSideRowModel.prototype.forEachLeafNode = function (callback) {\n        if (this.rootNode.allLeafChildren) {\n            this.rootNode.allLeafChildren.forEach(function (rowNode, index) { return callback(rowNode, index); });\n        }\n    };\n    ClientSideRowModel.prototype.forEachNode = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);\n    };\n    ClientSideRowModel.prototype.forEachNodeAfterFilter = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);\n    };\n    ClientSideRowModel.prototype.forEachNodeAfterFilterAndSort = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);\n    };\n    ClientSideRowModel.prototype.forEachPivotNode = function (callback) {\n        this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);\n    };\n    // iterates through each item in memory, and calls the callback function\n    // nodes - the rowNodes to traverse\n    // callback - the user provided callback\n    // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\n    // index - works similar to the index in forEach in javascript's array function\n    ClientSideRowModel.prototype.recursivelyWalkNodesAndCallback = function (nodes, callback, recursionType, index) {\n        if (!nodes) {\n            return index;\n        }\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            callback(node, index++);\n            // go to the next level if it is a group\n            if (node.hasChildren()) {\n                // depending on the recursion type, we pick a difference set of children\n                var nodeChildren = null;\n                switch (recursionType) {\n                    case RecursionType.Normal:\n                        nodeChildren = node.childrenAfterGroup;\n                        break;\n                    case RecursionType.AfterFilter:\n                        nodeChildren = node.childrenAfterFilter;\n                        break;\n                    case RecursionType.AfterFilterAndSort:\n                        nodeChildren = node.childrenAfterSort;\n                        break;\n                    case RecursionType.PivotNodes:\n                        // for pivot, we don't go below leafGroup levels\n                        nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\n                        break;\n                }\n                if (nodeChildren) {\n                    index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);\n                }\n            }\n        }\n        return index;\n    };\n    // it's possible to recompute the aggregate without doing the other parts\n    // + gridApi.recomputeAggregates()\n    ClientSideRowModel.prototype.doAggregate = function (changedPath) {\n        if (this.aggregationStage) {\n            this.aggregationStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n        }\n    };\n    // + gridApi.expandAll()\n    // + gridApi.collapseAll()\n    ClientSideRowModel.prototype.expandOrCollapseAll = function (expand) {\n        var usingTreeData = this.gridOptionsWrapper.isTreeData();\n        if (this.rootNode) {\n            recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);\n        }\n        function recursiveExpandOrCollapse(rowNodes) {\n            if (!rowNodes) {\n                return;\n            }\n            rowNodes.forEach(function (rowNode) {\n                var shouldExpandOrCollapse = usingTreeData ? _.exists(rowNode.childrenAfterGroup) : rowNode.group;\n                if (shouldExpandOrCollapse) {\n                    rowNode.expanded = expand;\n                    recursiveExpandOrCollapse(rowNode.childrenAfterGroup);\n                }\n            });\n        }\n        this.refreshModel({ step: Constants.STEP_MAP });\n        var eventSource = expand ? 'expandAll' : 'collapseAll';\n        var event = {\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            type: Events.EVENT_EXPAND_COLLAPSE_ALL,\n            source: eventSource\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ClientSideRowModel.prototype.doSort = function (rowNodeTransactions, changedPath) {\n        this.sortStage.execute({\n            rowNode: this.rootNode,\n            rowNodeTransactions: rowNodeTransactions,\n            changedPath: changedPath\n        });\n    };\n    ClientSideRowModel.prototype.doRowGrouping = function (groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {\n        if (this.groupStage) {\n            if (rowNodeTransactions) {\n                this.groupStage.execute({\n                    rowNode: this.rootNode,\n                    rowNodeTransactions: rowNodeTransactions,\n                    rowNodeOrder: rowNodeOrder,\n                    changedPath: changedPath\n                });\n            }\n            else {\n                // groups are about to get disposed, so need to deselect any that are selected\n                this.selectionController.removeGroupsFromSelection();\n                this.groupStage.execute({\n                    rowNode: this.rootNode,\n                    changedPath: changedPath,\n                    afterColumnsChanged: afterColumnsChanged\n                });\n                // set open/closed state on groups\n                this.restoreGroupState(groupState);\n            }\n            if (this.gridOptionsWrapper.isGroupSelectsChildren()) {\n                this.selectionController.updateGroupsFromChildrenSelections(changedPath);\n            }\n        }\n        else {\n            this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;\n            this.rootNode.updateHasChildren();\n        }\n    };\n    ClientSideRowModel.prototype.restoreGroupState = function (groupState) {\n        if (!groupState) {\n            return;\n        }\n        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {\n            // if the group was open last time, then open it this time. however\n            // if was not open last time, then don't touch the group, so the 'groupDefaultExpanded'\n            // setting will take effect.\n            if (typeof groupState[key] === 'boolean') {\n                node.expanded = groupState[key];\n            }\n        });\n    };\n    ClientSideRowModel.prototype.doFilter = function (changedPath) {\n        this.filterStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n    };\n    ClientSideRowModel.prototype.doPivot = function (changedPath) {\n        if (this.pivotStage) {\n            this.pivotStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n        }\n    };\n    ClientSideRowModel.prototype.getGroupState = function () {\n        if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {\n            return null;\n        }\n        var result = {};\n        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) { return result[key] = node.expanded; });\n        return result;\n    };\n    ClientSideRowModel.prototype.getCopyOfNodesMap = function () {\n        return this.nodeManager.getCopyOfNodesMap();\n    };\n    ClientSideRowModel.prototype.getRowNode = function (id) {\n        return this.nodeManager.getRowNode(id);\n    };\n    // rows: the rows to put into the model\n    ClientSideRowModel.prototype.setRowData = function (rowData) {\n        // no need to invalidate cache, as the cache is stored on the rowNode,\n        // so new rowNodes means the cache is wiped anyway.\n        // remember group state, so we can expand groups that should be expanded\n        var groupState = this.getGroupState();\n        this.nodeManager.setRowData(rowData);\n        // this event kicks off:\n        // - clears selection\n        // - updates filters\n        // - shows 'no rows' overlay if needed\n        var rowDataChangedEvent = {\n            type: Events.EVENT_ROW_DATA_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(rowDataChangedEvent);\n        this.refreshModel({\n            step: Constants.STEP_EVERYTHING,\n            groupState: groupState,\n            newData: true\n        });\n    };\n    ClientSideRowModel.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {\n        var _this = this;\n        if (this.applyAsyncTransactionsTimeout == null) {\n            this.rowDataTransactionBatch = [];\n            var waitMillis = this.gridOptionsWrapper.getAsyncTransactionWaitMillis();\n            this.applyAsyncTransactionsTimeout = window.setTimeout(function () {\n                _this.executeBatchUpdateRowData();\n            }, waitMillis);\n        }\n        this.rowDataTransactionBatch.push({ rowDataTransaction: rowDataTransaction, callback: callback });\n    };\n    ClientSideRowModel.prototype.flushAsyncTransactions = function () {\n        if (this.applyAsyncTransactionsTimeout != null) {\n            clearTimeout(this.applyAsyncTransactionsTimeout);\n            this.executeBatchUpdateRowData();\n        }\n    };\n    ClientSideRowModel.prototype.executeBatchUpdateRowData = function () {\n        var _this = this;\n        this.valueCache.onDataChanged();\n        var callbackFuncsBound = [];\n        var rowNodeTrans = [];\n        if (this.rowDataTransactionBatch) {\n            this.rowDataTransactionBatch.forEach(function (tranItem) {\n                var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, null);\n                rowNodeTrans.push(rowNodeTran);\n                if (tranItem.callback) {\n                    callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));\n                }\n            });\n        }\n        this.commonUpdateRowData(rowNodeTrans);\n        // do callbacks in next VM turn so it's async\n        if (callbackFuncsBound.length > 0) {\n            window.setTimeout(function () {\n                callbackFuncsBound.forEach(function (func) { return func(); });\n            }, 0);\n        }\n        this.rowDataTransactionBatch = null;\n        this.applyAsyncTransactionsTimeout = undefined;\n    };\n    ClientSideRowModel.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n        this.valueCache.onDataChanged();\n        var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);\n        this.commonUpdateRowData([rowNodeTran], rowNodeOrder);\n        return rowNodeTran;\n    };\n    // common to updateRowData and batchUpdateRowData\n    ClientSideRowModel.prototype.commonUpdateRowData = function (rowNodeTrans, rowNodeOrder) {\n        this.refreshModel({\n            step: Constants.STEP_EVERYTHING,\n            rowNodeTransactions: rowNodeTrans,\n            rowNodeOrder: rowNodeOrder,\n            keepRenderedRows: true,\n            animate: true,\n            keepEditingRows: true\n        });\n        var event = {\n            type: Events.EVENT_ROW_DATA_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ClientSideRowModel.prototype.doRowsToDisplay = function () {\n        this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });\n    };\n    ClientSideRowModel.prototype.onRowHeightChanged = function () {\n        this.refreshModel({ step: Constants.STEP_MAP, keepRenderedRows: true, keepEditingRows: true });\n    };\n    ClientSideRowModel.prototype.resetRowHeights = function () {\n        this.forEachNode(function (rowNode) {\n            rowNode.setRowHeight(rowNode.rowHeight, true);\n            // we keep the height each row is at, however we set estimated=true rather than clear the height.\n            // this means the grid will not reset the row heights back to defaults, rather it will re-calc\n            // the height for each row as the row is displayed. otherwise the scroll will jump when heights are reset.\n            var detailNode = rowNode.detailNode;\n            if (detailNode) {\n                detailNode.setRowHeight(detailNode.rowHeight, true);\n            }\n        });\n        this.onRowHeightChanged();\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], ClientSideRowModel.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], ClientSideRowModel.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('filterManager')\n    ], ClientSideRowModel.prototype, \"filterManager\", void 0);\n    __decorate([\n        Autowired('$scope')\n    ], ClientSideRowModel.prototype, \"$scope\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], ClientSideRowModel.prototype, \"selectionController\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], ClientSideRowModel.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('valueCache')\n    ], ClientSideRowModel.prototype, \"valueCache\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], ClientSideRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], ClientSideRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('filterStage')\n    ], ClientSideRowModel.prototype, \"filterStage\", void 0);\n    __decorate([\n        Autowired('sortStage')\n    ], ClientSideRowModel.prototype, \"sortStage\", void 0);\n    __decorate([\n        Autowired('flattenStage')\n    ], ClientSideRowModel.prototype, \"flattenStage\", void 0);\n    __decorate([\n        Optional('groupStage')\n    ], ClientSideRowModel.prototype, \"groupStage\", void 0);\n    __decorate([\n        Optional('aggregationStage')\n    ], ClientSideRowModel.prototype, \"aggregationStage\", void 0);\n    __decorate([\n        Optional('pivotStage')\n    ], ClientSideRowModel.prototype, \"pivotStage\", void 0);\n    __decorate([\n        PostConstruct\n    ], ClientSideRowModel.prototype, \"init\", null);\n    ClientSideRowModel = __decorate([\n        Bean('rowModel')\n    ], ClientSideRowModel);\n    return ClientSideRowModel;\n}(BeanStub));\nexport { ClientSideRowModel };\n","import { _, Events, RowNode } from \"@ag-grid-community/core\";\nvar ClientSideNodeManager = /** @class */ (function () {\n    function ClientSideNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnController, gridApi, columnApi, selectionController) {\n        this.nextId = 0;\n        // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n        this.allNodesMap = {};\n        this.rootNode = rootNode;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.context = context;\n        this.eventService = eventService;\n        this.columnController = columnController;\n        this.gridApi = gridApi;\n        this.columnApi = columnApi;\n        this.selectionController = selectionController;\n        this.rootNode.group = true;\n        this.rootNode.level = -1;\n        this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;\n        this.rootNode.allLeafChildren = [];\n        this.rootNode.childrenAfterGroup = [];\n        this.rootNode.childrenAfterSort = [];\n        this.rootNode.childrenAfterFilter = [];\n        // if we make this class a bean, then can annotate postConstruct\n        this.postConstruct();\n    }\n    // @PostConstruct - this is not a bean, so postConstruct called by constructor\n    ClientSideNodeManager.prototype.postConstruct = function () {\n        // func below doesn't have 'this' pointer, so need to pull out these bits\n        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();\n        this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();\n        this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();\n    };\n    ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {\n        return _.cloneObject(this.allNodesMap);\n    };\n    ClientSideNodeManager.prototype.getRowNode = function (id) {\n        return this.allNodesMap[id];\n    };\n    ClientSideNodeManager.prototype.setRowData = function (rowData) {\n        this.rootNode.childrenAfterFilter = null;\n        this.rootNode.childrenAfterGroup = null;\n        this.rootNode.childrenAfterSort = null;\n        this.rootNode.childrenMapped = null;\n        this.rootNode.updateHasChildren();\n        this.nextId = 0;\n        this.allNodesMap = {};\n        if (!rowData) {\n            this.rootNode.allLeafChildren = [];\n            this.rootNode.childrenAfterGroup = [];\n            return;\n        }\n        // kick off recursion\n        // we add rootNode as the parent, however if using ag-grid-enterprise, the grouping stage\n        // sets the parent node on each row (even if we are not grouping). so setting parent node\n        // here is for benefit of ag-grid-community users\n        this.rootNode.allLeafChildren = this.recursiveFunction(rowData, this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n    };\n    ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n        var rowNodeTransaction = {\n            remove: [],\n            update: [],\n            add: []\n        };\n        var nodesToUnselect = [];\n        this.executeAdd(rowDataTran, rowNodeTransaction);\n        this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.updateSelection(nodesToUnselect);\n        if (rowNodeOrder) {\n            _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n        }\n        return rowNodeTransaction;\n    };\n    ClientSideNodeManager.prototype.updateSelection = function (nodesToUnselect) {\n        var selectionChanged = nodesToUnselect.length > 0;\n        if (selectionChanged) {\n            nodesToUnselect.forEach(function (rowNode) {\n                rowNode.setSelected(false, false, true);\n            });\n        }\n        // we do this regardless of nodes to unselect or not, as it's possible\n        // a new node was inserted, so a parent that was previously selected (as all\n        // children were selected) should not be tri-state (as new one unselected against\n        // all other selected children).\n        this.selectionController.updateGroupsFromChildrenSelections();\n        if (selectionChanged) {\n            var event_1 = {\n                type: Events.EVENT_SELECTION_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n    };\n    ClientSideNodeManager.prototype.executeAdd = function (rowDataTran, rowNodeTransaction) {\n        var _this = this;\n        var add = rowDataTran.add, addIndex = rowDataTran.addIndex;\n        if (_.missingOrEmpty(add)) {\n            return;\n        }\n        var useIndex = typeof addIndex === 'number' && addIndex >= 0;\n        if (useIndex) {\n            // items get inserted in reverse order for index insertion\n            add.reverse().forEach(function (item) {\n                var newRowNode = _this.addRowNode(item, addIndex);\n                rowNodeTransaction.add.push(newRowNode);\n            });\n        }\n        else {\n            add.forEach(function (item) {\n                var newRowNode = _this.addRowNode(item);\n                rowNodeTransaction.add.push(newRowNode);\n            });\n        }\n    };\n    ClientSideNodeManager.prototype.executeRemove = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        var _this = this;\n        var remove = rowDataTran.remove;\n        if (_.missingOrEmpty(remove)) {\n            return;\n        }\n        var rowIdsRemoved = {};\n        remove.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n            if (rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            // so row renderer knows to fade row out (and not reposition it)\n            rowNode.clearRowTop();\n            // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially\n            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n            rowIdsRemoved[rowNode.id] = true;\n            // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n            delete _this.allNodesMap[rowNode.id];\n            rowNodeTransaction.remove.push(rowNode);\n        });\n        this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function (rowNode) { return !rowIdsRemoved[rowNode.id]; });\n    };\n    ClientSideNodeManager.prototype.executeUpdate = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        var _this = this;\n        var update = rowDataTran.update;\n        if (_.missingOrEmpty(update)) {\n            return;\n        }\n        update.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            rowNode.updateData(item);\n            if (!rowNode.selectable && rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            _this.setMasterForRow(rowNode, item, ClientSideNodeManager.TOP_LEVEL, false);\n            rowNodeTransaction.update.push(rowNode);\n        });\n    };\n    ClientSideNodeManager.prototype.addRowNode = function (data, index) {\n        var newNode = this.createNode(data, this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n        if (_.exists(index)) {\n            _.insertIntoArray(this.rootNode.allLeafChildren, newNode, index);\n        }\n        else {\n            this.rootNode.allLeafChildren.push(newNode);\n        }\n        return newNode;\n    };\n    ClientSideNodeManager.prototype.lookupRowNode = function (data) {\n        var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n        var rowNode;\n        if (_.exists(rowNodeIdFunc)) {\n            // find rowNode using id\n            var id = rowNodeIdFunc(data);\n            rowNode = this.allNodesMap[id];\n            if (!rowNode) {\n                console.error(\"ag-Grid: could not find row id=\" + id + \", data item was not found for this id\");\n                return null;\n            }\n        }\n        else {\n            // find rowNode using object references\n            rowNode = _.find(this.rootNode.allLeafChildren, function (rowNode) { return rowNode.data === data; });\n            if (!rowNode) {\n                console.error(\"ag-Grid: could not find data item as object was not found\", data);\n                return null;\n            }\n        }\n        return rowNode;\n    };\n    ClientSideNodeManager.prototype.recursiveFunction = function (rowData, parent, level) {\n        var _this = this;\n        // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum\n        if (typeof rowData === 'string') {\n            console.warn('ag-Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');\n            return;\n        }\n        var rowNodes = [];\n        rowData.forEach(function (dataItem) {\n            var node = _this.createNode(dataItem, parent, level);\n            rowNodes.push(node);\n        });\n        return rowNodes;\n    };\n    ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {\n        var node = new RowNode();\n        this.context.createBean(node);\n        node.group = false;\n        this.setMasterForRow(node, dataItem, level, true);\n        if (parent && !this.suppressParentsInRowNodes) {\n            node.parent = parent;\n        }\n        node.level = level;\n        node.setDataAndId(dataItem, this.nextId.toString());\n        if (this.allNodesMap[node.id]) {\n            console.warn(\"ag-grid: duplicate node id '\" + node.id + \"' detected from getRowNodeId callback, this could cause issues in your grid.\");\n        }\n        this.allNodesMap[node.id] = node;\n        this.nextId++;\n        return node;\n    };\n    ClientSideNodeManager.prototype.setMasterForRow = function (rowNode, data, level, setExpanded) {\n        if (this.doingTreeData) {\n            rowNode.setMaster(false);\n            if (setExpanded) {\n                rowNode.expanded = false;\n            }\n        }\n        else {\n            // this is the default, for when doing grid data\n            if (this.doingMasterDetail) {\n                // if we are doing master detail, then the\n                // default is that everything can be a Master Row.\n                if (this.isRowMasterFunc) {\n                    rowNode.setMaster(this.isRowMasterFunc(data));\n                }\n                else {\n                    rowNode.setMaster(true);\n                }\n            }\n            else {\n                rowNode.setMaster(false);\n            }\n            if (setExpanded) {\n                var rowGroupColumns = this.columnController.getRowGroupColumns();\n                var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n                // need to take row group into account when determining level\n                var masterRowLevel = level + numRowGroupColumns;\n                rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n            }\n        }\n    };\n    ClientSideNodeManager.prototype.isExpanded = function (level) {\n        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();\n        if (expandByDefault === -1) {\n            return true;\n        }\n        else {\n            return level < expandByDefault;\n        }\n    };\n    // this is only used for doing legacy tree data\n    ClientSideNodeManager.prototype.setLeafChildren = function (node) {\n        node.allLeafChildren = [];\n        if (node.childrenAfterGroup) {\n            node.childrenAfterGroup.forEach(function (childAfterGroup) {\n                if (childAfterGroup.group) {\n                    if (childAfterGroup.allLeafChildren) {\n                        childAfterGroup.allLeafChildren.forEach(function (leafChild) { return node.allLeafChildren.push(leafChild); });\n                    }\n                }\n                else {\n                    node.allLeafChildren.push(childAfterGroup);\n                }\n            });\n        }\n    };\n    ClientSideNodeManager.TOP_LEVEL = 0;\n    ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';\n    return ClientSideNodeManager;\n}());\nexport { ClientSideNodeManager };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, ColumnGroup, Constants, GroupInstanceIdCreator, BeanStub } from \"@ag-grid-community/core\";\nvar BaseGridSerializingSession = /** @class */ (function () {\n    function BaseGridSerializingSession(config) {\n        this.groupColumns = [];\n        var columnController = config.columnController, valueService = config.valueService, gridOptionsWrapper = config.gridOptionsWrapper, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, processGroupHeaderCallback = config.processGroupHeaderCallback, processRowGroupCallback = config.processRowGroupCallback;\n        this.columnController = columnController;\n        this.valueService = valueService;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.processCellCallback = processCellCallback;\n        this.processHeaderCallback = processHeaderCallback;\n        this.processGroupHeaderCallback = processGroupHeaderCallback;\n        this.processRowGroupCallback = processRowGroupCallback;\n    }\n    BaseGridSerializingSession.prototype.prepare = function (columnsToExport) {\n        this.groupColumns = _.filter(columnsToExport, function (col) { return !!col.getColDef().showRowGroup; });\n    };\n    BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {\n        var value = this.getHeaderName(this.processHeaderCallback, column);\n        return value != null ? value : '';\n    };\n    BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, type, node) {\n        // we render the group summary text e.g. \"-> Parent -> Child\"...\n        var groupIndex = this.gridOptionsWrapper.isGroupMultiAutoColumn() ? node.rowGroupIndex : 0;\n        var renderGroupSummaryCell = \n        // on group rows\n        node && node.group\n            && (\n            // in the group column if groups appear in regular grid cells\n            index === groupIndex && this.groupColumns.indexOf(column) !== -1\n                // or the first cell in the row, if we're doing full width rows\n                || (index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnController.isPivotMode())));\n        var valueForCell;\n        if (renderGroupSummaryCell) {\n            valueForCell = this.createValueForGroupNode(node);\n        }\n        else {\n            valueForCell = this.valueService.getValue(column, node);\n        }\n        var value = this.processCell(node, column, valueForCell, this.processCellCallback, type);\n        return value != null ? value : '';\n    };\n    BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {\n        if (callback) {\n            return callback({\n                column: column,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext()\n            });\n        }\n        return this.columnController.getDisplayNameForColumn(column, 'csv', true);\n    };\n    BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {\n        if (this.processRowGroupCallback) {\n            return this.processRowGroupCallback({\n                node: node,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n            });\n        }\n        var keys = [node.key];\n        if (!this.gridOptionsWrapper.isGroupMultiAutoColumn()) {\n            while (node.parent) {\n                node = node.parent;\n                keys.push(node.key);\n            }\n        }\n        return keys.reverse().join(' -> ');\n    };\n    BaseGridSerializingSession.prototype.processCell = function (rowNode, column, value, processCellCallback, type) {\n        if (processCellCallback) {\n            return processCellCallback({\n                column: column,\n                node: rowNode,\n                value: value,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n                type: type\n            });\n        }\n        return value;\n    };\n    return BaseGridSerializingSession;\n}());\nexport { BaseGridSerializingSession };\nvar GridSerializer = /** @class */ (function (_super) {\n    __extends(GridSerializer, _super);\n    function GridSerializer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GridSerializer.prototype.serialize = function (gridSerializingSession, params) {\n        if (params === void 0) { params = {}; }\n        var rowSkipper = params.shouldRowBeSkipped || (function () { return false; });\n        var api = this.gridOptionsWrapper.getApi();\n        var columnApi = this.gridOptionsWrapper.getColumnApi();\n        var skipSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveSingleChildren();\n        var skipLowestSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n        var context = this.gridOptionsWrapper.getContext();\n        // when in pivot mode, we always render cols on screen, never 'all columns'\n        var isPivotMode = this.columnController.isPivotMode();\n        var rowModelNormal = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        var onlySelectedNonStandardModel = !rowModelNormal && params.onlySelected;\n        var columnsToExport = [];\n        if (_.existsAndNotEmpty(params.columnKeys)) {\n            columnsToExport = this.columnController.getGridColumns(params.columnKeys);\n        }\n        else if (params.allColumns && !isPivotMode) {\n            // add auto group column for tree data\n            columnsToExport = this.gridOptionsWrapper.isTreeData() ?\n                this.columnController.getGridColumns([Constants.GROUP_AUTO_COLUMN_ID]) : [];\n            columnsToExport = columnsToExport.concat(this.columnController.getAllPrimaryColumns() || []);\n        }\n        else {\n            columnsToExport = this.columnController.getAllDisplayedColumns();\n        }\n        if (params.customHeader) {\n            gridSerializingSession.addCustomContent(params.customHeader);\n        }\n        gridSerializingSession.prepare(columnsToExport);\n        // first pass, put in the header names of the cols\n        if (params.columnGroups) {\n            var groupInstanceIdCreator = new GroupInstanceIdCreator();\n            var displayedGroups = this.displayedGroupCreator.createDisplayedGroups(columnsToExport, this.columnController.getGridBalancedTree(), groupInstanceIdCreator, null);\n            this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);\n        }\n        if (!params.skipHeader) {\n            var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();\n            columnsToExport.forEach(function (column, index) {\n                gridRowIterator_1.onColumn(column, index, undefined);\n            });\n        }\n        this.pinnedRowModel.forEachPinnedTopRow(processRow);\n        if (isPivotMode) {\n            if (this.rowModel.forEachPivotNode) {\n                this.rowModel.forEachPivotNode(processRow);\n            }\n            else {\n                //Must be enterprise, so we can just loop through all the nodes\n                this.rowModel.forEachNode(processRow);\n            }\n        }\n        else {\n            // onlySelectedAllPages: user doing pagination and wants selected items from\n            // other pages, so cannot use the standard row model as it won't have rows from\n            // other pages.\n            // onlySelectedNonStandardModel: if user wants selected in non standard row model\n            // (eg viewport) then again rowmodel cannot be used, so need to use selected instead.\n            if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {\n                var selectedNodes = this.selectionController.getSelectedNodes();\n                selectedNodes.forEach(function (node) {\n                    processRow(node);\n                });\n            }\n            else {\n                // here is everything else - including standard row model and selected. we don't use\n                // the selection model even when just using selected, so that the result is the order\n                // of the rows appearing on the screen.\n                if (rowModelNormal) {\n                    this.rowModel.forEachNodeAfterFilterAndSort(processRow);\n                }\n                else {\n                    this.rowModel.forEachNode(processRow);\n                }\n            }\n        }\n        this.pinnedRowModel.forEachPinnedBottomRow(processRow);\n        if (params.customFooter) {\n            gridSerializingSession.addCustomContent(params.customFooter);\n        }\n        function processRow(node) {\n            var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;\n            var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);\n            if (node.group && (params.skipGroups || shouldSkipCurrentGroup)) {\n                return;\n            }\n            if (params.skipFooters && node.footer) {\n                return;\n            }\n            if (params.onlySelected && !node.isSelected()) {\n                return;\n            }\n            if (params.skipPinnedTop && node.rowPinned === 'top') {\n                return;\n            }\n            if (params.skipPinnedBottom && node.rowPinned === 'bottom') {\n                return;\n            }\n            // if we are in pivotMode, then the grid will show the root node only\n            // if it's not a leaf group\n            var nodeIsRootNode = node.level === -1;\n            if (nodeIsRootNode && !node.leafGroup) {\n                return;\n            }\n            var shouldRowBeSkipped = rowSkipper({ node: node, api: api, context: context });\n            if (shouldRowBeSkipped) {\n                return;\n            }\n            var rowAccumulator = gridSerializingSession.onNewBodyRow();\n            columnsToExport.forEach(function (column, index) {\n                rowAccumulator.onColumn(column, index, node);\n            });\n            if (params.getCustomContentBelowRow) {\n                var content = params.getCustomContentBelowRow({ node: node, api: api, columnApi: columnApi, context: context });\n                if (content) {\n                    gridSerializingSession.addCustomContent(content);\n                }\n            }\n        }\n        return gridSerializingSession.parse();\n    };\n    GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession, processGroupHeaderCallback) {\n        var directChildrenHeaderGroups = [];\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            if (!columnGroup.getChildren) {\n                return;\n            }\n            columnGroup.getChildren().forEach(function (it) { return directChildrenHeaderGroups.push(it); });\n        });\n        if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {\n            this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);\n        }\n        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\n            this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);\n        }\n    };\n    GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups, processGroupHeaderCallback) {\n        var _this = this;\n        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();\n        var columnIndex = 0;\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            var name;\n            if (processGroupHeaderCallback) {\n                name = processGroupHeaderCallback({\n                    columnGroup: columnGroup,\n                    api: _this.gridOptionsWrapper.getApi(),\n                    columnApi: _this.gridOptionsWrapper.getColumnApi(),\n                    context: _this.gridOptionsWrapper.getContext()\n                });\n            }\n            else {\n                name = _this.columnController.getDisplayNameForColumnGroup(columnGroup, 'header');\n            }\n            gridRowIterator.onColumn(name || '', columnIndex++, columnGroup.getLeafColumns().length - 1);\n        });\n    };\n    __decorate([\n        Autowired('displayedGroupCreator')\n    ], GridSerializer.prototype, \"displayedGroupCreator\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], GridSerializer.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], GridSerializer.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('pinnedRowModel')\n    ], GridSerializer.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], GridSerializer.prototype, \"selectionController\", void 0);\n    __decorate([\n        Autowired('columnFactory')\n    ], GridSerializer.prototype, \"columnFactory\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], GridSerializer.prototype, \"gridOptionsWrapper\", void 0);\n    GridSerializer = __decorate([\n        Bean(\"gridSerializer\")\n    ], GridSerializer);\n    return GridSerializer;\n}(BeanStub));\nexport { GridSerializer };\nexport var RowType;\n(function (RowType) {\n    RowType[RowType[\"HEADER_GROUPING\"] = 0] = \"HEADER_GROUPING\";\n    RowType[RowType[\"HEADER\"] = 1] = \"HEADER\";\n    RowType[RowType[\"BODY\"] = 2] = \"BODY\";\n})(RowType || (RowType = {}));\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, BeanStub } from \"@ag-grid-community/core\";\nvar FilterStage = /** @class */ (function (_super) {\n    __extends(FilterStage, _super);\n    function FilterStage() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FilterStage.prototype.execute = function (params) {\n        var rowNode = params.rowNode, changedPath = params.changedPath;\n        this.filterService.filter(changedPath);\n        this.selectableService.updateSelectableAfterFiltering(rowNode);\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], FilterStage.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('selectableService')\n    ], FilterStage.prototype, \"selectableService\", void 0);\n    __decorate([\n        Autowired('filterService')\n    ], FilterStage.prototype, \"filterService\", void 0);\n    FilterStage = __decorate([\n        Bean('filterStage')\n    ], FilterStage);\n    return FilterStage;\n}(BeanStub));\nexport { FilterStage };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub } from \"@ag-grid-community/core\";\nvar SortStage = /** @class */ (function (_super) {\n    __extends(SortStage, _super);\n    function SortStage() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SortStage.prototype.execute = function (params) {\n        var sortOptions = this.sortController.getSortForRowController();\n        var sortActive = _.exists(sortOptions) && sortOptions.length > 0;\n        var deltaSort = sortActive\n            && _.exists(params.rowNodeTransactions)\n            // in time we can remove this check, so that delta sort is always\n            // on if transactions are present. it's off for now so that we can\n            // selectively turn it on and test it with some select users before\n            // rolling out to everyone.\n            && this.gridOptionsWrapper.isDeltaSort();\n        // we only need dirty nodes if doing delta sort\n        var dirtyLeafNodes = deltaSort ? this.calculateDirtyNodes(params.rowNodeTransactions) : null;\n        var valueColumns = this.columnController.getValueColumns();\n        var noAggregations = _.missingOrEmpty(valueColumns);\n        this.sortService.sort(sortOptions, sortActive, deltaSort, dirtyLeafNodes, params.changedPath, noAggregations);\n    };\n    SortStage.prototype.calculateDirtyNodes = function (rowNodeTransactions) {\n        var dirtyNodes = {};\n        var addNodesFunc = function (rowNodes) {\n            if (rowNodes) {\n                rowNodes.forEach(function (rowNode) { return dirtyNodes[rowNode.id] = true; });\n            }\n        };\n        // all leaf level nodes in the transaction were impacted\n        rowNodeTransactions.forEach(function (tran) {\n            addNodesFunc(tran.add);\n            addNodesFunc(tran.update);\n            addNodesFunc(tran.remove);\n        });\n        return dirtyNodes;\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], SortStage.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('sortService')\n    ], SortStage.prototype, \"sortService\", void 0);\n    __decorate([\n        Autowired('sortController')\n    ], SortStage.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], SortStage.prototype, \"columnController\", void 0);\n    SortStage = __decorate([\n        Bean('sortStage')\n    ], SortStage);\n    return SortStage;\n}(BeanStub));\nexport { SortStage };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, RowNode } from \"@ag-grid-community/core\";\nvar FlattenStage = /** @class */ (function (_super) {\n    __extends(FlattenStage, _super);\n    function FlattenStage() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FlattenStage.prototype.execute = function (params) {\n        var rootNode = params.rowNode;\n        // even if not doing grouping, we do the mapping, as the client might\n        // of passed in data that already has a grouping in it somewhere\n        var result = [];\n        // putting value into a wrapper so it's passed by reference\n        var nextRowTop = { value: 0 };\n        var skipLeafNodes = this.columnController.isPivotMode();\n        // if we are reducing, and not grouping, then we want to show the root node, as that\n        // is where the pivot values are\n        var showRootNode = skipLeafNodes && rootNode.leafGroup;\n        var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;\n        this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0);\n        // we do not want the footer total if the gris is empty\n        var atLeastOneRowPresent = result.length > 0;\n        var includeGroupTotalFooter = !showRootNode\n            // don't show total footer when showRootNode is true (i.e. in pivot mode and no groups)\n            && atLeastOneRowPresent\n            && this.gridOptionsWrapper.isGroupIncludeTotalFooter();\n        if (includeGroupTotalFooter) {\n            this.ensureFooterNodeExists(rootNode);\n            this.addRowNodeToRowsToDisplay(rootNode.sibling, result, nextRowTop, 0);\n        }\n        return result;\n    };\n    FlattenStage.prototype.recursivelyAddToRowsToDisplay = function (rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {\n        if (_.missingOrEmpty(rowsToFlatten)) {\n            return;\n        }\n        var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();\n        // these two are mutually exclusive, so if first set, we don't set the second\n        var groupRemoveSingleChildren = this.gridOptionsWrapper.isGroupRemoveSingleChildren();\n        var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n        for (var i = 0; i < rowsToFlatten.length; i++) {\n            var rowNode = rowsToFlatten[i];\n            // check all these cases, for working out if this row should be included in the final mapped list\n            var isParent = rowNode.hasChildren();\n            var isSkippedLeafNode = skipLeafNodes && !isParent;\n            var isRemovedSingleChildrenGroup = groupRemoveSingleChildren &&\n                isParent &&\n                rowNode.childrenAfterGroup.length === 1;\n            var isRemovedLowestSingleChildrenGroup = groupRemoveLowestSingleChildren &&\n                isParent &&\n                rowNode.leafGroup &&\n                rowNode.childrenAfterGroup.length === 1;\n            // hide open parents means when group is open, we don't show it. we also need to make sure the\n            // group is expandable in the first place (as leaf groups are not expandable if pivot mode is on).\n            // the UI will never allow expanding leaf  groups, however the user might via the API (or menu option 'expand all')\n            var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;\n            var isHiddenOpenParent = hideOpenParents && rowNode.expanded && (!neverAllowToExpand);\n            var thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent &&\n                !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;\n            if (thisRowShouldBeRendered) {\n                this.addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);\n            }\n            // if we are pivoting, we never map below the leaf group\n            if (skipLeafNodes && rowNode.leafGroup) {\n                continue;\n            }\n            if (isParent) {\n                var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;\n                // we traverse the group if it is expended, however we always traverse if the parent node\n                // was removed (as the group will never be opened if it is not displayed, we show the children instead)\n                if (rowNode.expanded || excludedParent) {\n                    // if the parent was excluded, then ui level is that of the parent\n                    var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;\n                    this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren);\n                    // put a footer in if user is looking for it\n                    if (this.gridOptionsWrapper.isGroupIncludeFooter()) {\n                        this.ensureFooterNodeExists(rowNode);\n                        this.addRowNodeToRowsToDisplay(rowNode.sibling, result, nextRowTop, uiLevel);\n                    }\n                }\n            }\n            else if (rowNode.master && rowNode.expanded) {\n                var detailNode = this.createDetailNode(rowNode);\n                this.addRowNodeToRowsToDisplay(detailNode, result, nextRowTop, uiLevel);\n            }\n        }\n    };\n    // duplicated method, it's also in floatingRowModel\n    FlattenStage.prototype.addRowNodeToRowsToDisplay = function (rowNode, result, nextRowTop, uiLevel) {\n        var isGroupMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();\n        result.push(rowNode);\n        rowNode.setUiLevel(isGroupMultiAutoColumn ? 0 : uiLevel);\n    };\n    FlattenStage.prototype.ensureFooterNodeExists = function (groupNode) {\n        // only create footer node once, otherwise we have daemons and\n        // the animate screws up with the daemons hanging around\n        if (_.exists(groupNode.sibling)) {\n            return;\n        }\n        var footerNode = new RowNode();\n        this.context.createBean(footerNode);\n        Object.keys(groupNode).forEach(function (key) {\n            footerNode[key] = groupNode[key];\n        });\n        footerNode.footer = true;\n        footerNode.rowTop = null;\n        footerNode.oldRowTop = null;\n        if (_.exists(footerNode.id)) {\n            footerNode.id = 'rowGroupFooter_' + footerNode.id;\n        }\n        // get both header and footer to reference each other as siblings. this is never undone,\n        // only overwritten. so if a group is expanded, then contracted, it will have a ghost\n        // sibling - but that's fine, as we can ignore this if the header is contracted.\n        footerNode.sibling = groupNode;\n        groupNode.sibling = footerNode;\n    };\n    FlattenStage.prototype.createDetailNode = function (masterNode) {\n        if (_.exists(masterNode.detailNode)) {\n            return masterNode.detailNode;\n        }\n        var detailNode = new RowNode();\n        this.context.createBean(detailNode);\n        detailNode.detail = true;\n        detailNode.selectable = false;\n        detailNode.parent = masterNode;\n        if (_.exists(masterNode.id)) {\n            detailNode.id = 'detail_' + masterNode.id;\n        }\n        detailNode.data = masterNode.data;\n        detailNode.level = masterNode.level + 1;\n        masterNode.detailNode = detailNode;\n        return detailNode;\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], FlattenStage.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], FlattenStage.prototype, \"selectionController\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], FlattenStage.prototype, \"columnController\", void 0);\n    FlattenStage = __decorate([\n        Bean('flattenStage')\n    ], FlattenStage);\n    return FlattenStage;\n}(BeanStub));\nexport { FlattenStage };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, PostConstruct, BeanStub } from \"@ag-grid-community/core\";\nvar SortService = /** @class */ (function (_super) {\n    __extends(SortService, _super);\n    function SortService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SortService.prototype.init = function () {\n        this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();\n    };\n    SortService.prototype.sort = function (sortOptions, sortActive, deltaSort, dirtyLeafNodes, changedPath, noAggregations) {\n        var _this = this;\n        var callback = function (rowNode) {\n            // we clear out the 'pull down open parents' first, as the values mix up the sorting\n            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterFilter, true);\n            // Javascript sort is non deterministic when all the array items are equals, ie Comparator always returns 0,\n            // so to ensure the array keeps its order, add an additional sorting condition manually, in this case we\n            // are going to inspect the original array position. This is what sortedRowNodes is for.\n            if (sortActive) {\n                var sortedRowNodes = deltaSort ?\n                    _this.doDeltaSort(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations)\n                    : _this.doFullSort(rowNode, sortOptions);\n                rowNode.childrenAfterSort = sortedRowNodes.map(function (sorted) { return sorted.rowNode; });\n            }\n            else {\n                rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);\n            }\n            _this.updateChildIndexes(rowNode);\n            if (_this.postSortFunc) {\n                _this.postSortFunc(rowNode.childrenAfterSort);\n            }\n        };\n        changedPath.forEachChangedNodeDepthFirst(callback);\n        this.updateGroupDataForHiddenOpenParents(changedPath);\n    };\n    SortService.prototype.doFullSort = function (rowNode, sortOptions) {\n        var sortedRowNodes = rowNode.childrenAfterFilter\n            .map(this.mapNodeToSortedNode.bind(this));\n        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n        return sortedRowNodes;\n    };\n    SortService.prototype.mapNodeToSortedNode = function (rowNode, pos) {\n        return { currentPos: pos, rowNode: rowNode };\n    };\n    SortService.prototype.doDeltaSort = function (rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) {\n        // clean nodes will be a list of all row nodes that remain in the set\n        // and ordered. we start with the old sorted set and take out any nodes\n        // that were removed or changed (but not added, added doesn't make sense,\n        // if a node was added, there is no way it could be here from last time).\n        var cleanNodes = rowNode.childrenAfterSort\n            .filter(function (rowNode) {\n            // take out all nodes that were changed as part of the current transaction.\n            // a changed node could a) be in a different sort position or b) may\n            // no longer be in this set as the changed node may not pass filtering,\n            // or be in a different group.\n            var passesDirtyNodesCheck = !dirtyLeafNodes[rowNode.id];\n            // also remove group nodes in the changed path, as they can have different aggregate\n            // values which could impact the sort order.\n            // note: changed path is not active if a) no value columns or b) no transactions. it is never\n            // (b) in deltaSort as we only do deltaSort for transactions. for (a) if no value columns, then\n            // there is no value in the group that could of changed (ie no aggregate values)\n            var passesChangedPathCheck = noAggregations || changedPath.canSkip(rowNode);\n            return passesDirtyNodesCheck && passesChangedPathCheck;\n        })\n            .map(this.mapNodeToSortedNode.bind(this));\n        // for fast access below, we map them\n        var cleanNodesMapped = {};\n        cleanNodes.forEach(function (sortedRowNode) { return cleanNodesMapped[sortedRowNode.rowNode.id] = sortedRowNode.rowNode; });\n        // these are all nodes that need to be placed\n        var changedNodes = rowNode.childrenAfterFilter\n            // ignore nodes in the clean list\n            .filter(function (rowNode) { return !cleanNodesMapped[rowNode.id]; })\n            .map(this.mapNodeToSortedNode.bind(this));\n        // sort changed nodes. note that we don't need to sort cleanNodes as they are\n        // already sorted from last time.\n        changedNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n        if (changedNodes.length === 0) {\n            return cleanNodes;\n        }\n        else if (cleanNodes.length === 0) {\n            return changedNodes;\n        }\n        else {\n            return this.mergeSortedArrays(sortOptions, cleanNodes, changedNodes);\n        }\n    };\n    // Merge two sorted arrays into each other\n    SortService.prototype.mergeSortedArrays = function (sortOptions, arr1, arr2) {\n        var res = [];\n        var i = 0;\n        var j = 0;\n        // Traverse both array, adding them in order\n        while (i < arr1.length && j < arr2.length) {\n            // Check if current element of first\n            // array is smaller than current element\n            // of second array. If yes, store first\n            // array element and increment first array\n            // index. Otherwise do same with second array\n            var compareResult = this.compareRowNodes(sortOptions, arr1[i], arr2[j]);\n            if (compareResult < 0) {\n                res.push(arr1[i++]);\n            }\n            else {\n                res.push(arr2[j++]);\n            }\n        }\n        // add remaining from arr1\n        while (i < arr1.length) {\n            res.push(arr1[i++]);\n        }\n        // add remaining from arr2\n        while (j < arr2.length) {\n            res.push(arr2[j++]);\n        }\n        return res;\n    };\n    SortService.prototype.compareRowNodes = function (sortOptions, sortedNodeA, sortedNodeB) {\n        var nodeA = sortedNodeA.rowNode;\n        var nodeB = sortedNodeB.rowNode;\n        // Iterate columns, return the first that doesn't match\n        for (var i = 0, len = sortOptions.length; i < len; i++) {\n            var sortOption = sortOptions[i];\n            // let compared = compare(nodeA, nodeB, sortOption.column, sortOption.inverter === -1);\n            var isInverted = sortOption.inverter === -1;\n            var valueA = this.getValue(nodeA, sortOption.column);\n            var valueB = this.getValue(nodeB, sortOption.column);\n            var comparatorResult = void 0;\n            if (sortOption.column.getColDef().comparator) {\n                //if comparator provided, use it\n                comparatorResult = sortOption.column.getColDef().comparator(valueA, valueB, nodeA, nodeB, isInverted);\n            }\n            else {\n                //otherwise do our own comparison\n                comparatorResult = _.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());\n            }\n            if (comparatorResult !== 0) {\n                return comparatorResult * sortOption.inverter;\n            }\n        }\n        // All matched, we make is so that the original sort order is kept:\n        return sortedNodeA.currentPos - sortedNodeB.currentPos;\n    };\n    SortService.prototype.getValue = function (nodeA, column) {\n        return this.valueService.getValue(column, nodeA);\n    };\n    SortService.prototype.updateChildIndexes = function (rowNode) {\n        if (_.missing(rowNode.childrenAfterSort)) {\n            return;\n        }\n        var listToSort = rowNode.childrenAfterSort;\n        for (var i = 0; i < listToSort.length; i++) {\n            var child = listToSort[i];\n            var firstChild = i === 0;\n            var lastChild = i === rowNode.childrenAfterSort.length - 1;\n            child.setFirstChild(firstChild);\n            child.setLastChild(lastChild);\n            child.setChildIndex(i);\n        }\n    };\n    SortService.prototype.updateGroupDataForHiddenOpenParents = function (changedPath) {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            return;\n        }\n        // recurse breadth first over group nodes after sort to 'pull down' group data to child groups\n        var callback = function (rowNode) {\n            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);\n            rowNode.childrenAfterSort.forEach(function (child) {\n                if (child.hasChildren()) {\n                    callback(child);\n                }\n            });\n        };\n        changedPath.executeFromRootNode(function (rowNode) { return callback(rowNode); });\n    };\n    SortService.prototype.pullDownGroupDataForHideOpenParents = function (rowNodes, clearOperation) {\n        var _this = this;\n        if (_.missing(rowNodes)) {\n            return;\n        }\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            return;\n        }\n        rowNodes.forEach(function (childRowNode) {\n            var groupDisplayCols = _this.columnController.getGroupDisplayColumns();\n            groupDisplayCols.forEach(function (groupDisplayCol) {\n                var showRowGroup = groupDisplayCol.getColDef().showRowGroup;\n                if (typeof showRowGroup !== 'string') {\n                    console.error('ag-Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup');\n                    return;\n                }\n                var displayingGroupKey = showRowGroup;\n                var rowGroupColumn = _this.columnController.getPrimaryColumn(displayingGroupKey);\n                var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;\n                if (thisRowNodeMatches) {\n                    return;\n                }\n                if (clearOperation) {\n                    // if doing a clear operation, we clear down the value for every possible group column\n                    childRowNode.setGroupValue(groupDisplayCol.getId(), null);\n                }\n                else {\n                    // if doing a set operation, we set only where the pull down is to occur\n                    var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);\n                    if (parentToStealFrom) {\n                        childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);\n                    }\n                }\n            });\n        });\n    };\n    __decorate([\n        Autowired('sortController')\n    ], SortService.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], SortService.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], SortService.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], SortService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], SortService.prototype, \"init\", null);\n    SortService = __decorate([\n        Bean('sortService')\n    ], SortService);\n    return SortService;\n}(BeanStub));\nexport { SortService };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct, BeanStub } from \"@ag-grid-community/core\";\nvar FilterService = /** @class */ (function (_super) {\n    __extends(FilterService, _super);\n    function FilterService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FilterService.prototype.postConstruct = function () {\n        this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n    };\n    FilterService.prototype.filter = function (changedPath) {\n        var filterActive = this.filterManager.isAnyFilterPresent();\n        this.filterNodes(filterActive, changedPath);\n    };\n    FilterService.prototype.filterNodes = function (filterActive, changedPath) {\n        var _this = this;\n        var filterCallback = function (rowNode, includeChildNodes) {\n            // recursively get all children that are groups to also filter\n            if (rowNode.hasChildren()) {\n                // result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes\n                if (filterActive && !includeChildNodes) {\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function (childNode) {\n                        // a group is included in the result if it has any children of it's own.\n                        // by this stage, the child groups are already filtered\n                        var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;\n                        // both leaf level nodes and tree data nodes have data. these get added if\n                        // the data passes the filter\n                        var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter(childNode);\n                        // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass\n                        return passBecauseChildren || passBecauseDataPasses;\n                    });\n                }\n                else {\n                    // if not filtering, the result is the original list\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n                }\n                _this.setAllChildrenCount(rowNode);\n            }\n            else {\n                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n                rowNode.setAllChildrenCount(null);\n            }\n        };\n        if (this.doingTreeDataFiltering()) {\n            var treeDataDepthFirstFilter_1 = function (rowNode, alreadyFoundInParent) {\n                // tree data filter traverses the hierarchy depth first and includes child nodes if parent passes\n                // filter, and parent nodes will be include if any children exist.\n                if (rowNode.childrenAfterGroup) {\n                    for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                        var childNode = rowNode.childrenAfterGroup[i];\n                        // first check if current node passes filter before invoking child nodes\n                        var foundInParent = alreadyFoundInParent || _this.filterManager.doesRowPassFilter(childNode);\n                        if (childNode.childrenAfterGroup) {\n                            treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);\n                        }\n                        else {\n                            filterCallback(childNode, foundInParent);\n                        }\n                    }\n                }\n                filterCallback(rowNode, alreadyFoundInParent);\n            };\n            var treeDataFilterCallback = function (rowNode) { return treeDataDepthFirstFilter_1(rowNode, false); };\n            changedPath.executeFromRootNode(treeDataFilterCallback);\n        }\n        else {\n            var defaultFilterCallback = function (rowNode) { return filterCallback(rowNode, false); };\n            changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n        }\n    };\n    FilterService.prototype.setAllChildrenCountTreeData = function (rowNode) {\n        // for tree data, we include all children, groups and leafs\n        var allChildrenCount = 0;\n        rowNode.childrenAfterFilter.forEach(function (child) {\n            // include child itself\n            allChildrenCount++;\n            // include children of children\n            allChildrenCount += child.allChildrenCount;\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    };\n    FilterService.prototype.setAllChildrenCountGridGrouping = function (rowNode) {\n        // for grid data, we only count the leafs\n        var allChildrenCount = 0;\n        rowNode.childrenAfterFilter.forEach(function (child) {\n            if (child.group) {\n                allChildrenCount += child.allChildrenCount;\n            }\n            else {\n                allChildrenCount++;\n            }\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    };\n    FilterService.prototype.setAllChildrenCount = function (rowNode) {\n        if (this.doingTreeData) {\n            this.setAllChildrenCountTreeData(rowNode);\n        }\n        else {\n            this.setAllChildrenCountGridGrouping(rowNode);\n        }\n    };\n    FilterService.prototype.doingTreeDataFiltering = function () {\n        return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();\n    };\n    __decorate([\n        Autowired('filterManager')\n    ], FilterService.prototype, \"filterManager\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], FilterService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], FilterService.prototype, \"postConstruct\", null);\n    FilterService = __decorate([\n        Bean(\"filterService\")\n    ], FilterService);\n    return FilterService;\n}(BeanStub));\nexport { FilterService };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, Constants, PostConstruct, BeanStub } from \"@ag-grid-community/core\";\nvar ImmutableService = /** @class */ (function (_super) {\n    __extends(ImmutableService, _super);\n    function ImmutableService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ImmutableService.prototype.postConstruct = function () {\n        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            this.clientSideRowModel = this.rowModel;\n        }\n    };\n    // converts the setRowData() command to a transaction\n    ImmutableService.prototype.createTransactionForRowData = function (data) {\n        if (_.missing(this.clientSideRowModel)) {\n            console.error('ag-Grid: ImmutableService only works with ClientSideRowModel');\n            return;\n        }\n        var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n        if (!getRowNodeIdFunc || _.missing(getRowNodeIdFunc)) {\n            console.error('ag-Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!');\n            return;\n        }\n        // convert the data into a transaction object by working out adds, removes and updates\n        var transaction = {\n            remove: [],\n            update: [],\n            add: []\n        };\n        var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();\n        var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();\n        var orderMap = suppressSortOrder ? null : {};\n        if (_.exists(data)) {\n            // split all the new data in the following:\n            // if new, push to 'add'\n            // if update, push to 'update'\n            // if not changed, do not include in the transaction\n            data.forEach(function (dataItem, index) {\n                var id = getRowNodeIdFunc(dataItem);\n                var existingNode = existingNodesMap[id];\n                if (orderMap) {\n                    orderMap[id] = index;\n                }\n                if (existingNode) {\n                    var dataHasChanged = existingNode.data !== dataItem;\n                    if (dataHasChanged) {\n                        transaction.update.push(dataItem);\n                    }\n                    // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta\n                    // remove from list, so we know the item is not to be removed\n                    existingNodesMap[id] = undefined;\n                }\n                else {\n                    transaction.add.push(dataItem);\n                }\n            });\n        }\n        // at this point, all rows that are left, should be removed\n        _.iterateObject(existingNodesMap, function (id, rowNode) {\n            if (rowNode) {\n                transaction.remove.push(rowNode.data);\n            }\n        });\n        return [transaction, orderMap];\n    };\n    __decorate([\n        Autowired('rowModel')\n    ], ImmutableService.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], ImmutableService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], ImmutableService.prototype, \"postConstruct\", null);\n    ImmutableService = __decorate([\n        Bean('immutableService')\n    ], ImmutableService);\n    return ImmutableService;\n}(BeanStub));\nexport { ImmutableService };\n","import { ModuleNames } from \"@ag-grid-community/core\";\nimport { ClientSideRowModel } from \"./clientSideRowModel/clientSideRowModel\";\nimport { FilterStage } from \"./clientSideRowModel/filterStage\";\nimport { SortStage } from \"./clientSideRowModel/sortStage\";\nimport { FlattenStage } from \"./clientSideRowModel/flattenStage\";\nimport { SortService } from \"./clientSideRowModel/sortService\";\nimport { FilterService } from \"./clientSideRowModel/filterService\";\nimport { ImmutableService } from \"./clientSideRowModel/immutableService\";\nexport var ClientSideRowModelModule = {\n    moduleName: ModuleNames.ClientSideRowModelModule,\n    beans: [FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService],\n    rowModels: { clientSide: ClientSideRowModel }\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct, RowNodeBlock, _ } from \"@ag-grid-community/core\";\nvar InfiniteBlock = /** @class */ (function (_super) {\n    __extends(InfiniteBlock, _super);\n    function InfiniteBlock(pageNumber, params) {\n        var _this = _super.call(this, pageNumber, params) || this;\n        _this.cacheParams = params;\n        return _this;\n    }\n    InfiniteBlock.prototype.getDisplayIndexStart = function () {\n        return this.getBlockNumber() * this.cacheParams.blockSize;\n    };\n    // this is an estimate, as the last block will probably only be partially full. however\n    // this method is used to know if this block is been rendered, before destroying, so\n    // and this estimate works in that use case.\n    InfiniteBlock.prototype.getDisplayIndexEnd = function () {\n        return this.getDisplayIndexStart() + this.cacheParams.blockSize;\n    };\n    InfiniteBlock.prototype.createBlankRowNode = function (rowIndex) {\n        var rowNode = _super.prototype.createBlankRowNode.call(this, rowIndex);\n        rowNode.uiLevel = 0;\n        this.setIndexAndTopOnRowNode(rowNode, rowIndex);\n        return rowNode;\n    };\n    InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {\n        if (_.exists(data)) {\n            // this means if the user is not providing id's we just use the\n            // index for the row. this will allow selection to work (that is based\n            // on index) as long user is not inserting or deleting rows,\n            // or wanting to keep selection between server side sorting or filtering\n            rowNode.setDataAndId(data, index.toString());\n        }\n        else {\n            rowNode.setDataAndId(undefined, undefined);\n        }\n    };\n    InfiniteBlock.prototype.setRowNode = function (rowIndex, rowNode) {\n        _super.prototype.setRowNode.call(this, rowIndex, rowNode);\n        this.setIndexAndTopOnRowNode(rowNode, rowIndex);\n    };\n    InfiniteBlock.prototype.init = function () {\n        _super.prototype.init.call(this, {\n            context: this.getContext(),\n            rowRenderer: this.rowRenderer\n        });\n    };\n    InfiniteBlock.prototype.getNodeIdPrefix = function () {\n        return null;\n    };\n    InfiniteBlock.prototype.getRow = function (displayIndex) {\n        return this.getRowUsingLocalIndex(displayIndex);\n    };\n    InfiniteBlock.prototype.setIndexAndTopOnRowNode = function (rowNode, rowIndex) {\n        rowNode.setRowIndex(rowIndex);\n        rowNode.rowTop = this.cacheParams.rowHeight * rowIndex;\n    };\n    InfiniteBlock.prototype.loadFromDatasource = function () {\n        var _this = this;\n        // PROBLEM . . . . when the user sets sort via colDef.sort, then this code\n        // is executing before the sort is set up, so server is not getting the sort\n        // model. need to change with regards order - so the server side request is\n        // AFTER thus it gets the right sort model.\n        var params = {\n            startRow: this.getStartRow(),\n            endRow: this.getEndRow(),\n            successCallback: this.pageLoaded.bind(this, this.getVersion()),\n            failCallback: this.pageLoadFailed.bind(this),\n            sortModel: this.cacheParams.sortModel,\n            filterModel: this.cacheParams.filterModel,\n            context: this.gridOptionsWrapper.getContext()\n        };\n        if (_.missing(this.cacheParams.datasource.getRows)) {\n            console.warn(\"ag-Grid: datasource is missing getRows method\");\n            return;\n        }\n        // put in timeout, to force result to be async\n        window.setTimeout(function () {\n            _this.cacheParams.datasource.getRows(params);\n        }, 0);\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], InfiniteBlock.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], InfiniteBlock.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        PostConstruct\n    ], InfiniteBlock.prototype, \"init\", null);\n    return InfiniteBlock;\n}(RowNodeBlock));\nexport { InfiniteBlock };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Autowired, Events, Qualifier, RowNodeCache, } from \"@ag-grid-community/core\";\nimport { InfiniteBlock } from \"./infiniteBlock\";\nvar InfiniteCache = /** @class */ (function (_super) {\n    __extends(InfiniteCache, _super);\n    function InfiniteCache(params) {\n        return _super.call(this, params) || this;\n    }\n    InfiniteCache.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('InfiniteCache');\n    };\n    InfiniteCache.prototype.moveItemsDown = function (block, moveFromIndex, moveCount) {\n        var startRow = block.getStartRow();\n        var endRow = block.getEndRow();\n        var indexOfLastRowToMove = moveFromIndex + moveCount;\n        // all rows need to be moved down below the insertion index\n        for (var currentRowIndex = endRow - 1; currentRowIndex >= startRow; currentRowIndex--) {\n            // don't move rows at or before the insertion index\n            if (currentRowIndex < indexOfLastRowToMove) {\n                continue;\n            }\n            var indexOfNodeWeWant = currentRowIndex - moveCount;\n            var nodeForThisIndex = this.getRow(indexOfNodeWeWant, true);\n            if (nodeForThisIndex) {\n                block.setRowNode(currentRowIndex, nodeForThisIndex);\n            }\n            else {\n                block.setBlankRowNode(currentRowIndex);\n                block.setDirty();\n            }\n        }\n    };\n    InfiniteCache.prototype.insertItems = function (block, indexToInsert, items) {\n        var pageStartRow = block.getStartRow();\n        var pageEndRow = block.getEndRow();\n        var newRowNodes = [];\n        // next stage is insert the rows into this page, if applicable\n        for (var index = 0; index < items.length; index++) {\n            var rowIndex = indexToInsert + index;\n            var currentRowInThisPage = rowIndex >= pageStartRow && rowIndex < pageEndRow;\n            if (currentRowInThisPage) {\n                var dataItem = items[index];\n                var newRowNode = block.setNewData(rowIndex, dataItem);\n                newRowNodes.push(newRowNode);\n            }\n        }\n        return newRowNodes;\n    };\n    InfiniteCache.prototype.insertItemsAtIndex = function (indexToInsert, items) {\n        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order\n        var _this = this;\n        var newNodes = [];\n        this.forEachBlockInReverseOrder(function (block) {\n            var pageEndRow = block.getEndRow();\n            // if the insertion is after this page, then this page is not impacted\n            if (pageEndRow <= indexToInsert) {\n                return;\n            }\n            _this.moveItemsDown(block, indexToInsert, items.length);\n            var newNodesThisPage = _this.insertItems(block, indexToInsert, items);\n            newNodesThisPage.forEach(function (rowNode) { return newNodes.push(rowNode); });\n        });\n        if (this.isMaxRowFound()) {\n            this.hack_setVirtualRowCount(this.getVirtualRowCount() + items.length);\n        }\n        this.onCacheUpdated();\n        var event = {\n            type: Events.EVENT_ROW_DATA_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,\n    // it will want new pages in the cache as it asks for rows. only when we are inserting /\n    // removing rows via the api is dontCreatePage set, where we move rows between the pages.\n    InfiniteCache.prototype.getRow = function (rowIndex, dontCreatePage) {\n        if (dontCreatePage === void 0) { dontCreatePage = false; }\n        var blockId = Math.floor(rowIndex / this.cacheParams.blockSize);\n        var block = this.getBlock(blockId);\n        if (!block) {\n            if (dontCreatePage) {\n                return null;\n            }\n            else {\n                block = this.createBlock(blockId);\n            }\n        }\n        return block.getRow(rowIndex);\n    };\n    InfiniteCache.prototype.createBlock = function (blockNumber) {\n        var newBlock = new InfiniteBlock(blockNumber, this.cacheParams);\n        this.getContext().createBean(newBlock);\n        this.postCreateBlock(newBlock);\n        return newBlock;\n    };\n    // we have this on infinite row model only, not server side row model,\n    // because for server side, it would leave the children in inconsistent\n    // state - eg if a node had children, but after the refresh it had data\n    // for a different row, then the children would be with the wrong row node.\n    InfiniteCache.prototype.refreshCache = function () {\n        this.forEachBlockInOrder(function (block) { return block.setDirty(); });\n        this.checkBlockToLoad();\n    };\n    __decorate([\n        Autowired('columnApi')\n    ], InfiniteCache.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], InfiniteCache.prototype, \"gridApi\", void 0);\n    __decorate([\n        __param(0, Qualifier('loggerFactory'))\n    ], InfiniteCache.prototype, \"setBeans\", null);\n    return InfiniteCache;\n}(RowNodeCache));\nexport { InfiniteCache };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, Constants, Events, NumberSequence, PostConstruct, PreDestroy, RowNodeBlockLoader, RowNodeCache } from \"@ag-grid-community/core\";\nimport { InfiniteCache } from \"./infiniteCache\";\nvar InfiniteRowModel = /** @class */ (function (_super) {\n    __extends(InfiniteRowModel, _super);\n    function InfiniteRowModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    InfiniteRowModel.prototype.getRowBounds = function (index) {\n        return {\n            rowHeight: this.rowHeight,\n            rowTop: this.rowHeight * index\n        };\n    };\n    // we don't implement as lazy row heights is not supported in this row model\n    InfiniteRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n        return false;\n    };\n    InfiniteRowModel.prototype.init = function () {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isRowModelInfinite()) {\n            return;\n        }\n        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n        this.addEventListeners();\n        this.addDestroyFunc(function () { return _this.destroyCache(); });\n    };\n    InfiniteRowModel.prototype.start = function () {\n        this.setDatasource(this.gridOptionsWrapper.getDatasource());\n    };\n    InfiniteRowModel.prototype.destroyDatasource = function () {\n        if (this.datasource) {\n            this.getContext().destroyBean(this.datasource);\n            this.rowRenderer.datasourceChanged();\n            this.datasource = null;\n        }\n    };\n    InfiniteRowModel.prototype.isLastRowFound = function () {\n        return this.infiniteCache ? this.infiniteCache.isMaxRowFound() : false;\n    };\n    InfiniteRowModel.prototype.addEventListeners = function () {\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnEverything.bind(this));\n    };\n    InfiniteRowModel.prototype.onFilterChanged = function () {\n        this.reset();\n    };\n    InfiniteRowModel.prototype.onSortChanged = function () {\n        this.reset();\n    };\n    InfiniteRowModel.prototype.onColumnEverything = function () {\n        var resetRequired;\n        // if cache params, we require reset only if sort model has changed. we don't need to check\n        // for filter model, as the filter manager will fire an event when columns change that result\n        // in the filter changing.\n        if (this.cacheParams) {\n            resetRequired = this.isSortModelDifferent();\n        }\n        else {\n            // if no cacheParams, means first time creating the cache, so always create one\n            resetRequired = true;\n        }\n        if (resetRequired) {\n            this.reset();\n        }\n    };\n    InfiniteRowModel.prototype.isSortModelDifferent = function () {\n        return !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());\n    };\n    InfiniteRowModel.prototype.getType = function () {\n        return Constants.ROW_MODEL_TYPE_INFINITE;\n    };\n    InfiniteRowModel.prototype.setDatasource = function (datasource) {\n        this.destroyDatasource();\n        this.datasource = datasource;\n        // only reset if we have a valid datasource to working with\n        if (datasource) {\n            this.reset();\n        }\n    };\n    InfiniteRowModel.prototype.isEmpty = function () {\n        return _.missing(this.infiniteCache);\n    };\n    InfiniteRowModel.prototype.isRowsToRender = function () {\n        return _.exists(this.infiniteCache);\n    };\n    InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];\n    };\n    InfiniteRowModel.prototype.reset = function () {\n        // important to return here, as the user could be setting filter or sort before\n        // data-source is set\n        if (_.missing(this.datasource)) {\n            return;\n        }\n        // if user is providing id's, then this means we can keep the selection between datasource hits,\n        // as the rows will keep their unique id's even if, for example, server side sorting or filtering\n        // is done.\n        var userGeneratingIds = _.exists(this.gridOptionsWrapper.getRowNodeIdFunc());\n        if (!userGeneratingIds) {\n            this.selectionController.reset();\n        }\n        this.resetCache();\n        var event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    };\n    InfiniteRowModel.prototype.createModelUpdatedEvent = function () {\n        return {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            // not sure if these should all be false - noticed if after implementing,\n            // maybe they should be true?\n            newPage: false,\n            newData: false,\n            keepRenderedRows: false,\n            animate: false\n        };\n    };\n    InfiniteRowModel.prototype.resetCache = function () {\n        // if not first time creating a cache, need to destroy the old one\n        this.destroyCache();\n        var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();\n        var blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis();\n        // there is a bi-directional dependency between the loader and the cache,\n        // so we create loader here, and then pass dependencies in setDependencies() method later\n        this.rowNodeBlockLoader = new RowNodeBlockLoader(maxConcurrentRequests, blockLoadDebounceMillis);\n        this.getContext().createBean(this.rowNodeBlockLoader);\n        this.cacheParams = {\n            // the user provided datasource\n            datasource: this.datasource,\n            // sort and filter model\n            filterModel: this.filterManager.getFilterModel(),\n            sortModel: this.sortController.getSortModel(),\n            rowNodeBlockLoader: this.rowNodeBlockLoader,\n            // properties - this way we take a snapshot of them, so if user changes any, they will be\n            // used next time we create a new cache, which is generally after a filter or sort change,\n            // or a new datasource is set\n            maxConcurrentRequests: maxConcurrentRequests,\n            overflowSize: this.gridOptionsWrapper.getCacheOverflowSize(),\n            initialRowCount: this.gridOptionsWrapper.getInfiniteInitialRowCount(),\n            maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),\n            blockSize: this.gridOptionsWrapper.getCacheBlockSize(),\n            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n            // the cache could create this, however it is also used by the pages, so handy to create it\n            // here as the settings are also passed to the pages\n            lastAccessedSequence: new NumberSequence()\n        };\n        // set defaults\n        if (!this.cacheParams.maxConcurrentRequests || !(this.cacheParams.maxConcurrentRequests >= 1)) {\n            this.cacheParams.maxConcurrentRequests = 2;\n        }\n        // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the\n        // server for one page at a time. so the default if not specified is 100.\n        if (!this.cacheParams.blockSize || !(this.cacheParams.blockSize >= 1)) {\n            this.cacheParams.blockSize = 100;\n        }\n        // if user doesn't give initial rows to display, we assume one\n        if (!(this.cacheParams.initialRowCount >= 1)) {\n            this.cacheParams.initialRowCount = 1;\n        }\n        // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past\n        // the current page and request first row of next page\n        if (!(this.cacheParams.overflowSize >= 1)) {\n            this.cacheParams.overflowSize = 1;\n        }\n        this.infiniteCache = new InfiniteCache(this.cacheParams);\n        this.getContext().createBean(this.infiniteCache);\n        this.infiniteCache.addEventListener(RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));\n    };\n    InfiniteRowModel.prototype.destroyCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache = this.destroyBean(this.infiniteCache);\n        }\n        if (this.rowNodeBlockLoader) {\n            this.rowNodeBlockLoader = this.destroyBean(this.rowNodeBlockLoader);\n        }\n    };\n    InfiniteRowModel.prototype.onCacheUpdated = function () {\n        var event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    };\n    InfiniteRowModel.prototype.getRow = function (rowIndex) {\n        return this.infiniteCache ? this.infiniteCache.getRow(rowIndex) : null;\n    };\n    InfiniteRowModel.prototype.getRowNode = function (id) {\n        var result = null;\n        this.forEachNode(function (rowNode) {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n        });\n        return result;\n    };\n    InfiniteRowModel.prototype.forEachNode = function (callback) {\n        if (this.infiniteCache) {\n            this.infiniteCache.forEachNodeDeep(callback, new NumberSequence());\n        }\n    };\n    InfiniteRowModel.prototype.getCurrentPageHeight = function () {\n        return this.getRowCount() * this.rowHeight;\n    };\n    InfiniteRowModel.prototype.getTopLevelRowCount = function () {\n        return this.getRowCount();\n    };\n    InfiniteRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        return topLevelIndex;\n    };\n    InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n        if (this.rowHeight !== 0) { // avoid divide by zero error\n            var rowIndexForPixel = Math.floor(pixel / this.rowHeight);\n            var lastRowIndex = this.getRowCount() - 1;\n            if (rowIndexForPixel > lastRowIndex) {\n                return lastRowIndex;\n            }\n            else {\n                return rowIndexForPixel;\n            }\n        }\n        else {\n            return 0;\n        }\n    };\n    InfiniteRowModel.prototype.getRowCount = function () {\n        return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() : 0;\n    };\n    InfiniteRowModel.prototype.updateRowData = function (transaction) {\n        if (_.exists(transaction.remove) || _.exists(transaction.update)) {\n            console.warn('ag-Grid: updateRowData for InfiniteRowModel does not support remove or update, only add');\n            return;\n        }\n        if (_.missing(transaction.addIndex)) {\n            console.warn('ag-Grid: updateRowData for InfiniteRowModel requires add and addIndex to be set');\n            return;\n        }\n        if (this.infiniteCache) {\n            this.infiniteCache.insertItemsAtIndex(transaction.addIndex, transaction.add);\n        }\n    };\n    InfiniteRowModel.prototype.isRowPresent = function (rowNode) {\n        return false;\n    };\n    InfiniteRowModel.prototype.refreshCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.refreshCache();\n        }\n    };\n    InfiniteRowModel.prototype.purgeCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.purgeCache();\n        }\n    };\n    InfiniteRowModel.prototype.getVirtualRowCount = function () {\n        if (this.infiniteCache) {\n            return this.infiniteCache.getVirtualRowCount();\n        }\n        else {\n            return null;\n        }\n    };\n    InfiniteRowModel.prototype.isMaxRowFound = function () {\n        if (this.infiniteCache) {\n            return this.infiniteCache.isMaxRowFound();\n        }\n    };\n    InfiniteRowModel.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {\n        if (this.infiniteCache) {\n            this.infiniteCache.setVirtualRowCount(rowCount, maxRowFound);\n        }\n    };\n    InfiniteRowModel.prototype.getBlockState = function () {\n        if (this.rowNodeBlockLoader) {\n            return this.rowNodeBlockLoader.getBlockState();\n        }\n        else {\n            return null;\n        }\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], InfiniteRowModel.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('filterManager')\n    ], InfiniteRowModel.prototype, \"filterManager\", void 0);\n    __decorate([\n        Autowired('sortController')\n    ], InfiniteRowModel.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], InfiniteRowModel.prototype, \"selectionController\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], InfiniteRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], InfiniteRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], InfiniteRowModel.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        PostConstruct\n    ], InfiniteRowModel.prototype, \"init\", null);\n    __decorate([\n        PreDestroy\n    ], InfiniteRowModel.prototype, \"destroyDatasource\", null);\n    InfiniteRowModel = __decorate([\n        Bean('rowModel')\n    ], InfiniteRowModel);\n    return InfiniteRowModel;\n}(BeanStub));\nexport { InfiniteRowModel };\n","import { ModuleNames } from \"@ag-grid-community/core\";\nimport { InfiniteRowModel } from \"./infiniteRowModel/infiniteRowModel\";\nexport var InfiniteRowModelModule = {\n    moduleName: ModuleNames.InfiniteRowModelModule,\n    rowModels: { 'infinite': InfiniteRowModel }\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, Constants, PostConstruct } from \"@ag-grid-community/core\";\nimport { BaseGridSerializingSession } from \"./gridSerializer\";\nvar LINE_SEPARATOR = '\\r\\n';\nvar CsvSerializingSession = /** @class */ (function (_super) {\n    __extends(CsvSerializingSession, _super);\n    function CsvSerializingSession(config) {\n        var _this = _super.call(this, config) || this;\n        _this.isFirstLine = true;\n        _this.result = '';\n        var suppressQuotes = config.suppressQuotes, columnSeparator = config.columnSeparator;\n        _this.suppressQuotes = suppressQuotes;\n        _this.columnSeparator = columnSeparator;\n        return _this;\n    }\n    CsvSerializingSession.prototype.addCustomContent = function (content) {\n        var _this = this;\n        if (!content) {\n            return;\n        }\n        if (typeof content === 'string') {\n            // we used to require the customFooter to be prefixed with a newline but no longer do,\n            // so only add the newline if the user has not supplied one\n            if (!/^\\s*\\n/.test(content)) {\n                this.beginNewLine();\n            }\n            // replace whatever newlines are supplied with the style we're using\n            content = content.replace(/\\r?\\n/g, LINE_SEPARATOR);\n            this.result += content;\n        }\n        else {\n            content.forEach(function (row) {\n                _this.beginNewLine();\n                row.forEach(function (cell, index) {\n                    if (index !== 0) {\n                        _this.result += _this.columnSeparator;\n                    }\n                    _this.result += _this.putInQuotes(cell.data.value || '');\n                    if (cell.mergeAcross) {\n                        _this.appendEmptyCells(cell.mergeAcross);\n                    }\n                });\n            });\n        }\n    };\n    CsvSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewHeaderGroupingRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function (header, index, span) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(header);\n        this.appendEmptyCells(span);\n    };\n    CsvSerializingSession.prototype.appendEmptyCells = function (count) {\n        for (var i = 1; i <= count; i++) {\n            this.result += this.columnSeparator + this.putInQuotes(\"\");\n        }\n    };\n    CsvSerializingSession.prototype.onNewHeaderRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewHeaderRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewHeaderRowColumn = function (column, index, node) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(this.extractHeaderValue(column));\n    };\n    CsvSerializingSession.prototype.onNewBodyRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewBodyRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewBodyRowColumn = function (column, index, node) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(this.extractRowCellValue(column, index, Constants.EXPORT_TYPE_CSV, node));\n    };\n    CsvSerializingSession.prototype.putInQuotes = function (value) {\n        if (this.suppressQuotes) {\n            return value;\n        }\n        if (value === null || value === undefined) {\n            return '\"\"';\n        }\n        var stringValue;\n        if (typeof value === 'string') {\n            stringValue = value;\n        }\n        else if (typeof value.toString === 'function') {\n            stringValue = value.toString();\n        }\n        else {\n            console.warn('unknown value type during csv conversion');\n            stringValue = '';\n        }\n        // replace each \" with \"\" (ie two sets of double quotes is how to do double quotes in csv)\n        var valueEscaped = stringValue.replace(/\"/g, \"\\\"\\\"\");\n        return '\"' + valueEscaped + '\"';\n    };\n    CsvSerializingSession.prototype.parse = function () {\n        return this.result;\n    };\n    CsvSerializingSession.prototype.beginNewLine = function () {\n        if (!this.isFirstLine) {\n            this.result += LINE_SEPARATOR;\n        }\n        this.isFirstLine = false;\n    };\n    return CsvSerializingSession;\n}(BaseGridSerializingSession));\nexport { CsvSerializingSession };\nvar BaseCreator = /** @class */ (function () {\n    function BaseCreator() {\n    }\n    BaseCreator.prototype.setBeans = function (beans) {\n        this.beans = beans;\n    };\n    BaseCreator.prototype.export = function (userParams) {\n        if (this.isExportSuppressed()) {\n            console.warn(\"ag-grid: Export cancelled. Export is not allowed as per your configuration.\");\n            return '';\n        }\n        var _a = this.getMergedParamsAndData(userParams), mergedParams = _a.mergedParams, data = _a.data;\n        var fileNamePresent = mergedParams && mergedParams.fileName && mergedParams.fileName.length !== 0;\n        var fileName = fileNamePresent ? mergedParams.fileName : this.getDefaultFileName();\n        if (fileName.indexOf(\".\") === -1) {\n            fileName = fileName + \".\" + this.getDefaultFileExtension();\n        }\n        this.beans.downloader.download(fileName, this.packageFile(data));\n        return data;\n    };\n    BaseCreator.prototype.getData = function (params) {\n        return this.getMergedParamsAndData(params).data;\n    };\n    BaseCreator.prototype.getMergedParamsAndData = function (userParams) {\n        var mergedParams = this.mergeDefaultParams(userParams);\n        var data = this.beans.gridSerializer.serialize(this.createSerializingSession(mergedParams), mergedParams);\n        return { mergedParams: mergedParams, data: data };\n    };\n    BaseCreator.prototype.mergeDefaultParams = function (userParams) {\n        var baseParams = this.beans.gridOptionsWrapper.getDefaultExportParams();\n        var params = {};\n        _.assign(params, baseParams);\n        _.assign(params, userParams);\n        return params;\n    };\n    BaseCreator.prototype.packageFile = function (data) {\n        return new Blob([\"\\ufeff\", data], {\n            type: window.navigator.msSaveOrOpenBlob ? this.getMimeType() : 'octet/stream'\n        });\n    };\n    return BaseCreator;\n}());\nexport { BaseCreator };\nvar CsvCreator = /** @class */ (function (_super) {\n    __extends(CsvCreator, _super);\n    function CsvCreator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CsvCreator.prototype.postConstruct = function () {\n        this.setBeans({\n            downloader: this.downloader,\n            gridSerializer: this.gridSerializer,\n            gridOptionsWrapper: this.gridOptionsWrapper\n        });\n    };\n    CsvCreator.prototype.exportDataAsCsv = function (params) {\n        return this.export(params);\n    };\n    CsvCreator.prototype.getDataAsCsv = function (params) {\n        return this.getData(params);\n    };\n    CsvCreator.prototype.getMimeType = function () {\n        return 'text/csv;charset=utf-8;';\n    };\n    CsvCreator.prototype.getDefaultFileName = function () {\n        return 'export.csv';\n    };\n    CsvCreator.prototype.getDefaultFileExtension = function () {\n        return 'csv';\n    };\n    CsvCreator.prototype.createSerializingSession = function (params) {\n        var _a = this, columnController = _a.columnController, valueService = _a.valueService, gridOptionsWrapper = _a.gridOptionsWrapper;\n        var processCellCallback = params.processCellCallback, processHeaderCallback = params.processHeaderCallback, processGroupHeaderCallback = params.processGroupHeaderCallback, processRowGroupCallback = params.processRowGroupCallback, suppressQuotes = params.suppressQuotes, columnSeparator = params.columnSeparator;\n        return new CsvSerializingSession({\n            columnController: columnController,\n            valueService: valueService,\n            gridOptionsWrapper: gridOptionsWrapper,\n            processCellCallback: processCellCallback || undefined,\n            processHeaderCallback: processHeaderCallback || undefined,\n            processGroupHeaderCallback: processGroupHeaderCallback || undefined,\n            processRowGroupCallback: processRowGroupCallback || undefined,\n            suppressQuotes: suppressQuotes || false,\n            columnSeparator: columnSeparator || ','\n        });\n    };\n    CsvCreator.prototype.isExportSuppressed = function () {\n        return this.gridOptionsWrapper.isSuppressCsvExport();\n    };\n    __decorate([\n        Autowired('columnController')\n    ], CsvCreator.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], CsvCreator.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('downloader')\n    ], CsvCreator.prototype, \"downloader\", void 0);\n    __decorate([\n        Autowired('gridSerializer')\n    ], CsvCreator.prototype, \"gridSerializer\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], CsvCreator.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], CsvCreator.prototype, \"postConstruct\", null);\n    CsvCreator = __decorate([\n        Bean('csvCreator')\n    ], CsvCreator);\n    return CsvCreator;\n}(BaseCreator));\nexport { CsvCreator };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean } from \"@ag-grid-community/core\";\nvar Downloader = /** @class */ (function () {\n    function Downloader() {\n    }\n    Downloader.prototype.download = function (fileName, content) {\n        // Internet Explorer\n        if (window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(content, fileName);\n        }\n        else {\n            // Other Browsers\n            var element = document.createElement(\"a\");\n            var url_1 = window.URL.createObjectURL(content);\n            element.setAttribute(\"href\", url_1);\n            element.setAttribute(\"download\", fileName);\n            element.style.display = \"none\";\n            document.body.appendChild(element);\n            element.dispatchEvent(new MouseEvent('click', {\n                bubbles: false,\n                cancelable: true,\n                view: window\n            }));\n            document.body.removeChild(element);\n            window.setTimeout(function () {\n                window.URL.revokeObjectURL(url_1);\n            }, 0);\n        }\n    };\n    Downloader = __decorate([\n        Bean(\"downloader\")\n    ], Downloader);\n    return Downloader;\n}());\nexport { Downloader };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean, BeanStub } from \"@ag-grid-community/core\";\nvar LINE_SEPARATOR = '\\r\\n';\nvar XmlFactory = /** @class */ (function (_super) {\n    __extends(XmlFactory, _super);\n    function XmlFactory() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    XmlFactory.prototype.createHeader = function (headerElement) {\n        if (headerElement === void 0) { headerElement = {}; }\n        var headerStart = '<?';\n        var headerEnd = '?>';\n        var keys = ['version'];\n        if (!headerElement.version) {\n            headerElement.version = \"1.0\";\n        }\n        if (headerElement.encoding) {\n            keys.push('encoding');\n        }\n        if (headerElement.standalone) {\n            keys.push('standalone');\n        }\n        var att = keys.map(function (key) { return key + \"=\\\"\" + headerElement[key] + \"\\\"\"; }).join(' ');\n        return headerStart + \"xml \" + att + \" \" + headerEnd;\n    };\n    XmlFactory.prototype.createXml = function (xmlElement, booleanTransformer) {\n        var _this = this;\n        var props = '';\n        if (xmlElement.properties) {\n            if (xmlElement.properties.prefixedAttributes) {\n                xmlElement.properties.prefixedAttributes.forEach(function (prefixedSet) {\n                    Object.keys(prefixedSet.map).forEach(function (key) {\n                        props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);\n                    });\n                });\n            }\n            if (xmlElement.properties.rawMap) {\n                Object.keys(xmlElement.properties.rawMap).forEach(function (key) {\n                    props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);\n                });\n            }\n        }\n        var result = '<' + xmlElement.name + props;\n        if (!xmlElement.children && xmlElement.textNode == null) {\n            return result + '/>' + LINE_SEPARATOR;\n        }\n        if (xmlElement.textNode != null) {\n            return result + '>' + xmlElement.textNode + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n        }\n        result += '>' + LINE_SEPARATOR;\n        if (xmlElement.children) {\n            xmlElement.children.forEach(function (it) {\n                result += _this.createXml(it, booleanTransformer);\n            });\n        }\n        return result + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n    };\n    XmlFactory.prototype.returnAttributeIfPopulated = function (key, value, booleanTransformer) {\n        if (!value && value !== '' && value !== 0) {\n            return '';\n        }\n        var xmlValue = value;\n        if ((typeof (value) === 'boolean')) {\n            if (booleanTransformer) {\n                xmlValue = booleanTransformer(value);\n            }\n        }\n        return \" \" + key + \"=\\\"\" + xmlValue + \"\\\"\";\n    };\n    XmlFactory = __decorate([\n        Bean('xmlFactory')\n    ], XmlFactory);\n    return XmlFactory;\n}(BeanStub));\nexport { XmlFactory };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean, BeanStub, _ } from \"@ag-grid-community/core\";\n// table for crc calculation\n// from: https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references\nvar crcTable = [\n    0, 1996959894, -301047508, -1727442502, 124634137, 1886057615, -379345611, -1637575261, 249268274,\n    2044508324, -522852066, -1747789432, 162941995, 2125561021, -407360249, -1866523247, 498536548,\n    1789927666, -205950648, -2067906082, 450548861, 1843258603, -187386543, -2083289657, 325883990,\n    1684777152, -43845254, -1973040660, 335633487, 1661365465, -99664541, -1928851979, 997073096,\n    1281953886, -715111964, -1570279054, 1006888145, 1258607687, -770865667, -1526024853, 901097722,\n    1119000684, -608450090, -1396901568, 853044451, 1172266101, -589951537, -1412350631, 651767980,\n    1373503546, -925412992, -1076862698, 565507253, 1454621731, -809855591, -1195530993, 671266974,\n    1594198024, -972236366, -1324619484, 795835527, 1483230225, -1050600021, -1234817731, 1994146192,\n    31158534, -1731059524, -271249366, 1907459465, 112637215, -1614814043, -390540237, 2013776290,\n    251722036, -1777751922, -519137256, 2137656763, 141376813, -1855689577, -429695999, 1802195444,\n    476864866, -2056965928, -228458418, 1812370925, 453092731, -2113342271, -183516073, 1706088902,\n    314042704, -1950435094, -54949764, 1658658271, 366619977, -1932296973, -69972891, 1303535960,\n    984961486, -1547960204, -725929758, 1256170817, 1037604311, -1529756563, -740887301, 1131014506,\n    879679996, -1385723834, -631195440, 1141124467, 855842277, -1442165665, -586318647, 1342533948,\n    654459306, -1106571248, -921952122, 1466479909, 544179635, -1184443383, -832445281, 1591671054,\n    702138776, -1328506846, -942167884, 1504918807, 783551873, -1212326853, -1061524307, -306674912,\n    -1698712650, 62317068, 1957810842, -355121351, -1647151185, 81470997, 1943803523, -480048366,\n    -1805370492, 225274430, 2053790376, -468791541, -1828061283, 167816743, 2097651377, -267414716,\n    -2029476910, 503444072, 1762050814, -144550051, -2140837941, 426522225, 1852507879, -19653770,\n    -1982649376, 282753626, 1742555852, -105259153, -1900089351, 397917763, 1622183637, -690576408,\n    -1580100738, 953729732, 1340076626, -776247311, -1497606297, 1068828381, 1219638859, -670225446,\n    -1358292148, 906185462, 1090812512, -547295293, -1469587627, 829329135, 1181335161, -882789492,\n    -1134132454, 628085408, 1382605366, -871598187, -1156888829, 570562233, 1426400815, -977650754,\n    -1296233688, 733239954, 1555261956, -1026031705, -1244606671, 752459403, 1541320221, -1687895376,\n    -328994266, 1969922972, 40735498, -1677130071, -351390145, 1913087877, 83908371, -1782625662,\n    -491226604, 2075208622, 213261112, -1831694693, -438977011, 2094854071, 198958881, -2032938284,\n    -237706686, 1759359992, 534414190, -2118248755, -155638181, 1873836001, 414664567, -2012718362,\n    -15766928, 1711684554, 285281116, -1889165569, -127750551, 1634467795, 376229701, -1609899400,\n    -686959890, 1308918612, 956543938, -1486412191, -799009033, 1231636301, 1047427035, -1362007478,\n    -640263460, 1088359270, 936918000, -1447252397, -558129467, 1202900863, 817233897, -1111625188,\n    -893730166, 1404277552, 615818150, -1160759803, -841546093, 1423857449, 601450431, -1285129682,\n    -1000256840, 1567103746, 711928724, -1274298825, -1022587231, 1510334235, 755167117\n];\nvar ZipContainer = /** @class */ (function (_super) {\n    __extends(ZipContainer, _super);\n    function ZipContainer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.folders = [];\n        _this.files = [];\n        _this.addFolder = function (path) {\n            _this.folders.push({\n                path: path,\n                created: new Date()\n            });\n        };\n        return _this;\n    }\n    ZipContainer.prototype.addFolders = function (paths) {\n        paths.forEach(this.addFolder);\n    };\n    ZipContainer.prototype.addFile = function (path, content) {\n        this.files.push({\n            path: path,\n            created: new Date(),\n            content: content\n        });\n    };\n    ZipContainer.prototype.clearStream = function () {\n        this.folders = [];\n        this.files = [];\n    };\n    ZipContainer.prototype.getContent = function (mimeType) {\n        if (mimeType === void 0) { mimeType = 'application/zip'; }\n        var textOutput = this.buildFileStream();\n        var uInt8Output = this.buildUint8Array(textOutput);\n        this.clearStream();\n        return new Blob([uInt8Output], { type: mimeType });\n    };\n    ZipContainer.prototype.buildFileStream = function (fData) {\n        if (fData === void 0) { fData = ''; }\n        var totalFiles = this.folders.concat(this.files);\n        var len = totalFiles.length;\n        var foData = '';\n        var lL = 0;\n        var cL = 0;\n        for (var _i = 0, totalFiles_1 = totalFiles; _i < totalFiles_1.length; _i++) {\n            var currentFile = totalFiles_1[_i];\n            var _a = this.getHeader(currentFile, lL), fileHeader = _a.fileHeader, folderHeader = _a.folderHeader, content = _a.content;\n            lL += fileHeader.length + content.length;\n            cL += folderHeader.length;\n            fData += fileHeader + content;\n            foData += folderHeader;\n        }\n        var foEnd = this.buildFolderEnd(len, cL, lL);\n        return fData + foData + foEnd;\n    };\n    ZipContainer.prototype.getHeader = function (currentFile, offset) {\n        var content = currentFile.content, path = currentFile.path, created = currentFile.created;\n        var utf8_encode = _.utf8_encode, decToHex = _.decToHex;\n        var utfPath = utf8_encode(path);\n        var isUTF8 = utfPath !== path;\n        var time = this.convertTime(created);\n        var dt = this.convertDate(created);\n        var extraFields = '';\n        if (isUTF8) {\n            var uExtraFieldPath = decToHex(1, 1) + decToHex(this.getFromCrc32Table(utfPath), 4) + utfPath;\n            extraFields = \"\\x75\\x70\" + decToHex(uExtraFieldPath.length, 2) + uExtraFieldPath;\n        }\n        var header = '\\x0A\\x00' +\n            (isUTF8 ? '\\x00\\x08' : '\\x00\\x00') +\n            '\\x00\\x00' +\n            decToHex(time, 2) + // last modified time\n            decToHex(dt, 2) + // last modified date\n            decToHex(content ? this.getFromCrc32Table(content) : 0, 4) +\n            decToHex(content ? content.length : 0, 4) + // compressed size\n            decToHex(content ? content.length : 0, 4) + // uncompressed size\n            decToHex(utfPath.length, 2) + // file name length\n            decToHex(extraFields.length, 2); // extra field length\n        var fileHeader = 'PK\\x03\\x04' + header + utfPath + extraFields;\n        var folderHeader = 'PK\\x01\\x02' + // central header\n            '\\x14\\x00' +\n            header + // file header\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            (content ? '\\x00\\x00\\x00\\x00' : '\\x10\\x00\\x00\\x00') + // external file attributes\n            decToHex(offset, 4) + // relative offset of local header\n            utfPath + // file name\n            extraFields; // extra field\n        return { fileHeader: fileHeader, folderHeader: folderHeader, content: content || '' };\n    };\n    ZipContainer.prototype.buildFolderEnd = function (tLen, cLen, lLen) {\n        var decToHex = _.decToHex;\n        return 'PK\\x05\\x06' + // central folder end\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            decToHex(tLen, 2) + // total number of entries in the central folder\n            decToHex(tLen, 2) + // total number of entries in the central folder\n            decToHex(cLen, 4) + // size of the central folder\n            decToHex(lLen, 4) + // central folder start offset\n            '\\x00\\x00';\n    };\n    ZipContainer.prototype.buildUint8Array = function (content) {\n        var uint8 = new Uint8Array(content.length);\n        for (var i = 0; i < uint8.length; i++) {\n            uint8[i] = content.charCodeAt(i);\n        }\n        return uint8;\n    };\n    ZipContainer.prototype.getFromCrc32Table = function (content, crc) {\n        if (crc === void 0) { crc = 0; }\n        if (!content.length) {\n            return 0;\n        }\n        crc ^= (-1);\n        var j = 0;\n        var k = 0;\n        var l = 0;\n        for (var i = 0; i < content.length; i++) {\n            j = content.charCodeAt(i);\n            k = (crc ^ j) & 0xFF;\n            l = crcTable[k];\n            crc = (crc >>> 8) ^ l;\n        }\n        return crc ^ (-1);\n    };\n    ZipContainer.prototype.convertTime = function (date) {\n        var time = date.getHours();\n        time <<= 6;\n        time = time | date.getMinutes();\n        time <<= 5;\n        time = time | date.getSeconds() / 2;\n        return time;\n    };\n    ZipContainer.prototype.convertDate = function (date) {\n        var dt = date.getFullYear() - 1980;\n        dt <<= 4;\n        dt = dt | (date.getMonth() + 1);\n        dt <<= 5;\n        dt = dt | date.getDate();\n        return dt;\n    };\n    ZipContainer = __decorate([\n        Bean('zipContainer')\n    ], ZipContainer);\n    return ZipContainer;\n}(BeanStub));\nexport { ZipContainer };\n","import { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { InfiniteRowModelModule } from '@ag-grid-community/infinite-row-model';\nimport { CsvExportModule } from '@ag-grid-community/csv-export';\nexport var AllCommunityModules = [ClientSideRowModelModule, InfiniteRowModelModule, CsvExportModule];\nexport * from \"@ag-grid-community/client-side-row-model\";\nexport * from \"@ag-grid-community/csv-export\";\nexport * from \"@ag-grid-community/infinite-row-model\";\nexport * from \"@ag-grid-community/core\";\n","import { ModuleNames } from \"@ag-grid-community/core\";\nimport { CsvCreator } from \"./csvExport/csvCreator\";\nimport { Downloader } from \"./csvExport/downloader\";\nimport { XmlFactory } from \"./csvExport/xmlFactory\";\nimport { GridSerializer } from \"./csvExport/gridSerializer\";\nimport { ZipContainer } from \"./csvExport/zipContainer\";\nexport var CsvExportModule = {\n    moduleName: ModuleNames.CsvExportModule,\n    beans: [CsvCreator, Downloader, XmlFactory, GridSerializer, ZipContainer]\n};\n","import { GridOptions } from '@ag-grid-community/all-modules';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n};\r\n"],"sourceRoot":"webpack:///"}