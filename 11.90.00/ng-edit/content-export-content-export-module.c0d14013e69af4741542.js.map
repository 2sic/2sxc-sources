{"version":3,"sources":["./src/app/content-export/content-export-dialog.config.ts","./src/app/content-export/content-export-routing.module.ts","./src/app/content-export/content-export.module.ts","./src/app/app-administration/services/app-dialog-config.service.ts","./src/app/app-administration/services/content-types.service.ts","./src/app/shared/components/dialog-entry/dialog-entry.component.ts"],"names":["contentExportDialog","name","initContext","panelSize","panelClass","getComponent","routes","path","component","data","dialog","ContentExportRoutingModule","forChild","ContentExportModule","http","context","dnnContext","getDialogSettings","this","get","$2sxc","apiUrl","webApiDialogRoot","params","appid","appId","toString","AppDialogConfigService","webApiTypeRoot","retrieveContentType","staticName","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","scopes","Object","keys","map","key","value","save","contentType","post","delete","StaticName","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService","viewContainerRef","router","route","changeDetectorRef","navigation","getCurrentNavigation","dialogData","extras","state","ngOnInit","dialogConfig","snapshot","Error","id","then","init","dialogRef","open","autoFocus","backdropClass","closeOnNavigation","showScrollbar","position","top","afterClosed","subscribe","navRes","navigateUrl","pathFromRoot","length","window","parent","totalPopup","close","error","navigate","url","relativeTo","markForCheck","ngOnDestroy","DialogEntryComponent"],"mappings":"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","file":"content-export-content-export-module.c0d14013e69af4741542.js","sourcesContent":["import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentExportDialog: DialogConfig = {\r\n  name: 'EXPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentExportComponent } = await import('./content-export.component');\r\n    return ContentExportComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentExportDialog } from './content-export-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: contentExportDialog } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentExportRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentExportRoutingModule } from './content-export-routing.module';\r\nimport { ContentExportComponent } from './content-export.component';\r\nimport { ContentExportService } from './services/content-export.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentExportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentExportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentExportRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentExportService,\r\n    AppDialogConfigService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentExportModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings() {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Dictionary } from '../../shared/models/dictionary.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Dictionary<string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { NavigateFormResult } from '../../../../../../edit/shared/models';\r\nimport { consoleLogAngular } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { Dictionary } from '../../models/dictionary.model';\r\nimport { EavWindow } from '../../models/eav-window.model';\r\nimport { Context } from '../../services/context';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: Dictionary;\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogAngular('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      if (dialogConfig.initContext) {\r\n        this.context.init(this.route);\r\n      }\r\n\r\n      this.dialogRef = this.dialog.open(component, {\r\n        autoFocus: false,\r\n        backdropClass: 'dialog-backdrop',\r\n        closeOnNavigation: false,\r\n        data: this.dialogData,\r\n        panelClass: [\r\n          'dialog-panel',\r\n          `dialog-panel-${dialogConfig.panelSize}`,\r\n          dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n          ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n        ],\r\n        // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n        // Real top margin is overwritten in css e.g. dialog-panel-large\r\n        position: { top: '0' },\r\n        viewContainerRef: this.viewContainerRef,\r\n      });\r\n\r\n      this.dialogRef.afterClosed().pipe(take(1)).subscribe((data: any) => {\r\n        consoleLogAngular('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n        const navRes = data as NavigateFormResult;\r\n        if (navRes?.navigateUrl != null) {\r\n          this.router.navigate([navRes.navigateUrl]);\r\n          return;\r\n        }\r\n\r\n        if (this.route.pathFromRoot.length <= 3) {\r\n          try {\r\n            window.parent.$2sxc.totalPopup.close();\r\n          } catch (error) { }\r\n          return;\r\n        }\r\n\r\n        if (this.route.snapshot.url.length > 0) {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n        } else {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n        }\r\n      });\r\n\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}