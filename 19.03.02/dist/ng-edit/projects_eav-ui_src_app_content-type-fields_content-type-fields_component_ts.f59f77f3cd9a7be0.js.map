{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_content-type-fields_component_ts.f59f77f3cd9a7be0.js","mappings":"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","names":["i0","ctx_r1","feature","isEnabled","_r3","clipboard","copyToClipboard","guid","_r4","dialog","close","_r1","nameId","FeatureDetailsDialogComponent_Conditional_0_Conditional_13_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_14_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_26_Template","name","description","mySpecs","showStatus","showGuid","security","Impact","Message","link","showClose","FeatureDetailsDialogComponent","constructor","dialogSpecs","this","specs","input","computedObj","transient","ClipboardService","MAT_DIALOG_DATA","i1","selectors","inputs","decls","vars","consts","template","rf","ctx","FeatureDetailsDialogComponent_Conditional_0_Template","MatCardModule","i2","MatButtonModule","i3","MatIconModule","i4","SafeHtmlPipe","TranslateModule","i5","encapsulation","_r2","ctx_r2","do","shareText","shareOrInheritIcon","_r5","field","EditInfo","DisableRename","DisableDelete","IsTitle","ContentTypeFieldsActionsComponent","agInit","params","data","disableEdit","DisableEdit","enablePermissions","InputType","InputTypeCatalog","StringWysiwyg","Type","DataTypeCatalog","Hyperlink","enableMetadata","DisableMetadata","metadataCount","Metadata","Object","keys","filter","key","length","enableImageConfig","imageConfiguration","isRecommended","imgConfigCount","entityId","highlightOrDisabled","toggle","clickToConfigure","ss","SysSettings","Share","Guid","InheritMetadataOf","refresh","verb","ContentTypeFieldsActionsComponent_Conditional_10_Template","ContentTypeFieldsActionsComponent_Conditional_11_Template","ContentTypeFieldsActionsComponent_ng_template_17_Template","Permissions","Count","menu_r6","MatRippleModule","MatBadgeModule","MatMenuModule","TippyDirective","styles","changeInputType","value","ContentTypeFieldsInputTypeComponent","onChangeInputType","ContentTypeFieldsInputTypeComponent_Conditional_0_Template","ContentTypeFieldsInputTypeComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ContentTypeFieldsSpecialComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent_Conditional_2_Template","setTitle","isTitle","suitableForTitle","ContentTypeFieldsTitleComponent","InputTypeHelpers","isEmpty","onSetTitle","ContentTypeFieldsTitleComponent_Conditional_1_Template","ContentTypeFieldsTitleComponent_Conditional_2_Template","ReadOnly","ContentTypeFieldsTypeComponent","icon","calculateTypeIcon","_c0","_c1","CdkTable_Conditional_2_Template","CdkTable_Conditional_3_Template","CdkTable_Conditional_4_Template","CDK_TABLE","InjectionToken","CdkCellDef","inject","TemplateRef","static","__ngFactoryType__","type","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","_table","optional","_hasStickyChanged","_name","_setNameInput","sticky","_sticky","stickyEnd","_stickyEnd","cell","headerCell","footerCell","cssClassFriendlyName","_columnCssClassName","hasStickyChanged","resetStickyChanged","_updateColumnCssClassName","replace","contentQueries","dirIndex","_t","first","booleanAttribute","features","provide","useExisting","BaseCdkCell","columnDef","elementRef","nativeElement","classList","add","CdkHeaderCell","super","ElementRef","hostAttrs","CdkCell","role","_getCellRole","setAttribute","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_currentSchedule","_ngZone","NgZone","schedule","task","_createScheduleIfNeeded","push","scheduleEnd","runOutsideAngular","queueMicrotask","token","factory","ɵfac","BaseRowDef","_differs","IterableDiffers","columns","_columnsDiffer","ngOnChanges","changes","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","when","CdkCellOutlet","_viewContainer","ViewContainerRef","cells","context","mostRecentCellOutlet","ngOnDestroy","CdkHeaderRow","dependencies","CdkRow","CdkNoDataRow","templateRef","_contentClassName","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_elemSizeCache","WeakMap","_resizeObserver","globalThis","ResizeObserver","entries","_updateCachedSizes","_updatedStickyColumnsParamsToReplay","_stickyColumnsReplayTimeout","_cachedCellWidths","_borderCellCss","top","bottom","left","right","clearStickyPositioning","rows","stickyDirections","includes","_removeFromStickyColumnReplayQueue","elementsToClear","row","nodeType","ELEMENT_NODE","i","children","element","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","replay","_updateStickyColumnReplayQueue","some","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","isRtl","start","end","_addStickyStyle","stickyColumnsUpdated","sizes","slice","map","width","index","stickyEndColumnsUpdated","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","from","height","_retrieveElementSize","borderedRowIndex","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","dir","style","remove","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","firstRowCells","widths","positions","nextPosition","cachedSize","get","clientRect","getBoundingClientRect","size","set","observe","box","rowsSet","Set","update","has","needsColumnUpdate","entry","newEntry","borderBoxSize","inlineSize","blockSize","contentRect","target","isCell","clearTimeout","setTimeout","klass","contains","STICKY_POSITIONING_LISTENER","DataRowOutlet","viewContainer","table","_rowOutlet","_outletAssigned","HeaderRowOutlet","_headerRowOutlet","FooterRowOutlet","_footerRowOutlet","NoDataRowOutlet","_noDataRowOutlet","CdkTable","_changeDetectorRef","ChangeDetectorRef","_elementRef","_dir","Directionality","_platform","Platform","_viewRepeater","_VIEW_REPEATER_STRATEGY","_viewportRuler","ViewportRuler","_stickyPositioningListener","skipSelf","_document","DOCUMENT","_data","_onDestroy","Subject","_renderRows","_renderChangeSubscription","_columnDefsByName","Map","_rowDefs","_headerRowDefs","_footerRowDefs","_dataDiffer","_defaultRowDef","_customColumnDefs","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_customNoDataRow","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","_stickyStyler","stickyCssClass","needsPositionStickyOnElement","_isServer","_isShowingNoDataRow","_hasAllOutlets","_hasInitialized","undefined","_cellRoleInternal","tableRole","getAttribute","trackBy","_trackByFn","fn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_multiTemplateDataRows","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","_fixedLayout","contentChanged","EventEmitter","viewChange","BehaviorSubject","Number","MAX_VALUE","_contentColumnDefs","_contentRowDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_noDataRow","_injector","Injector","HostAttributeToken","isBrowser","nodeName","ngOnInit","_setupStickyStyler","_i","dataRow","dataIndex","change","pipe","takeUntil","subscribe","ngAfterContentInit","ngAfterContentChecked","_canRender","_render","forEach","def","clear","next","complete","isDataSource","disconnect","renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","_ViewRepeaterOperation","INSERTED","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","$implicit","afterNextRender","injector","addColumnDef","removeColumnDef","delete","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","closestTableSection","display","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","_cacheRowDefs","_cacheColumnDefs","rowDefsChanged","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_observeRenderChanges","_checkStickyStates","prevCachedRenderRows","renderRowsForData","_getRenderRowsForData","j","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeArrayAndSet","_getOwnDefs","defaultRowDefs","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isObservable","isArray","of","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","outlet","view","createEmbeddedView","cellTemplate","_getCellTemplates","markForCheck","renderIndex","count","last","even","odd","columnId","stickyCheckReducer","d","items","shouldShow","container","rootNode","hostVars","hostBindings","outputs","exportAs","useClass","_DisposeViewRepeaterStrategy","useValue","ngContentSelectors","array","concat","section","uppercaseSection","toUpperCase","current","parentNode","CdkTableModule","imports","ScrollingModule","MatTable_Conditional_2_Template","MatTable_Conditional_3_Template","MatTable_Conditional_4_Template","MatTable","ɵMatTable_BaseFactory","MatCellDef","ɵMatCellDef_BaseFactory","MatHeaderCellDef","ɵMatHeaderCellDef_BaseFactory","MatColumnDef","ɵMatColumnDef_BaseFactory","MatHeaderCell","ɵMatHeaderCell_BaseFactory","MatCell","ɵMatCell_BaseFactory","MatHeaderRowDef","ɵMatHeaderRowDef_BaseFactory","MatRowDef","ɵMatRowDef_BaseFactory","MatHeaderRow","ɵMatHeaderRow_BaseFactory","MatRow","ɵMatRow_BaseFactory","MatTableModule","MatCommonModule","MatTableDataSource","DataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","filteredData","_filterData","sort","_sort","_updateChangeSubscription","paginator","_paginator","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","active","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","filterPredicate","dataStr","currentTerm","toLowerCase","transformedFilter","trim","initialData","sortChange","merge","initialized","pageChange","page","combineLatest","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","field_r2","ContentType","Name","field_r3","StaticName","field_r4","field_r6","ctx_r6","selectField","fieldNameError","newName_r10","errors","reservedNames","FieldSharingAddMany_td_45_Conditional_6_Conditional_0_Template","FieldSharingAddMany_td_45_Conditional_6_Conditional_1_Template","pattern","$event","item_r9","_r8","newName","FieldSharingAddMany_td_45_Conditional_6_Template","fieldNamePattern","i_r11","item_r12","item_r14","_r13","removeField","FieldSharingAddMany","BaseComponent","#features","#contentTypesFieldsSvc","dialogData","snackBar","matDialog","viewContainerRef","changeDetectorRef","hostClass","FeaturesService","ContentTypesFieldsService","optionsColumns","selectedColumns","shareableFields","selectedFields","saving","signalObj","#fieldShareConfigManagement","FeatureNames","ContentTypeFieldsReuseDefinitions","disableClose","subscriptions","backdropClick","form","dirty","confirm","getShareableFields","getReservedNames","names","ReservedNamesValidatorDirective","mergeReserved","existingFields","splice","save","open","inheritField","concatMap","addInheritedField","contentType","Id","catchError","_","toArray","duration","openFeatureDialog","viewQuery","NgForm","FieldSharingAddMany_th_26_Template","FieldSharingAddMany_td_27_Template","FieldSharingAddMany_th_29_Template","FieldSharingAddMany_td_30_Template","FieldSharingAddMany_th_32_Template","FieldSharingAddMany_td_33_Template","FieldSharingAddMany_th_35_Template","FieldSharingAddMany_td_36_Template","FieldSharingAddMany_tr_37_Template","FieldSharingAddMany_tr_38_Template","FieldSharingAddMany_th_44_Template","FieldSharingAddMany_td_45_Template","FieldSharingAddMany_th_47_Template","FieldSharingAddMany_td_48_Template","FieldSharingAddMany_th_50_Template","FieldSharingAddMany_td_51_Template","FieldSharingAddMany_tr_52_Template","FieldSharingAddMany_tr_53_Template","ngForm_r15","valid","FormsModule","i6","MatFormFieldModule","i7","MatInputModule","i8","MatDialogActions","i9","FeatureTextInfoComponent","FieldHintComponent","SharingOrInheriting","None","Sharing","Inheriting","ShareOrInheritDialogComponent_Case_9_ng_container_8_Template","detailsOrWarning_r3","s_r4","ShareOrInheritDialogComponent_Case_10_Conditional_4_For_2_Template","_forTrack0","inherited","s_r5","ShareOrInheritDialogComponent_Case_10_Conditional_6_For_6_Template","notInherited","ShareOrInheritDialogComponent_Case_10_Conditional_4_Template","ShareOrInheritDialogComponent_Case_10_ng_container_5_Template","ShareOrInheritDialogComponent_Case_10_Conditional_6_Template","requiredFeature","field_r7","field_r8","field_r9","row_r11","_r10","ShareOrInheritDialogComponent_Case_11_Case_20_th_11_Template","ShareOrInheritDialogComponent_Case_11_Case_20_td_12_Template","ShareOrInheritDialogComponent_Case_11_Case_20_th_14_Template","ShareOrInheritDialogComponent_Case_11_Case_20_td_15_Template","ShareOrInheritDialogComponent_Case_11_Case_20_th_17_Template","ShareOrInheritDialogComponent_Case_11_Case_20_td_18_Template","ShareOrInheritDialogComponent_Case_11_Case_20_tr_19_Template","ShareOrInheritDialogComponent_Case_11_Case_20_tr_20_Template","_r6","setShare","startInherit","ShareOrInheritDialogComponent_Case_11_Case_19_Template","ShareOrInheritDialogComponent_Case_11_Case_20_Template","sharingOrInheriting","tmp_4_0","_r12","field_r13","AttributeId","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Conditional_0_For_2_Template","_forTrack1","details","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Conditional_0_Template","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Conditional_1_Template","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Template","ShareOrInheritDialogComponent_ng_template_17_Conditional_1_Template","logSpecs","all","ShareOrInheritDialogComponent","log","classLog","signal","initialState","sysS","title","#inheritsInfo","withFieldNames","split","substring","groupBy","g","none","n","inherits","fnIf","getDescendants","fields","getAncestors","getShareableFieldsFor","share","inherit","ShareOrInheritDialogComponent_Case_9_Template","ShareOrInheritDialogComponent_Case_10_Template","ShareOrInheritDialogComponent_Case_11_Template","ShareOrInheritDialogComponent_Conditional_16_Template","ShareOrInheritDialogComponent_ng_template_17_Template","tmp_2_0","NgClass","NgTemplateOutlet","FeatureIconTextComponent","ContentTypeFieldsComponent","#dialogRouter","#contentTypesSvc","DialogRoutingService","ContentTypesService","gridOptions","#buildGridOptions","sortApplied","filterApplied","#rowDragSuppressed","#contentTypeStaticName","getParam","#gridApi","#columnApi","#fetchFields","doOnDialogClosed","onGridReady","api","columnApi","onRowDragEnter","setEnableCellTextSelection","onRowDragEnd","setSuppressRowDrag","idArray","reOrder","onRowDragMove","event","overNode","movingNode","node","newFields","fromIndex","toIndex","reordered","#moveInArray","clearFocusedCell","arr","onSortChanged","columnStates","getColumnState","#suppressRowDrag","onFilterChanged","filterModel","getFilterModel","fieldsFiltered","shouldSuppress","navRelative","addSharedField","autoFocus","afterClosed","#nameCellRenderer","inputType","endsPreviousGroup","isGroupOpen","isGroupStart","isGroupEnd","callback","contentTypeTemp","retrieveContentType","fieldsTemp","getFields","forkJoin","#editFieldMetadata","ConfigTypes","t","#createItemDefinition","formUrl","convertFormToUrl","metadataType","keyForMdLookup","newItemTypeName","existingMd","EditPrep","editId","newMetadata","eavConstants","metadata","attribute","Prefill","#setTitle","#changeInputType","#rename","#delete","#openPermissions","GoToPermissions","getUrlAttribute","#openImageConfiguration","imgConfig","Error","itemIdentifier","typeName","#openMetadata","url","GoToMetadata","#shareOrInherit","defaultGridOptions","getRowClass","rowClass","DisableSort","rowDrag","cellClass","valueGetter","p","cellRenderer","cellRendererParams","ColumnDefinitions","TextWidePrimary","headerName","onCellClicked","ItemsText","flex","minWidth","sortable","All","headerClass","Notes","ActionsPinnedRight5","tmp_0_0","Label","RouterOutlet","ToggleDebugDirective","SxcGridModule","FeatureInfoDialogComponent","#featureDetailSvc","route","FeatureDetailService","featureId","snapshot","featureDetails","getFeatureDetail","FeatureInfoDialogComponent_Conditional_0_Template","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","AppExportAssetsAdvanced","PickerUiCheckbox","PickerUiRadio","PickerSourceCsv","PickerSourceAppAssets","PickerFormulas","PickerUiMoreInfo","openDialog","FeatureComponentBase","asInfo","FeatureTextInfoComponent_Conditional_0_Template","show","webApiFeatureDetails","HttpServiceBase","getSignal","getFeatureDetails","nameIds","featureList","xx","prev","getHttpApiUrl","#matDialog","#viewContainerRef","#changeDetectorRef","#featuresService","featureNameId","required","showIf","MatDialog","getCurrent","feat","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","BooleanDefault","BooleanTristate","CustomDefault","CustomGps","CustomJsonEditor","DateTimeDefault","DefaultSuffix","EmptyDefault","EmptyEnd","EmptyMessage","EntityContentBlocks","EntityDefault","EntityQuery","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","NumberDefault","NumberDropdown","StringDefault","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","EntityPicker","StringPicker","NumberPicker","Unknown","ServiceBase","router","paramMap","getParams","getQueryParam","queryParamMap","getQueryParams","getCurrentNavigation","extras","l","childDialogClosed$","urlSubRoute","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","commands","events","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.html","./node_modules/@angular/cdk/fesm2022/table.mjs","./node_modules/@angular/material/fesm2022/table.mjs","./projects/eav-ui/src/app/content-type-fields/field-sharing-add-many/field-sharing-add-many.component.html","./projects/eav-ui/src/app/content-type-fields/field-sharing-add-many/field-sharing-add-many.component.ts","./projects/eav-ui/src/app/content-type-fields/field-sharing-configure/field-sharing-configure.enums.ts","./projects/eav-ui/src/app/content-type-fields/field-sharing-configure/field-sharing-configure.component.html","./projects/eav-ui/src/app/content-type-fields/field-sharing-configure/field-sharing-configure.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts"],"sourcesContent":["@if (feature()) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ feature().name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"feature().description | safeHtml\"></p>\r\n      <!-- Name ID -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">ID:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span (click)=\"clipboard.copyToClipboard(feature().nameId)\">{{ feature().nameId }}</span>\r\n        </div>\r\n      </div>\r\n      <!-- Status -->\r\n      @if (mySpecs().showStatus) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">{{ 'Features.Status' | translate }}:</div>\r\n          <div class=\"eav-info-row__value\">\r\n            <span>{{ (feature().isEnabled ? 'Features.Active' : 'Features.NotActive') | translate }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- GUID -->\r\n      @if (mySpecs().showGuid) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">GUID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span (click)=\"clipboard.copyToClipboard(feature().guid)\">{{ feature().guid }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- Security Rating -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Security Rating:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ feature().security.Impact + ': ' + feature().security.Message }}</span>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <a [href]=\"feature().link\" target=\"_blank\" mat-raised-button class=\"eav-card-action-button\" color=\"accent\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n        Find out more\r\n      </a>\r\n      @if (mySpecs().showClose != false) {\r\n        <button mat-raised-button class=\"eav-card-action-button\" (click)=\"dialog.close()\">Close</button>\r\n      }\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, Inject, input, Optional } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core/transient';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { computedObj } from '../../../shared/signals/signal.utilities';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\n\r\n@Component({\r\n    selector: 'app-feature-details-dialog',\r\n    templateUrl: './feature-details-dialog.component.html',\r\n    imports: [\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        SafeHtmlPipe,\r\n        TranslateModule,\r\n    ]\r\n})\r\nexport class FeatureDetailsDialogComponent {\r\n  specs = input<FeatureDetailsDialogData>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_DIALOG_DATA) private dialogSpecs: FeatureDetailsDialogData,\r\n    protected dialog: MatDialogRef<FeatureDetailsDialogComponent>,\r\n  ) { }\r\n\r\n  protected mySpecs = computedObj('mySpecs', () =>  this.specs() ?? this.dialogSpecs );\r\n  protected feature = computedObj('feature', () => this.mySpecs()?.feature);\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","<div class=\"actions-component\">\r\n  <!-- Metadata Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableMetadata) }}\"\r\n    matRipple tippy=\"Metadata\"\r\n    (click)=\"enableMetadata ? do('metadata') : ''\"\r\n  >\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enableMetadata\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n    >local_offer</mat-icon>\r\n  </div>\r\n\r\n  <!-- Image Config Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableImageConfig) }}\"\r\n    matRipple\r\n    tippy=\"{{ enableImageConfig ? 'Image Configuration' : 'no image configuration for this field' }}\"\r\n    (click)=\"enableImageConfig ? do('image') : ''\">\r\n    <mat-icon [matBadge]=\"imgConfigCount\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!imgConfigCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      matBadgeColor=\"accent\" [matBadgeDisabled]=\"!enableImageConfig\"\r\n      >filter_center_focus</mat-icon>\r\n  </div>\r\n\r\n  <!-- Permissions Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enablePermissions) }}\"\r\n    matRipple\r\n    tippy=\"{{ enablePermissions ? 'Permissions' : 'no permissions to configure on this field' }}\"\r\n    (click)=\"enablePermissions ? do('permissions') : ''\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enablePermissions\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      >person</mat-icon>\r\n  </div>\r\n\r\n\r\n  <!-- Share Button -->\r\n  @if (shareOrInheritIcon() != '') {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\">\r\n        {{ shareOrInheritIcon() }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled eav-hover-icon-div\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\" class=\"eav-hover-icon disabled\">\r\n        share\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <!-- More Button -->\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<!-- More Menu -->\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableRename\" (click)=\"do('rename')\">\r\n      <mat-icon>text_fields</mat-icon>\r\n      <span>Rename</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableDelete || field.IsTitle\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { InputTypeCatalog } from '../../shared/fields/input-type-catalog';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsActions, ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-actions',\r\n    templateUrl: './content-type-fields-actions.component.html',\r\n    styleUrls: ['./content-type-fields-actions.component.scss'],\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatBadgeModule,\r\n        MatMenuModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentTypeFieldsActionsComponent implements ICellRendererAngularComp {\r\n  field: Field;\r\n  metadataCount: number;\r\n  enablePermissions: boolean;\r\n  enableMetadata: boolean;\r\n\r\n  enableImageConfig: boolean;\r\n  imgConfigCount: number;\r\n  private params: ICellRendererParams & ContentTypeFieldsActionsParams;\r\n\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsActionsParams): void {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    const disableEdit = this.field.EditInfo.DisableEdit;\r\n\r\n    this.enablePermissions = !disableEdit && (this.field.InputType === InputTypeCatalog.StringWysiwyg || this.field.Type === DataTypeCatalog.Hyperlink);\r\n    this.enableMetadata = !this.field.EditInfo.DisableMetadata;\r\n    this.metadataCount = this.field.Metadata ? Object.keys(this.field.Metadata).filter(key => key !== 'merged').length : 0;\r\n\r\n    this.enableImageConfig = !disableEdit && this.field.imageConfiguration.isRecommended;\r\n    this.imgConfigCount = this.field.imageConfiguration.entityId ? 1 : 0;\r\n  }\r\n\r\n  highlightOrDisabled(toggle: boolean): string {\r\n    return toggle ? 'highlight' : 'disabled';\r\n  }\r\n\r\n  // #region Sharing Info for better icons #SharedFieldDefinition\r\n\r\n  shareText(): string {\r\n    const clickToConfigure = 'click to configure sharing';\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return clickToConfigure;\r\n    return ss.Share\r\n      ? 'shared enabled as ' + this.field.Guid\r\n      : ss.InheritMetadataOf\r\n        ? 'inherits ' + ss.InheritMetadataOf\r\n        : clickToConfigure;\r\n  }\r\n\r\n  shareOrInheritIcon(): string {\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return '';\r\n    return ss.Share\r\n      ? 'share'\r\n      : ss.InheritMetadataOf ? 'adjust' : '';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentTypeFieldsActions): void {\r\n    this.params.do(verb, this.field);\r\n  }\r\n\r\n}\r\n","@if (!field.EditInfo.DisableEdit) {\r\n  <div matRipple class=\"input-component highlight\" (click)=\"changeInputType()\">\r\n    <div class=\"text\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n@if (field.EditInfo.DisableEdit) {\r\n  <div class=\"input-component disabled\">\r\n    <div class=\"text disabled\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type.models';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-input-type',\r\n    templateUrl: './content-type-fields-input-type.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n    ]\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  field: Field;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsInputTypeParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsInputTypeParams): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  changeInputType(): void {\r\n    this.params.onChangeInputType(this.field);\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  @if (hasFormulas) {\r\n    <mat-icon tippy=\"Has Formulas\">functions</mat-icon>\r\n  }\r\n  @if (isEphemeral) {\r\n    <mat-icon tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Field } from '../../shared/fields/field.model';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-special',\r\n    templateUrl: './content-type-fields-special.component.html',\r\n    imports: [MatIconModule,]\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  @if (!field.EditInfo.ReadOnly)\r\n  {\r\n    <div class=\"eav-grid-action-button highlight {{ isTitle ? '' : suitableForTitle ? 'hover-only' : 'no-button' }}\"\r\n      [attr.disabled]=\"isTitle || !suitableForTitle\"\r\n      matRipple\r\n      tippy=\"Use as title field\"\r\n      (click)=\"setTitle()\"\r\n    >\r\n      <mat-icon>star</mat-icon>\r\n    </div>\r\n  }\r\n  @else\r\n  {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>{{ isTitle ? 'star' : '' }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { InputTypeHelpers } from '../../shared/fields/input-type-helpers';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title.models';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-title',\r\n    templateUrl: './content-type-fields-title.component.html',\r\n    styleUrls: ['./content-type-fields-title.component.scss'],\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n\r\n  isTitle: boolean;\r\n\r\n  field: Field;\r\n\r\n  suitableForTitle = true;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsTitleParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsTitleParams): void {\r\n    this.params = params;\r\n    this.isTitle = params.value;\r\n    this.field = params.data;\r\n\r\n    this.suitableForTitle = !InputTypeHelpers.isEmpty(this.field.InputType)\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  setTitle(): void {\r\n    if (this.suitableForTitle)\r\n      this.params.onSetTitle(this.field);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-type',\r\n    templateUrl: './content-type-fields-type.component.html',\r\n    imports: [\r\n        MatIconModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","import { Directionality } from '@angular/cdk/bidi';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _ViewRepeaterOperation, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, TemplateRef, Directive, booleanAttribute, Input, ContentChild, ElementRef, NgZone, Injectable, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, ChangeDetectorRef, EventEmitter, Injector, HostAttributeToken, afterNextRender, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /** @docs-private */\n    template = inject(TemplateRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkCellDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkCellDef, isStandalone: true, selector: \"[cdkCellDef]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellDef]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /** @docs-private */\n    template = inject(TemplateRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkHeaderCellDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkHeaderCellDef, isStandalone: true, selector: \"[cdkHeaderCellDef]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderCellDef]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /** @docs-private */\n    template = inject(TemplateRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkFooterCellDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkFooterCellDef, isStandalone: true, selector: \"[cdkFooterCellDef]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterCellDef]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    _hasStickyChanged = false;\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    _name;\n    /** Whether the cell is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _sticky = false;\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(value) {\n        if (value !== this._stickyEnd) {\n            this._stickyEnd = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _stickyEnd = false;\n    /** @docs-private */\n    cell;\n    /** @docs-private */\n    headerCell;\n    /** @docs-private */\n    footerCell;\n    /**\n     * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n     * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n     * do not match are replaced by the '-' character.\n     */\n    cssClassFriendlyName;\n    /**\n     * Class name for cells in this column.\n     * @docs-private\n     */\n    _columnCssClassName;\n    constructor() { }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkColumnDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: CdkColumnDef, isStandalone: true, selector: \"[cdkColumnDef]\", inputs: { name: [\"cdkColumnDef\", \"name\"], sticky: [\"sticky\", \"sticky\", booleanAttribute], stickyEnd: [\"stickyEnd\", \"stickyEnd\", booleanAttribute] }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], sticky: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], stickyEnd: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor() {\n        super(inject(CdkColumnDef), inject(ElementRef));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkHeaderCell, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkHeaderCell, isStandalone: true, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor() {\n        const columnDef = inject(CdkColumnDef);\n        const elementRef = inject(ElementRef);\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkFooterCell, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkFooterCell, isStandalone: true, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor() {\n        const columnDef = inject(CdkColumnDef);\n        const elementRef = inject(ElementRef);\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkCell, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkCell, isStandalone: true, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * @docs-private\n */\nclass _Schedule {\n    tasks = [];\n    endTasks = [];\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    _currentSchedule = null;\n    _ngZone = inject(NgZone);\n    constructor() { }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._ngZone.runOutsideAngular(() => \n        // TODO(mmalerba): Scheduling this using something that runs less frequently\n        //  (e.g. requestAnimationFrame, setTimeout, etc.) causes noticeable jank with the column\n        //  resizer. We should audit the usages of schedule / scheduleEnd in that component and see\n        //  if we can refactor it so that we don't need to flush the tasks quite so frequently.\n        queueMicrotask(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        }));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _CoalescedStyleScheduler, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _CoalescedStyleScheduler });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _CoalescedStyleScheduler, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [] });\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    template = inject(TemplateRef);\n    _differs = inject(IterableDiffers);\n    /** The columns to be displayed on this row. */\n    columns;\n    /** Differ used to check if any changes were made to the columns. */\n    _columnsDiffer;\n    constructor() { }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: BaseRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: BaseRowDef, isStandalone: true, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [] });\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends BaseRowDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    _hasStickyChanged = false;\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _sticky = false;\n    constructor() {\n        super(inject(TemplateRef), inject(IterableDiffers));\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkHeaderRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: CdkHeaderRowDef, isStandalone: true, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkHeaderRowDef' }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkHeaderRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends BaseRowDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    _hasStickyChanged = false;\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _sticky = false;\n    constructor() {\n        super(inject(TemplateRef), inject(IterableDiffers));\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkFooterRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: CdkFooterRowDef, isStandalone: true, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkFooterRowDef' }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkFooterRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    /**\n     * Function that should return true if this row template should be used for the provided index\n     * and row data. If left undefined, this row will be considered the default row template to use\n     * when no other when functions return true for the data.\n     * For every row, there must be at least one when function that passes or an undefined to default.\n     */\n    when;\n    constructor() {\n        // TODO(andrewseguin): Add an input for providing a switch function to determine\n        //   if this template should be used.\n        super(inject(TemplateRef), inject(IterableDiffers));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkRowDef, isStandalone: true, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: [\n                        { name: 'columns', alias: 'cdkRowDefColumns' },\n                        { name: 'when', alias: 'cdkRowDefWhen' },\n                    ],\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    _viewContainer = inject(ViewContainerRef);\n    /** The ordered list of cells to render within this outlet's view container */\n    cells;\n    /** The data context to be provided to each cell */\n    context;\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static mostRecentCellOutlet = null;\n    constructor() {\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkCellOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkCellOutlet, isStandalone: true, selector: \"[cdkCellOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkHeaderRow, isStandalone: true, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkFooterRow, isStandalone: true, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkRow, isStandalone: true, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    templateRef = inject(TemplateRef);\n    _contentClassName = 'cdk-no-data-row';\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkNoDataRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkNoDataRow, isStandalone: true, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    _isNativeHtmlTable;\n    _stickCellCss;\n    direction;\n    _coalescedStyleScheduler;\n    _isBrowser;\n    _needsPositionStickyOnElement;\n    _positionListener;\n    _elemSizeCache = new WeakMap();\n    _resizeObserver = globalThis?.ResizeObserver\n        ? new globalThis.ResizeObserver(entries => this._updateCachedSizes(entries))\n        : null;\n    _updatedStickyColumnsParamsToReplay = [];\n    _stickyColumnsReplayTimeout = null;\n    _cachedCellWidths = [];\n    _borderCellCss;\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        if (stickyDirections.includes('left') || stickyDirections.includes('right')) {\n            this._removeFromStickyColumnReplayQueue(rows);\n        }\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     * @param replay Whether to enqueue this call for replay after a ResizeObserver update.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true, replay = true) {\n        if (replay) {\n            this._updateStickyColumnReplayQueue({\n                rows: [...rows],\n                stickyStartStates: [...stickyStartStates],\n                stickyEndStates: [...stickyEndStates],\n            });\n        }\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const firstRow = rows[0];\n            const numCells = firstRow.children.length;\n            const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n            const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n            const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n            const lastStickyStart = stickyStartStates.lastIndexOf(true);\n            const firstStickyEnd = stickyEndStates.indexOf(true);\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1\n                        ? []\n                        : cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => (stickyStartStates[index] ? width : null)),\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1\n                        ? []\n                        : cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                            .reverse(),\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n            // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n            // sticky states need to be reversed as well.\n            const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n            const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n            // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n            const stickyOffsets = [];\n            const stickyCellHeights = [];\n            const elementsToStick = [];\n            for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                stickyOffsets[rowIndex] = stickyOffset;\n                const row = rows[rowIndex];\n                elementsToStick[rowIndex] = this._isNativeHtmlTable\n                    ? Array.from(row.children)\n                    : [row];\n                const height = this._retrieveElementSize(row).height;\n                stickyOffset += height;\n                stickyCellHeights[rowIndex] = height;\n            }\n            const borderedRowIndex = states.lastIndexOf(true);\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                this._positionListener?.stickyHeaderRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n            else {\n                this._positionListener?.stickyFooterRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const tfoot = tableElement.querySelector('tfoot');\n            if (tfoot) {\n                if (stickyStates.some(state => !state)) {\n                    this._removeStickyStyle(tfoot, ['bottom']);\n                }\n                else {\n                    this._addStickyStyle(tfoot, 'bottom', 0, false);\n                }\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            const cell = firstRowCells[i];\n            cellWidths.push(this._retrieveElementSize(cell).width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Retreives the most recently observed size of the specified element from the cache, or\n     * meaures it directly if not yet cached.\n     */\n    _retrieveElementSize(element) {\n        const cachedSize = this._elemSizeCache.get(element);\n        if (cachedSize) {\n            return cachedSize;\n        }\n        const clientRect = element.getBoundingClientRect();\n        const size = { width: clientRect.width, height: clientRect.height };\n        if (!this._resizeObserver) {\n            return size;\n        }\n        this._elemSizeCache.set(element, size);\n        this._resizeObserver.observe(element, { box: 'border-box' });\n        return size;\n    }\n    /**\n     * Conditionally enqueue the requested sticky update and clear previously queued updates\n     * for the same rows.\n     */\n    _updateStickyColumnReplayQueue(params) {\n        this._removeFromStickyColumnReplayQueue(params.rows);\n        // No need to replay if a flush is pending.\n        if (this._stickyColumnsReplayTimeout) {\n            return;\n        }\n        this._updatedStickyColumnsParamsToReplay.push(params);\n    }\n    /** Remove updates for the specified rows from the queue. */\n    _removeFromStickyColumnReplayQueue(rows) {\n        const rowsSet = new Set(rows);\n        for (const update of this._updatedStickyColumnsParamsToReplay) {\n            update.rows = update.rows.filter(row => !rowsSet.has(row));\n        }\n        this._updatedStickyColumnsParamsToReplay = this._updatedStickyColumnsParamsToReplay.filter(update => !!update.rows.length);\n    }\n    /** Update _elemSizeCache with the observed sizes. */\n    _updateCachedSizes(entries) {\n        let needsColumnUpdate = false;\n        for (const entry of entries) {\n            const newEntry = entry.borderBoxSize?.length\n                ? {\n                    width: entry.borderBoxSize[0].inlineSize,\n                    height: entry.borderBoxSize[0].blockSize,\n                }\n                : {\n                    width: entry.contentRect.width,\n                    height: entry.contentRect.height,\n                };\n            if (newEntry.width !== this._elemSizeCache.get(entry.target)?.width &&\n                isCell(entry.target)) {\n                needsColumnUpdate = true;\n            }\n            this._elemSizeCache.set(entry.target, newEntry);\n        }\n        if (needsColumnUpdate && this._updatedStickyColumnsParamsToReplay.length) {\n            if (this._stickyColumnsReplayTimeout) {\n                clearTimeout(this._stickyColumnsReplayTimeout);\n            }\n            this._stickyColumnsReplayTimeout = setTimeout(() => {\n                for (const update of this._updatedStickyColumnsParamsToReplay) {\n                    this.updateStickyColumns(update.rows, update.stickyStartStates, update.stickyEndStates, true, false);\n                }\n                this._updatedStickyColumnsParamsToReplay = [];\n                this._stickyColumnsReplayTimeout = null;\n            }, 0);\n        }\n    }\n}\nfunction isCell(element) {\n    return ['cdk-cell', 'cdk-header-cell', 'cdk-footer-cell'].some(klass => element.classList.contains(klass));\n}\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkRecycleRows, isStandalone: true, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._rowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: DataRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: DataRowOutlet, isStandalone: true, selector: \"[rowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[rowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._headerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: HeaderRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: HeaderRowOutlet, isStandalone: true, selector: \"[headerRowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[headerRowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._footerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: FooterRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: FooterRowOutlet, isStandalone: true, selector: \"[footerRowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[footerRowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._noDataRowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: NoDataRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: NoDataRowOutlet, isStandalone: true, selector: \"[noDataRowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[noDataRowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"/>\n  <ng-content select=\"colgroup, col\"/>\n\n  <!--\n    Unprojected content throws a hydration error so we need this to capture it.\n    It gets removed on the client so it doesn't affect the layout.\n  -->\n  @if (_isServer) {\n    <ng-content/>\n  }\n\n  @if (_isNativeHtmlTable) {\n    <thead role=\"rowgroup\">\n      <ng-container headerRowOutlet/>\n    </thead>\n    <tbody role=\"rowgroup\">\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n    </tbody>\n    <tfoot role=\"rowgroup\">\n      <ng-container footerRowOutlet/>\n    </tfoot>\n  } @else {\n    <ng-container headerRowOutlet/>\n    <ng-container rowOutlet/>\n    <ng-container noDataRowOutlet/>\n    <ng-container footerRowOutlet/>\n  }\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    _differs = inject(IterableDiffers);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dir = inject(Directionality, { optional: true });\n    _platform = inject(Platform);\n    _viewRepeater = inject(_VIEW_REPEATER_STRATEGY);\n    _coalescedStyleScheduler = inject(_COALESCED_STYLE_SCHEDULER);\n    _viewportRuler = inject(ViewportRuler);\n    _stickyPositioningListener = inject(STICKY_POSITIONING_LISTENER, { optional: true, skipSelf: true });\n    _document = inject(DOCUMENT);\n    /** Latest data provided by the data source. */\n    _data;\n    /** Subject that emits when the component has been destroyed. */\n    _onDestroy = new Subject();\n    /** List of the rendered rows as identified by their `RenderRow` object. */\n    _renderRows;\n    /** Subscription that listens for the data provided by the data source. */\n    _renderChangeSubscription;\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n    _columnDefsByName = new Map();\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n     */\n    _rowDefs;\n    /**\n     * Set of all header row definitions that can be used by this table. Populated by the rows\n     * gathered by using `ContentChildren` as well as any custom row definitions added to\n     * `_customHeaderRowDefs`.\n     */\n    _headerRowDefs;\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to\n     * `_customFooterRowDefs`.\n     */\n    _footerRowDefs;\n    /** Differ used to find the changes in the data provided by the data source. */\n    _dataDiffer;\n    /** Stores the row definition that does not have a when predicate. */\n    _defaultRowDef;\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     */\n    _customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     */\n    _customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     */\n    _customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     */\n    _customFooterRowDefs = new Set();\n    /** No data row that was defined outside of the direct content children of the table. */\n    _customNoDataRow;\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    _headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    _footerRowDefChanged = true;\n    /**\n     * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n     * change.\n     */\n    _stickyColumnStylesNeedReset = true;\n    /**\n     * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n     * `false`, cached values will be used instead. This is only applicable to tables with\n     * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n     */\n    _forceRecalculateCellWidths = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n    _cachedRenderRowsMap = new Map();\n    /** Whether the table is applied to a native `<table>`. */\n    _isNativeHtmlTable;\n    /**\n     * Utility class that is responsible for applying the appropriate sticky positioning styles to\n     * the table's rows and cells.\n     */\n    _stickyStyler;\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n     * table subclasses.\n     */\n    stickyCssClass = 'cdk-table-sticky';\n    /**\n     * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n     * the position is set in a selector associated with the value of stickyCssClass. May be\n     * overridden by table subclasses\n     */\n    needsPositionStickyOnElement = true;\n    /** Whether the component is being rendered on the server. */\n    _isServer;\n    /** Whether the no data row is currently showing anything. */\n    _isShowingNoDataRow = false;\n    /** Whether the table has rendered out all the outlets for the first time. */\n    _hasAllOutlets = false;\n    /** Whether the table is done initializing. */\n    _hasInitialized = false;\n    /** Aria role to apply to the table's cells based on the table's own role. */\n    _getCellRole() {\n        // Perform this lazily in case the table's role was updated by a directive after construction.\n        if (this._cellRoleInternal === undefined) {\n            // Note that we set `role=\"cell\"` even on native `td` elements,\n            // because some browsers seem to require it. See #29784.\n            const tableRole = this._elementRef.nativeElement.getAttribute('role');\n            return tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n        }\n        return this._cellRoleInternal;\n    }\n    _cellRoleInternal = undefined;\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    _trackByFn;\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    _dataSource;\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(value) {\n        this._multiTemplateDataRows = value;\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    _multiTemplateDataRows = false;\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(value) {\n        this._fixedLayout = value;\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    _fixedLayout = false;\n    /**\n     * Emits when the table completes rendering a set of data rows based on the latest data from the\n     * data source, even if the set of rows is empty.\n     */\n    contentChanged = new EventEmitter();\n    // TODO(andrewseguin): Remove max value as the end index\n    //   and instead calculate the view on init and scroll.\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * @docs-private\n     */\n    viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE,\n    });\n    // Outlets in the table's template where the header, data rows, and footer will be inserted.\n    _rowOutlet;\n    _headerRowOutlet;\n    _footerRowOutlet;\n    _noDataRowOutlet;\n    /**\n     * The column definitions provided by the user that contain what the header, data, and footer\n     * cells should render for each column.\n     */\n    _contentColumnDefs;\n    /** Set of data row definitions that were provided to the table as content children. */\n    _contentRowDefs;\n    /** Set of header row definitions that were provided to the table as content children. */\n    _contentHeaderRowDefs;\n    /** Set of footer row definitions that were provided to the table as content children. */\n    _contentFooterRowDefs;\n    /** Row definition that will only be rendered if there's no data in the table. */\n    _noDataRow;\n    _injector = inject(Injector);\n    constructor() {\n        const role = inject(new HostAttributeToken('role'), { optional: true });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentInit() {\n        this._hasInitialized = true;\n    }\n    ngAfterContentChecked() {\n        // Only start re-rendering in `ngAfterContentChecked` after the first render.\n        if (this._canRender()) {\n            this._render();\n        }\n    }\n    ngOnDestroy() {\n        [\n            this._rowOutlet?.viewContainer,\n            this._headerRowOutlet?.viewContainer,\n            this._footerRowOutlet?.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach((def) => {\n            def?.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        afterNextRender(() => {\n            this.updateStickyColumnStyles();\n        }, { injector: this._injector });\n        this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const thead = closestTableSection(this._headerRowOutlet, 'thead');\n            if (thead) {\n                thead.style.display = headerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const tfoot = closestTableSection(this._footerRowOutlet, 'tfoot');\n            if (tfoot) {\n                tfoot.style.display = footerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /** Invoked whenever an outlet is created and has been assigned to the table. */\n    _outletAssigned() {\n        // Trigger the first render once all outlets have been assigned. We do it this way, as\n        // opposed to waiting for the next `ngAfterContentChecked`, because we don't know when\n        // the next change detection will happen.\n        // Also we can't use queries to resolve the outlets, because they're wrapped in a\n        // conditional, so we have to rely on them being assigned via DI.\n        if (!this._hasAllOutlets &&\n            this._rowOutlet &&\n            this._headerRowOutlet &&\n            this._footerRowOutlet &&\n            this._noDataRowOutlet) {\n            this._hasAllOutlets = true;\n            // In some setups this may fire before `ngAfterContentInit`\n            // so we need a check here. See #28538.\n            if (this._canRender()) {\n                this._render();\n            }\n        }\n    }\n    /** Whether the table has all the information to start rendering. */\n    _canRender() {\n        return this._hasAllOutlets && this._hasInitialized;\n    }\n    /** Renders the table if its state has changed. */\n    _render() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => {\n            // The differ should be run for every column, even if `acc` is already\n            // true (see #29922)\n            const diff = !!def.getColumnsDiff();\n            return acc || diff;\n        };\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            if (this._rowOutlet) {\n                this._rowOutlet.viewContainer.clear();\n            }\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n        this._changeDetectorRef.markForCheck();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkTable, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.0.0\", type: CdkTable, isStandalone: true, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: [\"multiTemplateDataRows\", \"multiTemplateDataRows\", booleanAttribute], fixedLayout: [\"fixedLayout\", \"fixedLayout\", booleanAttribute] }, outputs: { contentChanged: \"contentChanged\" }, host: { properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"/>\\n  <ng-content select=\\\"colgroup, col\\\"/>\\n\\n  <!--\\n    Unprojected content throws a hydration error so we need this to capture it.\\n    It gets removed on the client so it doesn't affect the layout.\\n  -->\\n  @if (_isServer) {\\n    <ng-content/>\\n  }\\n\\n  @if (_isNativeHtmlTable) {\\n    <thead role=\\\"rowgroup\\\">\\n      <ng-container headerRowOutlet/>\\n    </thead>\\n    <tbody role=\\\"rowgroup\\\">\\n      <ng-container rowOutlet/>\\n      <ng-container noDataRowOutlet/>\\n    </tbody>\\n    <tfoot role=\\\"rowgroup\\\">\\n      <ng-container footerRowOutlet/>\\n    </tfoot>\\n  } @else {\\n    <ng-container headerRowOutlet/>\\n    <ng-container rowOutlet/>\\n    <ng-container noDataRowOutlet/>\\n    <ng-container footerRowOutlet/>\\n  }\\n\", isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"] }]\n        }], ctorParameters: () => [], propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], fixedLayout: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], contentChanged: [{\n                type: Output\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n/**\n * Finds the closest table section to an outlet. We can't use `HTMLElement.closest` for this,\n * because the node representing the outlet is a comment.\n */\nfunction closestTableSection(outlet, section) {\n    const uppercaseSection = section.toUpperCase();\n    let current = outlet.viewContainer.element.nativeElement;\n    while (current) {\n        // 1 is an element node.\n        const nodeName = current.nodeType === 1 ? current.nodeName : null;\n        if (nodeName === uppercaseSection) {\n            return current;\n        }\n        else if (nodeName === 'TABLE') {\n            // Stop traversing past the `table` node.\n            break;\n        }\n        current = current.parentNode;\n    }\n    return null;\n}\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    _table = inject(CdkTable, { optional: true });\n    _options = inject(TEXT_COLUMN_OPTIONS, { optional: true });\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    _name;\n    /**\n     * Text label that should be used for the column header. If this property is not\n     * set, the header text will default to the column name with its first letter capitalized.\n     */\n    headerText;\n    /**\n     * Accessor function to retrieve the data rendered for each cell. If this\n     * property is not set, the data cells will render the value found in the data's property matching\n     * the column's name. For example, if the column is named `id`, then the rendered value will be\n     * value defined by the data's `id` property.\n     */\n    dataAccessor;\n    /** Alignment of the cell values. */\n    justify = 'start';\n    /** @docs-private */\n    columnDef;\n    /**\n     * The column cell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * @docs-private\n     */\n    cell;\n    /**\n     * The column headerCell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * @docs-private\n     */\n    headerCell;\n    constructor() {\n        this._options = this._options || {};\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkTextColumn, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkTextColumn, isStandalone: true, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"cdkColumnDef\", \"sticky\", \"stickyEnd\"] }, { kind: \"directive\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { kind: \"directive\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }, { kind: \"directive\", type: CdkCellDef, selector: \"[cdkCellDef]\" }, { kind: \"directive\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    imports: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n                }]\n        }], ctorParameters: () => [], propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule, CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet], exports: [CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule, ...EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n * @deprecated Implement the `CanStick` interface instead.\n * @breaking-change 19.0.0\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /** Whether sticky positioning should be applied. */\n        get sticky() {\n            return this._sticky;\n        }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        _sticky = false;\n        /** Whether the sticky input has changed since it was last checked. */\n        _hasStickyChanged = false;\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n        constructor(...args) {\n            super(...args);\n        }\n    };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, booleanAttribute, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CdkCellOutlet, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy, DataSource } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { map } from 'rxjs/operators';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass MatRecycleRows {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatRecycleRows, isStandalone: true, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\nclass MatTable extends CdkTable {\n    /** Overrides the sticky CSS class set by the `CdkTable`. */\n    stickyCssClass = 'mat-mdc-table-sticky';\n    /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n    needsPositionStickyOnElement = false;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatTable, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.0.0\", type: MatTable, isStandalone: true, selector: \"mat-table, table[mat-table]\", host: { properties: { \"class.mdc-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-mdc-table mdc-data-table__table\" }, providers: [\n            { provide: CdkTable, useExisting: MatTable },\n            { provide: CDK_TABLE, useExisting: MatTable },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n            //  is only included in the build if used.\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, isInline: true, styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-sys-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-sys-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-sys-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-sys-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-sys-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-sys-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-sys-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, host: {\n                        'class': 'mat-mdc-table mdc-data-table__table',\n                        '[class.mdc-table-fixed-layout]': 'fixedLayout',\n                    }, providers: [\n                        { provide: CdkTable, useExisting: MatTable },\n                        { provide: CDK_TABLE, useExisting: MatTable },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                        //  is only included in the build if used.\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-sys-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-sys-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-sys-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-sys-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-sys-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-sys-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-sys-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"] }]\n        }] });\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatCellDef, isStandalone: true, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatCellDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }],\n                }]\n        }] });\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatHeaderCellDef, isStandalone: true, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }],\n                }]\n        }] });\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatFooterCellDef, isStandalone: true, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }],\n                }]\n        }] });\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatColumnDef, isStandalone: true, selector: \"[matColumnDef]\", inputs: { name: [\"matColumnDef\", \"name\"] }, providers: [\n            { provide: CdkColumnDef, useExisting: MatColumnDef },\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n        ], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matColumnDef]',\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n                    ],\n                }]\n        }], propDecorators: { name: [{\n                type: Input,\n                args: ['matColumnDef']\n            }] } });\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatHeaderCell, isStandalone: true, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-mdc-header-cell mdc-data-table__header-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }] });\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatFooterCell, isStandalone: true, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { classAttribute: \"mat-mdc-footer-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-mdc-footer-cell mdc-data-table__cell',\n                    },\n                }]\n        }] });\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatCell, isStandalone: true, selector: \"mat-cell, td[mat-cell]\", host: { classAttribute: \"mat-mdc-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-mdc-cell mdc-data-table__cell',\n                    },\n                }]\n        }] });\n\n// We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatHeaderRowDef, isStandalone: true, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matHeaderRowDef' },\n                        { name: 'sticky', alias: 'matHeaderRowDefSticky', transform: booleanAttribute },\n                    ],\n                }]\n        }] });\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatFooterRowDef, isStandalone: true, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matFooterRowDef' },\n                        { name: 'sticky', alias: 'matFooterRowDefSticky', transform: booleanAttribute },\n                    ],\n                }]\n        }] });\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatRowDef, isStandalone: true, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatRowDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matRowDefColumns' },\n                        { name: 'when', alias: 'matRowDefWhen' },\n                    ],\n                }]\n        }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatHeaderRow, isStandalone: true, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-header-row mdc-data-table__header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-header-row, tr[mat-header-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-header-row mdc-data-table__header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatFooterRow, isStandalone: true, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-footer-row mdc-data-table__row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-footer-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatRow, isStandalone: true, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-row mdc-data-table__row\" }, providers: [{ provide: CdkRow, useExisting: MatRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-row, tr[mat-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n    _contentClassName = 'mat-mdc-no-data-row';\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatNoDataRow, isStandalone: true, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matNoDataRow]',\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }],\n                }]\n        }] });\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatTextColumn, isStandalone: true, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"matColumnDef\"] }, { kind: \"directive\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: MatCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: MatCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-text-column',\n                    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    imports: [MatColumnDef, MatHeaderCellDef, MatHeaderCell, MatCellDef, MatCell],\n                }]\n        }] });\n\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    MatRecycleRows,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn], exports: [MatCommonModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CdkTableModule, ...EXPORTED_DECLARATIONS],\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends DataSource {\n    /** Stream that emits when a new data array is set on the data source. */\n    _data;\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n    _renderData = new BehaviorSubject([]);\n    /** Stream that emits when a new filter string is set on the data source. */\n    _filter = new BehaviorSubject('');\n    /** Used to react to internal changes of the paginator that are made by the data source itself. */\n    _internalPageChanges = new Subject();\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n    _renderChangesSubscription = null;\n    /**\n     * The filtered set of data that has been matched by the filter string, or all the data if there\n     * is no filter. Useful for knowing the set of data the table represents.\n     * For example, a 'selectAll()' function would likely want to select the set of filtered data\n     * shown to the user rather than all the data.\n     */\n    filteredData;\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() {\n        return this._data.value;\n    }\n    set data(data) {\n        data = Array.isArray(data) ? data : [];\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() {\n        return this._filter.value;\n    }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() {\n        return this._sort;\n    }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    _sort;\n    /**\n     * Instance of the paginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the paginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() {\n        return this._paginator;\n    }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    _paginator;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n    sortingDataAccessor = (data, sortHeaderId) => {\n        const value = data[sortHeaderId];\n        if (_isNumberValue(value)) {\n            const numberValue = Number(value);\n            // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we leave them as strings.\n            // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n            return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n        }\n        return value;\n    };\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n    sortData = (data, sort) => {\n        const active = sort.active;\n        const direction = sort.direction;\n        if (!active || direction == '') {\n            return data;\n        }\n        return data.sort((a, b) => {\n            let valueA = this.sortingDataAccessor(a, active);\n            let valueB = this.sortingDataAccessor(b, active);\n            // If there are data in the column that can be converted to a number,\n            // it must be ensured that the rest of the data\n            // is of the same type so as not to order incorrectly.\n            const valueAType = typeof valueA;\n            const valueBType = typeof valueB;\n            if (valueAType !== valueBType) {\n                if (valueAType === 'number') {\n                    valueA += '';\n                }\n                if (valueBType === 'number') {\n                    valueB += '';\n                }\n            }\n            // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n            // one value exists while the other doesn't. In this case, existing value should come last.\n            // This avoids inconsistent results when comparing values to undefined/null.\n            // If neither value exists, return 0 (equal).\n            let comparatorResult = 0;\n            if (valueA != null && valueB != null) {\n                // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                if (valueA > valueB) {\n                    comparatorResult = 1;\n                }\n                else if (valueA < valueB) {\n                    comparatorResult = -1;\n                }\n            }\n            else if (valueA != null) {\n                comparatorResult = 1;\n            }\n            else if (valueB != null) {\n                comparatorResult = -1;\n            }\n            return comparatorResult * (direction == 'asc' ? 1 : -1);\n        });\n    };\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @returns Whether the filter matches against the data\n     */\n    filterPredicate = (data, filter) => {\n        // Transform the data into a lowercase string of all property values.\n        const dataStr = Object.keys(data)\n            .reduce((currentTerm, key) => {\n            // Use an obscure Unicode character to delimit the words in the concatenated string.\n            // This avoids matches where the values of two columns combined will match the user's query\n            // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n            // that has a very low chance of being typed in by somebody in a text field. This one in\n            // particular is \"White up-pointing triangle with dot\" from\n            // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n            return currentTerm + data[key] + '◬';\n        }, '')\n            .toLowerCase();\n        // Transform the filter by converting it to lowercase and removing whitespace.\n        const transformedFilter = filter.trim().toLowerCase();\n        return dataStr.indexOf(transformedFilter) != -1;\n    };\n    constructor(initialData = []) {\n        super();\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort\n            ? merge(this._sort.sortChange, this._sort.initialized)\n            : of(null);\n        const pageChange = this._paginator\n            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)\n            : of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterPredicate function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterPredicate.\n        // May be overridden for customization.\n        this.filteredData =\n            this.filter == null || this.filter === ''\n                ? data\n                : data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided paginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn };\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ \"SharingOrInheriting.TitleAddFieldsWhichInherit\" | translate}} (new v18)\r\n    </div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <p>\r\n      Shared fields allow you to compose a content-type using fields which were defined in another content-type.\r\n      These fields exist on this content-type, but use the definition incl. label and all other specs from the original field.\r\n    </p>\r\n    <p>\r\n      This is a bit like <strong>Content-Type Inheritance</strong>, but instead of inheritance we're using <strong>composition</strong>, which is much more powerful.\r\n    </p>\r\n    <p>\r\n      {{ \"SharingOrInheriting.PickFieldsToInheritFrom\" | translate }}\r\n      <br>\r\n      <em>\r\n        Note that if this app doesn't have published/shared field definitions, the list below will be empty.\r\n      </em>\r\n    </p>\r\n    <div class=\"eav-tables-div\">\r\n      <mat-card class=\"eav-table-div-left\">\r\n        <table mat-table [dataSource]=\"shareableFields\">\r\n          <ng-container matColumnDef=\"contentType\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Content Type</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.ContentType.Name}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Name</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.StaticName}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"type\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Type</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.Type}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"share\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Share</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> <button mat-raised-button type=\"button\"\r\n                (click)=\"selectField(field)\">Select</button> </td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"optionsColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: optionsColumns;\"></tr>\r\n        </table>\r\n      </mat-card>\r\n\r\n      <mat-card class=\"eav-table-div-right\">\r\n        <form #ngForm=\"ngForm\">\r\n          <table mat-table [dataSource]=\"selectedFields\">\r\n            <ng-container matColumnDef=\"newName\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>New Name</b> </th>\r\n              <td mat-cell *matCellDef=\"let item; index as i\" class=\"eav-table-cell\">\r\n                <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                  <mat-label>New Name</mat-label>\r\n                  <input matInput [pattern]=\"fieldNamePattern\" [(ngModel)]=\"item.newName\" [name]=\"'StaticName' + i\"\r\n                    #newName=\"ngModel\" [appReservedNames]=\"reservedNames\">\r\n                </mat-form-field>\r\n                @if (newName.errors) {\r\n                  @if (newName.errors.pattern) {\r\n                    <app-field-hint [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                  }\r\n                  @if (newName.errors.reservedNames) {\r\n                    <app-field-hint [isError]=\"true\">\r\n                      {{ newName.errors.reservedNames }}\r\n                    </app-field-hint>\r\n                  }\r\n                }\r\n              </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"source\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>Source</b> </th>\r\n              <td mat-cell *matCellDef=\"let item\" style=\"word-break:break-all;\" class=\"eav-table-cell\"> {{\r\n                item.field.ContentType.Name }}/{{ item.field.StaticName }} ({{ item.field.Type }}) </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"remove\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>Remove</b> </th>\r\n              <td mat-cell *matCellDef=\"let item\" class=\"eav-table-cell\"> <button mat-raised-button type=\"button\"\r\n                  (click)=\"removeField(item)\">Remove</button> </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"selectedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: selectedColumns;\"></tr>\r\n          </table>\r\n        </form>\r\n      </mat-card>\r\n    </div>\r\n\r\n    <!-- Show feature warning -->\r\n    <app-feature-text-info [featureNameId]=\"'ContentTypeFieldsReuseDefinitions'\" [asInfo]=\"true\">\r\n      <em>\r\n        Even if the feature is not licensed, it will always work but show warnings.\r\n      </em>\r\n    </app-feature-text-info>\r\n\r\n    <!-- Save buttons -->\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button type=\"button\" (click)=\"dialog.close()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\"\r\n        [disabled]=\"!ngForm.form.valid || selectedFields.data.length == 0 || saving()\" (click)=\"save()\">\r\n        Save\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n","import { ChangeDetectorRef, Component, HostBinding, Inject, OnInit, ViewChild, ViewContainerRef, inject } from '@angular/core';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { catchError, concatMap, filter, of, toArray } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { openFeatureDialog } from '../../features/shared/base-feature.component';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { signalObj } from '../../shared/signals/signal.utilities';\r\nimport { ReservedNamesValidatorDirective } from '../edit-content-type-fields/reserved-names.directive';\r\n\r\n@Component({\r\n    selector: 'app-field-sharing-add-many',\r\n    templateUrl: './field-sharing-add-many.component.html',\r\n    styleUrls: ['./field-sharing-add-many.component.scss'],\r\n    imports: [\r\n        MatCardModule,\r\n        MatTableModule,\r\n        MatButtonModule,\r\n        FormsModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        ReservedNamesValidatorDirective,\r\n        MatDialogActions,\r\n        TranslateModule,\r\n        FeatureTextInfoComponent,\r\n        FieldHintComponent,\r\n    ]\r\n})\r\nexport class FieldSharingAddMany extends BaseComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n\r\n  #features = inject(FeaturesService);\r\n\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: { contentType: ContentType, existingFields: Field[] },\r\n    protected dialog: MatDialogRef<FieldSharingAddMany>,\r\n    private snackBar: MatSnackBar,\r\n    // All this is just for the feature dialog\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n    this.dialog.disableClose = true;\r\n    this.subscriptions.add(\r\n      this.dialog.backdropClick().subscribe(() => {\r\n        if (this.form.dirty || this.selectedFields.data.length > 0) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) return;\r\n        }\r\n        this.dialog.close();\r\n      })\r\n    );\r\n  }\r\n\r\n  optionsColumns: string[] = ['contentType', 'name', 'type', 'share'];\r\n  selectedColumns: string[] = ['newName', 'source', 'remove'];\r\n\r\n  protected shareableFields = new MatTableDataSource<Field>([]);\r\n  protected selectedFields = new MatTableDataSource<NewNameField>([]);\r\n  protected fieldNamePattern = fieldNamePattern;\r\n  protected fieldNameError = fieldNameError;\r\n  protected reservedNames: Record<string, string> = {};\r\n\r\n  protected saving = signalObj('saving', false);\r\n\r\n  #fieldShareConfigManagement = this.#features.isEnabled[FeatureNames.ContentTypeFieldsReuseDefinitions];\r\n\r\n\r\n  ngOnInit() {\r\n    // TODO: @SDV Try to find a better way to do this\r\n    this.#contentTypesFieldsSvc.getShareableFields()\r\n      .subscribe(shareableFields => this.shareableFields.data = shareableFields);\r\n\r\n    this.#contentTypesFieldsSvc.getReservedNames()\r\n      .subscribe(names => {\r\n        this.reservedNames = ReservedNamesValidatorDirective.mergeReserved(names, this.dialogData.existingFields);\r\n      });\r\n  }\r\n\r\n  selectField(field: Field) {\r\n    this.selectedFields.data = [...this.selectedFields.data, { newName: field.StaticName, field }];\r\n  }\r\n\r\n  removeField(field: NewNameField) {\r\n    const selectedFields = this.selectedFields.data;\r\n    selectedFields.splice(selectedFields.indexOf(field), 1);\r\n    this.selectedFields.data = [...selectedFields];\r\n  }\r\n\r\n  // When API gets created we will need to send the selected fields to the API\r\n  save() {\r\n    if (!this.#fieldShareConfigManagement()) {\r\n      openFeatureDialog(this.matDialog, FeatureNames.ContentTypeFieldsReuseDefinitions, this.viewContainerRef, this.changeDetectorRef);\r\n    } else {\r\n      this.saving.set(true);\r\n      this.snackBar.open('Saving...');\r\n      of(...this.selectedFields.data).pipe(\r\n        filter(inheritField => !!inheritField.newName),\r\n        concatMap(inheritField =>\r\n          this.#contentTypesFieldsSvc.addInheritedField(\r\n            this.dialogData.contentType.Id,\r\n            inheritField.field.ContentType.Id,\r\n            inheritField.field.Guid,\r\n            inheritField.newName\r\n          ).pipe(catchError(_ => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(_ => {\r\n        this.saving.set(false);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.dialog.close();\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport interface AppSharingFieldsViewModel {\r\n  shareableFields: Field[];\r\n  selectedFields: Field[];\r\n}\r\n\r\ninterface NewNameField {\r\n  newName: string;\r\n  field: Field;\r\n}\r\n","\r\nexport enum SharingOrInheriting {\r\n  None,\r\n  Sharing,\r\n  Inheriting\r\n}\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ title | translate }}\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"dialog.close()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    @switch (initialState) {\r\n      @case (sharingOrInheriting.Sharing) {\r\n        <p>\r\n          This field is published so it can be shared by other Content Types.\r\n          As such you cannot configure anything here, but just review the information.\r\n        </p>\r\n        <div>\r\n          Global Identifier: <strong>{{ dialogData.Guid }}</strong>\r\n        </div>\r\n        <h4>Inherited by</h4>\r\n        <ng-container *ngTemplateOutlet=\"detailsOrWarning\"></ng-container>\r\n      }\r\n      @case (sharingOrInheriting.Inheriting) {\r\n        <p>\r\n          This field is inheriting it's definition from another previously shared field.\r\n        </p>\r\n        <h4>Inherits Definition from</h4>\r\n        @if (!features.isEnabled[requiredFeature]()) {\r\n          <ol>\r\n            @for (s of inherited(); track s.complete) {\r\n              <li>{{ s.complete }}</li>\r\n            }\r\n          </ol>\r\n        }\r\n        <ng-container *ngTemplateOutlet=\"detailsOrWarning\"></ng-container>\r\n        \r\n        @if (notInherited().length) {\r\n          <h4>Not Inherited Definitions</h4>\r\n          <p>The following definitions are not inherited, so you can specify them on this field:</p>\r\n          <ol>\r\n            @for (s of notInherited(); track s) {\r\n              <li>{{ s }}</li>\r\n            }\r\n          </ol>\r\n        }\r\n      }\r\n      @case (sharingOrInheriting.None) {\r\n        <p>\r\n          This field is currently not shared or inherited.\r\n          You can choose to:\r\n        </p>\r\n        <ul>\r\n          <li>Make it public (<strong>share</strong>) so it can be re-used by other Content Types</li>\r\n          <li>Change it to <strong>inherit</strong> it's definition from another previously shared field</li>\r\n        </ul>\r\n        <br>\r\n        <div>\r\n          <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\" [color]=\"state == sharingOrInheriting.Sharing ? 'accent' : ''\" (click)=\"setShare()\">\r\n            Share\r\n          </button>  \r\n\r\n          <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\" [color]=\"state == sharingOrInheriting.Inheriting ? 'accent' : ''\"(click)=\"startInherit()\">\r\n            Inherit\r\n          </button>\r\n          @switch (state) {\r\n            @case (sharingOrInheriting.Sharing) {\r\n              <p>\r\n                This will share the field definition for others to use.\r\n                Save to complete the operation.\r\n              </p>\r\n            }\r\n            @case (sharingOrInheriting.Inheriting) {\r\n              <p>\r\n                The following fields have the same data type and share their definitions.\r\n                Select one to inherit from. Some notes:\r\n                <br>\r\n              </p>\r\n              <ul>\r\n                <li>\r\n                  Inheriting will remove/ignore all current definition of this field such as label, hidden, etc.\r\n                </li>\r\n                <li>\r\n                  If the field you want to inherit the definition from is missing from this list,\r\n                  it's either a different data type or it's not shared.\r\n                </li>\r\n              </ul>\r\n              <mat-card class=\"my-options-wrapper\">\r\n                <table mat-table [dataSource]=\"shareableFields()\" class=\"mat-elevation-z8\">\r\n                  <!-- Column Definition \"Content Type\" -->\r\n                  <ng-container matColumnDef=\"contentType\">\r\n                    <th mat-header-cell *matHeaderCellDef> <b>Content Type</b> </th>\r\n                    <td mat-cell *matCellDef=\"let field\"> {{field.ContentType.Name}} </td>\r\n                  </ng-container>\r\n                  <!-- Column Definition \"Name\" -->\r\n                  <ng-container matColumnDef=\"name\">\r\n                    <th mat-header-cell *matHeaderCellDef> <b>Name</b> </th>\r\n                    <td mat-cell *matCellDef=\"let field\"> {{field.StaticName}} </td>\r\n                  </ng-container>\r\n                  <!-- Column Definition \"Type\" -->\r\n                  <ng-container matColumnDef=\"type\">\r\n                    <th mat-header-cell *matHeaderCellDef> <b>Type</b> </th>\r\n                    <td mat-cell *matCellDef=\"let field\"> {{field.Type}} </td>\r\n                  </ng-container>\r\n                  <!-- Header Row -->\r\n                  <tr mat-header-row *matHeaderRowDef=\"optionsColumns\"></tr>\r\n                  <!-- Repeater for each row -->\r\n                  <tr mat-row *matRowDef=\"let row; columns: optionsColumns;\" [ngClass]=\"{ 'my-selected': guid === row.Guid }\" (click)=\"inheritField(row)\">\r\n                  </tr>\r\n                </table>\r\n              </mat-card>\r\n            }\r\n          }\r\n        </div>  \r\n      }\r\n    }\r\n  </div>\r\n\r\n  <app-feature-text-info [featureNameId]=\"requiredFeature\" [asInfo]=\"true\">\r\n    <em>\r\n      Even if the feature is not licensed, it will always work but show warnings.\r\n    </em>\r\n  </app-feature-text-info>\r\n  \r\n  <div class=\"my-actions\">\r\n\r\n    @if (initialState == sharingOrInheriting.None) {\r\n      <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\" (click)=\"dialog.close()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\" class=\"eav-dialog-action-button\" (click)=\"save()\">\r\n        <span>Save</span>\r\n      </button>\r\n    }\r\n  </div>\r\n</div>\r\n\r\n<!-- Reusable part showing a list of ancestors or descendants - or showing a license warning to see more -->\r\n<ng-template #detailsOrWarning>\r\n  @if (features.isEnabled[requiredFeature]()) {\r\n    @if (details().length) {\r\n      <ul>\r\n        @for (field of details(); track field.AttributeId) {\r\n          <li>\r\n            Guid: <strong>{{ field.Guid }}</strong>\r\n            <br>\r\n            Content Type: <strong>{{ field.ContentType.Name }}</strong>\r\n            <br>\r\n            Field: <strong>{{ field.StaticName }}</strong> ({{ field.AttributeId }})\r\n          </li>\r\n        }\r\n      </ul>\r\n    }\r\n    @else {\r\n      <em>\r\n        No details available. This field probably does not have any inheriting fields.\r\n      </em>\r\n    }\r\n  }\r\n  @else {\r\n    <em>\r\n      You can get more details about the parents by enabling the feature\r\n      <br>\r\n      {{ requiredFeature }}\r\n      <app-feature-icon-text [featureNameId]=\"requiredFeature\"></app-feature-icon-text>.\r\n    </em>\r\n  }\r\n</ng-template>","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Inject, signal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport groupBy from 'lodash-es/groupBy';\r\nimport { transient } from '../../../../../core/transient';\r\nimport { FeatureIconTextComponent } from '../../features/feature-icon-text/feature-icon-text.component';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { classLog } from '../../shared/logging';\r\nimport { computedObj, signalObj } from '../../shared/signals/signal.utilities';\r\nimport { SharingOrInheriting } from './field-sharing-configure.enums';\r\n\r\nconst logSpecs = {\r\n  all: true,\r\n  constructor: true,\r\n}\r\n\r\nconst noInheritGuid = '00000000-0000-0000-0000-000000000000';\r\n\r\n@Component({\r\n    selector: 'app-field-sharing-configure',\r\n    templateUrl: './field-sharing-configure.component.html',\r\n    styleUrls: ['./field-sharing-configure.component.scss'],\r\n    imports: [\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatCardModule,\r\n        MatTableModule,\r\n        NgClass,\r\n        NgTemplateOutlet,\r\n        TranslateModule,\r\n        FeatureTextInfoComponent,\r\n        FeatureIconTextComponent,\r\n    ]\r\n})\r\nexport class ShareOrInheritDialogComponent {\r\n\r\n  log = classLog({ShareOrInheritDialogComponent}, logSpecs);\r\n\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: Field,\r\n    public features: FeaturesService,\r\n    protected dialog: MatDialogRef<ShareOrInheritDialogComponent>,\r\n  ) {\r\n    const l = this.log.fnIf('constructor', {dialogData});\r\n\r\n    const sysS = dialogData.SysSettings;\r\n    if (sysS) {\r\n      if (sysS.Share)\r\n        this.#contentTypesFieldsSvc.getDescendants(dialogData.Id)\r\n          .subscribe(fields => this.details.set(fields));\r\n      else if (sysS.InheritMetadataOf)\r\n        this.#contentTypesFieldsSvc.getAncestors(dialogData.Id)\r\n          .subscribe(fields => this.details.set(fields));\r\n    }\r\n  }\r\n\r\n  requiredFeature = FeatureNames.ContentTypeFieldsReuseDefinitions;\r\n\r\n  details = signalObj<Field[]>('details', []);\r\n\r\n  optionsColumns: string[] = ['contentType', 'name', 'type'];\r\n  message: string;\r\n  state: SharingOrInheriting = SharingOrInheriting.None;\r\n\r\n  // Constants for the UI\r\n  sharingOrInheriting = SharingOrInheriting;\r\n  guid: string = null;\r\n\r\n  shareableFields = signal<Field[]>(undefined);\r\n\r\n  // Figure out the initial state how at the time of opening the dialog\r\n  initialState: SharingOrInheriting = (() => {\r\n    const sysS = this.dialogData.SysSettings;\r\n    const notConfigured = !sysS || (!sysS.Share && !sysS.InheritMetadataOf);\r\n    return notConfigured\r\n      ? SharingOrInheriting.None\r\n      : sysS.Share\r\n        ? SharingOrInheriting.Sharing\r\n        : SharingOrInheriting.Inheriting;\r\n  })();\r\n\r\n  // Assemble i18n title part, using the current state name\r\n  title: string = 'SharingOrInheriting.Title' + this.sharingOrInheriting[this.initialState];\r\n\r\n  /** Prepare info about inheritance, which is kind of compacted into a string */\r\n  #inheritsInfo = computedObj('inheritsInfo', () => {\r\n    const parts = this.dialogData.SysSettings.InheritMetadataOf.split(',');\r\n    const withFieldNames = parts.map(complete => ({\r\n      complete,\r\n      // Guid, required, could be empty-guid\r\n      guid: complete.substring(0, 36),\r\n      // Field name, optional; only required if it's the no-inherit guid\r\n      name: complete.substring(36),\r\n    }));\r\n    return groupBy(withFieldNames, g => g.guid === noInheritGuid ? 'none' : 'inherits');\r\n  });\r\n\r\n  /** Metadata content-type names which are not inherited */\r\n  notInherited = computedObj('notInherited', () => this.#inheritsInfo().none?.map(n => n.name) ?? []);\r\n\r\n  /** Metadata items which are inherited */\r\n  inherited = computedObj('inherited', () => this.#inheritsInfo().inherits ?? []);\r\n\r\n  setShare() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Sharing;\r\n  }\r\n\r\n  startInherit() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Inheriting;\r\n    // Load possible fields which match the current field type\r\n    this.#contentTypesFieldsSvc.getShareableFieldsFor(this.dialogData.AttributeId)\r\n      .subscribe(fields => this.shareableFields.set(fields));\r\n  }\r\n\r\n  inheritField(field: Field) {\r\n    this.guid = field.Guid;\r\n  }\r\n\r\n  save() {\r\n    if (this.state == SharingOrInheriting.Sharing) {\r\n      this.#contentTypesFieldsSvc.share(this.dialogData.Id)\r\n        .subscribe(() => this.dialog.close());\r\n    } else if (this.state == SharingOrInheriting.Inheriting) {\r\n      this.#contentTypesFieldsSvc.inherit(this.dialogData.Id, this.guid)\r\n        .subscribe(() => this.dialog.close());\r\n    }\r\n  }\r\n\r\n}\r\n","import { ColumnApi, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowClassParams, RowDragEvent, SortChangedEvent } from '@ag-grid-community/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { Component, OnInit, signal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { transient } from '../../../../core';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { ContentTypesFieldsService } from '../shared/fields/content-types-fields.service';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { InputTypeHelpers } from '../shared/fields/input-type-helpers';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep, ItemAddIdentifier, ItemEditIdentifier, ItemIdentifier } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { ContentTypeFieldsActionsComponent } from './content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsInputTypeComponent } from './content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type/content-type-fields-input-type.models';\r\nimport { ContentTypeFieldsSpecialComponent } from './content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title/content-type-fields-title.models';\r\nimport { ContentTypeFieldsTypeComponent } from './content-type-fields-type/content-type-fields-type.component';\r\nimport { FieldSharingAddMany } from './field-sharing-add-many/field-sharing-add-many.component';\r\nimport { ShareOrInheritDialogComponent } from './field-sharing-configure/field-sharing-configure.component';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields',\r\n    templateUrl: './content-type-fields.component.html',\r\n    imports: [\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        RouterOutlet,\r\n        NgClass,\r\n        MatDialogActions,\r\n        ToggleDebugDirective,\r\n        SxcGridModule,\r\n        TranslateModule,\r\n    ]\r\n})\r\nexport class ContentTypeFieldsComponent implements OnInit {\r\n\r\n  #dialogRouter = transient(DialogRoutingService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    protected dialog: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n  ) { }\r\n\r\n  contentType = signal<ContentType>(undefined);\r\n  fields = signal<Field[]>(undefined);\r\n\r\n  gridOptions = this.#buildGridOptions();\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n\r\n  #gridApi: GridApi;\r\n  #columnApi: ColumnApi;\r\n  #rowDragSuppressed = false;\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n\r\n\r\n  ngOnInit() {\r\n    this.#fetchFields();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.#fetchFields());\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApi = params.api;\r\n    this.#columnApi = params.columnApi;\r\n  }\r\n\r\n  onRowDragEnter(_: RowDragEvent) {\r\n    this.#gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(_: RowDragEvent) {\r\n    this.#gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields().map(field => field.Id);\r\n    this.#contentTypesFieldsSvc.reOrder(idArray, this.contentType()).subscribe(() => {\r\n      this.#fetchFields(() => {\r\n        this.#gridApi.setEnableCellTextSelection(true);\r\n        this.#gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const overNode = event.overNode as { data: Field };\r\n    if (!overNode) return;\r\n    const movingNode = event.node as { data: Field };\r\n    if (movingNode === overNode) return;\r\n\r\n    const newFields = [...this.fields()];\r\n    const fromIndex = newFields.indexOf(movingNode.data);\r\n    const toIndex = newFields.indexOf(overNode.data);\r\n    const reordered = this.#moveInArray(newFields, fromIndex, toIndex);\r\n    this.fields.set(reordered);\r\n    this.#gridApi.clearFocusedCell();\r\n  }\r\n\r\n  #moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n    return [...arr];\r\n  }\r\n\r\n  onSortChanged(_: SortChangedEvent) {\r\n    const columnStates = this.#columnApi.getColumnState();\r\n    this.sortApplied = columnStates.some(state => state.sort != null);\r\n    this.#suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(_: FilterChangedEvent) {\r\n    const filterModel = this.#gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.#suppressRowDrag();\r\n  }\r\n\r\n  #suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.#rowDragSuppressed) {\r\n      this.#rowDragSuppressed = true;\r\n      this.#gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.#rowDragSuppressed) {\r\n      this.#rowDragSuppressed = false;\r\n      this.#gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.#dialogRouter.navRelative([`add/${this.#contentTypeStaticName}`]);\r\n  }\r\n\r\n  addSharedField() {\r\n    this.matDialog.open(FieldSharingAddMany, {\r\n      autoFocus: false,\r\n      width: '1600px',\r\n      data: { contentType: this.contentType(), existingFields: this.fields() }\r\n    }).afterClosed().subscribe(() => this.#fetchFields());\r\n  }\r\n\r\n  #nameCellRenderer(params: Omit<ICellRendererParams, 'data'> & { data: Field }) {\r\n    const inputType = params.data.InputType;\r\n\r\n    if (InputTypeHelpers.endsPreviousGroup(inputType))\r\n      return params.value;\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields()) {\r\n      if (InputTypeHelpers.isGroupStart(inputType)) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (InputTypeHelpers.isGroupEnd(inputType)) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === params.data.StaticName)\r\n        break;\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  #fetchFields(callback?: () => void) {\r\n    const contentTypeTemp = this.contentType() == null\r\n      ? this.#contentTypesSvc.retrieveContentType(this.#contentTypeStaticName)\r\n      : of(this.contentType());\r\n    const fieldsTemp = this.#contentTypesFieldsSvc.getFields(this.#contentTypeStaticName);\r\n    forkJoin([contentTypeTemp, fieldsTemp]).subscribe(([contentType, fields]) => {\r\n      this.contentType.set(contentType);\r\n      this.fields.set(fields);\r\n      if (callback != null)\r\n        callback();\r\n    });\r\n  }\r\n\r\n  #editFieldMetadata(field: Field) {\r\n    // If this field is inherited and therefor has no own metadata, show a snackbar and exit\r\n    if (field.SysSettings?.InheritMetadataOf) {\r\n      if (!Object.keys(field.ConfigTypes).length) {\r\n        this.snackBar.open('This field inherits all configuration so there is nothing to edit.', null, { duration: 3000 });\r\n        return;\r\n      }\r\n      this.snackBar.open('This field inherits some configuration. Edit will only show configuration which is not inherited.', null, { duration: 5000 });\r\n    }\r\n\r\n    // if this field is shared/can-be-inherited, show warning so the user is aware of it\r\n    if (field.SysSettings?.Share)\r\n      this.snackBar.open('This field is shared, so changing it will affect all other fields inheriting it.', null, { duration: 5000 });\r\n\r\n    const form: EditForm = {\r\n      items: Object.keys(field.ConfigTypes).map((t) => this.#createItemDefinition(field, t))\r\n    };\r\n    // console.warn('2dm - editFieldMetadata', field.ConfigTypes, form);\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #createItemDefinition(field: Field, metadataType: string): ItemAddIdentifier | ItemEditIdentifier {\r\n    // The keys could start with an @ but may not, and in some cases we need it, others we don't\r\n    const keyForMdLookup = metadataType.replace('@', '');\r\n    const newItemTypeName = ('@' + metadataType).replace('@@', '@');\r\n\r\n    // Is an item of this type already loaded? Then just edit it, otherwise request new as Metadata\r\n    const existingMd = field.Metadata[keyForMdLookup];\r\n    return existingMd != null\r\n      ? EditPrep.editId(existingMd.Id) // if defined, return the entity-number to edit\r\n      : {\r\n        ...EditPrep.newMetadata(field.Id, newItemTypeName, eavConstants.metadata.attribute),\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n\r\n  #setTitle(field: Field) {\r\n    this.snackBar.open('Setting title...');\r\n    this.#contentTypesFieldsSvc.setTitle(field, this.contentType()).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.#fetchFields();\r\n    });\r\n  }\r\n\r\n  #changeInputType(field: Field) {\r\n    this.#dialogRouter.navRelative([`update/${this.#contentTypeStaticName}/${field.Id}/inputType`]);\r\n  }\r\n\r\n  #rename(field: Field) {\r\n    this.#dialogRouter.navRelative([`update/${this.#contentTypeStaticName}/${field.Id}/name`]);\r\n  }\r\n\r\n  #delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.#contentTypesFieldsSvc.delete(field, this.contentType()).subscribe(() => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.#fetchFields();\r\n    });\r\n  }\r\n\r\n  #openPermissions(field: Field) {\r\n    this.#dialogRouter.navRelative([GoToPermissions.getUrlAttribute(field.Id)]);\r\n  }\r\n\r\n  #openImageConfiguration(field: Field) {\r\n    const imgConfig = field.imageConfiguration;\r\n    if (imgConfig?.isRecommended != true)\r\n      throw new Error('This field does not expect to have an image configuration');\r\n\r\n    const itemIdentifier: ItemIdentifier = imgConfig.entityId\r\n      ? EditPrep.editId(imgConfig.entityId)\r\n      : EditPrep.newMetadata(field.Id, imgConfig.typeName, eavConstants.metadata.attribute);\r\n    const formUrl = convertFormToUrl({ items: [itemIdentifier] });\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #openMetadata(field: Field) {\r\n    const url = GoToMetadata.getUrlAttribute(\r\n      field.Id,\r\n      `Metadata for Field: ${field.StaticName} (${field.Id})`,\r\n    );\r\n    this.#dialogRouter.navRelative([url]);\r\n  }\r\n\r\n  #shareOrInherit(field: Field) {\r\n    const shareOrInheritDialogRef = this.matDialog.open(ShareOrInheritDialogComponent, {\r\n      autoFocus: false,\r\n      width: '800px',\r\n      data: field,\r\n    });\r\n    shareOrInheritDialogRef.afterClosed().subscribe(() => this.#fetchFields());\r\n  }\r\n\r\n  //#region Grid Options\r\n\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      getRowClass(params: RowClassParams) {\r\n        const field: Field = params.data;\r\n        const rowClass: string[] = [];\r\n        if (field.EditInfo.DisableSort) { rowClass.push('disable-row-drag'); }\r\n        if (InputTypeHelpers.isGroupStart(field.InputType)) { rowClass.push('group-start-row'); }\r\n        if (InputTypeHelpers.isGroupEnd(field.InputType)) { rowClass.push('group-end-row'); }\r\n        return rowClass;\r\n      },\r\n      columnDefs: [\r\n        {\r\n          rowDrag: true,\r\n          width: 18,\r\n          cellClass: 'no-select no-padding no-outline'.split(' '),\r\n        },\r\n        {\r\n          field: 'Title',\r\n          width: 42,\r\n          cellClass: 'secondary-action no-padding no-outline'.split(' '),\r\n          valueGetter: (p: { data: Field }) => p.data.IsTitle,\r\n          cellRenderer: ContentTypeFieldsTitleComponent,\r\n          cellRendererParams: (() => ({\r\n            onSetTitle: (field) => this.#setTitle(field),\r\n          } satisfies ContentTypeFieldsTitleParams))(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWidePrimary,\r\n          headerName: 'Name',\r\n          field: 'StaticName',\r\n          onCellClicked: (p: { data: Field }) => this.#editFieldMetadata(p.data),\r\n          cellRenderer: (params: ICellRendererParams) => this.#nameCellRenderer(params),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          field: 'Type',\r\n          width: 70,\r\n          valueGetter: (p: { data: Field }) => p.data.Type,\r\n          cellRenderer: ContentTypeFieldsTypeComponent,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          headerName: 'Input',\r\n          field: 'InputType',\r\n          width: 160,\r\n          cellClass: (p: { data: Field }) => `${p.data.EditInfo.DisableEdit ? 'no-outline no-padding' : 'secondary-action no-padding'}`.split(' '),\r\n          valueGetter: (p: { data: Field }) => p.data.InputType.substring(p.data.InputType.indexOf('-') + 1),\r\n          cellRenderer: ContentTypeFieldsInputTypeComponent,\r\n          cellRendererParams: (() => ({\r\n            onChangeInputType: (field) => this.#changeInputType(field),\r\n          } satisfies ContentTypeFieldsInputTypeParams))(),\r\n        },\r\n        {\r\n          field: 'Label',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (p: { data: Field }) => p.data.Metadata?.All?.Name,\r\n        },\r\n        {\r\n          field: 'Special',\r\n          width: 66,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          cellRenderer: ContentTypeFieldsSpecialComponent,\r\n        },\r\n        {\r\n          field: 'Notes',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (p: { data: Field }) => p.data.Metadata?.All?.Notes,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight5,\r\n          cellRenderer: ContentTypeFieldsActionsComponent,\r\n          cellRendererParams: (() => ({\r\n            do: (verb, field) => {\r\n              switch (verb) {\r\n                case 'rename': this.#rename(field); break;\r\n                case 'delete': this.#delete(field); break;\r\n                case 'permissions': this.#openPermissions(field); break;\r\n                case 'metadata': this.#openMetadata(field); break;\r\n                case 'shareOrInherit': this.#shareOrInherit(field); break;\r\n                case 'image': this.#openImageConfiguration(field); break;\r\n              }\r\n            }\r\n          } satisfies ContentTypeFieldsActionsParams))(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","<div class=\"eav-dialog nav-component-wrapper\" appToggleDebug>\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ contentType()?.Label || contentType()?.Name }} Fields\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"dialog.close()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"fields()\" [gridOptions]=\"gridOptions\"\r\n        (rowDragEnter)=\"onRowDragEnter($event)\" (rowDragEnd)=\"onRowDragEnd($event)\"\r\n        (rowDragMove)=\"onRowDragMove($event)\" (gridReady)=\"onGridReady($event)\" (sortChanged)=\"onSortChanged($event)\"\r\n        (filterChanged)=\"onFilterChanged($event)\" [ngClass]=\"{\r\n          'grid-sorted': sortApplied,\r\n          'grid-filtered': filterApplied\r\n          }\">\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions align=\"end\">\r\n    <!-- @if (isDebug()) { -->\r\n      <button mat-raised-button type=\"button\" (click)=\"addSharedField()\">{{ \"SharingOrInheriting.AddSharedField\" | translate }}</button>\r\n    <!-- } -->\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add fields\"\r\n      [disabled]=\"contentType() == null || contentType().EditInfo.ReadOnly\" (click)=\"add()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","@if (featureDetails(); as feature) {\r\n  <app-feature-details-dialog [specs]=\"{ feature: feature, showGuid: false, showStatus: true, showClose: true }\"></app-feature-details-dialog>\r\n}\r\n","import { Component, Inject, OnInit, signal } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { transient } from \"projects/core\";\r\nimport { FeatureDetailsDialogComponent } from \"../../apps-management/licence-info/feature-details-dialog/feature-details-dialog.component\";\r\nimport { ClipboardService } from \"../../shared/services/clipboard.service\";\r\nimport { FeatureDetailService } from \"../services/feature-detail.service\";\r\n\r\n@Component({\r\n    selector: 'app-feature-info-dialog',\r\n    templateUrl: './feature-info-dialog.component.html',\r\n    imports: [\r\n        FeatureDetailsDialogComponent\r\n    ]\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  #featureDetailSvc = transient(FeatureDetailService);\r\n  featureId = signal<string>('');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    protected dialog: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.featureId.set(this.route.snapshot.data['featureId'] || this.dialogData || '');\r\n    this.featureDetails = this.#featureDetailSvc.getFeatureDetail(this.featureId());\r\n  }\r\n\r\n  protected featureDetails: any;\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  ContentTypeFieldsReuseDefinitions: 'ContentTypeFieldsReuseDefinitions',\r\n  AppExportAssetsAdvanced: 'AppExportAssetsAdvanced',\r\n\r\n  // Picker features\r\n  PickerUiCheckbox: 'PickerUiCheckbox',\r\n  PickerUiRadio: 'PickerUiRadio',\r\n  PickerSourceCsv: 'PickerSourceCsv',\r\n  PickerSourceAppAssets: 'PickerSourceAppAssets',\r\n  PickerFormulas: 'PickerFormulas',\r\n  PickerUiMoreInfo: 'PickerUiMoreInfo',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","@if (show()) {\r\n  <div class=\"feature-text-info\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: feature()\">\r\n    <!-- Icon column -->\r\n    <mat-icon class=\"icon icon-{{icon()}}\">{{ icon() }}</mat-icon>\r\n    <!-- Text column -->\r\n    <div class=\"feature-text-info-content\">\r\n      <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n      <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n}\r\n","import { Component, input } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\n\r\n@Component({\r\n    selector: 'app-feature-text-info',\r\n    templateUrl: './feature-text-info.component.html',\r\n    styleUrls: ['./feature-text-info.component.scss'],\r\n    imports: [\r\n        MatIconModule,\r\n        TranslateModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  asInfo = input<boolean>(false);\r\n\r\n  constructor() { super(); }\r\n\r\n  icon = computedObj('icon', () => this.asInfo() ? 'info' : 'warning');\r\n}\r\n","import { Injectable, signal, Signal } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Feature } from '../models';\r\n\r\nconst webApiFeatureDetails = \"admin/feature/details\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService extends HttpServiceBase {\r\n\r\n  getFeatureDetail(nameId: string): Signal<Feature> {\r\n    return this.getSignal<Feature>(webApiFeatureDetails, {\r\n      params: { nameId }\r\n    });\r\n  }\r\n\r\n  getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n    const featureList = signal<Feature[]>([]);\r\n    for (const nameId of nameIds) {\r\n      this.xx(nameId).subscribe(feature => {\r\n        featureList.update(prev => [...prev, feature]);\r\n      });\r\n    }\r\n    return featureList;\r\n  }\r\n\r\n  // TODO: Daniel fragen, getFeatureDetails(nameIds: string[]) ist nicht korrekt\r\n  // getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n  //   console.log('getFeatureDetails', nameIds);\r\n  //   const featureList = signal<Feature[]>([]);\r\n  //   for (const nameId of nameIds) {\r\n  //   console.log('getFeatureDetails', nameId);\r\n\r\n\r\n  //     const x = this.getFeatureDetail(nameId) ;\r\n  //     featureList.update(prev => [...prev, x()]);\r\n  //   }\r\n  //   return featureList;\r\n  // }\r\n\r\n  // Remove later\r\n  xx(nameId: string): Observable<Feature> {\r\n    return this.getHttpApiUrl<Feature>(webApiFeatureDetails, {\r\n      params: { nameId }\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Directive, ViewContainerRef, inject, input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { FeaturesService } from '../features.service';\r\n\r\n/**\r\n * Base component for various UI components which inform that a feature is not enabled.\r\n * It's meant to show the indicator/warning, and open a dialog with more information about the feature.\r\n */\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n\r\n  /** Feature NameId to check */\r\n  featureNameId = input.required<string>();\r\n\r\n  /** When to show it - typically when it is _not_ enabled (default) */\r\n  showIf = input<boolean>(false);\r\n\r\n  #matDialog = inject(MatDialog);\r\n  #viewContainerRef = inject(ViewContainerRef);\r\n  #changeDetectorRef = inject(ChangeDetectorRef);\r\n  #featuresService = inject(FeaturesService);\r\n\r\n  constructor() { }\r\n\r\n  feature = computedObj('feature', () => this.#featuresService.getCurrent(this.featureNameId()));\r\n\r\n  show = computedObj('show', () => {\r\n    const feat = this.feature();\r\n    if (feat == null) return false;\r\n    return this.showIf() == (feat?.isEnabled ?? false);\r\n  })\r\n\r\n  openDialog() {\r\n    openFeatureDialog(this.#matDialog, this.featureNameId(), this.#viewContainerRef, this.#changeDetectorRef);\r\n  }\r\n}\r\n\r\nexport function openFeatureDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n  dialog.open(FeatureInfoDialogComponent, {\r\n    autoFocus: false,\r\n    data: featureId,\r\n    viewContainerRef: viewContainerRef,\r\n    width: '400px',\r\n  });\r\n\r\n  changeDetectorRef?.markForCheck();\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n    selector: 'app-field-hint',\r\n    templateUrl: './field-hint.component.html',\r\n    styleUrls: ['./field-hint.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        NgClass,\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n"],"x_google_ignoreList":[12,13]}