{"version":3,"file":"default-node_modules_angular_material_fesm2022_expansion_mjs.c90baa26d1ddeff3.js","mappings":"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","names":["CDK_ACCORDION","InjectionToken","CdkAccordion","_stateChanges","Subject","_openCloseAllActions","id","inject","_IdGenerator","getId","multi","openAll","this","next","closeAll","ngOnChanges","changes","ngOnDestroy","complete","static","__ngFactoryType__","i0","type","selectors","inputs","booleanAttribute","exportAs","features","provide","useExisting","CdkAccordionItem","accordion","optional","skipSelf","_changeDetectorRef","ChangeDetectorRef","_expansionDispatcher","UniqueSelectionDispatcher","_openCloseAllSubscription","Subscription","EMPTY","closed","EventEmitter","opened","destroyed","expandedChange","expanded","_expanded","emit","notify","markForCheck","disabled","_removeUniqueSelectionListener","constructor","ngOnInit","listen","accordionId","_subscribeToOpenCloseAllActions","unsubscribe","toggle","close","open","subscribe","outputs","useValue","undefined","CdkAccordionModule","_c0","_c1","_c2","MatExpansionPanel_ng_template_5_Template","rf","ctx","_c3","_c4","MatExpansionPanelHeader_Conditional_4_Template","ctx_r0","_getExpandedState","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","trigger","state","style","transform","transition","animate","bodyExpansion","height","visibility","MAT_EXPANSION_PANEL","MatExpansionPanelContent","_template","TemplateRef","_expansionPanel","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","_viewContainerRef","ViewContainerRef","_animationMode","ANIMATION_MODULE_TYPE","_animationsDisabled","_document","DOCUMENT","hideToggle","_hideToggle","value","togglePosition","_togglePosition","afterExpand","afterCollapse","_inputChanges","_lazyContent","_body","_portal","_headerId","super","defaultOptions","_hasSpacing","displayMode","ngAfterContentInit","pipe","startWith","filter","take","TemplatePortal","_containsFocus","focusedElement","activeElement","bodyElement","nativeElement","contains","_animationStarted","event","isInitialAnimation","setAttribute","_animationDone","toState","removeAttribute","contentQueries","dirIndex","_t","first","viewQuery","hostAttrs","hostVars","hostBindings","ngContentSelectors","decls","vars","consts","template","_r1","$event","dependencies","CdkPortalOutlet","styles","encapsulation","data","animation","changeDetection","fromState","MatExpansionPanelHeader","panel","host","_element","ElementRef","_focusMonitor","FocusMonitor","_parentChangeSubscription","_CdkPrivateStyleLoader","load","_StructuralStylesLoader","tabIndex","HostAttributeToken","accordionHideToggleChange","parseInt","merge","focusVia","expandedHeight","collapsedHeight","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","origin","options","ngAfterViewInit","monitor","_handleHeaderFocus","stopMonitoring","numberAttribute","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_keyManager","_ownHeaders","QueryList","_headers","headers","reset","header","notifyOnChanges","FocusKeyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","ɵMatAccordion_BaseFactory","MatExpansionModule","imports","MatCommonModule","PortalModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/accordion.mjs","./node_modules/@angular/material/fesm2022/expansion.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, booleanAttribute, Directive, Input, ChangeDetectorRef, EventEmitter, Output, NgModule } from '@angular/core';\nimport { _IdGenerator } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_ACCORDION = new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    /** Emits when the state of the accordion changes */\n    _stateChanges = new Subject();\n    /** Stream that emits true/false when openAll/closeAll is triggered. */\n    _openCloseAllActions = new Subject();\n    /** A readonly id value to use for unique selection coordination. */\n    id = inject(_IdGenerator).getId('cdk-accordion-');\n    /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n    multi = false;\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    openAll() {\n        if (this.multi) {\n            this._openCloseAllActions.next(true);\n        }\n    }\n    /** Closes all enabled accordion items. */\n    closeAll() {\n        this._openCloseAllActions.next(false);\n    }\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._openCloseAllActions.complete();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkAccordion, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: CdkAccordion, isStandalone: true, selector: \"cdk-accordion, [cdkAccordion]\", inputs: { multi: [\"multi\", \"multi\", booleanAttribute] }, providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }], exportAs: [\"cdkAccordion\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion, [cdkAccordion]',\n                    exportAs: 'cdkAccordion',\n                    providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }],\n                }]\n        }], propDecorators: { multi: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * A basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    accordion = inject(CDK_ACCORDION, { optional: true, skipSelf: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _expansionDispatcher = inject(UniqueSelectionDispatcher);\n    /** Subscription to openAll/closeAll events. */\n    _openCloseAllSubscription = Subscription.EMPTY;\n    /** Event emitted every time the AccordionItem is closed. */\n    closed = new EventEmitter();\n    /** Event emitted every time the AccordionItem is opened. */\n    opened = new EventEmitter();\n    /** Event emitted when the AccordionItem is destroyed. */\n    destroyed = new EventEmitter();\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * @docs-private\n     */\n    expandedChange = new EventEmitter();\n    /** The unique AccordionItem id. */\n    id = inject(_IdGenerator).getId('cdk-accordion-child-');\n    /** Whether the AccordionItem is expanded. */\n    get expanded() {\n        return this._expanded;\n    }\n    set expanded(expanded) {\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    _expanded = false;\n    /** Whether the AccordionItem is disabled. */\n    disabled = false;\n    /** Unregister function for _expansionDispatcher. */\n    _removeUniqueSelectionListener = () => { };\n    constructor() { }\n    ngOnInit() {\n        this._removeUniqueSelectionListener = this._expansionDispatcher.listen((id, accordionId) => {\n            if (this.accordion &&\n                !this.accordion.multi &&\n                this.accordion.id === accordionId &&\n                this.id !== id) {\n                this.expanded = false;\n            }\n        });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /** Toggles the expanded state of the accordion item. */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /** Sets the expanded state of the accordion item to false. */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /** Sets the expanded state of the accordion item to true. */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkAccordionItem, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: CdkAccordionItem, isStandalone: true, selector: \"cdk-accordion-item, [cdkAccordionItem]\", inputs: { expanded: [\"expanded\", \"expanded\", booleanAttribute], disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, providers: [\n            // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n            // registering to the same accordion.\n            { provide: CDK_ACCORDION, useValue: undefined },\n        ], exportAs: [\"cdkAccordionItem\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkAccordionItem, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                    exportAs: 'cdkAccordionItem',\n                    providers: [\n                        // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n                        // registering to the same accordion.\n                        { provide: CDK_ACCORDION, useValue: undefined },\n                    ],\n                }]\n        }], ctorParameters: () => [], propDecorators: { closed: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], destroyed: [{\n                type: Output\n            }], expandedChange: [{\n                type: Output\n            }], expanded: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\nclass CdkAccordionModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkAccordionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkAccordionModule, imports: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkAccordionModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkAccordionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkAccordion, CdkAccordionItem],\n                    exports: [CdkAccordion, CdkAccordionItem],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_ACCORDION, CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n","import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, TemplateRef, Directive, ViewContainerRef, ANIMATION_MODULE_TYPE, EventEmitter, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, ContentChild, ViewChild, ElementRef, ChangeDetectorRef, HostAttributeToken, numberAttribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { _StructuralStylesLoader, MatCommonModule } from '@angular/material/core';\nimport { _IdGenerator, FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { DOCUMENT } from '@angular/common';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM. This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        // Clear the `visibility` while open, otherwise the content will be visible when placed in\n        // a parent that's `visibility: hidden`, because `visibility` doesn't apply to descendants\n        // that have a `visibility` of their own (see #27436).\n        state('expanded', style({ height: '*', visibility: '' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n};\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nconst MAT_EXPANSION_PANEL = new InjectionToken('MAT_EXPANSION_PANEL');\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    _template = inject(TemplateRef);\n    _expansionPanel = inject(MAT_EXPANSION_PANEL, { optional: true });\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionPanelContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatExpansionPanelContent, isStandalone: true, selector: \"ng-template[matExpansionPanelContent]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionPanelContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matExpansionPanelContent]',\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    _viewContainerRef = inject(ViewContainerRef);\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _animationsDisabled;\n    _document = inject(DOCUMENT);\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    set hideToggle(value) {\n        this._hideToggle = value;\n    }\n    _hideToggle = false;\n    /** The position of the expansion indicator. */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    _togglePosition;\n    /** An event emitted after the body's expansion animation happens. */\n    afterExpand = new EventEmitter();\n    /** An event emitted after the body's collapse animation happens. */\n    afterCollapse = new EventEmitter();\n    /** Stream that emits for changes in `@Input` properties. */\n    _inputChanges = new Subject();\n    /** Optionally defined accordion the expansion panel belongs to. */\n    accordion = inject(MAT_ACCORDION, { optional: true, skipSelf: true });\n    /** Content that will be rendered lazily. */\n    _lazyContent;\n    /** Element containing the panel's user-provided content. */\n    _body;\n    /** Portal holding the user's content. */\n    _portal;\n    /** ID for the associated header element. Used for a11y labelling. */\n    _headerId = inject(_IdGenerator).getId('mat-expansion-panel-header-');\n    constructor() {\n        super();\n        const defaultOptions = inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, { optional: true });\n        this._expansionDispatcher = inject(UniqueSelectionDispatcher);\n        this._animationsDisabled = this._animationMode === 'NoopAnimations';\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /** Gets the expanded state string. */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n    close() {\n        this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n    open() {\n        this.expanded = true;\n    }\n    ngAfterContentInit() {\n        if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n            // Render the content as soon as the panel becomes open.\n            this.opened\n                .pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1))\n                .subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus() {\n        if (this._body) {\n            const focusedElement = this._document.activeElement;\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n    /** Called when the expansion animation has started. */\n    _animationStarted(event) {\n        if (!isInitialAnimation(event) && !this._animationsDisabled && this._body) {\n            // Prevent the user from tabbing into the content while it's animating.\n            // TODO(crisbeto): maybe use `inert` to prevent focus from entering while closed as well\n            // instead of `visibility`? Will allow us to clean up some code but needs more testing.\n            this._body?.nativeElement.setAttribute('inert', '');\n        }\n    }\n    /** Called when the expansion animation has finished. */\n    _animationDone(event) {\n        if (!isInitialAnimation(event)) {\n            if (event.toState === 'expanded') {\n                this.afterExpand.emit();\n            }\n            else if (event.toState === 'collapsed') {\n                this.afterCollapse.emit();\n            }\n            // Re-enable tabbing once the animation is finished.\n            if (!this._animationsDisabled && this._body) {\n                this._body.nativeElement.removeAttribute('inert');\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionPanel, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatExpansionPanel, isStandalone: true, selector: \"mat-expansion-panel\", inputs: { hideToggle: [\"hideToggle\", \"hideToggle\", booleanAttribute], togglePosition: \"togglePosition\" }, outputs: { afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, host: { properties: { \"class.mat-expanded\": \"expanded\", \"class._mat-animation-noopable\": \"_animationsDisabled\", \"class.mat-expansion-panel-spacing\": \"_hasSpacing()\" }, classAttribute: \"mat-expansion-panel\" }, providers: [\n            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n            // to the same accordion.\n            { provide: MAT_ACCORDION, useValue: undefined },\n            { provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel },\n        ], queries: [{ propertyName: \"_lazyContent\", first: true, predicate: MatExpansionPanelContent, descendants: true }], viewQueries: [{ propertyName: \"_body\", first: true, predicate: [\"body\"], descendants: true }], exportAs: [\"matExpansionPanel\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.start)=\\\"_animationStarted($event)\\\"\\n     (@bodyExpansion.done)=\\\"_animationDone($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative;background:var(--mat-expansion-container-background-color, var(--mat-sys-surface));color:var(--mat-expansion-container-text-color, var(--mat-sys-on-surface));border-radius:var(--mat-expansion-container-shape, 12px)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:var(--mat-expansion-container-shape, 12px);border-top-left-radius:var(--mat-expansion-container-shape, 12px)}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:var(--mat-expansion-container-shape, 12px);border-bottom-left-radius:var(--mat-expansion-container-shape, 12px)}@media(forced-colors: active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible;font-family:var(--mat-expansion-container-text-font, var(--mat-sys-body-large-font));font-size:var(--mat-expansion-container-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-expansion-container-text-weight, var(--mat-sys-body-large-weight));line-height:var(--mat-expansion-container-text-line-height, var(--mat-sys-body-large-line-height));letter-spacing:var(--mat-expansion-container-text-tracking, var(--mat-sys-body-large-tracking))}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px;border-top-color:var(--mat-expansion-actions-divider-color, var(--mat-sys-outline))}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionPanel, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel', exportAs: 'matExpansionPanel', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [matExpansionAnimations.bodyExpansion], providers: [\n                        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                        // to the same accordion.\n                        { provide: MAT_ACCORDION, useValue: undefined },\n                        { provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel },\n                    ], host: {\n                        'class': 'mat-expansion-panel',\n                        '[class.mat-expanded]': 'expanded',\n                        '[class._mat-animation-noopable]': '_animationsDisabled',\n                        '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                    }, imports: [CdkPortalOutlet], template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.start)=\\\"_animationStarted($event)\\\"\\n     (@bodyExpansion.done)=\\\"_animationDone($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative;background:var(--mat-expansion-container-background-color, var(--mat-sys-surface));color:var(--mat-expansion-container-text-color, var(--mat-sys-on-surface));border-radius:var(--mat-expansion-container-shape, 12px)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:var(--mat-expansion-container-shape, 12px);border-top-left-radius:var(--mat-expansion-container-shape, 12px)}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:var(--mat-expansion-container-shape, 12px);border-bottom-left-radius:var(--mat-expansion-container-shape, 12px)}@media(forced-colors: active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible;font-family:var(--mat-expansion-container-text-font, var(--mat-sys-body-large-font));font-size:var(--mat-expansion-container-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-expansion-container-text-weight, var(--mat-sys-body-large-weight));line-height:var(--mat-expansion-container-text-line-height, var(--mat-sys-body-large-line-height));letter-spacing:var(--mat-expansion-container-text-tracking, var(--mat-sys-body-large-tracking))}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px;border-top-color:var(--mat-expansion-actions-divider-color, var(--mat-sys-outline))}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: () => [], propDecorators: { hideToggle: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], togglePosition: [{\n                type: Input\n            }], afterExpand: [{\n                type: Output\n            }], afterCollapse: [{\n                type: Output\n            }], _lazyContent: [{\n                type: ContentChild,\n                args: [MatExpansionPanelContent]\n            }], _body: [{\n                type: ViewChild,\n                args: ['body']\n            }] } });\n/** Checks whether an animation is the initial setup animation. */\nfunction isInitialAnimation(event) {\n    return event.fromState === 'void';\n}\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionPanelActionRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatExpansionPanelActionRow, isStandalone: true, selector: \"mat-action-row\", host: { classAttribute: \"mat-action-row\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionPanelActionRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-action-row',\n                    host: {\n                        class: 'mat-action-row',\n                    },\n                }]\n        }] });\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader {\n    panel = inject(MatExpansionPanel, { host: true });\n    _element = inject(ElementRef);\n    _focusMonitor = inject(FocusMonitor);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _parentChangeSubscription = Subscription.EMPTY;\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n        const panel = this.panel;\n        const defaultOptions = inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, { optional: true });\n        const tabIndex = inject(new HostAttributeToken('tabindex'), { optional: true });\n        const accordionHideToggleChange = panel.accordion\n            ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])))\n            : EMPTY;\n        this.tabIndex = parseInt(tabIndex || '') || 0;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n            return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }))).subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => this._focusMonitor.focusVia(this._element, 'program'));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /** Height of the header while the panel is expanded. */\n    expandedHeight;\n    /** Height of the header while the panel is collapsed. */\n    collapsedHeight;\n    /** Tab index of the header. */\n    tabIndex = 0;\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /** Gets whether the panel is expanded. */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n    _getHeaderHeight() {\n        const isExpanded = this._isExpanded();\n        if (isExpanded && this.expandedHeight) {\n            return this.expandedHeight;\n        }\n        else if (!isExpanded && this.collapsedHeight) {\n            return this.collapsedHeight;\n        }\n        return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\n            if (origin && this.panel.accordion) {\n                this.panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionPanelHeader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.0.0\", type: MatExpansionPanelHeader, isStandalone: true, selector: \"mat-expansion-panel-header\", inputs: { expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\", tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))] }, host: { attributes: { \"role\": \"button\" }, listeners: { \"click\": \"_toggle()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.id\": \"panel._headerId\", \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.aria-controls\": \"_getPanelId()\", \"attr.aria-expanded\": \"_isExpanded()\", \"attr.aria-disabled\": \"panel.disabled\", \"class.mat-expanded\": \"_isExpanded()\", \"class.mat-expansion-toggle-indicator-after\": \"_getTogglePosition() === 'after'\", \"class.mat-expansion-toggle-indicator-before\": \"_getTogglePosition() === 'before'\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"style.height\": \"_getHeaderHeight()\" }, classAttribute: \"mat-expansion-panel-header mat-focus-indicator\" }, ngImport: i0, template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n\\n@if (_showToggle()) {\\n  <span [@indicatorRotate]=\\\"_getExpandedState()\\\" class=\\\"mat-expansion-indicator\\\">\\n    <svg\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      viewBox=\\\"0 -960 960 960\\\"\\n      aria-hidden=\\\"true\\\"\\n      focusable=\\\"false\\\">\\n      <path d=\\\"M480-345 240-585l56-56 184 184 184-184 56 56-240 240Z\\\"/>\\n    </svg>\\n  </span>\\n}\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1);height:var(--mat-expansion-header-collapsed-state-height, 48px);font-family:var(--mat-expansion-header-text-font, var(--mat-sys-title-medium-font));font-size:var(--mat-expansion-header-text-size, var(--mat-sys-title-medium-size));font-weight:var(--mat-expansion-header-text-weight, var(--mat-sys-title-medium-weight));line-height:var(--mat-expansion-header-text-line-height, var(--mat-sys-title-medium-line-height));letter-spacing:var(--mat-expansion-header-text-tracking, var(--mat-sys-title-medium-tracking))}.mat-expansion-panel-header.mat-expanded{height:var(--mat-expansion-header-expanded-state-height, 64px)}.mat-expansion-panel-header[aria-disabled=true]{color:var(--mat-expansion-header-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-header-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}@media(hover: none){.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-container-background-color, var(--mat-sys-surface))}}.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused{background:var(--mat-expansion-header-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title{color:var(--mat-expansion-header-text-color, var(--mat-sys-on-surface))}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-title,.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-description{color:inherit}.mat-expansion-panel-header-description{flex-grow:2;color:var(--mat-expansion-header-description-color, var(--mat-sys-on-surface-variant))}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle;color:var(--mat-expansion-header-indicator-color, var(--mat-sys-on-surface-variant));display:var(--mat-expansion-legacy-header-indicator-display, none)}.mat-expansion-indicator svg{width:24px;height:24px;margin:0 -8px;vertical-align:middle;fill:var(--mat-expansion-header-indicator-color, var(--mat-sys-on-surface-variant));display:var(--mat-expansion-header-indicator-display, inline-block)}@media(forced-colors: active){.mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}}\"], animations: [matExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionPanelHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [matExpansionAnimations.indicatorRotate], host: {\n                        'class': 'mat-expansion-panel-header mat-focus-indicator',\n                        'role': 'button',\n                        '[attr.id]': 'panel._headerId',\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.aria-controls]': '_getPanelId()',\n                        '[attr.aria-expanded]': '_isExpanded()',\n                        '[attr.aria-disabled]': 'panel.disabled',\n                        '[class.mat-expanded]': '_isExpanded()',\n                        '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                        '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[style.height]': '_getHeaderHeight()',\n                        '(click)': '_toggle()',\n                        '(keydown)': '_keydown($event)',\n                    }, template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n\\n@if (_showToggle()) {\\n  <span [@indicatorRotate]=\\\"_getExpandedState()\\\" class=\\\"mat-expansion-indicator\\\">\\n    <svg\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      viewBox=\\\"0 -960 960 960\\\"\\n      aria-hidden=\\\"true\\\"\\n      focusable=\\\"false\\\">\\n      <path d=\\\"M480-345 240-585l56-56 184 184 184-184 56 56-240 240Z\\\"/>\\n    </svg>\\n  </span>\\n}\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1);height:var(--mat-expansion-header-collapsed-state-height, 48px);font-family:var(--mat-expansion-header-text-font, var(--mat-sys-title-medium-font));font-size:var(--mat-expansion-header-text-size, var(--mat-sys-title-medium-size));font-weight:var(--mat-expansion-header-text-weight, var(--mat-sys-title-medium-weight));line-height:var(--mat-expansion-header-text-line-height, var(--mat-sys-title-medium-line-height));letter-spacing:var(--mat-expansion-header-text-tracking, var(--mat-sys-title-medium-tracking))}.mat-expansion-panel-header.mat-expanded{height:var(--mat-expansion-header-expanded-state-height, 64px)}.mat-expansion-panel-header[aria-disabled=true]{color:var(--mat-expansion-header-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-header-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}@media(hover: none){.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-container-background-color, var(--mat-sys-surface))}}.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused{background:var(--mat-expansion-header-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title{color:var(--mat-expansion-header-text-color, var(--mat-sys-on-surface))}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-title,.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-description{color:inherit}.mat-expansion-panel-header-description{flex-grow:2;color:var(--mat-expansion-header-description-color, var(--mat-sys-on-surface-variant))}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle;color:var(--mat-expansion-header-indicator-color, var(--mat-sys-on-surface-variant));display:var(--mat-expansion-legacy-header-indicator-display, none)}.mat-expansion-indicator svg{width:24px;height:24px;margin:0 -8px;vertical-align:middle;fill:var(--mat-expansion-header-indicator-color, var(--mat-sys-on-surface-variant));display:var(--mat-expansion-header-indicator-display, inline-block)}@media(forced-colors: active){.mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}}\"] }]\n        }], ctorParameters: () => [], propDecorators: { expandedHeight: [{\n                type: Input\n            }], collapsedHeight: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }] } });\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionPanelDescription, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatExpansionPanelDescription, isStandalone: true, selector: \"mat-panel-description\", host: { classAttribute: \"mat-expansion-panel-header-description\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionPanelDescription, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-description',\n                    host: {\n                        class: 'mat-expansion-panel-header-description',\n                    },\n                }]\n        }] });\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionPanelTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatExpansionPanelTitle, isStandalone: true, selector: \"mat-panel-title\", host: { classAttribute: \"mat-expansion-panel-header-title\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionPanelTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-title',\n                    host: {\n                        class: 'mat-expansion-panel-header-title',\n                    },\n                }]\n        }] });\n\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    _keyManager;\n    /** Headers belonging to this accordion. */\n    _ownHeaders = new QueryList();\n    /** All headers inside the accordion. Includes headers inside nested accordions. */\n    _headers;\n    /** Whether the expansion indicator should be hidden. */\n    hideToggle = false;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n    displayMode = 'default';\n    /** The position of the expansion indicator. */\n    togglePosition = 'after';\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((headers) => {\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n            this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event) {\n        this._keyManager.onKeydown(event);\n    }\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._keyManager?.destroy();\n        this._ownHeaders.destroy();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatAccordion, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatAccordion, isStandalone: true, selector: \"mat-accordion\", inputs: { hideToggle: [\"hideToggle\", \"hideToggle\", booleanAttribute], displayMode: \"displayMode\", togglePosition: \"togglePosition\" }, host: { properties: { \"class.mat-accordion-multi\": \"this.multi\" }, classAttribute: \"mat-accordion\" }, providers: [\n            {\n                provide: MAT_ACCORDION,\n                useExisting: MatAccordion,\n            },\n        ], queries: [{ propertyName: \"_headers\", predicate: MatExpansionPanelHeader, descendants: true }], exportAs: [\"matAccordion\"], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-accordion',\n                    exportAs: 'matAccordion',\n                    providers: [\n                        {\n                            provide: MAT_ACCORDION,\n                            useExisting: MatAccordion,\n                        },\n                    ],\n                    host: {\n                        class: 'mat-accordion',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if multiple panel support is enabled.\n                        '[class.mat-accordion-multi]': 'this.multi',\n                    },\n                }]\n        }], propDecorators: { _headers: [{\n                type: ContentChildren,\n                args: [MatExpansionPanelHeader, { descendants: true }]\n            }], hideToggle: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], displayMode: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }] } });\n\nclass MatExpansionModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionModule, imports: [MatCommonModule,\n            CdkAccordionModule,\n            PortalModule,\n            MatAccordion,\n            MatExpansionPanel,\n            MatExpansionPanelActionRow,\n            MatExpansionPanelHeader,\n            MatExpansionPanelTitle,\n            MatExpansionPanelDescription,\n            MatExpansionPanelContent], exports: [MatAccordion,\n            MatExpansionPanel,\n            MatExpansionPanelActionRow,\n            MatExpansionPanelHeader,\n            MatExpansionPanelTitle,\n            MatExpansionPanelDescription,\n            MatExpansionPanelContent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionModule, imports: [MatCommonModule,\n            CdkAccordionModule,\n            PortalModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatExpansionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        CdkAccordionModule,\n                        PortalModule,\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                    exports: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };\n"],"x_google_ignoreList":[0,1]}