{"version":3,"file":"projects_eav-ui_src_app_apps-management_apps-management-nav_apps-management-nav_component_ts.d2581ea693a04b20.js","mappings":"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","names":["webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","nameId","this","getHttpApiUrl","params","appId","contentTypeId","getTypeSig","initial","getSignal","retrieveContentTypes","scope","getTypesSig","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesSig","scopesSignal","computed","getScopesV2","save","contentType","http","post","apiUrl","appid","delete","staticName","NameId","import","files","formData","FormData","file","append","zoneId","createGhost","sourceNameId","__ngFactoryType__","factory","ɵfac","ExportAppPartsService","getContentInfo","exportParts","contentTypeIds","entityIds","templateIds","url","webApiAppPartsRoot","join","window","open","ExportAppService","getAppInfo","exportAppUrl","webApiAppRoot","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","toString","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","getAllSig","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","ViewsService","export","getPolymorphism","getUsage","guid","AppsManagementNavItems","path","icon","tippy","child","i0","breadcrumb_r3","AppsManagementNavComponent_ng_container_8_Conditional_1_Template","last_r4","AppsManagementNavComponent","#globalDialogConfigSvc","#dialogClose","constructor","dialog","context","media","inject","DialogConfigGlobalService","smallScreen","matchMedia","sideNavOpened","matches","navItems","transient","DialogRoutingService","ngOnInit","fetchDialogSettings","doOnDialogClosed","addEventListener","c","sidenav","opened","mode","closeDialog","close","getShared$","subscribe","i1","i2","i3","selectors","viewQuery","rf","ctx","_r1","sidenav_r2","AppsManagementNavComponent_ng_container_8_Template","AppsManagementNavComponent_ng_template_9_Template","AppsManagementNavComponent_For_19_Template","_forTrack0","emptyTemplate_r6","MatToolbarModule","i4","MatIconModule","i5","BreadcrumbModule","i6","MatButtonModule","i7","MatSidenavModule","i8","RouterOutlet","NavItemListComponent","ToggleDebugDirective","styles","ImportAppService","importApp","changedName","retryOnDuplicate","result","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","error","readAsText","logSpecs","ServiceBase","router","route","super","log","classLog","snapshot","getParam","paramMap","get","getParams","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","fnIf","subscriptions","add","childDialogClosed$","end","urlSubRoute","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","navRelative","commands","events","filter","event","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","all","getEntities","getAvailableEntities","webApiEntityRoot","EntityService","queryService","QueryService","getEntities$","p","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","fields","data","Default","entityId","force","parentId","parentField","parent","getFromQuery","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","Guids","Subscription","ngOnDestroy","destroy","unsubscribe"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/managment-nav-items.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.html","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts"],"sourcesContent":["import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  getTypeSig(nameId: string, initial: ContentType): Signal<ContentType> {\r\n    return this.getSignal<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }, initial);\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.getHttpApiUrl<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  getTypesSig(scope: string, initial: undefined): Signal<ContentType[]> {\r\n    return this.getSignal<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  // todo: switch to using the GetSignal with `map` parameter similar to the initial version above\r\n  getScopesSig(initial: undefined): Signal<ScopeOption[]> {\r\n    const scopesSignal = this.getSignal<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(\r\n      webApiTypeScopes,\r\n      { params: { appId: this.appId } }, initial,\r\n    );\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      const scopesData = scopesSignal();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\nconst webApiAppPartsGet = 'admin/appParts/get';\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string, initial: ContentInfo) {\r\n    return this.getSignal<ContentInfo>(webApiAppPartsGet, {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n const webApiAppRootStatistics = 'admin/app/Statistics';\r\n const webApiAppRootSaveData = 'admin/app/SaveData';\r\n\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo(initial: AppInfo) {\r\n    return this.getSignal<AppInfo>(webApiAppRootStatistics, {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    }, initial);\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    // return this.get<boolean>(webApiAppRoot + 'SaveData', {\r\n    return this.getHttpApiUrl<boolean>(webApiAppRootSaveData, {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  getAll(contentType: string) {\r\n    return this.getHttpApiUrl<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    });\r\n  }\r\n\r\n  getAllSig(contentType: string, initial?: Query[]) {\r\n    return this.getSignal<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }, initial);\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.getHttpApiUrl<null>(webApiQueryClone, {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViews = 'admin/view/all';\r\nconst webApiViewDelete = 'admin/view/delete';\r\nconst webApiViewImport = 'admin/view/import';\r\nconst webApiViewPolymorph = 'admin/view/polymorphism';\r\nconst webApiViewUsage = 'admin/view/usage';\r\nconst webApiJson = 'admin/view/json';\r\n\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.getSignal<View[]>(webApiViews, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.getHttpApiUrl<boolean>(webApiViewDelete, {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiJson)\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.getSignal<Polymorphism>(webApiViewPolymorph, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.getSignal<ViewUsage[]>(webApiViewUsage, {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n\r\n}\r\n","import { NavItem } from \"../../shared/models/nav-item.model\";\r\n\r\nexport const AppsManagementNavItems: NavItem[] = [\r\n  {\r\n    name: 'System', path: 'system', icon: 'settings', tippy: 'System Info', child: [\r\n      { name: 'Register', path: 'registration', icon: 'how_to_reg', tippy: 'Register this System on 2sxc Patrons' },\r\n    ]\r\n  },\r\n  { name: 'Apps', path: 'list', icon: 'star', tippy: 'Apps' },\r\n  { name: 'Languages', path: 'languages', icon: 'translate', tippy: 'Languages' },\r\n  { name: 'Extensions / Features', path: 'license', icon: 'tune', tippy: 'Extensions and Features' },\r\n];\r\n","\r\n<mat-toolbar appToggleDebug>\r\n  <div class=\"toolbar-container\">\r\n    <!-- Mat Icon Menu -->\r\n    <mat-icon class=\"menu-container\" (click)=\"sidenav.opened = !sidenav.opened\">menu</mat-icon>\r\n    <!-- App Name -->\r\n    <div>\r\n      <span> Manage Zone {{ zoneId }} </span>\r\n    </div>\r\n    <!-- Breadcrum in the Toolbar after show Img and Aoo Name -->\r\n    <xng-breadcrumb [separator]=\"emptyTemplate\">\r\n      <ng-container *xngBreadcrumbItem=\"let breadcrumb; let info = info; let last = last\">\r\n        @if (last)\r\n        {\r\n          <mat-icon class=\"breadcrumb-icon\">chevron_right</mat-icon>\r\n          {{ breadcrumb }}\r\n        }\r\n      </ng-container>\r\n    </xng-breadcrumb>\r\n    <ng-template #emptyTemplate></ng-template>\r\n  </div>\r\n  <span class=\"toolbar-spacer\"></span>\r\n  <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n<mat-sidenav-container appToggleDebug>\r\n  <mat-sidenav #sidenav [mode]=\"smallScreen.matches ? 'over' : 'side'\" [opened]=\"sideNavOpened\">\r\n    @for (navItem of navItems; track navItem.path)\r\n    {\r\n      <app-nav-item-list [navItem]=\"navItem\"></app-nav-item-list>\r\n    }\r\n\r\n    <div class=\"sideNav-bottom-info\">\r\n      <p>use Burger icon to show/hide menu</p>\r\n    </div>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <div class=\"container-content\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n","import { MediaMatcher } from '@angular/cdk/layout';\r\nimport { Component, inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSidenav, MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { BreadcrumbModule } from 'xng-breadcrumb';\r\nimport { transient } from '../../../../../core';\r\nimport { DialogConfigGlobalService } from '../../app-administration/services';\r\nimport { NavItemListComponent } from '../../shared/components/nav-item-list/nav-item-list.component';\r\nimport { ToggleDebugDirective } from '../../shared/directives/toggle-debug.directive';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppsManagementNavItems } from './managment-nav-items';\r\n\r\n@Component({\r\n    selector: 'app-apps-management-nav',\r\n    templateUrl: './apps-management-nav.component.html',\r\n    styleUrls: ['./apps-management-nav.component.scss'],\r\n    imports: [\r\n        MatToolbarModule,\r\n        MatIconModule,\r\n        BreadcrumbModule,\r\n        MatButtonModule,\r\n        MatSidenavModule,\r\n        RouterOutlet,\r\n        NavItemListComponent,\r\n        ToggleDebugDirective,\r\n    ]\r\n})\r\nexport class AppsManagementNavComponent implements OnInit {\r\n  @ViewChild('sidenav') sidenav!: MatSidenav;\r\n\r\n  #globalDialogConfigSvc = inject(DialogConfigGlobalService);\r\n\r\n  zoneId = this.context.zoneId;\r\n\r\n  smallScreen: MediaQueryList = this.media.matchMedia('(max-width: 1000px)');\r\n  sideNavOpened = !this.smallScreen.matches;\r\n\r\n  navItems = AppsManagementNavItems;\r\n  #dialogClose = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<AppsManagementNavComponent>,\r\n    private context: Context,\r\n    private media: MediaMatcher,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchDialogSettings();\r\n\r\n    // Trigger settings load? not sure why, because it's cached in the service... on dialog close?\r\n    this.#dialogClose.doOnDialogClosed(() => this.fetchDialogSettings());\r\n\r\n    this.smallScreen.addEventListener('change', c => (\r\n      this.sidenav.opened = !c.matches,\r\n      this.sidenav.mode = c.matches ? 'over' : 'side'\r\n    ));\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  private fetchDialogSettings() {\r\n    this.#globalDialogConfigSvc.getShared$(0).subscribe();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}