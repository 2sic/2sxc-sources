{"version":3,"sources":["./projects/ng-dialogs/src/app/app-administration/services/content-types.service.ts","./projects/ng-dialogs/src/app/code-editor/code-and-edition-warnings/code-and-edition-warnings.component.html","./projects/ng-dialogs/src/app/code-editor/code-and-edition-warnings/code-and-edition-warnings.component.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.models.ts","./projects/ng-dialogs/src/app/code-editor/services/source.service.ts","./projects/ng-dialogs/src/app/code-editor/create-file-dialog/create-file-dialog.component.html","./projects/ng-dialogs/src/app/code-editor/create-file-dialog/create-file-dialog.component.ts","./projects/ng-dialogs/src/app/code-editor/services/snippets.service.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/order-items.pipe.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/depth-padding.pipe.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.component.html","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.component.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.helpers.ts","./projects/ng-dialogs/src/app/code-editor/code-snippets/object-to-array.pipe.ts","./projects/ng-dialogs/src/app/code-editor/code-snippets/code-snippets.component.html","./projects/ng-dialogs/src/app/code-editor/code-snippets/code-snippets.component.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.component.html","./projects/ng-dialogs/src/app/code-editor/code-editor.component.ts","./projects/ng-dialogs/src/app/code-editor/code-editor-routing.module.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.module.ts","./projects/ng-dialogs/src/app/content-type-fields/services/content-types-fields.service.ts"],"names":["webApiTypeRoot","http","context","dnnContext","apiUrl","name","this","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","scopes","Object","keys","map","key","value","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService","snackRef","snackBarData","openCodeBehind","dismissWithAction","CodeAndEditionWarningsComponent","Explorers","Templates","Snippets","isShared","sessionStorage","getItem","viewKey","global","templateIdOrPath","view","Type","toLocaleLowerCase","Extension","getTemplates","withSubfolders","getPredefinedTemplates","res","createTemplate","templateKey","purpose","path","parseInt","templateId","SourceService","dialogData","dialogRef","sourceService","hostClass","ngOnInit","subscription","Subscription","guidedType$","BehaviorSubject","templates$","subscribe","templates","next","buildForm","formFixes","templateVars$","combineLatest","guidedType","ngOnDestroy","complete","unsubscribe","closeDialog","result","close","toggleGuidedType","newGuidedType","confirm","formValues","form","getRawValue","folder","trim","extension","fullName","startsWith","replace","undefined","folderPrefill","defaultName","namePrefill","substring","lastIndexOf","extPrefill","disabled","nameControl","controls","templateKeyControl","extensionControl","folderControl","add","distinctUntilChanged","templateExt","find","t","Key","patchValue","enable","enabled","disable","valueChanges","startWith","filter","CreateFileDialogComponent","translate","getSnippets","relevant","filterAwayNotNeededSnippetsList","snippets","standardAndInputSnips","extractInputTypeSnippets","sets","initSnippetsWithConfig","standardArray","inputTypeSnippets","list","keyPrefixes","keyPrefixIndex","v","indexOf","newList","itm","setHasPrefix","set","substr","push","inputTypeArray","catalogInputTypeSnippets","inputTypeList","subset","templateConfiguration","makeTree","Content","assign","Fields","PresentationFields","TypeContent","loadContentType","TypeContentPresentation","HasList","List","TypeList","TypeListPresentation","HasApp","App","Resources","Settings","tree","o","reformatted","label","snip","content","help","links","linksList","getHelpKey","instant","addition","linksString","llist","split","pair","length","link","url","target","type","prefix","getFields","AppId","fields","field","fieldname","valuePlaceholder","Metadata","merged","Notes","toLowerCase","snipDefaults","cloneDeep","attachSnippets","InputType","std","i","obj","val","fld","md","typeMd","inputMd","All","inputType","genericSnippet","fieldType","typeSnips","concat","more","fieldSnips","g","localizeGenericSnippet","collapse","objName","fieldName","SnippetsService","transform","items","sort","item1","item2","isFolder","SortItemsPipe","sanitizer","depth","bypassSecurityTrustStyle","DepthPaddingPipe","openView","toggledItems","ngOnChanges","changes","paths","last","pathFromRoot","existing","item","children","calculateTree","filename","previousFilename","previousValue","toggleItem","showFileInTree","openTemplate","emit","addFile","file","includes","CodeTemplatesComponent","Array","isArray","values","ObjectToArrayPipe","insertSnippet","toggledSections","toggledFolders","toggledInfos","toggledMores","addSnippet","snippet","toggleSection","toggleFolder","toggleInfo","toggleMore","CodeSnippetsComponent","routes","component","route","snackBar","snippetsService","zone","titleService","dialog","viewContainerRef","activeExplorer","monacoOptions","theme","tabSize","init","initialViewKey","snapshot","paramMap","activeView$","openViews$","viewInfos$","attachListeners","viewInfos","notLoaded","some","forkJoin","newViewInfo","view$","share","snippets$","mergeMap","of","results","viewInfos1","forEach","selectedIndex","findIndex","explorerSnipps","editorSnipps","savedCode","Code","slice","showCodeAndEditionWarnings","activeView","active","defaultTitle","newTitle","FileName","getTitle","setTitle","tabs","viewInfo","isActive","isModified","isLoading","activeViewInfo","toggleExplorer","explorer","open","autoFocus","data","width","afterClosed","monacoEditorRef","codeChanged","code","selectedViewInfo","oldOpenViews","newOpenViews","closeEditor","oldActiveView","newActiveView","codeToSave","newViewInfos","duration","error","pathAndName","pathSeparator","pathWithSlash","nameCode","codeFile","otherEditions","endsWith","openFromComponent","fileName","onAction","containerInstance","snackBarConfig","runOutsideAngular","fromEvent","window","event","preventDefault","returnValue","keyCode","navigator","platform","match","metaKey","ctrlKey","run","CodeEditorComponent","CodeEditorRoutingModule","translateLoaderFactoryCode","sxcVersion","CodeEditorModule","webApiFieldsAll","webApiFieldsRoot","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","Label","description","Description","getReservedNames","reOrder","idArray","Id","order","JSON","stringify","attributeId","rename","fieldId","newName","IsTitle","Error","newField","ContentTypeId","Index","SortOrder","updateInputType","id","ContentTypesFieldsService"],"mappings":"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","file":"projects_ng-dialogs_src_app_code-editor_code-editor_module_ts.836dec4ba17150aed29c.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","<div class=\"messages\">\r\n  <ng-container *ngIf=\"snackBarData.codeFile\">\r\n    <div>\"{{ snackBarData.fileName }}\" also has a code-behind file \"{{ snackBarData.codeFile }}\".</div>\r\n    <br>\r\n  </ng-container>\r\n  <div *ngIf=\"snackBarData.otherEditions\">\r\n    There are {{ snackBarData.otherEditions }} other editions of \"{{ snackBarData.fileName }}\". You may be editing an\r\n    edition which is not the one you see. See <a href=\"http://r.2sxc.org/polymorphism\" target=\"_blank\">docs</a>.\r\n  </div>\r\n</div>\r\n\r\n<div class=\"actions\">\r\n  <button mat-button color=\"primary\" *ngIf=\"snackBarData.codeFile\" (click)=\"openCodeBehind()\">\r\n    Open code-behind file\r\n  </button>\r\n</div>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\nimport { CodeAndEditionWarningsSnackBarData } from './code-and-edition-warnings.models';\r\n\r\n@Component({\r\n  selector: 'app-code-and-edition-warnings',\r\n  templateUrl: './code-and-edition-warnings.component.html',\r\n  styleUrls: ['./code-and-edition-warnings.component.scss'],\r\n})\r\nexport class CodeAndEditionWarningsComponent {\r\n  constructor(\r\n    private snackRef: MatSnackBarRef<CodeAndEditionWarningsComponent>,\r\n    @Inject(MAT_SNACK_BAR_DATA) public snackBarData: CodeAndEditionWarningsSnackBarData,\r\n  ) { }\r\n\r\n  openCodeBehind(): void {\r\n    this.snackBarData.openCodeBehind = true;\r\n    this.snackRef.dismissWithAction();\r\n  }\r\n}\r\n","import { Snippet, SnippetsSets } from './models/snippet.model';\r\nimport { SourceView } from './models/source-view.model';\r\n\r\nexport interface Tab {\r\n  viewKey: string;\r\n  label: string;\r\n  isActive: boolean;\r\n  isModified: boolean;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport interface CodeEditorTemplateVars {\r\n  activeView: string;\r\n  tabs: Tab[];\r\n  viewKey: string;\r\n  view: SourceView;\r\n  templates: string[];\r\n  explorerSnipps: SnippetsSets;\r\n  editorSnipps: Snippet[];\r\n}\r\n\r\nexport const Explorers = {\r\n  Templates: 'Templates',\r\n  Snippets: 'Snippets',\r\n} as const;\r\n\r\nexport type ExplorerOption = typeof Explorers[keyof typeof Explorers];\r\n\r\nexport interface ViewInfo {\r\n  /** ViewKey is templateId or path */\r\n  viewKey: string;\r\n  view?: SourceView;\r\n  explorerSnipps?: SnippetsSets;\r\n  editorSnipps?: Snippet[];\r\n  savedCode?: string;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiAppFile, webApiAppFileCreate, webApiAppFilesAll } from '../../../../../edit/shared/services';\r\nimport { keyIsShared } from '../../shared/constants/session.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { PredefinedTemplate } from '../models/predefined-template.model';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\nexport const webApiAppFilesPredefinedTemplates = 'admin/appfiles/GetTemplates';\r\n\r\n@Injectable()\r\nexport class SourceService {\r\n  private isShared = sessionStorage.getItem(keyIsShared) ?? false.toString();\r\n\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  /** ViewKey is templateId or path */\r\n  get(viewKey: string): Observable<SourceView> {\r\n    return this.http.get<SourceView>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFile), {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, ...this.templateIdOrPath(viewKey) }\r\n    }).pipe(\r\n      map(view => {\r\n        if (view.Type.toLocaleLowerCase() === 'auto') {\r\n          switch (view.Extension.toLocaleLowerCase()) {\r\n            case '.cs':\r\n            case '.cshtml':\r\n              view.Type = 'Razor';\r\n              break;\r\n            case '.html':\r\n            case '.css':\r\n            case '.js':\r\n              view.Type = 'Token';\r\n              break;\r\n          }\r\n        }\r\n        return view;\r\n      })\r\n    );\r\n  }\r\n\r\n  /** ViewKey is templateId or path */\r\n  save(viewKey: string, view: SourceView): Observable<boolean> {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFile), view, {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, ...this.templateIdOrPath(viewKey) },\r\n    });\r\n  }\r\n\r\n  getTemplates(): Observable<string[]> {\r\n    return this.http.get<string[]>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFilesAll), {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, withSubfolders: 'true' },\r\n    });\r\n  }\r\n\r\n  getPredefinedTemplates(): Observable<any> {\r\n    return this.http.get<{ Templates: PredefinedTemplate[] }>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFilesPredefinedTemplates)).pipe(\r\n      map(res => res?.Templates),\r\n    );\r\n  }\r\n\r\n  createTemplate(name: string, templateKey?: string): Observable<boolean> {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFileCreate), {}, {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        global: this.isShared,\r\n        purpose: 'auto',\r\n        path: name,\r\n        ...(templateKey && { templateKey }),\r\n      },\r\n    });\r\n  }\r\n\r\n  private templateIdOrPath(viewKey: string) {\r\n    if (parseInt(viewKey, 10).toString() === viewKey) {\r\n      return { templateId: viewKey };\r\n    } else {\r\n      return { path: viewKey };\r\n    }\r\n  }\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create file</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    Enter properties of the new file.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- File Name -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Name</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"name\" required>\r\n      </mat-form-field>\r\n      <app-field-hint>\r\n        Template name must start with \"_\", e.g. \"_MyFile\",<br>\r\n        Controller name must end with \"Controller\", e.g. \"MyController\"\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"nameControl.touched && nameControl.errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n\r\n      <!-- Code template -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>{{ data.guidedType ? 'Code template' : 'Extension' }}</mat-label>\r\n        <mat-select *ngIf=\"data.guidedType\" formControlName=\"templateKey\" required\r\n          [placeholder]=\"!data.templates.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let template of data.templates\" [value]=\"template.Key\">\r\n            {{ template.Name }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"text\" *ngIf=\"!data.guidedType\" formControlName=\"extension\" required>\r\n\r\n        <div matSuffix class=\"selection-suffix\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': data.guidedType }\" tippy=\"Select option\"\r\n            (click)=\"toggleGuidedType(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !data.guidedType }\" tippy=\"Insert value\"\r\n            (click)=\"toggleGuidedType(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n      <ng-container *ngIf=\"data.guidedType\">\r\n        <app-field-hint>This sets code prefill in new file</app-field-hint>\r\n        <app-field-hint *ngIf=\"templateKeyControl.touched && templateKeyControl.errors?.required\" [isError]=\"true\">\r\n          This field is required\r\n        </app-field-hint>\r\n      </ng-container>\r\n      <app-field-hint *ngIf=\"!data.guidedType && extensionControl.touched && extensionControl.errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n\r\n      <!-- Folder -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\" *ngIf=\"folderControl.value\">\r\n        <mat-label>Folder</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"folder\">\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map, startWith } from 'rxjs/operators';\r\nimport { SanitizeHelper } from '../../../../../edit/shared/helpers';\r\nimport { defaultControllerName, defaultTemplateName } from '../../shared/constants/file-names.constants';\r\nimport { PredefinedTemplate } from '../models/predefined-template.model';\r\nimport { SourceService } from '../services/source.service';\r\nimport { CreateFileDialogData, CreateFileDialogResult, CreateFileFormValues, CreateFileTemplateVars } from './create-file-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-create-file-dialog',\r\n  templateUrl: './create-file-dialog.component.html',\r\n  styleUrls: ['./create-file-dialog.component.scss']\r\n})\r\nexport class CreateFileDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  nameControl: AbstractControl;\r\n  templateKeyControl: AbstractControl;\r\n  extensionControl: AbstractControl;\r\n  folderControl: AbstractControl;\r\n  templateVars$: Observable<CreateFileTemplateVars>;\r\n\r\n  private guidedType$: BehaviorSubject<boolean>;\r\n  private templates$: BehaviorSubject<PredefinedTemplate[]>;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: CreateFileDialogData,\r\n    private dialogRef: MatDialogRef<CreateFileDialogComponent>,\r\n    private sourceService: SourceService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = new Subscription();\r\n    this.guidedType$ = new BehaviorSubject(true);\r\n    this.templates$ = new BehaviorSubject<PredefinedTemplate[]>([]);\r\n    this.sourceService.getPredefinedTemplates().subscribe(templates => {\r\n      this.templates$.next(templates);\r\n    });\r\n    this.buildForm();\r\n    this.formFixes();\r\n\r\n    this.templateVars$ = combineLatest([this.guidedType$, this.templates$]).pipe(\r\n      map(([guidedType, templates]) => {\r\n        const templateVars: CreateFileTemplateVars = {\r\n          guidedType,\r\n          templates,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedType$.complete();\r\n    this.templates$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog(result?: CreateFileDialogResult): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedType(newGuidedType: boolean): void {\r\n    if (this.guidedType$.value === newGuidedType) { return; }\r\n    this.guidedType$.next(newGuidedType);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: CreateFileFormValues = this.form.getRawValue();\r\n\r\n    const folder = (formValues.folder ?? '').trim();\r\n    const name = SanitizeHelper.sanitizePath(formValues.name.trim());\r\n    const extension = formValues.extension.trim();\r\n    const fullName = `${folder}${folder ? '/' : ''}${name}${extension.startsWith('.') ? '' : '.'}${extension}`.replace(/\\/{2,}/g, '');\r\n\r\n    const result: CreateFileDialogResult = {\r\n      name: fullName,\r\n      templateKey: this.guidedType$.value ? formValues.templateKey : undefined,\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private buildForm(): void {\r\n    const folderPrefill = this.dialogData.folder;\r\n    const defaultName = (folderPrefill === 'api' || folderPrefill?.startsWith('api/')) ? defaultControllerName : defaultTemplateName;\r\n    const namePrefill = defaultName.substring(0, defaultName.lastIndexOf('.'));\r\n    const extPrefill = defaultName.substring(defaultName.lastIndexOf('.'));\r\n\r\n    this.form = new FormGroup({\r\n      name: new FormControl(namePrefill, [Validators.required]),\r\n      templateKey: new FormControl(null, [Validators.required]),\r\n      extension: new FormControl(extPrefill, [Validators.required]),\r\n      folder: new FormControl({ disabled: true, value: folderPrefill }),\r\n    });\r\n    this.nameControl = this.form.controls.name;\r\n    this.templateKeyControl = this.form.controls.templateKey;\r\n    this.extensionControl = this.form.controls.extension;\r\n    this.folderControl = this.form.controls.folder;\r\n  }\r\n\r\n  private formFixes(): void {\r\n    this.subscription.add(\r\n      this.guidedType$.pipe(\r\n        distinctUntilChanged(),\r\n      ).subscribe(guidedType => {\r\n        // reset extension value when template picker is activated\r\n        if (guidedType) {\r\n          const templates = this.templates$.value;\r\n          const selectedKey = this.templateKeyControl.value;\r\n          const templateExt = templates.find(t => t.Key === selectedKey)?.Extension;\r\n          if (this.extensionControl.value !== templateExt) {\r\n            this.extensionControl.patchValue(templateExt);\r\n          }\r\n        }\r\n        // disable template picker control when it's not active to allow form to be valid\r\n        if (guidedType && this.templateKeyControl.disabled) {\r\n          this.templateKeyControl.enable();\r\n        } else if (!guidedType && this.templateKeyControl.enabled) {\r\n          this.templateKeyControl.disable();\r\n        }\r\n      })\r\n    );\r\n\r\n    // change extension when template is changed\r\n    this.subscription.add(\r\n      combineLatest([\r\n        this.templateKeyControl.valueChanges.pipe(\r\n          startWith<string, string>(this.templateKeyControl.value),\r\n          distinctUntilChanged(),\r\n        ),\r\n        this.templates$,\r\n      ]).pipe(\r\n        filter(() => this.guidedType$.value),\r\n      ).subscribe(([templateKey, templates]) => {\r\n        const templateExt = templates?.find(t => t.Key === templateKey)?.Extension;\r\n        if (templateExt) {\r\n          this.extensionControl.patchValue(templateExt);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { DataTypeConstants } from '../../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { MoreSnippet, SetSnippet, SetSnippetLink, Snippet, SnippetsSets, SnippetsSubSubSets } from '../models/snippet.model';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SnippetsService {\r\n\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext, private translate: TranslateService) { }\r\n\r\n  getSnippets(view: SourceView): Observable<{ list: Snippet[]; sets: SnippetsSets; }> {\r\n    return this.http.get<{ snippets: Snippet[] }>('../ng-assets/snippets.json.js').pipe(\r\n      map(res => {\r\n        const relevant = this.filterAwayNotNeededSnippetsList(res.snippets, view);\r\n        const standardAndInputSnips = this.extractInputTypeSnippets(relevant);\r\n        const sets = this.initSnippetsWithConfig(standardAndInputSnips.standardArray, view, standardAndInputSnips.inputTypeSnippets);\r\n        const sorted: { list: Snippet[]; sets: SnippetsSets; } = {\r\n          list: standardAndInputSnips.standardArray,\r\n          sets\r\n        };\r\n        return sorted;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** Scan the list for sets starting with @ or [ and filter if not needed right now */\r\n  private filterAwayNotNeededSnippetsList(list: Snippet[], view: SourceView): Snippet[] {\r\n    const keyPrefixes = ['@', '['];\r\n    const keyPrefixIndex = (v: SourceView) => (v.Type.indexOf('Razor') > -1) ? 0 : 1;\r\n\r\n    const newList: Snippet[] = [];\r\n    for (const itm of list) {\r\n      const setHasPrefix = keyPrefixes.indexOf(itm.set[0]);\r\n      if (setHasPrefix === -1 || (setHasPrefix === keyPrefixIndex(view))) {\r\n        // if necessary, remove first char\r\n        if (setHasPrefix === keyPrefixIndex(view)) {\r\n          itm.set = itm.set.substr(1);\r\n        }\r\n        newList.push(itm);\r\n      }\r\n    }\r\n    return newList;\r\n  }\r\n\r\n  private extractInputTypeSnippets(list: Snippet[]): { standardArray: Snippet[]; inputTypeSnippets: Record<string, Snippet[]>; } {\r\n    const standardArray: Snippet[] = [];\r\n    const inputTypeArray: Snippet[] = [];\r\n\r\n    for (const itm of list) {\r\n      const systemSnippet = itm.set[0] === '\\\\';\r\n      if (!systemSnippet) {\r\n        standardArray.push(itm);\r\n      } else {\r\n        itm.set = itm.set.substr(1);\r\n        inputTypeArray.push(itm);\r\n      }\r\n    }\r\n    const inputTypeSnippets = this.catalogInputTypeSnippets(inputTypeArray);\r\n    const extracted: { standardArray: Snippet[]; inputTypeSnippets: Record<string, Snippet[]>; } = {\r\n      standardArray,\r\n      inputTypeSnippets,\r\n    };\r\n    return extracted;\r\n  }\r\n\r\n  private catalogInputTypeSnippets(list: Snippet[]): Record<string, Snippet[]> {\r\n    const inputTypeList: Record<string, Snippet[]> = {};\r\n    for (const itm of list) {\r\n      if (inputTypeList[itm.subset] === undefined) {\r\n        inputTypeList[itm.subset] = [];\r\n      }\r\n      inputTypeList[itm.subset].push(itm);\r\n    }\r\n    return inputTypeList;\r\n  }\r\n\r\n  private initSnippetsWithConfig(\r\n    standardArray: Snippet[],\r\n    templateConfiguration: SourceView,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): SnippetsSets {\r\n    const sets = this.makeTree(standardArray);\r\n\r\n    // retrieve all relevant content-types and infos\r\n    sets.Content = Object.assign({}, sets.Content, { Fields: {}, PresentationFields: {} });\r\n    if (templateConfiguration.TypeContent) {\r\n      this.loadContentType(\r\n        sets.Content.Fields as SnippetsSubSubSets,\r\n        templateConfiguration.TypeContent,\r\n        'Content',\r\n        templateConfiguration,\r\n        inputTypeSnippets,\r\n      );\r\n    }\r\n    if (templateConfiguration.TypeContentPresentation) {\r\n      this.loadContentType(\r\n        sets.Content.PresentationFields as SnippetsSubSubSets,\r\n        templateConfiguration.TypeContentPresentation,\r\n        'Content.Presentation',\r\n        templateConfiguration,\r\n        inputTypeSnippets,\r\n      );\r\n    }\r\n\r\n    if (templateConfiguration.HasList) {\r\n      sets.List = Object.assign({}, sets.List, { Fields: {}, PresentationFields: {} });\r\n      if (templateConfiguration.TypeList) {\r\n        this.loadContentType(\r\n          sets.List.Fields as SnippetsSubSubSets,\r\n          templateConfiguration.TypeList,\r\n          'Header',\r\n          templateConfiguration,\r\n          inputTypeSnippets,\r\n        );\r\n      }\r\n      if (templateConfiguration.TypeListPresentation) {\r\n        this.loadContentType(\r\n          sets.List.PresentationFields as SnippetsSubSubSets,\r\n          templateConfiguration.TypeListPresentation,\r\n          'Header.Presentation',\r\n          templateConfiguration,\r\n          inputTypeSnippets,\r\n        );\r\n      }\r\n    } else {\r\n      delete sets.List;\r\n    }\r\n\r\n    // maybe App-infos\r\n    if (templateConfiguration.HasApp) {\r\n      sets.App.Resources = {};\r\n      sets.App.Settings = {};\r\n      this.loadContentType(sets.App.Resources, 'App-Resources', 'App.Resources', templateConfiguration, inputTypeSnippets);\r\n      this.loadContentType(sets.App.Settings, 'App-Settings', 'App.Settings', templateConfiguration, inputTypeSnippets);\r\n    }\r\n\r\n    return sets;\r\n  }\r\n\r\n  /** Convert the list into a tree with set/subset/item */\r\n  private makeTree(list: Snippet[]): SnippetsSets {\r\n    const tree: SnippetsSets = {};\r\n    for (const o of list) {\r\n      if (tree[o.set] === undefined) {\r\n        tree[o.set] = {};\r\n      }\r\n      if (tree[o.set][o.subset] === undefined) {\r\n        tree[o.set][o.subset] = [];\r\n      }\r\n      const reformatted: SetSnippet = {\r\n        key: o.name,\r\n        label: this.label(o.set, o.subset, o.name),\r\n        snip: o.content,\r\n        help: o.help || this.help(o.set, o.subset, o.name),\r\n        links: this.linksList(o.links)\r\n      };\r\n\r\n      (tree[o.set][o.subset] as SetSnippet[]).push(reformatted);\r\n    }\r\n    return tree;\r\n  }\r\n\r\n  private label(set: string, subset: string, snip: string): string {\r\n    const key = this.getHelpKey(set, subset, snip, '.Key');\r\n\r\n    let result: string = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = snip;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getHelpKey(set: string, subset: string, snip: string, addition: string): string {\r\n    return 'SourceEditorSnippets' + '.' + set + '.' + subset + '.' + snip + addition;\r\n  }\r\n\r\n  private help(set: string, subset: string, snip: string): string {\r\n    const key = this.getHelpKey(set, subset, snip, '.Help');\r\n\r\n    let result: string = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private linksList(linksString: string): SetSnippetLink[] {\r\n    if (!linksString) { return null; }\r\n\r\n    const links: SetSnippetLink[] = [];\r\n    const llist = linksString.split('\\n');\r\n    for (const l of llist) {\r\n      const pair = l.split(':');\r\n      if (pair.length === 3) {\r\n        const link: SetSnippetLink = {\r\n          name: pair[0].trim(),\r\n          url: pair[1].trim() + ':' + pair[2].trim(),\r\n        };\r\n        links.push(link);\r\n      }\r\n    }\r\n    if (links.length === 0) { return null; }\r\n    return links;\r\n  }\r\n\r\n  /** spm TODO: this happens after snippets are calculated for the first time. Needs to be fixed */\r\n  private loadContentType(\r\n    target: SnippetsSubSubSets,\r\n    type: string,\r\n    prefix: string,\r\n    templateConfiguration: SourceView,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): void {\r\n    this.getFields(templateConfiguration.AppId, type).subscribe(fields => {\r\n      // first add common items if the content-type actually exists\r\n      for (const field of fields) {\r\n        const fieldname = field.StaticName;\r\n        target[fieldname] = {\r\n          key: fieldname,\r\n          label: fieldname,\r\n          snip: this.valuePlaceholder(prefix, fieldname, templateConfiguration),\r\n          help: field.Metadata.merged.Notes || ' (' + field.Type.toLowerCase() + ') '\r\n        };\r\n        // try to add generic snippets specific to this input-type\r\n        const snipDefaults = cloneDeep(target[fieldname]); // must be a copy, because target[fieldname] will grow\r\n        this.attachSnippets(target, prefix, fieldname, field.InputType, snipDefaults, inputTypeSnippets);\r\n      }\r\n\r\n      if (fields.length) {\r\n        const std = ['EntityId', 'EntityTitle', 'EntityGuid', 'EntityType', 'IsPublished', 'Modified'];\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < std.length; i++) {\r\n          target[std[i]] = {\r\n            key: std[i],\r\n            label: std[i],\r\n            snip: this.valuePlaceholder(prefix, std[i], templateConfiguration),\r\n            help: this.translate.instant('SourceEditorSnippets.StandardFields.' + std[i] + '.Help'),\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private valuePlaceholder(obj: string, val: string, templateConfiguration: SourceView): string {\r\n    return (templateConfiguration.Type.indexOf('Razor') > -1)\r\n      ? '@' + obj + '.' + val\r\n      : '[' + obj.replace('.', ':') + ':' + val + ']';\r\n  }\r\n\r\n  private getFields(appId: number, staticName: string): Observable<Field[]> {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appid: appId.toString(), staticName },\r\n    }).pipe(\r\n      map(fields => {\r\n        fields = fields.filter(field => field.Type !== DataTypeConstants.Empty);\r\n        for (const fld of fields) {\r\n          if (!fld.Metadata) { continue; }\r\n          const md = fld.Metadata;\r\n          const allMd = md.All;\r\n          const typeMd = md[fld.Type];\r\n          const inputMd = md[fld.InputType];\r\n          md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n        }\r\n        return fields;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private attachSnippets(\r\n    target: SnippetsSubSubSets,\r\n    prefix: string,\r\n    fieldname: string,\r\n    inputType: string,\r\n    snipDefaults: SetSnippet,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): void {\r\n    let genericSnippet = inputTypeSnippets[inputType];\r\n    if (inputType.indexOf('-')) { // if it's a sub-type, let's also get the master-type\r\n      const fieldType = inputType.substr(0, inputType.indexOf('-'));\r\n      if (fieldType) {\r\n        const typeSnips = inputTypeSnippets[fieldType];\r\n        if (typeSnips) {\r\n          genericSnippet = genericSnippet ? genericSnippet.concat(typeSnips) : typeSnips;\r\n        }\r\n      }\r\n    }\r\n    if (!genericSnippet) { return; }\r\n\r\n    if (target[fieldname].more === undefined) {\r\n      target[fieldname].more = {};\r\n    }\r\n    const fieldSnips = target[fieldname].more;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let g = 0; g < genericSnippet.length; g++) {\r\n      try {\r\n        fieldSnips[fieldname + '-' + genericSnippet[g].name] = Object.assign({}, snipDefaults, {\r\n          key: fieldname + ' - ' + genericSnippet[g].name,\r\n          label: genericSnippet[g].name,\r\n          snip: this.localizeGenericSnippet(genericSnippet[g].content, prefix, fieldname),\r\n          collapse: true,\r\n        } as MoreSnippet);\r\n      } finally { }\r\n    }\r\n  }\r\n\r\n  private localizeGenericSnippet(snip: string, objName: string, fieldName: string): string {\r\n    snip = snip\r\n      .replace(/(\\$\\{[0-9]+\\:)var(\\})/gi, '$1' + objName + '$2')\r\n      .replace(/(\\$\\{[0-9]+\\:)prop(\\})/gi, '$1' + fieldName + '$2');\r\n    return snip;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeItem } from '../models/tree-item.model';\r\n\r\n/** Sorts folders before files */\r\n@Pipe({ name: 'sortItems' })\r\nexport class SortItemsPipe implements PipeTransform {\r\n\r\n  transform(items: TreeItem[]) {\r\n    if (items == null) { return items; }\r\n\r\n    items.sort((item1, item2) => {\r\n      if (item1.isFolder < item2.isFolder) {\r\n        return 1;\r\n      } else if (item1.isFolder > item2.isFolder) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return items;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'depthPadding' })\r\nexport class DepthPaddingPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(depth: number, isFolder: boolean): SafeStyle {\r\n    let padding: number;\r\n    if (isFolder) {\r\n      padding = depth * 8;\r\n    } else {\r\n      padding = (depth === 0) ? 8 : (depth * 8 + 16);\r\n    }\r\n    return this.sanitizer.bypassSecurityTrustStyle(`padding-left: ${padding}px;`);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark explorer-wrapper\">\r\n\r\n  <div>\r\n    <ng-container *ngFor=\"let item of (tree | sortItems)\">\r\n      <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item}\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-template #fileOrFolder let-item=\"item\">\r\n\r\n      <div class=\"file\" *ngIf=\"!item.isFolder\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n        [ngClass]=\"{'active': toggledItems.includes(item.pathFromRoot) }\" [tippy]=\"item.name\" tippyShowDelay=\"750\"\r\n        (click)=\"openTemplate(item.pathFromRoot)\">\r\n        {{ item.name }}\r\n      </div>\r\n\r\n      <div *ngIf=\"item.isFolder\">\r\n        <div class=\"folder-name-wrapper\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n          (click)=\"toggleItem(item.pathFromRoot)\">\r\n          <div class=\"folder-name\" [tippy]=\"item.name\" tippyShowDelay=\"750\">\r\n            <mat-icon>\r\n              {{ toggledItems.includes(item.pathFromRoot) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n            </mat-icon>\r\n            <span>{{ item.name }}</span>\r\n          </div>\r\n          <div class=\"add-item\" tippy=\"Create file in this folder\" tippyShowDelay=\"750\" appClickStopPropagation\r\n            (click)=\"addFile(item.pathFromRoot)\">\r\n            <mat-icon>add</mat-icon>\r\n          </div>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledItems.includes(item.pathFromRoot)\">\r\n          <ng-container *ngFor=\"let item1 of (item.children | sortItems)\">\r\n            <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item1}\"></ng-container>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n\r\n    </ng-template>\r\n  </div>\r\n\r\n  <div class=\"create-button-wrapper\">\r\n    <button mat-icon-button tippy=\"Create file\" (click)=\"addFile()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { TreeItem } from '../models/tree-item.model';\r\nimport { calculateTree } from './code-templates.helpers';\r\n\r\n@Component({\r\n  selector: 'app-code-templates',\r\n  templateUrl: './code-templates.component.html',\r\n  styleUrls: ['./code-templates.component.scss'],\r\n})\r\nexport class CodeTemplatesComponent implements OnChanges {\r\n  @Input() filename: string;\r\n  @Input() templates: string[];\r\n  @Output() openView: EventEmitter<string> = new EventEmitter();\r\n  @Output() createTemplate: EventEmitter<string> = new EventEmitter();\r\n  tree: TreeItem[];\r\n  toggledItems: string[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.templates != null) {\r\n      this.tree = calculateTree(this.templates ?? []);\r\n    }\r\n    if (changes.filename != null) {\r\n      const previousFilename = changes.filename.previousValue;\r\n      if (previousFilename) {\r\n        this.toggleItem(previousFilename);\r\n      }\r\n      if (this.filename) {\r\n        this.showFileInTree(this.filename);\r\n      }\r\n    }\r\n  }\r\n\r\n  openTemplate(path: string): void {\r\n    this.openView.emit(path);\r\n  }\r\n\r\n  toggleItem(path: string): void {\r\n    GeneralHelpers.toggleInArray(path, this.toggledItems);\r\n  }\r\n\r\n  addFile(folder?: string): void {\r\n    this.createTemplate.emit(folder);\r\n  }\r\n\r\n  private showFileInTree(file: string): void {\r\n    if (file == null) { return; }\r\n    if (this.toggledItems.includes(file)) { return; }\r\n\r\n    const paths = file.split('/');\r\n    let pathFromRoot = '';\r\n    for (const path of paths) {\r\n      pathFromRoot = !pathFromRoot ? path : `${pathFromRoot}/${path}`;\r\n      if (this.toggledItems.includes(pathFromRoot)) { continue; }\r\n      this.toggleItem(pathFromRoot);\r\n    }\r\n  }\r\n}\r\n","import { TreeItem } from '../models/tree-item.model';\r\n\r\nexport function calculateTree(templates: string[]): TreeItem[] {\r\n  if (!templates) { return []; }\r\n\r\n  const tree: TreeItem[] = [];\r\n  for (const template of templates) {\r\n    let parent: TreeItem[] = tree;\r\n    const paths = template.split('/');\r\n    const last = paths[paths.length - 1];\r\n    let pathFromRoot = '';\r\n    for (let i = 0; i < paths.length; i++) {\r\n      const path = paths[i];\r\n      pathFromRoot += i ? `/${path}` : path;\r\n      const existing = parent.find(item => item.name === path);\r\n      if (existing) {\r\n        parent = existing.children;\r\n      } else {\r\n        const item: TreeItem = {\r\n          depth: i,\r\n          name: path,\r\n          pathFromRoot,\r\n          isFolder: path !== last,\r\n          ...(path !== last && { children: [] }),\r\n        };\r\n        parent.push(item);\r\n        parent = item.children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'objectToArray' })\r\nexport class ObjectToArrayPipe implements PipeTransform {\r\n  transform(obj: Record<string, any> | Record<string, any>[]): Record<string, any>[] {\r\n    if (obj == null) { return; }\r\n\r\n    if (Array.isArray(obj)) { return obj; }\r\n\r\n    return Object.values(obj);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\">\r\n  <div *ngFor=\"let section of snippets | keyvalue\">\r\n\r\n    <div class=\"collapsible-header section\" [tippy]=\"'SourceEditorSnippets.' + section.key + '.Help' | translate\"\r\n      tippyShowDelay=\"750\" (click)=\"toggleSection(section.key)\">\r\n      <mat-icon>\r\n        {{ toggledSections.includes(section.key) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n      </mat-icon>\r\n      <span>{{ 'SourceEditorSnippets.' + section.key + '.Title' | translate }}</span>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"toggledSections.includes(section.key)\">\r\n      <div *ngFor=\"let folder of section.value | keyvalue\">\r\n\r\n        <div class=\"collapsible-header folder\"\r\n          [tippy]=\"'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Help' | translate\" tippyShowDelay=\"750\"\r\n          (click)=\"toggleFolder(folder.key)\">\r\n          <mat-icon>\r\n            {{ toggledFolders.includes(folder.key) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n          </mat-icon>\r\n          <span>{{ 'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Title' | translate }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledFolders.includes(folder.key)\">\r\n          <div class=\"snippet\" *ngFor=\"let snippet of (folder.value | objectToArray)\">\r\n\r\n            <div class=\"snippet-label\">\r\n              <div matRipple class=\"text\" [tippy]=\"snippet.snip\" tippyShowDelay=\"750\"\r\n                (click)=\"addSnippet(snippet.snip)\">\r\n                {{ snippet.label }}\r\n              </div>\r\n              <mat-icon *ngIf=\"snippet.more\" tippy=\"Show More\" tippyShowDelay=\"750\" (click)=\"toggleMore(snippet.key)\">\r\n                {{ toggledMores.includes(snippet.key) ? 'more_vert' : 'more_horiz' }}\r\n              </mat-icon>\r\n              <mat-icon tippy=\"Show Help\" tippyShowDelay=\"750\" appClickStopPropagation\r\n                (click)=\"toggleInfo(snippet.key)\">\r\n                info\r\n              </mat-icon>\r\n            </div>\r\n\r\n            <div class=\"snippet-help\" *ngIf=\"toggledInfos.includes(snippet.key)\">\r\n              <div class=\"text\" [innerHTML]=\"snippet.help | safeHtml\"></div>\r\n              <div *ngFor=\"let link of snippet.links\">\r\n                <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n              </div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"toggledMores.includes(snippet.key)\">\r\n              <div *ngFor=\"let more of (snippet.more | objectToArray)\">\r\n\r\n                <div class=\"snippet-label\">\r\n                  <div matRipple class=\"text text-more\" [tippy]=\"more.snip\" tippyShowDelay=\"750\"\r\n                    (click)=\"addSnippet(more.snip)\">\r\n                    {{ more.label }}\r\n                  </div>\r\n                  <mat-icon tippy=\"Show Help\" tippyShowDelay=\"750\" appClickStopPropagation\r\n                    (click)=\"toggleInfo(more.key)\">\r\n                    info\r\n                  </mat-icon>\r\n                </div>\r\n\r\n                <div class=\"snippet-help snippet-help-more\" *ngIf=\"toggledInfos.includes(more.key)\">\r\n                  <div class=\"text\" [innerHTML]=\"more.help | safeHtml\"></div>\r\n                  <div *ngFor=\"let link of more.links\">\r\n                    <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </ng-container>\r\n\r\n          </div>\r\n        </ng-container>\r\n\r\n      </div>\r\n    </ng-container>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { SnippetsSets } from '../models/snippet.model';\r\n\r\n@Component({\r\n  selector: 'app-code-snippets',\r\n  templateUrl: './code-snippets.component.html',\r\n  styleUrls: ['./code-snippets.component.scss'],\r\n})\r\nexport class CodeSnippetsComponent {\r\n  @Input() snippets: SnippetsSets;\r\n  @Output() insertSnippet: EventEmitter<string> = new EventEmitter();\r\n  toggledSections: string[] = [];\r\n  toggledFolders: string[] = [];\r\n  toggledInfos: string[] = [];\r\n  toggledMores: string[] = [];\r\n\r\n  constructor() { }\r\n\r\n  addSnippet(snippet: string): void {\r\n    this.insertSnippet.emit(snippet);\r\n  }\r\n\r\n  toggleSection(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledSections);\r\n  }\r\n\r\n  toggleFolder(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledFolders);\r\n  }\r\n\r\n  toggleInfo(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledInfos);\r\n  }\r\n\r\n  toggleMore(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledMores);\r\n  }\r\n}\r\n","<div class=\"editor-root\" appToggleDebug [ngClass]=\"{ 'sxc-dark': monacoOptions.theme === '2sxc-dark' }\"\r\n  *ngIf=\"templateVars$ | async as data\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === Explorers.Templates }\" tippy=\"Templates\"\r\n      (click)=\"toggleExplorer(Explorers.Templates)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === Explorers.Snippets }\" tippy=\"Snippets\"\r\n      (click)=\"toggleExplorer(Explorers.Snippets)\">\r\n      <mat-icon>code</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-code-templates [hidden]=\"activeExplorer !== Explorers.Templates\" [filename]=\"data.view?.FileName\"\r\n    [templates]=\"data.templates\" (openView)=\"openView($event)\" (createTemplate)=\"createTemplate($event)\">\r\n  </app-code-templates>\r\n  <app-code-snippets [hidden]=\"activeExplorer !== Explorers.Snippets\" [snippets]=\"data.explorerSnipps\"\r\n    (insertSnippet)=\"insertSnippet($event)\">\r\n  </app-code-snippets>\r\n\r\n  <div class=\"editor-group\">\r\n    <div class=\"tabs-container fancy-scrollbar-dark\" *ngIf=\"data.tabs.length > 0\">\r\n      <div class=\"tab\" *ngFor=\"let tab of data.tabs\" [ngClass]=\"{\r\n        'active': tab.isActive,\r\n        'modified': tab.isModified,\r\n        'loading': tab.isLoading\r\n      }\" (click)=\"openView(tab.viewKey)\">\r\n        <div class=\"tab-label-container\" [tippy]=\"tab.label\" tippyShowDelay=\"750\">\r\n          <span class=\"tab-label\">{{ tab.label }}</span>\r\n        </div>\r\n        <div class=\"tab-actions-container\">\r\n          <mat-icon *ngIf=\"tab.isModified\" class=\"tab-action icon-modified\" svgIcon=\"circle\"></mat-icon>\r\n          <mat-spinner *ngIf=\"tab.isLoading\" class=\"spinner\" mode=\"indeterminate\" diameter=\"14\" color=\"white\">\r\n          </mat-spinner>\r\n          <mat-icon class=\"tab-action icon-close\" tippy=\"Close\" appClickStopPropagation\r\n            (click)=\"closeEditor(tab.viewKey)\">\r\n            close\r\n          </mat-icon>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <app-monaco-editor *ngIf=\"data.view\" [filename]=\"data.view.FileName\" [value]=\"data.view.Code\"\r\n      (valueChanged)=\"codeChanged($event, data.viewKey)\" [options]=\"monacoOptions\" [snippets]=\"data.editorSnipps\"\r\n      [autoFocus]=\"true\">\r\n    </app-monaco-editor>\r\n  </div>\r\n\r\n  <button mat-fab mat-elevation-z24 tippy=\"Click to save or CTRL + S\" *ngIf=\"data.activeView\" (click)=\"save()\">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n</div>\r\n","import { Component, NgZone, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin, fromEvent, Observable, of, Subscription } from 'rxjs';\r\nimport { map, mergeMap, share } from 'rxjs/operators';\r\nimport { MonacoEditorComponent } from '../monaco-editor';\r\nimport { Context } from '../shared/services/context';\r\nimport { CodeAndEditionWarningsComponent } from './code-and-edition-warnings/code-and-edition-warnings.component';\r\nimport { CodeAndEditionWarningsSnackBarData } from './code-and-edition-warnings/code-and-edition-warnings.models';\r\nimport { CodeEditorTemplateVars, ExplorerOption, Explorers, Tab, ViewInfo } from './code-editor.models';\r\nimport { CreateFileDialogComponent } from './create-file-dialog/create-file-dialog.component';\r\nimport { CreateFileDialogData, CreateFileDialogResult } from './create-file-dialog/create-file-dialog.models';\r\nimport { SourceView } from './models/source-view.model';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\n@Component({\r\n  selector: 'app-code-editor',\r\n  templateUrl: './code-editor.component.html',\r\n  styleUrls: ['./code-editor.component.scss'],\r\n})\r\nexport class CodeEditorComponent implements OnInit, OnDestroy {\r\n  @ViewChild(MonacoEditorComponent) private monacoEditorRef: MonacoEditorComponent;\r\n\r\n  Explorers = Explorers;\r\n  activeExplorer: ExplorerOption = Explorers.Templates;\r\n  monacoOptions = {\r\n    theme: '2sxc-dark',\r\n    tabSize: 2,\r\n  };\r\n  templateVars$: Observable<CodeEditorTemplateVars>;\r\n\r\n  private templates$: BehaviorSubject<string[]>;\r\n  private activeView$: BehaviorSubject<string>;\r\n  private openViews$: BehaviorSubject<string[]>;\r\n  private viewInfos$: BehaviorSubject<ViewInfo[]>;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private sourceService: SourceService,\r\n    private snippetsService: SnippetsService,\r\n    private zone: NgZone,\r\n    private titleService: Title,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n  ) {\r\n    this.context.init(this.route);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = new Subscription();\r\n    this.templates$ = new BehaviorSubject<string[]>([]);\r\n    const initialViewKey = this.route.snapshot.paramMap.get('codeItemKey');\r\n    this.activeView$ = new BehaviorSubject(initialViewKey);\r\n    this.openViews$ = new BehaviorSubject([initialViewKey]);\r\n    this.viewInfos$ = new BehaviorSubject<ViewInfo[]>([]);\r\n\r\n    this.attachListeners();\r\n\r\n    this.sourceService.getTemplates().subscribe(templates => {\r\n      this.templates$.next(templates);\r\n    });\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.templates$, this.openViews$]).subscribe(([templates, openViews]) => {\r\n        if (templates.length === 0) { return; }\r\n\r\n        let viewInfos = this.viewInfos$.value;\r\n        const notLoaded = openViews.filter(viewKey => !viewInfos.some(v => v.viewKey === viewKey));\r\n        if (notLoaded.length === 0) { return; }\r\n\r\n        forkJoin(\r\n          notLoaded.map(viewKey => {\r\n            // set viewKey in viewInfos to mark that view is being fetched\r\n            const newViewInfo: ViewInfo = {\r\n              viewKey,\r\n            };\r\n            viewInfos = [...viewInfos, newViewInfo];\r\n\r\n            const view$ = this.sourceService.get(viewKey).pipe(share());\r\n            const snippets$ = view$.pipe(mergeMap(view => this.snippetsService.getSnippets(view)));\r\n            return forkJoin([of(viewKey), view$, snippets$]);\r\n          })\r\n        ).subscribe(results => {\r\n          let viewInfos1 = this.viewInfos$.value;\r\n\r\n          results.forEach(([viewKey, view, snippets]) => {\r\n            const selectedIndex = viewInfos1.findIndex(v => v.viewKey === viewKey);\r\n            if (selectedIndex < 0) { return; }\r\n\r\n            const newViewInfo: ViewInfo = {\r\n              viewKey,\r\n              view,\r\n              explorerSnipps: snippets.sets,\r\n              editorSnipps: snippets.list,\r\n              savedCode: view.Code,\r\n            };\r\n            viewInfos1 = [...viewInfos1.slice(0, selectedIndex), newViewInfo, ...viewInfos1.slice(selectedIndex + 1)];\r\n            this.showCodeAndEditionWarnings(view, templates);\r\n          });\r\n\r\n          this.viewInfos$.next(viewInfos1);\r\n        });\r\n\r\n        this.viewInfos$.next(viewInfos);\r\n      })\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.activeView$, this.viewInfos$]).subscribe(([activeView, viewInfos]) => {\r\n        const active = viewInfos.find(v => v.viewKey === activeView);\r\n        const defaultTitle = 'Code Editor';\r\n        const newTitle = active == null ? defaultTitle : `${active.view?.FileName} - ${defaultTitle}`;\r\n        const oldTitle = this.titleService.getTitle();\r\n        if (newTitle !== oldTitle) {\r\n          this.titleService.setTitle(newTitle);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.templateVars$ = combineLatest([this.templates$, this.activeView$, this.openViews$, this.viewInfos$]).pipe(\r\n      map(([templates, activeView, openViews, viewInfos]) => {\r\n        const tabs = openViews.map(viewKey => {\r\n          const viewInfo = viewInfos.find(v => v.viewKey === viewKey);\r\n          const label: Tab = {\r\n            viewKey,\r\n            label: viewInfo?.view?.FileName ?? viewKey,\r\n            isActive: viewKey === activeView,\r\n            isModified: viewInfo?.view?.Code !== viewInfo?.savedCode,\r\n            isLoading: viewInfo?.view == null,\r\n          };\r\n          return label;\r\n        });\r\n        const activeViewInfo = viewInfos.find(v => v.viewKey === activeView);\r\n\r\n        const templateVars: CodeEditorTemplateVars = {\r\n          activeView,\r\n          tabs,\r\n          viewKey: activeViewInfo?.viewKey,\r\n          view: activeViewInfo?.view,\r\n          templates,\r\n          explorerSnipps: activeViewInfo?.explorerSnipps,\r\n          editorSnipps: activeViewInfo?.editorSnipps,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.templates$.complete();\r\n    this.activeView$.complete();\r\n    this.openViews$.complete();\r\n    this.viewInfos$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  toggleExplorer(explorer: ExplorerOption): void {\r\n    this.activeExplorer = (this.activeExplorer !== explorer) ? explorer : null;\r\n  }\r\n\r\n  createTemplate(folder?: string): void {\r\n    const data: CreateFileDialogData = {\r\n      folder,\r\n    };\r\n    const dialogRef = this.dialog.open(CreateFileDialogComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result?: CreateFileDialogResult) => {\r\n      if (!result) { return; }\r\n\r\n      this.sourceService.createTemplate(result.name, result.templateKey).subscribe(() => {\r\n        this.sourceService.getTemplates().subscribe(files => {\r\n          this.templates$.next(files);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.monacoEditorRef?.insertSnippet(snippet);\r\n  }\r\n\r\n  codeChanged(code: string, viewKey: string): void {\r\n    let viewInfos = this.viewInfos$.value;\r\n    const selectedIndex = viewInfos.findIndex(v => v.viewKey === viewKey);\r\n    const selectedViewInfo = viewInfos[selectedIndex];\r\n    const newViewInfo: ViewInfo = {\r\n      ...selectedViewInfo,\r\n      view: {\r\n        ...selectedViewInfo.view,\r\n        Code: code,\r\n      },\r\n    };\r\n    viewInfos = [...viewInfos.slice(0, selectedIndex), newViewInfo, ...viewInfos.slice(selectedIndex + 1)];\r\n    this.viewInfos$.next(viewInfos);\r\n  }\r\n\r\n  openView(viewKey: string): void {\r\n    // fix viewKey because it can be a templateId or a path, and file might already be open\r\n    viewKey = this.viewInfos$.value.find(v => v.viewKey !== viewKey && v.view?.FileName === viewKey)?.viewKey ?? viewKey;\r\n\r\n    const oldActiveView = this.activeView$.value;\r\n    if (oldActiveView !== viewKey) {\r\n      this.activeView$.next(viewKey);\r\n    }\r\n    const oldOpenViews = this.openViews$.value;\r\n    if (!oldOpenViews.includes(viewKey)) {\r\n      const newOpenViews = [...oldOpenViews, viewKey];\r\n      this.openViews$.next(newOpenViews);\r\n    }\r\n  }\r\n\r\n  closeEditor(viewKey: string): void {\r\n    const oldOpenViews = this.openViews$.value;\r\n    const newOpenViews = oldOpenViews.filter(key => key !== viewKey);\r\n\r\n    const oldActiveView = this.activeView$.value;\r\n    if (oldActiveView === viewKey) {\r\n      const newActiveView = oldOpenViews[oldOpenViews.indexOf(oldActiveView) - 1] ?? newOpenViews[0];\r\n      this.activeView$.next(newActiveView);\r\n    }\r\n\r\n    this.openViews$.next(newOpenViews);\r\n  }\r\n\r\n  save(viewKey?: string): void {\r\n    viewKey ??= this.activeView$.value;\r\n    const viewInfo = this.viewInfos$.value.find(v => v.viewKey === viewKey);\r\n    if (viewInfo?.view == null) { return; }\r\n\r\n    this.snackBar.open('Saving...');\r\n    const codeToSave = viewInfo.view.Code;\r\n    this.sourceService.save(viewKey, viewInfo.view).subscribe({\r\n      next: res => {\r\n        if (!res) {\r\n          this.snackBar.open('Failed', null, { duration: 2000 });\r\n          return;\r\n        }\r\n\r\n        let newViewInfos = [...this.viewInfos$.value];\r\n        const selectedIndex = newViewInfos.findIndex(v => v.viewKey === viewKey);\r\n        if (selectedIndex < 0) { return; }\r\n\r\n        const selectedViewInfo = newViewInfos[selectedIndex];\r\n        const newViewInfo: ViewInfo = {\r\n          ...selectedViewInfo,\r\n          savedCode: codeToSave,\r\n        };\r\n        newViewInfos = [...newViewInfos.slice(0, selectedIndex), newViewInfo, ...newViewInfos.slice(selectedIndex + 1)];\r\n        this.viewInfos$.next(newViewInfos);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Show info about editions if other files with the same name exist */\r\n  private showCodeAndEditionWarnings(view: SourceView, files: string[]): void {\r\n    const pathAndName = view.FileName;\r\n    const pathSeparator = pathAndName.indexOf('/') > -1 ? pathAndName.lastIndexOf('/') + 1 : 0;\r\n    const pathWithSlash = pathSeparator === 0 ? '' : pathAndName.substring(0, pathSeparator);\r\n    const fullName = pathAndName.substring(pathSeparator);\r\n    const name = fullName.substring(0, fullName.length - view.Extension.length);\r\n    const nameCode = name + '.code' + view.Extension;\r\n    // find out if we also have a code file\r\n    const codeFile = files.find(file => file === pathWithSlash + nameCode);\r\n    const otherEditions = files.filter(file => file.endsWith(fullName)).length - 1;\r\n\r\n    if (codeFile || otherEditions) {\r\n      const snackBarData: CodeAndEditionWarningsSnackBarData = {\r\n        fileName: view.FileName,\r\n        codeFile,\r\n        otherEditions,\r\n        openCodeBehind: false,\r\n      };\r\n      const snackBarRef = this.snackBar.openFromComponent(CodeAndEditionWarningsComponent, {\r\n        data: snackBarData,\r\n        duration: 10000,\r\n      });\r\n\r\n      snackBarRef.onAction().subscribe(() => {\r\n        if ((snackBarRef.containerInstance.snackBarConfig.data as CodeAndEditionWarningsSnackBarData).openCodeBehind) {\r\n          this.openView(codeFile);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private attachListeners(): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<BeforeUnloadEvent>(window, 'beforeunload').subscribe(event => {\r\n          const allSaved = !this.viewInfos$.value.some(v => v.view != null && v.view.Code !== v.savedCode);\r\n          if (allSaved) { return; }\r\n          event.preventDefault();\r\n          event.returnValue = ''; // fix for Chrome\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent<KeyboardEvent>(window, 'keydown').subscribe(event => {\r\n          const CTRL_S = event.keyCode === 83 && (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey);\r\n          if (!CTRL_S) { return; }\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.save(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: CodeEditorComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CodeEditorRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { MonacoEditorModule } from '../monaco-editor';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { buildTranslateConfiguration, TranslateLoaderWithErrorHandling } from '../shared/translation';\r\nimport { CodeAndEditionWarningsComponent } from './code-and-edition-warnings/code-and-edition-warnings.component';\r\nimport { CodeEditorRoutingModule } from './code-editor-routing.module';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\nimport { CodeSnippetsComponent } from './code-snippets/code-snippets.component';\r\nimport { ObjectToArrayPipe } from './code-snippets/object-to-array.pipe';\r\nimport { CodeTemplatesComponent } from './code-templates/code-templates.component';\r\nimport { DepthPaddingPipe } from './code-templates/depth-padding.pipe';\r\nimport { SortItemsPipe } from './code-templates/order-items.pipe';\r\nimport { CreateFileDialogComponent } from './create-file-dialog/create-file-dialog.component';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactoryCode(http: HttpClient) {\r\n  return new TranslateLoaderWithErrorHandling(http, './i18n/code-editor.', `.js?${window.sxcVersion}`);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    ObjectToArrayPipe,\r\n    CodeTemplatesComponent,\r\n    DepthPaddingPipe,\r\n    SortItemsPipe,\r\n    CodeAndEditionWarningsComponent,\r\n    CreateFileDialogComponent,\r\n  ],\r\n  imports: [\r\n    CodeEditorRoutingModule,\r\n    SharedComponentsModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactoryCode)),\r\n    MonacoEditorModule,\r\n    MatProgressSpinnerModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    SourceService,\r\n    SnippetsService,\r\n    TranslateService,\r\n  ],\r\n})\r\nexport class CodeEditorModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  getFields(contentType: ContentType) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}