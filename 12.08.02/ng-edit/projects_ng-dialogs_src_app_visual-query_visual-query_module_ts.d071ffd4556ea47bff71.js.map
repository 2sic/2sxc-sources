{"version":3,"sources":["./projects/ng-dialogs/src/app/visual-query/services/query-definition.service.ts","./projects/ng-dialogs/src/app/visual-query/plumb-editor/plumb-editor.helpers.ts","./projects/ng-dialogs/src/app/visual-query/plumb-editor/plumber.helper.ts","./projects/ng-dialogs/src/app/visual-query/query-result/query-result.component.html","./projects/ng-dialogs/src/app/visual-query/query-result/query-result.component.ts","./projects/ng-dialogs/src/app/visual-query/stream-error-result/stream-error-result.component.ts","./projects/ng-dialogs/src/app/visual-query/stream-error-result/stream-error-result.component.html","./projects/ng-dialogs/src/app/visual-query/services/visual-query.service.ts","./projects/ng-dialogs/src/app/visual-query/plumb-editor/plumb-editor.component.html","./projects/ng-dialogs/src/app/visual-query/plumb-editor/plumb-editor.component.ts","./projects/ng-dialogs/src/app/visual-query/run-explorer/run-explorer.component.html","./projects/ng-dialogs/src/app/visual-query/run-explorer/run-explorer.component.ts","./projects/ng-dialogs/src/app/visual-query/run-explorer/run-explorer.helpers.ts","./projects/ng-dialogs/src/app/visual-query/add-explorer/add-explorer.component.html","./projects/ng-dialogs/src/app/visual-query/add-explorer/add-explorer.component.ts","./projects/ng-dialogs/src/app/visual-query/add-explorer/add-explorer.helpers.ts","./projects/ng-dialogs/src/app/visual-query/visual-query-routing.module.ts","./projects/ng-dialogs/src/app/visual-query/visual-query.component.ts","./projects/ng-dialogs/src/app/visual-query/visual-query.component.html","./projects/ng-dialogs/src/app/visual-query/visual-query.module.ts"],"names":["http","context","dnnContext","fetchPipeline","pipelineEntityId","dataSources","this","get","$2sxc","apiUrl","params","appId","toString","id","pipe","map","pipelineModel","DataSources","length","buildDefaultModel","fixPipelineDataSources","templateDataSources","templateDS","dataSource","find","ds","PartAssemblyAndType","push","Description","EntityGuid","EntityId","undefined","Name","VisualDesignerData","Pipeline","StreamWiring","pipelineDataSources","some","pipelineDS","outDs","pipelineDataSource","Top","Left","fetchDataSources","ContentType","Difficulty","DynamicIn","DynamicOut","EnableConfig","HelpLink","Icon","In","Out","PrimaryType","UiHint","typeNameFilter","input","format","globalParts","split","classFullNameParts","savePipeline","pipeline","post","Id","newPipelineModel","runPipeline","top","debugStream","source","sourceOut","from","out","QueryDefinitionService","guiTypes","Cache","Filter","Logic","Lookup","Modify","Security","Sort","Source","Target","Unknown","Debug","System","calculateTypeInfos","typeInfos","typeInfo","dataSrcIdPrefix","jsPlumbRoot","onConnectionsChanged","onDragend","onDebugStream","lineCount","linePaintDefault","stroke","strokeWidth","outlineStroke","outlineWidth","lineColors","maxCols","uuidColorMap","bulkDelete","instance","window","jsPlumb","getInstance","getInstanceDefaults","batch","initDomDataSources","initWirings","bindEvents","repaintEverything","destroy","reset","unbindContainer","removeEndpointsOnDataSource","pipelineDataSourceGuid","elementId","selectEndpoints","element","delete","getAllConnections","connection","From","sourceId","replace","endpoints","getOverlay","label","To","targetId","getStreamsOut","streamsOut","target","each","endpoint","join","putEntityCountOnConnections","result","Streams","forEach","stream","sourceElementId","toUuid","includes","TargetIn","sEndp","getEndpoint","SourceOut","connections","filter","getUuid","Error","Count","setLabel","cssClass","events","click","labelOverlay","AllowEdit","nextLinePaintStyle","uuid","Object","assign","container","Container","Connector","curviness","PaintStyle","HoverPaintStyle","domDataSource","querySelector","draggable","grid","stop","event","el","position","finalPos","setTimeout","name","addEndpoint","targetEndpointUnlimited","buildTargetEndpoint","maxConnections","makeTarget","makeSource","buildSourceEndpoint","wire","fromUuid","targetElementId","pipeDataSource","connect","uuids","paintStyle","e","console","error","message","to","endpointName","isIn","style","d","isDynamic","getEndpointInfo","endpointInfo","required","model","enabled","fill","radius","isSource","anchor","faces","overlays","getEndpointOverlays","isTarget","dropOptions","hoverClass","activeClass","location","newLabel","prompt","bind","info","targetEndpoint","deleteEndpoint","endpointLabel","labelPrompt","getLabel","getEndpoints","canvas","classList","contains","Math","floor","random","deleteConnection","fireEvent","trimmed","trim","endsWith","substring","dialogData","dialogRef","visualQueryService","ngOnInit","pipelineModel$","value","Params","testParams","TestParameters","parameters","concat","timeUsed","QueryTimer","Milliseconds","ticksUsed","Ticks","optionsForTop","Query","sources","Sources","streams","closeDialog","close","show","original","QueryResultComponent","errorData","openInsights","open","StreamErrorResultComponent","router","route","queryDefinitionService","titleService","snackBar","dialog","viewContainerRef","zone","metadataService","contentTypesService","changeDetectorRef","BehaviorSubject","dataSources$","putEntityCountOnConnections$","Subject","pipelineId","parseInt","snapshot","paramMap","doRefresh","subscription","Subscription","ngOnDestroy","complete","unsubscribe","init","attachKeyboardSave","refreshOnChildClosed","editPipelineEntity","formUrl","items","navigate","relativeTo","saveAndRun","save","run","addDataSource","cloneDeep","next","removeDataSource","StreamsOut","renameDataSource","changeDataSourceDescription","description","changeConnections","changeDataSourcePosition","editDataSource","contentTypeName","key","getMetadata","subscribe","metadata","retrieveContentType","contentType","ContentTypeName","For","Guid","alert","callback","duration","pipelineResult","showQueryResult","warn","showStreamErrorResult","streamResult","sourceName","reloadingSnackBar","setTitle","autoFocus","backdropClass","closeOnNavigation","data","panelClass","markForCheck","ErrorData","runOutsideAngular","add","fromEvent","firstChild","navigator","platform","match","metaKey","ctrlKey","keyCode","preventDefault","startWith","pairwise","refresh","VisualQueryService","hardReset","scriptLoaded$","test","src","plumber","templateModel$","combineLatest","detectChanges","allowEdit","ngAfterViewInit","domDataSourcesLoaded$","domDataSourcesRef","changes","Plumber","domRootRef","nativeElement","configureDataSource","getTypeName","partAssemblyAndType","isOutDataSource","remove","confirm","openHelp","url","editName","newName","editDescription","newDescription","PlumbEditorComponent","warnings$","warnings","queryParams","param","midMatch","exec","testMid","urlMid","moduleId","calculateWarnings","editPipeline","openParamsHelp","saveAndRunQuery","openRestApi","RunExplorerComponent","toggledItems","difficulties","difficulty$","default","sorted$","maxDifficulty","filtered","sort","a","b","toLocaleLowerCase","localeCompare","sorted","type","filterAndSortDataSources","toggleDifficulty","checked","advanced","toggleItem","item","trackGroups","index","trackDataSources","AddExplorerComponent","routes","path","component","explorer","activeExplorer","toggleExplorer","VisualQueryComponent","children","matcher","loadChildren","then","m","EditModule","history","VisualQueryRoutingModule","VisualQueryModule"],"mappings":"mZASA,aAEE,WAAoBA,EAA0BC,EAA0BC,GAApD,KAAAF,OAA0B,KAAAC,UAA0B,KAAAC,a,OAExE,YAAAC,cAAA,SAAcC,EAA0BC,GAAxC,WACE,OAAOC,KAAKN,KAAKO,IAAmBD,KAAKJ,WAAWM,MAAMR,KAAKS,OAAO,MAAiB,CACrFC,OAAQ,CAAEC,MAAOL,KAAKL,QAAQU,MAAMC,WAAYC,GAAIT,EAAiBQ,cACpEE,MACD,EAAAC,EAAA,GAAI,SAAAC,GAMF,OAJKA,EAAcC,YAAYC,QAC7B,EAAKC,kBAAkBH,EAAeX,GAExC,EAAKe,uBAAuBJ,EAAcC,aACnCD,MAKL,YAAAG,kBAAR,SAA0BH,EAA8BX,G,QAChDgB,EAAsB,iD,WACjBC,GACT,IAAMC,EAAalB,EAAYmB,KAAK,SAAAC,GAAM,OAAAA,EAAGC,sBAAwBJ,EAAWI,sBAShFV,EAAcC,YAAYU,KARqB,CAC7CC,YAAa,GACbC,WAAYP,EAAWO,WACvBC,cAAUC,EACVC,KAAMT,EAAWS,KACjBN,oBAAqBJ,EAAWI,oBAChCO,mBAAoBX,EAAWW,sB,IARnC,IAAyB,eAAAZ,GAAmB,8B,EAAvB,S,iGAarBL,EAAckB,SAASC,aAAe,mDAGhC,YAAAf,uBAAR,SAA+BgB,G,UAI7B,IAH4BA,EAAoBC,KAC9C,SAAAC,GAAc,OAAAA,EAAWT,aAAe,gDAEhB,CACxB,IAAMU,EAAQ,mCASdH,EAAoBT,KARmB,CACrCC,YAAaW,EAAMX,YACnBC,WAAYU,EAAMV,WAClBC,cAAUC,EACVC,KAAMO,EAAMP,KACZN,oBAAqBa,EAAMb,oBAC3BO,mBAAoBM,EAAMN,qB,IAK9B,IAAiC,eAAAG,GAAmB,8BAAE,CAAjD,IAAMI,EAAkB,QACU,QAArC,EAAAA,EAAmBP,0BAAkB,QAArCO,EAAmBP,mBAAuB,CAAEQ,IAAK,GAAIC,KAAM,M,mGAI/D,YAAAC,iBAAA,WACE,OAAOrC,KAAKN,KAAKO,IAAkBD,KAAKJ,WAAWM,MAAMR,KAAKS,OAAO,OAAyBK,MAC5F,EAAAC,EAAA,GAAI,SAAAV,GACF,IAAMkC,EAAQ,mCAiBd,OADAlC,EAAYsB,KAfmB,CAC7BiB,iBAAab,EACbc,WAAY,oDACZC,WAAW,EACXC,YAAY,EACZC,kBAAcjB,EACdkB,cAAUlB,EACVmB,UAAMnB,EACNoB,GAAIZ,EAAMY,GACVnB,KAAMO,EAAMP,KACZoB,SAAKrB,EACLL,oBAAqBa,EAAMb,oBAC3B2B,YAAad,EAAMc,YACnBC,YAAQvB,IAGH1B,MAKb,YAAAkD,eAAA,SAAeC,EAAeC,GAC5B,IAAMC,EAAcF,EAAMG,MAAM,MAEhC,OAAQF,GACN,IAAK,gBAEH,OADsBC,EAAY,GAEpC,IAAK,YACH,IAAME,EAAqBF,EAAY,GAAGC,MAAM,KAEhD,OADkBC,EAAmBA,EAAmB1C,OAAS,GAEnE,QACE,OAAOsC,IAKb,YAAAK,aAAA,SAAa7C,GAAb,WACQ8C,EAAW9C,EAAckB,SACzB7B,EAAcW,EAAcC,YAElC,OAAOX,KAAKN,KAAK+D,KACfzD,KAAKJ,WAAWM,MAAMR,KAAKS,OAAO,MAClC,CAAEqD,SAAQ,EAAEzD,YAAW,GACvB,CAAEK,OAAQ,CAAEC,MAAOL,KAAKL,QAAQU,MAAMC,WAAYoD,GAAIF,EAAShC,SAASlB,cACxEE,MACA,EAAAC,EAAA,GAAI,SAAAkD,GAEF,OADA,EAAK7C,uBAAuB6C,EAAiBhD,aACtCgD,MAMb,YAAAC,YAAA,SAAYrD,EAAYsD,GACtB,OAAO7D,KAAKN,KAAKO,IAAoBD,KAAKJ,WAAWM,MAAMR,KAAKS,OAAO,MAAiB,CACtFC,OAAQ,CAAEC,MAAOL,KAAKL,QAAQU,MAAMC,WAAYC,GAAIA,EAAGD,WAAYuD,IAAKA,EAAIvD,eAKhF,YAAAwD,YAAA,SAAYvD,EAAYwD,EAAgBC,EAAmBH,GACzD,OAAO7D,KAAKN,KAAKO,IAAoBD,KAAKJ,WAAWM,MAAMR,KAAKS,OAAO,MAAyB,CAC9FC,OAAQ,CAAEC,MAAOL,KAAKL,QAAQU,MAAMC,WAAYC,GAAIA,EAAGD,WAAY2D,KAAMF,EAAQG,IAAKF,EAAWH,IAAKA,EAAIvD,e,sCA9HnG6D,GAAsB,qC,0BAAtBA,EAAsB,QAAtBA,EAAsB,Y,EADnC,G,sECNaC,EAAqB,CAChCC,MAAO,CAAE3C,KAAM,QAASkB,KAAM,UAAWI,OAAQ,mBACjDsB,OAAQ,CAAE5C,KAAM,SAAUkB,KAAM,cAAeI,OAAQ,2DACvDuB,MAAO,CAAE7C,KAAM,QAASkB,KAAM,QAASI,OAAQ,iEAC/CwB,OAAQ,CAAE9C,KAAM,SAAUkB,KAAM,SAAUI,OAAQ,yEAClDyB,OAAQ,CAAE/C,KAAM,SAAUkB,KAAM,kBAAmBI,OAAQ,6DAC3D0B,SAAU,CAAEhD,KAAM,WAAYkB,KAAM,iBAAkBI,OAAQ,qEAC9D2B,KAAM,CAAEjD,KAAM,OAAQkB,KAAM,OAAQI,OAAQ,kBAC5C4B,OAAQ,CAAElD,KAAM,SAAUkB,KAAM,eAAgBI,OAAQ,oDACxD6B,OAAQ,CAAEnD,KAAM,SAAUkB,KAAM,SAAUI,OAAQ,+CAClD8B,QAAS,CAAEpD,KAAM,UAAWkB,KAAM,sBAAuBI,OAAQ,gBACjE+B,MAAO,CAAErD,KAAM,QAASkB,KAAM,aAAcI,OAAQ,mBACpDgC,OAAQ,CAAEtD,KAAM,SAAUkB,KAAM,gBAAiBI,OAAQ,gBAGpD,SAASiC,EAAmBnD,EAA2C/B,G,QACtEmF,EAAuB,G,WAElBhD,GACT,IAAIiD,OAAQ,EACNlE,EAAalB,EAAYmB,KAAK,SAAAC,GAAM,OAAAA,EAAGC,sBAAwBc,EAAmBd,sBACpFH,IACFkE,GAAW,QAAH,GAASlE,EAAW8B,YAAcqB,EAASnD,EAAW8B,aAAeqB,EAASU,SAC/D,MAAnB7D,EAAW2B,OAAgBuC,EAASvC,KAAO3B,EAAW2B,MAC9B,MAAxB3B,EAAWuB,YAAqB2C,EAAS3C,UAAYvB,EAAWuB,WACvC,MAAzBvB,EAAWwB,aAAsB0C,EAAS1C,WAAaxB,EAAWwB,YAC3C,MAAvBxB,EAAW0B,WAAoBwC,EAASxC,SAAW1B,EAAW0B,UACnC,MAA3B1B,EAAWyB,eAAwByC,EAASzC,aAAezB,EAAWyB,cACjD,MAArBzB,EAAW+B,SAAkBmC,EAASnC,OAAS/B,EAAW+B,SAE3DmC,IAAYA,GAAW,QAAH,GAAQf,EAASU,UAC1CI,EAAUhD,EAAmBX,YAAc4D,G,IAb7C,IAAiC,eAAArD,GAAmB,8B,EAAvB,S,iGAgB7B,OAAOoD,EC9BF,IAAME,EAAkB,cAE/B,aAqBE,WACUC,EACA3E,EACAX,EACAuF,EACAC,EACAC,GANV,WACU,KAAAH,cACA,KAAA3E,gBACA,KAAAX,cACA,KAAAuF,uBACA,KAAAC,YACA,KAAAC,gBAzBF,KAAAC,UAAY,EACZ,KAAAC,iBAAmB,CACzBC,OAAQ,UACRC,YAAa,EACbC,cAAe,QACfC,aAAc,GAER,KAAAC,WAAa,CACnB,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,WAEL,KAAAC,QAAUhG,KAAK+F,WAAWnF,OAAS,EACnC,KAAAqF,aAAoC,GACpC,KAAAC,YAAa,EAUnBlG,KAAKmG,SAAWC,OAAOC,QAAQC,YAAYtG,KAAKuG,oBAAoBvG,KAAKqF,cACzErF,KAAKmG,SAASK,MAAM,WAClB,EAAKC,qBACL,EAAKC,cACL,EAAKC,eAIP3G,KAAKmG,SAASS,oBAgUlB,OA7TE,YAAAC,QAAA,WACE7G,KAAKmG,SAASW,QACd9G,KAAKmG,SAASY,mBAGhB,YAAAC,4BAAA,SAA4BC,GAA5B,WACQC,EAAY9B,EAAkB6B,EACpCjH,KAAKkG,YAAa,EAClBlG,KAAKmG,SAASK,MAAM,WAClB,EAAKL,SAASgB,gBAAgB,CAAEC,QAASF,IAAaG,WAExDrH,KAAKkG,YAAa,GAGpB,YAAAoB,kBAAA,WAUE,OATsCtH,KAAKmG,SAASmB,oBAAoB7G,IAAI,SAAC8G,GAO3E,MANyB,CACvBC,KAAMD,EAAWE,SAASC,QAAQtC,EAAiB,IACnDtC,IAAKyE,EAAWI,UAAU,GAAGC,WAAW,iBAAiBC,MACzDC,GAAIP,EAAWQ,SAASL,QAAQtC,EAAiB,IACjDvC,GAAI0E,EAAWI,UAAU,GAAGC,WAAW,iBAAiBC,UAO9D,YAAAG,cAAA,WACE,IAAMC,EAAuB,GAK7B,OAJAjI,KAAKmG,SAASgB,gBAAgB,CAAEe,OAAQ9C,mBAA2B+C,KAAK,SAACC,GACvEH,EAAW5G,KAAK+G,EAASR,WAAW,iBAAiBC,SAEjCI,EAAWI,KAAK,MAIxC,YAAAC,4BAAA,SAA4BC,GAA5B,I,EAAA,OACgB,QAAd,EAAAA,EAAOC,eAAO,SAAEC,QAAQ,SAAAC,G,QAChBC,EAAkBvD,EAAkBsD,EAAO9D,OAK3CgE,GAJa,CAAC,uCAAwC,EAAKlI,cAAckB,SAASL,YACrDsH,SAASH,EAAO7D,QAAUO,iBAA0BA,EAAkBsD,EAAO7D,QAG/E,OAAS6D,EAAOI,SAE3CC,EAAmB,EAAK5C,SAAS6C,YAHtBL,EAAkB,QAAUD,EAAOO,WAK+B,QADnF,EAAkB,QAAlB,EAAAF,aAAK,EAALA,EAAOG,mBAAW,eACdC,OAAO,SAAC5B,GAA0B,OAAAA,EAAWI,UAAU,GAAGyB,YAAcR,WAAO,SAC/EH,QAAQ,SAAClB,GACT,IAAMM,EAASa,EAAOW,MAAkC,GAA1BX,EAAOY,MAAMhJ,WAE3CiH,EAAWgC,SAAS,CAClB1B,MAAK,EACL2B,SAHe,wBAA2Bd,EAAOW,MAAa,sBAAL,IAIzDI,OAAQ,CACNC,MAAO,SAACC,GACD,EAAKjJ,cAAckB,SAASgI,WACjC,EAAKpE,cAAckD,YAQzB,YAAAmB,mBAAR,SAA2BC,GACzB,OACE9J,KAAKiG,aAAa6D,KACjB9J,KAAKiG,aAAa6D,GAAQC,OAAOC,OAAO,GAAIhK,KAAK0F,iBAAkB,CAAEC,OAAQ3F,KAAK+F,WAAW/F,KAAKyF,YAAczF,KAAKgG,aAIlH,YAAAO,oBAAR,SAA4B0D,GAY1B,MAXiB,CACfC,UAAWD,EACXE,UAAW,CAAC,SAAU,CAAEC,UAAW,KACnCC,WAAYrK,KAAK6J,mBAAmB,SACpCS,gBAAiB,CACf3E,OAAQ,UACRC,YAAa,EACbC,cAAe,QACfC,aAAc,KAOZ,YAAAW,mBAAR,W,YAAA,O,WACavE,GACT,IAAMqI,EAAgB,EAAKlF,YAAYmF,cAA2B,eAAwBtI,EAAmBX,YAC7G,IAAKgJ,E,iBACL,IAAMtJ,EAAa,EAAKlB,YAAYmB,KAAK,SAAAC,GAAM,OAAAA,EAAGC,sBAAwBc,EAAmBd,sBAC7F,IAAKH,E,iBA4BL,GA1BI,EAAKP,cAAckB,SAASgI,WAE9B,EAAKzD,SAASsE,UAAUF,EAAe,CACrCG,KAAM,CAAC,GAAI,IAAKC,KAAM,SAACC,GACrB,IACM3D,EADuB2D,EAAMC,GACYtK,GAAGmH,QAAQtC,EAAiB,IACrE0F,EAA+B,CACnC3I,IAAKyI,EAAMG,SAAS,GACpB3I,KAAMwI,EAAMG,SAAS,IAEvBC,WAAW,WAAQ,EAAKzF,UAAU0B,EAAwB6D,QAMlD,QAAd,EAAA7J,EAAW6B,WAAG,SAAE2F,QAAQ,SAAAwC,GACtB,EAAKC,YAAYX,EAAeU,GAAM,EAAO/I,KAIlC,QAAb,EAAAjB,EAAW4B,UAAE,SAAE4F,QAAQ,SAAAwC,GACrB,EAAKC,YAAYX,EAAeU,GAAM,EAAM/I,KAI1CjB,EAAW4B,GAAI,CACjB,IAAMsI,EAA0B,EAAKC,sBACrCD,EAAwBE,gBAAkB,EAC1C,EAAKlF,SAASmF,WAAWf,EAAeY,GAGtClK,EAAWwB,YACb,EAAK0D,SAASoF,WAAWhB,EAAe,EAAKiB,sBAAuB,CAAErC,OAAQ,mB,WAvClF,IAAiC,eAAAnJ,KAAKU,cAAcC,aAAW,8B,EAAlC,S,mGA6CvB,YAAA+F,YAAR,e,EAAA,OAC0C,QAAxC,EAAA1G,KAAKU,cAAckB,SAASC,oBAAY,SAAE4G,QAAQ,SAAAgD,GAEhD,IAAM9C,EAAkBvD,EAAkBqG,EAAKjE,KACzCkE,EAAW/C,EAAkB,QAAU8C,EAAK3I,IAC5C6I,EAAkBvG,EAAkBqG,EAAK3D,GACzCc,EAAS+C,EAAkB,OAASF,EAAK5I,GAG/C,IAAK,EAAKsD,SAAS6C,YAAY0C,GAAW,CAExC,KADMnB,EAAgB,EAAKlF,YAAYmF,cAA2B,IAAM7B,IAClD,OAEtB,IAAM,EAAe4B,EAAchK,GAAGmH,QAAQtC,EAAiB,IACzDlD,EAAqB,EAAKxB,cAAcC,YAAYO,KAAK,SAAA0K,GAAkB,OAAAA,EAAerK,aAAe,IAC/G,EAAK2J,YAAYX,EAAekB,EAAK3I,KAAK,EAAOZ,GAInD,IAAK,EAAKiE,SAAS6C,YAAYJ,GAAS,CACtC,IAAM2B,EACN,KADMA,EAAgB,EAAKlF,YAAYmF,cAA2B,IAAMmB,IAClD,OAEtB,IAAM,EAAepB,EAAchK,GAAGmH,QAAQtC,EAAiB,IACzDlD,EAAqB,EAAKxB,cAAcC,YAAYO,KAAK,SAAA0K,GAAkB,OAAAA,EAAerK,aAAe,IAC/G,EAAK2J,YAAYX,EAAekB,EAAK5I,IAAI,EAAMX,GAGjD,IACE,EAAKiE,SAAS0F,QAAQ,CACpBC,MAAO,CAACJ,EAAU9C,GAClBmD,WAAY,EAAKlC,mBAAmB6B,KAEtC,MAAOM,GACPC,QAAQC,MAAM,CAAEC,QAAS,oBAAqBlI,KAAMyH,EAAUU,GAAIxD,QAKhE,YAAAsC,YAAR,SAAoBX,EAA4B8B,EAAsBC,EAAepK,GAArF,I,MAOMqK,EAPN,OACQtL,EAAajB,KAAKD,YAAYmB,KAAK,SAAAsL,GAAK,OAAAA,EAAEpL,sBAAwBc,EAAmBd,sBACrFqL,EAAYH,IACA,QAAb,EAAArL,EAAW4B,UAAE,eAAEd,KAAK,SAAAkJ,GAAQ,SAAKyB,gBAAgBzB,GAAM,QACzC,QAAd,EAAAhK,EAAW6B,WAAG,eAAEf,KAAK,SAAAkJ,GAAQ,SAAKyB,gBAAgBzB,GAAM,MACvD0B,EAAe3M,KAAK0M,gBAAgBL,EAAcI,GAItDF,EADEE,EACM,UACEE,EAAaC,UAGoC,QAAxC,EAAA5M,KAAKU,cAAckB,SAASC,oBAAY,eAAEE,KAAK,SAAA0J,GAIhE,OAHwBrG,EAAkBqG,EAAK3D,KAGpByC,EAAchK,IAFdkL,EAAK5I,KAEsC8J,EAAa1B,QAEhE,GAAK,WARlB,GAWV,IAAMnB,EAAOS,EAAchK,IAAM+L,EAAO,OAAS,SAAWK,EAAa1B,KACnE4B,EAAQP,EAAOtM,KAAKoL,oBAAoBmB,GAASvM,KAAKwL,oBAAoBe,GAQpDvM,KAAKmG,SAAS+E,YAAYX,EAAesC,EANtD,CACb/C,KAAI,EACJgD,QAAS9M,KAAKU,cAAckB,SAASgI,WAChC1H,EAAmBX,aAAe,gDAIhCqG,WAAW,iBAAiB2B,SAASoD,EAAa1B,OAGrD,YAAAO,oBAAR,SAA4Be,G,MAS1B,MARuB,CACrBR,WAAY,CAAEgB,KAAM,cAAeC,OAAQ,IAC3CxD,SAAmC,QAAzB,oBAAoB+C,SAAK,QAAI,GACvClB,gBAAiB,EACjB4B,UAAU,EACVC,OAAQ,CAAC,aAAc,CAAEC,MAAO,CAAC,SACjCC,SAAUpN,KAAKqN,qBAAoB,KAK/B,YAAAjC,oBAAR,SAA4BmB,G,MAU1B,MATuB,CACrBR,WAAY,CAAEgB,KAAM,cAAeC,OAAQ,IAC3CxD,SAAmC,QAAzB,oBAAoB+C,SAAK,QAAI,GACvClB,eAAgB,EAChBiC,UAAU,EACVJ,OAAQ,CAAC,aAAc,CAAEC,MAAO,CAAC,YACjCC,SAAUpN,KAAKqN,qBAAoB,GACnCE,YAAa,CAAEC,WAAY,QAASC,YAAa,YAK7C,YAAAJ,oBAAR,SAA4BJ,GAA5B,WACE,MAAO,CACL,CACE,QAAS,CACP1M,GAAI,gBACJmN,SAAU,CAAC,GAAKT,EAAW,EAAI,GAC/BpF,MAAO,UACP2B,SAAUyD,EAAW,sBAAwB,sBAC7CxD,OAAQ,CACNC,MAAO,SAACC,GACN,GAAK,EAAKjJ,cAAckB,SAASgI,UAAjC,CAEA,IAAM+D,EAAWC,OAAO,gBAAiBjE,EAAa9B,OACjD8F,IACLhE,EAAaJ,SAASoE,GACtB3C,WAAW,WAAQ,EAAK1F,iCAQ5B,YAAAqB,WAAR,sBACE3G,KAAKmG,SAAS0H,KAAK,qBAAsB,SAACC,GACxC,IAAI,EAAK5H,WAAT,CACA,IAAMqE,EAA6BuD,EAAK5F,OAClChG,EAAqB,EAAKxB,cAAcC,YAAYO,KACxD,SAAAc,GAAc,OAAAA,EAAWT,aAAegJ,EAAchK,GAAGmH,QAAQtC,EAAiB,MAE9EnE,EAAa,EAAKlB,YAAYmB,KAAK,SAAAC,GAAM,OAAAA,EAAGC,sBAAwBc,EAAmBd,sBACvFyG,EAAgBiG,EAAKC,eAAenG,WAAW,iBAAiBC,MACnD5G,EAAW4B,GAAGd,KAAK,SAAAkJ,GAAQ,SAAKyB,gBAAgBzB,GAAM,GAAOA,OAASpD,KAEvF,EAAK1B,SAAS6H,eAAeF,EAAKC,gBAGlC/C,WAAW,WAAQ,EAAK1F,4BAI5BtF,KAAKmG,SAAS0H,KAAK,aAAc,SAACC,GAChC,GAAIA,EAAKrG,WAAaqG,EAAK/F,SAA3B,CAOA,IAAMkG,EAA2BH,EAAKC,eAAenG,WAAW,iBAC1DsG,EAAsBD,EAAcE,WACX,EAAKhI,SAASiI,aAAaN,EAAK5F,OAAO3H,IACzBwB,KAAK,SAAAqG,GAEhD,OADsBA,EAASR,WAAW,iBAAiBuG,aAC1CD,GACfJ,EAAKC,eAAexN,KAAO6H,EAAS7H,IACnC6H,EAASiG,OAA6BC,UAAUC,SAAS,qBAG5DN,EAAc1E,SAAS,eAAeiF,KAAKC,MAAsB,MAAhBD,KAAKE,WAExD1D,WAAW,WAAQ,EAAK1F,8BAlBtB0F,WAAW,WACT,EAAK7E,SAASwI,iBAAiBb,EAAKvG,WAAY,CAAEqH,WAAW,IAC7D5D,WAAW,WAAQ,EAAK1F,8BAoBxB,YAAAoH,gBAAR,SAAwBL,EAAsBI,GAC5C,IAAIxB,EACA2B,EAEJ,GAAIH,EACFxB,EAAOoB,EACPO,GAAW,MACN,CACL,IAAMiC,EAAUxC,EAAayC,OAE7B7D,GADA2B,EAAWiC,EAAQE,SAAS,MACCF,EAAQG,UAAU,EAAGH,EAAQjO,OAAS,GAAhDiO,EAOrB,MAJmC,CACjC5D,KAAI,EACJ2B,SAAQ,IAId,EArWA,G,yGCLM,SACE,SACF,S,mBADE,oG,sBAgBJ,kBACE,gBAAM,mBAAO,QACf,S,sBAGE,SAAgC,+BAAmB,S,yBACnD,SAAgC,SAA6B,S,mBAA7B,iD,sBAG9B,SAAmC,eAAG,S,yBACtC,SAAmC,SAAY,S,6BAAZ,mB,sCAHrC,qBAAwD,2EACtD,kBACA,gCACA,gCACF,Q,0BAFiB,6BACA,8B,sBAOnB,kBACE,gBAAM,sBAAU,QAClB,S,yBAIE,cAAqC,SAAW,S,uBAAX,mB,yBAPzC,mBACE,wBAIA,cACA,gBACE,uBACF,QACF,S,mBAF0B,wC,sBAKxB,kBACE,gBAAM,mBAAO,QACf,S,yBAYM,eAA2C,SAAmC,S,6BAAnC,uE,yBAMzC,cACE,aAAG,SAAgB,QAAI,aAAC,cAAI,SAAkB,QAChD,S,uBADK,sBAAyB,yB,0BATpC,cACE,cACE,uBACA,eAAK,SAAuB,QAC9B,QACA,cAAI,SAAuB,QAC3B,cACE,cACE,uB,qBAGF,QACF,QACA,eAAI,UAAwB,QAC9B,S,uBAZU,6EACD,6BAEH,6BAGuB,4DAKvB,+B,uBAMR,kBACE,gBAAM,mBAAO,QACf,S,0BAUE,cACE,cACE,eAAK,SAA4C,QACnD,QACA,cACE,eAAK,SAA2C,QAClD,QACA,cAAI,SAAkB,QACtB,cAAI,UAAkB,QACxB,S,uBAPS,yCAGA,wCAEH,wBACA,yBC9FZ,kBAgBE,WACmCqC,EACzBC,EACAC,GAFyB,KAAAF,aACzB,KAAAC,YACA,KAAAC,qB,OAGV,YAAAC,SAAA,W,YACQ5L,EAAWxD,KAAKmP,mBAAmBE,eAAeC,MAAM1N,SACxDxB,GAAsC,QAA5B,EAAe,QAAf,EAAAoD,EAAS+L,cAAM,eAAElM,MAAM,aAAK,QAAI,IAAI8F,OAAO,SAAA0B,GAAM,QAAEA,IAC7D2E,GAAkD,QAApC,EAAuB,QAAvB,EAAAhM,EAASiM,sBAAc,eAAEpM,MAAM,aAAK,QAAI,IAAI8F,OAAO,SAAA0B,GAAM,QAAEA,IAC/E7K,KAAK0P,WAAa,GAAGC,OAAOvP,EAAQoP,GACpCxP,KAAK4P,SAAW5P,KAAKiP,WAAW1G,OAAOsH,WAAWC,aAClD9P,KAAK+P,UAAY/P,KAAKiP,WAAW1G,OAAOsH,WAAWG,MACnDhQ,KAAK6D,IAAM7D,KAAKiP,WAAWpL,IAC3B7D,KAAKiQ,cAAgB,CAAC,GAAI,IAAK,IAAM,GACrCjQ,KAAKuI,OAASvI,KAAKiP,WAAW1G,OAAO2H,MACrClQ,KAAK8D,YAAc9D,KAAKiP,WAAWnL,YACnC9D,KAAKmQ,QAAUnQ,KAAKiP,WAAW1G,OAAO6H,QACtCpQ,KAAKqQ,QAAUrQ,KAAKiP,WAAW1G,OAAOC,SAGxC,YAAA8H,YAAA,WACEtQ,KAAKkP,UAAUqB,SAGjB,YAAAC,KAAA,SAAK3M,GACCA,IAAQ7D,KAAK6D,MAEb7D,KAAK8D,YACP9D,KAAKmP,mBAAmBrL,YAAY9D,KAAK8D,YAAY2M,SAAU5M,GAE/D7D,KAAKmP,mBAAmBvL,YAAYC,GAGtC7D,KAAKsQ,gB,sCA7CII,GAAoB,MAYrB,MAAe,wB,wBAZdA,EAAoB,2yBDXjC,iBACE,iBACE,eACE,2BACA,gCAGF,QACA,oBAA6C,gCAAS,EAAAJ,gBACpD,oBAAU,iBAAK,QACjB,QACF,QACF,QAEA,eACE,SAEF,QAEA,4BACE,oBACE,wBAIA,gBACE,iCACA,iCACA,2BAKF,QACA,gBAAK,U,iBAAmB,QAC1B,QAEA,4BAWA,oBACE,wBAIA,eACA,oBACE,eACE,eAAI,0BAAa,QACjB,eAAI,iBAAI,QACR,eAAI,0BAAa,QACjB,eAAI,kBAAK,QACX,QACA,0B,qBAeF,QACF,QAEA,oBACE,0BAIA,eACA,oBACE,eACE,eAAI,mBAAM,QACV,eAAI,mBAAM,QACV,eAAI,kBAAK,QACT,eAAI,kBAAK,QACX,QACA,0BAUF,QACF,QACF,S,MApGqB,qCAWnB,wKAWmB,iCACA,iCACuB,0CAMnC,sCAGG,mEAwBiB,kDA+BA,uC,6cCtF7B,GCEA,cAQE,WACmCrB,EACzBC,GADyB,KAAAD,aACzB,KAAAC,Y,OAGV,YAAAE,SAAA,WACEpP,KAAK2Q,UAAY3Q,KAAKiP,WAAW0B,WAGnC,YAAAL,YAAA,WACEtQ,KAAKkP,UAAUqB,SAGjB,YAAAK,aAAA,WACExK,OAAOyK,KAAKzK,OAAOlG,MAAMR,KAAKS,OAAO,iCAAkC,W,sCAjB9D2Q,GAA0B,MAI3B,MAAe,c,wBAJdA,EAA0B,8PCbvC,iBACE,iBACE,eAAK,gCAAoB,QACzB,oBAA6C,gCAAS,EAAAR,gBACpD,oBAAU,iBAAK,QACjB,QACF,QACF,QAEA,cAEA,eAAK,S,iBAAsB,QAE3B,gBACE,qBAA8C,gCAAS,EAAAM,iBACrD,qBAAU,kBAAK,QACf,iBAAM,qBAAQ,QAChB,QACF,S,MAPK,0C,yYDHL,G,WEcA,cAUE,WACUG,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAVA,KAAAV,SACA,KAAAC,QACA,KAAAC,yBACA,KAAAC,eACA,KAAAC,WACA,KAAAC,SACA,KAAAC,mBACA,KAAAC,OACA,KAAAC,kBACA,KAAAC,sBACA,KAAAC,oBAnBV,KAAApC,eAAiB,IAAIqC,EAAA,EAA+B,MACpD,KAAAC,aAAe,IAAID,EAAA,EAA8B,MACjD,KAAAE,6BAA+B,IAAIC,EAAA,GAE3B,KAAAC,WAAaC,SAAS/R,KAAKgR,MAAMgB,SAASC,SAAShS,IAAI,cAAe,IACtE,KAAAiS,WAAY,EACZ,KAAAC,aAAe,IAAIC,EAAA,E,OAgB3B,YAAAC,YAAA,WACErS,KAAKqP,eAAeiD,WACpBtS,KAAK2R,aAAaW,WAClBtS,KAAK4R,6BAA6BU,WAClCtS,KAAKmS,aAAaI,eAGpB,YAAAC,KAAA,sBACExS,KAAKqC,iBAAiB,WAAM,SAAKxC,kBACjCG,KAAKyS,qBACLzS,KAAK0S,wBAGP,YAAAC,mBAAA,sBAEE3S,KAAKuD,aAAa,WAChB,IAGMqP,GAAU,OAHO,CACrBC,MAAO,CAAC,CAAErR,SAAU,EAAK6N,eAAeC,MAAM1N,SAASJ,aAGzD,EAAK0Q,WAAY,EACjB,EAAKnB,OAAO+B,SAAS,CAAC,QAAQF,GAAY,CAAEG,WAAY,EAAK/B,WAIjE,YAAAgC,WAAA,SAAWC,EAAeC,GAA1B,WACMD,GAAQC,EACVlT,KAAKuD,aAAa,WAAQ,EAAKK,gBACtBqP,EACTjT,KAAKuD,eACI2P,GACTlT,KAAK4D,eAIT,YAAAuP,cAAA,SAAclS,GACZ,IAAMP,GAAgB,EAAA0S,EAAA,GAAUpT,KAAKqP,eAAeC,OASpD5O,EAAcC,YAAYU,KARwB,CAChDC,YAAa,GACbC,WAAY,WAAab,EAAcC,YAAYC,OAAS,GAC5DY,cAAUC,EACVC,KAAMT,EAAWS,KACjBN,oBAAqBH,EAAWG,oBAChCO,mBAAoB,CAAEQ,IAAK,IAAKC,KAAM,OAGxCpC,KAAKqP,eAAegE,KAAK3S,GACzBV,KAAKuD,gBAGP,YAAA+P,iBAAA,SAAiBrM,EAAgCiC,EAA2BjB,GAC1E,IAAMvH,GAAgB,EAAA0S,EAAA,GAAUpT,KAAKqP,eAAeC,OACpD5O,EAAcC,YAAcD,EAAcC,YAAYwI,OAAO,SAAAnH,GAAc,OAAAA,EAAWT,aAAe0F,IACrGvG,EAAckB,SAASC,aAAeqH,EACtCxI,EAAckB,SAAS2R,WAAatL,EACpCjI,KAAKqP,eAAegE,KAAK3S,IAG3B,YAAA8S,iBAAA,SAAiBvM,EAAgCgE,GAC/C,IAAMvK,GAAgB,EAAA0S,EAAA,GAAUpT,KAAKqP,eAAeC,OACzB5O,EAAcC,YAAYO,KAAK,SAAAc,GAAc,OAAAA,EAAWT,aAAe0F,IAC/EvF,KAAOuJ,EAC1BjL,KAAKqP,eAAegE,KAAK3S,IAG3B,YAAA+S,4BAAA,SAA4BxM,EAAgCyM,GAC1D,IAAMhT,GAAgB,EAAA0S,EAAA,GAAUpT,KAAKqP,eAAeC,OACzB5O,EAAcC,YAAYO,KAAK,SAAAc,GAAc,OAAAA,EAAWT,aAAe0F,IAC/E3F,YAAcoS,EACjC1T,KAAKqP,eAAegE,KAAK3S,IAG3B,YAAAiT,kBAAA,SAAkBzK,EAA2BjB,GAC3C,IAAMvH,GAAgB,EAAA0S,EAAA,GAAUpT,KAAKqP,eAAeC,OACpD5O,EAAckB,SAASC,aAAeqH,EACtCxI,EAAckB,SAAS2R,WAAatL,EACpCjI,KAAKqP,eAAegE,KAAK3S,IAG3B,YAAAkT,yBAAA,SAAyB3M,EAAgC6D,GACvD,IAAMpK,GAAgB,EAAA0S,EAAA,GAAUpT,KAAKqP,eAAeC,OAC9CpN,EAAqBxB,EAAcC,YAAYO,KAAK,SAAAc,GAAc,OAAAA,EAAWT,aAAe0F,IAC7F/E,IAKLA,EAAmBP,oBAAqB,SAAH,WAAQO,EAAmBP,oBAAuBmJ,GACvF9K,KAAKqP,eAAegE,KAAK3S,KAG3B,YAAAmT,eAAA,SAAe3R,GAAf,WAKQ4R,EAJa9T,KAAK2R,aAAarC,MAAMpO,KAAK,SAAAC,GAAM,OAAAA,EAAGC,sBAAwBc,EAAmBd,sBAIjEkB,YAG7ByR,EAAM7R,EAAmBX,WAG/BvB,KAAKuR,gBAAgByC,YALN,yBACC,4BAIwDD,EAAKD,GAAiBG,UAAU,SAAAC,GAEtG,GAAIA,EAAStT,OAAb,CACE,IAGMgS,GAAU,OAHO,CACrBC,MAAO,CAAC,CAAErR,SAAU0S,EAAS,GAAGxQ,OAGlC,EAAKqN,OAAO+B,SAAS,CAAC,QAAQF,GAAY,CAAEG,WAAY,EAAK/B,aAK/D,EAAKQ,oBAAoB2C,oBAAoBL,GAAiDG,UAAU,CACtGZ,KAAM,SAAAe,GACJ,IASMxB,GAAU,OATO,CACrBC,MAAO,CAAC,CACNwB,gBAAiBP,EACjBQ,IAAK,CACHzP,OAAQ,2BACR0P,KAAMR,OAKZ,EAAKhD,OAAO+B,SAAS,CAAC,QAAQF,GAAY,CAAEG,WAAY,EAAK/B,SAE/D9E,MAAO,SAACA,GACNsI,MAAM,wGAMN,YAAAjR,aAAR,SAAqBkR,GAArB,WACEzU,KAAKmR,SAASN,KAAK,aACnB7Q,KAAKiR,uBAAuB1N,aAAavD,KAAKqP,eAAeC,OAAO2E,UAAU,CAC5EZ,KAAM,SAAA3S,GACJ,EAAKyQ,SAASN,KAAK,QAAS,KAAM,CAAE6D,SAAU,MAC9C,EAAKrF,eAAegE,KAAK3S,GACT,MAAZ+T,GAAoBA,KAE1BvI,MAAO,SAACA,GACN,EAAKiF,SAASN,KAAK,uBAAwB,KAAM,CAAE6D,SAAU,UAKnE,YAAA9Q,YAAA,SAAYC,GAAZ,gBAAY,IAAAA,MAAM,IAChB7D,KAAKmR,SAASN,KAAK,oBACnB7Q,KAAKiR,uBAAuBrN,YAAY5D,KAAKqP,eAAeC,MAAM1N,SAASJ,SAAUqC,GAAKoQ,UAAU,CAClGZ,KAAM,SAAAsB,GACJ,EAAKxD,SAASN,KAAK,eAAgB,KAAM,CAAE6D,SAAU,MACrD,EAAKE,gBAAgBD,EAAgB9Q,GACrCoI,QAAQ4I,KAAKF,GAEb,EAAKtF,eAAegE,MAAK,EAAAD,EAAA,GAAU,EAAK/D,eAAeC,QACvDtE,WAAW,WAAQ,EAAK4G,6BAA6ByB,KAAKsB,MAE5DzI,MAAO,SAACA,GACN,EAAKiF,SAASN,KAAK,eAAgB,KAAM,CAAE6D,SAAU,UAK3D,YAAA5Q,YAAA,SAAY4E,EAA8B7E,GAA1C,gBAA0C,IAAAA,MAAM,IAC1C6E,EAAOW,MACTrJ,KAAK8U,sBAAsBpM,GAIR,IAAjBA,EAAOY,QAEXtJ,KAAKmR,SAASN,KAAK,qBAEnB7Q,KAAKiR,uBAAuBnN,YADT9D,KAAKqP,eAAeC,MAAM1N,SAASJ,SACFkH,EAAO9D,OAAQ8D,EAAOO,UAAWpF,GAAKoQ,UAAU,CAClGZ,KAAM,SAAA0B,GACJ,EAAK5D,SAASN,KAAK,gBAAiB,KAAM,CAAE6D,SAAU,MACtD,IAAMxS,EAAqB,EAAKmN,eAAeC,MAAM3O,YAAYO,KAAK,SAAAC,GAAM,OAAAA,EAAGI,aAAemH,EAAO9D,SAOrG,EAAKgQ,gBAAgBG,EAAclR,EANE,CACnCoH,KAAMvC,EAAOO,UACblF,OAAQ2E,EAAO9D,OACfoQ,WAAY9S,EAAmBR,KAC/B+O,SAAU/H,IAGZuD,QAAQ4I,KAAKE,IAEf7I,MAAO,SAACA,GACN,EAAKiF,SAASN,KAAK,gBAAiB,KAAM,CAAE6D,SAAU,WAKpD,YAAA7U,cAAR,SAAsBoV,GAAtB,gBAAsB,IAAAA,OAAoB,GACpCA,GACFjV,KAAKmR,SAASN,KAAK,mCAErB7Q,KAAKiR,uBAAuBpR,cAAcG,KAAK8R,WAAY9R,KAAK2R,aAAarC,OAAO2E,UAAU,SAAAvT,GACxFuU,GACF,EAAK9D,SAASN,KAAK,iBAAkB,KAAM,CAAE6D,SAAU,MAEzD,EAAKrF,eAAegE,KAAK3S,GACzB,EAAKwQ,aAAagE,SAAYxU,EAAckB,SAASF,KAAI,sBAIrD,YAAAkT,gBAAR,SAAwBrM,EAAwB1E,EAAaC,GAM3D9D,KAAKoR,OAAOP,KAAKH,GAAsB,CACrCyE,WAAW,EACXC,cAAe,kBACfC,mBAAmB,EACnBC,KATwC,CACxC/M,OAAM,EACNzE,YAAW,EACXD,IAAG,GAOH0R,WAAY,CAAC,eAAgB,sBAAuB,gBAGpDzK,SAAU,CAAEjH,IAAK,KACjBwN,iBAAkBrR,KAAKqR,mBAEzBrR,KAAKyR,kBAAkB+D,gBAGjB,YAAAV,sBAAR,SAA8BpM,GAI5B1I,KAAKoR,OAAOP,KAAKC,GAA4B,CAC3CqE,WAAW,EACXC,cAAe,kBACfC,mBAAmB,EACnBC,KAP8C,CAC9C3E,UAAWjI,EAAO+M,WAOlBF,WAAY,CAAC,eAAgB,sBAAuB,gBAGpDzK,SAAU,CAAEjH,IAAK,KACjBwN,iBAAkBrR,KAAKqR,mBAEzBrR,KAAKyR,kBAAkB+D,gBAGjB,YAAAnT,iBAAR,SAAyBoS,GAAzB,WACEzU,KAAKiR,uBAAuB5O,mBAAmB4R,UAAU,SAAAlU,GACvD,EAAK4R,aAAa0B,KAAKtT,GACvB0U,OAII,YAAAhC,mBAAR,sBACEzS,KAAKsR,KAAKoE,kBAAkB,WAC1B,EAAKvD,aAAawD,KAChB,EAAAC,EAAA,GAAyBxP,OAAQ,WAAW5F,MAC1C,EAAA2I,EAAA,GAAO,WAAM,OAAC,EAAK6H,MAAMgB,SAAS6D,cAClC,EAAA1M,EAAA,GAAO,SAAAyB,GAEL,OADgBkL,UAAUC,SAASC,MAAM,OAASpL,EAAMqL,QAAUrL,EAAMsL,UAA8B,KAAlBtL,EAAMuL,WAG5FlC,UAAU,SAAArJ,GACVA,EAAMwL,iBACN,EAAK9E,KAAK4B,IAAI,WAAQ,EAAK3P,uBAM3B,YAAAmP,qBAAR,sBACE1S,KAAKmS,aAAawD,IAChB3V,KAAK+Q,OAAOtH,OAAOjJ,MACjB,EAAA2I,EAAA,GAAO,SAAAyB,GAAS,OAAAA,aAAiB,QACjC,EAAAyL,EAAA,KAAYrW,KAAKgR,MAAMgB,SAAS6D,aAChC,EAAApV,EAAA,GAAI,WAAM,QAAE,EAAKuQ,MAAMgB,SAAS6D,cAChC,EAAAS,EAAA,MACA,EAAAnN,EAAA,GAAO,SAAC,G,IAAA,gBAAyB,OAAhB,OAAU,QAC3B,EAAAA,EAAA,GAAO,WACL,IAAMoN,EAAU,EAAKrE,UAErB,OADA,EAAKA,WAAY,EACVqE,KAETtC,UAAU,WACV,EAAKpU,eAAc,O,sCAnTd2W,GAAkB,qI,0BAAlBA,EAAkB,QAAlBA,EAAkB,Y,EAD/B,G,sFCPQ,uBAEE,mGACA,sBACF,S,uCAEA,uBAEE,wIACA,0BACF,S,uCAIA,uBACkE,sFAChE,oBACF,S,uBAqBF,uBAEE,2BACF,S,uBAEA,uBAEE,2BACF,S,kGA1DF,mBAOE,iBACE,sBACE,SACF,QAEA,6BAMA,8BAKF,QAEA,kBACE,8BAIF,QAEA,kBACE,gHACA,iBAAM,UAAoC,QAC1C,wBAAoC,iBAAI,QAC1C,QACA,eAEA,mBACE,uHACA,iBAAM,UAA4B,QAClC,wBAAoC,iBAAI,QAC1C,QACA,eAEA,mBACE,UACF,QAEA,+BAKA,+BAIF,Q,oDA1DE,2CAA8C,qJAOhB,yDAC1B,uDAIC,2EAMA,0DAQA,0DAOG,oCAOA,8BAKc,8CACpB,mEAIC,yEAKA,yE,0BAzDP,SACE,0BA4DF,S,wBA5D6C,iD,0BAH/C,mBAEE,iCA8DF,S,mBA9DiB,qCCWjB,IAEA,cAkBE,WACUrH,EACA8B,EACAQ,GAFA,KAAAtC,qBACA,KAAA8B,yBACA,KAAAQ,oBAXV,KAAArM,gBAAkBA,EAElB,KAAAqR,WAAY,EAGJ,KAAAC,cAAgB,IAAIhF,EAAA,GAAgB,GACpC,KAAAS,aAAe,IAAIC,EAAA,E,OAQ3B,YAAAhD,SAAA,uBACE,OAAY,CAAC,CAAEuH,KAAM,UAAWC,IA3BjB,4EA2BqC,WAClD,EAAKF,cAAcrD,MAAK,KAG1BrT,KAAKmS,aAAawD,IAChB3V,KAAKmP,mBAAmByC,6BAA6BqC,UAAU,SAAA1L,GAC7D,EAAKsO,QAAQvO,4BAA4BC,MAI7CvI,KAAK8W,gBAAiB,EAAAC,EAAA,IAAc,CAAC/W,KAAKmP,mBAAmBE,eAAgBrP,KAAKmP,mBAAmBwC,eAAenR,MAClH,EAAAC,EAAA,GAAI,SAAC,G,IAAA,gBAACC,EAAa,KAAEX,EAAW,KAC9B,GAAqB,MAAjBW,GAAwC,MAAfX,EAY7B,OARA,EAAK0W,WAAY,EACjB,EAAKhF,kBAAkBuF,gBACvB,EAAKP,WAAY,EAC+B,CAC9C3U,oBAAqBpB,EAAcC,YACnCuE,UAAWD,EAAmBvE,EAAcC,YAAaZ,GACzDkX,UAAWvW,EAAckB,SAASgI,eAO1C,YAAAsN,gBAAA,sBAEQC,EAAwBnX,KAAKoX,kBAAkBC,QAAQ7W,MAAK,EAAAC,EAAA,GAAI,WAAM,YAE5ET,KAAKmS,aAAawD,KAChB,EAAAoB,EAAA,IAAc,CAAC/W,KAAK0W,cAAeS,IAAwBlD,UAAU,SAAC,G,MAAA,gBAAa,MAAsB,OAG3F,QAAZ,IAAK4C,eAAO,SAAEhQ,UACd,EAAKgQ,QAAU,IAAIS,EACjB,EAAKC,WAAWC,cAChB,EAAKrI,mBAAmBE,eAAeC,MACvC,EAAKH,mBAAmBwC,aAAarC,MACrC,EAAKhK,qBAAqBuI,KAAK,GAC/B,EAAKtI,UAAUsI,KAAK,GACpB,EAAKrI,cAAcqI,KAAK,SAMhC,YAAAwE,YAAA,W,MACc,QAAZ,EAAArS,KAAK6W,eAAO,SAAEhQ,UACd7G,KAAK0W,cAAcpE,WACnBtS,KAAKmS,aAAaI,eAGpB,YAAAjN,qBAAA,WACE,IAAM4D,EAAclJ,KAAK6W,QAAQvP,oBAC3BW,EAAajI,KAAK6W,QAAQ7O,gBAChChI,KAAKmP,mBAAmBwE,kBAAkBzK,EAAajB,IAGzD,YAAA1C,UAAA,SAAU0B,EAAgC6D,GACxC9K,KAAKmP,mBAAmByE,yBAAyB3M,EAAwB6D,IAG3E,YAAAtF,cAAA,SAAckD,GACZ1I,KAAKmP,mBAAmBrL,YAAY4E,IAGtC,YAAA+O,oBAAA,SAAoBxW,GAEdA,EAAWM,WAAWsH,SAAS,WACjC7I,KAAKmP,mBAAmB6D,YAAW,GAAM,GAEzChT,KAAKmP,mBAAmB0E,eAAe5S,IAI3C,YAAAyW,YAAA,SAAYC,GACV,OAAmC,KAA/BA,EAAoB/W,QAAkB+W,EAAoBtU,MAAM,KAAKzC,OAAS,GAAO,EAEhF+W,EAAoB3I,UAAU,EAAG,IAAM,SAEzChP,KAAKiR,uBAAuBhO,eAAe0U,EAAqB,cAGzE,YAAAC,gBAAA,SAAgB1V,GACd,OAAOA,EAAmBd,sBAAwB,wDAGpD,YAAAyW,OAAA,SAAO3V,GACL,GAAK4V,QAAQ,UAAU5V,EAAmBR,KAAI,iBAA9C,CAEA1B,KAAK6W,QAAQ7P,4BAA4B9E,EAAmBX,YAC5D,IAAM2H,EAAclJ,KAAK6W,QAAQvP,oBAC3BW,EAAajI,KAAK6W,QAAQ7O,gBAChChI,KAAKmP,mBAAmBmE,iBAAiBpR,EAAmBX,WAAY2H,EAAajB,KAGvF,YAAA8P,SAAA,SAASC,GACP5R,OAAOyK,KAAKmH,EAAK,WAGnB,YAAAC,SAAA,SAAShX,G,MACDiX,EAAuD,QAA7C,EAAAtK,OAAO,qBAAsB3M,EAAWS,aAAK,eAAEoN,OAChD,MAAXoJ,GAA+B,KAAZA,GAEvBlY,KAAKmP,mBAAmBqE,iBAAiBvS,EAAWM,WAAY2W,IAGlE,YAAAC,gBAAA,SAAgBlX,G,MACRmX,EAAmE,QAAlD,EAAAxK,OAAO,mBAAoB3M,EAAWK,oBAAY,eAAEwN,OACrD,MAAlBsJ,GAEJpY,KAAKmP,mBAAmBsE,4BAA4BxS,EAAWM,WAAY6W,I,sCAtIlEC,GAAoB,kC,wBAApBA,EAAoB,yD,GAAA,M,0+CDrBjC,wB,uBAAkC,2C,4HCelC,G,0BCaQ,cACE,SACF,S,uBADE,2B,0BAFJ,iBACE,wBAGF,S,wBAHwB,sF,0BAStB,cACE,SACF,S,uBADE,2B,0BAFJ,iBACE,wBAGF,S,wBAHwB,sG,sBAapB,iB,KAAqC,kB,YAAA,O,0BANzC,kBACE,iBACE,gBAAM,oBAAQ,QACd,uBAA6B,mBAAO,QACtC,QACA,iBACE,wBAEF,QACF,S,wBAH4B,6B,0BAP9B,SACE,yBAUF,S,kBAVyB,iC,0BAYzB,kBACE,iBAAmB,6BAAiB,QACpC,eAAK,SAAwC,QAC/C,S,wBADO,wC,uCA1DX,iBAEE,iBACE,iBACE,oBAAwD,kEAAyB,GAAM,KACrF,0BACF,QACA,oBAAyC,kEAAyB,GAAO,KACvE,iBACF,QACA,oBAAyC,kEAAyB,GAAM,KACtE,kBACF,QACF,QAEA,iBACE,kBACE,gBAAK,6BAAgB,QACrB,gBACE,qBAAgD,kEAC9C,qBAAU,iBAAI,QAChB,QACA,qBAAkD,oEAChD,qBAAU,iBAAI,QAChB,QACF,QACF,QACA,yBAKF,QAEA,kBACE,kBAAmB,4BAAe,QAClC,yBAKF,QAEA,mC,kBAaA,0BAKA,mBACE,qBAAyC,iEACvC,iBAAM,mCAAsB,QAC5B,wBACF,QACF,QAEF,QACF,Q,+BA1C0B,8EASA,6FAOP,+CAaW,+CC9C9B,kBASE,WACUtH,EACAC,EACArR,EACAwP,GAHA,KAAA4B,SACA,KAAAC,QACA,KAAArR,UACA,KAAAwP,qB,OAGV,YAAAC,SAAA,sBACEpP,KAAKqP,eAAiBrP,KAAKmP,mBAAmBE,eAC9CrP,KAAKsY,UAAYtY,KAAKmP,mBAAmBE,eAAe7O,MACtD,EAAAC,EAAA,GAAI,SAAAC,GAAiB,OCtBpB,SAA2BA,EAA8Bf,G,QACxD4Y,EAAqB,GAE3B,IACE,IAAMC,GAA2C,QAA7B,EAAA9X,EAAckB,SAAS2N,cAAM,eAAElM,MAAM,WAAY,GAC/DmM,GAAkD,QAArC,EAAA9O,EAAckB,SAAS6N,sBAAc,eAAEpM,MAAM,WAAY,GAE5EmV,EAAY/P,QAAQ,SAAAgQ,IAClBA,EAAQA,aAAK,EAALA,EAAO3J,UAMK,yBACQ6H,KAAK8B,IAE/BF,EAASlX,KAAK,6EAEJoX,EAAK,mMASnBjJ,EAAW/G,QAAQ,SAAAgQ,GAEjB,GADAA,EAAQA,aAAK,EAALA,EAAO3J,OACf,CAKwB,uCACQ6H,KAAK8B,IAEnCF,EAASlX,KAAK,4EAEJoX,EAAK,+GASjB,IACMC,EADW,8BACSC,KAAKF,GAC/B,GAAIC,EAAU,CACZ,IAAME,EAAUF,EAAS,GACnBG,EAASlZ,EAAQmZ,SAASxY,WAC5BsY,IAAYC,GACdN,EAASlX,KAAK,qCACUuX,EAAO,6CAA6CC,EAAM,6HAMlE,oCACYF,KAAKF,IAEnCF,EAASlX,KAAK,6HAMlB,MAAO6K,GACPD,QAAQC,MAAM,uDAAwDA,GAGxE,OAAOqM,EDrDkBQ,CAAkBrY,EAAe,EAAKf,aAI/D,YAAAqZ,aAAA,WACEhZ,KAAKmP,mBAAmBwD,sBAG1B,YAAAsG,eAAA,WACE7S,OAAOyK,KAAK,gCAAiC,WAG/C,YAAAqI,gBAAA,SAAgBjG,EAAeC,GAC7BlT,KAAKmP,mBAAmB6D,WAAWC,EAAMC,IAG3C,YAAAiG,YAAA,WAEEnZ,KAAK+Q,OAAO+B,SAAS,CAAC,iBADJ9S,KAAKmP,mBAAmBE,eAAeC,MAAM1N,SAASL,aACb,CAAEwR,WAAY/S,KAAKgR,S,sCAhCrEoI,GAAoB,+C,wBAApBA,EAAoB,uwBDfjC,yB,uBAA0D,2C,24CCU1D,G,iDEIM,iBACsE,qFACpE,oBAAU,SAA8C,QACxD,gBAAM,SAAqB,QAC7B,Q,qCAHE,gCACU,gDACJ,wB,0BAJV,iBACE,wBAKF,S,wCALgD,kCAAgB,oC,uCARlE,SACE,iBACE,sFACA,oBAAU,SAAuD,QACjE,gBAAM,SAAe,QACvB,QAEA,wBAOF,Q,qCAb2B,wDAEb,gEACJ,sBAGW,uD,uCAbvB,iBAEE,8BAAyC,yEACvC,2BACF,QAEA,iC,oBAeF,Q,+BAfkC,uCAAsB,+BCMxD,kBAaE,WAAoBjK,GAAA,KAAAA,qBANpB,KAAAkK,aAAyB,GACzB,KAAAjV,SAAWA,EAEH,KAAAkV,aAAe,4CACf,KAAAC,YAAc,IAAI7H,EAAA,EAAgB1R,KAAKsZ,aAAaE,S,OAI5D,YAAApK,SAAA,WACEpP,KAAKyZ,SAAU,EAAA1C,EAAA,IAAc,CAAC/W,KAAKmP,mBAAmBwC,aAAc3R,KAAKuZ,cAAc/Y,MACrF,EAAAC,EAAA,GAAI,SAAC,G,IAAA,gBAA8B,OCzBlC,SAAkCV,EAA2B2Z,G,QAClE,GAAK3Z,EAAL,CAEA,IAEM4Z,GAFS,EAAAvG,EAAA,GAAUrT,GAEDoJ,OAAO,SAAAlI,GAC7B,OAAAA,EAAWsB,YAAcmX,GACtBzY,EAAWG,sBAAwB,yDAGxCuY,EAASC,KAAK,SAACC,EAAGC,GAAM,OAAAD,EAAEnY,KAAKqY,oBAAoBC,cAAcF,EAAEpY,KAAKqY,uBAExE,IAAME,EAA4B,G,IAClC,IAAyB,eAAAN,GAAQ,8BAAE,CAA9B,IAAM1Y,EAAU,QACbiZ,EAAOjZ,EAAW8B,YACpBkX,EAAOC,GACTD,EAAOC,GAAM7Y,KAAKJ,GAElBgZ,EAAOC,GAAQ,CAACjZ,I,iGAIpB,OAAOgZ,GDGgCE,CAAlB,KAAY,UAIjC,YAAA9H,YAAA,WACErS,KAAKuZ,YAAYjH,YAGnB,YAAA8H,iBAAA,SAAiBxP,GAEf5K,KAAKuZ,YAAYlG,KADEzI,EAAMyP,QAAUra,KAAKsZ,aAAagB,SAAWta,KAAKsZ,aAAaE,UAIpF,YAAArG,cAAA,SAAclS,GACZjB,KAAKmP,mBAAmBgE,cAAclS,IAGxC,YAAAsZ,WAAA,SAAWC,GACT,oBAA6BA,EAAMxa,KAAKqZ,eAG1C,YAAAoB,YAAA,SAAYC,EAAeR,GACzB,OAAOA,EAAKnG,KAGd,YAAA4G,iBAAA,SAAiBD,EAAezZ,GAC9B,OAAOA,EAAWG,qB,sCAtCTwZ,GAAoB,Y,wBAApBA,EAAoB,ihBDjBjC,wB,uBAA0D,oC,sgCCY1D,G,iCENMC,GAAiB,CACrB,CACEC,KAAM,GAAIC,UCFd,WAeE,WAAoBpb,EAA0BqR,EAA+B7B,GAAzD,KAAAxP,UAA0B,KAAAqR,QAA+B,KAAA7B,qBAN7E,KAAA6L,SAAW,CACT9H,IAAK,MACLyC,IAAK,OAEP,KAAAsF,eAAiBjb,KAAKgb,SAAS9H,IAG7BlT,KAAKL,QAAQ6S,KAAKxS,KAAKgR,O,OAGzB,YAAA5B,SAAA,WACEpP,KAAKmP,mBAAmBqD,QAG1B,YAAA0I,eAAA,SAAeF,GACbhb,KAAKib,eAAkBjb,KAAKib,iBAAmBD,EAAY,KAAOA,GAGpE,YAAAjD,SAAA,WACE3R,OAAOyK,KAAK,iCAAkC,W,sCAtBrCsK,GAAoB,mC,wBAApBA,EAAoB,yD,MAAA,K,KACpB9C,GAAoB,G,gEAHpB,CAAC7B,MAAmB,gQCVjC,yBAEA,iBACE,iBACE,iBACE,gCAAS,EAAA0E,eAAA,kBACT,oBAAU,sBAAU,QACtB,QACA,iBACE,gCAAS,EAAAA,eAAA,kBACT,oBAAU,eAAG,QACf,QACA,iBACA,kBAAiC,gCAAS,EAAAnD,aACxC,qBAAU,yBAAY,QACxB,QACF,QAEA,+BAEA,+BAEA,6BACF,S,MAnBoC,wEAIA,wEAUhB,2DAEA,6D,qNDdpB,GDE+CqD,SAAU,CACnD,WACA,CACEC,QAAS,KACTC,aAAc,WAAM,spBAAuCC,KAAK,SAAAC,GAAK,OAAAA,EAAEC,cACvEnG,KAAM,CAAEoG,SAAS,OAMzB,4B,6CAIaC,I,wBAAAA,I,4BAHF,CAAC,cAAsBd,KACtB,Q,EAFZ,GGEA,4B,6CA2Bae,I,wBAAAA,I,6BAPA,CACT,IACAzX,EACA,IACA,KACD,SAhBQ,CACP,KACA,IACAwX,GACA,KACA,KACA,KACA,KACA,KACA,S,EAlBJ","file":"projects_ng-dialogs_src_app_visual-query_visual-query_module_ts.d071ffd4556ea47bff71.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiQueryDataSources, webApiQueryDebugStream, webApiQueryGet, webApiQueryRun, webApiQuerySave } from '../../app-administration/services';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult } from '../models';\r\n\r\n@Injectable()\r\nexport class QueryDefinitionService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  fetchPipeline(pipelineEntityId: number, dataSources: DataSource[]) {\r\n    return this.http.get<PipelineModel>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryGet), {\r\n      params: { appId: this.context.appId.toString(), id: pipelineEntityId.toString() }\r\n    }).pipe(\r\n      map(pipelineModel => {\r\n        // if pipeline is new, populate it with default model\r\n        if (!pipelineModel.DataSources.length) {\r\n          this.buildDefaultModel(pipelineModel, dataSources);\r\n        }\r\n        this.fixPipelineDataSources(pipelineModel.DataSources);\r\n        return pipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private buildDefaultModel(pipelineModel: PipelineModel, dataSources: DataSource[]) {\r\n    const templateDataSources = eavConstants.pipelineDesigner.defaultPipeline.dataSources;\r\n    for (const templateDS of templateDataSources) {\r\n      const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === templateDS.PartAssemblyAndType);\r\n      const pipelineDataSource: PipelineDataSource = {\r\n        Description: '',\r\n        EntityGuid: templateDS.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: dataSource.Name,\r\n        PartAssemblyAndType: templateDS.PartAssemblyAndType,\r\n        VisualDesignerData: templateDS.VisualDesignerData,\r\n      };\r\n      pipelineModel.DataSources.push(pipelineDataSource);\r\n    }\r\n\r\n    pipelineModel.Pipeline.StreamWiring = eavConstants.pipelineDesigner.defaultPipeline.streamWiring;\r\n  }\r\n\r\n  private fixPipelineDataSources(pipelineDataSources: PipelineDataSource[]) {\r\n    const outDataSourceExists = pipelineDataSources.some(\r\n      pipelineDS => pipelineDS.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    );\r\n    if (!outDataSourceExists) {\r\n      const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n      const outDsConst: PipelineDataSource = {\r\n        Description: outDs.Description,\r\n        EntityGuid: outDs.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: outDs.Name,\r\n        PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n        VisualDesignerData: outDs.VisualDesignerData,\r\n      };\r\n      pipelineDataSources.push(outDsConst);\r\n    }\r\n\r\n    for (const pipelineDataSource of pipelineDataSources) {\r\n      pipelineDataSource.VisualDesignerData ??= { Top: 50, Left: 50 };\r\n    }\r\n  }\r\n\r\n  fetchDataSources() {\r\n    return this.http.get<DataSource[]>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDataSources)).pipe(\r\n      map(dataSources => {\r\n        const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n        const outDsConst: DataSource = {\r\n          ContentType: undefined,\r\n          Difficulty: eavConstants.pipelineDesigner.dataSourceDifficulties.default,\r\n          DynamicIn: true,\r\n          DynamicOut: false,\r\n          EnableConfig: undefined,\r\n          HelpLink: undefined,\r\n          Icon: undefined,\r\n          In: outDs.In,\r\n          Name: outDs.Name,\r\n          Out: undefined,\r\n          PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n          PrimaryType: outDs.PrimaryType,\r\n          UiHint: undefined,\r\n        };\r\n        dataSources.push(outDsConst);\r\n        return dataSources;\r\n      }),\r\n    );\r\n  }\r\n\r\n  typeNameFilter(input: string, format: 'className' | 'classFullName') {\r\n    const globalParts = input.split(', ');\r\n\r\n    switch (format) {\r\n      case 'classFullName':\r\n        const classFullName = globalParts[0];\r\n        return classFullName;\r\n      case 'className':\r\n        const classFullNameParts = globalParts[0].split('.');\r\n        const className = classFullNameParts[classFullNameParts.length - 1];\r\n        return className;\r\n      default:\r\n        return input;\r\n    }\r\n  }\r\n\r\n  /** Save the current query and reload entire definition as returned from server */\r\n  savePipeline(pipelineModel: PipelineModel) {\r\n    const pipeline = pipelineModel.Pipeline;\r\n    const dataSources = pipelineModel.DataSources;\r\n\r\n    return this.http.post<PipelineModel>(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiQuerySave),\r\n      { pipeline, dataSources },\r\n      { params: { appId: this.context.appId.toString(), Id: pipeline.EntityId.toString() } }\r\n    ).pipe(\r\n      map(newPipelineModel => {\r\n        this.fixPipelineDataSources(newPipelineModel.DataSources);\r\n        return newPipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  runPipeline(id: number, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryRun), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), top: top.toString() }\r\n    });\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  debugStream(id: number, source: string, sourceOut: string, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDebugStream), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), from: source, out: sourceOut, top: top.toString() }\r\n    });\r\n  }\r\n}\r\n","import { DataSource, PipelineDataSource } from '../models';\r\nimport { GuiTypes, TypeInfo, TypeInfos } from './plumb-editor.models';\r\n\r\nexport const guiTypes: GuiTypes = {\r\n  Cache: { Name: 'Cache', Icon: 'history', UiHint: 'Caching of data' },\r\n  Filter: { Name: 'Filter', Icon: 'filter_list', UiHint: 'Filter data - usually returning less items than came in' },\r\n  Logic: { Name: 'Logic', Icon: 'share', UiHint: 'Logic operations - usually choosing between different streams' },\r\n  Lookup: { Name: 'Lookup', Icon: 'search', UiHint: 'Lookup operation - usually looking for other data based on a criteria' },\r\n  Modify: { Name: 'Modify', Icon: 'edit_attributes', UiHint: 'Modify data - usually changing, adding or removing values' },\r\n  Security: { Name: 'Security', Icon: 'account_circle', UiHint: 'Security - usually limit what the user sees based on his identity' },\r\n  Sort: { Name: 'Sort', Icon: 'sort', UiHint: 'Sort the items' },\r\n  Source: { Name: 'Source', Icon: 'cloud_upload', UiHint: 'Source of new data - usually SQL, CSV or similar' },\r\n  Target: { Name: 'Target', Icon: 'adjust', UiHint: 'Target - usually just a destination of data' },\r\n  Unknown: { Name: 'Unknown', Icon: 'fiber_manual_record', UiHint: 'Unknown type' },\r\n  Debug: { Name: 'Debug', Icon: 'bug_report', UiHint: 'Debugging Tools'},\r\n  System: { Name: 'System', Icon: 'military_tech', UiHint: 'System Data' },\r\n};\r\n\r\nexport function calculateTypeInfos(pipelineDataSources: PipelineDataSource[], dataSources: DataSource[]) {\r\n  const typeInfos: TypeInfos = {};\r\n\r\n  for (const pipelineDataSource of pipelineDataSources) {\r\n    let typeInfo: TypeInfo;\r\n    const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    if (dataSource) {\r\n      typeInfo = { ...(dataSource.PrimaryType ? guiTypes[dataSource.PrimaryType] : guiTypes.Unknown) };\r\n      if (dataSource.Icon != null) { typeInfo.Icon = dataSource.Icon; }\r\n      if (dataSource.DynamicIn != null) { typeInfo.DynamicIn = dataSource.DynamicIn; }\r\n      if (dataSource.DynamicOut != null) { typeInfo.DynamicOut = dataSource.DynamicOut; }\r\n      if (dataSource.HelpLink != null) { typeInfo.HelpLink = dataSource.HelpLink; }\r\n      if (dataSource.EnableConfig != null) { typeInfo.EnableConfig = dataSource.EnableConfig; }\r\n      if (dataSource.UiHint != null) { typeInfo.UiHint = dataSource.UiHint; }\r\n    }\r\n    if (!typeInfo) { typeInfo = { ...guiTypes.Unknown }; }\r\n    typeInfos[pipelineDataSource.EntityGuid] = typeInfo;\r\n  }\r\n\r\n  return typeInfos;\r\n}\r\n","import { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { EndpointInfo, PlumbType } from './plumb-editor.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\nexport const dataSrcIdPrefix = 'dataSource_';\r\n\r\nexport class Plumber {\r\n  private instance: PlumbType;\r\n  private lineCount = 0;\r\n  private linePaintDefault = {\r\n    stroke: '#61B7CF',\r\n    strokeWidth: 4,\r\n    outlineStroke: 'white',\r\n    outlineWidth: 2,\r\n  };\r\n  private lineColors = [\r\n    '#009688', '#00bcd4', '#3f51b5', '#9c27b0', '#e91e63',\r\n    '#db4437', '#ff9800', '#60a917', '#60a917', '#008a00',\r\n    '#00aba9', '#1ba1e2', '#0050ef', '#6a00ff', '#aa00ff',\r\n    '#f472d0', '#d80073', '#a20025', '#e51400', '#fa6800',\r\n    '#f0a30a', '#e3c800', '#825a2c', '#6d8764', '#647687',\r\n    '#76608a', '#a0522d',\r\n  ];\r\n  private maxCols = this.lineColors.length - 1;\r\n  private uuidColorMap: Record<string, any> = {};\r\n  private bulkDelete = false;\r\n\r\n  constructor(\r\n    private jsPlumbRoot: HTMLElement,\r\n    private pipelineModel: PipelineModel,\r\n    private dataSources: DataSource[],\r\n    private onConnectionsChanged: () => void,\r\n    private onDragend: (pipelineDataSourceGuid: string, position: VisualDesignerData) => void,\r\n    private onDebugStream: (stream: PipelineResultStream) => void,\r\n  ) {\r\n    this.instance = window.jsPlumb.getInstance(this.getInstanceDefaults(this.jsPlumbRoot));\r\n    this.instance.batch(() => {\r\n      this.initDomDataSources();\r\n      this.initWirings();\r\n      this.bindEvents();\r\n    });\r\n    // spm NOTE: repaint after initial paint fixes:\r\n    // Error: <svg> attribute width: Expected length, \"-Infinity\".\r\n    this.instance.repaintEverything();\r\n  }\r\n\r\n  destroy() {\r\n    this.instance.reset();\r\n    this.instance.unbindContainer();\r\n  }\r\n\r\n  removeEndpointsOnDataSource(pipelineDataSourceGuid: string) {\r\n    const elementId = dataSrcIdPrefix + pipelineDataSourceGuid;\r\n    this.bulkDelete = true;\r\n    this.instance.batch(() => {\r\n      this.instance.selectEndpoints({ element: elementId }).delete();\r\n    });\r\n    this.bulkDelete = false;\r\n  }\r\n\r\n  getAllConnections() {\r\n    const connectionInfos: StreamWire[] = this.instance.getAllConnections().map((connection: PlumbType) => {\r\n      const wire: StreamWire = {\r\n        From: connection.sourceId.replace(dataSrcIdPrefix, ''),\r\n        Out: connection.endpoints[0].getOverlay('endpointLabel').label,\r\n        To: connection.targetId.replace(dataSrcIdPrefix, ''),\r\n        In: connection.endpoints[1].getOverlay('endpointLabel').label,\r\n      };\r\n      return wire;\r\n    });\r\n    return connectionInfos;\r\n  }\r\n\r\n  getStreamsOut() {\r\n    const streamsOut: string[] = [];\r\n    this.instance.selectEndpoints({ target: dataSrcIdPrefix + 'Out' }).each((endpoint: PlumbType) => {\r\n      streamsOut.push(endpoint.getOverlay('endpointLabel').label);\r\n    });\r\n    const streamsOutStr = streamsOut.join(',');\r\n    return streamsOutStr;\r\n  }\r\n\r\n  putEntityCountOnConnections(result: PipelineResult) {\r\n    result.Streams?.forEach(stream => {\r\n      const sourceElementId = dataSrcIdPrefix + stream.Source;\r\n      const outTargets = ['00000000-0000-0000-0000-000000000000', this.pipelineModel.Pipeline.EntityGuid];\r\n      const targetElementId = outTargets.includes(stream.Target) ? dataSrcIdPrefix + 'Out' : dataSrcIdPrefix + stream.Target;\r\n\r\n      const fromUuid = sourceElementId + '_out_' + stream.SourceOut;\r\n      const toUuid = targetElementId + '_in_' + stream.TargetIn;\r\n\r\n      const sEndp: PlumbType = this.instance.getEndpoint(fromUuid);\r\n      sEndp?.connections\r\n        ?.filter((connection: PlumbType) => connection.endpoints[1].getUuid() === toUuid)\r\n        ?.forEach((connection: PlumbType) => {\r\n          const label = !stream.Error ? stream.Count.toString() : '';\r\n          const cssClass = 'streamEntitiesCount ' + (!stream.Error ? '' : 'streamEntitiesError');\r\n          connection.setLabel({\r\n            label,\r\n            cssClass,\r\n            events: {\r\n              click: (labelOverlay: PlumbType) => {\r\n                if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n                this.onDebugStream(stream);\r\n              },\r\n            },\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  private nextLinePaintStyle(uuid: string) {\r\n    return (\r\n      this.uuidColorMap[uuid] ||\r\n      (this.uuidColorMap[uuid] = Object.assign({}, this.linePaintDefault, { stroke: this.lineColors[this.lineCount++ % this.maxCols] }))\r\n    );\r\n  }\r\n\r\n  private getInstanceDefaults(container: HTMLElement) {\r\n    const defaults = {\r\n      Container: container,\r\n      Connector: ['Bezier', { curviness: 70 }],\r\n      PaintStyle: this.nextLinePaintStyle('dummy'),\r\n      HoverPaintStyle: {\r\n        stroke: '#216477',\r\n        strokeWidth: 4,\r\n        outlineStroke: 'white',\r\n        outlineWidth: 2,\r\n      },\r\n    };\r\n    return defaults;\r\n  }\r\n\r\n  /** Create sources, targets and endpoints */\r\n  private initDomDataSources() {\r\n    for (const pipelineDataSource of this.pipelineModel.DataSources) {\r\n      const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + dataSrcIdPrefix + pipelineDataSource.EntityGuid);\r\n      if (!domDataSource) { continue; }\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      if (!dataSource) { continue; }\r\n\r\n      if (this.pipelineModel.Pipeline.AllowEdit) {\r\n        // WARNING! Must happen before instance.makeSource()\r\n        this.instance.draggable(domDataSource, {\r\n          grid: [20, 20], stop: (event: PlumbType) => {\r\n            const element: HTMLElement = event.el;\r\n            const pipelineDataSourceGuid: string = element.id.replace(dataSrcIdPrefix, '');\r\n            const position: VisualDesignerData = {\r\n              Top: event.finalPos[1],\r\n              Left: event.finalPos[0],\r\n            };\r\n            setTimeout(() => { this.onDragend(pipelineDataSourceGuid, position); });\r\n          }\r\n        });\r\n      }\r\n\r\n      // Add Out-Endpoints from Definition\r\n      dataSource.Out?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, false, pipelineDataSource);\r\n      });\r\n\r\n      // Add In-Endpoints from Definition\r\n      dataSource.In?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, true, pipelineDataSource);\r\n      });\r\n\r\n      // Make DataSource a Target for new Endpoints (if .In is an Array)\r\n      if (dataSource.In) {\r\n        const targetEndpointUnlimited = this.buildTargetEndpoint();\r\n        targetEndpointUnlimited.maxConnections = -1;\r\n        this.instance.makeTarget(domDataSource, targetEndpointUnlimited);\r\n      }\r\n\r\n      if (dataSource.DynamicOut) {\r\n        this.instance.makeSource(domDataSource, this.buildSourceEndpoint(), { filter: '.add-endpoint' });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Create wires */\r\n  private initWirings() {\r\n    this.pipelineModel.Pipeline.StreamWiring?.forEach(wire => {\r\n      // read connections from Pipeline\r\n      const sourceElementId = dataSrcIdPrefix + wire.From;\r\n      const fromUuid = sourceElementId + '_out_' + wire.Out;\r\n      const targetElementId = dataSrcIdPrefix + wire.To;\r\n      const toUuid = targetElementId + '_in_' + wire.In;\r\n\r\n      // Ensure In-Endpoint exist\r\n      if (!this.instance.getEndpoint(fromUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + sourceElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.Out, false, pipelineDataSource);\r\n      }\r\n\r\n      // Ensure Out-Endpoint exist\r\n      if (!this.instance.getEndpoint(toUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + targetElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.In, true, pipelineDataSource);\r\n      }\r\n\r\n      try {\r\n        this.instance.connect({\r\n          uuids: [fromUuid, toUuid],\r\n          paintStyle: this.nextLinePaintStyle(fromUuid),\r\n        });\r\n      } catch (e) {\r\n        console.error({ message: 'Connection failed', from: fromUuid, to: toUuid });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addEndpoint(domDataSource: HTMLElement, endpointName: string, isIn: boolean, pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources.find(d => d.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    const isDynamic = isIn\r\n      ? !dataSource.In?.some(name => this.getEndpointInfo(name, false))\r\n      : !dataSource.Out?.some(name => this.getEndpointInfo(name, false));\r\n    const endpointInfo = this.getEndpointInfo(endpointName, isDynamic);\r\n\r\n    let style: string;\r\n    if (isDynamic) {\r\n      style = 'dynamic';\r\n    } else if (!endpointInfo.required) {\r\n      style = '';\r\n    } else {\r\n      const wireExists = this.pipelineModel.Pipeline.StreamWiring?.some(wire => {\r\n        const targetElementId = dataSrcIdPrefix + wire.To;\r\n        const targetEndpointName = wire.In;\r\n\r\n        return targetElementId === domDataSource.id && targetEndpointName === endpointInfo.name;\r\n      });\r\n      style = wireExists ? '' : 'required';\r\n    }\r\n\r\n    const uuid = domDataSource.id + (isIn ? '_in_' : '_out_') + endpointInfo.name;\r\n    const model = isIn ? this.buildTargetEndpoint(style) : this.buildSourceEndpoint(style);\r\n    // Endpoints on Out-DataSource must be always enabled\r\n    const params = {\r\n      uuid,\r\n      enabled: this.pipelineModel.Pipeline.AllowEdit\r\n        || pipelineDataSource.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    };\r\n\r\n    const endPoint: PlumbType = this.instance.addEndpoint(domDataSource, model, params);\r\n    endPoint.getOverlay('endpointLabel').setLabel(endpointInfo.name);\r\n  }\r\n\r\n  private buildSourceEndpoint(style?: string) {\r\n    const sourceEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'sourceEndpoint ' + style ?? '',\r\n      maxConnections: -1,\r\n      isSource: true,\r\n      anchor: ['Continuous', { faces: ['top'] }],\r\n      overlays: this.getEndpointOverlays(true)\r\n    };\r\n    return sourceEndpoint;\r\n  }\r\n\r\n  private buildTargetEndpoint(style?: string) {\r\n    const targetEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'targetEndpoint ' + style ?? '',\r\n      maxConnections: 1,\r\n      isTarget: true,\r\n      anchor: ['Continuous', { faces: ['bottom'] }],\r\n      overlays: this.getEndpointOverlays(false),\r\n      dropOptions: { hoverClass: 'hover', activeClass: 'active' }\r\n    };\r\n    return targetEndpoint;\r\n  }\r\n\r\n  private getEndpointOverlays(isSource: boolean) {\r\n    return [\r\n      [\r\n        'Label', {\r\n          id: 'endpointLabel',\r\n          location: [0.5, isSource ? 0 : 1],\r\n          label: 'Default',\r\n          cssClass: isSource ? 'endpointSourceLabel' : 'endpointTargetLabel',\r\n          events: {\r\n            click: (labelOverlay: PlumbType) => {\r\n              if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n\r\n              const newLabel = prompt('Rename stream', labelOverlay.label);\r\n              if (!newLabel) { return; }\r\n              labelOverlay.setLabel(newLabel);\r\n              setTimeout(() => { this.onConnectionsChanged(); });\r\n            },\r\n          },\r\n        }\r\n      ]\r\n    ];\r\n  }\r\n\r\n  private bindEvents() {\r\n    this.instance.bind('connectionDetached', (info: PlumbType) => {\r\n      if (this.bulkDelete) { return; }\r\n      const domDataSource: HTMLElement = info.target;\r\n      const pipelineDataSource = this.pipelineModel.DataSources.find(\r\n        pipelineDS => pipelineDS.EntityGuid === domDataSource.id.replace(dataSrcIdPrefix, '')\r\n      );\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      const label: string = info.targetEndpoint.getOverlay('endpointLabel').label;\r\n      const isDynamic = !dataSource.In.some(name => this.getEndpointInfo(name, false).name === label);\r\n      if (isDynamic) {\r\n        this.instance.deleteEndpoint(info.targetEndpoint);\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      } else {\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      }\r\n    });\r\n\r\n    this.instance.bind('connection', (info: PlumbType) => {\r\n      if (info.sourceId === info.targetId) {\r\n        setTimeout(() => {\r\n          this.instance.deleteConnection(info.connection, { fireEvent: false });\r\n          setTimeout(() => { this.onConnectionsChanged(); });\r\n        });\r\n        return;\r\n      }\r\n      const endpointLabel: PlumbType = info.targetEndpoint.getOverlay('endpointLabel');\r\n      const labelPrompt: string = endpointLabel.getLabel();\r\n      const endpoints: PlumbType[] = this.instance.getEndpoints(info.target.id);\r\n      const targetEndpointHasSameLabel = endpoints.some(endpoint => {\r\n        const label: string = endpoint.getOverlay('endpointLabel').getLabel();\r\n        return label === labelPrompt &&\r\n          info.targetEndpoint.id !== endpoint.id &&\r\n          (endpoint.canvas as HTMLCanvasElement).classList.contains('targetEndpoint');\r\n      });\r\n      if (targetEndpointHasSameLabel) {\r\n        endpointLabel.setLabel(`PleaseRename${Math.floor(Math.random() * 99999)}`);\r\n      }\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n  }\r\n\r\n  private getEndpointInfo(endpointName: string, isDynamic: boolean): EndpointInfo {\r\n    let name: string;\r\n    let required: boolean;\r\n\r\n    if (isDynamic) {\r\n      name = endpointName;\r\n      required = false;\r\n    } else {\r\n      const trimmed = endpointName.trim();\r\n      required = trimmed.endsWith('*');\r\n      name = !required ? trimmed : trimmed.substring(0, trimmed.length - 1);\r\n    }\r\n\r\n    const endpointInfo: EndpointInfo = {\r\n      name,\r\n      required,\r\n    };\r\n    return endpointInfo;\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>\r\n      Query Results\r\n      <ng-container *ngIf=\"debugStream\">\r\n        for Stream: \"{{ debugStream.name }}\" on Source: \"{{ debugStream.sourceName }}\"\r\n      </ng-container>\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<p class=\"dialog-description\">\r\n  The Full result was logged to the Browser Console. Further down you'll find more debug-infos.\r\n  Executed in {{ timeUsed }}ms ({{ ticksUsed }} ticks)\r\n</p>\r\n\r\n<mat-tab-group dynamicHeight color=\"accent\">\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Results\">\r\n      <span>Results</span>\r\n    </div>\r\n\r\n    <p class=\"description\">\r\n      <ng-container *ngIf=\"top === 0\">Showing All results</ng-container>\r\n      <ng-container *ngIf=\"top !== 0\">Showing top {{ top }} results</ng-container>\r\n      <button mat-button *ngFor=\"let option of optionsForTop\" (click)=\"show(option)\">\r\n        Show\r\n        <ng-container *ngIf=\"option === 0\">All</ng-container>\r\n        <ng-container *ngIf=\"option !== 0\">{{ option }}</ng-container>\r\n      </button>\r\n    </p>\r\n    <pre>{{ result | json }}</pre>\r\n  </mat-tab>\r\n\r\n  <mat-tab *ngIf=\"parameters?.length\">\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Parameters\">\r\n      <span>Parameters</span>\r\n    </div>\r\n\r\n    <br />\r\n    <ul class=\"description\">\r\n      <li *ngFor=\"let param of parameters\">{{ param }}</li>\r\n    </ul>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Sources\">\r\n      <span>Sources</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Name and Guid</th>\r\n        <th>Type</th>\r\n        <th>Configuration</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let source of sources | keyvalue\">\r\n        <td>\r\n          <div *ngIf=\"source.value.Definition?.Name\">{{ source.value.Definition?.Name }}</div>\r\n          <pre>{{ source.value.Guid }}</pre>\r\n        </td>\r\n        <td>{{ source.value.Type }}</td>\r\n        <td>\r\n          <ol>\r\n            <li *ngFor=\"let config of source.value.Configuration | keyvalue\">\r\n              <b>{{ config.key }}</b>=<em>{{ config.value }}</em>\r\n            </li>\r\n          </ol>\r\n        </td>\r\n        <td>{{ source.value.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Streams\">\r\n      <span>Streams</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Source</th>\r\n        <th>Target</th>\r\n        <th>Items</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let stream of streams\">\r\n        <td>\r\n          <pre>{{ stream.Source + \":\" + stream.SourceOut }}</pre>\r\n        </td>\r\n        <td>\r\n          <pre>{{ stream.Target + \":\" + stream.TargetIn }}</pre>\r\n        </td>\r\n        <td>{{ stream.Count }}</td>\r\n        <td>{{ stream.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n</mat-tab-group>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DebugStreamInfo, PipelineResultQuery, PipelineResultSources, PipelineResultStream } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { QueryResultDialogData } from './query-result.models';\r\n\r\n@Component({\r\n  selector: 'app-query-result',\r\n  templateUrl: './query-result.component.html',\r\n  styleUrls: ['./query-result.component.scss'],\r\n})\r\nexport class QueryResultComponent implements OnInit {\r\n  parameters: string[];\r\n  timeUsed: number;\r\n  ticksUsed: number;\r\n  top: number;\r\n  optionsForTop: number[];\r\n  result: PipelineResultQuery;\r\n  debugStream: DebugStreamInfo;\r\n  sources: PipelineResultSources;\r\n  streams: PipelineResultStream[];\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: QueryResultDialogData,\r\n    private dialogRef: MatDialogRef<QueryResultComponent>,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const pipeline = this.visualQueryService.pipelineModel$.value.Pipeline;\r\n    const params = (pipeline.Params?.split('\\n') ?? []).filter(el => !!el);\r\n    const testParams = (pipeline.TestParameters?.split('\\n') ?? []).filter(el => !!el);\r\n    this.parameters = [].concat(params, testParams);\r\n    this.timeUsed = this.dialogData.result.QueryTimer.Milliseconds;\r\n    this.ticksUsed = this.dialogData.result.QueryTimer.Ticks;\r\n    this.top = this.dialogData.top;\r\n    this.optionsForTop = [25, 100, 1000, 0];\r\n    this.result = this.dialogData.result.Query;\r\n    this.debugStream = this.dialogData.debugStream;\r\n    this.sources = this.dialogData.result.Sources;\r\n    this.streams = this.dialogData.result.Streams;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  show(top: number) {\r\n    if (top === this.top) { return; }\r\n\r\n    if (this.debugStream) {\r\n      this.visualQueryService.debugStream(this.debugStream.original, top);\r\n    } else {\r\n      this.visualQueryService.runPipeline(top);\r\n    }\r\n\r\n    this.closeDialog();\r\n  }\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { StreamErrorData } from '../models';\r\nimport { StreamErrorResultDialogData } from './stream-error-result.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-stream-error-result',\r\n  templateUrl: './stream-error-result.component.html',\r\n  styleUrls: ['./stream-error-result.component.scss'],\r\n})\r\nexport class StreamErrorResultComponent implements OnInit {\r\n  errorData: StreamErrorData;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: StreamErrorResultDialogData,\r\n    private dialogRef: MatDialogRef<StreamErrorResultComponent>,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.errorData = this.dialogData.errorData;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openInsights() {\r\n    window.open(window.$2sxc.http.apiUrl('sys/insights/logs?key=web-api'), '_blank');\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Stream Error Results</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<br />\r\n\r\n<pre>{{ errorData | json }}</pre>\r\n\r\n<div>\r\n  <button mat-button tippy=\"Open 2sxc Insights\" (click)=\"openInsights()\">\r\n    <mat-icon>speed</mat-icon>\r\n    <span>Insights</span>\r\n  </button>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Injectable, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { BehaviorSubject, fromEvent, Subject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../../permissions/services/metadata.service';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\n// tslint:disable-next-line:max-line-length\r\nimport { DataSource, DataSourceMetadata, DebugStreamInfo, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { QueryResultComponent } from '../query-result/query-result.component';\r\nimport { QueryResultDialogData } from '../query-result/query-result.models';\r\nimport { StreamErrorResultComponent } from '../stream-error-result/stream-error-result.component';\r\nimport { StreamErrorResultDialogData } from '../stream-error-result/stream-error-result.models';\r\nimport { QueryDefinitionService } from './query-definition.service';\r\n\r\n@Injectable()\r\nexport class VisualQueryService implements OnDestroy {\r\n  pipelineModel$ = new BehaviorSubject<PipelineModel>(null);\r\n  dataSources$ = new BehaviorSubject<DataSource[]>(null);\r\n  putEntityCountOnConnections$ = new Subject<PipelineResult>();\r\n\r\n  private pipelineId = parseInt(this.route.snapshot.paramMap.get('pipelineId'), 10);\r\n  private doRefresh = false;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private titleService: Title,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private zone: NgZone,\r\n    private metadataService: MetadataService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnDestroy() {\r\n    this.pipelineModel$.complete();\r\n    this.dataSources$.complete();\r\n    this.putEntityCountOnConnections$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  init() {\r\n    this.fetchDataSources(() => this.fetchPipeline());\r\n    this.attachKeyboardSave();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  editPipelineEntity() {\r\n    // save Pipeline, then open Edit Dialog\r\n    this.savePipeline(() => {\r\n      const form: EditForm = {\r\n        items: [{ EntityId: this.pipelineModel$.value.Pipeline.EntityId }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.doRefresh = true;\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n    });\r\n  }\r\n\r\n  saveAndRun(save: boolean, run: boolean) {\r\n    if (save && run) {\r\n      this.savePipeline(() => { this.runPipeline(); });\r\n    } else if (save) {\r\n      this.savePipeline();\r\n    } else if (run) {\r\n      this.runPipeline();\r\n    }\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const newPipelineDataSource: PipelineDataSource = {\r\n      Description: '',\r\n      EntityGuid: 'unsaved' + (pipelineModel.DataSources.length + 1),\r\n      EntityId: undefined,\r\n      Name: dataSource.Name,\r\n      PartAssemblyAndType: dataSource.PartAssemblyAndType,\r\n      VisualDesignerData: { Top: 100, Left: 100 },\r\n    };\r\n    pipelineModel.DataSources.push(newPipelineDataSource);\r\n    this.pipelineModel$.next(pipelineModel);\r\n    this.savePipeline();\r\n  }\r\n\r\n  removeDataSource(pipelineDataSourceGuid: string, connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.DataSources = pipelineModel.DataSources.filter(pipelineDS => pipelineDS.EntityGuid !== pipelineDataSourceGuid);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  renameDataSource(pipelineDataSourceGuid: string, name: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Name = name;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourceDescription(pipelineDataSourceGuid: string, description: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Description = description;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeConnections(connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourcePosition(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    if (!pipelineDataSource) {\r\n      // spm NOTE: fixes problem where dataSource position can't be updated if dataSource with guid unsavedXX gets saved while dragging.\r\n      // Can happen if dataSource is just added and user drags it and save happens.\r\n      return;\r\n    }\r\n    pipelineDataSource.VisualDesignerData = { ...pipelineDataSource.VisualDesignerData, ...position };\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  editDataSource(pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources$.value.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n\r\n    // const contentTypeName = dataSource?.ContentType\r\n    //   ?? '|Config ' + this.queryDefinitionService.typeNameFilter(pipelineDataSource.PartAssemblyAndType, 'classFullName');\r\n    const contentTypeName = dataSource.ContentType;\r\n    const typeId = eavConstants.metadata.entity.type;\r\n    const keyType = eavConstants.metadata.entity.keyType;\r\n    const key = pipelineDataSource.EntityGuid;\r\n\r\n    // query for existing Entity\r\n    this.metadataService.getMetadata<DataSourceMetadata[]>(typeId, keyType, key, contentTypeName).subscribe(metadata => {\r\n      // edit existing Entity\r\n      if (metadata.length) {\r\n        const form: EditForm = {\r\n          items: [{ EntityId: metadata[0].Id }],\r\n        };\r\n        const formUrl = convertFormToUrl(form);\r\n        this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        return;\r\n      }\r\n\r\n      // Check if the type exists, and if yes, create new Entity\r\n      this.contentTypesService.retrieveContentType(contentTypeName /*, { ignoreErrors: 'true' } */).subscribe({\r\n        next: contentType => {\r\n          const form: EditForm = {\r\n            items: [{\r\n              ContentTypeName: contentTypeName,\r\n              For: {\r\n                Target: eavConstants.metadata.entity.target,\r\n                Guid: key,\r\n              }\r\n            }],\r\n          };\r\n          const formUrl = convertFormToUrl(form);\r\n          this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        },\r\n        error: (error: HttpErrorResponse) => {\r\n          alert('Server reports error - this usually means that this data-source doesn\\'t have any configuration');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private savePipeline(callback?: () => void) {\r\n    this.snackBar.open('Saving...');\r\n    this.queryDefinitionService.savePipeline(this.pipelineModel$.value).subscribe({\r\n      next: pipelineModel => {\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.pipelineModel$.next(pipelineModel);\r\n        if (callback != null) { callback(); }\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Save Pipeline failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  runPipeline(top = 25) {\r\n    this.snackBar.open('Running query...');\r\n    this.queryDefinitionService.runPipeline(this.pipelineModel$.value.Pipeline.EntityId, top).subscribe({\r\n      next: pipelineResult => {\r\n        this.snackBar.open('Query worked', null, { duration: 2000 });\r\n        this.showQueryResult(pipelineResult, top);\r\n        console.warn(pipelineResult);\r\n        // push cloned pipelineModel to reset jsPlumb\r\n        this.pipelineModel$.next(cloneDeep(this.pipelineModel$.value));\r\n        setTimeout(() => { this.putEntityCountOnConnections$.next(pipelineResult); });\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Query failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  debugStream(stream: PipelineResultStream, top = 25) {\r\n    if (stream.Error) {\r\n      this.showStreamErrorResult(stream);\r\n      return;\r\n    }\r\n\r\n    if (stream.Count === 0) { return; }\r\n\r\n    this.snackBar.open('Running stream...');\r\n    const pipelineId = this.pipelineModel$.value.Pipeline.EntityId;\r\n    this.queryDefinitionService.debugStream(pipelineId, stream.Source, stream.SourceOut, top).subscribe({\r\n      next: streamResult => {\r\n        this.snackBar.open('Stream worked', null, { duration: 2000 });\r\n        const pipelineDataSource = this.pipelineModel$.value.DataSources.find(ds => ds.EntityGuid === stream.Source);\r\n        const debugStream: DebugStreamInfo = {\r\n          name: stream.SourceOut,\r\n          source: stream.Source,\r\n          sourceName: pipelineDataSource.Name,\r\n          original: stream,\r\n        };\r\n        this.showQueryResult(streamResult, top, debugStream);\r\n        console.warn(streamResult);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Stream failed', null, { duration: 2000 });\r\n      },\r\n    });\r\n  }\r\n\r\n  private fetchPipeline(reloadingSnackBar = false) {\r\n    if (reloadingSnackBar) {\r\n      this.snackBar.open('Reloading query, please wait...');\r\n    }\r\n    this.queryDefinitionService.fetchPipeline(this.pipelineId, this.dataSources$.value).subscribe(pipelineModel => {\r\n      if (reloadingSnackBar) {\r\n        this.snackBar.open('Query reloaded', null, { duration: 2000 });\r\n      }\r\n      this.pipelineModel$.next(pipelineModel);\r\n      this.titleService.setTitle(`${pipelineModel.Pipeline.Name} - Visual Query`);\r\n    });\r\n  }\r\n\r\n  private showQueryResult(result: PipelineResult, top: number, debugStream?: DebugStreamInfo) {\r\n    const dialogData: QueryResultDialogData = {\r\n      result,\r\n      debugStream,\r\n      top,\r\n    };\r\n    this.dialog.open(QueryResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private showStreamErrorResult(stream: PipelineResultStream) {\r\n    const dialogData: StreamErrorResultDialogData = {\r\n      errorData: stream.ErrorData,\r\n    };\r\n    this.dialog.open(StreamErrorResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private fetchDataSources(callback?: () => void) {\r\n    this.queryDefinitionService.fetchDataSources().subscribe(dataSources => {\r\n      this.dataSources$.next(dataSources);\r\n      callback();\r\n    });\r\n  }\r\n\r\n  private attachKeyboardSave() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<KeyboardEvent>(window, 'keydown').pipe(\r\n          filter(() => !this.route.snapshot.firstChild),\r\n          filter(event => {\r\n            const CTRL_S = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.keyCode === 83;\r\n            return CTRL_S;\r\n          }),\r\n        ).subscribe(event => {\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.savePipeline(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n        filter(() => {\r\n          const refresh = this.doRefresh;\r\n          this.doRefresh = false;\r\n          return refresh;\r\n        }),\r\n      ).subscribe(() => {\r\n        this.fetchPipeline(true);\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div #domRoot id=\"pipeline-root\" *ngIf=\"(templateModel$ | async) as templateModel\">\r\n  <!-- do not use trackBy, jsPlumb drag stops working properly after delete -->\r\n  <ng-container *ngIf=\"!hardReset\">\r\n    <div #domDataSource *ngFor=\"let dataSource of templateModel.pipelineDataSources\"\r\n      [id]=\"dataSrcIdPrefix + dataSource.EntityGuid\" class=\"dataSource\" [ngStyle]=\"{\r\n        'top': dataSource.VisualDesignerData.Top + 'px',\r\n        'left': dataSource.VisualDesignerData.Left + 'px',\r\n        'min-width': dataSource.VisualDesignerData.Width ? dataSource.VisualDesignerData.Width + 'px' : null\r\n      }\">\r\n\r\n      <div class=\"actions left\">\r\n        <mat-icon class=\"type-info\" [title]=\"templateModel.typeInfos[dataSource.EntityGuid].UiHint\">\r\n          {{ templateModel.typeInfos[dataSource.EntityGuid].Icon }}\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"configure\" title=\"Configure data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].EnableConfig\"\r\n          (click)=\"configureDataSource(dataSource)\">\r\n          settings\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"help\" title=\"Help for this data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.typeInfos[dataSource.EntityGuid].HelpLink\"\r\n          (click)=\"openHelp(templateModel.typeInfos[dataSource.EntityGuid].HelpLink)\">\r\n          help_outline\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"actions right\">\r\n        <mat-icon class=\"delete\" title=\"Delete\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && !isOutDataSource(dataSource)\" (click)=\"remove(dataSource)\">\r\n          delete\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"name\" title=\"Click to edit name\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editName(dataSource)\">\r\n        <span>{{ dataSource.Name || '(no name)' }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br />\r\n\r\n      <div class=\"description\" title=\"Click to edit description\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editDescription(dataSource)\">\r\n        <span>{{ dataSource.Description }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br />\r\n\r\n      <div class=\"typename\" [title]=\"dataSource.PartAssemblyAndType\">\r\n        Type: {{ getTypeName(dataSource.PartAssemblyAndType) }}\r\n      </div>\r\n\r\n      <mat-icon class=\"add-endpoint\" title=\"Drag a new Out-Connection\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicOut\">\r\n        arrow_drop_up\r\n      </mat-icon>\r\n\r\n      <mat-icon class=\"many-in\" title=\"This data source supports multiple In-Connections\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicIn\">\r\n        arrow_drop_up\r\n      </mat-icon>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { loadScripts } from '../../shared/helpers/load-scripts.helper';\r\nimport { PipelineDataSource, PipelineResultStream, VisualDesignerData } from '../models';\r\nimport { QueryDefinitionService } from '../services/query-definition.service';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateTypeInfos } from './plumb-editor.helpers';\r\nimport { PlumbEditorTemplateModel } from './plumb-editor.models';\r\nimport { dataSrcIdPrefix, Plumber } from './plumber.helper';\r\n\r\nconst jsPlumbUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.14.5/js/jsplumb.min.js';\r\n\r\n@Component({\r\n  selector: 'app-plumb-editor',\r\n  templateUrl: './plumb-editor.component.html',\r\n  styles: [':host { display: block; width: 100%; height: 100%; }'],\r\n  styleUrls: ['./plumb-editor.component.scss'],\r\n})\r\nexport class PlumbEditorComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('domRoot') private domRootRef: ElementRef<HTMLDivElement>;\r\n  @ViewChildren('domDataSource') private domDataSourcesRef: QueryList<ElementRef<HTMLDivElement>>;\r\n\r\n  dataSrcIdPrefix = dataSrcIdPrefix;\r\n  templateModel$: Observable<PlumbEditorTemplateModel>;\r\n  hardReset = false;\r\n\r\n  private plumber: Plumber;\r\n  private scriptLoaded$ = new BehaviorSubject(false);\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private visualQueryService: VisualQueryService,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    loadScripts([{ test: 'jsPlumb', src: jsPlumbUrl }], () => {\r\n      this.scriptLoaded$.next(true);\r\n    });\r\n\r\n    this.subscription.add(\r\n      this.visualQueryService.putEntityCountOnConnections$.subscribe(result => {\r\n        this.plumber.putEntityCountOnConnections(result);\r\n      })\r\n    );\r\n\r\n    this.templateModel$ = combineLatest([this.visualQueryService.pipelineModel$, this.visualQueryService.dataSources$]).pipe(\r\n      map(([pipelineModel, dataSources]) => {\r\n        if (pipelineModel == null || dataSources == null) { return; }\r\n\r\n        // workaround for jsPlumb not working with dom elements which it initialized on previously.\r\n        // This wipes dom entirely and gives us new elements\r\n        this.hardReset = true;\r\n        this.changeDetectorRef.detectChanges();\r\n        this.hardReset = false;\r\n        const templateModel: PlumbEditorTemplateModel = {\r\n          pipelineDataSources: pipelineModel.DataSources,\r\n          typeInfos: calculateTypeInfos(pipelineModel.DataSources, dataSources),\r\n          allowEdit: pipelineModel.Pipeline.AllowEdit,\r\n        };\r\n        return templateModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // https://stackoverflow.com/questions/37087864/execute-a-function-when-ngfor-finished-in-angular-2/37088348#37088348\r\n    const domDataSourcesLoaded$ = this.domDataSourcesRef.changes.pipe(map(() => true));\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.scriptLoaded$, domDataSourcesLoaded$]).subscribe(([scriptLoaded, domDataSourcesLoaded]) => {\r\n        if (!scriptLoaded || !domDataSourcesLoaded) { return; }\r\n\r\n        this.plumber?.destroy();\r\n        this.plumber = new Plumber(\r\n          this.domRootRef.nativeElement,\r\n          this.visualQueryService.pipelineModel$.value,\r\n          this.visualQueryService.dataSources$.value,\r\n          this.onConnectionsChanged.bind(this),\r\n          this.onDragend.bind(this),\r\n          this.onDebugStream.bind(this),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.plumber?.destroy();\r\n    this.scriptLoaded$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  onConnectionsChanged() {\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.changeConnections(connections, streamsOut);\r\n  }\r\n\r\n  onDragend(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    this.visualQueryService.changeDataSourcePosition(pipelineDataSourceGuid, position);\r\n  }\r\n\r\n  onDebugStream(stream: PipelineResultStream) {\r\n    this.visualQueryService.debugStream(stream);\r\n  }\r\n\r\n  configureDataSource(dataSource: PipelineDataSource) {\r\n    // ensure dataSource entity is saved\r\n    if (dataSource.EntityGuid.includes('unsaved')) {\r\n      this.visualQueryService.saveAndRun(true, false);\r\n    } else {\r\n      this.visualQueryService.editDataSource(dataSource);\r\n    }\r\n  }\r\n\r\n  getTypeName(partAssemblyAndType: string) {\r\n    if (partAssemblyAndType.length === 36 && (partAssemblyAndType.split('-').length - 1) === 4) {\r\n      // partAssemblyAndType is guid\r\n      return partAssemblyAndType.substring(0, 10) + '…';\r\n    }\r\n    return this.queryDefinitionService.typeNameFilter(partAssemblyAndType, 'className');\r\n  }\r\n\r\n  isOutDataSource(pipelineDataSource: PipelineDataSource) {\r\n    return pipelineDataSource.PartAssemblyAndType === eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType;\r\n  }\r\n\r\n  remove(pipelineDataSource: PipelineDataSource) {\r\n    if (!confirm(`Delete ${pipelineDataSource.Name} data source?`)) { return; }\r\n\r\n    this.plumber.removeEndpointsOnDataSource(pipelineDataSource.EntityGuid);\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.removeDataSource(pipelineDataSource.EntityGuid, connections, streamsOut);\r\n  }\r\n\r\n  openHelp(url: string) {\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  editName(dataSource: PipelineDataSource) {\r\n    const newName = prompt('Rename data source', dataSource.Name)?.trim();\r\n    if (newName == null || newName === '') { return; }\r\n\r\n    this.visualQueryService.renameDataSource(dataSource.EntityGuid, newName);\r\n  }\r\n\r\n  editDescription(dataSource: PipelineDataSource) {\r\n    const newDescription = prompt('Edit description', dataSource.Description)?.trim();\r\n    if (newDescription == null) { return; }\r\n\r\n    this.visualQueryService.changeDataSourceDescription(dataSource.EntityGuid, newDescription);\r\n  }\r\n\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"(pipelineModel$ | async) as pipelineModel\">\r\n\r\n  <div class=\"wrapper\">\r\n    <div class=\"actions\">\r\n      <button mat-raised-button class=\"action\" color=\"accent\" (click)=\"saveAndRunQuery(true, true)\">\r\n        Save and run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(false, true)\">\r\n        Run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(true, false)\">\r\n        Save\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">\r\n        <div>Query Parameters</div>\r\n        <div>\r\n          <button mat-icon-button tippy=\"Edit parameters\" (click)=\"editPipeline()\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button tippy=\"Query Params Docs\" (click)=\"openParamsHelp()\">\r\n            <mat-icon>info</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.Params?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.Params?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">Test Parameters</div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.TestParameters?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.TestParameters?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"(warnings$ | async) as warnings\">\r\n      <div class=\"warnings\" *ngIf=\"warnings.length\">\r\n        <div class=\"title\">\r\n          <span>Warnings</span>\r\n          <mat-icon style=\"color: red\">warning</mat-icon>\r\n        </div>\r\n        <ol class=\"values\">\r\n          <li *ngFor=\"let warning of warnings\" [innerHTML]=\"warning\">\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"description\" *ngIf=\"pipelineModel.Pipeline.Description\">\r\n      <div class=\"title\">Query Description</div>\r\n      <div>{{ pipelineModel.Pipeline.Description }}</div>\r\n    </div>\r\n\r\n    <div class=\"footer-actions\">\r\n      <button mat-raised-button class=\"action\" (click)=\"openRestApi()\">\r\n        <span>Use in JSON / REST API</span>\r\n        <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GoToDevRest } from '../../dev-rest';\r\nimport { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateWarnings } from './run-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-run-explorer',\r\n  templateUrl: './run-explorer.component.html',\r\n  styleUrls: ['./run-explorer.component.scss'],\r\n})\r\nexport class RunExplorerComponent implements OnInit {\r\n  pipelineModel$: Observable<PipelineModel>;\r\n  warnings$: Observable<string[]>;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.pipelineModel$ = this.visualQueryService.pipelineModel$;\r\n    this.warnings$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => calculateWarnings(pipelineModel, this.context)),\r\n    );\r\n  }\r\n\r\n  editPipeline() {\r\n    this.visualQueryService.editPipelineEntity();\r\n  }\r\n\r\n  openParamsHelp() {\r\n    window.open('http://r.2sxc.org/QueryParams', '_blank');\r\n  }\r\n\r\n  saveAndRunQuery(save: boolean, run: boolean) {\r\n    this.visualQueryService.saveAndRun(save, run);\r\n  }\r\n\r\n  openRestApi() {\r\n    const queryGuid = this.visualQueryService.pipelineModel$.value.Pipeline.EntityGuid;\r\n    this.router.navigate([GoToDevRest.getUrlQuery(queryGuid)], { relativeTo: this.route });\r\n  }\r\n}\r\n","import { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\n\r\n/**\r\n * Check if there are special warnings the developer should know.\r\n * Typically when the test ModuleId is different from the one we're currently working on\r\n */\r\nexport function calculateWarnings(pipelineModel: PipelineModel, context: Context) {\r\n  const warnings: string[] = [];\r\n\r\n  try {\r\n    const queryParams = pipelineModel.Pipeline.Params?.split(/\\r?\\n/) || [];\r\n    const testParams = pipelineModel.Pipeline.TestParameters?.split(/\\r?\\n/) || [];\r\n\r\n    queryParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Query Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const paramSyntax = /^[a-zA-Z0-9]+=(.*)$/gmi;\r\n      const matched = paramSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Query Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>key=value</code> <br>\r\n          or resolve to a token like: <br>\r\n          <code>key=[source:key]</code>\r\n        `);\r\n      }\r\n    });\r\n\r\n    testParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Test Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const testParamSyntax = /^\\[[a-zA-Z]+:[a-zA-Z0-9]+\\]=(.*)$/gmi;\r\n      const matched = testParamSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Test Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>[source:key]=value</code>\r\n        `);\r\n      }\r\n\r\n      // Check if we should show the warning about the test ModuleId.\r\n      // This is because in the old days, the ModuleId wasn't auto-filled, so people had to add it as a test value.\r\n      // Now it's not necessary any more\r\n      const midRegex = /^\\[module:id\\]=([0-9]*)$/gmi;\r\n      const midMatch = midRegex.exec(param);\r\n      if (midMatch) {\r\n        const testMid = midMatch[1];\r\n        const urlMid = context.moduleId.toString();\r\n        if (testMid !== urlMid) {\r\n          warnings.push(`\r\n            Your test ModuleId (${testMid}) is different from the current ModuleId (${urlMid}).<br>\r\n            Note that 2sxc automatically provides the ModuleId - so you usually do not need to set it\r\n          `);\r\n        }\r\n      }\r\n\r\n      const oldMidRegex = /^\\[module:moduleid\\]=([0-9]*)$/gmi;\r\n      const oldMidMatch = oldMidRegex.exec(param);\r\n      if (oldMidMatch) {\r\n        warnings.push(`\r\n          You are using deprecated [Module:ModuleId] test parameter.<br>\r\n          Please use [Module:Id]\r\n        `);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Something went wrong in calculateWarnings for params', error);\r\n  }\r\n\r\n  return warnings;\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"sorted$ | async as sorted\">\r\n\r\n  <mat-slide-toggle labelPosition=\"before\" (change)=\"toggleDifficulty($event)\">\r\n    Show Advanced\r\n  </mat-slide-toggle>\r\n\r\n  <ng-container *ngFor=\"let group of sorted | keyvalue; trackBy: trackGroups\">\r\n    <div class=\"collapsible\" [tippy]=\"guiTypes[group.key].UiHint || group.key\" tippyShowDelay=\"750\"\r\n      (click)=\"toggleItem(group.key)\">\r\n      <mat-icon>{{ guiTypes[group.key].Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n      <span>{{ group.key }}</span>\r\n    </div>\r\n\r\n    <div class=\"list\" *ngIf=\"toggledItems.includes(group.key)\">\r\n      <div class=\"list-item\" *ngFor=\"let dataSource of group.value; trackBy: trackDataSources\"\r\n        [tippy]=\"dataSource.UiHint || dataSource.Name\" tippyShowDelay=\"750\" (click)=\"addDataSource(dataSource)\">\r\n        <mat-icon>{{ dataSource.Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n        <span>{{ dataSource.Name }}</span>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { KeyValue } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\nimport { guiTypes } from '../plumb-editor/plumb-editor.helpers';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { filterAndSortDataSources } from './add-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-add-explorer',\r\n  templateUrl: './add-explorer.component.html',\r\n  styleUrls: ['./add-explorer.component.scss'],\r\n})\r\nexport class AddExplorerComponent implements OnInit, OnDestroy {\r\n  sorted$: Observable<SortedDataSources>;\r\n  toggledItems: string[] = [];\r\n  guiTypes = guiTypes;\r\n\r\n  private difficulties = eavConstants.pipelineDesigner.dataSourceDifficulties;\r\n  private difficulty$ = new BehaviorSubject(this.difficulties.default);\r\n\r\n  constructor(private visualQueryService: VisualQueryService) { }\r\n\r\n  ngOnInit() {\r\n    this.sorted$ = combineLatest([this.visualQueryService.dataSources$, this.difficulty$]).pipe(\r\n      map(([dataSources, difficulty]) => filterAndSortDataSources(dataSources, difficulty)),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.difficulty$.complete();\r\n  }\r\n\r\n  toggleDifficulty(event: MatSlideToggleChange) {\r\n    const difficulty = event.checked ? this.difficulties.advanced : this.difficulties.default;\r\n    this.difficulty$.next(difficulty);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    this.visualQueryService.addDataSource(dataSource);\r\n  }\r\n\r\n  toggleItem(item: string) {\r\n    GeneralHelpers.toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n  trackGroups(index: number, type: KeyValue<string, DataSource[]>) {\r\n    return type.key;\r\n  }\r\n\r\n  trackDataSources(index: number, dataSource: DataSource) {\r\n    return dataSource.PartAssemblyAndType;\r\n  }\r\n}\r\n","import cloneDeep from 'lodash-es/cloneDeep';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\n\r\nexport function filterAndSortDataSources(dataSources: DataSource[], maxDifficulty: number) {\r\n  if (!dataSources) { return; }\r\n\r\n  const cloned = cloneDeep(dataSources);\r\n\r\n  const filtered = cloned.filter(dataSource =>\r\n    dataSource.Difficulty <= maxDifficulty\r\n    && dataSource.PartAssemblyAndType !== eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType\r\n  );\r\n\r\n  filtered.sort((a, b) => a.Name.toLocaleLowerCase().localeCompare(b.Name.toLocaleLowerCase()));\r\n\r\n  const sorted: SortedDataSources = {};\r\n  for (const dataSource of filtered) {\r\n    const type = dataSource.PrimaryType;\r\n    if (sorted[type]) {\r\n      sorted[type].push(dataSource);\r\n    } else {\r\n      sorted[type] = [dataSource];\r\n    }\r\n  }\r\n\r\n  return sorted;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit } from '../../../../edit/edit.matcher';\r\nimport { GoToDevRest } from '../dev-rest';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: VisualQueryComponent, children: [\r\n      GoToDevRest.route,\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule),\r\n        data: { history: false },\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class VisualQueryRoutingModule { }\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Context } from '../shared/services/context';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { VisualQueryService } from './services/visual-query.service';\r\n\r\n@Component({\r\n  selector: 'app-visual-query',\r\n  templateUrl: './visual-query.component.html',\r\n  styleUrls: ['./visual-query.component.scss'],\r\n  providers: [VisualQueryService],\r\n})\r\nexport class VisualQueryComponent implements OnInit {\r\n  @ViewChild(PlumbEditorComponent) plumbEditor: PlumbEditorComponent;\r\n\r\n  explorer = {\r\n    run: 'run',\r\n    add: 'add'\r\n  };\r\n  activeExplorer = this.explorer.run;\r\n\r\n  constructor(private context: Context, private route: ActivatedRoute, private visualQueryService: VisualQueryService) {\r\n    this.context.init(this.route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.visualQueryService.init();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    this.activeExplorer = (this.activeExplorer === explorer) ? null : explorer;\r\n  }\r\n\r\n  openHelp() {\r\n    window.open('http://r.2sxc.org/visual-query', '_blank');\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>\r\n\r\n<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" tippy=\"Run\" [ngClass]=\"{ 'active': activeExplorer === explorer.run }\"\r\n      (click)=\"toggleExplorer(explorer.run)\">\r\n      <mat-icon>play_arrow</mat-icon>\r\n    </div>\r\n    <div class=\"button\" tippy=\"Add\" [ngClass]=\"{ 'active': activeExplorer === explorer.add }\"\r\n      (click)=\"toggleExplorer(explorer.add)\">\r\n      <mat-icon>add</mat-icon>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"button\" tippy=\"Help\" (click)=\"openHelp()\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-run-explorer [hidden]=\"activeExplorer !== explorer.run\"></app-run-explorer>\r\n\r\n  <app-add-explorer [hidden]=\"activeExplorer !== explorer.add\"></app-add-explorer>\r\n\r\n  <app-plumb-editor></app-plumb-editor>\r\n</div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../permissions/services/metadata.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { AddExplorerComponent } from './add-explorer/add-explorer.component';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { QueryResultComponent } from './query-result/query-result.component';\r\nimport { RunExplorerComponent } from './run-explorer/run-explorer.component';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { StreamErrorResultComponent } from './stream-error-result/stream-error-result.component';\r\nimport { VisualQueryRoutingModule } from './visual-query-routing.module';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n    QueryResultComponent,\r\n    StreamErrorResultComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedComponentsModule,\r\n    VisualQueryRoutingModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    QueryDefinitionService,\r\n    MetadataService,\r\n    ContentTypesService,\r\n  ],\r\n})\r\nexport class VisualQueryModule { }\r\n"],"sourceRoot":"webpack:///"}