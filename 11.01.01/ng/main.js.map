{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/core/log.ts","webpack:///./src/app/debug-config.ts","webpack:///./src/app/core/boot-control.ts","webpack:///./src/app/version-dialog/sxc-versions.service.ts","webpack:///./src/app/version-dialog/dialog.component.html","webpack:///./src/app/version-dialog/dialog.component.ts","webpack:///./src/app/core/behavior-observable.ts","webpack:///./src/app/core/app.ts","webpack:///./src/app/template-picker/picker.service.ts","webpack:///./src/app/template-picker/data/content-types-processor.service.ts","webpack:///./src/app/template-picker/constants.ts","webpack:///./src/app/template-picker/data/template-processor.ts","webpack:///./src/app/template-picker/template-filter.pipe.ts","webpack:///./src/app/template-picker/current-data.service.ts","webpack:///./src/app/installer/installer.service.ts","webpack:///./src/app/installer/getting-started.service.ts","webpack:///./src/app/installer/installer.component.html","webpack:///./src/app/installer/installer.component.ts","webpack:///./src/app/template-picker/template-picker.component.html","webpack:///./src/app/template-picker/template-picker.component.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/core/$2sxc.service.ts","webpack:///./src/app/core/core.module.ts","webpack:///./src/app/installer/installer.module.ts","webpack:///./src/app/xtempUpgrading/material-module.ts","webpack:///./src/app/template-picker/template-picker.module.ts","webpack:///./src/app/version-dialog/version-dialog.module.ts","webpack:///./src/app/app.module.ts","webpack:///./src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","name","parent","autoDump","logs","Array","loggers","Object","this","add","msg","push","Log","forceLogToConsole","arguments","Constants","console","log","apply","subLog","newLog","dump","configureRuntimeLogging","state","window","_reboot","Subject","rebootRequest$","asObservable","getRebootController","BootController","instance","reboot","next","http","versionsSubject","ReplaySubject","versions","errorSubject","error","loadVersions","restore","changeId","appId","$2sxc","urlParams","require","item","JSON","parse","post","pipe","map","res","v","i","all","assign","Data","lastVersion","find","v2","VersionNumber","attr","Json","Entity","Attributes","entries","reduce","t","c","prototype","concat","key","value","type","hasChanged","stringify","TimeStamp","timestamp","date","Date","y","getFullYear","m","getUTCMonth","d","getDate","h","getHours","min","getMinutes","subscribe","SxcVersionsService","dialog","sxcVersion","restoreLive","version","ChangeSetId","location","reload","alert","restoreDraft","open","data","isDraft","afterClosed","undefined","DialogComponent","dialogRef","ConfirmRestoreDialog","create","initialValue","subj","BehaviorSubject","obs","subject","reset","isInitial","Observable","json","VersionMain","parseInt","Version","substr","uninitializedList","apps$","contentTypes$","templates$","ready$","mustLoadApps","buildObservables","enableLogging","combineLatest","a","ct","apps","types","templates","set","startWith","share","saveAppId","reloadParts","loadApps","get","toPromise","initLoading","requireApps","reloadAppParts","loadTemplates","loadContentTypes","response","x","Label","Metadata","Name","alreadyLoaded","appsFilter","App","streamLog","length","r","PickerService","translate","buildList","allTypes","allTemplates","template","unhide","unhideSelectedType","addEmptyTypeIfNeeded","filtered","hideNecessaryTypes","sortTypes","filter","IsHidden","contentTypes","currentType","currentTemplate","TemplateId","StaticName","forEach","layoutElementLabel","instant","ContentTypeStaticName","slice","Thumbnail","sort","b","localeCompare","findContentTypesById","selectedContentTypeId","ContentTypesProcessor","pickSelected","selected","app","transform","args","typeId","contentType","typeNameFilter","isContent","TemplateFilterPipe","api","templateFilter","ctProcessor","appId$","initialTypeId$","initialTemplateId$","selectedType$","selectedTemplate$","buildBasicObservables","app$","AppId","initialType$","type$","merge","current","findTemplatesForTypeOrAll","initialTemplate$","selected$","template$","TemplateProcessor","types$","init","config","appReady$","typeReady$","scan","acc","contentTypeId","templReady$","debounceTime","templateId","loadAll$","initLogging","activateCurrentApp","inita$","inittyp$","initt$","initAll$","slog","initLog","activateType","activateTemplate","CurrentDataService","installPackages","packages","step","switchMap","url","InstallerService","gettingStartedSubject","gettingStarted$","tap","loadGettingStarted","isContentApp","GettingStartedService","installer","sanitizer","remoteInstallerUrl","ready","subscriptions","bypassSecurityTrustResourceUrl","bootController","destroy","sub","unsubscribe","ngOnInit","alreadyProcessing","fromEvent","evt","moduleId","action","values","packagesDisplayNames","displayName","confirm","showProgress","p","currentPackage","top","InstallerComponent","cdRef","showCancel","showAdvanced","showInstaller","tabIndex","isBadContextForInstaller","loading$","preventAppSwich","showDebug","bridge","frameElement","dashInfo","getAdditionalDashboardConfig","boot","debugObservables","autosyncObservablesToEnsureUiUpdates","debug","initDone$","initObservables","initValuesFromBridge","initTrue$","l","typeOrAppReady","_","switchTab","templatesLoading$","skipUntil","previewTemplate","detectChanges","preventTypeSwitch","hasContent","isInnerContent","supportsAjax","user","canDesign","cancel","run","persistTemplate","setTemplate","selectApp","before","after","updateApp","selectContentType","setContentType","selectTemplate","timer","newApp","ajax","SupportsAjaxReload","showMessage","toString","reloadAndReInit","newConfig","TemplatePickerComponent","el","context","preConfigure","sxc","addLangs","setDefaultLang","split","use","frame","hide","AppComponent","$2sxcService","CoreModule","InstallerModule","MATERIAL_MODULES","MaterialModule","TemplatePickerModule","VersionDialogModule","HttpLoaderFactory","loader","AppModule","forRoot","provide","useFactory","deps","platform","destroyed","bootstrapModule","appBootstrap","catch","err"],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","import { Constants } from './constants';\r\nimport { DebugConfig } from 'app/debug-config';\r\n\r\n\r\nexport class Log {\r\n  /** global state to determine if logging to console should be done or not */\r\n  public static forceLogToConsole = false;\r\n\r\n  name = '';\r\n  autoDump = DebugConfig.logger.logToConsole;\r\n  logs = new Array<string>();\r\n  parent: Log;\r\n  loggers: any = new Object();\r\n\r\n  constructor (name?: string, parent?: Log) {\r\n    this.name = name;\r\n    this.parent = parent;\r\n  }\r\n\r\n  add(msg: string, ...args: any[]): void {\r\n    this.logs.push(msg);\r\n    if (this.name) msg = this.name + ':' + msg;\r\n    if (this.parent) this.parent.logs.push(msg);\r\n    if (this.autoDump || Log.forceLogToConsole) {\r\n      arguments[0] = Constants.logName + ': ' + msg;\r\n      console.log.apply(null, arguments);\r\n    }\r\n  }\r\n\r\n  subLog(name: string, autoDump?: boolean): Log {\r\n    const newLog = new Log(name, this);\r\n    this.loggers[name] = newLog;\r\n    newLog.autoDump = typeof(autoDump) === 'boolean'\r\n      ? autoDump : this.autoDump;\r\n    if (DebugConfig.logger.internals)\r\n      this.add(`logger: subLog(${name}, ${autoDump}) resulting in autoDump=${newLog.autoDump}`);\r\n\r\n    return newLog;\r\n  }\r\n\r\n  dump(): void {\r\n    this.add('dumping to console');\r\n    console.log(`Log dump for '${this.name}'`, this);\r\n  }\r\n\r\n  public static configureRuntimeLogging(state: boolean) {\r\n    if(DebugConfig.logger.urlDebugActivatesLive)\r\n      Log.forceLogToConsole = state;\r\n  }\r\n}\r\n\r\n\r\nexport const log = new Log();\r\n\r\nwindow['logger'] = log;\r\n","\r\n/** configuration what to debug directly to the screen and what to keep secret */\r\nexport const DebugConfig = {\r\n\r\n  /** logger configuration */\r\n  logger: {\r\n    /** should we stream messages directly to console */\r\n    logToConsole: false,\r\n    /** should we also log internal events */\r\n    internals: false,\r\n    /** allow url param ?debug=true to turn on logging */\r\n    urlDebugEnablesAll: true,\r\n    /** if url param ?debug=true also enables all live-logging */\r\n    urlDebugActivatesLive: true\r\n  },\r\n\r\n  /** api debugging */\r\n  api: {\r\n    enabled: false,\r\n    streams: false,\r\n  },\r\n\r\n  /** template picker */\r\n  picker: { \r\n    enabled: false,\r\n    streams: false,\r\n    showDebugPanel: false\r\n  },\r\n\r\n  /** template state */\r\n  state: {\r\n    enabled: false,\r\n    streams: false,\r\n    inits: false,\r\n  },\r\n\r\n  /** content-type processor */\r\n  typeProcessor: false,\r\n  /** template processor */\r\n  templateProcessor: false,\r\n};\r\n","import { Subject } from 'rxjs';\r\nimport { log as parentLog } from './log';\r\n\r\nconst log = parentLog.subLog('boot-controller');\r\n/**\r\n * Special reboot controller, to restart the angular app\r\n * when critical parameters were changed\r\n */\r\nexport class BootController {\r\n  private static instance: BootController;\r\n  private _reboot: Subject<boolean> = new Subject();\r\n  rebootRequest$ = this._reboot.asObservable();\r\n\r\n  static getRebootController() {\r\n    log.add('getRebootController()');\r\n    if (!BootController.instance) {\r\n      BootController.instance = new BootController();\r\n    }\r\n    return BootController.instance;\r\n  }\r\n\r\n  public reboot() {\r\n    log.add('restarting...');\r\n    this._reboot.next(true);\r\n  }\r\n}\r\n","\r\nimport {map} from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { /* Response, Headers, RequestOptions, */ HttpClient } from '@angular/common/http';\r\nimport { ReplaySubject ,  Observable } from \"rxjs\";\r\nimport { Version } from \"app/version-dialog/version\";\r\n\r\ndeclare const $2sxc;\r\n\r\n@Injectable()\r\nexport class SxcVersionsService {\r\n  versions: Observable<Version[]>;\r\n  error: Observable<string>;\r\n\r\n  private versionsSubject: ReplaySubject<Version[]>;\r\n  private errorSubject: ReplaySubject<string>;\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) {\r\n    this.versionsSubject = new ReplaySubject<Version[]>(1);\r\n    this.versions = this.versionsSubject.asObservable();\r\n\r\n    this.errorSubject = new ReplaySubject<string>(1);\r\n    this.error = this.errorSubject.asObservable();\r\n\r\n    this.loadVersions();\r\n  }\r\n\r\n  restore(changeId: number): Observable<any> {\r\n    const appId = $2sxc.urlParams.require('appId');\r\n    const item = JSON.parse($2sxc.urlParams.require('items'))[0];\r\n    const url = `eav/entities/restore?appId=${appId}&changeId=${changeId}`;\r\n\r\n    return this.http.post<any>(url, item);\r\n  }\r\n\r\n  private loadVersions(): void {\r\n    const appId = $2sxc.urlParams.require('appId');\r\n    const item = JSON.parse($2sxc.urlParams.require('items'))[0];\r\n    const url = `eav/entities/history?appId=${appId}`;\r\n\r\n    this.http.post<any[]>(url, item).pipe(\r\n      map(res => res//.json()\r\n        .map((v, i, all) => Object.assign(v, {\r\n          Data: (() => {\r\n            let lastVersion = all.find(v2 => v2.VersionNumber === v.VersionNumber - 1);\r\n            const attr = JSON.parse(v.Json).Entity.Attributes;\r\n\r\n            if (lastVersion) {\r\n              lastVersion = JSON.parse(lastVersion.Json).Entity.Attributes;\r\n            }\r\n\r\n            return Object.entries(attr)\r\n              .reduce((t, c) => Array.prototype.concat(t, Object.entries(c[1])\r\n                .map(([key, value]) => ({\r\n                  key,\r\n                  value: Object.entries(value),\r\n                  type: c[0],\r\n                  hasChanged: lastVersion\r\n                    ? JSON.stringify(lastVersion[c[0]][key]) !== JSON.stringify(value)\r\n                    : false\r\n                }))), []);\r\n          })(),\r\n          TimeStamp: (timestamp => {\r\n            const date = new Date(timestamp);\r\n            const y = date.getFullYear();\r\n            const m = date.getUTCMonth() + 1;\r\n            const d = date.getDate();\r\n            const h = date.getHours();\r\n            const min = date.getMinutes();\r\n            return `${y}-${m < 10 ? '0' : ''}${m}-${d < 10 ? '0' : ''}${d} ${h < 10 ? '0' : ''}${h}:${min < 10 ? '0' : ''}${min}`;\r\n          })(v.TimeStamp),\r\n        }))))\r\n      .subscribe(v => this.versionsSubject.next(v), () => {\r\n          this.errorSubject.next('Could not load versions for this item. Please make sure to assign an initial content.');\r\n        });\r\n  }\r\n}\r\n"," <mat-toolbar color=\"primary\">\r\n  <span class=\"title\">{{\"ItemHistory.Title\" | translate}}</span>\r\n  <span class=\"spacer\"></span>\r\n  <button mat-dialog-close mat-icon-button>\r\n    <mat-icon class=\"example-icon\">close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n\r\n<div class=\"table\">\r\n  <div class=\"no-items\" *ngIf=\"sxcVersion.error | async\">{{'ItemHistory.NoHistory' | translate}}</div>\r\n  <div class=\"no-items\" *ngIf=\"(sxcVersion.versions | async)?.length === 0\">{{'ItemHistory.NoHistory' | translate}}</div>\r\n  <div class=\"record\" *ngFor=\"let version of sxcVersion.versions | async\">\r\n    <mat-expansion-panel>\r\n      <mat-expansion-panel-header>\r\n        <mat-panel-title fxFlex=\"108px\">{{\"ItemHistory.Version\" | translate:({version:version.VersionNumber})}}</mat-panel-title>\r\n        <mat-panel-description>{{version.TimeStamp}}</mat-panel-description>\r\n      </mat-expansion-panel-header>\r\n      <div class=\"detail\">\r\n        <div fxLayout=\"row\" [class.changed]=\"data.hasChanged\" *ngFor=\"let data of version.Data\">\r\n          <div fxFlex=\"160px\" class=\"label\">{{data.key}}:</div>\r\n          <div fxFlex [class.expand]=\"data.expand\" class=\"value\" title=\"expand content\" (click)=\"data.expand=!data.expand\">\r\n            <div class=\"lang-wrapper\" *ngFor=\"let val of data.value\">\r\n              <div *ngIf=\"data.value.length > 0\" class=\"lang\">{{val[0]}}</div>\r\n              <div [innerHTML]=\"val[1]\"></div>\r\n            </div>\r\n          </div>\r\n          <div flex=\"nogrow\" *ngIf=\"data.value.length > 1\">\r\n            <i *ngFor=\"let val of data.value\">[{{val[0]}}]&nbsp;</i>\r\n          </div>\r\n          <i flex=\"nogrow\">[{{data.type}}]</i>\r\n        </div>\r\n      </div>\r\n      <mat-action-row>\r\n        <button mat-button (click)=\"restoreLive(version)\">{{'ItemHistory.Buttons.RestoreLive' | translate}}</button>\r\n      </mat-action-row>\r\n    </mat-expansion-panel>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, Input, Inject } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { trigger, style, transition, animate, state } from '@angular/animations';\r\nimport { SxcVersionsService } from 'app/version-dialog/sxc-versions.service';\r\nimport { Version } from 'app/version-dialog/version';\r\n\r\ndeclare const $2sxc;\r\n\r\n@Component({\r\n  selector: 'app-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.scss'],\r\n})\r\nexport class DialogComponent {\r\n  versions: Version[] = [];\r\n  versionParam: any;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    public sxcVersion: SxcVersionsService\r\n  ) { }\r\n\r\n  restoreLive(version: Version) {\r\n    this.sxcVersion.restore(version.ChangeSetId)\r\n      .subscribe(res => res ? window.parent.location.reload() : alert('restore failed miserably'));\r\n  }\r\n\r\n  restoreDraft(version) {\r\n    this.dialog.open(ConfirmRestoreDialog, {\r\n      data: { version, isDraft: true },\r\n    }).afterClosed()\r\n      .subscribe(res => res ? alert('restoring draft') : undefined);\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'confirm-restore-dialog',\r\n  template: `\r\n    <div class=\"content\">\r\n      <div class=\"title\">Restoring {{data.isDraft ? 'draft' : 'live'}} to version <b>{{data.version.ChangeSetId}}</b>.</div>\r\n      <div fxLayout=\"row\">\r\n        <button mat-button [mat-dialog-close]=\"false\">abort</button>\r\n        <span fxFlex></span>\r\n        <button mat-raised-button [mat-dialog-close]=\"true\">proceed</button>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class ConfirmRestoreDialog {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ConfirmRestoreDialog>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) { }\r\n}\r\n","import { BehaviorSubject, Observable } from \"rxjs\";\r\n\r\nexport class BehaviorObservable<T> extends Observable<T> {\r\n  private constructor() {\r\n    super();\r\n  }\r\n  /** The source subject */\r\n  subject: BehaviorSubject<T>;\r\n\r\n  /** will reset back to the initial value */\r\n  reset: () => void;\r\n\r\n  /** check if it's the initial object */\r\n  isInitial: () => boolean;\r\n\r\n  /** the initial object */\r\n  initialValue: T;\r\n\r\n  /** shorthand to push next value */\r\n  next: (value: T) => void;\r\n\r\n  static create<T>(initialValue: T): BehaviorObservable<T> {\r\n    const subj = new BehaviorSubject<T>(initialValue);\r\n    const obs = subj.asObservable() as BehaviorObservable<T>;\r\n    obs.initialValue = initialValue;\r\n    obs.subject = subj;\r\n    obs.reset = () => {\r\n      obs.subject.next(obs.initialValue);\r\n    }\r\n    obs.isInitial = () => {\r\n      return obs.subject.value === obs.initialValue;\r\n    }\r\n    obs.next = (value: T) => obs.subject.next(value);\r\n    return obs;\r\n  }\r\n}","export class App {\r\n    AppId: number;\r\n    Name: string;\r\n    Thumbnail: string;\r\n    SupportsAjaxReload: boolean;\r\n    Version: string;\r\n    VersionMain: number;\r\n\r\n    constructor(json: any) {\r\n        Object.assign(this, json);\r\n\r\n        try {\r\n            this.VersionMain = parseInt(this.Version.substr(0,2));\r\n        } catch(e) { /* ignore */}\r\n    }\r\n\r\n}\r\n","// #region imports\r\nimport { combineLatest } from 'rxjs';\r\nimport { map, startWith, share } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { App } from 'app/core/app';\r\nimport { ContentType } from 'app/template-picker/content-type';\r\nimport { Template } from 'app/template-picker/template';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { Constants } from 'app/core/constants';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\n// #endregion\r\n\r\ndeclare const $2sxc;\r\nconst log = parentLog.subLog('api', DebugConfig.api.enabled);\r\nconst uninitializedList = []; // this must be created as a variable, so we can check later if it's still the original or a new empty list\r\n@Injectable()\r\nexport class PickerService {\r\n  // #region public properties\r\n  /** all apps of the zone */\r\n  apps$ = BehaviorObservable.create<App[]>(uninitializedList);\r\n\r\n  /** all types of this app */\r\n  contentTypes$ = BehaviorObservable.create<ContentType[]>(uninitializedList);\r\n\r\n  /** templates/views of this app */\r\n  templates$ = BehaviorObservable.create<Template[]>(uninitializedList);\r\n\r\n  /**\r\n   * ready is true when all necessary data is loaded\r\n   * note that apps are not loaded if not needed */\r\n  ready$ = new Observable<boolean>();\r\n  // #endregion\r\n\r\n  // #region private properties\r\n  private mustLoadApps = false;\r\n  // all the subjects - these are all multi-cast, so don't use share!\r\n  // #endregion\r\n\r\n  constructor(private http: HttpClient) {\r\n    log.add('constructor()');\r\n    this.buildObservables();\r\n    this.enableLogging();\r\n  }\r\n\r\n  private buildObservables() {\r\n    log.add(`buildObservables()`);\r\n\r\n    // ready requires all to have data, but app can be skipped if not required\r\n    this.ready$ = combineLatest(this.apps$, this.contentTypes$, this.templates$,\r\n      (a, ct, t) => ({ apps: a, types: ct, templates: t }))\r\n      .pipe(\r\n        map(set => set.templates !== uninitializedList\r\n          && set.types !== uninitializedList\r\n          && (!this.mustLoadApps || !!(set.apps && set.apps !== uninitializedList))),\r\n        startWith(false),\r\n        share());\r\n  }\r\n\r\n  public saveAppId(appId: string, reloadParts: boolean): Promise<any> {\r\n    log.add(`saveAppId(${appId}, ${reloadParts})`);\r\n    // skip doing anything here, if we're in content-mode (which doesn't use/change apps)\r\n    if (!this.loadApps) throw \"can't save app, as we're not in app-mode\";\r\n    return this.http.get(`${Constants.apiRoot}SetAppId?appId=${appId}`).toPromise();\r\n  }\r\n\r\n\r\n\r\n  public initLoading(requireApps: boolean): Observable<any> {\r\n    log.add(`initLoading(requireApps: ${requireApps})`);\r\n    this.mustLoadApps = requireApps;\r\n    if (requireApps) this.loadApps();\r\n    return this.reloadAppParts();\r\n  }\r\n\r\n  public reloadAppParts(): Observable<any> {\r\n    return combineLatest(\r\n      this.loadTemplates(),\r\n      this.loadContentTypes());\r\n  }\r\n\r\n  /**\r\n   * load templates - is sometimes repeated if the app changes\r\n   */\r\n  public loadTemplates(): Observable<any> {\r\n    log.add('loadTemplates()');\r\n    this.templates$.reset();\r\n    const obs = this.http.get<Template[]>(`${Constants.apiRoot}GetSelectableTemplates`)\r\n      .pipe(share(), /* ensure it's only run once */ );\r\n\r\n    obs.subscribe(response => this.templates$.next(response/*.json()*/ || []));\r\n    return obs;\r\n  }\r\n\r\n  /**\r\n   * Load the ContentTypes - only needed on first initialization\r\n   */\r\n  private loadContentTypes(): Observable<any> {\r\n    log.add(`loadContentTypes()`);\r\n    this.contentTypes$.reset();\r\n    const obs = this.http.get<any[]>(`${Constants.apiRoot}GetSelectableContentTypes`)\r\n      .pipe(share(), /* ensure it's only run once */ );\r\n    obs.pipe(map(response => (response/*.json*/ || []).map(x => {\r\n        x.Label = (x.Metadata && x.Metadata.Label)\r\n          ? x.Metadata.Label\r\n          : x.Name;\r\n        return x;\r\n      })))\r\n      .subscribe(json => this.contentTypes$.next(json));\r\n    return obs;\r\n  }\r\n\r\n  /**\r\n   * Load all Apps, only needed on first initialization\r\n   */\r\n  private loadApps(): Observable<any> {\r\n    const alreadyLoaded = !this.apps$.isInitial();\r\n    log.add(`loadApps() - skip:${alreadyLoaded}`);\r\n    if (alreadyLoaded) return;\r\n\r\n    const appsFilter = $2sxc.urlParams.get('apps');\r\n\r\n    const obs = this.http.get<any[]>(`${Constants.apiRoot}GetSelectableApps?apps=${appsFilter}`)\r\n      .pipe(share(), /* ensure it's only run once */ );\r\n\r\n    obs.subscribe(response => this.apps$.subject.next(response.map(a => new App(a))));\r\n    return obs;\r\n  }\r\n\r\n  // private pascalCaseToLower(obj): any {\r\n  //   return Object.keys(obj)\r\n  //     .reduce((t, v) => {\r\n  //       t[v.split('').reduce((prev, current, i) => prev + (i === 0 ? current.toLowerCase() : current), '')] = obj[v];\r\n  //       return t;\r\n  //     }, {});\r\n  // }\r\n\r\n\r\n  private enableLogging() {\r\n    const streamLog = parentLog.subLog('api-streams', DebugConfig.api.streams);\r\n    this.apps$.subscribe(a => streamLog.add(`app$:${a && a.length}`));\r\n    this.contentTypes$.subscribe(ct => streamLog.add(`contentTypes$:${ct && ct.length}`));\r\n    this.templates$.subscribe(t => streamLog.add(`templates$:${t && t.length}`));\r\n    this.ready$.subscribe(r => streamLog.add(`ready$:${r}`));\r\n  }\r\n\r\n}\r\n","import { ContentType } from '../content-type';\r\nimport { cViewWithoutContent, i18nTemplatePicker } from '../constants';\r\nimport { Template } from '../template';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\n\r\n// const debug = true;\r\nconst log = parentLog.subLog('ct-processor', DebugConfig.typeProcessor);\r\n\r\n/**\r\n * This is a helper to do various transformations for the list of content-types\r\n */\r\n@Injectable()\r\nexport class ContentTypesProcessor {\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  public buildList(allTypes: ContentType[], type: ContentType, allTemplates: Template[], template: Template): ContentType[] {\r\n    log.add('buildList(...) of content-types to show');\r\n    let unhide = this.unhideSelectedType(allTypes, type, template);\r\n    unhide = this.addEmptyTypeIfNeeded(unhide, allTemplates);\r\n    // unhide = this.hideTypesWithoutTemplates(unhide, allTemplates);\r\n    let filtered = this.hideNecessaryTypes(unhide);\r\n    return this.sortTypes(filtered);\r\n  }\r\n\r\n  private hideNecessaryTypes(types: ContentType[]): ContentType[] {\r\n    return types.filter(t => !t.IsHidden);\r\n  }\r\n\r\n  // 2018-11-05 trying to fix https://github.com/2sic/2sxc/issues/1614\r\n  // but it appears that this is actually not an issue...unclear why it's posted.\r\n  // private hideTypesWithoutTemplates(types: ContentType[], templates: Template[]): ContentType[] {\r\n  //   types.filter(c => templates.find(t => t.ContentTypeStaticName == c.StaticName))\r\n  //     .forEach(c => c.IsHidden = true);\r\n  //   return types;\r\n  // }\r\n\r\n  /**\r\n   * Ensure current content-type is visible, just in case it's configured as hidden\r\n   */\r\n  private unhideSelectedType(contentTypes: ContentType[], currentType: ContentType, currentTemplate: Template): ContentType[] {\r\n    contentTypes.filter(\r\n      c => (currentTemplate && currentTemplate.TemplateId === c.TemplateId)\r\n        || (currentType && c.StaticName === currentType.StaticName))\r\n      .forEach(c => c.IsHidden = false);\r\n    return contentTypes;\r\n  }\r\n\r\n\r\n  /**\r\n   * add an empty content-type for UI selection if any template would support \"no content-type\"\r\n   */\r\n  private addEmptyTypeIfNeeded(contentTypes: ContentType[], templates: Template[]): ContentType[] {\r\n    const layoutElementLabel = (this.translate && this.translate.instant(i18nTemplatePicker))\r\n      || cViewWithoutContent; // if translate is not ready, use the nicer label\r\n\r\n    // add option for empty content type\r\n    if (templates && templates.find(t => t.ContentTypeStaticName === '')) {\r\n      contentTypes = contentTypes.slice(); // copy it first to not change original\r\n      contentTypes.push({\r\n        StaticName: cViewWithoutContent,\r\n        Name: i18nTemplatePicker,\r\n        Thumbnail: null,\r\n        Label: layoutElementLabel,\r\n        IsHidden: false,\r\n      } as ContentType);\r\n    }\r\n    return contentTypes;\r\n  }\r\n\r\n  /**\r\n   * Sort the types by label\r\n   */\r\n  private sortTypes(contentTypes: ContentType[]): ContentType[] {\r\n    // https://stackoverflow.com/questions/51165/how-to-sort-strings-in-javascript\r\n    return contentTypes.sort((a, b) => ('' + a.Label).localeCompare(b.Label));\r\n  }\r\n\r\n\r\n  // tslint:disable-next-line:member-ordering\r\n  static findContentTypesById(contentTypes: ContentType[], selectedContentTypeId: string): ContentType {\r\n    log.add(`findContentTypesById(..., ${selectedContentTypeId}`);\r\n    return selectedContentTypeId\r\n      ? contentTypes.find(c => c.StaticName === selectedContentTypeId)\r\n      : null;\r\n  }\r\n\r\n}\r\n\r\n","export const cViewWithoutContent = '_LayoutElement';\r\nexport const cAppActionImport: number = -1;\r\nexport const i18nTemplatePicker = 'TemplatePicker.LayoutElement';","import { Template } from '../template';\r\nimport { ContentType } from '../content-type';\r\nimport { App } from 'app/core/app';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\n\r\nconst log = parentLog.subLog('TemplateProcessor', DebugConfig.templateProcessor);\r\n\r\nexport class TemplateProcessor {\r\n  static pickSelected(selected: Template, templates: Template[], type: ContentType, app: App): Template {\r\n    log.add(`pickSelected(selected: ${selected && selected.TemplateId}, templates: ${templates.length})`)\r\n    // if one is selected, return that; but only if it's in the list of possible templates\r\n    if (selected && templates.find(t => t.TemplateId === selected.TemplateId))\r\n        return selected;\r\n\r\n    // if none is selected, return the first; assuming a type or app has been selected\r\n    if ((type || app) && templates && templates.length) return templates[0];\r\n\r\n    // nothing valid\r\n    return null;\r\n  }\r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { cViewWithoutContent } from './constants';\r\nimport { Template } from './template';\r\nimport { ContentType } from './content-type';\r\n\r\n@Pipe({\r\n  name: 'templateFilter'\r\n})\r\nexport class TemplateFilterPipe implements PipeTransform {\r\n\r\n\r\n  transform(templates: Template[], args: TransformParams): Template[] {\r\n\r\n    const typeId = args.contentType ? args.contentType.StaticName : undefined;\r\n\r\n    // in case we're filtering for the special \"empty\" code, use empty in the filter\r\n    const typeNameFilter = typeId === cViewWithoutContent\r\n      ? ''\r\n      : (typeId || '');\r\n\r\n    return templates\r\n      .filter(t => !t.IsHidden)\r\n      .filter(t => !args.isContent || t.ContentTypeStaticName === typeNameFilter);\r\n  }\r\n}\r\n\r\nclass TransformParams {\r\n  constructor(\r\n    public isContent: boolean,\r\n    // public typeId: string,\r\n    public contentType: ContentType\r\n  ) { }\r\n}\r\n","\r\n// #region imports\r\nimport { scan, debounceTime, share, startWith, map, filter } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable as O, combineLatest, merge } from 'rxjs';\r\n\r\nimport { App } from 'app/core/app';\r\nimport { PickerService } from './picker.service';\r\nimport { IQuickDialogConfig } from 'app/interfaces-shared/iquick-dialog-config';\r\nimport { Template } from './template';\r\nimport { ContentType } from './content-type';\r\nimport { TemplateFilterPipe } from './template-filter.pipe';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { ContentTypesProcessor } from './data/content-types-processor.service';\r\nimport { TemplateProcessor } from './data/template-processor';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\n// #endregion\r\n\r\nconst log = parentLog.subLog('state', DebugConfig.state.enabled);\r\n\r\n@Injectable()\r\nexport class CurrentDataService {\r\n  /** Currently selected app */\r\n  app$: O<App>;\r\n\r\n  /** Relevant types */\r\n  types$: O<ContentType[]>;\r\n\r\n  /** The currently selected type */\r\n  type$: O<ContentType>;\r\n\r\n  /** Stream containing the currently selected template or null if not selected */\r\n  template$: O<Template>;\r\n\r\n  /** all templates relevant for the UI */\r\n  templates$: O<Template[]>;\r\n\r\n  private appId$ = BehaviorObservable.create<number>(null);\r\n  private initialTypeId$ = BehaviorObservable.create<string>(null);\r\n  private initialTemplateId$ = BehaviorObservable.create<number>(null);\r\n  private selectedType$ = BehaviorObservable.create<ContentType>(null);\r\n  private selectedTemplate$ = BehaviorObservable.create<Template>(null);\r\n\r\n\r\n  private config: IQuickDialogConfig;\r\n\r\n  constructor(\r\n    private api: PickerService,\r\n    private templateFilter: TemplateFilterPipe,\r\n    private ctProcessor: ContentTypesProcessor\r\n  ) {\r\n    this.buildBasicObservables();\r\n  }\r\n\r\n  private buildBasicObservables() {\r\n    // app-stream should contain selected app, once the ID is known - or null\r\n    this.app$ = combineLatest(\r\n      this.api.apps$,\r\n      this.appId$,\r\n      (apps, appId) => apps.find(a => a.AppId === appId));\r\n\r\n    // current type should be either the initial type, or a manually selected type\r\n    const initialType$ = combineLatest(\r\n      this.initialTypeId$,\r\n      this.api.contentTypes$,\r\n      (typeId, all) => ContentTypesProcessor.findContentTypesById(all, typeId));\r\n    this.type$ = merge(initialType$, this.selectedType$).pipe(\r\n      startWith(null),\r\n      share());\r\n\r\n    // the templates-list is always filtered by the currently selected type\r\n    this.templates$ = combineLatest(\r\n      this.api.templates$,\r\n      this.type$,\r\n      (all, current) => this.findTemplatesForTypeOrAll(all, current))\r\n      .pipe(startWith(new Array<Template>()));\r\n\r\n    // the current template is either the last selected, or auto-selected when conditions change\r\n    const initialTemplate$ = combineLatest(\r\n      this.initialTemplateId$,\r\n      this.api.templates$, //.pipe(first()),\r\n      (id, templates) => templates.find(t => t.TemplateId === id)).pipe(\r\n        filter(t => t != null), // only allow new values which are not null, to guarantee later template$ updates don't affect this\r\n        startWith(null),\r\n        share());\r\n\r\n    const selected$ = merge(initialTemplate$, this.selectedTemplate$.pipe(filter(t => t !== null)));\r\n    this.template$ = combineLatest(\r\n      selected$,\r\n      this.templates$,\r\n      this.type$,\r\n      this.app$,\r\n      (selected, templates, type, app) => TemplateProcessor.pickSelected(selected, templates, type, app))\r\n      .pipe(\r\n        startWith(null),\r\n        share());\r\n\r\n    // construct list of relevant types for the UI\r\n    this.types$ = combineLatest(\r\n      this.api.contentTypes$,\r\n      this.type$,\r\n      this.api.templates$,\r\n      this.template$,\r\n      (types, type, templates, template) => this.ctProcessor.buildList(types, type, templates, template));\r\n  }\r\n\r\n  init(config: IQuickDialogConfig): O<boolean> {\r\n    this.config = config;\r\n    // app-init is ready, if it has an app or doesn't need to init one\r\n    log.add(`initializing with config:${JSON.stringify(config)}`, config);\r\n    const appReady$ = this.app$.pipe(\r\n      map(a => config.isContent || !!a),\r\n      startWith(config.isContent || !config.appId));\r\n\r\n    const typeReady$ = this.type$.pipe(\r\n      map(t => !!t),\r\n      scan((acc, value) => acc || value, !config.contentTypeId));\r\n    const templReady$ = this.template$.pipe(\r\n      map(t => !!t),\r\n      debounceTime(100), // need to debounce, because the template might have a value and change again\r\n      startWith(!config.templateId));\r\n\r\n    const loadAll$ = combineLatest(appReady$, templReady$, typeReady$)\r\n      .pipe(map(set => set[0] && set[1] && set[2]));\r\n\r\n    this.initLogging(appReady$, typeReady$, templReady$, loadAll$);\r\n\r\n    // automatically set the app, type and template\r\n    this.activateCurrentApp(config.appId);\r\n    this.initialTypeId$.next(config.contentTypeId);\r\n    this.initialTemplateId$.next(config.templateId);\r\n\r\n    return loadAll$;\r\n  }\r\n\r\n  private initLogging(inita$: O<boolean>,\r\n    inittyp$: O<boolean>,\r\n    initt$: O<boolean>,\r\n    initAll$: O<boolean>): void {\r\n    const slog = log.subLog('stream', DebugConfig.state.streams);\r\n    this.type$.subscribe(t => slog.add(`type$ update:'${t && t.Label}'`, t));\r\n    this.app$.subscribe(a => slog.add(`app$ update:'${a && a.AppId}'`, a));\r\n    this.template$.subscribe(t => slog.add(`template$ update:'${t && t.TemplateId}'`, t));\r\n    this.templates$.subscribe(t => slog.add(`templates$ count:'${t && t.length}'`, t));\r\n    this.types$.subscribe(t => slog.add(`types$ count:'${t && t.length}'`, t));\r\n    this.selectedTemplate$.subscribe(t => slog.add(`selectedTemplate$: ${t && t.TemplateId}`));\r\n\r\n    const initLog = log.subLog('stream-init', DebugConfig.state.inits);\r\n    this.initialTypeId$.subscribe(t => initLog.add(`initial TypeId:'${t}'`, t));\r\n    this.initialTemplateId$.subscribe(t => initLog.add(`initial TemplateId:'${t}'`, t));\r\n    inita$.subscribe(t => initLog.add(`init app$`, t));\r\n    inittyp$.subscribe(t => initLog.add(`init type$`, t));\r\n    initt$.subscribe(t => initLog.add(`init temp$`, t));\r\n    initAll$.subscribe(t => initLog.add(`init all$`, t));\r\n  }\r\n\r\n\r\n\r\n  //#region activate calls from outside\r\n  activateCurrentApp(appId: number) {\r\n    log.add(`activateApp(${appId})`);\r\n    this.appId$.next(appId);\r\n  }\r\n  activateType(contentType: ContentType) {\r\n    log.add(`activateType(${contentType.Name})`);\r\n    this.selectedType$.next(contentType);\r\n  }\r\n  activateTemplate(template: Template) {\r\n    log.add(`activateTemplate(${template.TemplateId})`);\r\n    this.selectedTemplate$.next(template);\r\n  }\r\n  //#endregion\r\n\r\n  private findTemplatesForTypeOrAll(allTemplates: Template[], contentType: ContentType): Template[] {\r\n    return this.templateFilter.transform(allTemplates, { contentType, isContent: this.config.isContent });\r\n  }\r\n\r\n}\r\n","\r\nimport {of as observableOf } from 'rxjs';\r\n\r\nimport {switchMap} from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n\r\n@Injectable()\r\nexport class InstallerService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  installPackages(packages: any[], step: Function): Observable<any> {\r\n    return packages.reduce((t: Observable<Response>, c) => t.pipe(\r\n        switchMap(() => {\r\n          if (!c.url) return observableOf(true);\r\n          step(c);\r\n          return <Observable<any>>this.http.get(`app-sys/installer/installpackage?packageUrl=${c.url}`);\r\n        })), observableOf(true));\r\n  }\r\n}\r\n","\r\nimport { startWith, map, tap } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\n// import { Observable } from 'rxjs/Rx';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { log } from 'app/core/log';\r\nimport { Constants } from 'app/core/constants';\r\n\r\n\r\n@Injectable()\r\nexport class GettingStartedService {\r\n  gettingStarted$: Observable<string>;\r\n  ready$ = new Observable<boolean>();\r\n\r\n  private gettingStartedSubject: Subject<string> = new Subject<string>();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.gettingStarted$ = this.gettingStartedSubject.asObservable();\r\n    this.ready$ = this.gettingStarted$.pipe(\r\n      map(() => true),\r\n      startWith(false));\r\n\r\n    this.ready$.pipe(tap(r => log.add(`ready getting started:${r}`))).subscribe();\r\n  }\r\n\r\n  public loadGettingStarted(isContentApp: boolean): void {\r\n    this.http.get<string>(`${Constants.apiRoot}RemoteInstallDialogUrl?dialog=gettingstarted&isContentApp=${isContentApp}`)\r\n      // .pipe(map(response => response.json()))\r\n      .subscribe(json => this.gettingStartedSubject.next(json));\r\n  }\r\n\r\n}\r\n","<div class=\"progress\" *ngIf=\"showProgress\">\r\n  <mat-progress-spinner [mode]=\"'indeterminate'\"></mat-progress-spinner>\r\n  <span>Installing {{ currentPackage?.displayName }}..</span>\r\n</div>\r\n<div *ngIf=\"ready\">\r\n  <iframe class=\"fr-getting-started\" id=\"frGettingStarted\" [src]=\"remoteInstallerUrl\" width=\"100%\" height=\"300px\"></iframe>\r\n</div>\r\n","\r\nimport { tap, switchMap, map, filter, debounceTime } from 'rxjs/operators';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\nimport { InstallerService } from 'app/installer/installer.service';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport { GettingStartedService } from './getting-started.service';\r\n\r\ndeclare const $2sxc: any;\r\n// declare const window: Window;\r\n\r\n@Component({\r\n  selector: 'app-installer',\r\n  templateUrl: './installer.component.html',\r\n  styleUrls: ['./installer.component.scss']\r\n})\r\nexport class InstallerComponent implements OnInit {\r\n  @Input() isContentApp: boolean;\r\n\r\n  showProgress: boolean;\r\n  currentPackage: any;\r\n  remoteInstallerUrl = '';\r\n  ready = false;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    private installer: InstallerService,\r\n    private api: GettingStartedService,\r\n    private sanitizer: DomSanitizer,\r\n  ) {\r\n    this.subscriptions.push(\r\n      this.api.gettingStarted$.subscribe(url => {\r\n        this.remoteInstallerUrl = <string>this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n        this.ready = true;\r\n      }));\r\n\r\n    // bootController.watchReboot()\r\n    window.bootController.rebootRequest$.pipe(\r\n      debounceTime(1000))\r\n      .subscribe(() => this.destroy());\r\n  }\r\n\r\n  destroy(): void {\r\n    this.subscriptions\r\n      .forEach(sub => sub.unsubscribe());\r\n    console.log('destroy subs', this.subscriptions);\r\n  }\r\n\r\n  ngOnInit() {\r\n    let alreadyProcessing = false;\r\n    this.api.loadGettingStarted(this.isContentApp);\r\n\r\n    this.subscriptions.push(fromEvent(window, 'message').pipe(\r\n\r\n      // Ensure only one installation is processed.\r\n      filter(() => !alreadyProcessing),\r\n\r\n      // Get data from event.\r\n      map((evt: MessageEvent) => {\r\n        try {\r\n          return JSON.parse(evt.data);\r\n        } catch (e) {\r\n          return void 0;\r\n        }\r\n      }),\r\n\r\n      // Check if data is correct.\r\n      filter(data => data\r\n        && ~~data.moduleId === ~~$2sxc.urlParams.require('mid')\r\n        && data.action === 'install'),\r\n\r\n      // Get packages from data.\r\n      map(data => Object.values(data.packages)),\r\n\r\n      // Show confirm dialog.\r\n      filter(packages => {\r\n        const packagesDisplayNames = packages\r\n          .reduce((t, c) => `${t} - ${(c as any).displayName}\\n`, '');\r\n\r\n        const msg = `Do you want to install these packages?\r\n\r\n${packagesDisplayNames}\r\nThis takes 10 to 30 seconds per package. Don't reload the page while it's installing.`;\r\n        return confirm(msg);\r\n      }),\r\n\r\n      switchMap(packages => {\r\n        alreadyProcessing = true;\r\n        this.showProgress = true;\r\n        return this.installer.installPackages(packages, p => this.currentPackage = p);\r\n      }),\r\n\r\n      tap(() => {\r\n        this.showProgress = false;\r\n        alert('Installation complete. If you saw no errors, everything worked.');\r\n        window.top.location.reload();\r\n      }))\r\n\r\n      .subscribe(null, () => {\r\n        this.showProgress = false;\r\n        alert('An error occurred.');\r\n        alreadyProcessing = false;\r\n      }));\r\n  }\r\n}\r\n","\r\n<div class=\"content\">\r\n\r\n  <!-- debug info section -->\r\n  <div *ngIf=\"showDebug\">\r\n    <h4>Debug</h4>\r\n    <ul>\r\n      <li>Types: {{ types?.length }}, current: {{contentType?.StaticName}}</li>\r\n      <li>Apps: {{ (apps$ | async)?.length }}, current: {{app?.AppId }} </li>\r\n      <li>Templates: {{templates?.length}}, current: {{template?.TemplateId}}</li>\r\n      <li>Config: isContent='{{isContent}}' Ready: {{ready}} </li>\r\n      <li>Tab to show: '{{tabIndex}}' / preventTypeSwitch '{{preventTypeSwitch}}' / preventAppSwitch '{{preventAppSwich}}'</li>\r\n    </ul>\r\n  </div>\r\n\r\n  <!-- loading indicator -->\r\n  <mat-progress-bar [ngStyle]=\"{ opacity: ready ? 0 : 1 }\" [mode]=\"'indeterminate'\"></mat-progress-bar>\r\n\r\n  <!-- main dialog, starting with save/cancel button -->\r\n  <div class=\"card\"\r\n    [ngClass]=\"{ blocked: !ready }\"\r\n  >\r\n    <div class=\"top-controls\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n      <button mat-fab *ngIf=\"template\" (click)=\"persistTemplate(template)\" [attr.title]=\"'TemplatePicker.Save' | translate\">\r\n        <mat-icon>check</mat-icon>\r\n      </button>\r\n      <button mat-mini-fab class=\"secondary\" *ngIf=\"showCancel\" (click)=\"cancel()\" [attr.title]=\"('TemplatePicker.' + (isContent ? 'Cancel' : 'Close')) | translate\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- tabs -->\r\n    <mat-tab-group [(selectedIndex)]=\"tabIndex\">\r\n      <mat-tab>\r\n        <ng-template mat-tab-label>\r\n          {{(isContent \r\n            ? (contentType?.Name || ('TemplatePicker.ContentTypePickerDefault' | translate)) \r\n            : (app?.Name || ('TemplatePicker.AppPickerDefault' | translate)))}}\r\n        </ng-template>\r\n\r\n        <!-- App Selector -->\r\n        <div *ngIf=\"!isContent; else contentApp\" class=\"tiles\">\r\n\r\n          <div class=\"tile\" \r\n            [ngClass]=\"{ active: app?.AppId === a.AppId, blocked: preventTypeSwitch }\" \r\n            [attr.title]=\"a.Name\" \r\n            (click)=\"selectApp(app, a)\"\r\n            (dblclick)=\"switchTab()\" *ngFor=\"let a of apps$ | async\">\r\n            <div class=\"bg\">\r\n              <img *ngIf=\"a.Thumbnail !== null && a.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"a.Thumbnail + '?w=176&h=176'\">\r\n              <div *ngIf=\"a.Thumbnail === null || a.Thumbnail === ''\" class=\"bg-icon\">\r\n                <mat-icon>star</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"version\"><span>v{{a.VersionMain}}</span></div>\r\n\r\n            <div class=\"title\" [ngClass]=\"{ show: a.Thumbnail === null || a.Thumbnail === '' }\">\r\n              <span>{{a.Name}}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- install and manage buttons -->\r\n          <div class=\"tile config\" *ngIf=\"showAdvanced\" (click)=\"run('app-import')\" [attr.title]=\"'TemplatePicker.Install' | translate\">\r\n            <div class=\"bg\">\r\n              <div class=\"bg-icon\">\r\n                <mat-icon>get_app</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title show\">\r\n              <span>{{\"TemplatePicker.Install\" | translate}}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"tile config\" *ngIf=\"showAdvanced\" (click)=\"run('zone')\" [attr.title]=\"'TemplatePicker.Zone' | translate\">\r\n            <div class=\"bg\">\r\n              <div class=\"bg-icon\">\r\n                <mat-icon>apps</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title show\">\r\n              <span>{{\"TemplatePicker.Zone\" | translate}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Content-Type selection (when not a generic app, but the default content-app -->\r\n        <ng-template #contentApp>\r\n          <div class=\"tiles\">\r\n            <div mat-button class=\"tile\" \r\n              [ngClass]=\"{ active: contentType?.StaticName === c.StaticName, blocked: preventTypeSwitch }\"\r\n              [attr.title]=\"(c.Label | translate) + (showDebug ? ' (' + c.StaticName + ')' : '')\" \r\n              (click)=\"selectContentType(contentType, c)\"\r\n              (dblclick)=\"switchTab()\" \r\n              *ngFor=\"let c of types\"\r\n            >\r\n              <div class=\"bg\">\r\n                <img *ngIf=\"c.Thumbnail !== null && c.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"c.Thumbnail + '?w=176&h=176'\">\r\n                <div *ngIf=\"c.Thumbnail === null || c.Thumbnail === ''\" class=\"bg-icon\">\r\n                  <mat-icon>bubble_chart</mat-icon>\r\n                </div>\r\n              </div>\r\n              <div class=\"title\" [ngClass]=\"{ show: c.Thumbnail === null || c.Thumbnail === '' }\">\r\n                <span>{{c.Label}}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </mat-tab>\r\n\r\n      <!-- template selection after app/content-type selection -->\r\n      <mat-tab *ngIf=\"isContent ? contentType : app\" [label]=\"('TemplatePicker.ChangeView' | translate) + '(' + templates.length + ')'\">\r\n        <div class=\"tiles\">\r\n          <mat-spinner class=\"templates-spinner\" *ngIf=\"templatesLoading$ | async\"></mat-spinner>\r\n          <div class=\"tile\" \r\n            [ngClass]=\"{ active: template?.TemplateId === t.TemplateId }\" \r\n            [attr.title]=\"t.Name + (showDebug ? ' (' + t.TemplateId + ')' : '')\" \r\n            (click)=\"selectTemplate(t)\"\r\n            *ngFor=\"let t of templates\">\r\n            <div class=\"bg\">\r\n              <img *ngIf=\"t.Thumbnail !== null && t.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"t.Thumbnail + '?w=176&h=176'\">\r\n              <div *ngIf=\"t.Thumbnail === null || t.Thumbnail === ''\" class=\"bg-icon\">\r\n                <mat-icon *ngIf=\"isContent\">view_carousel</mat-icon>\r\n                <mat-icon *ngIf=\"!isContent\">view_quilt</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title\" [ngClass]=\"{ show: t.Thumbnail === null || t.Thumbnail === '' }\">\r\n              <span>{{t.Name}}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"tile config\" *ngIf=\"showAdvanced && !isContent && app?.AppId !== null\" (click)=\"run('app')\" [attr.title]=\"'TemplatePicker.App' | translate\">\r\n            <div class=\"bg\">\r\n              <div class=\"bg-icon\">\r\n                <mat-icon>settings</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title show\">\r\n              <span>{{\"TemplatePicker.App\" | translate}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n\r\n    <span class=\"no-install-allowed\" *ngIf=\"isBadContextForInstaller && showInstaller\">No {{isContent ? 'Content Apps' : 'Apps'}} installed yet. Please persue the installation by creating a new {{isContent ? 'Content' : 'App'}} in the root of your website.</span>\r\n    <app-installer *ngIf=\"!isBadContextForInstaller && showInstaller\" [isContentApp]=\"isContent\"></app-installer>\r\n  </div>\r\n</div>\r\n","\r\nimport {merge, combineLatest,  timer } from 'rxjs';\r\n\r\nimport {filter, startWith, skipUntil} from 'rxjs/operators';\r\n//#region imports\r\nimport { Component, ChangeDetectorRef, OnInit } from '@angular/core';\r\nimport { IDialogFrameElement } from 'app/interfaces-shared/idialog-frame-element';\r\nimport { Observable } from 'rxjs';\r\nimport { App } from 'app/core/app';\r\nimport { Template } from 'app/template-picker/template';\r\nimport { ContentType } from 'app/template-picker/content-type';\r\nimport { IIFrameBridge } from 'app/interfaces-shared/iiframe-bridge';\r\nimport { IQuickDialogConfig } from 'app/interfaces-shared/iquick-dialog-config';\r\nimport { cAppActionImport } from './constants';\r\nimport { log as parentLog, Log } from 'app/core/log';\r\nimport { PickerService } from './picker.service';\r\nimport { CurrentDataService } from './current-data.service';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\n\r\n//#endregion\r\n\r\nconst log = parentLog.subLog('picker', DebugConfig.picker.enabled);\r\n\r\n@Component({\r\n  selector: 'app-template-picker',\r\n  templateUrl: './template-picker.component.html',\r\n  styleUrls: ['./template-picker.component.scss'],\r\n})\r\nexport class TemplatePickerComponent implements OnInit {\r\n  // #region properties\r\n  /** Stream of all apps */\r\n  apps$: Observable<App[]>;\r\n\r\n  /** is cancelling possible */\r\n  showCancel = true;\r\n\r\n  /** is in the main content-app or a generic app */\r\n  isContent: boolean;\r\n\r\n  /** show advanced features (admin/host only) */\r\n  showAdvanced = false;\r\n\r\n  /** show the installer */\r\n  showInstaller = false;\r\n\r\n  /** Stream to indicate ready, for loading-indicator */\r\n  ready$: Observable<boolean>;\r\n  templatesLoading$: Observable<boolean>;\r\n\r\n  /** Tab-id, when we set it, the tab switches */\r\n  tabIndex = 0;\r\n\r\n  /** Indicate if the user is allowed to change content-types or not */\r\n  preventTypeSwitch: boolean;\r\n\r\n  /** Indicates whether the installer can be shown in this dialog or not */\r\n  isBadContextForInstaller = false;\r\n\r\n  /** The communication-object to the parent */\r\n  private bridge: IIFrameBridge;\r\n\r\n  /** internal loading state */\r\n  private loading$ = BehaviorObservable.create<boolean>(false);\r\n\r\n  /** Ajax-support changes how saving/changing is handled */\r\n  private supportsAjax: boolean;\r\n\r\n  private preventAppSwich = false;\r\n\r\n  public showDebug = DebugConfig.picker.showDebugPanel;\r\n  // #endregion\r\n\r\n  // #region data to show - using local variables, because streams didn't update correctly :(\r\n  app: App;\r\n  templates: Template[];\r\n  template: Template;\r\n  contentType: ContentType;\r\n  types: ContentType[];\r\n  ready = false;\r\n  //#endregion\r\n\r\n  constructor(\r\n    private api: PickerService,\r\n    public state: CurrentDataService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {\r\n    // get configuration from iframe-bridge and set everything\r\n    this.bridge = (<IDialogFrameElement>window.frameElement).bridge;\r\n    const dashInfo = this.bridge.getAdditionalDashboardConfig();\r\n\r\n    this.boot(dashInfo);\r\n    this.debugObservables();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.autosyncObservablesToEnsureUiUpdates();\r\n  }\r\n\r\n\r\n  private boot(dashInfo: IQuickDialogConfig) {\r\n    this.showDebug = dashInfo.debug;\r\n    Log.configureRuntimeLogging(dashInfo.debug);\r\n\r\n    // start data-loading\r\n    this.api.initLoading(!dashInfo.isContent);\r\n\r\n    // init parts, variables, observables\r\n    const initDone$ = this.state.init(dashInfo);\r\n    this.initObservables(initDone$);\r\n    this.initValuesFromBridge(dashInfo);\r\n    this.loading$.next(false);\r\n  }\r\n\r\n  private debugObservables() {\r\n    if (!DebugConfig.picker.streams) return;\r\n    this.loading$.subscribe(l => log.add(`loading$:${l}`));\r\n    this.ready$.subscribe(r => log.add(`ready$:${r}`));\r\n  }\r\n\r\n  /**\r\n   * wire up observables for this component\r\n   */\r\n  private initObservables(initDone$: Observable<boolean>): void {\r\n    const initTrue$ = initDone$.pipe(filter(t => !!t));\r\n\r\n    // wire up basic observables\r\n    this.ready$ = combineLatest(\r\n      this.api.ready$,\r\n      this.loading$,\r\n      (r, l) => r && !l);\r\n\r\n    // all apps are the same as provided by the api\r\n    this.apps$ = this.api.apps$;\r\n\r\n    // if the content-type or app is set, switch tabs (ignore null/empty states)\r\n    const typeOrAppReady = merge(this.state.type$, this.state.app$).pipe(filter(t => !!t));\r\n    combineLatest(typeOrAppReady, initTrue$).subscribe(_ => this.switchTab());\r\n\r\n    // once the data is known, check if installer is needed\r\n    combineLatest(this.api.templates$,\r\n      this.api.contentTypes$,\r\n      this.api.apps$,\r\n      this.api.ready$.pipe(filter(r => !!r)),\r\n      (templates, c, apps) => {\r\n        log.add('apps/templates loaded, will check if we should show installer')\r\n      this.showInstaller = this.isContent\r\n        ? templates.length === 0\r\n        : apps.filter(a => a.AppId !== cAppActionImport).length === 0;\r\n    }).subscribe();\r\n\r\n    // template loading is true, when the template-list or selected template are not ready\r\n    this.templatesLoading$ = combineLatest(\r\n      this.state.templates$,\r\n      this.state.template$,\r\n      (all, selected) => !(all && selected)).pipe(\r\n      startWith(false));\r\n\r\n    // whenever the template changes, ensure the preview reloads\r\n    // but don't do this when initializing, that's why we listen to initDone$\r\n    this.state.template$.pipe(\r\n      filter(t => !!t),\r\n      skipUntil(initTrue$),)\r\n      .subscribe(t => this.previewTemplate(t));\r\n  }\r\n\r\n  /** The UI doesn't update reliably :(, so we copy the data to local variables */\r\n  private autosyncObservablesToEnsureUiUpdates(): any {\r\n    this.state.app$.subscribe(a => this.app = a);\r\n    this.state.templates$.subscribe(t => this.templates = t);\r\n    this.state.template$.subscribe(t => this.template = t);\r\n    this.state.types$.subscribe(t => this.types = t);\r\n    this.state.type$.subscribe(t => this.contentType = t);\r\n\r\n    // this.state.types$.subscribe(t => log.add('type update: ', t));\r\n    this.ready$.subscribe(r => this.ready = r);\r\n    merge(\r\n      this.ready$,\r\n      this.state.app$,\r\n      this.state.type$,\r\n      this.state.types$,\r\n      this.state.template$,\r\n      this.state.templates$,\r\n      ).subscribe(() => this.cdRef.detectChanges());\r\n  }\r\n\r\n\r\n  private initValuesFromBridge(config: IQuickDialogConfig): void {\r\n    this.preventTypeSwitch = config.hasContent;\r\n    this.isBadContextForInstaller = config.isInnerContent;\r\n    this.isContent = config.isContent;\r\n    this.supportsAjax = this.isContent || config.supportsAjax;\r\n    this.showAdvanced = config.user.canDesign;\r\n    this.preventAppSwich = config.hasContent;\r\n    this.showCancel = config.templateId != null;\r\n  }\r\n\r\n  // private updateConfigAfterAppChange(config: IQuickDialogConfig): void {\r\n  //   this.showCancel = config.templateId != null;\r\n  // }\r\n\r\n  //#region basic UI action binding\r\n  cancel(): void { this.bridge.cancel(); }\r\n\r\n  run(action: string): void { this.bridge.run(action); }\r\n\r\n  persistTemplate(template: Template) { this.bridge.setTemplate(template.TemplateId, template.Name, true); }\r\n\r\n  /**\r\n   * app selection from UI\r\n   */\r\n  selectApp(before: App, after: App): void {\r\n    console.log('selectApp()');\r\n    if (before && before.AppId === after.AppId) this.switchTab();\r\n    else this.updateApp(after);\r\n  }\r\n\r\n  /**\r\n   * content-type selection from UI\r\n   */\r\n  selectContentType(before: ContentType, after: ContentType): void {\r\n    if (before && before.StaticName === after.StaticName) this.switchTab();\r\n    else this.setContentType(after);\r\n  }\r\n\r\n  /**\r\n   * activate a template from the UI\r\n   */\r\n  selectTemplate(template: Template): void {\r\n    this.state.activateTemplate(template);\r\n  }\r\n  //#endregion\r\n\r\n  private setContentType(contentType: ContentType): void {\r\n    log.add(`select content-type '${contentType.Name}'; prevent: ${this.preventTypeSwitch}`);\r\n    if (this.preventTypeSwitch) return;\r\n    this.state.activateType(contentType);\r\n  }\r\n\r\n  switchTab() {\r\n    log.add('switchTab()');\r\n    // must delay change because of a bug in the tabs-updating\r\n    timer(100).toPromise().then(_ => this.tabIndex = 1);\r\n  }\r\n\r\n\r\n  private updateApp(newApp: App): void {\r\n    // ajax-support can change as apps are changed; for ajax, maybe both the previous and new must support it\r\n    // or just new? still WIP\r\n    const ajax = newApp.SupportsAjaxReload;\r\n    log.add(`changing app to ${newApp.AppId}; prevent-switch: ${this.preventAppSwich} use-ajax:${ajax}`);\r\n    if (this.preventAppSwich) return;\r\n\r\n\r\n    this.loading$.next(true);\r\n    this.bridge.showMessage('loading App...');\r\n    const savePromise = this.api.saveAppId(newApp.AppId.toString(), ajax);\r\n\r\n    if (ajax) {\r\n      savePromise.then(() => {\r\n        log.add('saved app, will reset some stuff');\r\n        // do this after save completed, to ensure that the module is ready on the server\r\n        log.add('calling reloadAndReInit()');\r\n        this.bridge.reloadAndReInit()\r\n          .then(newConfig => this.boot(newConfig));\r\n      });\r\n    } else {\r\n      savePromise.then(() => window.parent.location.reload());\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  private previewTemplate(t: Template): void {\r\n    log.add(`previewTemplate(${t.TemplateId}), ajax is ${this.supportsAjax}`);\r\n    this.loading$.next(true);\r\n    this.bridge\r\n      .setTemplate(t.TemplateId, t.Name, false)\r\n      .then(_ => this.loading$.next(false));\r\n  }\r\n\r\n}\r\n","<app-template-picker *ngIf=\"name === 'dash-view' || name === 'layout'\"></app-template-picker>","import { TranslateService } from '@ngx-translate/core';\r\nimport { Component, Inject, ElementRef } from '@angular/core';\r\nimport { DialogComponent } from 'app/version-dialog/dialog.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { IDialogFrameElement } from './interfaces-shared/idialog-frame-element';\r\nimport { log } from './core/log';\r\nimport { DnnAppComponent, Context } from '@2sic.com/dnn-sxc-angular';\r\n\r\ndeclare const window, $2sxc;\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent extends DnnAppComponent {\r\n  name: string;\r\n\r\n  constructor(\r\n    public translate: TranslateService,\r\n    private dialog: MatDialog,\r\n    el: ElementRef,\r\n    context: Context\r\n  ) {\r\n    super(el, context.preConfigure(\r\n      {\r\n        sxc: $2sxc($2sxc.urlParams.require('mid'), $2sxc.urlParams.require('cbid'))\r\n        // moduleId: $2sxc.urlParams.require('mid'),\r\n        // contentBlockId: $2sxc.urlParams.require('cbid')\r\n      }), false);\r\n    const langs = ['en', 'de', 'es', 'fr', 'it', 'nl', 'uk'];\r\n    translate.addLangs(langs);\r\n    translate.setDefaultLang($2sxc.urlParams.require('langpri').split('-')[0]);\r\n    translate.use($2sxc.urlParams.require('lang').split('-')[0]);\r\n    this.name = $2sxc.urlParams.require('dialog');\r\n    log.add(`loading '${this.name}'`);\r\n    const frame = <IDialogFrameElement>window.frameElement;\r\n    if (this.name === 'item-history') {\r\n      this.dialog.open(DialogComponent).afterClosed()\r\n      // todo 2dm - probably change to cancel()\r\n        .subscribe(() => frame.bridge.hide());\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\ndeclare const $2sxc: any;\r\n\r\n@Injectable()\r\nexport class $2sxcService {\r\n  sxc: any;\r\n\r\n  constructor() {\r\n    this.sxc = $2sxc($2sxc.urlParams.require('mid'), $2sxc.urlParams.require('cbid'));\r\n  }\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { $2sxcService } from 'app/core/$2sxc.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { GettingStartedService } from 'app/installer/getting-started.service';\r\nimport { PickerService } from 'app/template-picker/picker.service';\r\nimport { CurrentDataService } from 'app/template-picker/current-data.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    GettingStartedService,\r\n    PickerService,\r\n    CurrentDataService,\r\n    $2sxcService,\r\n    // Http2SxcHttpProvider,\r\n  ]\r\n})\r\nexport class CoreModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InstallerComponent } from './installer.component';\r\nimport { InstallerService } from 'app/installer/installer.service';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatProgressSpinnerModule,\r\n  ],\r\n  exports: [\r\n    InstallerComponent\r\n  ],\r\n  declarations: [\r\n    InstallerComponent\r\n  ],\r\n  providers: [\r\n    InstallerService\r\n  ]\r\n})\r\nexport class InstallerModule { }","// Temporary workaround - must be changed as it's really just to get it to compile again\r\n// afterwards I must reduce the imports to the things I'm actually using\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nconst MATERIAL_MODULES = [\r\n// MatAutocompleteModule,\r\nMatButtonModule,\r\n// MatButtonToggleModule,\r\n// MatCardModule,\r\n// MatChipsModule,\r\n// MatCheckboxModule,\r\n// MatDatepickerModule,\r\n// MatTableModule,\r\nMatDialogModule,\r\nMatExpansionModule,\r\n// MatFormFieldModule,\r\n// MatGridListModule,\r\nMatIconModule,\r\n// MatInputModule,\r\n// MatListModule,\r\n// MatMenuModule,\r\n// MatPaginatorModule,\r\nMatProgressBarModule,\r\nMatProgressSpinnerModule,\r\n// MatRippleModule,\r\n// MatSelectModule,\r\n// MatSidenavModule,\r\n// MatSliderModule,\r\n// MatSlideToggleModule,\r\n// MatSnackBarModule,\r\n// MatSortModule,\r\n// MatStepperModule,\r\nMatTabsModule,\r\nMatToolbarModule,\r\n// MatTooltipModule,\r\n// OverlayModule,\r\n// PortalModule,\r\n// BidiModule,\r\n// A11yModule,\r\n// MatCommonModule,\r\n// ObserversModule\r\n];\r\n@NgModule({\r\nimports: MATERIAL_MODULES,\r\n// declarations: [MatExpansionPanel, MatRadioButton],\r\nexports: MATERIAL_MODULES,\r\n})\r\nexport class MaterialModule { }\r\n","import { TranslateModule } from '@ngx-translate/core';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { TemplatePickerComponent } from './template-picker.component';\r\nimport { TemplateFilterPipe } from './template-filter.pipe';\r\nimport { CoreModule } from 'app/core/core.module';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { InstallerModule } from 'app/installer/installer.module';\r\nimport { DebugPipe } from './debug.pipe';\r\nimport { ContentTypesProcessor } from './data/content-types-processor.service';\r\nimport { MaterialModule } from 'app/xtempUpgrading/material-module';\r\n\r\n@NgModule({\r\n  exports: [\r\n    TemplatePickerComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserAnimationsModule,\r\n    MatMenuModule,\r\n    MatTabsModule,\r\n    MaterialModule,\r\n    MatProgressBarModule,\r\n    CoreModule,\r\n    FormsModule,\r\n    FlexLayoutModule,\r\n    InstallerModule,\r\n    TranslateModule\r\n  ],\r\n  providers: [\r\n    TemplateFilterPipe,\r\n    ContentTypesProcessor\r\n  ],\r\n  declarations: [\r\n    TemplatePickerComponent,\r\n    TemplateFilterPipe,\r\n    DebugPipe,\r\n  ]\r\n})\r\nexport class TemplatePickerModule { }\r\n","import {TranslateModule} from '@ngx-translate/core';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SxcVersionsService } from 'app/version-dialog/sxc-versions.service';\r\nimport { DialogComponent, ConfirmRestoreDialog } from 'app/version-dialog/dialog.component';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MaterialModule } from 'app/xtempUpgrading/material-module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { $2sxcService } from 'app/core/$2sxc.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  exports: [\r\n    DialogComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    FlexLayoutModule,\r\n    TranslateModule,\r\n    BrowserAnimationsModule,\r\n    MaterialModule,\r\n  ],\r\n  providers: [\r\n    SxcVersionsService,\r\n    // todo: added, probably should be in core module\r\n    $2sxcService,\r\n    // Http2SxcHttpProvider,\r\n  ],\r\n  declarations: [\r\n    DialogComponent,\r\n    ConfirmRestoreDialog,\r\n\r\n  ],\r\n  entryComponents: [\r\n    DialogComponent,\r\n    ConfirmRestoreDialog,\r\n  ],\r\n})\r\nexport class VersionDialogModule { }\r\n","import {TranslateHttpLoader} from '@ngx-translate/http-loader';\r\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DnnInterceptor /*, ContentManagerModule */ } from '@2sic.com/dnn-sxc-angular';\r\nimport { AppComponent } from './app.component';\r\nimport { TemplatePickerModule } from 'app/template-picker/template-picker.module';\r\nimport { VersionDialogModule } from 'app/version-dialog/version-dialog.module';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { MaterialModule } from './xtempUpgrading/material-module';\r\nimport { log } from './core/log';\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n  const loader = new TranslateHttpLoader(http, '../i18n/sxc-admin-', '.js');\r\n  log.add('created translate-loader', loader);\r\n  return loader;\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  exports: [ ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    TemplatePickerModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n    MaterialModule, // must be after BrowserModule\r\n    VersionDialogModule,\r\n  ],\r\n  providers: [ DnnInterceptor\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","\r\nimport {startWith} from 'rxjs/operators';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\nimport { BootController } from './app/core/boot-control';\r\nimport { log } from 'app/core/log';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nlog.add('loading main.ts');\r\n\r\ndeclare const window;\r\nconst platform = platformBrowserDynamic();\r\n\r\nfunction init() {\r\n  log.add('init()');\r\n\r\n  try {\r\n    // kill listeners\r\n    if (!platform.destroyed)\r\n      platform.destroy();\r\n  } catch (e) {\r\n    console.log('platform destroy error', e);\r\n  }\r\n\r\n  // must re-create the object here, otherwise AOT compiler optimizations\r\n  // break these lines of code\r\n  platformBrowserDynamic().bootstrapModule(AppModule)\r\n    .then(() => window.appBootstrap && window.appBootstrap())\r\n    .catch(err => console.error('NG Bootstrap Error =>', err));\r\n};\r\n\r\n\r\n// provide hook for outside reboot calls\r\nconst bootController = window.bootController = BootController.getRebootController();\r\n\r\n// Init on reboot request.\r\nbootController.rebootRequest$.pipe(\r\n  startWith(true)) // Init on first load.\r\n  .subscribe(() => init());\r\n"],"sourceRoot":"webpack:///"}