{"version":3,"mappings":"2PAAO,MAAMA,EAAiB,mKCgBxBC,6BACEA,sBACFA,cAF4DA,6CAG5DA,6BACEA,SACFA,+BAF2DA,oBACzDA,iEALJA,SACEA,kCAGAA,kCAGFA,+BANmBA,mGAGAA,2IAnBvBA,SACEA,iBAAsB,WACUA,sBAAUA,UAG1CA,yBAEAA,kBAAyB,qBAAzBA,CAAyB,eAEVA,gBAAIA,QACfA,mBACFA,QACAA,2BACEA,wDACFA,QACAA,iCAQFA,QAEAA,kBAAsC,eAC4BA,iDAASC,gBACvED,qBACFA,QACAA,qBAA8FA,iDAASE,WACrGF,qBACFA,UAEJA,yCA1BQA,mCAQWA,oDAWyBA,qCAGeA,qDChBpD,IAAMG,EAAb,MAAM,QASJC,YACUC,EACAC,EACAC,GAFAC,iBACAA,uBACAA,gBAXgBA,eAAY,mBAItCA,kBFjB0B,uGE0BxBA,KAAKC,KAAOD,KAAKE,YACjBF,KAAKG,SAAW,IAAIC,KAAgB,GAGtCC,WACEL,KAAKM,YAAaC,OAAc,CAACP,KAAKG,WAAWK,MAC/CC,OAAI,EAAEC,MAAc,CAAEA,cAI1BC,cACEX,KAAKG,SAASS,WAGhBC,cACEb,KAAKH,UAAUiB,QAGjBC,eACEf,KAAKC,KAAKe,UACVhB,KAAKG,SAASc,MAAK,GACnB,MAAMC,EAAoC,QAA7BC,OAAKlB,KAAKmB,SAASF,KAAKG,aAAKC,eAAEC,OAAOC,QAAQ,SAAU,KACrExB,KAAKD,SAAS0B,KAAK,mBACnBzB,KAAKF,gBAAgBiB,OAAOG,GAAMQ,UAAU,CAC1CC,MAAO,KACL3B,KAAKC,KAAK2B,SACV5B,KAAKG,SAASc,MAAK,GACnBjB,KAAKD,SAAS0B,KAAK,uEAAmEI,EAAW,CAAEC,SAAU,OAE/Gb,KAAM,KACJjB,KAAKC,KAAK2B,SACV5B,KAAKD,SAAS0B,KAAK,mBAAeI,EAAW,CAAEC,SAAU,MACzD9B,KAAKa,iBAKHX,YAIN,OAHa,IAAI6B,KAAU,CACzBb,KAAM,IAAIc,KAAY,KAAM,CAACC,cAAqBA,aAAmB1C,qDArD9DI,GAAkBH,6DAAlBG,EAAkBuC,4hBDb/B1C,wDAAeA,mJCaFG,GAAb,2FCXIH,kCADFA,oBACEA,gCACFA,uCADiBA,2DAIfA,kCADFA,qBACEA,gCACFA,uCADiBA,2DAKjBA,kECJK,IAAM2C,EAAb,MAAM,QAIJvC,cAHSI,cAAU,EACnBA,cAAU,EAIVoC,gBACEpC,KAAKqC,SAAWrC,KAAKqC,sDAPZF,8BAAkBD,mPDP/B1C,iBAAsBA,gCAAS8C,oBAC7B9C,4BAIAA,6BAGFA,QAEAA,iDAVgDA,sCAA0C,sBAC7EA,kCAICA,keCED2C,GAAb","names":["appNamePattern","i0","ctx_r5","ctx_r7","CreateAppComponent","constructor","dialogRef","appsListService","snackBar","this","form","buildForm","loading$","BehaviorSubject","ngOnInit","viewModel$","combineLatest","pipe","map","loading","ngOnDestroy","complete","closeDialog","close","create","disable","next","name","e","controls","value","_a","trim","replace","open","subscribe","error","enable","undefined","duration","FormGroup","FormControl","Validators","selectors","FieldHintComponent","toggleIsShort","isShort","ctx"],"sources":["./projects/eav-ui/src/app/apps-management/constants/app.patterns.ts","./projects/eav-ui/src/app/apps-management/create-app/create-app.component.html","./projects/eav-ui/src/app/apps-management/create-app/create-app.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts"],"sourcesContent":["export const appNamePattern = /^[A-Za-z](?:[A-Za-z0-9\\s\\(\\)-]+)*$/;\r\nexport const appNameError = 'Standard letters, numbers, spaces, hyphens and round brackets are allowed. Must start with a letter.';\r\n","<ng-container *ngIf=\"viewModel$ | async as vm\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create App</div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <form [formGroup]=\"form\">\r\n    <mat-form-field appearance=\"standard\" color=\"accent\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput type=\"text\" formControlName=\"name\">\r\n    </mat-form-field>\r\n    <app-field-hint>\r\n      App name will also be used for the folder\r\n    </app-field-hint>\r\n    <ng-container *ngIf=\"form.controls.name.touched\">\r\n      <app-field-hint *ngIf=\"form.controls.name.errors?.required\" [isError]=\"true\">\r\n        Required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls.name.errors?.pattern\" [isError]=\"true\">\r\n        {{ appNameError }}\r\n      </app-field-hint>\r\n    </ng-container>\r\n  </form>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button type=\"button\" mat-raised-button [disabled]=\"vm.loading\" (click)=\"closeDialog()\">\r\n      Cancel\r\n    </button>\r\n    <button type=\"button\" mat-raised-button color=\"accent\" [disabled]=\"vm.loading || !form.valid\" (click)=\"create()\">\r\n      Create\r\n    </button>\r\n  </div>\r\n</ng-container>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, Observable, combineLatest, map } from 'rxjs';\r\nimport { appNameError, appNamePattern } from '../constants/app.patterns';\r\nimport { AppsListService } from '../services/apps-list.service';\r\n\r\n@Component({\r\n  selector: 'app-create-app',\r\n  templateUrl: './create-app.component.html',\r\n  styleUrls: ['./create-app.component.scss'],\r\n})\r\nexport class CreateAppComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  loading$: BehaviorSubject<boolean>;\r\n  appNameError = appNameError;\r\n\r\n  viewModel$: Observable<CreateAppViewModel>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateAppComponent>,\r\n    private appsListService: AppsListService,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.form = this.buildForm();\r\n    this.loading$ = new BehaviorSubject(false);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = combineLatest([this.loading$]).pipe(\r\n      map(([loading]) => ({ loading })),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.loading$.complete();\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  create(): void {\r\n    this.form.disable();\r\n    this.loading$.next(true);\r\n    const name = this.form.controls.name.value?.trim().replace(/\\s\\s+/g, ' '); // remove multiple white spaces and tabs;\r\n    this.snackBar.open('Creating app...');\r\n    this.appsListService.create(name).subscribe({\r\n      error: () => {\r\n        this.form.enable();\r\n        this.loading$.next(false);\r\n        this.snackBar.open('Failed to create app. Please check console for more information', undefined, { duration: 3000 });\r\n      },\r\n      next: () => {\r\n        this.form.enable();\r\n        this.snackBar.open('Created app', undefined, { duration: 2000 });\r\n        this.closeDialog();\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildForm(): FormGroup {\r\n    const form = new FormGroup({\r\n      name: new FormControl(null, [Validators.required, Validators.pattern(appNamePattern)]),\r\n    });\r\n    return form;\r\n  }\r\n}\r\n\r\ninterface CreateAppViewModel {\r\n  loading: boolean;\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_apps-management_create-app_create-app_component_ts.bf97a831e935d5e0.js"}