{"version":3,"mappings":"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","names":["ContentItemsService","constructor","http","context","dnnContext","this","getAll","contentTypeStaticName","get","$2sxc","apiUrl","webApiEntityList","params","appId","toString","contentType","getColumns","webApiFieldsAll","staticName","importItem","file","from","toBase64","pipe","switchMap","fileBase64","post","webApiEntityRoot","AppId","ContentBase64","map","success","Success","Messages","i0","factory","FeatureDetailService","getFeatureDetails","featureNameId","webApiRoot","nameId","ctx_r5","oxw","ctx_r8","ctx_r10","FeatureInfoDialogComponent","dialogData","dialogRef","snackBar","featureDetailService","ngOnInit","viewModel$","combineLatest","feature","copyToClipboard","text","open","duration","findOutMore","link","window","closeDialog","close","MAT_DIALOG_DATA","selectors","FeatureComponentBase","dialog","viewContainerRef","changeDetectorRef","featuresService","BehaviorSubject","feature$","featureNameId$","featName","get$","show$","showIf$","feat","showIf","A","F","Enabled","_a","value","next","openDialog","featureId","autoFocus","data","width","markForCheck","inputs","ConfirmDeleteDialogComponent","confirm","ctx","MetadataActionsComponent","agInit","refresh","deleteMetadata","onDelete","MetadataContentTypeComponent","metadata","ctx_r12","ctx_r14","ctx_r15","ctx_r16","ctx_r17","MetadataSaveDialogComponent","contentTypesService","dropdownInsertValue","contentTypes$","scopeOptions$","buildForm","fetchScopes","contentTypes","scopeOptions","ngOnDestroy","complete","toggleGuidedContentType","guidedContentType","toggleAdvancedMode","event","advancedMode","checked","formValues","form","getRawValue","FormGroup","addControl","FormControl","Validators","eavConstants","controls","scope","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","patchValue","prompt","some","option","name","fetchContentTypes","retrieveContentTypes","getScopes","scopes","ctx_r25","ctx_r27","ctx_r29","ctx_r31","MetadataComponent","BaseComponent","router","route","metadataService","entitiesService","contentItemsService","super","buildGridOptions","undefined","parseInt","snapshot","paramMap","decodeURIComponent","Q","fetchFor","fetchMetadata","subscription","add","refreshOnChildClosedShallow","filteredRecommendations$","metadata$","recommendations$","metadataItems","recommendations","filter","r","i","_Type","Id","length","Count","itemFor$","fabOpen$","itemFor","fabOpen","openChange","createMetadata","recommendation","CreateEmpty","Name","create","For","calculateItemFor","error","createMetadataForm","MissingFeature","afterClosed","items","ContentTypeName","formUrl","convertFormToUrl","navigate","relativeTo","Object","Target","a","e","values","find","m","targetType","target","_b","TargetType","keyType","Guid","key","Number","String","item","getMetadata","Recommendations","forEach","s","Icon","startsWith","replace","atob","tap","Items","editMetadata","EntityId","confirmed","delete","entityId","entityTitle","Title","message","DeleteWarning","isConfirmed","defaultGridOptions","columnDefs","headerName","field","headerClass","cellClass","split","sortable","valueGetter","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","flex","minWidth","sort","onCellClicked","pinned","FieldHintComponent","toggleIsShort","isShort","ClickStopPropagationDirective","onClick","stopPropagation","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","readAsText"],"sources":["./projects/eav-ui/src/app/content-items/services/content-items.service.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/metadata/confirm-delete-dialog/confirm-delete-dialog.component.html","./projects/eav-ui/src/app/metadata/confirm-delete-dialog/confirm-delete-dialog.component.ts","./projects/eav-ui/src/app/metadata/metadata-actions/metadata-actions.component.ts","./projects/eav-ui/src/app/metadata/metadata-actions/metadata-actions.component.html","./projects/eav-ui/src/app/metadata/metadata-content-type/metadata-content-type.component.ts","./projects/eav-ui/src/app/metadata/metadata-content-type/metadata-content-type.component.html","./projects/eav-ui/src/app/metadata/metadata-save-dialog/metadata-save-dialog.component.html","./projects/eav-ui/src/app/metadata/metadata-save-dialog/metadata-save-dialog.component.ts","./projects/eav-ui/src/app/metadata/metadata.component.html","./projects/eav-ui/src/app/metadata/metadata.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../edit/shared/services';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../models';\r\n\r\nexport const webApiRoot = \"admin/feature/\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext\r\n  ) { }\r\n\r\n  getFeatureDetails(featureNameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot + 'details'), {\r\n      params: { nameId: featureNameId }\r\n    });\r\n  }\r\n}\r\n","<div *ngIf=\"viewModel$ | async as vm\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ vm.feature.Name }}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\" [innerHtml]=\"vm.feature.Description | safeHtml\"></p>\r\n\r\n  <div class=\"info-box\">\r\n    <div class=\"info-row\">\r\n      <div class=\"info-row__label\">{{ \"Features.Status\" | translate }}</div>\r\n      <div class=\"info-row__value\">\r\n        <span>{{ (vm.feature.Enabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"info-row\" *ngIf=\"vm.feature.NameId as id\">\r\n      <div class=\"info-row__label\">ID</div>\r\n      <div class=\"info-row__value click\">\r\n        <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button *ngIf=\"vm.feature.Link as link\" mat-raised-button class=\"dialog-component-button\" color=\"accent\" (click)=\"findOutMore(link)\">\r\n      <mat-icon>open_in_new</mat-icon>\r\n      {{ \"Features.FindOutMore\" | translate }}\r\n    </button>\r\n    <button mat-raised-button class=\"dialog-component-button\" (click)=\"closeDialog()\">\r\n      {{ \"Features.Close\" | translate }}\r\n    </button>\r\n  </div>\r\n\r\n</div>","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable, combineLatest, map } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss']\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  viewModel$: Observable<FeatureInfoViewModel>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = combineLatest([\r\n      this.featureDetailService.getFeatureDetails(this.dialogData)\r\n    ]).pipe(map(([feature]) => ({ feature })));\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  findOutMore(link: string): void { \r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\ninterface FeatureInfoViewModel {\r\n  feature: Feature;\r\n}","import { ChangeDetectorRef, Directive, Input, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { BehaviorSubject, switchMap, Observable, map, combineLatest } from 'rxjs';\r\nimport { FeatureSummary } from '../models';\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n  /** Feature NameId to check */\r\n  @Input()\r\n  public set featureNameId(value: string) { this.featureNameId$.next(value); }\r\n  protected featureNameId$ = new BehaviorSubject<string>(null);\r\n\r\n  /** By default, it will show if it's false - here we can change it to show if true */\r\n  @Input()\r\n  public set showIf(value: boolean) { this.showIf$.next(value == true); }\r\n  protected showIf$ = new BehaviorSubject<boolean>(false);\r\n\r\n  // TODO: @SDV - MAKE REACTIVE - SEE text-info-component example\r\n  // featureOn: boolean = true;\r\n  feature$: Observable<FeatureSummary>;\r\n  show$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    protected featuresService: FeaturesService\r\n  ) {\r\n    this.feature$ = this.featureNameId$.pipe(\r\n      switchMap(featName => this.featuresService.get$(featName)\r\n    ));\r\n    this.show$ = combineLatest([this.feature$, this.showIf$]).pipe(\r\n      // tap(data => console.log('2dm - show$', data)),\r\n      map(([feat,showIf]) => showIf == (feat?.Enabled ?? false))\r\n    );\r\n  }\r\n\r\n  openDialog() {\r\n    FeatureComponentBase.openDialog(this.dialog, this.featureNameId$.value, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n\r\n  /** Public/Static so it can be called from elsewhere */\r\n  public static openDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n    dialog.open(FeatureInfoDialogComponent, {\r\n      autoFocus: false,\r\n      data: featureId,\r\n      viewContainerRef: viewContainerRef,\r\n      // TODO: this looks wrong. I believe we have some way to standardize dialog sizes...\r\n      width: '600px',\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Delete {{ dialogData.entityTitle }} ({{ dialogData.entityId }})?</div>\r\n</div>\r\n\r\n<div class=\"dialog-component-content fancy-scrollbar-light\" *ngIf=\"dialogData.message\"\r\n  [innerHtml]=\"dialogData.message | safeHtml\">\r\n</div>\r\n\r\n<div class=\"dialog-component-actions\">\r\n  <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n  <button mat-raised-button (click)=\"closeDialog(true)\">Delete</button>\r\n</div>\r\n","import { Component, HostBinding, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ConfirmDeleteDialogData } from './confirm-delete-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-confirm-delete-dialog',\r\n  templateUrl: './confirm-delete-dialog.component.html',\r\n  styleUrls: ['./confirm-delete-dialog.component.scss'],\r\n})\r\nexport class ConfirmDeleteDialogComponent {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: ConfirmDeleteDialogData,\r\n    private dialogRef: MatDialogRef<ConfirmDeleteDialogComponent>,\r\n  ) { }\r\n\r\n  closeDialog(confirm?: boolean) {\r\n    this.dialogRef.close(confirm);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MetadataItem } from '../models/metadata.model';\r\nimport { MetadataActionsParams } from './metadata-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-metadata-actions',\r\n  templateUrl: './metadata-actions.component.html',\r\n  styleUrls: ['./metadata-actions.component.scss'],\r\n})\r\nexport class MetadataActionsComponent implements ICellRendererAngularComp {\r\n  private params: ICellRendererParams & MetadataActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & MetadataActionsParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  deleteMetadata(): void {\r\n    const metadata: MetadataItem = this.params.data;\r\n    this.params.onDelete(metadata);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Delete\" (click)=\"deleteMetadata()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MetadataItem } from '../models/metadata.model';\r\n\r\n@Component({\r\n  selector: 'app-metadata-content-type',\r\n  templateUrl: './metadata-content-type.component.html',\r\n  styleUrls: ['./metadata-content-type.component.scss'],\r\n})\r\nexport class MetadataContentTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  metadata: MetadataItem;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.metadata = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"container\" [tippy]=\"metadata._Type.Description\" [tippyDisabled]=\"!metadata._Type.Description\">\r\n  {{ value }}\r\n</div>\r\n","<ng-container *ngIf=\"viewModel$ | async as vm\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create Metadata</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This is a special operation to add an item which is metadata for another item,\r\n    see <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- Scope -->\r\n      <ng-container *ngIf=\"advancedMode && guidedContentType\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select formControlName=\"scope\" [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of vm.scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n            <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n      </ng-container>\r\n\r\n      <!-- Content Type of metadata item -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Content Type</mat-label>\r\n        <mat-select *ngIf=\"guidedContentType\" formControlName=\"contentType\" required\r\n          [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let contentType of vm.contentTypes\" [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"text\" *ngIf=\"!guidedContentType\" formControlName=\"contentType\" required>\r\n\r\n        <div matSuffix class=\"selection-suffix\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': guidedContentType }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedContentType(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !guidedContentType }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedContentType(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"form.controls.contentType.touched && form.controls.contentType.errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <mat-slide-toggle color=\"accent\" [checked]=\"advancedMode\" (change)=\"toggleAdvancedMode($event)\">\r\n        {{ advancedMode ? 'Advanced' : 'Simple' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, Observable, startWith } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { MetadataSaveDialogViewModel, MetadataSaveFormValues } from './metadata-save-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-metadata-save-dialog',\r\n  templateUrl: './metadata-save-dialog.component.html',\r\n  styleUrls: ['./metadata-save-dialog.component.scss']\r\n})\r\nexport class MetadataSaveDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  viewModel$: Observable<MetadataSaveDialogViewModel>;\r\n  guidedContentType = true;\r\n  advancedMode = false;\r\n\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<MetadataSaveDialogComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n\r\n    this.buildForm();\r\n    this.fetchScopes();\r\n\r\n    this.viewModel$ = combineLatest([this.contentTypes$, this.scopeOptions$]).pipe(\r\n      map(([contentTypes, scopeOptions]) => {\r\n        const viewModel: MetadataSaveDialogViewModel = {\r\n          contentTypes,\r\n          scopeOptions,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.contentTypes$.complete();\r\n    this.scopeOptions$.complete();\r\n  }\r\n\r\n  closeDialog(contentType?: string): void {\r\n    this.dialogRef.close(contentType);\r\n  }\r\n\r\n  toggleGuidedContentType(guidedContentType: boolean): void {\r\n    this.guidedContentType = guidedContentType;\r\n  }\r\n\r\n  toggleAdvancedMode(event: MatSlideToggleChange): void {\r\n    this.advancedMode = event.checked;\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataSaveFormValues = this.form.getRawValue();\r\n    this.closeDialog(formValues.contentType);\r\n  }\r\n\r\n  private buildForm(): void {\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('contentType', new FormControl(null, [Validators.required]));\r\n    this.form.addControl('scope', new FormControl(eavConstants.scopes.default.value));\r\n\r\n    this.form.controls.scope.valueChanges.pipe(\r\n      startWith(this.form.controls.scope.value),\r\n      distinctUntilChanged(),\r\n    ).subscribe((newScope: string) => {\r\n      // reset content types when scope changes\r\n      if (this.form.controls.contentType.value != null) {\r\n        this.form.controls.contentType.patchValue(null);\r\n      }\r\n\r\n      // add new scope on manual entry\r\n      if (newScope === dropdownInsertValue) {\r\n        newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n        if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n          const newScopeOption: ScopeOption = {\r\n            name: newScope,\r\n            value: newScope,\r\n          };\r\n          this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n        }\r\n        this.form.controls.scope.patchValue(newScope);\r\n      } else {\r\n        this.fetchContentTypes(newScope);\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"viewModel$ | async as vm\">\r\n  <div class=\"nav-component-wrapper\">\r\n    <div mat-dialog-title>\r\n      <div class=\"dialog-title-box\">\r\n        <div>{{ title || 'Metadata' }}</div>\r\n        <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <p class=\"dialog-description\">\r\n      <ng-container *ngIf=\"!vm.itemFor\">This item is not metadata for anything else.</ng-container>\r\n      <ng-container *ngIf=\"vm.itemFor\">\r\n        This item is metadata for:\r\n        <br>Target: {{ vm.itemFor.Target }}\r\n        <br>TargetType: {{ vm.itemFor.TargetType }}\r\n        <ng-container *ngIf=\"vm.itemFor.Number\"><br>Number: {{ vm.itemFor.Number }}</ng-container>\r\n        <ng-container *ngIf=\"vm.itemFor.Guid\"><br>Guid: {{ vm.itemFor.Guid }}</ng-container>\r\n        <ng-container *ngIf=\"vm.itemFor.String\"><br>String: {{ vm.itemFor.String }}</ng-container>\r\n        <ng-container *ngIf=\"vm.itemFor.Title\"><br>Title: {{ vm.itemFor.String }}</ng-container>\r\n      </ng-container>\r\n    </p>\r\n\r\n    <router-outlet></router-outlet>\r\n\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.metadata\" [gridOptions]=\"gridOptions\">\r\n      </ag-grid-angular>\r\n\r\n      <div class=\"grid-more-actions-box\"></div>\r\n\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" *ngIf=\"vm.recommendations.length === 0\"\r\n        tippy=\"Create a new metadata for this item\" (click)=\"createMetadata()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n\r\n      <eco-fab-speed-dial class=\"grid-fab\" [ngClass]=\"{ 'fab-opened': vm.fabOpen }\"\r\n        *ngIf=\"vm.recommendations.length > 0\" (openChange)=\"openChange($event)\">\r\n        <eco-fab-speed-dial-trigger [spin]=\"true\">\r\n          <button mat-fab>\r\n            <mat-icon class=\"spin180\">{{ vm.fabOpen ? 'close' : 'add' }}</mat-icon>\r\n          </button>\r\n        </eco-fab-speed-dial-trigger>\r\n\r\n        <eco-fab-speed-dial-actions>\r\n          <button mat-mini-fab label=\"Other Content Type\" (click)=\"createMetadata()\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-mini-fab *ngFor=\"let recommendation of vm.recommendations\" [attr.label]=\"recommendation.Title\"\r\n            (click)=\"createMetadata(recommendation)\">\r\n            <div *ngIf=\"recommendation.Icon; then svgIcon else matIcon\"></div>\r\n            <ng-template #svgIcon>\r\n              <div [innerHTML]=\"recommendation.Icon | safeHtml\" [matBadgeHidden]=\"recommendation.Enabled\"\r\n                matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadge=\"💎\" matBadgePosition=\"below after\"></div>\r\n            </ng-template>\r\n            <!-- this is for all recommendations which don't have an own icon - they use the standard add-icon -->\r\n            <ng-template #matIcon>\r\n              <mat-icon>add</mat-icon>\r\n            </ng-template>\r\n          </button>\r\n        </eco-fab-speed-dial-actions>\r\n      </eco-fab-speed-dial>\r\n    </div>\r\n  </div>\r\n</ng-container>","import { GridOptions } from '@ag-grid-community/core';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, map, Observable, tap } from 'rxjs';\r\nimport { ContentItemsService } from '../content-items/services/content-items.service';\r\nimport { EntitiesService } from '../content-items/services/entities.service';\r\nimport { EavFor } from '../edit/shared/models/eav';\r\nimport { MetadataService } from '../permissions';\r\nimport { BaseComponent } from '../shared/components/base-component/base.component';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ConfirmDeleteDialogComponent } from './confirm-delete-dialog/confirm-delete-dialog.component';\r\nimport { ConfirmDeleteDialogData } from './confirm-delete-dialog/confirm-delete-dialog.models';\r\nimport { MetadataActionsComponent } from './metadata-actions/metadata-actions.component';\r\nimport { MetadataActionsParams } from './metadata-actions/metadata-actions.models';\r\nimport { MetadataContentTypeComponent } from './metadata-content-type/metadata-content-type.component';\r\nimport { MetadataSaveDialogComponent } from './metadata-save-dialog/metadata-save-dialog.component';\r\nimport { MetadataItem, MetadataRecommendation, MetadataViewModel } from './models/metadata.model';\r\nimport { FeatureComponentBase } from '../features/shared/base-feature.component';\r\n\r\n@Component({\r\n  selector: 'app-metadata',\r\n  templateUrl: './metadata.component.html',\r\n  styleUrls: ['./metadata.component.scss'],\r\n})\r\nexport class MetadataComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  private metadata$ = new BehaviorSubject<MetadataItem[]>([]);\r\n  private recommendations$ = new BehaviorSubject<MetadataRecommendation[]>([]);\r\n  private itemFor$ = new BehaviorSubject<EavFor | undefined>(undefined);\r\n  private fabOpen$ = new BehaviorSubject(false);\r\n  private targetType = parseInt(this.route.snapshot.paramMap.get('targetType'), 10);\r\n  private keyType = this.route.snapshot.paramMap.get('keyType') as MetadataKeyType;\r\n  private key = this.route.snapshot.paramMap.get('key');\r\n  title = decodeURIComponent(this.route.snapshot.paramMap.get('title') ?? '');\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  viewModel$: Observable<MetadataViewModel>;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<MetadataComponent>,\r\n\r\n    private metadataService: MetadataService,\r\n    private snackBar: MatSnackBar,\r\n    private entitiesService: EntitiesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchFor();\r\n    this.fetchMetadata();\r\n    this.subscription.add(this.refreshOnChildClosedShallow().subscribe(() => { this.fetchMetadata(); }));\r\n\r\n    const filteredRecommendations$ = combineLatest([this.metadata$, this.recommendations$]).pipe(\r\n      map(([metadataItems, recommendations]) =>\r\n        recommendations.filter(r => metadataItems.filter(i => i._Type.Id === r.Id).length < r.Count)),\r\n    );\r\n    this.viewModel$ = combineLatest([this.metadata$, filteredRecommendations$, this.itemFor$, this.fabOpen$]).pipe(\r\n      map(([metadata, recommendations, itemFor, fabOpen]) => {\r\n        const viewModel: MetadataViewModel = {\r\n          metadata,\r\n          recommendations,\r\n          itemFor,\r\n          fabOpen,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.metadata$.complete();\r\n    this.recommendations$.complete();\r\n    this.itemFor$.complete();\r\n    this.fabOpen$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openChange(open: boolean) {\r\n    this.fabOpen$.next(open);\r\n  }\r\n\r\n  createMetadata(recommendation?: MetadataRecommendation) {\r\n    if (recommendation) {\r\n      // If the feature is not enabled, open the info dialog instead of metadata\r\n      if (!recommendation.Enabled) {\r\n        FeatureComponentBase.openDialog(this.dialog, recommendation.MissingFeature, this.viewContainerRef, this.changeDetectorRef);\r\n        return;\r\n      }\r\n      // Feature is enabled, check if it's an empty metadata\r\n      if (recommendation.CreateEmpty) {\r\n        this.snackBar.open(`Creating ${recommendation.Name}...`);\r\n        this.entitiesService.create(recommendation.Id, { For: this.calculateItemFor() }).subscribe({\r\n          error: () => {\r\n            this.snackBar.open(`Creating ${recommendation.Name} failed. Please check console for more info`, undefined, { duration: 3000 });\r\n            this.fetchMetadata();\r\n          },\r\n          next: () => {\r\n            this.snackBar.open(`Created ${recommendation.Name}`, undefined, { duration: 3000 });\r\n            this.fetchMetadata();\r\n          },\r\n        });\r\n      } else {\r\n        // Default case - open new-metadata dialog\r\n        this.createMetadataForm(recommendation.Id);\r\n      }\r\n      return;\r\n    }\r\n    const metadataDialogRef = this.dialog.open(MetadataSaveDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((contentType?: string) => {\r\n      if (contentType == null) { return; }\r\n      this.createMetadataForm(contentType);\r\n    });\r\n  }\r\n\r\n  private createMetadataForm(contentType: string) {\r\n    const form: EditForm = {\r\n      items: [{\r\n        ContentTypeName: contentType,\r\n        For: this.calculateItemFor(),\r\n      }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private calculateItemFor(): EavFor {\r\n    const itemFor: EavFor = {\r\n      Target: Object.values(eavConstants.metadata).find(m => m.targetType === this.targetType)?.target ?? this.targetType.toString(),\r\n      TargetType: this.targetType,\r\n      ...(this.keyType === eavConstants.keyTypes.guid && { Guid: this.key }),\r\n      ...(this.keyType === eavConstants.keyTypes.number && { Number: parseInt(this.key, 10) }),\r\n      ...(this.keyType === eavConstants.keyTypes.string && { String: this.key }),\r\n    };\r\n    return itemFor;\r\n  }\r\n\r\n  private fetchFor() {\r\n    if (!this.contentTypeStaticName) { return; }\r\n\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      const item = items.find(i => i.Guid === this.key);\r\n      if (item?.For) {\r\n        this.itemFor$.next(item.For);\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchMetadata() {\r\n    this.metadataService.getMetadata(this.targetType, this.keyType, this.key).pipe(\r\n      map(metadata => {\r\n        metadata.Recommendations.forEach(recommendation => {\r\n          if (recommendation.Icon?.startsWith('base64:')) {\r\n            recommendation.Icon = recommendation.Icon.replace('base64:', '');\r\n            recommendation.Icon = window.atob(recommendation.Icon);\r\n          }\r\n        });\r\n        return metadata;\r\n      }),\r\n      tap(metadata => {\r\n        this.metadata$.next(metadata.Items);\r\n        this.recommendations$.next(metadata.Recommendations);\r\n      })).subscribe();\r\n  }\r\n\r\n  private editMetadata(metadata: MetadataItem) {\r\n    const form: EditForm = {\r\n      items: [{ EntityId: metadata.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private deleteMetadata(metadata: MetadataItem, confirmed = false) {\r\n    if (!confirmed) {\r\n      const data: ConfirmDeleteDialogData = {\r\n        entityId: metadata.Id,\r\n        entityTitle: metadata.Title,\r\n        message: this.recommendations$.value.find(r => r.Id === metadata._Type.Id)?.DeleteWarning,\r\n      };\r\n      const confirmationDialogRef = this.dialog.open(ConfirmDeleteDialogComponent, {\r\n        autoFocus: false,\r\n        data,\r\n        viewContainerRef: this.viewContainerRef,\r\n        width: '650px',\r\n      });\r\n      confirmationDialogRef.afterClosed().subscribe((isConfirmed: boolean) => {\r\n        if (isConfirmed) {\r\n          this.deleteMetadata(metadata, true);\r\n        }\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(metadata._Type.Id, metadata.Id, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchMetadata();\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Delete failed. Please check console for more information', null, { duration: 3000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          headerName: 'ID',\r\n          field: 'Id',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'id-action no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: 'agNumberColumnFilter',\r\n          valueGetter: (params) => {\r\n            const metadata: MetadataItem = params.data;\r\n            return metadata.Id;\r\n          },\r\n          cellRenderer: IdFieldComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<MetadataItem> = {\r\n              tooltipGetter: (metadata: MetadataItem) => `ID: ${metadata.Id}\\nGUID: ${metadata.Guid}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          field: 'Title',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'primary-action highlight'.split(' '),\r\n          sortable: true,\r\n          sort: 'asc',\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const metadata: MetadataItem = params.data;\r\n            return metadata.Title;\r\n          },\r\n          onCellClicked: (params) => {\r\n            const metadata: MetadataItem = params.data;\r\n            this.editMetadata(metadata);\r\n          },\r\n        },\r\n        {\r\n          headerName: 'Content Type',\r\n          field: 'ContentType',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const metadata: MetadataItem = params.data;\r\n            return `${metadata._Type.Name}${metadata._Type.Title !== metadata._Type.Name ? ` (${metadata._Type.Title})` : ''}`;\r\n          },\r\n          cellRenderer: MetadataContentTypeComponent,\r\n        },\r\n        {\r\n          width: 42,\r\n          cellClass: 'secondary-action no-padding'.split(' '),\r\n          pinned: 'right',\r\n          cellRenderer: MetadataActionsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: MetadataActionsParams = {\r\n              onDelete: (metadata) => this.deleteMetadata(metadata),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_metadata_metadata_component_ts.cfaec8a1d1007b4d.js"}