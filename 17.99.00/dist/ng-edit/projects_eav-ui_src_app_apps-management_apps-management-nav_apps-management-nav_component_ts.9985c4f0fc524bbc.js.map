{"version":3,"file":"projects_eav-ui_src_app_apps-management_apps-management-nav_apps-management-nav_component_ts.9985c4f0fc524bbc.js","mappings":"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","names":["AppsManagementNavItems","name","path","icon","svgIcon","tippy","child","i0","breadcrumb_r3","AppsManagementNavComponent_Conditional_0_ng_container_8_Conditional_1_Template","last_r4","_r1","sidenav_r2","opened","AppsManagementNavComponent_Conditional_0_ng_container_8_Template","AppsManagementNavComponent_Conditional_0_ng_template_9_Template","ctx_r4","closeDialog","AppsManagementNavComponent_Conditional_0_For_19_Template","_forTrack0","zoneId","emptyTemplate_r7","smallScreen","matches","sideNavOpened","navItems","AppsManagementNavComponent","BaseWithChildDialogComponent","constructor","router","route","dialogRef","context","media","super","this","appDialogConfigService","transient","AppDialogConfigService","currentPath$","combineLatest","events","pipe","filter","event","NavigationEnd","map","snapshot","firstChild","url","startWith","paths","viewModel$","currentPath","matchMedia","ngOnInit","fetchDialogSettings","subscriptions","add","childDialogClosed$","subscribe","addEventListener","c","sidenav","mode","close","getShared$","static","t","i1","i2","i3","i4","core","VBU","selectors","viewQuery","rf","ctx","AppsManagementNavComponent_Conditional_0_Template","tmp_0_0","MatToolbarModule","i5","MatIconModule","i6","BreadcrumbModule","i7","MatButtonModule","i8","MatSidenavModule","i9","RouterOutlet","AsyncPipe","NavItemListComponent","styles","token","injector","inject","Injector","create","providers","parent","get","undefined","self"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/apps-management-nav/managment-nav-items.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.html","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.ts","./projects/eav-ui/src/app/core/transient.ts"],"sourcesContent":["import { NavItem } from \"../../shared/models/nav-item.model\";\r\n\r\nexport const AppsManagementNavItems: NavItem[] = [\r\n  {\r\n    name: 'System', path: 'system', icon: 'settings', svgIcon: false, tippy: 'System Info', child: [\r\n      { name: 'Register', path: 'registration', icon: 'how_to_reg', svgIcon: false, tippy: 'Register this System on 2sxc Patrons' },\r\n    ]\r\n  },\r\n  { name: 'Apps', path: 'list', icon: 'star_border', svgIcon: false, tippy: 'Apps' },\r\n  { name: 'Languages', path: 'languages', icon: 'translate', svgIcon: false, tippy: 'Languages' },\r\n  { name: 'Extensions / Features', path: 'license', icon: 'tune', svgIcon: false, tippy: 'Extensions and Features' },\r\n];\r\n","@if (viewModel$ | async; as vm) {\r\n<mat-toolbar>\r\n  <div class=\"toolbar-container\">\r\n    <!-- Mat Icon Menu -->\r\n    <mat-icon class=\"menu-container\" (click)=\"sidenav.opened = !sidenav.opened\">menu</mat-icon>\r\n    <!-- App Name -->\r\n    <div>\r\n      <span> Manage Zone {{ zoneId }} </span>\r\n    </div>\r\n    <!-- Breadcrum in the Toolbar after show Img and Aoo Name -->\r\n    <xng-breadcrumb [separator]=\"emptyTemplate\">\r\n      <ng-container *xngBreadcrumbItem=\"let breadcrumb; let info = info; let last = last\">\r\n        @if (last) {\r\n        <mat-icon class=\"breadcrumb-icon\">chevron_right</mat-icon>\r\n        {{ breadcrumb }}\r\n        }\r\n      </ng-container>\r\n    </xng-breadcrumb>\r\n    <ng-template #emptyTemplate></ng-template>\r\n  </div>\r\n  <span class=\"toolbar-spacer\"></span>\r\n  <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n<mat-sidenav-container>\r\n  <mat-sidenav #sidenav [mode]=\"smallScreen.matches ? 'over' : 'side'\" [opened]=\"sideNavOpened\">\r\n    @for (navItem of navItems; track navItem.path) {\r\n    <app-nav-item-list [navItem]=\"navItem\"></app-nav-item-list>\r\n    }\r\n\r\n    <div class=\"sideNav-bottom-info\">\r\n      <p>use Burger icon to show/hide menu</p>\r\n    </div>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <div class=\"container-content\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n}\r\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, NavigationEnd, Router, RouterOutlet } from '@angular/router';\r\nimport { combineLatest, filter, map, startWith } from 'rxjs';\r\nimport { BaseWithChildDialogComponent } from '../../shared/components/base-with-child-dialog.component';\r\nimport { Context } from '../../shared/services/context';\r\nimport { MatSidenav, MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MediaMatcher } from '@angular/cdk/layout';\r\nimport { AppDialogConfigService } from '../../app-administration/services';\r\nimport { AppsManagementNavItems } from './managment-nav-items';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { BreadcrumbModule } from 'xng-breadcrumb';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { NavItemListComponent } from '../../shared/components/nav-item-list/nav-item-list.component';\r\nimport { transient } from '../../core';\r\n\r\n@Component({\r\n  selector: 'app-apps-management-nav',\r\n  templateUrl: './apps-management-nav.component.html',\r\n  styleUrls: ['./apps-management-nav.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    BreadcrumbModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    RouterOutlet,\r\n    AsyncPipe,\r\n    NavItemListComponent\r\n  ],\r\n})\r\nexport class AppsManagementNavComponent extends BaseWithChildDialogComponent implements OnInit, OnDestroy {\r\n\r\n  private appDialogConfigService = transient(AppDialogConfigService);\r\n\r\n  zoneId = this.context.zoneId;\r\n\r\n  private currentPath$ = combineLatest([\r\n    this.router.events.pipe(\r\n      filter((event) => event instanceof NavigationEnd),\r\n      map(() => this.route.snapshot.firstChild.url[0].path),\r\n      startWith(this.route.snapshot.firstChild.url[0].path)\r\n    ),\r\n  ]).pipe(\r\n    map(([paths]) => {\r\n      if (paths == null) return;\r\n      return paths;\r\n    })\r\n  );\r\n\r\n  // Generate View Model\r\n  viewModel$ = combineLatest([this.currentPath$]).pipe(\r\n    map(([currentPath]) => {\r\n      return {\r\n        currentPath,\r\n      };\r\n    })\r\n  );\r\n\r\n  smallScreen: MediaQueryList = this.media.matchMedia('(max-width: 1000px)');\r\n  @ViewChild('sidenav') sidenav!: MatSidenav;\r\n  sideNavOpened = !this.smallScreen.matches;\r\n\r\n  navItems = AppsManagementNavItems;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<AppsManagementNavComponent>,\r\n    private context: Context,\r\n    private media: MediaMatcher,\r\n  ) {\r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchDialogSettings();\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => {\r\n        this.fetchDialogSettings();\r\n      })\r\n    );\r\n\r\n    this.smallScreen.addEventListener(\r\n      'change',\r\n      (c) => (\r\n        this.sidenav.opened = !c.matches,\r\n        this.sidenav.mode = c.matches ? 'over' : 'side'\r\n      )\r\n    );\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  // @2dg not longer in use with new routing SideNav\r\n  // changeUrl(path: string) {\r\n  //   this.router.navigate([path], { relativeTo: this.route });\r\n  // }\r\n\r\n  private fetchDialogSettings() {\r\n    this.appDialogConfigService.getShared$(0).subscribe();\r\n  }\r\n\r\n}\r\n","import { Injector, ProviderToken, TypeProvider, inject } from '@angular/core';\r\n\r\n/**\r\n * Transient dependency injection provider.\r\n * This will create a new instance of the provided token,\r\n * without making it available in sub-components\r\n * as would happen with providers in a component.\r\n * \r\n * @param token the class which is injectable\r\n * @param injector the injector to use, if not provided, the current injector will be used.\r\n *     Not not necessary when using transient in the class properties construction or in the constructor,\r\n *     as the injector will be available in the constructor.\r\n *     But necessary when using transient inside anything else.\r\n * @returns \r\n */\r\nexport function transient<T>(token: ProviderToken<T>, injector?: Injector): T {\r\n  // make sure we have an injector\r\n  // this will throw an error, if transient is used outside of construction and without providing an injector\r\n  injector ??= inject(Injector);\r\n\r\n  // create a new injector which is only meant to be used for this transient instance\r\n  const subInjector = Injector.create({\r\n    providers: [\r\n      token as TypeProvider\r\n    ],\r\n    parent: injector\r\n  });\r\n\r\n  // return the instance\r\n  return subInjector.get(token, undefined, { self: true });\r\n}\r\n"],"x_google_ignoreList":[]}