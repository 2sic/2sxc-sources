{"version":3,"file":"default-projects_eav-ui_src_app_shared_components_nav-item-list_nav-item-list_component_ts-no-dac92e.34526775f7f5c8aa.js","mappings":"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","names":["i0","ctx_r0","navItem","icon","_c0","isOpenMenu","NavItemListComponent_div_6_For_2_Template","_forTrack0","child","NavItemListComponent","constructor","router","this","ngOnInit","openChildMenu","length","events","subscribe","event","routerEvent","NavigationEnd","urlSegments","urlAfterRedirects","split","find","includes","path","static","t","i1","_angular_core__WEBPACK_IMPORTED_MODULE_0__","VBU","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","NavItemListComponent_Conditional_1_Template","NavItemListComponent_Conditional_2_Template","NavItemListComponent_mat_icon_5_Template","NavItemListComponent_div_6_Template","tippy","svgIcon","name","MatIconModule","i2","NgClass","RouterLink","RouterLinkActive","TippyDirective","NgIf","styles","_c1","_c2","_c3","MatDrawerContainer_Conditional_0_Template","_r1","ctx_r1","_onBackdropClicked","_isShowingBackdrop","MatDrawerContainer_Conditional_3_Template","_c4","_c5","MatSidenavContainer_Conditional_0_Template","MatSidenavContainer_Conditional_3_Template","matDrawerAnimations","transformDrawer","trigger","state","style","transform","visibility","transition","animate","MAT_DRAWER_DEFAULT_AUTOSIZE","InjectionToken","providedIn","factory","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","CdkScrollable","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","super","ngAfterContentInit","_contentMarginChanges","markForCheck","ɵfac","forwardRef","MatDrawerContainer","ɵcmp","type","hostAttrs","hostVars","hostBindings","_contentMargins","left","right","provide","useExisting","ngContentSelectors","encapsulation","changeDetection","MatDrawer","position","_position","value","_isAttached","_updatePositionInParent","onPositionChanged","emit","mode","_mode","_updateFocusTrapState","_modeChanged","next","disableClose","_disableClose","coerceBooleanProperty","autoFocus","_autoFocus","opened","_opened","toggle","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_interactivityChecker","_doc","_focusTrap","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_animationStarted","Subject","_animationEnd","_animationState","openedChange","EventEmitter","_openedStream","pipe","filter","o","map","openedStart","e","fromState","toState","indexOf","mapTo","undefined","_closedStream","closedStart","_destroyed","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","_openedVia","runOutsideAngular","fromEvent","nativeElement","keyCode","ESCAPE","hasModifierKey","takeUntil","run","close","stopPropagation","preventDefault","distinctUntilChanged","x","y","_forceFocus","element","options","isFocusable","tabIndex","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","querySelector","focusInitialElementWhenReady","then","hasMovedFocus","focusOrigin","focusVia","blur","activeEl","contains","ngAfterViewInit","isBrowser","create","ngAfterContentChecked","ngOnDestroy","destroy","_anchor","remove","complete","open","openedVia","_closeViaBackdropClick","_setOpen","isOpen","result","restoreFocus","Promise","resolve","take","_getWidth","offsetWidth","enabled","hasBackdrop","newPosition","parent","parentNode","createComment","insertBefore","appendChild","i3","DOCUMENT","viewQuery","_t","_content","first","$event","outputs","exportAs","dependencies","data","animation","start","_start","end","_end","autosize","_autosize","_drawerHasBackdrop","_backdropOverride","scrollable","_userContent","_dir","_element","viewportRuler","defaultAutosize","_animationMode","_drawers","QueryList","backdropClick","_doCheckSubject","change","_validateDrawers","updateContentMargins","_allDrawers","changes","startWith","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","debounceTime","_left","width","_right","ngDoCheck","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","merge","isAdd","className","_closeModalDrawersViaBackdrop","i4","ANIMATION_MODULE_TYPE","contentQueries","dirIndex","MatSidenavContent","changeDetectorRef","container","MatSidenavContainer","MatSidenav","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","fixedInViewport","fixedTopGap","coerceNumberProperty","fixedBottomGap","ɵMatSidenav_BaseFactory","ɵMatSidenavContainer_BaseFactory","MatSidenavModule","ɵmod","ɵinj","imports","MatCommonModule","CdkScrollableModule","MatToolbarRow","ɵdir","MatToolbar","document","_document","_checkToolbarMixedModes","_toolbarRows","color","MatToolbarModule","a0","a1","a2","a3","a4","a5","$implicit","info","last","index","count","BreadcrumbComponent_ng_container_2_a_2_ng_container_1_Template","BreadcrumbComponent_ng_container_2_a_2_ng_container_2_Template","breadcrumb_r1","label","BreadcrumbComponent_ng_container_2_a_2_Template","isLast_r3","isFirst_r4","index_r5","count_r6","ctx_r6","disable","routeInterceptor","routeLink","preserveQueryParams","queryParams","preserveFragment","fragment","anchorTarget","itemTemplate","BreadcrumbComponent_ng_container_2_label_3_ng_container_1_Template","BreadcrumbComponent_ng_container_2_label_3_ng_container_2_Template","BreadcrumbComponent_ng_container_2_label_3_Template","BreadcrumbComponent_ng_container_2_li_4_ng_container_1_Template","BreadcrumbComponent_ng_container_2_li_4_ng_container_2_Template","separator","BreadcrumbComponent_ng_container_2_li_4_Template","separatorTemplate","BreadcrumbComponent_ng_container_2_Template","BreadcrumbItemDirective","isNonEmpty","obj","Object","keys","BreadcrumbService","activatedRoute","baseHref","dynamicBreadcrumbStore","currentBreadcrumbs","previousBreadcrumbs","breadcrumbs","BehaviorSubject","breadcrumbs$","asObservable","detectRouteChanges","setupBreadcrumbs","snapshot","GuardsCheckEnd","shouldActivate","root","activatedRouteSnapshot","rootBreadcrumb","getRootBreadcrumb","prepareBreadcrumbList","rootConfig","config","extractObject","breadcrumb","storeItem","getFromStore","alias","getQueryParamsFromPreviousList","prepareBreadcrumbItem","routeLinkPrefix","parseRouteData","routeConfig","resolvedSegment","resolvePathSegment","extractLabel","isAutoGeneratedLabel","autoGeneratedLabel","breadcrumbItem","push","firstChild","setQueryParamsForActiveBreadcrumb","breadcrumbsToShow","skip","matchRegex","routeRegex","match","RegExp","segment","entries","params","key","replace","lastItem","mergeWithBaseChildData","baseChild","loadChildren","_loadedRoutes","route","children","childConfig","set","breadcrumbObject","updateArgs","startsWith","slice","buildRegex","ensureLeadingSlash","updateStore","updateCurrentBreadcrumbs","storeItemIndex","findIndex","itemIndex","resolvedParam","ɵprov","token","BreadcrumbComponent","breadcrumbService","activateRoute","_separator","autoGenerate","class","setupMessage","someParameterValue","setupComponent","someParam","TemplateRef","Date","BreadcrumbModule","CommonModule","RouterModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/components/nav-item-list/nav-item-list.component.html","./projects/eav-ui/src/app/shared/components/nav-item-list/nav-item-list.component.ts","./node_modules/@angular/material/fesm2022/sidenav.mjs","./node_modules/@angular/material/fesm2022/toolbar.mjs","./node_modules/xng-breadcrumb/fesm2020/xng-breadcrumb.mjs"],"sourcesContent":["<a (click)=\"isOpenMenu = !isOpenMenu\" [routerLink]=\"navItem.path\" routerLinkActive=\"active\" matRipple\r\n  class=\"app-menu-container\" [tippy]=\"navItem.tippy\">\r\n  @if(navItem.svgIcon){\r\n  <mat-icon [svgIcon]=\"navItem.icon\"></mat-icon>\r\n  } @else {\r\n  <mat-icon>{{ navItem.icon }}</mat-icon>\r\n  }\r\n  <div class=\"link-text\">{{ navItem.name }}</div>\r\n  <mat-icon *ngIf=\"navItem.child\" [ngClass]=\"{ closed: !isOpenMenu, open: isOpenMenu, 'ml-auto': true }\"> expand_more\r\n  </mat-icon>\r\n</a>\r\n\r\n<div class=\"paddingLink\" *ngIf=\"isOpenMenu\">\r\n  @for (child of navItem.child ; track child.path) {\r\n  <app-nav-item-list [navItem]=\"child\"></app-nav-item-list>\r\n  }\r\n</div>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { NavigationEnd, Router, RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';\r\nimport { NavItem } from '../../models/nav-item.model';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { NgClass, NgIf } from '@angular/common';\r\nimport tippy from 'tippy.js';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-nav-item-list',\r\n  templateUrl: './nav-item-list.component.html',\r\n  styleUrl: './nav-item-list.component.scss',\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    NgClass,\r\n    RouterLink,\r\n    RouterLinkActive,\r\n    TippyDirective,\r\n    NgIf,\r\n  ],\r\n})\r\nexport class NavItemListComponent implements OnInit {\r\n  @Input() navItem!: NavItem;\r\n  isOpenMenu = false;\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.openChildMenu();\r\n  }\r\n\r\n  openChildMenu() {\r\n    if (this.navItem.child?.length) {\r\n\r\n      this.router.events.subscribe((event: any) => {\r\n        if (event.routerEvent instanceof NavigationEnd) {\r\n\r\n          const urlSegments = event.routerEvent.urlAfterRedirects.split('/');\r\n\r\n          const matchingChild = this.navItem.child.find(child => urlSegments.includes(child.path));\r\n          if (matchingChild) {\r\n            this.isOpenMenu = true;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, EventEmitter, Optional, Input, Output, ViewChild, QueryList, ANIMATION_MODULE_TYPE, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i3 from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ]),\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDrawerContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatDrawerContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatDrawerContent, isStandalone: true, selector: \"mat-drawer-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatDrawerContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDrawerContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-drawer-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatDrawerContent,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: MatDrawerContainer, decorators: [{\n                    type: Inject,\n                    args: [forwardRef(() => MatDrawerContainer)]\n                }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }] });\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    /** The side that the drawer is attached to. */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value !== this._position) {\n            // Static inputs in Ivy are set before the element is in the DOM.\n            if (this._isAttached) {\n                this._updatePositionInParent(value);\n            }\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() {\n        return this._disableClose;\n    }\n    set disableClose(value) {\n        this._disableClose = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n     * instead.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n        // because we don't know how the sidenav is being used, but in some cases it still makes\n        // sense to do it. The consumer can explicitly set `autoFocus`.\n        if (value == null) {\n            if (this.mode === 'side') {\n                return 'dialog';\n            }\n            else {\n                return 'first-tabbable';\n            }\n        }\n        return value;\n    }\n    set autoFocus(value) {\n        if (value === 'true' || value === 'false' || value == null) {\n            value = coerceBooleanProperty(value);\n        }\n        this._autoFocus = value;\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() {\n        return this._opened;\n    }\n    set opened(value) {\n        this.toggle(coerceBooleanProperty(value));\n    }\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _interactivityChecker, _doc, _container) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._interactivityChecker = _interactivityChecker;\n        this._doc = _doc;\n        this._container = _container;\n        this._focusTrap = null;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /** Whether the drawer is initialized. Used for disabling the initial animation. */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._opened = false;\n        /** Emits whenever the drawer has started animating. */\n        this._animationStarted = new Subject();\n        /** Emits whenever the drawer is done animating. */\n        this._animationEnd = new Subject();\n        /** Current state of the sidenav animation. */\n        this._animationState = 'void';\n        /** Event emitted when the drawer open state is changed. */\n        this.openedChange = \n        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n        new EventEmitter(/* isAsync */ true);\n        /** Event emitted when the drawer has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the drawer has started opening. */\n        this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n        /** Event emitted when the drawer has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the drawer has started closing. */\n        this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Event emitted when the drawer's position changes. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this.openedChange.subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus(this._openedVia || 'program');\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'keydown')\n                .pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed))\n                .subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n        });\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe((event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        });\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this._focusTrap) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        // When autoFocus is not on the sidenav, if the element cannot be focused or does\n        // not exist, focus the sidenav itself so the keyboard navigation still works.\n        // We need to check that `focus` is a function due to Universal.\n        switch (this.autoFocus) {\n            case false:\n            case 'dialog':\n                return;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n                    if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                        element.focus();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this.autoFocus);\n                break;\n        }\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus(focusOrigin) {\n        if (this.autoFocus === 'dialog') {\n            return;\n        }\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        const activeEl = this._doc.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterViewInit() {\n        this._isAttached = true;\n        // Only update the DOM position when the sidenav is positioned at\n        // the end since we project the sidenav before the content by default.\n        if (this._position === 'end') {\n            this._updatePositionInParent('end');\n        }\n        // Needs to happen after the position is updated\n        // so the focus trap anchors are in the right place.\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            this._updateFocusTrapState();\n        }\n    }\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    ngOnDestroy() {\n        this._focusTrap?.destroy();\n        this._anchor?.remove();\n        this._anchor = null;\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurs the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true, 'mouse');\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        if (isOpen && openedVia) {\n            this._openedVia = openedVia;\n        }\n        const result = this._setOpen(isOpen, \n        /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n        if (!isOpen) {\n            this._openedVia = null;\n        }\n        return result;\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param focusOrigin Origin to use when restoring focus.\n     */\n    _setOpen(isOpen, restoreFocus, focusOrigin) {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n        }\n        else {\n            this._animationState = 'void';\n            if (restoreFocus) {\n                this._restoreFocus(focusOrigin);\n            }\n        }\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // Trap focus only if the backdrop is enabled. Otherwise, allow end user to interact with the\n            // sidenav content.\n            this._focusTrap.enabled = !!this._container?.hasBackdrop;\n        }\n    }\n    /**\n     * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n     * when it's in the `end` position so that it comes after the content and the visual order\n     * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n     * started off as `end` and was changed to `start`.\n     */\n    _updatePositionInParent(newPosition) {\n        // Don't move the DOM node around on the server, because it can throw off hydration.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        const parent = element.parentNode;\n        if (newPosition === 'end') {\n            if (!this._anchor) {\n                this._anchor = this._doc.createComment('mat-drawer-anchor');\n                parent.insertBefore(this._anchor, element);\n            }\n            parent.appendChild(element);\n        }\n        else if (this._anchor) {\n            this._anchor.parentNode.insertBefore(element, this._anchor);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDrawer, deps: [{ token: i0.ElementRef }, { token: i2.FocusTrapFactory }, { token: i2.FocusMonitor }, { token: i3.Platform }, { token: i0.NgZone }, { token: i2.InteractivityChecker }, { token: DOCUMENT, optional: true }, { token: MAT_DRAWER_CONTAINER, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatDrawer, isStandalone: true, selector: \"mat-drawer\", inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, host: { attributes: { \"tabIndex\": \"-1\" }, listeners: { \"@transform.start\": \"_animationStarted.next($event)\", \"@transform.done\": \"_animationEnd.next($event)\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"@transform\": \"_animationState\" }, classAttribute: \"mat-drawer\" }, viewQueries: [{ propertyName: \"_content\", first: true, predicate: [\"content\"], descendants: true }], exportAs: [\"matDrawer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDrawer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer', exportAs: 'matDrawer', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        'tabIndex': '-1',\n                        '[@transform]': '_animationState',\n                        '(@transform.start)': '_animationStarted.next($event)',\n                        '(@transform.done)': '_animationEnd.next($event)',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [CdkScrollable], template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i2.FocusTrapFactory }, { type: i2.FocusMonitor }, { type: i3.Platform }, { type: i0.NgZone }, { type: i2.InteractivityChecker }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDrawerContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DRAWER_CONTAINER]\n                }] }], propDecorators: { position: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], disableClose: [{\n                type: Input\n            }], autoFocus: [{\n                type: Input\n            }], opened: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], openedStart: [{\n                type: Output\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], closedStart: [{\n                type: Output\n            }], onPositionChanged: [{\n                type: Output,\n                args: ['positionChanged']\n            }], _content: [{\n                type: ViewChild,\n                args: ['content']\n            }] } });\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    /** The drawer child with the `start` position. */\n    get start() {\n        return this._start;\n    }\n    /** The drawer child with the `end` position. */\n    get end() {\n        return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() {\n        return this._autosize;\n    }\n    set autosize(value) {\n        this._autosize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        return this._drawerHasBackdrop(this._start) || this._drawerHasBackdrop(this._end);\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** Drawers that belong to this container. */\n        this._drawers = new QueryList();\n        /** Event emitted when the drawer backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Emits on every ngDoCheck. Used for debouncing reflows. */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            });\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        this._autosize = defaultAutosize;\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject\n                .pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed))\n                .subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted\n            .pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n            .subscribe((event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange\n                .pipe(takeUntil(this._drawers.changes))\n                .subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n                this._validateDrawers();\n            });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged\n                .pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(() => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return ((this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over'));\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._drawerHasBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return ((this._isDrawerOpen(this._start) && this._drawerHasBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._drawerHasBackdrop(this._end)));\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n    // Whether argument drawer should have a backdrop when it opens\n    _drawerHasBackdrop(drawer) {\n        if (this._backdropOverride == null) {\n            return !!drawer && drawer.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDrawerContainer, deps: [{ token: i4.Directionality, optional: true }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MAT_DRAWER_DEFAULT_AUTOSIZE }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.2.0\", type: MatDrawerContainer, isStandalone: true, selector: \"mat-drawer-container\", inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatDrawerContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatDrawerContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatDrawer, descendants: true }], viewQueries: [{ propertyName: \"_userContent\", first: true, predicate: MatDrawerContent, descendants: true }], exportAs: [\"matDrawerContainer\"], ngImport: i0, template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-drawer-content>\\n    <ng-content></ng-content>\\n  </mat-drawer-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color);background-color:var(--mat-sidenav-content-background-color);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color);box-shadow:var(--mat-sidenav-container-elevation-shadow);background-color:var(--mat-sidenav-container-background-color);border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);width:var(--mat-sidenav-container-width);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"component\", type: MatDrawerContent, selector: \"mat-drawer-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDrawerContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer-container', exportAs: 'matDrawerContainer', host: {\n                        'class': 'mat-drawer-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatDrawerContainer,\n                        },\n                    ], standalone: true, imports: [MatDrawerContent], template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-drawer-content>\\n    <ng-content></ng-content>\\n  </mat-drawer-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color);background-color:var(--mat-sidenav-content-background-color);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color);box-shadow:var(--mat-sidenav-container-elevation-shadow);background-color:var(--mat-sidenav-container-background-color);border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);width:var(--mat-sidenav-container-width);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], ctorParameters: () => [{ type: i4.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatDrawer, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatDrawerContent]\n            }], _userContent: [{\n                type: ViewChild,\n                args: [MatDrawerContent]\n            }], autosize: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], backdropClick: [{\n                type: Output\n            }] } });\n\nclass MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSidenavContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatSidenavContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatSidenavContent, isStandalone: true, selector: \"mat-sidenav-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content mat-sidenav-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatSidenavContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSidenavContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-sidenav-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content mat-sidenav-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatSidenavContent,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: MatSidenavContainer, decorators: [{\n                    type: Inject,\n                    args: [forwardRef(() => MatSidenavContainer)]\n                }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }] });\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() {\n        return this._fixedInViewport;\n    }\n    set fixedInViewport(value) {\n        this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() {\n        return this._fixedTopGap;\n    }\n    set fixedTopGap(value) {\n        this._fixedTopGap = coerceNumberProperty(value);\n    }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() {\n        return this._fixedBottomGap;\n    }\n    set fixedBottomGap(value) {\n        this._fixedBottomGap = coerceNumberProperty(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSidenav, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatSidenav, isStandalone: true, selector: \"mat-sidenav\", inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, host: { attributes: { \"tabIndex\": \"-1\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"class.mat-sidenav-fixed\": \"fixedInViewport\", \"style.top.px\": \"fixedInViewport ? fixedTopGap : null\", \"style.bottom.px\": \"fixedInViewport ? fixedBottomGap : null\" }, classAttribute: \"mat-drawer mat-sidenav\" }, exportAs: [\"matSidenav\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSidenav, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav', exportAs: 'matSidenav', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer mat-sidenav',\n                        'tabIndex': '-1',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [CdkScrollable], template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], propDecorators: { fixedInViewport: [{\n                type: Input\n            }], fixedTopGap: [{\n                type: Input\n            }], fixedBottomGap: [{\n                type: Input\n            }] } });\nclass MatSidenavContainer extends MatDrawerContainer {\n    constructor() {\n        super(...arguments);\n        this._allDrawers = undefined;\n        // We need an initializer here to avoid a TS error.\n        this._content = undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSidenavContainer, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.2.0\", type: MatSidenavContainer, isStandalone: true, selector: \"mat-sidenav-container\", host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container mat-sidenav-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatSidenavContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatSidenavContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatSidenav, descendants: true }], exportAs: [\"matSidenavContainer\"], usesInheritance: true, ngImport: i0, template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-sidenav-content>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color);background-color:var(--mat-sidenav-content-background-color);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color);box-shadow:var(--mat-sidenav-container-elevation-shadow);background-color:var(--mat-sidenav-container-background-color);border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);width:var(--mat-sidenav-container-width);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"component\", type: MatSidenavContent, selector: \"mat-sidenav-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSidenavContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav-container', exportAs: 'matSidenavContainer', host: {\n                        'class': 'mat-drawer-container mat-sidenav-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatSidenavContainer,\n                        },\n                    ], standalone: true, imports: [MatSidenavContent], template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-sidenav-content>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color);background-color:var(--mat-sidenav-content-background-color);box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color);box-shadow:var(--mat-sidenav-container-elevation-shadow);background-color:var(--mat-sidenav-container-background-color);border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);width:var(--mat-sidenav-container-width);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape);border-bottom-left-radius:var(--mat-sidenav-container-shape);border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape);border-bottom-right-radius:var(--mat-sidenav-container-shape);border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatSidenav, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatSidenavContent]\n            }] } });\n\nclass MatSidenavModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSidenavModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSidenavModule, imports: [MatCommonModule,\n            CdkScrollableModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent], exports: [CdkScrollableModule,\n            MatCommonModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSidenavModule, imports: [MatCommonModule,\n            CdkScrollableModule, CdkScrollableModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSidenavModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        CdkScrollableModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, ContentChildren, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\nclass MatToolbarRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatToolbarRow, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatToolbarRow, isStandalone: true, selector: \"mat-toolbar-row\", host: { classAttribute: \"mat-toolbar-row\" }, exportAs: [\"matToolbarRow\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatToolbarRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-toolbar-row',\n                    exportAs: 'matToolbarRow',\n                    host: { 'class': 'mat-toolbar-row' },\n                    standalone: true,\n                }]\n        }] });\nclass MatToolbar {\n    constructor(_elementRef, _platform, document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        // TODO: make the document a required param when doing breaking changes.\n        this._document = document;\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n        }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    _checkToolbarMixedModes() {\n        if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            // Check if there are any other DOM nodes that can display content but aren't inside of\n            // a <mat-toolbar-row> element.\n            const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n                .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n                .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n                .some(node => !!(node.textContent && node.textContent.trim()));\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatToolbar, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatToolbar, isStandalone: true, selector: \"mat-toolbar\", inputs: { color: \"color\" }, host: { properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"class.mat-toolbar-multiple-rows\": \"_toolbarRows.length > 0\", \"class.mat-toolbar-single-row\": \"_toolbarRows.length === 0\" }, classAttribute: \"mat-toolbar\" }, queries: [{ propertyName: \"_toolbarRows\", predicate: MatToolbarRow, descendants: true }], exportAs: [\"matToolbar\"], ngImport: i0, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color);color:var(--mat-toolbar-container-text-color)}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font);font-size:var(--mat-toolbar-title-text-size);line-height:var(--mat-toolbar-title-text-line-height);font-weight:var(--mat-toolbar-title-text-weight);letter-spacing:var(--mat-toolbar-title-text-tracking);margin:0}.cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mdc-text-button-label-text-color:var(--mat-toolbar-container-text-color);--mdc-outlined-button-label-text-color:var(--mat-toolbar-container-text-color)}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height)}}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatToolbar, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-toolbar', exportAs: 'matToolbar', host: {\n                        'class': 'mat-toolbar',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                        '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color);color:var(--mat-toolbar-container-text-color)}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font);font-size:var(--mat-toolbar-title-text-size);line-height:var(--mat-toolbar-title-text-line-height);font-weight:var(--mat-toolbar-title-text-weight);letter-spacing:var(--mat-toolbar-title-text-tracking);margin:0}.cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mdc-text-button-label-text-color:var(--mat-toolbar-container-text-color);--mdc-outlined-button-label-text-color:var(--mat-toolbar-container-text-color)}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height)}}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { color: [{\n                type: Input\n            }], _toolbarRows: [{\n                type: ContentChildren,\n                args: [MatToolbarRow, { descendants: true }]\n            }] } });\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\nclass MatToolbarModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatToolbarModule, imports: [MatCommonModule, MatToolbar, MatToolbarRow], exports: [MatToolbar, MatToolbarRow, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatToolbarModule, imports: [MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatToolbarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatToolbar, MatToolbarRow],\n                    exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n","import * as i0 from '@angular/core';\nimport { Directive, Injectable, TemplateRef, Component, ViewEncapsulation, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { GuardsCheckEnd, RouterModule } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to the demo - app.component.html\n */\nclass BreadcrumbItemDirective {\n}\nBreadcrumbItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nBreadcrumbItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: BreadcrumbItemDirective, selector: \"[xngBreadcrumbItem]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbItemDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[xngBreadcrumbItem]',\n                }]\n        }] });\n\nconst PATH_PARAM = {\n    PREFIX: ':',\n    REGEX_IDENTIFIER: '/:[^/]+',\n    REGEX_REPLACER: '/[^/]+',\n};\nconst ALIAS_PREFIX = '@';\nconst isNonEmpty = (obj) => {\n    return obj && Object.keys(obj).length > 0;\n};\nclass BreadcrumbService {\n    constructor(activatedRoute, router) {\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        this.baseHref = '/';\n        /**\n         * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n         * Breadcrumbs can be set from anywhere (component, service) in the app.\n         * On every breadcrumb update check this store and use the info if available.\n         */\n        this.dynamicBreadcrumbStore = [];\n        /**\n         * breadcrumbList for the current route\n         * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n         * If effected, update the change and emit a new stream\n         */\n        this.currentBreadcrumbs = [];\n        this.previousBreadcrumbs = [];\n        /**\n         * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n         * Emits on every route change OR dynamic update of breadcrumb\n         */\n        this.breadcrumbs = new BehaviorSubject([]);\n        this.breadcrumbs$ = this.breadcrumbs.asObservable();\n        this.detectRouteChanges();\n    }\n    /**\n     * Whenever route changes build breadcrumb list again\n     */\n    detectRouteChanges() {\n        // Special case where breadcrumb service & component instantiates after a route is navigated.\n        // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\n        // This check is also required where  { initialNavigation: 'enabledBlocking' } is applied to routes\n        this.setupBreadcrumbs(this.activatedRoute.snapshot);\n        this.router.events\n            .pipe(filter((event) => event instanceof GuardsCheckEnd))\n            .subscribe((event) => {\n            // activatedRoute doesn't carry data when shouldReuseRoute returns false\n            // use the event data with GuardsCheckEnd as workaround\n            // Check for shouldActivate in case where the authGuard returns false the breadcrumbs shouldn't be changed\n            if (event.shouldActivate) {\n                this.setupBreadcrumbs(event.state.root);\n            }\n        });\n    }\n    setupBreadcrumbs(activatedRouteSnapshot) {\n        this.previousBreadcrumbs = this.currentBreadcrumbs;\n        // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n        const rootBreadcrumb = this.getRootBreadcrumb();\n        this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n        this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\n    }\n    getRootBreadcrumb() {\n        const rootConfig = this.router.config.find((config) => config.path === '');\n        const rootBreadcrumb = this.extractObject(rootConfig?.data?.breadcrumb);\n        const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n        if (isNonEmpty(rootBreadcrumb) || isNonEmpty(storeItem)) {\n            return {\n                ...storeItem,\n                ...rootBreadcrumb,\n                routeLink: this.baseHref,\n                ...this.getQueryParamsFromPreviousList('/'),\n            };\n        }\n    }\n    prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix) {\n        const { path, breadcrumb } = this.parseRouteData(activatedRouteSnapshot.routeConfig);\n        const resolvedSegment = this.resolvePathSegment(path, activatedRouteSnapshot);\n        const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n        const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n        const label = this.extractLabel(storeItem?.label || breadcrumb?.label, resolvedSegment);\n        let isAutoGeneratedLabel = false;\n        let autoGeneratedLabel = '';\n        if (!label) {\n            isAutoGeneratedLabel = true;\n            autoGeneratedLabel = resolvedSegment;\n        }\n        return {\n            ...storeItem,\n            ...breadcrumb,\n            label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\n            routeLink,\n            isAutoGeneratedLabel,\n            ...this.getQueryParamsFromPreviousList(routeLink),\n        };\n    }\n    prepareBreadcrumbList(activatedRouteSnapshot, routeLinkPrefix) {\n        if (activatedRouteSnapshot.routeConfig?.path) {\n            const breadcrumbItem = this.prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix);\n            this.currentBreadcrumbs.push(breadcrumbItem);\n            if (activatedRouteSnapshot.firstChild) {\n                return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, breadcrumbItem.routeLink + '/');\n            }\n        }\n        else if (activatedRouteSnapshot.firstChild) {\n            return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, routeLinkPrefix);\n        }\n        const lastCrumb = this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n        this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot);\n        // remove breadcrumb items that needs to be hidden\n        const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n        this.breadcrumbs.next(breadcrumbsToShow);\n    }\n    getFromStore(alias, routeLink) {\n        return this.dynamicBreadcrumbStore.find((item) => {\n            return ((alias && alias === item.alias) ||\n                (routeLink && routeLink === item.routeLink) ||\n                this.matchRegex(routeLink, item.routeRegex));\n        });\n    }\n    /**\n     * use exact match instead of regexp.test\n     * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n     */\n    matchRegex(routeLink, routeRegex) {\n        const match = routeLink.match(new RegExp(routeRegex));\n        return match?.[0] === routeLink;\n    }\n    /**\n     * if the path segment has route params, read the param value from url\n     * for each segment of route this gets called\n     *\n     * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n     */\n    resolvePathSegment(segment, activatedRouteSnapshot) {\n        //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n        if (segment.includes(PATH_PARAM.PREFIX)) {\n            Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\n                segment = segment.replace(`:${key}`, `${value}`);\n            });\n        }\n        return segment;\n    }\n    /**\n     * queryParams & fragments for previous breadcrumb path are copied over to new list\n     */\n    getQueryParamsFromPreviousList(routeLink) {\n        const { queryParams, fragment } = this.previousBreadcrumbs.find((item) => item.routeLink === routeLink) ||\n            {};\n        return { queryParams, fragment };\n    }\n    /**\n     * set current activated route query params to the last breadcrumb item\n     */\n    setQueryParamsForActiveBreadcrumb(lastItem, activatedRouteSnapshot) {\n        if (lastItem) {\n            const { queryParams, fragment } = activatedRouteSnapshot;\n            lastItem.queryParams = queryParams ? { ...queryParams } : undefined;\n            lastItem.fragment = fragment;\n        }\n    }\n    /**\n     * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n     * When both are defined, child takes precedence\n     *\n     * Ex: Below we are setting breadcrumb on both parent and child.\n     * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n     * { path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\n     *                                                AND\n     * children: [\n     *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n     * ]\n     */\n    parseRouteData(routeConfig) {\n        const { path, data } = routeConfig;\n        const breadcrumb = this.mergeWithBaseChildData(routeConfig, data?.breadcrumb);\n        return { path, breadcrumb };\n    }\n    /**\n     * get empty children of a module or Component. Empty child is the one with path: ''\n     * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n     */\n    mergeWithBaseChildData(routeConfig, config) {\n        if (!routeConfig) {\n            return this.extractObject(config);\n        }\n        let baseChild;\n        if (routeConfig.loadChildren) {\n            // To handle a module with empty child route\n            baseChild = routeConfig._loadedRoutes.find((route) => route.path === '');\n        }\n        else if (routeConfig.children) {\n            // To handle a component with empty child route\n            baseChild = routeConfig.children.find((route) => route.path === '');\n        }\n        const childConfig = baseChild?.data?.breadcrumb;\n        return childConfig\n            ? this.mergeWithBaseChildData(baseChild, {\n                ...this.extractObject(config),\n                ...this.extractObject(childConfig),\n            })\n            : this.extractObject(config);\n    }\n    /**\n     * Update breadcrumb dynamically\n     *\n     * key can be a path | alias\n     *\n     * 1) Using complete route path. route can be passed the same way you define angular routes\n     * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n     * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n     * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n     * ------------------------------------------ OR ------------------------------------------\n     * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n     * - update label Ex: set('@mentor', 'Enabler')\n     * - change visibility Ex: set('@mentorEdit', { skip: true })\n     *\n     *\n     * value can be string | BreadcrumbObject | BreadcrumbFunction\n     */\n    set(key, breadcrumb) {\n        const breadcrumbObject = this.extractObject(breadcrumb);\n        let updateArgs;\n        if (key.startsWith(ALIAS_PREFIX)) {\n            updateArgs = ['alias', { ...breadcrumbObject, alias: key.slice(1) }];\n        }\n        else if (key.includes(PATH_PARAM.PREFIX)) {\n            updateArgs = [\n                'routeRegex',\n                { ...breadcrumbObject, routeRegex: this.buildRegex(key) },\n            ];\n        }\n        else {\n            updateArgs = [\n                'routeLink',\n                { ...breadcrumbObject, routeLink: this.ensureLeadingSlash(key) },\n            ];\n        }\n        // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\n        // change it to false since this is user supplied value\n        updateArgs[1].isAutoGeneratedLabel = false;\n        this.updateStore(...updateArgs);\n        this.updateCurrentBreadcrumbs(...updateArgs);\n    }\n    /**\n     * Update the store to reuse for dynamic declarations\n     * If the store already has this route definition update it, else add\n     */\n    updateStore(key, breadcrumb) {\n        const storeItemIndex = this.dynamicBreadcrumbStore.findIndex((item) => {\n            return breadcrumb[key] === item[key];\n        });\n        if (storeItemIndex > -1) {\n            this.dynamicBreadcrumbStore[storeItemIndex] = {\n                ...this.dynamicBreadcrumbStore[storeItemIndex],\n                ...breadcrumb,\n            };\n        }\n        else {\n            this.dynamicBreadcrumbStore.push({ ...breadcrumb });\n        }\n    }\n    /**\n     * If breadcrumb is present in current breadcrumbs update it and emit new stream\n     */\n    updateCurrentBreadcrumbs(key, breadcrumb) {\n        const itemIndex = this.currentBreadcrumbs.findIndex((item) => {\n            return key === 'routeRegex'\n                ? this.matchRegex(item.routeLink, breadcrumb[key])\n                : breadcrumb[key] === item[key];\n        });\n        if (itemIndex > -1) {\n            this.currentBreadcrumbs[itemIndex] = {\n                ...this.currentBreadcrumbs[itemIndex],\n                ...breadcrumb,\n            };\n            const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n            this.breadcrumbs.next([...breadcrumbsToShow]);\n        }\n    }\n    /**\n     * For a route with path param, we create regex dynamically from angular route syntax\n     * '/mentor/:id' becomes '/mentor/[^/]',\n     * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n     */\n    buildRegex(path) {\n        return this.ensureLeadingSlash(path).replace(new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'), PATH_PARAM.REGEX_REPLACER);\n    }\n    ensureLeadingSlash(path) {\n        return path.startsWith('/') ? path : `/${path}`;\n    }\n    /**\n     * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n     *\n     * string: simple static breadcrumb label for a path\n     * function: callback that gets invoked with resolved path param\n     * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n     */\n    extractLabel(config, resolvedParam) {\n        const label = typeof config === 'object' ? config.label : config;\n        if (typeof label === 'function') {\n            return label(resolvedParam);\n        }\n        return label;\n    }\n    extractObject(config) {\n        // don't include {label} if config is undefined. This is important since we merge the configs\n        if (config &&\n            (typeof config === 'string' || typeof config === 'function')) {\n            return { label: config };\n        }\n        return config || {};\n    }\n}\nBreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });\nBreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }]; } });\n\nclass BreadcrumbComponent {\n    constructor(breadcrumbService, activateRoute) {\n        this.breadcrumbService = breadcrumbService;\n        this._separator = '/';\n        /**\n         * If true, breadcrumb is auto generated even without any mapping label\n         * Default label is same as route segment\n         */\n        this.autoGenerate = true;\n        /**\n         * By default query params will be preserved with breadcrumbs\n         */\n        this.preserveQueryParams = true;\n        /**\n         * By default query fragments will be preserved with breadcrumbs\n         */\n        this.preserveFragment = true;\n        /**\n         * custom class provided by consumer to increase specificity\n         * This will benefit to override styles that are conflicting\n         */\n        this.class = '';\n        this.setupMessage = 'not set up yet';\n        this.someParameterValue = null;\n        // breadcrumb inside ngIf works only this way\n        activateRoute.params.subscribe((params) => {\n            this.setupComponent(params['someParam']);\n        });\n    }\n    /**\n     * separator between breadcrumbs, defaults to '/'.\n     * User can customize separator either by passing a String or Template\n     *\n     * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n     *\n     * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n     * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n     */\n    set separator(value) {\n        if (value instanceof TemplateRef) {\n            this.separatorTemplate = value;\n            this._separator = undefined;\n        }\n        else {\n            this.separatorTemplate = undefined;\n            this._separator = value || '/';\n        }\n    }\n    get separator() {\n        return this._separator;\n    }\n    setupComponent(someParam) {\n        this.setupMessage = 'set up at ' + new Date();\n        this.someParameterValue = someParam;\n    }\n    ngOnInit() {\n        this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(map((breadcrumbs) => {\n            return breadcrumbs\n                .filter((breadcrumb) => {\n                // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n                // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n                if (this.autoGenerate) {\n                    return true;\n                }\n                return !breadcrumb.isAutoGeneratedLabel;\n            })\n                .map((breadcrumb) => {\n                // Do not mutate breadcrumb as its source of truth.\n                // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n                const { routeInterceptor, routeLink } = breadcrumb;\n                return {\n                    ...breadcrumb,\n                    routeLink: routeInterceptor?.(routeLink, breadcrumb) || routeLink,\n                };\n            });\n        }));\n    }\n}\nBreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbComponent, deps: [{ token: BreadcrumbService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nBreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0\", type: BreadcrumbComponent, selector: \"xng-breadcrumb\", inputs: { autoGenerate: \"autoGenerate\", preserveQueryParams: \"preserveQueryParams\", preserveFragment: \"preserveFragment\", class: \"class\", anchorTarget: \"anchorTarget\", separator: \"separator\" }, queries: [{ propertyName: \"itemTemplate\", first: true, predicate: BreadcrumbItemDirective, descendants: true, read: TemplateRef }], ngImport: i0, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i1.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"pipe\", type: i3.AsyncPipe, name: \"async\" }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'xng-breadcrumb', encapsulation: ViewEncapsulation.None, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: BreadcrumbService }, { type: i1.ActivatedRoute }]; }, propDecorators: { itemTemplate: [{\n                type: ContentChild,\n                args: [BreadcrumbItemDirective, { static: false, read: TemplateRef }]\n            }], autoGenerate: [{\n                type: Input\n            }], preserveQueryParams: [{\n                type: Input\n            }], preserveFragment: [{\n                type: Input\n            }], class: [{\n                type: Input\n            }], anchorTarget: [{\n                type: Input\n            }], separator: [{\n                type: Input,\n                args: ['separator']\n            }] } });\n\nclass BreadcrumbModule {\n}\nBreadcrumbModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBreadcrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, declarations: [BreadcrumbComponent, BreadcrumbItemDirective], imports: [CommonModule, RouterModule], exports: [BreadcrumbComponent, BreadcrumbItemDirective] });\nBreadcrumbModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, imports: [CommonModule, RouterModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [BreadcrumbComponent, BreadcrumbItemDirective],\n                    imports: [CommonModule, RouterModule],\n                    exports: [BreadcrumbComponent, BreadcrumbItemDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of xng-breadcrumb\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreadcrumbComponent, BreadcrumbItemDirective, BreadcrumbModule, BreadcrumbService };\n"],"x_google_ignoreList":[2,3,4]}