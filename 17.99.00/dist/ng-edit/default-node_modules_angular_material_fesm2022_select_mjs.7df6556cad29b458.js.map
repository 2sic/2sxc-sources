{"version":3,"file":"default-node_modules_angular_material_fesm2022_select_mjs.7df6556cad29b458.js","mappings":"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","names":["_c0","_c1","_c2","_c3","MatSelect_Conditional_4_Template","rf","ctx","i0","ctx_r1","placeholder","MatSelect_Conditional_5_Conditional_1_Template","MatSelect_Conditional_5_Conditional_2_Template","triggerValue","MatSelect_Conditional_5_Template","customTrigger","MatSelect_ng_template_10_Template","_r3","$event","_panelDoneAnimatingStream","next","toState","_handleKeydown","_getPanelTheme","panelClass","id","multiple","ariaLabel","_getPanelAriaLabelledby","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","opacity","transform","animate","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","providedIn","factory","overlay","inject","Overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_TRIGGER","MatSelectChange","constructor","source","value","this","MatSelect","_scrollOptionIntoView","index","option","options","toArray","panel","nativeElement","labelCount","_countGroupLabelsBeforeOption","optionGroups","element","_getHostElement","scrollTop","_getOptionScrollPosition","offsetTop","offsetHeight","_positioningSettled","_keyManager","activeItemIndex","_getChangeEvent","focused","_focused","_panelOpen","hideSingleSelectionIndicator","_hideSingleSelectionIndicator","_syncParentProperties","_placeholder","stateChanges","required","_required","ngControl","control","hasValidator","Validators","_multiple","compareWith","_compareWith","fn","_selectionModel","_initializeSelection","_value","newValue","_assignValue","_onChange","errorStateMatcher","_errorStateTracker","matcher","_id","_uid","errorState","_viewportRuler","_changeDetectorRef","_unusedNgZone","defaultErrorStateMatcher","_elementRef","_dir","parentForm","parentFormGroup","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_positions","originX","originY","overlayX","overlayY","o1","o2","_triggerAriaLabelledBy","_destroy","Subject","disableAutomaticLabeling","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","controlType","disabled","disableRipple","disableOptionCentering","panelWidth","_initialized","optionSelectionChanges","defer","changes","pipe","startWith","switchMap","merge","map","onSelectionChange","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","_trackedModal","_skipPredicate","panelOpen","valueAccessor","typeaheadDebounceInterval","_ErrorStateTracker","_scrollStrategyFactory","_scrollStrategy","parseInt","ngOnInit","SelectionModel","distinctUntilChanged","takeUntil","subscribe","_panelDoneAnimating","change","_overlayWidth","_getOverlayWidth","_preferredOverlayOrigin","detectChanges","ngAfterContentInit","complete","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","setAttribute","removeAttribute","_previousControl","undefined","updateErrorState","ngOnChanges","userAriaDescribedBy","withTypeAhead","ngOnDestroy","destroy","_clearFromModal","toggle","close","open","_canOpen","getConnectedOverlayOrigin","_applyModalPanelOwnership","withHorizontalOrientation","_highlightCorrectOption","markForCheck","modal","closest","panelId","removeAriaReferencedId","addAriaReferencedId","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","positionChange","take","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","preferredOrigin","CdkOverlayOrigin","elementRef","getBoundingClientRect","width","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","firstEnabledOptionIndex","length","get","labelId","getLabelId","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","static","ɵfac","t","i1","i2","i3","i4","MAT_FORM_FIELD","i5","ɵcmp","type","selectors","contentQueries","dirIndex","MatOption","MAT_OPTGROUP","_t","first","viewQuery","CdkConnectedOverlay","hostAttrs","hostVars","hostBindings","toString","inputs","None","HasDecoratorInputTransform","booleanAttribute","numberAttribute","outputs","exportAs","standalone","features","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","decls","vars","consts","template","_r1","fallbackOverlayOrigin_r4","dependencies","NgClass","styles","encapsulation","data","animation","changeDetection","MatSelectTrigger","ɵdir","MatSelectModule","ɵmod","ɵinj","providers","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/select.mjs"],"sourcesContent":["import { Overlay, CdkOverlayOrigin, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { NgClass, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, booleanAttribute, numberAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Self, Attribute, ContentChildren, ContentChild, Input, ViewChild, Output, Directive, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, _ErrorStateTracker, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nexport { MatOptgroup, MatOption } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, filter, map, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nclass MatSelect {\n    /** Scrolls a particular option into the view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    /** Called when the panel has been opened and the overlay has settled on its final position. */\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    /** Creates a change event object that should be emitted by the select. */\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = value;\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = value;\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /** Whether the select is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    constructor(_viewportRuler, _changeDetectorRef, \n    /**\n     * @deprecated Unused param, will be removed.\n     * @breaking-change 19.0.0\n     */\n    _unusedNgZone, defaultErrorStateMatcher, _elementRef, _dir, parentForm, parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Disable the automatic labeling to avoid issues like #27241.\n         * @docs-private\n         */\n        this.disableAutomaticLabeling = true;\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        /** Whether the select is disabled. */\n        this.disabled = false;\n        /** Whether ripples in the select are disabled. */\n        this.disableRipple = false;\n        /** Tab index of the select. */\n        this.tabIndex = 0;\n        this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n        this._multiple = false;\n        /** Whether to center the active option over the trigger. */\n        this.disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /**\n         * Width of the panel. If set to `auto`, the panel will match the trigger width.\n         * If set to null or an empty string, the panel will grow to match the longest option's text.\n         */\n        this.panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n            ? this._defaultOptions.panelWidth\n            : 'auto';\n        this._initialized = new Subject();\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._initialized.pipe(switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n        // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n        // recommendation.\n        //\n        // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n        // makes a few exceptions for compound widgets.\n        //\n        // From [Developing a Keyboard Interface](\n        // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n        //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n        //   Listbox...\"\n        //\n        // The user can focus disabled options using the keyboard, but the user cannot click disabled\n        // options.\n        this._skipPredicate = (option) => {\n            if (this.panelOpen) {\n                // Support keyboard focusing disabled options in an ARIA listbox.\n                return false;\n            }\n            // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n            // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n            // closed.\n            return option.disabled;\n        };\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this.typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initialized.next();\n        this._initialized.complete();\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by the input, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (!this._canOpen()) {\n            return;\n        }\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        this._applyModalPanelOwnership();\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n            // Required for the MDC form field to pick up when the overlay has been closed.\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Refreshes the error state of the select. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this.typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelect, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.2.0\", type: MatSelect, isStandalone: true, selector: \"mat-select\", inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute], placeholder: \"placeholder\", required: [\"required\", \"required\", booleanAttribute], multiple: [\"multiple\", \"multiple\", booleanAttribute], disableOptionCentering: [\"disableOptionCentering\", \"disableOptionCentering\", booleanAttribute], compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: [\"typeaheadDebounceInterval\", \"typeaheadDebounceInterval\", numberAttribute], sortComparator: \"sortComparator\", id: \"id\", panelWidth: \"panelWidth\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], exportAs: [\"matSelect\"], usesOnChanges: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform)}\"], dependencies: [{ kind: \"directive\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { kind: \"directive\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\", \"cdkConnectedOverlayDisposeOnNavigation\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], standalone: true, imports: [CdkOverlayOrigin, CdkConnectedOverlay, NgClass], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform)}\"] }]\n        }], ctorParameters: () => [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], multiple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableOptionCentering: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatSelectTrigger, isStandalone: true, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                    standalone: true,\n                }]\n        }] });\n\nclass MatSelectModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectModule, imports: [CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            MatSelect,\n            MatSelectTrigger], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        OverlayModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, matSelectAnimations };\n"],"x_google_ignoreList":[0]}