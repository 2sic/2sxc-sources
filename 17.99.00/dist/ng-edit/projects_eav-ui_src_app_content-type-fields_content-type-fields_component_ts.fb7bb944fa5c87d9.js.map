{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_content-type-fields_component_ts.fb7bb944fa5c87d9.js","mappings":"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","names":["EditPrep","editId","id","EntityId","newMetadata","key","typeName","keyDef","ContentTypeName","For","createFor","Target","target","TargetType","targetType","Number","keyType","Guid","String","i0","_r1","ctx_r1","do","metadataCount","_r3","field","imageConfiguration","entityId","_r4","Permissions","Count","_r5","shareText","shareOrInheritIcon","_r6","_r7","EditInfo","DisableRename","DisableDelete","IsTitle","ContentTypeFieldsActionsComponent","BaseComponent","constructor","super","agInit","params","this","data","Metadata","Object","keys","filter","length","enablePermissions","InputType","InputTypeConstants","StringWysiwyg","Type","DataTypeConstants","Hyperlink","clickToConfigure","ss","SysSettings","Share","InheritMetadataOf","refresh","verb","static","t","fesm2022_core","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","ContentTypeFieldsActionsComponent_Conditional_1_Template","ContentTypeFieldsActionsComponent_Conditional_2_Template","ContentTypeFieldsActionsComponent_Conditional_3_Template","ContentTypeFieldsActionsComponent_Conditional_4_Template","ContentTypeFieldsActionsComponent_Conditional_5_Template","ContentTypeFieldsActionsComponent_Conditional_6_Template","ContentTypeFieldsActionsComponent_Conditional_7_Template","ContentTypeFieldsActionsComponent_Conditional_8_Template","ContentTypeFieldsActionsComponent_ng_template_14_Template","DisableMetadata","DisableEdit","isRecommended","menu_r8","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","MatMenuModule","i4","TippyDirective","styles","changeInputType","value","ContentTypeFieldsInputTypeComponent","onChangeInputType","ContentTypeFieldsInputTypeComponent_Conditional_0_Template","ContentTypeFieldsInputTypeComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ContentTypeFieldsSpecialComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent_Conditional_2_Template","setTitle","isTitle","ContentTypeFieldsTitleComponent","onSetTitle","ContentTypeFieldsTitleComponent_Conditional_1_Template","ContentTypeFieldsTitleComponent_Conditional_2_Template","ReadOnly","ContentTypeFieldsTypeComponent","icon","calculateTypeIcon","SharingOrInheriting","None","Sharing","Inheriting","closeDialog","message","dialogData","chooseShare","chooseInherit","field_r5","ContentType","Name","field_r6","StaticName","field_r7","row_r9","_r8","$implicit","inheritField","_c0","guid","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_th_3_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_td_4_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_th_6_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_td_7_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_th_9_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_td_10_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_tr_11_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_tr_12_Template","shareableFields","displayedShareableFieldsColumns","ShareOrInheritDialogComponent_Conditional_9_Conditional_1_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_2_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_3_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_Template","state","sharingOrInheriting","tmp_4_0","viewModel$","_r10","save","isSaveDisabled","ShareOrInheritDialogComponent","dialogRef","contentTypesFieldsService","dialog","viewContainerRef","changeDetectorRef","initialState","shareableFields$","BehaviorSubject","undefined","inject","FeaturesService","fieldShareConfigManagement","isEnabled","FeatureNames","FieldShareConfigManagement","ngOnInit","title","getShareableFieldsFor","AttributeId","combineLatest","pipe","map","next","subscriptions","add","share","Id","subscribe","close","inherit","openFeatureDialog","MAT_DIALOG_DATA","FeatureDetailService","ShareOrInheritDialogComponent_Conditional_5_Template","ShareOrInheritDialogComponent_Conditional_7_Template","ShareOrInheritDialogComponent_Conditional_8_Template","ShareOrInheritDialogComponent_Conditional_9_Template","ShareOrInheritDialogComponent_Conditional_10_Template","MatButtonModule","MatCardModule","i5","MatTableModule","i6","NgClass","AsyncPipe","TranslateModule","i7","FeatureIconIndicatorComponent","$event","onRowDragEnter","onRowDragEnd","onRowDragMove","onGridReady","onSortChanged","onFilterChanged","vm_r3","contentType","Label","fields","gridOptions","sortApplied","filterApplied","ContentTypeFieldsComponent","BaseWithChildDialogComponent","router","route","contentTypesService","snackBar","contentType$","fields$","buildGridOptions","rowDragSuppressed","contentTypeStaticName","snapshot","paramMap","get","fetchFields","childDialogClosed$","ngOnDestroy","complete","gridApi","api","columnApi","event","setEnableCellTextSelection","setSuppressRowDrag","idArray","reOrder","movingNode","node","overNode","overData","newFields","fromIndex","indexOf","toIndex","moveInArray","clearFocusedCell","arr","element","splice","columnStates","getColumnState","some","sort","suppressRowDrag","filterModel","getFilterModel","fieldsFiltered","shouldSuppress","navigate","relativeTo","nameCellRenderer","currentField","inputType","EmptyFieldHelpers","endsPreviousGroup","isGroupOpen","isGroupStart","isGroupEnd","callback","retrieveContentType","of","getFields","forkJoin","editFieldMetadata","ConfigTypes","open","duration","form","items","createItemDefinition","formUrl","convertFormToUrl","metadataType","keyForMdLookup","replace","newItemTypeName","existingMd","eavConstants","metadata","attribute","Prefill","rename","delete","confirm","openPermissions","GoToPermissions","getUrlAttribute","openImageConfiguration","console","log","imgConfig","Error","itemIdentifier","openMetadata","url","GoToMetadata","shareOrInherit","autoFocus","width","afterClosed","defaultGridOptions","getRowClass","rowClass","DisableSort","push","columnDefs","rowDrag","cellClass","split","valueGetter","cellRenderer","cellRendererParams","ColumnDefinitions","TextWide","headerName","onCellClicked","headerClass","sortable","substring","flex","minWidth","All","Notes","ActionsPinnedRight5","ContentTypesService","ContentTypesFieldsService","ContentTypeFieldsComponent_Conditional_0_Template","tmp_0_0","RouterOutlet","MatDialogActions","ToggleDebugDirective","SxcGridModule","i8","TrueFalseComponent","trueIcon","falseIcon","reverse","_angular_core__WEBPACK_IMPORTED_MODULE_0__","encapsulation","AgBoolCellIconsDefault","states","true","tooltip","false","AgBoolIconRenderer_Conditional_1_ng_container_1_Template","ctx_r0","showIcon_r2","clickable","AgBoolIconRenderer","allSettings","settings","d","getUrl","core","AgBoolIconRenderer_Conditional_1_Template","AgBoolIconRenderer_Conditional_2_Template","AgBoolIconRenderer_ng_template_3_Template","ActionsPinnedRight1","pinned","ActionsPinnedRight3","ActionsPinnedRight4","ActionsPinnedRight6","ActionsPinnedRight7","IconShow","BooleanFilterComponent","IsHidden","Items","Fields","Character","Boolean","Boolean2","Boolean3","TextWideType","TextWideMin100","TextWideFlex3","TextNarrow","TextWideActionClass","EavLogger","events","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","filterParams","isFilterActive","doesFilterPass","colDef","column","context","getValue","toString","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","FormsModule","MatRadioModule","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵfac","ɵcmp","type","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","inputs","HasDecoratorInputTransform","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/models/edit-form.model.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.html","./projects/eav-ui/src/app/content-type-fields/share-or-inherit-dialog/share-or-inherit-dialog-models.ts","./projects/eav-ui/src/app/content-type-fields/share-or-inherit-dialog/share-or-inherit-dialog.component.html","./projects/eav-ui/src/app/content-type-fields/share-or-inherit-dialog/share-or-inherit-dialog.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-params.ts","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.component.ts","./projects/eav-ui/src/app/shared/ag-grid/column-definitions.ts","./projects/eav-ui/src/app/shared/components/base-with-child-dialog.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { EavFor } from '../../edit/shared/models/eav';\r\nimport { MetadataKeyDefinition } from '../constants/eav.constants';\r\nimport { EditInfo } from './edit-info';\r\n\r\n// 2dm - new helper to reduce code when creating item identifiers\r\n// TODO: @2dg - try to replace as many direct object creations with this as possible\r\nexport class EditPrep {\r\n\r\n  static editId(id: number): ItemEditIdentifier {\r\n    return { EntityId: id } satisfies ItemEditIdentifier;\r\n  }\r\n\r\n  // TODO: @2dg - TO FIND where this should be used, look for \"For:\" in the code\r\n  static newMetadata<T>(key: T, typeName: string, keyDef: MetadataKeyDefinition): ItemAddIdentifier {\r\n    return {\r\n      ContentTypeName: typeName,\r\n      For: EditPrep.createFor(keyDef, key)\r\n    } satisfies ItemAddIdentifier;\r\n  }\r\n\r\n  static createFor<T>(keyDef: MetadataKeyDefinition, key: T): EavFor {\r\n    return {\r\n      Target: keyDef.target,\r\n      TargetType: keyDef.targetType,\r\n      ...(\r\n        typeof(key) == 'number'\r\n          ? { Number: key as number }\r\n          : keyDef.keyType == 'guid'\r\n            ? { Guid: key as string }\r\n            : { String: key as string }\r\n      )\r\n    } satisfies EavFor;\r\n\r\n  }\r\n}\r\n\r\n/**\r\n * Type for edit form.\r\n * To add new item send newItem and to edit existing item send editItems\r\n */\r\nexport interface EditForm {\r\n  items: (ItemIdentifier)[];\r\n}\r\n\r\nexport type ItemIdentifier = ItemAddIdentifier | ItemEditIdentifier | ItemInListIdentifier;\r\n\r\nexport type ItemIdentifierHeader = ItemIdentifier & ItemIdentifierEditConfig;\r\n\r\n// export interface ItemIdentifierHeader extends ItemIdentifierShared, ItemIdentifierEditConfig {\r\n//   // 2023-05-15 seems unused - TODO: probably remove from backend as well\r\n//   // Add?: boolean;\r\n//   ContentTypeName: string;\r\n//   DuplicateEntity?: number;\r\n//   EntityId: number;\r\n//   // 2023-05-15 seems unused - TODO: probably remove from backend as well\r\n//   // For?: EavFor;\r\n//   // 2023-05-15 seems unused - TODO: probably remove from backend as well\r\n//   // Guid: string;\r\n//   // 2023-05-15 seems unused - TODO: probably remove from backend as well\r\n//   // Index?: number;\r\n  \r\n//   // 2023-05-15 seems unused\r\n//   // Metadata?: EavEntity[];\r\n//   // 2023-05-15 now in base interface\r\n//   // Prefill?: Record<string, any>;\r\n\r\n//   // 2023-05-15 seems unused - TODO: probably remove from backend as well\r\n//   // Title?: string;\r\n// }\r\n\r\nexport interface ItemIdentifierInbound {\r\n  /** inbound fields, coming from the toolbar */\r\n  UiFields?: string;\r\n  Parameters?: Record<string, unknown>;\r\n}\r\n\r\nexport interface ItemIdentifierShared {\r\n\r\n  /** Prefill form with data */\r\n  Prefill?: Record<string, unknown>;\r\n\r\n  /**\r\n   * New way to transport a random amount of properties back and forth\r\n   * - IMPORTANT: this is only after conversion to funky url\r\n   * - before you must use Parameters on the main object?\r\n   */\r\n  ClientData?: {\r\n    fields?: string;\r\n    parameters?: Record<string, unknown>;\r\n    [key: string]: unknown;\r\n  };\r\n\r\n  /** Experimental 17.10+ */\r\n  clientId?: number;\r\n}\r\n\r\nexport interface ItemEditIdentifier extends ItemIdentifierShared {\r\n  EntityId: number;\r\n}\r\n\r\nexport interface ItemAddIdentifier extends ItemIdentifierShared {\r\n  /** Content type */\r\n  ContentTypeName: string;\r\n  /** Add item as metadata to another item */\r\n  For?: EavFor;\r\n  /** @deprecated 2sxc 9 Metadata object */\r\n  Metadata?: LegacyMetadata;\r\n\r\n  /** Prefill form with data from another entity */\r\n  DuplicateEntity?: number;\r\n}\r\n\r\n/**\r\n * This is both an item in a content-group, as well as an item in a list\r\n */\r\nexport interface ItemInListIdentifier extends ItemIdentifierShared {\r\n  Add: boolean;\r\n  Index: number;\r\n  Parent: string;\r\n  Field: string;\r\n\r\n  EntityId?: number;\r\n}\r\n\r\nexport interface ViewOrFileIdentifier {\r\n  Edition?: string;\r\n  EntityId?: number;\r\n  IsShared: boolean;\r\n  Path: string;\r\n}\r\n\r\n/** @deprecated 2sxc 9 Metadata object */\r\nexport interface LegacyMetadata {\r\n  key: string;\r\n  keyType: string;\r\n  targetType: number;\r\n}\r\n\r\n\r\nexport interface ItemIdentifierEditConfig {\r\n  /** Information if this item is read-only */\r\n  EditInfo?: EditInfo;\r\n  /** Determines if this item is currently non-existing / empty - so if this doesn't change it should also save empty */\r\n  IsEmpty: boolean;\r\n  /** Determines if this item can be empty, so it is allowed to be removed */\r\n  IsEmptyAllowed: boolean;\r\n}","<div class=\"actions-component\">\r\n  <!-- Metadata Button -->\r\n  @if (!field.EditInfo.DisableMetadata) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Metadata\" (click)=\"do('metadata')\">\r\n      <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      >local_offer</mat-icon>\r\n    </div>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <!-- Image Config Button -->\r\n  @if (!field.EditInfo.DisableEdit && field.imageConfiguration.isRecommended) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Image Configuration\" (click)=\"do('image')\">\r\n      <mat-icon [matBadge]=\"field.imageConfiguration.entityId ? 1 : 0\" matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!field.imageConfiguration.entityId\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n        matBadgeColor=\"accent\">\r\n        filter-center-focus\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled\" tippy=\"no image configuration for this field\">\r\n      <mat-icon [matBadge]=\"field.imageConfiguration.entityId ? 1 : 0\" matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!field.imageConfiguration.entityId\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n        matBadgeDisabled=\"true\">\r\n        filter-center-focus\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <!-- Permissions Button -->\r\n  @if (!field.EditInfo.DisableEdit && enablePermissions) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Permissions\" (click)=\"do('permissions')\">\r\n      <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!field.Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        person\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled\" tippy=\"no permissions to configure on this field\">\r\n      <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!field.Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        person\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n\r\n  <!-- Share Button -->\r\n  <!--\r\n    TODO: @SDV pls enhance as follows\r\n    ✅ If share is on or InheritMetadata is on, show various icons (already done)\r\n    ✅ If neither is on, it should not show an icon, until mouseover, then it should show the share icon to indicate it can be added\r\n    ❓ If the click should add sharing, open a dialog to configure share\r\n        - if there is no share it should Title \"Field Metadata Sharing\" show with the question \"Do you want to enable sharing to this field?\"\r\n          - if yes, it should call an endpoint on field/share(appId, attributeId, share: true, hide: false) (just add a todo in the code which will call the endpoint)\r\n        - If Share is already enabled, the Title should be \"Field Metadata Sharing\" (same) and content \"Shared as: [field.Guid]\"\r\n        - If it's in inherit mode, different dialog Title \"Field Inherits Metadata\", content \"Inherits from: [field.SysSettings.InheritMetadataOf]\"\r\n          - there is no endpoint to call here, because inherit is configured on create (separate todo)\r\n  -->\r\n  @if (shareOrInheritIcon() != '') {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\">\r\n        {{ shareOrInheritIcon() }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled eav-hover-icon-div\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\" class=\"eav-hover-icon disabled\">\r\n        share\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <!-- More Button -->\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<!-- More Menu -->\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableRename\" (click)=\"do('rename')\">\r\n      <mat-icon>text_fields</mat-icon>\r\n      <span>Rename</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableDelete || field.IsTitle\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy } from '@angular/core';\r\nimport { DataTypeConstants } from '../constants/data-type.constants';\r\nimport { InputTypeConstants } from '../constants/input-type.constants';\r\nimport { Field } from '../models/field.model';\r\nimport { ContentTypeFieldsActions, ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-actions',\r\n  templateUrl: './content-type-fields-actions.component.html',\r\n  styleUrls: ['./content-type-fields-actions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    MatMenuModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsActionsComponent extends BaseComponent implements ICellRendererAngularComp, OnDestroy {\r\n  field: Field;\r\n  metadataCount: number;\r\n  enablePermissions: boolean;\r\n  private params: ICellRendererParams & ContentTypeFieldsActionsParams;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsActionsParams): void {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    this.metadataCount = this.field.Metadata ? Object.keys(this.field.Metadata).filter(key => key !== 'merged').length : 0;\r\n    this.enablePermissions = this.field.InputType === InputTypeConstants.StringWysiwyg || this.field.Type === DataTypeConstants.Hyperlink;\r\n  }\r\n\r\n  // #region Sharing Info for better icons #SharedFieldDefinition\r\n\r\n  shareText(): string {\r\n    const clickToConfigure = 'click to configure sharing';\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return clickToConfigure;\r\n    return ss.Share\r\n      ? 'shared enabled as ' + this.field.Guid\r\n      : ss.InheritMetadataOf\r\n        ? 'inherits ' + ss.InheritMetadataOf\r\n        : clickToConfigure;\r\n  }\r\n\r\n  shareOrInheritIcon(): string {\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return '';\r\n    return ss.Share\r\n      ? 'share'\r\n      : ss.InheritMetadataOf ? 'adjust' : '';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentTypeFieldsActions): void {\r\n    this.params.do(verb, this.field);\r\n  }\r\n\r\n}\r\n","@if (!field.EditInfo.DisableEdit) {\r\n  <div matRipple class=\"input-component highlight\" (click)=\"changeInputType()\">\r\n    <div class=\"text\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n@if (field.EditInfo.DisableEdit) {\r\n  <div class=\"input-component disabled\">\r\n    <div class=\"text disabled\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../models/field.model';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-input-type',\r\n    templateUrl: './content-type-fields-input-type.component.html',\r\n    styleUrls: ['./content-type-fields-input-type.component.scss'],\r\n    standalone: true,\r\n    imports: [MatRippleModule, MatIconModule],\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  field: Field;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsInputTypeParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsInputTypeParams): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  changeInputType(): void {\r\n    this.params.onChangeInputType(this.field);\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  @if (hasFormulas) {\r\n    <mat-icon tippy=\"Has Formulas\">functions</mat-icon>\r\n  }\r\n  @if (isEphemeral) {\r\n    <mat-icon tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../models/field.model';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-special',\r\n  templateUrl: './content-type-fields-special.component.html',\r\n  styleUrls: ['./content-type-fields-special.component.scss'],\r\n  standalone: true,\r\n  imports: [MatIconModule,],\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  @if (!field.EditInfo.ReadOnly) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Use as title field\"\r\n      (click)=\"setTitle()\">\r\n      <mat-icon>{{ isTitle ? 'star' : 'star_outline' }}</mat-icon>\r\n    </div>\r\n  }\r\n  @if (field.EditInfo.ReadOnly) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>{{ isTitle ? 'star' : 'star_outline' }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../models/field.model';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-title',\r\n  templateUrl: './content-type-fields-title.component.html',\r\n  styleUrls: ['./content-type-fields-title.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n  isTitle: boolean;\r\n  field: Field;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsTitleParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsTitleParams): void {\r\n    this.params = params;\r\n    this.isTitle = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  setTitle(): void {\r\n    this.params.onSetTitle(this.field);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-type',\r\n  templateUrl: './content-type-fields-type.component.html',\r\n  styleUrls: ['./content-type-fields-type.component.scss'],\r\n  standalone: true,\r\n  imports: [MatIconModule, TippyDirective,],\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","import { Field } from \"../models/field.model\";\r\n\r\nexport interface ShareOrInheritDialogViewModel {\r\n  shareableFields: Field[];\r\n}\r\n\r\nexport enum SharingOrInheriting {\r\n  None,\r\n  Sharing,\r\n  Inheriting\r\n}","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ title | translate }}\r\n    </div>\r\n    @if (initialState != sharingOrInheriting.None) {\r\n      <button mat-icon-button tippy=\"Close dialog\"\r\n        (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    }\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    @if (initialState == sharingOrInheriting.Sharing) {\r\n      <div>{{ message | translate }} {{ dialogData.Guid }}</div>\r\n    }\r\n    @if (initialState == sharingOrInheriting.Inheriting) {\r\n      <div>{{ message| translate }} {{\r\n      dialogData.SysSettings.InheritMetadataOf }}</div>\r\n    }\r\n    @if (initialState == sharingOrInheriting.None) {\r\n      <div>\r\n        @if (state == sharingOrInheriting.None) {\r\n          <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\"\r\n          (click)=\"chooseShare()\">Share</button>\r\n        }\r\n        @if (state == sharingOrInheriting.None) {\r\n          <button mat-raised-button type=\"button\"\r\n          (click)=\"chooseInherit()\">Inherit</button>\r\n        }\r\n        @if (state == sharingOrInheriting.Sharing) {\r\n          <span>This will share the field definition</span>\r\n        }\r\n        @if (state == sharingOrInheriting.Inheriting && viewModel$ | async; as vm) {\r\n          <mat-card class=\"eav-table-div\">\r\n            <table mat-table [dataSource]=\"vm.shareableFields\" class=\"mat-elevation-z8 eav-fields-table\">\r\n              <ng-container matColumnDef=\"contentType\">\r\n                <th mat-header-cell *matHeaderCellDef> <b>Content Type</b> </th>\r\n                <td mat-cell *matCellDef=\"let field\"> {{field.ContentType.Name}} </td>\r\n              </ng-container>\r\n              <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef> <b>Name</b> </th>\r\n                <td mat-cell *matCellDef=\"let field\"> {{field.StaticName}} </td>\r\n              </ng-container>\r\n              <ng-container matColumnDef=\"type\">\r\n                <th mat-header-cell *matHeaderCellDef> <b>Type</b> </th>\r\n                <td mat-cell *matCellDef=\"let field\"> {{field.Type}} </td>\r\n              </ng-container>\r\n              <tr mat-header-row *matHeaderRowDef=\"displayedShareableFieldsColumns\"></tr>\r\n              <tr mat-row *matRowDef=\"let row; columns: displayedShareableFieldsColumns;\"\r\n              [ngClass]=\"{'eav-selected-row': guid === row.Guid}\" (click)=\"inheritField(row)\"></tr>\r\n            </table>\r\n          </mat-card>\r\n        }\r\n      </div>\r\n    }\r\n  </div>\r\n  @if (initialState == sharingOrInheriting.None) {\r\n    <div class=\"eav-dialog-actions\">\r\n      <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\" class=\"eav-dialog-action-button\"\r\n        [disabled]=\"isSaveDisabled\" (click)=\"save()\">\r\n        <div class=\"eav-button-feature\">\r\n          <span>Save</span>\r\n          <app-feature-icon-indicator class=\"eav-button-feature-icon\" [featureNameId]=\"'FieldShareConfigManagement'\"></app-feature-icon-indicator>\r\n        </div>\r\n      </button>\r\n    </div>\r\n  }\r\n</div>","import { ChangeDetectorRef, Component, Inject, OnDestroy, OnInit, ViewContainerRef, inject } from '@angular/core';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { BehaviorSubject, Observable, combineLatest, map } from 'rxjs';\r\nimport { Field } from '../models/field.model';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ContentTypesFieldsService } from '../services/content-types-fields.service';\r\nimport { ShareOrInheritDialogViewModel, SharingOrInheriting } from './share-or-inherit-dialog-models';\r\nimport { openFeatureDialog } from '../../features/shared/base-feature.component';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { NgClass, AsyncPipe } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { FeatureIconIndicatorComponent } from '../../features/feature-icon-indicator/feature-icon-indicator.component';\r\nimport { FeatureDetailService } from '../../features/services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-share-or-inherit-dialog',\r\n  templateUrl: './share-or-inherit-dialog.component.html',\r\n  styleUrls: ['./share-or-inherit-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    NgClass,\r\n    AsyncPipe,\r\n    TranslateModule,\r\n    FeatureIconIndicatorComponent\r\n  ],\r\n  providers: [\r\n    FeatureDetailService,\r\n  ],\r\n})\r\nexport class ShareOrInheritDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  displayedShareableFieldsColumns: string[] = ['contentType', 'name', 'type'];\r\n  title: string;\r\n  message: string;\r\n  state: SharingOrInheriting = SharingOrInheriting.None;\r\n  initialState: SharingOrInheriting = SharingOrInheriting.None;\r\n  sharingOrInheriting = SharingOrInheriting;\r\n  guid: string = null;\r\n  isSaveDisabled: boolean = true;\r\n\r\n  shareableFields$ = new BehaviorSubject<Field[]>(undefined);\r\n  viewModel$: Observable<ShareOrInheritDialogViewModel>;\r\n\r\n  public features: FeaturesService = inject(FeaturesService);\r\n  private fieldShareConfigManagement = this.features.isEnabled(FeatureNames.FieldShareConfigManagement);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: Field,\r\n    private dialogRef: MatDialogRef<ShareOrInheritDialogComponent>,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    // All this is just for the feature dialog\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initialState = !this.dialogData.SysSettings || (!this.dialogData.SysSettings.Share && !this.dialogData.SysSettings.InheritMetadataOf)\r\n      ? SharingOrInheriting.None\r\n      : this.dialogData.SysSettings.Share\r\n        ? SharingOrInheriting.Sharing\r\n        : SharingOrInheriting.Inheriting;\r\n    if (this.initialState === SharingOrInheriting.None) {\r\n      this.title = 'SharingOrInheriting.TitleNone';\r\n      const shareableFields$ = this.contentTypesFieldsService.getShareableFieldsFor(this.dialogData.AttributeId);\r\n      this.viewModel$ = combineLatest([\r\n        shareableFields$\r\n      ]).pipe(\r\n        map(([shareableFields]) => {\r\n          this.shareableFields$.next(shareableFields);\r\n          return { shareableFields };\r\n        })\r\n      );\r\n    } else if (this.initialState === SharingOrInheriting.Sharing) {\r\n      this.title = 'SharingOrInheriting.TitleSharing';\r\n      this.message = 'SharingOrInheriting.MessageSharing';\r\n    } else if (this.initialState === SharingOrInheriting.Inheriting) {\r\n      this.title = 'SharingOrInheriting.TitleInheriting';\r\n      this.message = 'SharingOrInheriting.MessageInheriting';\r\n    }\r\n  }\r\n\r\n  chooseShare() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Sharing;\r\n    this.isSaveDisabled = false;\r\n  }\r\n\r\n  chooseInherit() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Inheriting;\r\n    this.isSaveDisabled = true;\r\n  }\r\n\r\n  inheritField(field: Field) {\r\n    this.guid = field.Guid;\r\n    this.isSaveDisabled = false;\r\n  }\r\n\r\n  save() {\r\n    if (!this.fieldShareConfigManagement()) {\r\n      openFeatureDialog(this.dialog, FeatureNames.FieldShareConfigManagement, this.viewContainerRef, this.changeDetectorRef);\r\n    } else {\r\n      if (this.state == SharingOrInheriting.Sharing) {\r\n        this.subscriptions.add(this.contentTypesFieldsService.share(this.dialogData.Id)\r\n          .subscribe(() => this.dialogRef.close()));\r\n      } else if (this.state == SharingOrInheriting.Inheriting) {\r\n        this.subscriptions.add(this.contentTypesFieldsService.inherit(this.dialogData.Id, this.guid)\r\n          .subscribe(() => this.dialogRef.close()));\r\n      }\r\n    }\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog nav-component-wrapper\" appToggleDebug>\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">\r\n        {{ vm.contentType?.Label || vm.contentType?.Name }} Fields\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"eav-dialog-content nav-component-wrapper\">\r\n      <router-outlet></router-outlet>\r\n      <div class=\"grid-wrapper\">\r\n        <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.fields\" [gridOptions]=\"gridOptions\"\r\n          (rowDragEnter)=\"onRowDragEnter($event)\" (rowDragEnd)=\"onRowDragEnd($event)\" (rowDragMove)=\"onRowDragMove($event)\"\r\n          (gridReady)=\"onGridReady($event)\" (sortChanged)=\"onSortChanged($event)\" (filterChanged)=\"onFilterChanged($event)\"\r\n          [ngClass]=\"{\r\n          'grid-sorted': sortApplied,\r\n          'grid-filtered': filterApplied\r\n          }\">\r\n        </ag-grid-angular>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add fields\"\r\n        [disabled]=\"vm.contentType == null || vm.contentType.EditInfo.ReadOnly\" (click)=\"add()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","// tslint:disable-next-line:max-line-length\r\nimport { ColumnApi, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowClassParams, RowDragEvent, SortChangedEvent } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, Router, RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, Observable, combineLatest, forkJoin, map, of } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { BaseWithChildDialogComponent } from '../shared/components/base-with-child-dialog.component';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { ItemAddIdentifier, EditForm, ItemEditIdentifier, ItemIdentifier, EditPrep } from '../shared/models/edit-form.model';\r\nimport { ContentTypeFieldsActionsComponent } from './content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsInputTypeComponent } from './content-type-fields-input-type/content-type-fields-input-type.component';\r\n// tslint:disable-next-line:max-line-length\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type/content-type-fields-input-type.models';\r\nimport { ContentTypeFieldsSpecialComponent } from './content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title/content-type-fields-title.models';\r\nimport { ContentTypeFieldsTypeComponent } from './content-type-fields-type/content-type-fields-type.component';\r\nimport { Field } from './models/field.model';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\nimport { EmptyFieldHelpers } from '../edit/form/fields/empty/empty-field-helpers';\r\nimport { ShareOrInheritDialogComponent } from './share-or-inherit-dialog/share-or-inherit-dialog.component';\r\nimport { NgClass, AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  styleUrls: ['./content-type-fields.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    NgClass,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n  ],\r\n  providers: [\r\n    ContentTypesService,\r\n    ContentTypesFieldsService\r\n  ]\r\n})\r\nexport class ContentTypeFieldsComponent extends BaseWithChildDialogComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(undefined);\r\n  fields$ = new BehaviorSubject<Field[]>(undefined);\r\n  gridOptions = this.buildGridOptions();\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n\r\n  private gridApi: GridApi;\r\n  private columnApi: ColumnApi;\r\n  private rowDragSuppressed = false;\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  viewModel$: Observable<ContentTypeFieldsViewModel>;\r\n\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n  ) {\r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchFields();\r\n    this.subscriptions.add(this.childDialogClosed$().subscribe(() => { this.fetchFields(); }));\r\n    this.viewModel$ = combineLatest([\r\n      this.contentType$, this.fields$\r\n    ]).pipe(\r\n      map(([contentType, fields]) => ({ contentType, fields }))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.fields$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n    this.columnApi = params.columnApi;\r\n  }\r\n\r\n  onRowDragEnter(event: RowDragEvent) {\r\n    this.gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(event: RowDragEvent) {\r\n    this.gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields$.value.map(field => field.Id);\r\n    this.contentTypesFieldsService.reOrder(idArray, this.contentType$.value).subscribe(() => {\r\n      this.fetchFields(() => {\r\n        this.gridApi.setEnableCellTextSelection(true);\r\n        this.gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const movingNode = event.node;\r\n    const overNode = event.overNode;\r\n    if (!overNode) { return; }\r\n    const rowNeedsToMove = movingNode !== overNode;\r\n    if (rowNeedsToMove) {\r\n      const movingData: Field = movingNode.data;\r\n      const overData: Field = overNode.data;\r\n      const newFields = [...this.fields$.value];\r\n      const fromIndex = newFields.indexOf(movingData);\r\n      const toIndex = newFields.indexOf(overData);\r\n      this.moveInArray(newFields, fromIndex, toIndex);\r\n      this.fields$.next(newFields);\r\n      this.gridApi.clearFocusedCell();\r\n    }\r\n  }\r\n\r\n  private moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n  }\r\n\r\n  onSortChanged(params: SortChangedEvent) {\r\n    const columnStates = this.columnApi.getColumnState();\r\n    this.sortApplied = columnStates.some(state => state.sort != null);\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(params: FilterChangedEvent) {\r\n    const filterModel = this.gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  private suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = true;\r\n      this.gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = false;\r\n      this.gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.router.navigate([`add/${this.contentTypeStaticName}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private nameCellRenderer(params: ICellRendererParams) {\r\n    const currentField: Field = params.data;\r\n    const inputType = currentField.InputType;\r\n\r\n    if (EmptyFieldHelpers.endsPreviousGroup(inputType))\r\n      return params.value;\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields$.value) {\r\n      if (EmptyFieldHelpers.isGroupStart(inputType)) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (EmptyFieldHelpers.isGroupEnd(inputType)) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === currentField.StaticName)\r\n        break;\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  private fetchFields(callback?: () => void) {\r\n    const contentType$ = this.contentType$.value == null\r\n      ? this.contentTypesService.retrieveContentType(this.contentTypeStaticName)\r\n      : of(this.contentType$.value);\r\n    const fields$ = this.contentTypesFieldsService.getFields(this.contentTypeStaticName);\r\n    forkJoin([contentType$, fields$]).subscribe(([contentType, fields]) => {\r\n      this.contentType$.next(contentType);\r\n      this.fields$.next(fields);\r\n      if (callback != null)\r\n        callback();\r\n    });\r\n  }\r\n\r\n  private editFieldMetadata(field: Field) {\r\n    // 2023-11-10 @2dm #ConfigTypesFromBackend\r\n    // https://github.com/2sic/2sxc/issues/3205\r\n    // Keep old code in till 2024-01 for ref in case something breaks\r\n    // console.warn('2dm - editFieldMetadata', field);\r\n    // console.warn('2dm - editFieldMetadata', field.ConfigTypes);\r\n    // const form: EditForm = {\r\n    //   items: [\r\n    //     this.createItemDefinition(field, 'All'),\r\n    //     this.createItemDefinition(field, field.Type),\r\n    //     this.createItemDefinition(field, field.InputType),\r\n    //   ],\r\n    // };\r\n\r\n    // If this field is inherited and therefor has no own metadata, show a snackbar and exit\r\n    if (field.SysSettings?.InheritMetadataOf) {\r\n      if (!Object.keys(field.ConfigTypes).length) {\r\n        this.snackBar.open('This field inherits all configuration so there is nothing to edit.', null, { duration: 3000 });\r\n        return;\r\n      }\r\n      this.snackBar.open('This field inherits some configuration. Edit will only show configuration which is not inherited.', null, { duration: 5000 });\r\n    }\r\n\r\n    // if this field is shared/can-be-inherited, show warning so the user is aware of it\r\n    if (field.SysSettings?.Share)\r\n      this.snackBar.open('This field is shared, so changing it will affect all other fields inheriting it.', null, { duration: 5000 });\r\n\r\n    const form: EditForm = {\r\n      items: Object.keys(field.ConfigTypes).map((t) => this.createItemDefinition(field, t))\r\n    };\r\n    // console.warn('2dm - editFieldMetadata', field.ConfigTypes, form);\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private createItemDefinition(field: Field, metadataType: string): ItemAddIdentifier | ItemEditIdentifier {\r\n    // The keys could start with an @ but may not, and in some cases we need it, others we don't\r\n    const keyForMdLookup = metadataType.replace('@', '');\r\n    const newItemTypeName = ('@' + metadataType).replace('@@', '@');\r\n\r\n    // Is an item of this type already loaded? Then just edit it, otherwise request new as Metadata\r\n    const existingMd = field.Metadata[keyForMdLookup];\r\n    return existingMd != null\r\n      ? EditPrep.editId(existingMd.Id) // if defined, return the entity-number to edit\r\n      : {\r\n        ...EditPrep.newMetadata(field.Id, newItemTypeName, eavConstants.metadata.attribute),\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n\r\n  private setTitle(field: Field) {\r\n    this.snackBar.open('Setting title...');\r\n    this.contentTypesFieldsService.setTitle(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private changeInputType(field: Field) {\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/inputType`], { relativeTo: this.route });\r\n  }\r\n\r\n  private rename(field: Field) {\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/name`], { relativeTo: this.route });\r\n  }\r\n\r\n  private delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.contentTypesFieldsService.delete(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private openPermissions(field: Field) {\r\n    this.router.navigate([GoToPermissions.getUrlAttribute(field.Id)], { relativeTo: this.route });\r\n  }\r\n\r\n  private openImageConfiguration(field: Field) {\r\n    console.log('2dm - openImageConfiguration', field);\r\n    const imgConfig = field.imageConfiguration;\r\n    if (imgConfig?.isRecommended != true)\r\n      throw new Error('This field does not expect to have an image configuration');\r\n\r\n    const itemIdentifier: ItemIdentifier = imgConfig.entityId\r\n      ? EditPrep.editId(imgConfig.entityId)\r\n      : EditPrep.newMetadata(field.Id, imgConfig.typeName, eavConstants.metadata.attribute);\r\n    const formUrl = convertFormToUrl({ items: [itemIdentifier] });\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private openMetadata(field: Field) {\r\n    const url = GoToMetadata.getUrlAttribute(\r\n      field.Id,\r\n      `Metadata for Field: ${field.StaticName} (${field.Id})`,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  private shareOrInherit(field: Field) {\r\n    const shareOrInheritDialogRef = this.dialog.open(ShareOrInheritDialogComponent, {\r\n      autoFocus: false,\r\n      width: '800px',\r\n      data: field,\r\n    });\r\n    shareOrInheritDialogRef.afterClosed().subscribe(() => this.fetchFields());\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      getRowClass(params: RowClassParams) {\r\n        const field: Field = params.data;\r\n        const rowClass: string[] = [];\r\n        if (field.EditInfo.DisableSort) { rowClass.push('disable-row-drag'); }\r\n        if (EmptyFieldHelpers.isGroupStart(field.InputType)) { rowClass.push('group-start-row'); }\r\n        if (EmptyFieldHelpers.isGroupEnd(field.InputType)) { rowClass.push('group-end-row'); }\r\n        return rowClass;\r\n      },\r\n      columnDefs: [\r\n        {\r\n          rowDrag: true,\r\n          width: 18,\r\n          cellClass: 'no-select no-padding no-outline'.split(' '),\r\n        },\r\n        {\r\n          field: 'Title',\r\n          width: 42,\r\n          cellClass: 'secondary-action no-padding no-outline'.split(' '),\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.IsTitle;\r\n          },\r\n          cellRenderer: ContentTypeFieldsTitleComponent,\r\n          cellRendererParams: (() => {\r\n            const params: ContentTypeFieldsTitleParams = {\r\n              onSetTitle: (field) => this.setTitle(field),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          headerName: 'Name',\r\n          field: 'StaticName',\r\n          onCellClicked: (params) => {\r\n            const field: Field = params.data;\r\n            this.editFieldMetadata(field);\r\n          },\r\n          cellRenderer: (params: ICellRendererParams) => this.nameCellRenderer(params),\r\n        },\r\n        {\r\n          field: 'Type',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.Type;\r\n          },\r\n          cellRenderer: ContentTypeFieldsTypeComponent,\r\n        },\r\n        {\r\n          headerName: 'Input',\r\n          field: 'InputType',\r\n          width: 160,\r\n          cellClass: (params) => {\r\n            const field: Field = params.data;\r\n            return `${field.EditInfo.DisableEdit ? 'no-outline no-padding' : 'secondary-action no-padding'}`.split(' ');\r\n          },\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            const inputType = field.InputType.substring(field.InputType.indexOf('-') + 1);\r\n            return inputType;\r\n          },\r\n          cellRenderer: ContentTypeFieldsInputTypeComponent,\r\n          cellRendererParams: (() => {\r\n            const params: ContentTypeFieldsInputTypeParams = {\r\n              onChangeInputType: (field) => this.changeInputType(field),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          field: 'Label',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.Metadata?.All?.Name;\r\n          },\r\n        },\r\n        {\r\n          field: 'Special',\r\n          width: 66,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          cellRenderer: ContentTypeFieldsSpecialComponent,\r\n        },\r\n        {\r\n          field: 'Notes',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.Metadata?.All?.Notes;\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight5,\r\n          cellRenderer: ContentTypeFieldsActionsComponent,\r\n          cellRendererParams: (() => ({\r\n            do: (verb, field) => {\r\n              switch (verb) {\r\n                case 'rename': this.rename(field); break;\r\n                case 'delete': this.delete(field); break;\r\n                case 'permissions': this.openPermissions(field); break;\r\n                case 'metadata': this.openMetadata(field); break;\r\n                case 'shareOrInherit': this.shareOrInherit(field); break;\r\n                case 'image': this.openImageConfiguration(field); break;\r\n              }\r\n            }\r\n          } satisfies ContentTypeFieldsActionsParams))(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\ninterface ContentTypeFieldsViewModel {\r\n  contentType: ContentType;\r\n  fields: Field[];\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { TrueFalseParams } from './true-false.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n    selector: 'app-rest-api-true-false',\r\n    templateUrl: './true-false.component.html',\r\n    standalone: true,\r\n    imports: [MatIconModule],\r\n})\r\nexport class TrueFalseComponent implements ICellRendererAngularComp {\r\n  icon: string;\r\n\r\n  private trueIcon = 'check_circle';\r\n  private falseIcon = 'circle';\r\n\r\n  agInit(params: ICellRendererParams & TrueFalseParams): void {\r\n    let value: boolean = params.value;\r\n    if (params.reverse) { value = !value; }\r\n    if (params.trueIcon) { this.trueIcon = params.trueIcon; }\r\n    if (params.falseIcon) { this.falseIcon = params.falseIcon; }\r\n    this.icon = value ? this.trueIcon : this.falseIcon;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","export interface AgBoolCellIconSetting {\r\n  clickable?: boolean;\r\n  tooltip: string;\r\n  icon: string;\r\n  url?: string;\r\n  getUrl?: (data: any) => string;\r\n}\r\n\r\nexport interface AgBoolCellIconSettings {\r\n  states: Record<'true' | 'false' | string, AgBoolCellIconSetting>;\r\n}\r\n\r\nexport interface AgBoolCellIconsParams<T = any> {\r\n  settings(data: T): AgBoolCellIconSettings;\r\n}\r\n\r\nexport const AgBoolCellIconsDefault: AgBoolCellIconSettings = {\r\n  states: {\r\n    true: {\r\n      tooltip: 'true/on',\r\n      icon: 'radio_button_checked',\r\n    },\r\n    false: {\r\n      tooltip: 'false/off',\r\n      icon: 'radio_button_unchecked',\r\n    }\r\n  }\r\n};","<div class=\"icon-container\">\r\n  @if (data.url) {\r\n    <a [href]=\"data.url\" target=\"_blank\">\r\n      <ng-container *ngTemplateOutlet=\"showIcon\"></ng-container>\r\n    </a>\r\n  } @else {\r\n    <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n      <mat-icon>{{ data.icon }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n\r\n<ng-template #showIcon>\r\n  <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n    <mat-icon>{{ data.icon }}</mat-icon>\r\n  </div>\r\n</ng-template>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { AgBoolCellIconSetting, AgBoolCellIconSettings, AgBoolCellIconsDefault, AgBoolCellIconsParams } from './ag-bool-icon-params';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-ag-bool-icon-renderer',\r\n  templateUrl: './ag-bool-icon-renderer.html',\r\n  standalone: true,\r\n  imports: [TippyDirective, MatIconModule, NgClass],\r\n})\r\nexport class AgBoolIconRenderer implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  private allSettings: AgBoolCellIconSettings;\r\n\r\n  data: AgBoolCellIconSetting; // | { link: boolean  };\r\n\r\n  agInit(params: ICellRendererParams & AgBoolCellIconsParams): void {\r\n    this.value = params.value;\r\n\r\n    this.allSettings = params.settings?.(params.data) ?? AgBoolCellIconsDefault;\r\n    const d = this.allSettings.states[this.value ? 'true' : 'false'];\r\n    this.data = {\r\n      ...d,\r\n      url: d.url ?? d.getUrl?.(params.data),\r\n      // link: !!(d.url || d.getUrl),\r\n    };\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { ColDef } from '@ag-grid-community/core';\r\nimport { BooleanFilterComponent } from '../components/boolean-filter/boolean-filter.component';\r\nimport { App } from '../../apps-management/models/app.model';\r\nimport { AgBoolIconRenderer } from './apps-list-show/ag-bool-icon-renderer.component';\r\nimport { TrueFalseComponent } from '../../dev-rest/api/true-false/true-false.component';\r\nimport { TrueFalseParams } from '../../dev-rest/api/true-false/true-false.models';\r\n\r\nexport class ColumnDefinitions {\r\n  static ActionsPinnedRight1: ColDef = {\r\n    width: 42,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight3: ColDef = {\r\n    width: 122,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight4: ColDef = {\r\n    width: 162,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight5: ColDef = {\r\n    width: 202,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight6: ColDef = {\r\n    width: 82,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight7: ColDef = {\r\n    width: 62,\r\n    cellClass: 'secondary-action no-outline no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static IconShow: ColDef = {\r\n    headerName: 'Show',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'icons no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: BooleanFilterComponent,\r\n    valueGetter: (params) => {\r\n      const app: App = params.data;\r\n      return !app.IsHidden;\r\n    },\r\n    cellRenderer: AgBoolIconRenderer,\r\n  };\r\n\r\n  static Items: ColDef = {\r\n    width: 102,\r\n    headerClass: 'dense',\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static Fields: ColDef = {\r\n    width: 94,\r\n    headerClass: 'dense',\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  /**\r\n   * Very narrow columns, typically just showing 1 character\r\n   */\r\n  static Character: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Id: ColDef = {\r\n    headerName: 'ID',\r\n    field: 'Id',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'id-action no-padding no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static Boolean: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    sortable: true,\r\n  };\r\n\r\n  static Boolean2: ColDef = {\r\n    width: 100,\r\n    sortable: true,\r\n    cellClass: 'no-outline',\r\n    filter: BooleanFilterComponent,\r\n  };\r\n\r\n  static Boolean3: ColDef = {\r\n    headerClass: 'dense',\r\n    width: 80,\r\n    cellClass: 'no-outline',\r\n    cellRenderer: TrueFalseComponent,\r\n    cellRendererParams: (() => {\r\n      const params: TrueFalseParams = {\r\n        reverse: false,\r\n      };\r\n      return params;\r\n    })(),\r\n  }\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Number: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static TextWideType: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action highlight'.split(' '),\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextWide: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextWideMin100: ColDef = {\r\n    flex: 1,\r\n    minWidth: 100,\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  }\r\n\r\n  static TextWideFlex3: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextNarrow: ColDef = {\r\n    flex: 1,\r\n    minWidth: 150,\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextWideActionClass: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action no-padding no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n\r\n\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { BaseComponent } from './base.component';\r\nimport { EavLogger } from '../logging/eav-logger';\r\n\r\nconst logThis = false;\r\n\r\n// 2024-06-12 2dm experimental - remove comments if all is good mid of June\r\n// - previously had\r\n// @Directive()   // Needs the @Directive() so the compiler allows OnDestroy to be implemented\r\n// ...then tried this\r\n// @Component({\r\n//   selector: 'app-base-component-with-child',\r\n//   template: ''\r\n// })\r\n// ...but then added abstract, so I think it doesn't actually need all that\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseWithChildDialogComponent extends BaseComponent implements OnDestroy {\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    public log?: EavLogger\r\n  ) {\r\n    super();\r\n    this.log ??= new EavLogger('BaseComponent', logThis);\r\n  }\r\n\r\n  // 2024-06-12 2dm - don't think this is needed since it's already on the base class\r\n  // ngOnDestroy() {\r\n  //   super.ngOnDestroy();\r\n  // }\r\n\r\n  // TODO @2dg not longer in use after refactoring SideNav with Routing\r\n  // protected refreshOnChildClosedDeep() {\r\n  //   return this.router.events.pipe(\r\n  //     filter(event => event instanceof NavigationEnd),\r\n  //     startWith(!!this.route.snapshot.firstChild.firstChild),\r\n  //     map(() => !!this.route.snapshot.firstChild.firstChild),\r\n  //     pairwise(),\r\n  //     filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n  //   )\r\n  // }\r\n\r\n  protected childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n      // tap(() => console.log('2dm ' + 'childDialogClosed$'))\r\n    )\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, NgModule } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n  ]\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[25]}