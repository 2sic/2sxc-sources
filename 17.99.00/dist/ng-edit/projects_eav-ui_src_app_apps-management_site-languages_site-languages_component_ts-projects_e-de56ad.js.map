{"version":3,"file":"projects_eav-ui_src_app_apps-management_site-languages_site-languages_component_ts-projects_e-de56ad.js","mappings":"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","sources":["./projects/eav-ui/src/app/apps-management/site-languages/site-languages-status/site-languages-status.component.ts","./projects/eav-ui/src/app/apps-management/site-languages/site-languages-status/site-languages-status.component.html","./projects/eav-ui/src/app/apps-management/site-languages/site-languages.component.ts","./projects/eav-ui/src/app/apps-management/site-languages/site-languages.component.html","./projects/eav-ui/src/app/core/transient.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.html"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { SiteLanguage } from '../../models/site-language.model';\r\nimport { SiteLanguagesStatusParams } from './site-languages-status.models';\r\n\r\n@Component({\r\n  selector: 'app-site-languages-status',\r\n  templateUrl: './site-languages-status.component.html',\r\n  styleUrls: ['./site-languages-status.component.scss'],\r\n  standalone: true,\r\n  imports: [MatSlideToggleModule],\r\n})\r\nexport class SiteLanguagesStatusComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  private params: ICellRendererParams & SiteLanguagesStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & SiteLanguagesStatusParams): void {\r\n    this.params = params;\r\n    this.value = this.params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  toggleLanguage(event: MatSlideToggleChange): void {\r\n    const language: SiteLanguage = this.params.data;\r\n    this.params.onToggleLanguage(language, event.checked);\r\n  }\r\n}\r\n","<mat-slide-toggle [checked]=\"value\" (change)=\"toggleLanguage($event)\"></mat-slide-toggle>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { catchError, combineLatest, map, Observable, of, share, startWith, Subject, switchMap } from 'rxjs';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { SiteLanguage } from '../models/site-language.model';\r\nimport { ZoneService } from '../services/zone.service';\r\nimport { SiteLanguagesStatusComponent } from './site-languages-status/site-languages-status.component';\r\nimport { SiteLanguagesStatusParams } from './site-languages-status/site-languages-status.models';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\nimport { ModuleRegistry } from '@ag-grid-community/core';\r\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { transient } from '../../core';\r\n\r\n@Component({\r\n  selector: 'app-site-languages',\r\n  templateUrl: './site-languages.component.html',\r\n  styleUrls: ['./site-languages.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class SiteLanguagesComponent implements OnInit, OnDestroy {\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  private refreshLanguages$ = new Subject<void>();\r\n\r\n  viewModel$: Observable<SiteLanguagesViewModel>;\r\n\r\n  private zoneService = transient(ZoneService);\r\n\r\n  constructor() {\r\n    ModuleRegistry.registerModules([ClientSideRowModelModule]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.viewModel$ = combineLatest([\r\n      this.refreshLanguages$.pipe(\r\n        startWith(undefined),\r\n        switchMap(() => this.zoneService.getLanguages().pipe(catchError(() => of(undefined)))),\r\n        share()\r\n      )\r\n    ]).pipe(\r\n      map(([languages]) => {\r\n        return { languages };\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refreshLanguages$.complete();\r\n  }\r\n\r\n  private toggleLanguage(language: SiteLanguage, enable: boolean): void {\r\n    this.zoneService.toggleLanguage(language.Code, enable).subscribe({\r\n      error: () => {\r\n        this.refreshLanguages$.next();\r\n      },\r\n      next: () => {\r\n        this.refreshLanguages$.next();\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.Id,\r\n          field: 'Code',\r\n          filter: 'agTextColumnFilter',\r\n          cellRenderer: IdFieldComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<SiteLanguage> = {\r\n              tooltipGetter: (language: SiteLanguage) => `ID: ${language.Code}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          headerName: 'Name',\r\n          field: 'Culture',\r\n          sort: 'asc',\r\n          onCellClicked: (params) => {\r\n            const language: SiteLanguage = params.data;\r\n            this.toggleLanguage(language, !language.IsEnabled);\r\n          },\r\n        },\r\n        {\r\n          field: 'Status',\r\n          width: 72,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: BooleanFilterComponent,\r\n          valueGetter: (params) => {\r\n            const language: SiteLanguage = params.data;\r\n            return language.IsEnabled;\r\n          },\r\n          cellRenderer: SiteLanguagesStatusComponent,\r\n          cellRendererParams: (() => {\r\n            const params: SiteLanguagesStatusParams = {\r\n              onToggleLanguage: (language, enable) => this.toggleLanguage(language, enable),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\ninterface SiteLanguagesViewModel {\r\n  languages: SiteLanguage[];\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.languages\" [gridOptions]=\"gridOptions\">\r\n    </ag-grid-angular>\r\n    <mat-dialog-actions align=\"end\"></mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { Injector, ProviderToken, TypeProvider, inject } from '@angular/core';\r\n\r\n/**\r\n * Transient dependency injection provider.\r\n * This will create a new instance of the provided token,\r\n * without making it available in sub-components\r\n * as would happen with providers in a component.\r\n * \r\n * @param token the class which is injectable\r\n * @param injector the injector to use, if not provided, the current injector will be used.\r\n *     Not not necessary when using transient in the class properties construction or in the constructor,\r\n *     as the injector will be available in the constructor.\r\n *     But necessary when using transient inside anything else.\r\n * @returns \r\n */\r\nexport function transient<T>(token: ProviderToken<T>, injector?: Injector): T {\r\n  // make sure we have an injector\r\n  // this will throw an error, if transient is used outside of construction and without providing an injector\r\n  injector ??= inject(Injector);\r\n\r\n  // create a new injector which is only meant to be used for this transient instance\r\n  const subInjector = Injector.create({\r\n    providers: [\r\n      token as TypeProvider\r\n    ],\r\n    parent: injector\r\n  });\r\n\r\n  // return the instance\r\n  return subInjector.get(token, undefined, { self: true });\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n  standalone: true,\r\n  imports: [NgClass, MatIconModule, TippyDirective]\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy(): void {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>"],"names":["MatSlideToggleModule","SiteLanguagesStatusComponent","agInit","params","value","refresh","toggleLanguage","event","language","data","onToggleLanguage","checked","_","_2","selectors","standalone","features","i0","ɵɵStandaloneFeature","decls","vars","consts","template","SiteLanguagesStatusComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","SiteLanguagesStatusComponent_Template_mat_slide_toggle_change_0_listener","$event","ɵɵelementEnd","ɵɵproperty","i1","MatSlideToggle","styles","catchError","combineLatest","map","of","share","startWith","Subject","switchMap","BooleanFilterComponent","IdFieldComponent","defaultGridOptions","ZoneService","AsyncPipe","MatDialogActions","ModuleRegistry","ClientSideRowModelModule","ColumnDefinitions","SxcGridModule","transient","ɵɵelement","ɵɵadvance","languages","ctx_r0","gridOptions","SiteLanguagesComponent","constructor","buildGridOptions","refreshLanguages$","zoneService","registerModules","ngOnInit","viewModel$","pipe","undefined","getLanguages","ngOnDestroy","complete","enable","Code","subscribe","error","next","columnDefs","Id","field","filter","cellRenderer","cellRendererParams","tooltipGetter","TextWide","headerName","sort","onCellClicked","IsEnabled","width","headerClass","cellClass","split","sortable","valueGetter","SiteLanguagesComponent_Template","ɵɵtemplate","SiteLanguagesComponent_Conditional_0_Template","ɵɵconditional","tmp_0_0","ɵɵpipeBind1","AgGridAngular","Injector","inject","token","injector","subInjector","create","providers","parent","get","self","Context","DnnContext","HttpClient","FileUploadMessageTypes","webApiAppRoot","ImportAppService","http","context","dnnContext","importApp","file","changedName","retryOnDuplicate","formData","FormData","append","post","$2sxc","apiUrl","zoneId","toString","result","Messages","MessageType","Warning","folderName","prompt","Text","ɵɵinject","i2","i3","factory","ɵfac","MatSnackBar","copyToClipboard","NgClass","MatIconModule","TippyDirective","snackBar","id","align","tooltip","copy","open","duration","ɵɵdirectiveInject","IdFieldComponent_Template","IdFieldComponent_Template_div_click_0_listener","ɵɵtext","ɵɵpureFunction2","_c0","ɵɵtextInterpolate","MatIcon"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}