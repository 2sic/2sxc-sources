{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts-projects_eav-ui_src_app_cont-377579.ea786995374337ef.js","mappings":"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","names":["EntityFilterComponent","constructor","this","filter","idFilterString","idFilter","agInit","params","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","context","data","node","getValue","field","some","value","includes","items","headerName","idFltr","itm","Id","getModel","filterType","setModel","model","join","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","map","el","parseInt","isNaN","filterChanged","filterChangedCallback","static","t","core","VBU","selectors","viewQuery","rf","ctx","i0","$event","_r1","FormsModule","i1","MatRadioModule","MatFormFieldModule","i2","styles","_r2","ctx_r2","do","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","refresh","verb","standalone","features","decls","vars","consts","template","ContentItemsActionsComponent_ng_template_12_Template","menu_r4","MatRippleModule","MatIconModule","MatMenuModule","i3","ctx_r0","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","TippyDirective","ctx_r1","openMetadata","_c0","metadataCount","metadata","metadataTooltip","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","onOpenMetadata","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","NgClass","MatBadgeModule","metadataKeyValidator","form","control","keyType","controls","testValue","toString","eavConstants","keyTypes","number","test","patternWholeNumber","guid","hasCurly","bracket","substring","guidRegex","patternGuid","option_r2","targetType","label","vm_r3","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_14_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Conditional_3_Template","ctx_r3","targetTypeOptions","unknownTargetType","targetTypeHint","option_r5","contentType_r6","StaticName","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_27_For_5_Template","contentTypes","scopeOption_r7","name","CreateMetadataDialogComponent_Conditional_0_Conditional_28_For_5_Template","scopeOptions","dropdownInsertValue","item_r8","Guid","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_1_Template","guidedKey","contentType_r9","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_ng_container_0_Template","defaultKeyInput_r10","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_Template","tmp_4_0","entity","contentType","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_1_Template","_r11","toggleGuidedKey","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_15_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_16_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_For_25_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_26_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_27_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_40_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_43_Template","toggleGuidedMode","closeDialog","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","key","valid","CreateMetadataDialogComponent","BaseComponent","dialogRef","contentItemsService","contentTypesService","super","hostClass","ngOnInit","Object","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","scopes","default","subscriptions","add","scopeForContentTypes","valueChanges","pipe","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","contentTypeStaticName","getAll","formValues$","RxHelpers","objectsEqual","combineLatest","foundTargetType","find","arraysEqual","updatedForm","isAppMetadata","app","appId","keys","ControlHelpers","disableControl","viewModel$","hint","ngOnDestroy","complete","result","close","event","checked","target","scope","retrieveContentTypes","getScopes","i4","hostVars","hostBindings","CreateMetadataDialogComponent_Conditional_0_Template","tmp_0_0","i5","ReactiveFormsModule","i6","MatSelectModule","i7","i8","MatOptionModule","MatInputModule","i9","NgTemplateOutlet","MatButtonModule","i10","i11","MatDialogActions","MatSlideToggleModule","i12","AsyncPipe","FieldHintComponent","ClickStopPropagationDirective","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","_r3","debugFilter","ContentItemsComponent_Conditional_0_Conditional_9_Template","onGridReady","filesDropped","exportContent","importContent","importItem","createMetadata","ContentItemsComponent_Conditional_0_Conditional_34_Template","editItem","vm_r4","Name","tmp_3_0","Properties","ListInstructions","gridOptions","debugEnabled","ContentItemsComponent","BaseWithChildDialogComponent","router","route","entitiesService","contentExportService","snackBar","globalConfigService","dialog","viewContainerRef","changeDetectorRef","contentType$","Subject","items$","undefined","defaultGridOptions","gridApi$","snapshot","paramMap","get","fetchContentType","fetchItems","fetchColumns","childDialogClosed$","getDebugEnabled$","retrieveContentType","getColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","JsonHelpers","tryParse","v","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","consoleLogDev","setFilterModel","url","GoToMetadata","getUrlEntity","_Title","navigate","relativeTo","formUrl","convertFormToUrl","ContentTypeName","EntityId","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","files","importFile","lastIndexOf","toLocaleLowerCase","state","open","autoFocus","width","afterClosed","itemFor","Number","string","String","markForCheck","warn","duration","ColumnDefinitions","cellClass","ReadOnly","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","_RepositoryId","headerClass","flex","minWidth","sortable","onCellClicked","headerTooltip","_Used","_Uses","ActionsPinnedRight3","clone","export","delete","Type","DataTypeConstants","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","DuplicateEntity","exportEntity","err","dismiss","ExceptionMessage","rawValue","ContentItemsService","EntitiesService","ContentExportService","ContentTypesService","ContentItemsComponent_Conditional_0_Template","RouterOutlet","SafeHtmlPipe","DragAndDropDirective","ToggleDebugDirective","SxcGridModule","http","dnnContext","create","post","zoneId","update","entityId","id","tryForce","$2sxc","apiUrl","webApiEntityRoot","force","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","webApiFieldsRoot","webApiFieldsAll","webApiFieldsGetShared","ContentTypesFieldsService","typeListRetrieve","appid","getInputTypesList","inputConfigs","config","dataType","indexOf","inputType","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","staticName","fields","fld","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","addInheritedField","targetContentTypeId","sourceContentTypeStaticName","sourceFieldGuid","newName","AppId","ContentTypeId","SourceType","SourceField","share","inherit","inheritMetadataOf","reOrder","idArray","contentTypeId","order","stringify","setTitle","webApiTypeRoot","rename","fieldId","IsTitle","Error","newField","Index","SortOrder","updateInputType","_angular_core__WEBPACK_IMPORTED_MODULE_3__","TrueFalseComponent","trueIcon","falseIcon","reverse","_angular_core__WEBPACK_IMPORTED_MODULE_0__","encapsulation","AgBoolCellIconsDefault","states","true","tooltip","false","AgBoolIconRenderer_Conditional_1_ng_container_1_Template","showIcon_r2","clickable","AgBoolIconRenderer","allSettings","settings","d","getUrl","AgBoolIconRenderer_Conditional_1_Template","AgBoolIconRenderer_Conditional_2_Template","AgBoolIconRenderer_ng_template_3_Template","ActionsPinnedRight1","pinned","ActionsPinnedRight4","ActionsPinnedRight5","ActionsPinnedRight6","ActionsPinnedRight7","IconShow","IsHidden","Items","Fields","Character","Boolean2","Boolean3","TextWideType","TextWide","TextWideMin100","TextWideFlex3","TextNarrow","TextWideActionClass","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","inputs","ngContentSelectors","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","align","copy","copyToClipboard","_angular_core__WEBPACK_IMPORTED_MODULE_1__","onClick","stopPropagation","FsC","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hidden","disabled","None","HasDecoratorInputTransform","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/content-items/services/entities.service.ts","./projects/eav-ui/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-params.ts","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.component.ts","./projects/eav-ui/src/app/shared/ag-grid/column-definitions.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.html","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n    MatFormFieldModule\r\n  ]\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Copy\" (click)=\"do('clone')\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\" eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"do('export')\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams, ContentItemType } from './content-items-actions.models';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n  ],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ICellRendererParams & ContentItemsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsParams): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n\r\n  do(verb: ContentItemType): void {\r\n    this.params.do(verb, this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n    <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n  standalone: true,\r\n  imports: [TippyDirective,],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple\r\n      [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n      (click)=\"openMetadata()\">\r\n      <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty'\r\n        : 'local_offer' }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    MatRippleModule,\r\n    NgClass,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ICellRendererParams & ContentItemsStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusParams): void {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata(): void {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <p>\r\n      This is a special operation to add an item which is metadata for another item,\r\n      see <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n    </p>\r\n    <form [formGroup]=\"form\">\r\n      <!-- Target Type -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Target</mat-label>\r\n        @if (vm.guidedMode) {\r\n        <mat-select formControlName=\"targetType\" required>\r\n          @for (option of targetTypeOptions; track option) {\r\n          <mat-option [value]=\"option.targetType\">\r\n            {{ option.label }}\r\n          </mat-option>\r\n          }\r\n          @if (vm.unknownTargetType) {\r\n          <mat-option [value]=\"vm.formValues.targetType\">\r\n            {{ vm.formValues.targetType }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n        }\r\n        @if (!vm.guidedMode) {\r\n        <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required>\r\n        }\r\n      </mat-form-field>\r\n      @if (form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType) {\r\n      <app-field-hint [isError]=\"false\">\r\n        Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're\r\n        doing\r\n      </app-field-hint>\r\n      }\r\n      @if (vm.targetTypeHint) {\r\n      <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n      }\r\n      @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.required) {\r\n      <app-field-hint [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      }\r\n      @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern) {\r\n      <app-field-hint [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      }\r\n      <!-- Key Type -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Key type</mat-label>\r\n        <mat-select formControlName=\"keyType\" required>\r\n          @for (option of vm.keyTypeOptions; track option) {\r\n          <mat-option [value]=\"option\">\r\n            {{ option }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n      @if (form.controls['keyType'].touched && form.controls['keyType'].errors?.required) {\r\n      <app-field-hint [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      }\r\n      <!-- Content Type for Content Items -->\r\n      @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Content Type</mat-label>\r\n        <mat-select formControlName=\"contentTypeForContentItems\"\r\n          [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n          @for (contentType of vm.contentTypes; track contentType) {\r\n          <mat-option [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n      }\r\n      <!-- Scope for Content Types -->\r\n      @if (vm.guidedMode && (vm.formValues.targetType === eavConstants.metadata.entity.targetType ||\r\n      vm.formValues.targetType === eavConstants.metadata.contentType.targetType)) {\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Scope</mat-label>\r\n        <mat-select formControlName=\"scopeForContentTypes\"\r\n          [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n          @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n          <mat-option [value]=\"scopeOption.value\">\r\n            {{ scopeOption.name }}\r\n          </mat-option>\r\n          }\r\n          <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      }\r\n      <app-field-hint>\r\n        The scope should almost never be changed -\r\n        <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n      </app-field-hint>\r\n      <!-- Key -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Key</mat-label>\r\n        @if (vm.guidedMode) {\r\n        @switch (vm.formValues.targetType) {\r\n        @case (eavConstants.metadata.entity.targetType) {\r\n        @if (vm.guidedKey) {\r\n        <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n          @for (item of vm.contentItems; track item) {\r\n          <mat-option [value]=\"item.Guid\">\r\n            {{ item.Title }} ({{ item.Id }})\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n        }\r\n        @if (!vm.guidedKey) {\r\n        <input matInput type=\"text\" formControlName=\"key\" required>\r\n        }\r\n        }\r\n        @case (eavConstants.metadata.contentType.targetType) {\r\n        @if (vm.guidedKey) {\r\n        <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n          @for (contentType of vm.contentTypes; track contentType) {\r\n          <mat-option [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n        }\r\n        @if (!vm.guidedKey) {\r\n        <input matInput type=\"text\" formControlName=\"key\" required>\r\n        }\r\n        }\r\n        @default {\r\n        <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n        }\r\n        }\r\n        } @else {\r\n        @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n        <input matInput type=\"text\" formControlName=\"key\" required>\r\n        }\r\n        @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n        <input matInput type=\"number\" formControlName=\"key\" required>\r\n        }\r\n        }\r\n        <ng-template #defaultKeyInput>\r\n          @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n          <input matInput type=\"text\" formControlName=\"key\" required>\r\n          }\r\n          @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n          <input matInput type=\"number\" formControlName=\"key\" required>\r\n          }\r\n        </ng-template>\r\n        @if (vm.guidedMode && vm.guidedKeyExists) {\r\n        <div matTextSuffix class=\"eav-selection-suffix\">\r\n          <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\"\r\n            [ngClass]=\"{ 'active': vm.guidedKey }\" tippy=\"Pick existing value\" (click)=\"toggleGuidedKey(true)\">\r\n            <mat-icon class=\"eav-icon\">search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\"\r\n            [ngClass]=\"{ 'active': !vm.guidedKey }\" tippy=\"Manual entry\" (click)=\"toggleGuidedKey(false)\">\r\n            <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n        }\r\n      </mat-form-field>\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.required) {\r\n      <app-field-hint [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      }\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber) {\r\n      <app-field-hint [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      }\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.patternGuid) {\r\n      <app-field-hint [isError]=\"true\">\r\n        Must be a valid GUID\r\n      </app-field-hint>\r\n      }\r\n    </form>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <mat-slide-toggle color=\"accent\"\r\n      [tippy]=\"vm.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n      [checked]=\"vm.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n      {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n    </mat-slide-toggle>\r\n    <div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </mat-dialog-actions>\r\n</div>\r\n}\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { NgTemplateOutlet, NgClass, AsyncPipe } from '@angular/common';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ClickStopPropagationDirective } from '../../shared/directives/click-stop-propagation.directive';\r\nimport { ControlHelpers } from '../../edit/shared/helpers/control.helpers';\r\nimport { RxHelpers } from '../../shared/rxJs/rx.helpers';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    NgTemplateOutlet,\r\n    MatButtonModule,\r\n    NgClass,\r\n    MatIconModule,\r\n    MatDialogActions,\r\n    MatSlideToggleModule,\r\n    AsyncPipe,\r\n    FieldHintComponent,\r\n    ClickStopPropagationDirective,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscriptions.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscriptions.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscriptions.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      distinctUntilChanged(RxHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscriptions.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!RxHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value)) {\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n        }\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType)) {\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n        }\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId) {\r\n          updatedForm.key = this.context.appId;\r\n        }\r\n\r\n        if (Object.keys(updatedForm).length) {\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        ControlHelpers.disableControl(this.form.controls['keyType'], keyTypeDisabled);\r\n        ControlHelpers.disableControl(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n    selector: 'app-pub-meta-filter',\r\n    templateUrl: './pub-meta-filter.component.html',\r\n    styleUrls: ['./pub-meta-filter.component.scss'],\r\n    standalone: true,\r\n    imports: [MatRadioModule, FormsModule],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","@if (viewModel$ | async; as vm) {\r\n  <div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">\r\n        {{ vm.contentType.Label || vm.contentType.Name }} Data\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"eav-dialog-content nav-component-wrapper\">\r\n      <router-outlet></router-outlet>\r\n      @if (vm.contentType?.Properties?.ListInstructions; as listInstructions) {\r\n        <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n      }\r\n      <div class=\"grid-wrapper\">\r\n        <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.items\" [gridOptions]=\"gridOptions\"\r\n          (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n          (filesDropped)=\"filesDropped($event)\">\r\n        </ag-grid-angular>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <div class=\"eav-dialog-actions-div\">\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n          <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n          <span>Data</span>\r\n        </button>\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" (click)=\"importContent()\">\r\n          <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n          <span>Data</span>\r\n        </button>\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" (click)=\"importItem()\">\r\n          <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n          <span>Item</span>\r\n        </button>\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n          <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n          <span>Create Metadata</span>\r\n        </button>\r\n        @if (vm.debugEnabled) {\r\n          <button mat-button class=\"eav-button__with-icon\" color=\"accent\" tippy=\"Print filter to console\" (click)=\"debugFilter()\">\r\n            <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n            <span>Filter</span>\r\n          </button>\r\n        }\r\n      </div>\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router, RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, filter, map, Observable, pairwise, startWith, Subject, Subscription, take } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { GlobalConfigService } from '../edit/shared/store/ngrx-data';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BaseWithChildDialogComponent } from '../shared/components/base-with-child-dialog.component';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogDev } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './content-items-status/content-items-status.models';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { SafeHtmlPipe } from '../shared/pipes/safe-html.pipe';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    SafeHtmlPipe,\r\n    DragAndDropDirective,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n  ],\r\n  providers: [\r\n    ContentItemsService,\r\n    EntitiesService,\r\n    ContentExportService,\r\n    ContentTypesService,\r\n  ],\r\n})\r\nexport class ContentItemsComponent extends BaseWithChildDialogComponent implements OnInit, OnDestroy {\r\n  contentType$ = new Subject<ContentType>();\r\n  items$ = new BehaviorSubject<ContentItem[]>(undefined);\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  viewModel$: Observable<ContentItemsViewModel>;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.subscriptions.add(this.childDialogClosed$().subscribe(() => { this.fetchItems(); }));\r\n\r\n    this.viewModel$ = combineLatest([\r\n      this.contentType$, this.items$, this.globalConfigService.getDebugEnabled$()\r\n    ]).pipe(\r\n      map(([contentType, items, debugEnabled]) => ({ contentType, items, debugEnabled }))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogDev('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.contentTypeStaticName,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        const contentItem: ContentItem = rowNode.data;\r\n        ids.push(contentItem.Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: itemFor.target ?? itemFor.targetType.toString(),\r\n            TargetType: itemFor.targetType,\r\n            ...(itemFor.keyType === eavConstants.keyTypes.guid && { Guid: itemFor.key }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.number && { Number: parseInt(itemFor.key, 10) }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.string && { String: itemFor.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        ...ColumnDefinitions.Id,\r\n        cellClass: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return `id-action no-padding no-outline ${contentItem._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' ');\r\n        },\r\n        cellRenderer: IdFieldComponent,\r\n        cellRendererParams: (() => {\r\n          const params: IdFieldParams<ContentItem> = {\r\n            tooltipGetter: (item) => `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`,\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsStatusParams = {\r\n            onOpenMetadata: (item) => this.openMetadata(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'primary-action highlight'.split(' '),\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        onCellClicked: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          this.editItem(contentItem);\r\n        },\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          return `${item._Used} / ${item._Uses}`;\r\n        },\r\n      },\r\n      {\r\n        ...ColumnDefinitions.ActionsPinnedRight3,\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            do: (verb, item) => {\r\n              switch (verb) {\r\n                case 'clone': this.clone(item); break;\r\n                case 'export': this.export(item); break;\r\n                case 'delete': this.delete(item); break;\r\n              }\r\n            }\r\n          } satisfies ContentItemsActionsParams;\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n\r\ninterface ContentItemsViewModel {\r\n  contentType: ContentType;\r\n  items: ContentItem[];\r\n  debugEnabled: boolean;\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { JsonHelpers } from '../shared/helpers/json.helpers';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) { return; }\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = JsonHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { webApiEntityRoot } from '../../edit/shared/services';\r\nimport { ItemInListIdentifier } from '../../shared/models/edit-form.model';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\nexport interface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\nexport interface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { InputTypeStrict } from '../constants/input-type.constants';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = 'admin/field/all';\r\nexport const webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString() },\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * \r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * \r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    // TODO: @SDV - do the same as in getShareableFields()\r\n    // but add parameter attributeId to the webapi call\r\n    // I'll create the backend afterwards\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString(), attributeId: attributeId.toString() },\r\n      });\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceContentTypeStaticName: string, sourceFieldGuid: string, newName: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'AddInheritedField'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: targetContentTypeId.toString(),\r\n        SourceType: sourceContentTypeStaticName,\r\n        SourceField: sourceFieldGuid,\r\n        name: newName,\r\n      }\r\n    });\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Share'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Inherit'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: InputTypeStrict) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { TrueFalseParams } from './true-false.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n    selector: 'app-rest-api-true-false',\r\n    templateUrl: './true-false.component.html',\r\n    standalone: true,\r\n    imports: [MatIconModule],\r\n})\r\nexport class TrueFalseComponent implements ICellRendererAngularComp {\r\n  icon: string;\r\n\r\n  private trueIcon = 'check_circle';\r\n  private falseIcon = 'circle';\r\n\r\n  agInit(params: ICellRendererParams & TrueFalseParams): void {\r\n    let value: boolean = params.value;\r\n    if (params.reverse) { value = !value; }\r\n    if (params.trueIcon) { this.trueIcon = params.trueIcon; }\r\n    if (params.falseIcon) { this.falseIcon = params.falseIcon; }\r\n    this.icon = value ? this.trueIcon : this.falseIcon;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","export interface AgBoolCellIconSetting {\r\n  clickable?: boolean;\r\n  tooltip: string;\r\n  icon: string;\r\n  url?: string;\r\n  getUrl?: (data: any) => string;\r\n}\r\n\r\nexport interface AgBoolCellIconSettings {\r\n  states: Record<'true' | 'false' | string, AgBoolCellIconSetting>;\r\n}\r\n\r\nexport interface AgBoolCellIconsParams<T = any> {\r\n  settings(data: T): AgBoolCellIconSettings;\r\n}\r\n\r\nexport const AgBoolCellIconsDefault: AgBoolCellIconSettings = {\r\n  states: {\r\n    true: {\r\n      tooltip: 'true/on',\r\n      icon: 'radio_button_checked',\r\n    },\r\n    false: {\r\n      tooltip: 'false/off',\r\n      icon: 'radio_button_unchecked',\r\n    }\r\n  }\r\n};","<div class=\"icon-container\">\r\n  @if (data.url) {\r\n    <a [href]=\"data.url\" target=\"_blank\">\r\n      <ng-container *ngTemplateOutlet=\"showIcon\"></ng-container>\r\n    </a>\r\n  } @else {\r\n    <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n      <mat-icon>{{ data.icon }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n\r\n<ng-template #showIcon>\r\n  <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n    <mat-icon>{{ data.icon }}</mat-icon>\r\n  </div>\r\n</ng-template>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { AgBoolCellIconSetting, AgBoolCellIconSettings, AgBoolCellIconsDefault, AgBoolCellIconsParams } from './ag-bool-icon-params';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-ag-bool-icon-renderer',\r\n  templateUrl: './ag-bool-icon-renderer.html',\r\n  standalone: true,\r\n  imports: [TippyDirective, MatIconModule, NgClass],\r\n})\r\nexport class AgBoolIconRenderer implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  private allSettings: AgBoolCellIconSettings;\r\n\r\n  data: AgBoolCellIconSetting; // | { link: boolean  };\r\n\r\n  agInit(params: ICellRendererParams & AgBoolCellIconsParams): void {\r\n    this.value = params.value;\r\n\r\n    this.allSettings = params.settings?.(params.data) ?? AgBoolCellIconsDefault;\r\n    const d = this.allSettings.states[this.value ? 'true' : 'false'];\r\n    this.data = {\r\n      ...d,\r\n      url: d.url ?? d.getUrl?.(params.data),\r\n      // link: !!(d.url || d.getUrl),\r\n    };\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { ColDef } from '@ag-grid-community/core';\r\nimport { BooleanFilterComponent } from '../components/boolean-filter/boolean-filter.component';\r\nimport { App } from '../../apps-management/models/app.model';\r\nimport { AgBoolIconRenderer } from './apps-list-show/ag-bool-icon-renderer.component';\r\nimport { TrueFalseComponent } from '../../dev-rest/api/true-false/true-false.component';\r\nimport { TrueFalseParams } from '../../dev-rest/api/true-false/true-false.models';\r\n\r\nexport class ColumnDefinitions {\r\n  static ActionsPinnedRight1: ColDef = {\r\n    width: 42,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight3: ColDef = {\r\n    width: 122,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight4: ColDef = {\r\n    width: 162,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight5: ColDef = {\r\n    width: 202,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight6: ColDef = {\r\n    width: 82,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight7: ColDef = {\r\n    width: 62,\r\n    cellClass: 'secondary-action no-outline no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static IconShow: ColDef = {\r\n    headerName: 'Show',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'icons no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: BooleanFilterComponent,\r\n    valueGetter: (params) => {\r\n      const app: App = params.data;\r\n      return !app.IsHidden;\r\n    },\r\n    cellRenderer: AgBoolIconRenderer,\r\n  };\r\n\r\n  static Items: ColDef = {\r\n    width: 102,\r\n    headerClass: 'dense',\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static Fields: ColDef = {\r\n    width: 94,\r\n    headerClass: 'dense',\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  /**\r\n   * Very narrow columns, typically just showing 1 character\r\n   */\r\n  static Character: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Id: ColDef = {\r\n    headerName: 'ID',\r\n    field: 'Id',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'id-action no-padding no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static Boolean: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    sortable: true,\r\n  };\r\n\r\n  static Boolean2: ColDef = {\r\n    width: 100,\r\n    sortable: true,\r\n    cellClass: 'no-outline',\r\n    filter: BooleanFilterComponent,\r\n  };\r\n\r\n  static Boolean3: ColDef = {\r\n    headerClass: 'dense',\r\n    width: 80,\r\n    cellClass: 'no-outline',\r\n    cellRenderer: TrueFalseComponent,\r\n    cellRendererParams: (() => {\r\n      const params: TrueFalseParams = {\r\n        reverse: false,\r\n      };\r\n      return params;\r\n    })(),\r\n  }\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Number: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static TextWideType: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action highlight'.split(' '),\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextWide: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextWideMin100: ColDef = {\r\n    flex: 1,\r\n    minWidth: 100,\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  }\r\n\r\n  static TextWideFlex3: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextNarrow: ColDef = {\r\n    flex: 1,\r\n    minWidth: 150,\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextWideActionClass: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action no-padding no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n\r\n\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, NgModule } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n  ]\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule, NgClass, NgTemplateOutlet\r\n  ]\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n  standalone: true,\r\n  imports: [NgClass, MatIconModule, TippyDirective]\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy(): void {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>","import { Directive, HostListener } from '@angular/core';\r\n\r\nconst logThis = false;\r\n\r\n@Directive({\r\n  selector: '[appClickStopPropagation]',\r\n  standalone: true,\r\n})\r\nexport class ClickStopPropagationDirective {\r\n  constructor() {\r\n    if (logThis)\r\n      console.log('ClickStopPropagationDirective.constructor');\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    if (logThis)\r\n      console.log('ClickStopPropagationDirective.onClick', event);\r\n    event.stopPropagation();\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]', standalone: true})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[32]}