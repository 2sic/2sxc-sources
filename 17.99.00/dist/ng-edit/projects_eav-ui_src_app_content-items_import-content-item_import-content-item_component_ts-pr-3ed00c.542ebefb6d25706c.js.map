{"version":3,"file":"projects_eav-ui_src_app_content-items_import-content-item_import-content-item_component_ts-pr-3ed00c.542ebefb6d25706c.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","constructor","http","context","dnnContext","this","apiUrl","name","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","Éµfac","ImportContentItemComponent","dialogData","contentItemsService","uploadType","UploadTypes","ContentItem","title","description","allowedFileTypes","upload$","importItem","MAT_DIALOG_DATA","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","FileUploadDialogComponent","webApiFieldsRoot","webApiFieldsAll","webApiFieldsGetShared","ContentTypesFieldsService","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","contentTypeStaticName","fields","fld","Metadata","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","addInheritedField","targetContentTypeId","sourceContentTypeStaticName","sourceFieldGuid","newName","AppId","ContentTypeId","SourceType","SourceField","share","inherit","inheritMetadataOf","reOrder","idArray","Id","order","JSON","stringify","setTitle","item","rename","fieldId","IsTitle","Error","add","newField","Index","SortOrder","updateInputType","id","field","_angular_core__WEBPACK_IMPORTED_MODULE_3__","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/content-items/import-content-item/import-content-item.component.ts","./projects/eav-ui/src/app/content-items/import-content-item/import-content-item.component.html","./projects/eav-ui/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FileUploadDialogComponent, FileUploadDialogData, UploadTypes } from '../../shared/components/file-upload-dialog';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\n\r\n@Component({\r\n  selector: 'app-import-content-item',\r\n  templateUrl: './import-content-item.component.html',\r\n  styleUrls: ['./import-content-item.component.scss'],\r\n  standalone: true,\r\n  imports: [FileUploadDialogComponent,],\r\n})\r\nexport class ImportContentItemComponent {\r\n\r\n  uploadType = UploadTypes.ContentItem;\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) dialogData: FileUploadDialogData, contentItemsService: ContentItemsService) {\r\n    dialogData.title ??= `Import Single Item`;\r\n    dialogData.description ??= `Select an item file (json) from your computer to import.`;\r\n    dialogData.allowedFileTypes ??= 'json';\r\n    dialogData.upload$ ??= (files) => contentItemsService.importItem(files[0]);\r\n  }\r\n\r\n}\r\n","<app-file-upload-dialog [uploadType]=\"uploadType\"></app-file-upload-dialog>","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { InputTypeStrict } from '../constants/input-type.constants';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = 'admin/field/all';\r\nexport const webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString() },\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * \r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * \r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    // TODO: @SDV - do the same as in getShareableFields()\r\n    // but add parameter attributeId to the webapi call\r\n    // I'll create the backend afterwards\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString(), attributeId: attributeId.toString() },\r\n      });\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceContentTypeStaticName: string, sourceFieldGuid: string, newName: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'AddInheritedField'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: targetContentTypeId.toString(),\r\n        SourceType: sourceContentTypeStaticName,\r\n        SourceField: sourceFieldGuid,\r\n        name: newName,\r\n      }\r\n    });\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Share'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Inherit'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: InputTypeStrict) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"x_google_ignoreList":[]}