{"version":3,"file":"projects_eav-ui_src_app_app-administration_app-configuration_app-configuration_component_ts.843caa88be6d1f34.js","mappings":"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","names":["AppInternalsService","HttpServiceBase","getAppInternals","internals","this","getSignal","params","appid","appId","__ngFactoryType__","factory","ɵfac","AnalyzeParts","Settings","Resources","i0","_r1","ctx_r1","clipboard","copyToClipboard","contentItem","DisplayName","Folder","Version","RequiredVersion","RequiredDnnVersion","RequiredOqtaneVersion","edit","formatValue","tmp_2_0","tmp_4_0","tmp_6_0","tmp_8_0","tmp_10_0","tmp_12_0","tmp_14_0","appSettingsInternal","EntityLists","ToSxcContentApp","length","urlToOpenMetadata","tmp_16_0","MetadataList","Items","AppConfigurationCardComponent","#appInternalsSvc","#contentItemsSvc","#dialogRouter","constructor","context","snackBar","dialogSettings","input","required","transient","ContentItemsService","DialogRoutingService","getAllSig","eavConstants","contentTypes","appConfiguration","undefined","#refresh","signal","computed","ClipboardService","ngOnInit","doOnDialogClosed","update","value","ngOnDestroy","dismiss","#urlTo","url","urlSubRoute","staticName","getAll","subscribe","contentItems","form","Error","items","EditPrep","editId","Id","formUrl","convertFormToUrl","navParentFirstChild","GoToMetadata","getUrlApp","Context","App","Name","i1","i2","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","AppConfigurationCardComponent_Conditional_0_Template","MatCardModule","i3","MatIconModule","i4","MatButtonModule","i5","MatBadgeModule","i6","TippyDirective","DocsLinkHelperComponent","styles","AppConfigurationComponent_Conditional_0_Conditional_0_Conditional_1_Template","AppConfigurationComponent_Conditional_0_Conditional_0_Conditional_2_Template","ctx_r0","isGlobal","isPrimary","_r2","systemSettings","SystemSettingsScopes","fixContentType","customSettings","viewModelSig","systemSettingsCount","tmp_5_0","customSettingsCount","customSettingsFieldsCount","_r3","Site","AppConfigurationComponent_Conditional_0_Conditional_23_ng_container_14_Template","goToGlobal_r4","_r5","settings","AppConfigurationComponent_Conditional_0_Conditional_24_ng_container_15_Template","AppConfigurationComponent_Conditional_0_Conditional_24_ng_container_16_Template","urlToConfig","goToSite_r6","_r7","systemResources","customResources","systemResourcesCount","customResourcesCount","customResourcesFieldsCount","_r8","AppConfigurationComponent_Conditional_0_Conditional_55_ng_container_14_Template","_r9","resources","AppConfigurationComponent_Conditional_0_Conditional_56_ng_container_15_Template","AppConfigurationComponent_Conditional_0_Conditional_56_ng_container_16_Template","_r10","openGlobalSettings","_r11","openSiteSettings","AppConfigurationComponent_Conditional_0_Conditional_122_Conditional_0_Template","AppConfigurationComponent_Conditional_0_Conditional_122_Conditional_1_Template","isApp","AppConfigurationComponent_Conditional_0_Conditional_0_Template","AppConfigurationComponent_Conditional_0_Conditional_22_Template","AppConfigurationComponent_Conditional_0_Conditional_23_Template","AppConfigurationComponent_Conditional_0_Conditional_24_Template","AppConfigurationComponent_Conditional_0_Conditional_54_Template","AppConfigurationComponent_Conditional_0_Conditional_55_Template","AppConfigurationComponent_Conditional_0_Conditional_56_Template","AppConfigurationComponent_Conditional_0_ng_template_66_Template","AppConfigurationComponent_Conditional_0_ng_template_68_Template","AppConfigurationComponent_Conditional_0_Conditional_122_Template","urlToAnalyze","getLightSpeedLink","lightSpeedEnabled","tmp_20_0","appLightSpeedCount","urlToOpenPermissions","Enable","AppPermissions","Permissions","Count","urlToOpenLanguagePermissions","langPermsEnabled","AppConfigurationComponent","#dialogSvc","#contentTypesSvc","#appInternalsService","#contentItemsService","#dialogConfigSvc","matDialog","viewContainerRef","changeDetectorRef","DialogService","ContentTypesService","AppScopes","appSettingsInternal$","Subject","appStateAdvanced","inject","FeaturesScopedService","isEnabled","FeatureNames","LightSpeed","cspEnabled","ContentSecurityPolicy","PermissionsByLanguage","DialogConfigAppService","appIn","appInternalsSig","props","lsTypeName","appMetadata","ContentTypeName","filter","i","_Type","SettingsSystem","SettingsEntityScope","AppSettings","FieldAll","ResourcesSystem","AppResources","getCurrent$","appScope","SettingsScope","Global","systemSettingsScope","errorMsg","systemSettingsEntities","systemSettingsEntity","newFromType","customSettingsEntity","queryParams","error","urlToEdit","AppAdminHelpers","getLightSpeedEditParams","urlString","sitePrimaryApp","PrimaryApp","openAppAdministration","ZoneId","AppId","globalPrimaryApp","System","config","GoToPermissions","enabled","part","action","retrieveContentTypes","scopes","configuration","some","ct","save","StaticName","Description","Scope","ChangeStaticName","NewStaticName","success","AppConfigurationComponent_Conditional_0_Template","i7","NgTemplateOutlet","FeatureTextInfoComponent","RouterOutlet","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","type","encapsulation","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","add","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","delete","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-internals.service.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.models.ts","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration-card/app-configuration-card.component.html","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration-card/app-configuration-card.component.ts","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration.component.html","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration.component.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Injectable, Signal } from '@angular/core';\r\nimport { AppInternals } from '../../app-administration/models/app-internals.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiRoot = 'admin/appinternals/get';\r\n\r\n@Injectable()\r\nexport class AppInternalsService extends HttpServiceBase {\r\n\r\n  /**\r\n   * Fetches AppInternals for given key\r\n   * @param targetType type of target metadata item is for, e.g. for Entity, or ContentType\r\n   * @param keyType e.g. for keyType === guid, key === contentTypeStaticName\r\n   * @param key key of target metadata item is for\r\n   * @param contentTypeName name of content type where permissions are stored. If blank, backend returns all metadata except permissions\r\n   */\r\n\r\n  getAppInternals(internals: AppInternals): Signal<AppInternals> {\r\n    return this.getSignal<AppInternals>(webApiRoot, {\r\n      params: { appid: this.appId }\r\n    }, internals);\r\n  }\r\n\r\n}\r\n","\r\nexport const AnalyzeParts = {\r\n  Settings: 'Settings',\r\n  Resources: 'Resources',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n\r\nexport interface SettingsStackItem {\r\n  Path: string;\r\n  Priority: number;\r\n  Source: string;\r\n  TotalResults: number;\r\n  Type: string;\r\n  Value: string;\r\n  _value: string;\r\n}\r\n","<!-- App Config -->\r\n@if (contentItem()) {\r\n  <mat-card class=\"eav-card\">\r\n    <mat-card-header class=\"eav-card-header\">\r\n      <mat-card-title>Configuration</mat-card-title>\r\n      <mat-icon>redeem</mat-icon>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p></p>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Name:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].DisplayName)\">{{\r\n            formatValue(contentItem()[0]?.DisplayName)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Folder:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].Folder)\">{{\r\n            formatValue(contentItem()[0]?.Folder)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Version:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].Version)\">{{\r\n            formatValue(contentItem()[0]?.Version)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">For</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <b>2sxc: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredVersion) }}\r\n          </span>\r\n          <b> DNN: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredDnnVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredDnnVersion) }}\r\n          </span>\r\n          <b> Oqt: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredOqtaneVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredOqtaneVersion) }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <!-- </p> -->\r\n    </mat-card-content>\r\n    <div class=\"eav-card-space-div\"></div>\r\n    <mat-card-actions align=\"start\">\r\n      <app-docs-link-helper [link]=\"'https://docs.2sxc.org/basics/app/configuration.html'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n\r\n      <button mat-button class=\"eav-button__with-icon\" (click)=\"edit()\">\r\n        <mat-icon\r\n          matBadgeColor=\"accent\"\r\n          matBadgeSize=\"small\"\r\n          [matBadge]=\"appSettingsInternal()()?.EntityLists?.ToSxcContentApp.length || null\"\r\n          matBadgePosition=\"below after\"\r\n          aria-hidden=\"false\"\r\n          class=\"eav-icon\"\r\n          >edit</mat-icon\r\n        >\r\n        <span>Edit</span>\r\n      </button>\r\n      <a [href]=\"urlToOpenMetadata()\">\r\n        <button mat-button class=\"eav-button__with-icon\">\r\n          <mat-icon\r\n            matBadgeColor=\"accent\"\r\n            matBadgeSize=\"small\"\r\n            [matBadge]=\"appSettingsInternal()()?.MetadataList.Items.length || null\"\r\n            matBadgePosition=\"below after\"\r\n            aria-hidden=\"false\"\r\n            class=\"eav-icon\"\r\n            >local_offer</mat-icon\r\n          >\r\n          <span>Metadata</span>\r\n        </button>\r\n      </a>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, computed, input, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { transient } from '../../../../../../core';\r\nimport { DocsLinkHelperComponent } from '../../../admin-shared/docs-link-helper/docs-link-helper.component';\r\nimport { ContentItemsService } from '../../../content-items/services/content-items.service';\r\nimport { GoToMetadata } from '../../../metadata';\r\nimport { eavConstants } from '../../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../../shared/helpers/url-prep.helper';\r\nimport { DialogSettings } from '../../../shared/models/dialog-settings.model';\r\nimport { EditForm, EditPrep } from '../../../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../../../shared/routing/dialog-routing.service';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { Context } from '../../../shared/services/context';\r\nimport { AppInternalsService } from '../../services/app-internals.service';\r\n\r\n@Component({\r\n  selector: 'app-app-configuration-card',\r\n  templateUrl: './app-configuration-card.component.html',\r\n  styleUrls: ['./app-configuration-card.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n    DocsLinkHelperComponent,\r\n  ],\r\n})\r\nexport class AppConfigurationCardComponent implements OnInit, OnDestroy {\r\n  dialogSettings = input.required<DialogSettings>();\r\n\r\n  #appInternalsSvc = transient(AppInternalsService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  contentItem = this.#contentItemsSvc.getAllSig(eavConstants.contentTypes.appConfiguration, undefined);\r\n\r\n  #refresh = signal(0);\r\n\r\n  appSettingsInternal = computed(() => {\r\n    const refresh = this.#refresh();\r\n    return this.#appInternalsSvc.getAppInternals(undefined);\r\n  });\r\n\r\n  ngOnInit() {\r\n    this.#dialogRouter.doOnDialogClosed(() => {\r\n      this.#refresh.update(value => value + 1);\r\n    });\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.snackBar.dismiss();\r\n  }\r\n\r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  edit() {\r\n    const staticName = eavConstants.contentTypes.appConfiguration;\r\n    this.#contentItemsSvc.getAll(staticName).subscribe(contentItems => {\r\n      let form: EditForm;\r\n\r\n      if (contentItems.length < 1) throw new Error(`Found no settings for type ${staticName}`);\r\n      if (contentItems.length > 1) throw new Error(`Found too many settings for type ${staticName}`);\r\n      form = {\r\n        items: [EditPrep.editId(contentItems[0].Id)],\r\n      };\r\n\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navParentFirstChild([`edit/${formUrl}`]);\r\n    });\r\n  }\r\n\r\n  urlToOpenMetadata() {\r\n    return this.#urlTo(\r\n      GoToMetadata.getUrlApp(\r\n        this.context.appId,\r\n        `Metadata for App: ${this.dialogSettings().Context.App.Name} (${this.context.appId})`,\r\n      )\r\n    );\r\n  }\r\n\r\n  formatValue(value?: string): string {\r\n    return value === \"\" ? \"-\" : value ?? \"-\";\r\n  }\r\n}\r\n","@if (viewModelSig()) {\r\n  @if (isGlobal || isPrimary) {\r\n    <div class=\"alert alert-info scope-info\">\r\n      @if (isGlobal) {\r\n        This is the Global App. Anything configured here will affect all Sites and Apps in this installation.\r\n      }\r\n      @if (isPrimary) {\r\n        This is the Primary App of this Site. You can also configure sitewide settings and resources here.\r\n      }\r\n      See <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>.\r\n    </div>\r\n  }\r\n  <div class=\"eav-cards-box\">\r\n    <!-- Settings -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Settings</mat-card-title>\r\n        <mat-icon>settings</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          Settings are things like SQL-connection strings, default \"items-to-show\" numbers and similar. If necessary, settings like a link\r\n          to an RSS-Feed could be different in each language.\r\n          <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>\r\n        </p>\r\n        <table class=\"eav-settings-and-resources-table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>System Settings</th>\r\n              <th>Custom Settings</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!-- Settings for Global App -->\r\n            @if (isGlobal) {\r\n              <tr>\r\n                <th>Global</th>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"edit(eavConstants.contentTypes.systemSettings, SystemSettingsScopes.App)\"\r\n                    tippy=\"Edit global system settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customSettings, 'edit')\"\r\n                    tippy=\"Edit custom global settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customSettings, 'config')\"\r\n                    tippy=\"Configure fields of the custom global settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            }\r\n            <!-- Settings for Primary App -->\r\n            @if (isPrimary) {\r\n              <tr>\r\n                <th>Site</th>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"edit(eavConstants.contentTypes.systemSettings, SystemSettingsScopes.Site)\"\r\n                    tippy=\"Edit site system settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customSettings, 'edit')\"\r\n                    tippy=\"Edit custom site settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customSettings, 'config')\"\r\n                    tippy=\"Configure fields of the custom site settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            <!-- Settings for App and Content -->\r\n            @if (isApp) {\r\n              <tr>\r\n                <th>{{ dialogSettings.Context.App.Name }}</th>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"edit(eavConstants.contentTypes.systemSettings, SystemSettingsScopes.App)\"\r\n                    tippy=\"Edit app system settings\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"edit(eavConstants.contentTypes.settings)\" tippy=\"Edit custom app settings\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customSettingsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                  <a [href]=\"urlToConfig(eavConstants.contentTypes.settings)\" class=\"default-link\">\r\n                    <button mat-icon-button tippy=\"Configure fields of the custom app settings\">\r\n                      <mat-icon\r\n                        matBadgeColor=\"accent\"\r\n                        matBadgeSize=\"small\"\r\n                        [matBadge]=\"viewModelSig()?.customSettingsFieldsCount || null\"\r\n                        matBadgePosition=\"below after\"\r\n                        aria-hidden=\"false\"\r\n                        >dns</mat-icon\r\n                      >\r\n                    </button>\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/settings'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a [href]=\"urlToAnalyze(AnalyzeParts.Settings)\">\r\n          <button mat-button class=\"eav-button__with-icon\" tippy=\"See the result of combining all settings\">\r\n            <mat-icon class=\"eav-icon\">manage_search</mat-icon>\r\n            <span>Analyze Combined Settings</span>\r\n          </button>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Resources -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Language Resources (i18n)</mat-card-title>\r\n        <mat-icon>translate</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          Resources are used for labels and things like that in the App. They are usually needed to create multi-lingual views and such, and\r\n          should not be used for App-Settings.\r\n          <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>\r\n        </p>\r\n        <table class=\"eav-settings-and-resources-table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>System Resources</th>\r\n              <th>Custom Resources</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!-- Resources for Global App -->\r\n            @if (isGlobal) {\r\n              <tr>\r\n                <th>Global</th>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"edit(eavConstants.contentTypes.systemResources, SystemSettingsScopes.App)\"\r\n                    tippy=\"Edit global system resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customResources, 'edit')\"\r\n                    tippy=\"Edit custom global resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customResources, 'config')\"\r\n                    tippy=\"Configure fields of the custom global resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            }\r\n            <!-- Resources for Primary App -->\r\n            @if (isPrimary) {\r\n              <tr>\r\n                <th>Site</th>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"edit(eavConstants.contentTypes.systemResources, SystemSettingsScopes.Site)\"\r\n                    tippy=\"Edit site system resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customResources, 'edit')\"\r\n                    tippy=\"Edit custom site resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"fixContentType(eavConstants.contentTypes.customResources, 'config')\"\r\n                    tippy=\"Configure fields of the custom site resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            <!-- Resources for App and Content -->\r\n            @if (isApp) {\r\n              <tr>\r\n                <th>{{ dialogSettings.Context.App.Name }}</th>\r\n                <td>\r\n                  <button\r\n                    mat-icon-button\r\n                    (click)=\"edit(eavConstants.contentTypes.systemResources, SystemSettingsScopes.App)\"\r\n                    tippy=\"Edit app system resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                </td>\r\n                <td>\r\n                  <button mat-icon-button (click)=\"edit(eavConstants.contentTypes.resources)\" tippy=\"Edit custom app resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </button>\r\n                  <a [href]=\"urlToConfig(eavConstants.contentTypes.resources)\" class=\"default-link\">\r\n                    <button mat-icon-button tippy=\"Configure fields of the custom app resources\">\r\n                      <mat-icon\r\n                        matBadgeColor=\"accent\"\r\n                        matBadgeSize=\"small\"\r\n                        [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                        matBadgePosition=\"below after\"\r\n                        aria-hidden=\"false\"\r\n                        >dns</mat-icon\r\n                      >\r\n                    </button>\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/settings'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a [href]=\"urlToAnalyze(AnalyzeParts.Resources)\">\r\n          <button mat-button class=\"eav-button__with-icon\" tippy=\"See the result of combining all resources\">\r\n            <mat-icon class=\"eav-icon\">manage_search</mat-icon>\r\n            <span>Analyze Combined Resources</span>\r\n          </button>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Templates which are re-used in the table above -->\r\n    <ng-template #goToGlobal>\r\n      <tr>\r\n        <th>Global</th>\r\n        <td>\r\n          <button mat-icon-button (click)=\"openGlobalSettings()\" tippy=\"Go to global\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n    <ng-template #goToSite>\r\n      <tr>\r\n        <th>Site</th>\r\n        <td>\r\n          <button mat-icon-button (click)=\"openSiteSettings()\" tippy=\"Go to site\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </div>\r\n  <div class=\"eav-cards-box\">\r\n    <app-app-configuration-card [dialogSettings]=\"dialogSettings\"> </app-app-configuration-card>\r\n    <!-- LightSpeed -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Performance</mat-card-title>\r\n        <mat-icon>bolt</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>LightSpeed Output Cache to speed up page by 50-90%</p>\r\n        <app-feature-text-info [featureNameId]=\"'LightSpeedOutputCache'\" [asInfo]=\"true\"></app-feature-text-info>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/lightspeed'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a class=\"default-link\" [href]=\"'#' + getLightSpeedLink()\">\r\n          <button mat-button class=\"eav-button__with-icon\" disabled=\"{{ !lightSpeedEnabled() }}\">\r\n            <mat-icon\r\n              matBadgeColor=\"accent\"\r\n              matBadgeSize=\"small\"\r\n              [matBadge]=\"viewModelSig()?.appLightSpeedCount || null\"\r\n              matBadgePosition=\"below after\"\r\n              aria-hidden=\"false\"\r\n              class=\"eav-icon\"\r\n              >bolt</mat-icon\r\n            >\r\n            <span>Edit LightSpeed</span>\r\n          </button>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Security / CSP -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Security</mat-card-title>\r\n        <mat-icon>local_police</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>ContentSecurityPolicy (CSP) features in this App - for maximum control.</p>\r\n        <app-feature-text-info [featureNameId]=\"'ContentSecurityPolicy'\" [asInfo]=\"true\"></app-feature-text-info>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/csp'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Permissions -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Permissions</mat-card-title>\r\n        <mat-icon>person</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>Give access to the entire app (all data). Use with care.</p>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://docs.2sxc.org/basics/app/permissions.html'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a [href]=\"urlToOpenPermissions()\">\r\n          <button mat-button class=\"eav-button__with-icon\" [disabled]=\"!dialogSettings.Context.Enable.AppPermissions\">\r\n            <mat-icon\r\n              matBadgeColor=\"accent\"\r\n              matBadgeSize=\"small\"\r\n              matBadgePosition=\"below after\"\r\n              [matBadge]=\"dialogSettings.Context.App.Permissions.Count || null\"\r\n              aria-hidden=\"false\"\r\n              class=\"eav-icon\"\r\n              >person</mat-icon\r\n            >\r\n            <span>\r\n              Edit Permissions\r\n              @if (!dialogSettings.Context.Enable.AppPermissions) {\r\n                @if (isGlobal) {\r\n                  (not on Global App)\r\n                }\r\n                @if (isApp) {\r\n                  (not on Content)\r\n                }\r\n              }\r\n            </span>\r\n          </button>\r\n        </a>\r\n        <app-docs-link-helper\r\n          [link]=\"'https://patrons.2sxc.org/features/feat/PermissionsByLanguage'\"\r\n          [label]=\"\"\r\n          [icon]=\"\"\r\n        ></app-docs-link-helper>\r\n        <a [href]=\"urlToOpenLanguagePermissions(langPermsEnabled())\">\r\n          <button mat-button class=\"eav-button__with-icon\">\r\n            <mat-icon\r\n              [matBadgeHidden]=\"langPermsEnabled()\"\r\n              matBadgeSize=\"small\"\r\n              matBadge=\"💎\"\r\n              matBadgePosition=\"below after\"\r\n              aria-hidden=\"false\"\r\n              class=\"eav-icon\"\r\n            >\r\n              person\r\n            </mat-icon>\r\n            <span>Language Permissions</span>\r\n          </button>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n}\r\n<router-outlet></router-outlet>\r\n","import { AsyncPipe, NgTemplateOutlet } from '@angular/common';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef, computed, inject, signal } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { DocsLinkHelperComponent } from '../../admin-shared/docs-link-helper/docs-link-helper.component';\r\nimport { ContentItemsService } from '../../content-items/services/content-items.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesScopedService } from '../../features/features-scoped.service';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { SystemSettingsScopes, eavConstants } from '../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { AppScopes } from '../../shared/models/dialog-context.models';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { EditForm, EditPrep } from '../../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { AppAdminHelpers } from '../app-admin-helpers';\r\nimport { ContentTypeEdit } from '../models';\r\nimport { AppInternals } from '../models/app-internals.model';\r\nimport { ContentTypesService } from '../services';\r\nimport { AppInternalsService } from '../services/app-internals.service';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { AnalyzeParts } from '../sub-dialogs/analyze-settings/analyze-settings.models';\r\nimport { AppConfigurationCardComponent } from './app-configuration-card/app-configuration-card.component';\r\n\r\n@Component({\r\n  selector: 'app-app-configuration',\r\n  templateUrl: './app-configuration.component.html',\r\n  styleUrls: ['./app-configuration.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatBadgeModule,\r\n    NgTemplateOutlet,\r\n    AppConfigurationCardComponent,\r\n    FeatureTextInfoComponent,\r\n    RouterOutlet,\r\n    AsyncPipe,\r\n    TippyDirective,\r\n    DocsLinkHelperComponent,\r\n  ],\r\n})\r\nexport class AppConfigurationComponent implements OnInit, OnDestroy {\r\n\r\n  #dialogSvc = transient(DialogService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n\r\n  dialogSettings: DialogSettings;\r\n\r\n  eavConstants = eavConstants;\r\n  AnalyzeParts = AnalyzeParts;\r\n  SystemSettingsScopes = SystemSettingsScopes;\r\n  AppScopes = AppScopes;\r\n  isGlobal: boolean;\r\n  isPrimary: boolean;\r\n  isApp: boolean;\r\n\r\n  // More proper ViewModel\r\n  appSettingsInternal$ = new Subject<AppInternals>();\r\n\r\n  public appStateAdvanced = false;\r\n  public features = inject(FeaturesScopedService);\r\n\r\n  protected lightSpeedEnabled = this.features.isEnabled[FeatureNames.LightSpeed];\r\n  protected cspEnabled = this.features.isEnabled[FeatureNames.ContentSecurityPolicy];\r\n  protected langPermsEnabled = this.features.isEnabled[FeatureNames.PermissionsByLanguage];\r\n\r\n  #appInternalsService = transient(AppInternalsService);\r\n\r\n  #contentItemsService = transient(ContentItemsService);\r\n\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  #refresh = signal(0);\r\n\r\n  appIn = computed(() => {\r\n    const refresh = this.#refresh();\r\n    return this.#appInternalsService.getAppInternals(undefined)\r\n  });\r\n\r\n  viewModelSig = computed(() => {\r\n    const appInternalsSig = this.appIn()();\r\n    if (!appInternalsSig)\r\n      return null;\r\n\r\n    const props = appInternalsSig?.EntityLists;\r\n    const lsTypeName = eavConstants.appMetadata.LightSpeed.ContentTypeName;\r\n\r\n    const result: AppConfigurationViewModel = {\r\n      appLightSpeedCount: appInternalsSig.MetadataList.Items.filter(i => i._Type.Name === lsTypeName).length,\r\n      systemSettingsCount: this.isPrimary\r\n        ? props.SettingsSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n        : props.SettingsSystem.filter(i => !i.SettingsEntityScope).length,\r\n      customSettingsCount: props.AppSettings?.length,\r\n      customSettingsFieldsCount: appInternalsSig.FieldAll.AppSettings?.length,\r\n      systemResourcesCount: this.isPrimary\r\n        ? props.ResourcesSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n        : props.ResourcesSystem.filter(i => !i.SettingsEntityScope).length,\r\n      customResourcesCount: props.AppResources?.length,\r\n      customResourcesFieldsCount: appInternalsSig?.FieldAll.AppResources?.length,\r\n    };\r\n\r\n    return result;\r\n  });\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.#dialogRouter.doOnDialogClosed(() => {\r\n      this.#refresh.update(value => value + 1);\r\n    });\r\n\r\n    this.#dialogConfigSvc.getCurrent$().subscribe((dialogSettings) => {\r\n      this.dialogSettings = dialogSettings;\r\n      const appScope = dialogSettings.Context.App.SettingsScope;\r\n      this.isGlobal = appScope === AppScopes.Global;\r\n      this.isPrimary = appScope === AppScopes.Site;\r\n      this.isApp = appScope === AppScopes.App;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.snackBar.dismiss();\r\n  }\r\n\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  edit(staticName: string, systemSettingsScope?: Of<typeof SystemSettingsScopes>) {\r\n    this.#contentItemsService.getAll(staticName).subscribe(contentItems => {\r\n      let form: EditForm;\r\n      let errorMsg: string;\r\n\r\n      switch (staticName) {\r\n        case eavConstants.contentTypes.systemSettings:\r\n        case eavConstants.contentTypes.systemResources:\r\n          const systemSettingsEntities = contentItems.filter(i =>\r\n            systemSettingsScope === SystemSettingsScopes.App\r\n              ? !i.SettingsEntityScope\r\n              : i.SettingsEntityScope === SystemSettingsScopes.Site\r\n          );\r\n          if (systemSettingsEntities.length > 1) {\r\n            errorMsg = `Found too many settings for type ${staticName}`;\r\n          } else {\r\n            const systemSettingsEntity = systemSettingsEntities[0];\r\n            form = {\r\n              items: [\r\n                systemSettingsEntity == null\r\n                  ? EditPrep.newFromType(staticName, {\r\n                    ...(systemSettingsScope === SystemSettingsScopes.Site && {\r\n                      SettingsEntityScope: SystemSettingsScopes.Site,\r\n                    }),\r\n                  })\r\n                  : EditPrep.editId(systemSettingsEntity.Id),\r\n              ],\r\n            };\r\n          }\r\n          break;\r\n\r\n        case eavConstants.contentTypes.customSettings:\r\n        case eavConstants.contentTypes.customResources:\r\n          if (contentItems.length > 1) {\r\n            errorMsg = `Found too many settings for type ${staticName}`;\r\n          } else {\r\n            const customSettingsEntity = contentItems[0];\r\n            form = {\r\n              items: [\r\n                customSettingsEntity == null\r\n                  ? EditPrep.newFromType(staticName)\r\n                  : EditPrep.editId(customSettingsEntity.Id),\r\n              ],\r\n            };\r\n          }\r\n          break;\r\n\r\n        default:\r\n          if (contentItems.length < 1) {\r\n            errorMsg = `Found no settings for type ${staticName}`;\r\n          } else if (contentItems.length > 1) {\r\n            errorMsg = `Found too many settings for type ${staticName}`;\r\n          } else {\r\n            form = {\r\n              items: [EditPrep.editId(contentItems[0].Id)],\r\n            };\r\n          }\r\n      }\r\n\r\n      if (errorMsg) {\r\n        // Navigate to the error component with the error message\r\n        this.#dialogRouter.navParentFirstChild(['message/e'], {\r\n          queryParams: { error: errorMsg },\r\n        });\r\n      } else {\r\n        const formUrl = convertFormToUrl(form);\r\n        this.#dialogRouter.navParentFirstChild([`edit/${formUrl}`]);\r\n      }\r\n    });\r\n  }\r\n\r\n  // TODO: @2pp - implement migration on edit cases\r\n  urlToEdit(staticName: string, systemSettingsScope?: Of<typeof SystemSettingsScopes>) {\r\n    this.#contentItemsService.getAll(staticName).subscribe(contentItems => {\r\n      let form: EditForm;\r\n      let errorMsg: string;\r\n\r\n      switch (staticName) {\r\n        case eavConstants.contentTypes.systemSettings:\r\n        case eavConstants.contentTypes.systemResources:\r\n          const systemSettingsEntities = contentItems.filter(i =>\r\n            systemSettingsScope === SystemSettingsScopes.App\r\n              ? !i.SettingsEntityScope\r\n              : i.SettingsEntityScope === SystemSettingsScopes.Site\r\n          );\r\n          if (systemSettingsEntities.length > 1) {\r\n            errorMsg = `Found too many settings for type ${staticName}`;\r\n          } else {\r\n            const systemSettingsEntity = systemSettingsEntities[0];\r\n            form = {\r\n              items: [\r\n                systemSettingsEntity == null\r\n                  ? EditPrep.newFromType(staticName, {\r\n                    ...(systemSettingsScope === SystemSettingsScopes.Site && {\r\n                      SettingsEntityScope: SystemSettingsScopes.Site,\r\n                    }),\r\n                  })\r\n                  : EditPrep.editId(systemSettingsEntity.Id),\r\n              ],\r\n            };\r\n          }\r\n          break;\r\n\r\n        case eavConstants.contentTypes.customSettings:\r\n        case eavConstants.contentTypes.customResources:\r\n          if (contentItems.length > 1) {\r\n            errorMsg = `Found too many settings for type ${staticName}`;\r\n          } else {\r\n            const customSettingsEntity = contentItems[0];\r\n            form = {\r\n              items: [\r\n                customSettingsEntity == null\r\n                  ? EditPrep.newFromType(staticName)\r\n                  : EditPrep.editId(customSettingsEntity.Id),\r\n              ],\r\n            };\r\n          }\r\n          break;\r\n\r\n        default:\r\n          if (contentItems.length < 1) {\r\n            errorMsg = `Found no settings for type ${staticName}`;\r\n          } else if (contentItems.length > 1) {\r\n            errorMsg = `Found too many settings for type ${staticName}`;\r\n          } else {\r\n            form = {\r\n              items: [EditPrep.editId(contentItems[0].Id)],\r\n            };\r\n          }\r\n      }\r\n\r\n      if (errorMsg) {\r\n        // Navigate to the error component with the error message\r\n        this.#dialogRouter.navParentFirstChild(['message/e'], {\r\n          queryParams: { error: errorMsg },\r\n        });\r\n\r\n        return '';\r\n      } else {\r\n        return this.#urlTo(\r\n          `edit/${convertFormToUrl(form)}`\r\n        )\r\n      }\r\n    });\r\n  }\r\n\r\n  getLightSpeedLink(): string {\r\n    const form = AppAdminHelpers.getLightSpeedEditParams(this.context.appId);\r\n    const formUrl = convertFormToUrl(form);\r\n    const urlString = `edit/${formUrl}`;\r\n    return this.#dialogRouter.urlSubRoute(urlString);\r\n  }\r\n\r\n  openSiteSettings() {\r\n    const sitePrimaryApp = this.dialogSettings.Context.Site.PrimaryApp;\r\n    this.#dialogSvc.openAppAdministration(sitePrimaryApp.ZoneId, sitePrimaryApp.AppId, 'app');\r\n  }\r\n\r\n  openGlobalSettings() {\r\n    const globalPrimaryApp = this.dialogSettings.Context.System.PrimaryApp;\r\n    this.#dialogSvc.openAppAdministration(globalPrimaryApp.ZoneId, globalPrimaryApp.AppId, 'app');\r\n  }\r\n\r\n  // TODO: @2pp - finish the migration on config cases\r\n  // need to find out where the last usecases in UI are\r\n  config(staticName: string) {\r\n    this.#dialogRouter.navParentFirstChild([`fields/${staticName}`]);\r\n  }\r\n\r\n  urlToConfig(staticName: string) {\r\n    return this.#urlTo(`fields/${staticName}`);\r\n  }\r\n\r\n  urlToOpenPermissions() {\r\n    return this.#urlTo(GoToPermissions.getUrlApp(this.context.appId));\r\n  }\r\n\r\n  urlToOpenLanguagePermissions(enabled: boolean) {\r\n    if (enabled)\r\n      return this.#urlTo('language-permissions')\r\n    else\r\n      return this.#urlTo('edit-language-permissions')\r\n  }\r\n\r\n  urlToAnalyze(part: Of<typeof AnalyzeParts>) {\r\n    return this.#urlTo(`analyze/${part}`);\r\n  }\r\n\r\n  fixContentType(staticName: string, action: 'edit' | 'config') {\r\n    this.#contentTypesSvc.retrieveContentTypes(eavConstants.scopes.configuration.value).subscribe(contentTypes => {\r\n      const contentTypeExists = contentTypes.some(ct => ct.Name === staticName);\r\n      if (contentTypeExists) {\r\n        if (action === 'edit') {\r\n          this.edit(staticName);\r\n        } else if (action === 'config') {\r\n          this.config(staticName);\r\n        }\r\n      } else {\r\n        const newContentType = {\r\n          StaticName: '',\r\n          Name: staticName,\r\n          Description: '',\r\n          Scope: eavConstants.scopes.configuration.value,\r\n          ChangeStaticName: false,\r\n          NewStaticName: '',\r\n        } as ContentTypeEdit;\r\n        this.#contentTypesSvc.save(newContentType).subscribe(success => {\r\n          if (!success) return;\r\n\r\n          if (action === 'edit') {\r\n            this.edit(staticName);\r\n          } else if (action === 'config') {\r\n            this.config(staticName);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nclass AppConfigurationViewModel {\r\n  // Lightspeed\r\n  appLightSpeedCount: number;\r\n\r\n  systemSettingsCount: number;\r\n  customSettingsCount: number;\r\n  customSettingsFieldsCount: number;\r\n  systemResourcesCount: number;\r\n  customResourcesCount: number;\r\n  customResourcesFieldsCount: number;\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                componentRef.destroy();\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[6]}