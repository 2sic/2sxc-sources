{"version":3,"file":"projects_eav-ui_src_app_apps-management_apps-management-nav_apps-management-nav_component_ts--5cddfe.27a24ae576979ddf.js","mappings":"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","names":["ExportAppService","HttpServiceBaseSignal","getAppInfo","httpResource","url","this","apiUrl","params","appid","appId","zoneId","exportAppUrl","webApiAppRoot","exportForVersionControl","_x","_this","_asyncToGenerator","includeContentGroups","resetAppGuid","withFiles","getStatusPromise","toString","withPortalFiles","apply","arguments","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_5__","jDH","factory","ɵfac","webApiViews","ViewsService","getAllOnce","getAllLive","refresh","delete","id","Id","import","file","formData","FormData","append","http","post","export","window","open","getPolymorphismLive","getUsage","guid","newHttpResource","_angular_core__WEBPACK_IMPORTED_MODULE_4__","ServiceBase","constructor","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__","logSpecs","all","getEntities","getAvailableEntities","webApiEntityRoot","webApiEntityList","EntityService","log","classLog","queryService","transient","QueryService","getEntities$","fnIf","pipe","filter","p","switchMap","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","fields","map","data","Default","contentType","entityId","force","parentId","parentField","parent","_angular_core__WEBPACK_IMPORTED_MODULE_9__","webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","nameId","getHttpApiUrl","contentTypeId","getType","getTypes","scope","defaultValue","retrieveContentTypesPromise","fetchPromise","getScopesPromise","then","scopesData","scopes","old","Object","keys","key","name","value","getScopesSig","scopesSignal","computed","getScopesV2Promise","save","staticName","NameId","files","createGhost","sourceNameId","ErrorStateMatcher","isErrorState","control","form","invalid","touched","submitted","i0","token","providedIn","MatFormFieldModule","type","imports","MatCommonModule","ObserversModule","MatFormField","AppsManagementNavItems","path","icon","tippy","child","breadcrumb_r3","AppsManagementNavComponent_ng_container_8_Conditional_1_Template","last_r4","AppsManagementNavComponent","#globalDialogConfigSvc","#dialogClose","dialog","context","media","inject","DialogConfigGlobalService","smallScreen","matchMedia","sideNavOpened","matches","navItems","DialogRoutingService","ngOnInit","fetchDialogSettings","doOnDialogClosed","addEventListener","c","sidenav","opened","mode","closeDialog","close","getShared$","subscribe","i1","i2","i3","debug_node_JnOYh9kg","VBU","selectors","viewQuery","rf","ctx","_r1","sidenav_r2","AppsManagementNavComponent_ng_container_8_Template","AppsManagementNavComponent_ng_template_9_Template","AppsManagementNavComponent_For_19_Template","_forTrack0","emptyTemplate_r6","MatToolbarModule","i4","MatIconModule","i5","BreadcrumbComponent","BreadcrumbItemDirective","MatButtonModule","i6","MatSidenavModule","i7","RouterOutlet","NavItemListComponent","ToggleDebugDirective","styles","getFromQuery","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","Guids","join","_angular_core__WEBPACK_IMPORTED_MODULE_2__","webApiAppPartsRoot","ImportAppPartsService","importAppParts","resetApp","_angular_core__WEBPACK_IMPORTED_MODULE_3__","_ErrorStateTracker","_defaultMatcher","ngControl","_parentFormGroup","_parentForm","_stateChanges","errorState","matcher","updateErrorState","oldState","newState","next","router","route","super","snapshot","urlSegments","split","getParam","paramMap","get","getParams","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","add","childDialogClosed$","a","end","doOnDialogClosedWithData","#childDialogClosedWithData","urlSubRoute","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","navRelative","commands","events","event","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","tap","fn","snapShot","prev","curr","_angular_core__WEBPACK_IMPORTED_MODULE_8__","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","_angular_core__WEBPACK_IMPORTED_MODULE_0__","EJ8","pure","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","readAsText","ExportAppPartsService","getContentInfoLiveParam","exportParts","contentTypeIds","entityIds","templateIds","ImportAppService","importApp","changedName","retryOnDuplicate","Messages","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","getAll","getAllSig","getAllRes","importQuery","clonePipeline","update","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","r","initial","res","obs","from","fileBase64","AppId","ContentBase64","success","Success","clonePipelinePromise"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./node_modules/@angular/material/fesm2022/error-options-DCNQlTOA.mjs","./node_modules/@angular/material/fesm2022/module-DzZHEh7B.mjs","./projects/eav-ui/src/app/apps-management/apps-management-nav/management-nav-items.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.html","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./node_modules/@angular/material/fesm2022/error-state-Dtb1IHM-.mjs","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts"],"sourcesContent":["import { httpResource } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\nconst webApiAppRootStatistics = 'admin/app/Statistics';\r\nconst webApiAppRootSaveData = 'admin/app/SaveData';\r\n\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBaseSignal {\r\n\r\n  getAppInfo() {\r\n    return httpResource<AppInfo>(() => ({\r\n      url: this.apiUrl(webApiAppRootStatistics),\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    }));\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n  async exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }): Promise<number> {\r\n    return this.getStatusPromise(webApiAppRootSaveData, {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViews = 'admin/view/all';\r\nconst webApiViewDelete = 'admin/view/delete';\r\nconst webApiViewImport = 'admin/view/import';\r\nconst webApiViewPolymorph = 'admin/view/polymorphism';\r\nconst webApiViewUsage = 'admin/view/usage';\r\nconst webApiJson = 'admin/view/json';\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBaseSignal {\r\n\r\n  getAllOnce() {\r\n    return httpResource<View[]>(() => {\r\n      return ({\r\n        url: this.apiUrl(webApiViews),\r\n        params: { appId: this.appId }\r\n      });\r\n    });\r\n  }\r\n\r\n  getAllLive(refresh: Signal<unknown>) {\r\n    return httpResource<View[]>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiViews),\r\n        params: { appId: this.appId }\r\n      });\r\n    });\r\n  }\r\n\r\n  async delete(id: number): Promise<number> {\r\n    return this.getStatusPromise(webApiViewDelete, {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiJson)\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphismLive(refresh: Signal<unknown>) {\r\n    return httpResource<Polymorphism>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiViewPolymorph),\r\n        params: { appId: this.appId }\r\n      });\r\n    });\r\n  }\r\n  getUsage(guid: string) {\r\n    return this.newHttpResource<ViewUsage[]>(() => ({\r\n      url: this.apiUrl(webApiViewUsage),\r\n      params: { appId: this.appId, guid: guid }\r\n    }));\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBaseSignal } from './http-service-base-signal';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBaseSignal {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { computed, Injectable, Signal } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  // TODO: @2dg, ask 2dm \r\n  // content-export.component.ts\r\n  // content-import.component.ts\r\n  // data.component.ts\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  getType(nameId: string) {\r\n    return httpResource<ContentType>(() => ({\r\n      url: this.apiUrl(webApiTypeGet),\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }));\r\n  }\r\n\r\n  getTypes(scope: Signal<string>) {\r\n    return httpResource<ContentType[]>(() => ({\r\n      url: this.apiUrl(webApiTypes),\r\n      params: { appId: this.appId, scope: scope() }\r\n    }), {defaultValue: []});\r\n  }\r\n\r\n  retrieveContentTypesPromise(scope: string): Promise<ContentType[]> {\r\n    return this.fetchPromise<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  getScopesPromise(): Promise<ScopeOption[]> {\r\n    return this.fetchPromise<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).then(scopesData => {\r\n      const scopes = scopesData.old;\r\n      const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({\r\n        name: scopes[key],\r\n        value: key,\r\n      }));\r\n      return scopeOptions;\r\n    });\r\n  }\r\n\r\n  getScopesSig() {\r\n    const scopesSignal = httpResource<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(() => ({\r\n      url: this.apiUrl(webApiTypeScopes),\r\n      params: { appid: this.appId },\r\n    }));\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      // Access the value property directly without calling scopesSignal as a function\r\n      const value = scopesSignal.value;\r\n      const scopesData = value();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2Promise(): Promise<ScopeDetailsDto[]> {\r\n    return this.fetchPromise<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).then(scopesData => scopesData.scopes);\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\nclass ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, decorators: [{\n            type: Injectable\n        }] });\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nclass ErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nexport { ErrorStateMatcher as E, ShowOnDirtyErrorStateMatcher as S };\n","import { ObserversModule } from '@angular/cdk/observers';\nimport * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nimport { j as MatFormField, M as MatLabel, b as MatError, c as MatHint, e as MatPrefix, g as MatSuffix } from './form-field-C9DZXojn.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\n\nclass MatFormFieldModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            ObserversModule,\n            MatFormField,\n            MatLabel,\n            MatError,\n            MatHint,\n            MatPrefix,\n            MatSuffix], exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            ObserversModule,\n            MatFormField, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        ObserversModule,\n                        MatFormField,\n                        MatLabel,\n                        MatError,\n                        MatHint,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                    exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule],\n                }]\n        }] });\n\nexport { MatFormFieldModule as M };\n","import { NavItem } from \"../../shared/models/nav-item.model\";\r\n\r\nexport const AppsManagementNavItems: NavItem[] = [\r\n  {\r\n    name: 'System', path: 'system', icon: 'settings', tippy: 'System Info', child: [\r\n      { name: 'Register', path: 'registration', icon: 'how_to_reg', tippy: 'Register this System on 2sxc Patrons' },\r\n    ]\r\n  },\r\n  { name: 'Apps', path: 'list', icon: 'star', tippy: 'Apps' },\r\n  { name: 'Languages', path: 'languages', icon: 'translate', tippy: 'Languages' },\r\n  { name: 'Extensions / Features', path: 'license', icon: 'tune', tippy: 'Extensions and Features' },\r\n];\r\n","\r\n<mat-toolbar appToggleDebug>\r\n  <div class=\"toolbar-container\">\r\n    <!-- Mat Icon Menu -->\r\n    <mat-icon class=\"menu-container\" (click)=\"sidenav.opened = !sidenav.opened\">menu</mat-icon>\r\n    <!-- App Name -->\r\n    <div>\r\n      <span> Manage Zone {{ zoneId }} </span>\r\n    </div>\r\n    <!-- Breadcrum in the Toolbar after show Img and Aoo Name -->\r\n    <xng-breadcrumb [separator]=\"emptyTemplate\">\r\n      <ng-container *xngBreadcrumbItem=\"let breadcrumb; let info = info; let last = last\">\r\n        @if (last)\r\n        {\r\n          <mat-icon class=\"breadcrumb-icon\">chevron_right</mat-icon>\r\n          {{ breadcrumb }}\r\n        }\r\n      </ng-container>\r\n    </xng-breadcrumb>\r\n    <ng-template #emptyTemplate></ng-template>\r\n  </div>\r\n  <span class=\"toolbar-spacer\"></span>\r\n  <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n<mat-sidenav-container appToggleDebug>\r\n  <mat-sidenav #sidenav [mode]=\"smallScreen.matches ? 'over' : 'side'\" [opened]=\"sideNavOpened\">\r\n    @for (navItem of navItems; track navItem.path)\r\n    {\r\n      <app-nav-item-list [navItem]=\"navItem\"></app-nav-item-list>\r\n    }\r\n\r\n    <div class=\"sideNav-bottom-info\">\r\n      <p>use Burger icon to show/hide menu</p>\r\n    </div>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <div class=\"container-content\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n","import { MediaMatcher } from '@angular/cdk/layout';\r\nimport { Component, inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSidenav, MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { BreadcrumbComponent, BreadcrumbItemDirective } from 'xng-breadcrumb';\r\nimport { transient } from '../../../../../core';\r\nimport { DialogConfigGlobalService } from '../../app-administration/services';\r\nimport { NavItemListComponent } from '../../shared/components/nav-item-list/nav-item-list.component';\r\nimport { ToggleDebugDirective } from '../../shared/directives/toggle-debug.directive';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppsManagementNavItems } from './management-nav-items';\r\n\r\n@Component({\r\n    selector: 'app-apps-management-nav',\r\n    templateUrl: './apps-management-nav.component.html',\r\n    styleUrls: ['./apps-management-nav.component.scss'],\r\n    imports: [\r\n        MatToolbarModule,\r\n        MatIconModule,\r\n        BreadcrumbComponent,\r\n        BreadcrumbItemDirective,\r\n        MatButtonModule,\r\n        MatSidenavModule,\r\n        RouterOutlet,\r\n        NavItemListComponent,\r\n        ToggleDebugDirective,\r\n    ]\r\n})\r\nexport class AppsManagementNavComponent implements OnInit {\r\n  @ViewChild('sidenav') sidenav!: MatSidenav;\r\n\r\n  #globalDialogConfigSvc = inject(DialogConfigGlobalService);\r\n\r\n  zoneId = this.context.zoneId;\r\n\r\n  smallScreen: MediaQueryList = this.media.matchMedia('(max-width: 1000px)');\r\n  sideNavOpened = !this.smallScreen.matches;\r\n\r\n  navItems = AppsManagementNavItems;\r\n  #dialogClose = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<AppsManagementNavComponent>,\r\n    private context: Context,\r\n    private media: MediaMatcher,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchDialogSettings();\r\n\r\n    // Trigger settings load? not sure why, because it's cached in the service... on dialog close?\r\n    this.#dialogClose.doOnDialogClosed(() => this.fetchDialogSettings());\r\n\r\n    this.smallScreen.addEventListener('change', c => (\r\n      this.sidenav.opened = !c.matches,\r\n      this.sidenav.mode = c.matches ? 'over' : 'side'\r\n    ));\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  private fetchDialogSettings() {\r\n    this.#globalDialogConfigSvc.getShared$(0).subscribe();\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      { Guids: itemIds} // 2dg Guids must be in the body as an array (API filter & too many IDs for URL parameters).\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBaseSignal {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","/**\n * Class that tracks the error state of a component.\n * @docs-private\n */\nclass _ErrorStateTracker {\n    _defaultMatcher;\n    ngControl;\n    _parentFormGroup;\n    _parentForm;\n    _stateChanges;\n    /** Whether the tracker is currently in an error state. */\n    errorState = false;\n    /** User-defined matcher for the error state. */\n    matcher;\n    constructor(_defaultMatcher, ngControl, _parentFormGroup, _parentForm, _stateChanges) {\n        this._defaultMatcher = _defaultMatcher;\n        this.ngControl = ngControl;\n        this._parentFormGroup = _parentFormGroup;\n        this._parentForm = _parentForm;\n        this._stateChanges = _stateChanges;\n    }\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const matcher = this.matcher || this._defaultMatcher;\n        const control = this.ngControl ? this.ngControl.control : null;\n        const newState = matcher?.isErrorState(control, parent) ?? false;\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this._stateChanges.next();\n        }\n    }\n}\n\nexport { _ErrorStateTracker as _ };\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe((data: unknown) => {\r\n        l.a('Dialog closed', { data });\r\n        return callback();\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  public doOnDialogClosedWithData(callback: (data: any) => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.#childDialogClosedWithData().subscribe(({ state }) => {\r\n        l.a('Dialog closed', { state });\r\n        callback(state);\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n  #childDialogClosedWithData() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      tap(event => {\r\n        const l = this.log.fn(\"childDialogClosed$\", {\r\n          event,\r\n          firstChild: this.route.snapshot.firstChild,\r\n          snapShot: this.route.snapshot,\r\n          state: this.router.getCurrentNavigation()?.extras.state,\r\n        });\r\n        l.a('NavigationEnd', { event });\r\n        l.end();\r\n      }),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => ({\r\n        hasChildNow: !!this.route.snapshot.firstChild,\r\n        state: this.router.getCurrentNavigation()?.extras.state,\r\n      })),\r\n      pairwise(),\r\n      filter(([prev, curr]) => prev.hasChildNow && !curr.hasChildNow),\r\n      map(([prev, curr]) => ({\r\n        hadChildBefore: prev.hasChildNow,\r\n        hasChildNow: curr.hasChildNow,\r\n        state: curr.state\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safeHtml',\r\n})\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\nconst webApiAppPartsGet = 'admin/appParts/get';\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBaseSignal {\r\n\r\n  getContentInfoLiveParam(scope: Signal<string>) {\r\n    return httpResource<ContentInfo>(() => {\r\n      return {\r\n        url: this.apiUrl(webApiAppPartsGet),\r\n        params: {\r\n          appid: this.appId,\r\n          zoneId: this.zoneId,\r\n          scope: scope()\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBaseSignal {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst logSpecs = {\r\n  all: true,\r\n  getAll: false,\r\n  getAllSig: true,\r\n  getAllLive: false,\r\n  getAllRes: true,\r\n  importQuery: false,\r\n  clonePipeline: false,\r\n  delete: false,\r\n  update: false,\r\n};\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  log = classLog({ PipelinesService }, logSpecs);\r\n  // TODO: @2dg, ask 2dm \r\n  getAll(contentType: string) {\r\n    const l = this.log.fnIf('getAll');\r\n    return l.r(this.getHttpApiUrl<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }));\r\n  }\r\n\r\n  // Full Code, repated x times\r\n  getAllLive(contentType: string, refresh: Signal<unknown>) {\r\n    this.log.fnIf('getAllLive', { contentType, refresh });\r\n    return httpResource<Query[]>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiEntityList),\r\n        params: { appId: this.appId, contentType: contentType }\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Experimental httpResource use! */\r\n  getAllRes(contentType: string, initial?: Query[]) {\r\n    const l = this.log.fnIf('getAllRes');\r\n    const res = httpResource<Query[]>(() => ({\r\n      url: webApiEntityList,\r\n      params: { appId: this.appId, contentType },\r\n    }), { defaultValue: initial });\r\n    return l.r(res);\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    const l = this.log.fnIf('importQuery');\r\n    const obs = from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n    return l.r(obs);\r\n  }\r\n\r\n  clonePipelinePromise(id: number): Promise<null> {\r\n    const l = this.log.fnIf('clonePipeline');\r\n    const obs = this.fetchPromise<null>(webApiQueryClone, {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n    return l.r(obs);\r\n  }\r\n\r\n  delete(id: number) {\r\n    const l = this.log.fnIf('delete');\r\n    const obs = this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n    return l.r(obs);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[5,6,12]}