{"version":3,"file":"projects_eav-ui_src_app_app-administration_queries_queries_component_ts.d077469281920ca9.js","mappings":"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","names":["BADGE_CONTENT_CLASS","_MatBadgeStyleLoader","static","__ngFactoryType__","i0","type","selectors","decls","vars","template","rf","ctx","styles","encapsulation","changeDetection","MatBadge","_ngZone","inject","NgZone","_elementRef","ElementRef","_ariaDescriber","AriaDescriber","_renderer","Renderer2","_animationsDisabled","_idGenerator","_IdGenerator","color","this","_color","value","_setColor","overlap","disabled","position","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","size","hidden","_badgeElement","_inlineBadgeDescription","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","constructor","styleLoader","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","isAbove","indexOf","isAfter","getBadgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","getId","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","hostAttrs","hostVars","hostBindings","inputs","booleanAttribute","MatBadgeModule","imports","A11yModule","MatCommonModule","QueryActions","Edit","Metadata","Rest","Clone","Permissions","Export","Delete","ctx_r0","params","urlTo","actions","item","length","_Permissions","Count","_r2","do","_EditInfo","DisableDelete","QueriesActionsComponent","agInit","data","enablePermissions","getEnablePermissions","refresh","debug_node_JnOYh9kg","VBU","consts","QueriesActionsComponent_Conditional_4_Template","QueriesActionsComponent_Conditional_5_Template","QueriesActionsComponent_Conditional_6_Template","QueriesActionsComponent_Conditional_7_Template","QueriesActionsComponent_ng_template_13_Template","DisableMetadata","DisableEdit","menu_r3","MatRippleModule","i1","MatIconModule","i2","i3","MatMenuModule","i4","TippyDirective","$event","_r1","ctx_r1","importQuery","queries","gridOptions","logSpecs","all","urlToOpenVisualQueryDesigner","titleCellRenderer","cloneQuery","deleteQuery","exportQuery","QueriesComponent","log","classLog","#pipelineSvc","transient","PipelinesService","#contentExportSvc","ContentExportService","#dialogRouter","DialogRoutingService","#dialogConfigSvc","DialogConfigAppService","#context","Context","#snackBar","MatSnackBar","#helpTextConst","empty","hint","uxHelpText","computed","buildGridOptions","signal","getAllLive","eavConstants","contentTypes","query","doOnDialogClosed","#triggerRefresh","getCurrent$","subscribe","settings","Enable","AppPermissions","urlToImportQuery","#urlTo","files","navRelative","state","urlToNewQuery","#urlToEditOrNew","update","v","url","urlSubRoute","convertFormToUrl","items","EditPrep","newFromType","TestParameters","pipelineDesigner","testParameters","editId","Id","#urlToOpenVisualQueryDesigner","RouteLinkHelper","routeTo","#urlToOpenMetadata","GoToMetadata","getUrlEntity","Guid","Name","#urlToPermissions","GoToPermissions","#urlToRestApi","GoToDevRest","getUrlQueryInAdmin","l","fnIf","open","clonePipelinePromise","then","duration","end","exportEntity","confirm","delete","res","#titleCellRenderer","values","defaultGridOptions","columnDefs","ColumnDefinitions","IdWithDefaultRenderer","cellClass","p","ReadOnly","split","cellRendererParams","idFieldParamsTooltipGetter","TextWide","field","sort","cellRenderer","TextWideFlex3","ActionsPinnedRight4","action","QueriesComponent_Conditional_1_Template","tmp_2_0","tmp_3_0","MatDialogActions","MatButtonModule","RouterOutlet","SxcGridModule","DragAndDropDirective","GridWithHelpComponent","HttpServiceBaseSignal","exportContent","selectedIds","selectedIdsString","join","apiUrl","appId","language","defaultLanguage","contentTypeStaticName","recordExport","resourcesReferences","languageReferences","window","exportJson","typeName","id","prefix","metadata","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","gridWrapper","viewChild","read","agGrid","contentChild","AgGridAngular","dialogAction","helpText","input","required","rowLength","DEFAULT_ROW_HEIGHT","GRID_HEADER_HEIGHT","HELP_CARD_BUFFER","effect","gridWrapperEl","untracked","#updateLayout","agGridEl","dialogActionEl","helpCard","querySelector","toggle","style","flex","dimensions","#calculateDimensions","rowHeight","agGridHeight","maxHeight","document","clientHeight","dialogHeaderHeight","dialogActionHeight","shouldHideHelp","helpCardHeight","wrapperHeight","offsetHeight","_angular_core__WEBPACK_IMPORTED_MODULE_1__","contentQueries","dirIndex"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/badge.mjs","./projects/eav-ui/src/app/app-administration/queries/queries-actions/queries-actions.ts","./projects/eav-ui/src/app/app-administration/queries/queries-actions/queries-actions.component.html","./projects/eav-ui/src/app/app-administration/queries/queries-actions/queries-actions.component.ts","./projects/eav-ui/src/app/app-administration/queries/queries.component.html","./projects/eav-ui/src/app/app-administration/queries/queries.component.ts","./projects/eav-ui/src/app/content-export/services/content-export.service.ts","./projects/eav-ui/src/app/shared/ag-grid/grid-with-help/grid-with-help.component.ts","./projects/eav-ui/src/app/shared/ag-grid/grid-with-help/grid-with-help.component.html"],"sourcesContent":["import { AriaDescriber, _IdGenerator, InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, ElementRef, Renderer2, DOCUMENT, HOST_TAG_NAME, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/bidi';\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\\n\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber);\n    _renderer = inject(Renderer2);\n    _animationsDisabled = _animationsDisabled();\n    _idGenerator = inject(_IdGenerator);\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/badge/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    _color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    overlap = true;\n    /** Whether the badge is disabled. */\n    disabled;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position = 'above after';\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size = 'medium';\n    /** Whether the badge is hidden. */\n    hidden;\n    /** Visible badge element. */\n    _badgeElement;\n    /** Inline badge description. Used when the badge is applied to non-interactive host elements. */\n    _inlineBadgeDescription;\n    /** Whether the OnInit lifecycle hook has run yet */\n    _isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    _interactivityChecker = inject(InteractivityChecker);\n    _document = inject(DOCUMENT);\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_MatBadgeStyleLoader);\n        styleLoader.load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = this._elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const tagName = inject(HOST_TAG_NAME);\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.dev/components/badge/overview#accessibility\n            if (tagName.toLowerCase() === 'mat-icon' &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', this._idGenerator.getId('mat-badge-content-'));\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationsDisabled) {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && !this._animationsDisabled) {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadge, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\nexport { MatBadge, MatBadgeModule };\n","import { Query } from '../../models/query.model';\r\n\r\n// Test @2dm 2020-11-20 - I believe the current model has way too much ceremony\r\n// I need to change ca. 10 places just to get one more action to work\r\n// that's not great\r\nexport enum QueryActions {\r\n  Edit,\r\n  Metadata,\r\n  Rest,\r\n  Clone,\r\n  Permissions,\r\n  Export,\r\n  Delete,\r\n}\r\n\r\nexport interface QueriesActionsParams {\r\n  getEnablePermissions(): boolean;\r\n  \r\n  urlTo(action: QueryActions, query: Query): void;\r\n  do(action: QueryActions, query: Query): void;\r\n}\r\n","<div class=\"actions-component\">\r\n  <a [href]=\"params.urlTo(actions.Edit, item)\" class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Edit\">\r\n    <mat-icon>edit</mat-icon>\r\n  </a>\r\n\r\n  @if (!item._EditInfo.DisableMetadata) {\r\n    <a [href]=\"params.urlTo(actions.Metadata, item)\" class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Metadata\">\r\n      <mat-icon\r\n        [matBadge]=\"item.Metadata?.length\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!item.Metadata?.length\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        local_offer\r\n      </mat-icon>\r\n    </a>\r\n  }\r\n  @if (item._EditInfo.DisableMetadata) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"item.Metadata?.length\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!item.Metadata?.length\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!item._EditInfo.DisableEdit && enablePermissions) {\r\n    <a [href]=\"params.urlTo(actions.Permissions, item)\" class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Permissions\">\r\n      <mat-icon\r\n        [matBadge]=\"item._Permissions.Count\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!item._Permissions.Count\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        person\r\n      </mat-icon>\r\n    </a>\r\n  }\r\n  @if (item._EditInfo.DisableEdit || !enablePermissions) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"item._Permissions.Count\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!item._Permissions.Count\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        person\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <a [href]=\"params.urlTo(actions.Rest, item)\" mat-menu-item class=\"default-link\">\r\n      <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      <span>REST API</span>\r\n    </a>\r\n    <button mat-menu-item (click)=\"params.do(actions.Clone, item)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n      <span>Copy</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"params.do(actions.Export, item)\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"params.do(actions.Delete, item)\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { Query } from '../../models/query.model';\r\nimport { QueriesActionsParams, QueryActions } from './queries-actions';\r\n\r\n@Component({\r\n    selector: 'app-queries-actions',\r\n    templateUrl: './queries-actions.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatBadgeModule,\r\n        MatMenuModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class QueriesActionsComponent implements ICellRendererAngularComp {\r\n  item: Query;\r\n  params: ICellRendererParams & QueriesActionsParams;\r\n  enablePermissions: boolean;\r\n  actions = QueryActions;\r\n\r\n  agInit(params: ICellRendererParams & QueriesActionsParams): void {\r\n    this.params = params;\r\n    this.item = this.params.data;\r\n    this.enablePermissions = this.params.getEnablePermissions();\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<app-grid-with-help [helpText]=\"uxHelpText()\" [refresh]=\"refresh()\" [rowLength]=\"queries()?.length\">\r\n  @if (queries()?.length) {\r\n    <ag-grid-angular\r\n      class=\"ag-theme-material\"\r\n      [rowData]=\"queries()\"\r\n      [gridOptions]=\"gridOptions\"\r\n      appDragAndDrop\r\n      [allowedFileTypes]=\"'json'\"\r\n      (filesDropped)=\"importQuery($event)\"\r\n    >\r\n    </ag-grid-angular>\r\n  }\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <a [href]=\"urlToImportQuery()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import query\" tippyPlacement=\"top\">\r\n      <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n      <span>Query</span>\r\n    </a>\r\n    <a [href]=\"urlToNewQuery()\" mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new query\" tippyPlacement=\"top\">\r\n      <mat-icon>add</mat-icon>\r\n    </a>\r\n  </mat-dialog-actions>\r\n</app-grid-with-help>\r\n<router-outlet></router-outlet>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, computed, inject, OnInit, signal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../../../../core';\r\nimport { ContentExportService } from '../../content-export/services/content-export.service';\r\nimport { GoToDevRest } from '../../dev-rest/go-to-dev-rest';\r\nimport { GoToMetadata } from '../../metadata';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { GridWithHelpComponent, HelpTextConst } from '../../shared/ag-grid/grid-with-help/grid-with-help.component';\r\nimport { FileUploadDialogData } from '../../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DragAndDropDirective } from '../../shared/directives/drag-and-drop.directive';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { EditPrep } from '../../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { RouteLinkHelper } from '../../shared/routing/route-link-helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { PipelinesService } from '../services/pipelines.service';\r\nimport { QueriesActionsParams, QueryActions } from './queries-actions/queries-actions';\r\nimport { QueriesActionsComponent } from './queries-actions/queries-actions.component';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  urlToOpenVisualQueryDesigner: true,\r\n  titleCellRenderer: true,\r\n  cloneQuery: false,\r\n  deleteQuery: false,\r\n  exportQuery: false,\r\n};\r\n\r\n@Component({\r\n  selector: 'app-queries',\r\n  templateUrl: './queries.component.html',\r\n  imports: [\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    SxcGridModule,\r\n    DragAndDropDirective,\r\n    TippyDirective,\r\n    GridWithHelpComponent,\r\n  ]\r\n})\r\nexport class QueriesComponent implements OnInit {\r\n\r\n  log = classLog({ QueriesComponent }, logSpecs);\r\n\r\n  #pipelineSvc = transient(PipelinesService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n\r\n  #context = inject(Context);\r\n  #snackBar = inject(MatSnackBar);\r\n\r\n\r\n  // UI Help Text for the UX Help Info Card\r\n  #helpTextConst: HelpTextConst = {\r\n    empty: {\r\n      description: '<p><b>This is where you manage Visual Queries</b><br>They help you select/sort/filter and publish data.</p>',\r\n      hint: \"<p>Click the (+) in the bottom right corner to create your first Visual Query.</p>\"\r\n    },\r\n    content: {\r\n      description: '<p><b>This is where you manage Visual Queries</b><br>They help you select/sort/filter and publish data.</p>',\r\n      hint: '<p>Click on the title to edit the Visual Query. <br>You can also configure permissions, or copy or export the queries.</p>'\r\n    }\r\n  };\r\n\r\n  uxHelpText = computed(() => {\r\n    const data = this.queries();\r\n    return data?.length === 0 ? this.#helpTextConst.empty : this.#helpTextConst.content;\r\n  })\r\n\r\n  enablePermissions!: boolean;\r\n  public gridOptions = this.buildGridOptions();\r\n\r\n  refresh = signal(0);\r\n\r\n  queries = this.#pipelineSvc.getAllLive(eavConstants.contentTypes.query, this.refresh).value;\r\n\r\n  ngOnInit() {\r\n    // watch for return from dialog to reload queries\r\n    this.#dialogRouter.doOnDialogClosed(() => this.#triggerRefresh());\r\n\r\n    // get setting for enablePermissions on load\r\n    this.#dialogConfigSvc.getCurrent$().subscribe(settings => {\r\n      this.enablePermissions = settings.Context.Enable.AppPermissions;\r\n    });\r\n  }\r\n\r\n  //#region methods for template actions\r\n\r\n  urlToImportQuery() {\r\n    return this.#urlTo(`import`);\r\n  }\r\n\r\n  importQuery(files?: File[]) {\r\n    this.#dialogRouter.navRelative(['import'], { state: { files } satisfies FileUploadDialogData });\r\n  }\r\n\r\n  urlToNewQuery() {\r\n    return this.#urlToEditOrNew(null);\r\n  }\r\n\r\n  //#endregion\r\n\r\n  #triggerRefresh() {\r\n    this.refresh.update(v => ++v);\r\n  }\r\n\r\n  #urlTo(url: string) {\r\n    return `#${this.#dialogRouter.urlSubRoute(url)}`;\r\n  }\r\n\r\n  #urlToEditOrNew(query?: Query) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          query == null\r\n            ? EditPrep.newFromType(eavConstants.contentTypes.query, { TestParameters: eavConstants.pipelineDesigner.testParameters })\r\n            : EditPrep.editId(query.Id),\r\n        ],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  #urlToOpenVisualQueryDesigner(query: Query): string {\r\n    return '#/' + new RouteLinkHelper().routeTo(this.#context, `query/${query.Id}`);\r\n  }\r\n\r\n  #urlToOpenMetadata(query: Query): string {\r\n    return this.#urlTo(\r\n      GoToMetadata.getUrlEntity(query.Guid, `Metadata for Query: ${query.Name} (${query.Id})`)\r\n    );\r\n  }\r\n\r\n  #urlToPermissions(query: Query): string {\r\n    return this.#urlTo(GoToPermissions.getUrlEntity(query.Guid));\r\n  }\r\n\r\n  #urlToRestApi(query: Query): string {\r\n    return this.#urlTo(GoToDevRest.getUrlQueryInAdmin(query.Guid));\r\n  }\r\n\r\n  private cloneQuery(query: Query) {\r\n    const l = this.log.fnIf('cloneQuery', { query });\r\n    this.#snackBar.open('Copying...');\r\n    this.#pipelineSvc.clonePipelinePromise(query.Id).then(() => {\r\n      this.#snackBar.open('Copied', null, { duration: 2000 });\r\n      this.#triggerRefresh();\r\n    });\r\n    l.end();\r\n  }\r\n\r\n  private exportQuery(query: Query) {\r\n    const l = this.log.fnIf('exportQuery', { query });\r\n    this.#contentExportSvc.exportEntity(query.Id, 'Query', true);\r\n    l.end();\r\n  }\r\n\r\n  private deleteQuery(query: Query) {\r\n    const l = this.log.fnIf('deleteQuery', { query });\r\n    if (!confirm(`Delete Pipeline '${query.Name}' (${query.Id})?`))\r\n      return;\r\n    this.#snackBar.open('Deleting...');\r\n    this.#pipelineSvc.delete(query.Id).subscribe(res => {\r\n      this.#snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.#triggerRefresh();\r\n    });\r\n    l.end();\r\n  }\r\n\r\n  /** Render the title cell w/link - as own method to allow better debugging */\r\n  #titleCellRenderer(query: Query) {\r\n    const l = this.log.fnIf('titleCellRenderer', { query });\r\n    const url = this.#urlToOpenVisualQueryDesigner(query);\r\n    l.values({ url });\r\n    return `<a href=\"${url}\" target=\"_blank\" class=\"default-link\" style=\"display: block; width: 100%; height: 100%;\">\r\n              ${query.Name}\r\n            </a>`;\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.IdWithDefaultRenderer,\r\n          cellClass: (p: { data: Query }) => `id-action no-padding no-outline ${p.data._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' '),\r\n          cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<Query>(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Name',\r\n          sort: 'asc',\r\n          cellClass: (p: { data: Query }) => `${p.data._EditInfo.DisableEdit ? 'no-outline' : 'primary-action highlight'}`.split(' '),\r\n          cellRenderer: (p: { data: Query }) => this.#titleCellRenderer(p.data),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideFlex3,\r\n          field: 'Description',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight4,\r\n          cellRenderer: QueriesActionsComponent,\r\n          cellRendererParams: ({\r\n            getEnablePermissions: () => this.enablePermissions,\r\n            do: (action, query) => {\r\n              switch (action) {\r\n                case QueryActions.Clone: return this.cloneQuery(query);\r\n                case QueryActions.Export: return this.exportQuery(query);\r\n                case QueryActions.Delete: return this.deleteQuery(query);\r\n              }\r\n            },\r\n            urlTo: (action, query) => {\r\n              switch (action) {\r\n                case QueryActions.Edit: return this.#urlToEditOrNew(query);\r\n                case QueryActions.Metadata: return this.#urlToOpenMetadata(query);\r\n                case QueryActions.Rest: return this.#urlToRestApi(query);\r\n                case QueryActions.Permissions: return this.#urlToPermissions(query);\r\n              }\r\n            },\r\n          } satisfies QueriesActionsParams),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { ContentExport } from '../models/content-export.model';\r\n\r\nconst webApiEntityRootDownload = 'admin/entity/Download';\r\nconst webApiEntityRootJson = 'admin/entity/Json';\r\nconst webApiTypeRootJson = 'admin/type/Json';\r\n\r\n\r\n@Injectable()\r\nexport class ContentExportService extends HttpServiceBaseSignal {\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.apiUrl(webApiEntityRootDownload)\r\n      + '?appId=' + this.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.apiUrl(webApiTypeRootJson)\r\n      + '?appId=' + this.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.apiUrl(webApiEntityRootJson)\r\n      + '?appId=' + this.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n}\r\n","import { AgGridAngular } from '@ag-grid-community/angular';\r\nimport { Component, contentChild, effect, ElementRef, input, untracked, viewChild } from '@angular/core';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\n\r\nexport interface HelpTextConst {\r\n  empty: GridWithHelpInput;\r\n  content: GridWithHelpInput;\r\n}\r\n\r\nexport interface GridWithHelpInput {\r\n  description: string;\r\n  hint: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-grid-with-help',\r\n  imports: [],\r\n  templateUrl: './grid-with-help.component.html',\r\n  styleUrl: './grid-with-help.component.scss'\r\n})\r\n\r\nexport class GridWithHelpComponent {\r\n  // ViewChild and ContentChild references - Access to DOM elements\r\n  gridWrapper = viewChild(\"gridWrapper\", { read: ElementRef });\r\n  agGrid = contentChild(AgGridAngular, { read: ElementRef });\r\n  dialogAction = contentChild(MatDialogActions, { read: ElementRef });\r\n\r\n  // Input properties - Required data from parent component\r\n  readonly helpText = input.required<GridWithHelpInput>({});\r\n  readonly refresh = input.required<number>();\r\n  readonly rowLength = input.required<number>();\r\n\r\n  // Constants - Fixed values for layout calculations\r\n  readonly DEFAULT_ROW_HEIGHT = 47; // Default height for AG Grid rows in pixels\r\n  readonly GRID_HEADER_HEIGHT = 64; // Height of AG Grid header in pixels\r\n  readonly HELP_CARD_BUFFER = 12;   // Additional buffer space for help card in pixels\r\n\r\n  constructor() {\r\n    // Effect that reacts to changes in refresh and rowLength signals\r\n    effect(() => {\r\n      const refresh = this.refresh();\r\n      const rowLength = this.rowLength();\r\n      const gridWrapperEl = this.gridWrapper()?.nativeElement;\r\n\r\n      // Early return if grid wrapper element is not available\r\n      if (!gridWrapperEl) return;\r\n\r\n      // Untracked execution to prevent unnecessary effect re-runs during layout updates\r\n      untracked(() => this.#updateLayout(gridWrapperEl, rowLength));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Main layout update method - Handles the dynamic sizing and positioning of grid and help card\r\n   * @param gridWrapperEl - The main container element\r\n   * @param rowLength - Number of rows in the grid\r\n   */\r\n  #updateLayout(gridWrapperEl: HTMLElement, rowLength: number): void {\r\n    // Get references to essential DOM elements\r\n    const agGridEl = this.agGrid()?.nativeElement;\r\n    const dialogActionEl = this.dialogAction()?.nativeElement;\r\n    const helpCard = gridWrapperEl.querySelector('.help-info-card') as HTMLElement;\r\n\r\n    helpCard.classList.toggle('center-center', rowLength === 0);\r\n\r\n    // Early return if critical elements are missing\r\n    if (!agGridEl || !dialogActionEl) return;\r\n\r\n    helpCard.style.flex = \"\";\r\n\r\n    // Calculate all necessary dimensions for layout\r\n    const dimensions = this.#calculateDimensions(gridWrapperEl, agGridEl, dialogActionEl, helpCard, rowLength);\r\n\r\n    // Set AG Grid height based on row count and maximum height to prevent overflow\r\n    agGridEl.style.flex = dimensions.rowHeight ? `0 0 ${dimensions.agGridHeight}px` : '0px';\r\n    // TODO: 2dg, discus with 2ro, style not have a calc () fn\r\n    const maxHeight = document.querySelector('.mat-sidenav-content').clientHeight - dimensions.dialogHeaderHeight - dimensions.dialogActionHeight;\r\n    agGridEl.style.maxHeight = `${maxHeight}px`;\r\n\r\n    // Determine if help card should be hidden when content exceeds available space\r\n    const shouldHideHelp = dimensions.helpCardHeight + dimensions.agGridHeight + dimensions.dialogActionHeight + dimensions.dialogHeaderHeight > dimensions.wrapperHeight;\r\n\r\n    helpCard.style.flex = \"1 1 auto\";\r\n    // Remove Help card from layout if it should be hidden\r\n    helpCard?.classList.toggle('hidden-help-info-card', shouldHideHelp);\r\n  }\r\n\r\n  // Calculate dimensions for AG Grid and help card based on current layout\r\n  #calculateDimensions(gridWrapperEl: HTMLElement, agGridEl: HTMLElement, dialogActionEl: HTMLElement, helpCard: HTMLElement, rowLength: number) {\r\n    const rowHeight = agGridEl.querySelector('.ag-row')?.clientHeight ?? this.DEFAULT_ROW_HEIGHT;\r\n    const agGridHeight = this.GRID_HEADER_HEIGHT + (rowLength * rowHeight);\r\n    const helpCardHeight = helpCard.clientHeight + this.HELP_CARD_BUFFER;\r\n    const dialogActionHeight = dialogActionEl.offsetHeight;\r\n    const dialogHeaderHeight = gridWrapperEl.querySelector('.eav-dialog-header')?.clientHeight ?? 0;\r\n    // Get total available wrapper height\r\n    const wrapperHeight = gridWrapperEl.offsetHeight;\r\n    return {\r\n      rowHeight,\r\n      agGridHeight,\r\n      helpCardHeight,\r\n      dialogActionHeight,\r\n      dialogHeaderHeight,\r\n      wrapperHeight\r\n    };\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"grid-wrapper-dynamic\" #gridWrapper>\r\n  <ng-content select=\"[eav-dialog-header]\"></ng-content>\r\n  <ng-content select=\"[eav-dialog-content]\"> </ng-content>\r\n  <ng-content select=\"ag-grid-angular\"></ng-content>\r\n  <div class=\"help-info-card\">\r\n    <div class=\"help-info-card-text\">\r\n      <span [innerHTML]=\"helpText().description\"></span>\r\n      <span [innerHTML]=\"helpText().hint\"></span>\r\n    </div>\r\n  </div>\r\n  <ng-content select=\"mat-dialog-actions\"></ng-content>\r\n</div>\r\n"],"x_google_ignoreList":[0]}