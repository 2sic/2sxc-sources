{"version":3,"file":"projects_eav-ui_src_app_apps-management_create-app_create-app_component_ts.0a147aa652873901.js","mappings":"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","names":["ServiceBase","constructor","this","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","jDH","factory","ɵfac","AppInstallSettingsService","http","installSettingsSubject","Subject","settings$","asObservable","pipe","map","startWith","subscribe","loadGettingStarted","isContentApp","get","json","next","i0","i1","_angular_core__WEBPACK_IMPORTED_MODULE_3__","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","target","eventName","options","resultSelector","isFunction","undefined","mapOneOrManyArgs","add","remove","isEventTarget","addEventListener","removeEventListener","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","Observable","subscriber","args","length","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","FieldHintComponent","isError","input","isShort","toggleIsShort","_angular_core__WEBPACK_IMPORTED_MODULE_0__","VBU","selectors","inputs","ngContentSelectors","_c0","decls","vars","consts","template","rf","ctx","_r1","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","MatFormFieldModule","NgClass","NgTemplateOutlet","styles","logSpecs","doOnDialogClosed","DialogRoutingService","router","route","super","log","classLog","snapshot","url","urlSegments","split","getParam","key","paramMap","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","fnIf","childDialogClosed$","data","a","end","doOnDialogClosedWithData","#childDialogClosedWithData","urlSubRoute","params","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","navRelative","commands","events","filter","event","NavigationEnd","firstChild","pairwise","hadChildBefore","hasChildNow","tap","fn","snapShot","prev","curr","_angular_core__WEBPACK_IMPORTED_MODULE_8__","appNamePattern","ctx_r0","appNameError","CreateAppComponent_Conditional_16_Conditional_0_Template","CreateAppComponent_Conditional_16_Conditional_1_Template","form","controls","name","errors","required","pattern","_r2","switchToImportApp","remoteInstallerUrl","CreateAppComponent_Conditional_26_Conditional_0_Template","ready","CreateAppComponent","#dialogRouter","dialog","snackBar","sanitizer","hostClass","loading","signal","showAppCatalog","alreadyProcessing","appsListService","transient","AppsListService","installSettingsService","inject","Router","packageUrl","canCreate","messages$","window","evt","origin","x","JSON","parse","set","packages","buildForm","updateCanCreate","valueChanges","settings","remoteUrl","includes","bypassSecurityTrustResourceUrl","effect","ngOnInit","create","createObservable","disable","open","duration","appTemplateId","Number","value","trim","replace","createTemplate","error","handleCreateError","handleCreateSuccess","enable","closeDialog","close","UntypedFormGroup","UntypedFormControl","Validators","onTemplateChange","segments","Boolean","join","appTemplateIdValue","i2","i3","debug_node_JnOYh9kg","viewQuery","CreateAppComponent_Conditional_16_Template","$event","CreateAppComponent_Conditional_25_Template","CreateAppComponent_Conditional_26_Template","touched","RouterOutlet","FormsModule","i4","ReactiveFormsModule","i5","MatInputModule","i6","MatSelectModule","MatOptionModule","MatDialogActions","MatButtonModule","i7","MatRadioModule","i8","MatIconModule","i9","MAT_ICON_DEFAULT_OPTIONS","InjectionToken","MAT_ICON_LOCATION","providedIn","MAT_ICON_LOCATION_FACTORY","_document","DOCUMENT","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","funcIriPattern","MatIcon","_elementRef","ElementRef","_iconRegistry","MatIconRegistry","_errorHandler","ErrorHandler","_defaultColor","color","_color","inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","_previousFontSetClass","_previousFontIconClass","_svgName","_svgNamespace","_previousPath","_elementsWithExternalReferences","_currentIconFetch","EMPTY","ariaHidden","HostAttributeToken","optional","defaults","nativeElement","setAttribute","_splitIconName","iconName","parts","Error","ngAfterViewChecked","cachedElements","size","newPath","_prependPathToReferences","clear","_usingFontIcon","_setSvgElement","svg","path","_cacheChildrenWithExternalReferences","appendChild","layoutElement","childCount","childNodes","child","nodeType","nodeName","toLowerCase","elem","fontSetClasses","classNameForFontAlias","getDefaultFontSetClass","className","forEach","classList","elements","attrs","element","elementsWithFuncIri","querySelectorAll","Map","i","elementWithReference","getAttribute","match","attributes","push","rawName","namespace","getNamedSvgIcon","take","err","handleError","message","type","hostAttrs","hostVars","hostBindings","booleanAttribute","exportAs","encapsulation","changeDetection","imports","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/services/service-base.ts","./projects/eav-ui/src/app/shared/services/getting-started.service.ts","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/apps-management/constants/app.patterns.ts","./projects/eav-ui/src/app/apps-management/create-app/create-app.component.html","./projects/eav-ui/src/app/apps-management/create-app/create-app.component.ts","./node_modules/@angular/material/fesm2022/icon.mjs"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","\r\nimport { startWith, map, tap } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { InstallSettings } from '../models/installer-models';\r\n\r\n// copied from 2sxc-ui app/installer\r\n@Injectable()\r\nexport class AppInstallSettingsService {\r\n\r\n  private installSettingsSubject: Subject<InstallSettings> = new Subject<InstallSettings>();\r\n  settings$: Observable<InstallSettings> = this.installSettingsSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    const ready$ = this.settings$.pipe(\r\n      map(() => true),\r\n      startWith(false));\r\n\r\n    ready$.subscribe();\r\n  }\r\n\r\n  public loadGettingStarted(isContentApp: boolean): void {\r\n    this.http.get<InstallSettings>(`sys/install/InstallSettings?isContentApp=${isContentApp}`)\r\n      .subscribe(json => this.installSettingsSubject.next(json));\r\n  }\r\n}\r\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n    selector: 'app-field-hint',\r\n    templateUrl: './field-hint.component.html',\r\n    styleUrls: ['./field-hint.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        NgClass,\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe((data: unknown) => {\r\n        l.a('Dialog closed', { data });\r\n        return callback();\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  public doOnDialogClosedWithData(callback: (data: any) => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.#childDialogClosedWithData().subscribe(({ state }) => {\r\n        l.a('Dialog closed', { state });\r\n        callback(state);\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n  #childDialogClosedWithData() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      tap(event => {\r\n        const l = this.log.fn(\"childDialogClosed$\", {\r\n          event,\r\n          firstChild: this.route.snapshot.firstChild,\r\n          snapShot: this.route.snapshot,\r\n          state: this.router.getCurrentNavigation()?.extras.state,\r\n        });\r\n        l.a('NavigationEnd', { event });\r\n        l.end();\r\n      }),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => ({\r\n        hasChildNow: !!this.route.snapshot.firstChild,\r\n        state: this.router.getCurrentNavigation()?.extras.state,\r\n      })),\r\n      pairwise(),\r\n      filter(([prev, curr]) => prev.hasChildNow && !curr.hasChildNow),\r\n      map(([prev, curr]) => ({\r\n        hadChildBefore: prev.hasChildNow,\r\n        hasChildNow: curr.hasChildNow,\r\n        state: curr.state\r\n      }))\r\n    );\r\n  }\r\n}\r\n","export const appNamePattern = /^[A-Za-z](?:[A-Za-z0-9\\s\\(\\)-]+)*$/;\r\nexport const appNameError = 'Standard letters, numbers, spaces, hyphens and round brackets are allowed. Must start with a letter.';\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Create App</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"eav-dialog-content\">\r\n    <router-outlet></router-outlet>\r\n    <form [formGroup]=\"form\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n        <mat-label>Name</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"name\" />\r\n      </mat-form-field>\r\n      <app-field-hint> App name will also be used for the folder </app-field-hint>\r\n      @if (form.controls.name.touched) {\r\n        @if (form.controls.name.errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> Required </app-field-hint>\r\n        }\r\n        @if (form.controls.name.errors?.pattern) {\r\n          <app-field-hint [isError]=\"true\">\r\n            {{ appNameError }}\r\n          </app-field-hint>\r\n        }\r\n      }\r\n      <br />\r\n      <mat-radio-group formControlName=\"appTemplateId\" required (change)=\"onTemplateChange($event)\">\r\n        <mat-radio-button [value]=\"1\">Use Template</mat-radio-button>\r\n        <mat-radio-button [value]=\"0\">Completely new / empty App</mat-radio-button>\r\n        <mat-radio-button [value]=\"2\">Use existing App as Template</mat-radio-button>\r\n      </mat-radio-group>\r\n    </form>\r\n\r\n    @if (appTemplateIdValue == 2) {\r\n      <br />\r\n      <span>\r\n        To use an existing App as a template, please switch to the\r\n        <strong> Import App Dialog </strong>\r\n      </span>\r\n      <br />\r\n      <br />\r\n      <button mat-raised-button class=\"eav-action-button\" (click)=\"switchToImportApp()\">Switch to Import App</button>\r\n    }\r\n\r\n    @if (showAppCatalog()) {\r\n      @if (ready()) {\r\n        <iframe #installerWindow class=\"eav-app-catalog-iframe\" [src]=\"remoteInstallerUrl\"></iframe>\r\n      }\r\n    }\r\n  </div>\r\n  <mat-dialog-actions align=\"end\">\r\n    <button type=\"button\" mat-raised-button [disabled]=\"loading()\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button\r\n      type=\"button\"\r\n      mat-raised-button\r\n      class=\"eav-action-button\"\r\n      [disabled]=\"loading() || (!canCreate())\"\r\n      (click)=\"create()\"\r\n    >\r\n      Create\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { Component, effect, ElementRef, HostBinding, inject, signal, ViewChild } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Router, RouterOutlet } from '@angular/router';\r\nimport { filter, fromEvent, map, Observable } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { CrossWindowMessage, InstallSettings } from '../../shared/models/installer-models';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { AppInstallSettingsService } from '../../shared/services/getting-started.service';\r\nimport { appNameError, appNamePattern } from '../constants/app.patterns';\r\nimport { AppsListService } from '../services/apps-list.service';\r\n\r\n@Component({\r\n  selector: 'app-create-app',\r\n  templateUrl: './create-app.component.html',\r\n  styleUrls: ['./create-app.component.scss'],\r\n  imports: [\r\n    RouterOutlet,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    FieldHintComponent,\r\n    MatRadioModule,\r\n    MatIconModule,\r\n\r\n  ]\r\n})\r\nexport class CreateAppComponent {\r\n  // Add a CSS class to the host element for consistent dialog styling\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  // Reference to the installer iframe element (for cross-window messaging)\r\n  @ViewChild('installerWindow') installerWindow: ElementRef;\r\n\r\n  // Reactive form group for app creation fields\r\n  form: UntypedFormGroup;\r\n\r\n  // Signal to control loading spinner and disable UI during app creation\r\n  loading = signal<boolean>(false);\r\n  // Error message for invalid app names, used in template validation\r\n  appNameError = appNameError;\r\n  // URL for the remote app catalog iframe, sanitized for Angular\r\n  remoteInstallerUrl = '';\r\n  // Signal to indicate when the iframe is ready to be shown\r\n  ready = signal(false);\r\n  // Signal to toggle visibility of the app catalog iframe\r\n  showAppCatalog = signal(true);\r\n  // Prevents double-processing of installations via window messages\r\n  private alreadyProcessing = false;\r\n\r\n  // App and settings service instances (using custom transient DI)\r\n  private appsListService = transient(AppsListService);\r\n  private installSettingsService = transient(AppInstallSettingsService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  private router = inject(Router);\r\n\r\n  // Holds the URL of the package selected in the app catalog (reactive signal)\r\n  private packageUrl = signal<string>(null);\r\n\r\n  // Holds installer settings loaded from service\r\n  settings: InstallSettings;\r\n\r\n  // Signal controlling Create button state (enabled/disabled)\r\n  canCreate = signal<boolean>(false);\r\n\r\n  // Reactive observable for cross-window installer messages\r\n  private messages$ = fromEvent(window, 'message').pipe(\r\n    // Ignore messages if already processing an installation\r\n    filter(() => !this.alreadyProcessing),\r\n    // Only accept messages from the trusted installer domain\r\n    filter((evt: MessageEvent) => evt.origin === \"https://2sxc.org\"),\r\n    // Parse the incoming message and update packageUrl signal\r\n    map((evt: MessageEvent) => {\r\n      const x = JSON.parse(evt.data) as CrossWindowMessage;\r\n      this.packageUrl.set(x.packages?.[0]?.url || null);\r\n    }),\r\n  );\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<CreateAppComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private sanitizer: DomSanitizer,\r\n  ) {\r\n    // Initialize the reactive form with validation\r\n    this.form = this.buildForm();\r\n\r\n    // Set Create button state initially\r\n    this.updateCanCreate();\r\n\r\n    // Re-calculate Create button state on any form value change\r\n    this.form.valueChanges.subscribe(() => this.updateCanCreate());\r\n\r\n    // Load installer settings and set up the iframe URL for the app catalog\r\n    this.installSettingsService.loadGettingStarted(false);\r\n    this.installSettingsService.settings$.subscribe(settings => {\r\n      let url = settings.remoteUrl;\r\n      // Add query param to ensure template mode in the installer\r\n      url += (url.includes('?') ? '&' : '?') + 'isTemplate=true';\r\n\r\n      this.remoteInstallerUrl = <string>this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n      this.ready.set(true);\r\n    });\r\n\r\n    // React to changes in packageUrl and update Create button accordingly\r\n    effect(() => {\r\n      this.packageUrl();\r\n      this.updateCanCreate();\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Ensure installer settings are loaded (redundant if already done in constructor)\r\n    this.installSettingsService.loadGettingStarted(false);\r\n\r\n    // Listen for messages from the app catalog iframe (e.g., package selection)\r\n    this.messages$.subscribe();\r\n  }\r\n\r\n  /**\r\n   * Handles the app creation logic. Disables the form and shows feedback messages.\r\n   * Decides whether to create a raw app or use a selected template.\r\n   */\r\n  create(): void {\r\n    if (!this.canCreate()) return;\r\n    this.form.disable();\r\n    this.loading.set(true);\r\n    this.snackBar.open('Creating app...', undefined, { duration: 2000 });\r\n\r\n    let createObservable: Observable<any>;\r\n    const appTemplateId = Number(this.form.controls.appTemplateId.value);\r\n    const name = this.form.controls.name.value?.trim().replace(/\\s\\s+/g, ' ');\r\n\r\n    // Use the selected template if applicable, otherwise create a raw app\r\n    if (appTemplateId === 1 && this.packageUrl() && this.packageUrl().length > 0) {\r\n      createObservable = this.appsListService.createTemplate(this.packageUrl(), name);\r\n    } else if (appTemplateId === 0) {\r\n      createObservable = this.appsListService.create(name, null, 0);\r\n    }\r\n\r\n    // Subscribe to creation result and show success/error feedback\r\n    createObservable.subscribe({\r\n      error: () => this.handleCreateError(),\r\n      next: () => this.handleCreateSuccess()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles errors that occur during app creation.\r\n   * Re-enables the form and displays a failure message.\r\n   */\r\n  private handleCreateError(): void {\r\n    this.form.enable();\r\n    this.loading.set(false);\r\n    this.snackBar.open('Failed to create app. Please check console for more information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  /**\r\n   * Handles successful app creation by enabling the form,\r\n   * showing a success message, and closing the dialog.\r\n   */\r\n  private handleCreateSuccess(): void {\r\n    this.form.enable();\r\n    this.loading.set(false);\r\n    this.snackBar.open('Created app', undefined, { duration: 2000 });\r\n    this.closeDialog();\r\n  }\r\n\r\n  /**\r\n   * Closes the create app dialog.\r\n   */\r\n  closeDialog(): void {\r\n    this.dialog.close();\r\n  }\r\n\r\n  /**\r\n   * Builds and returns the reactive form group with validation.\r\n   */\r\n  private buildForm(): UntypedFormGroup {\r\n    return new UntypedFormGroup({\r\n      name: new UntypedFormControl(null, [Validators.required, Validators.pattern(appNamePattern)]),\r\n      appTemplateId: new UntypedFormControl(1, Validators.required),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the canCreate signal based on form and packageUrl state.\r\n   * Enables the Create button only if conditions are met.\r\n   */\r\n  private updateCanCreate(): void {\r\n    const name = this.form.controls.name.value?.trim();\r\n    const appTemplateId = Number(this.form.controls.appTemplateId.value);\r\n    const packageUrl = this.packageUrl();\r\n\r\n    // Enable Create if: \r\n    // - name is present and appTemplateId is 0, OR\r\n    // - name, appTemplateId=1, and packageUrl are all present\r\n    const valid =\r\n      !!name &&\r\n      (\r\n        appTemplateId === 0 ||\r\n        (appTemplateId === 1 && !!packageUrl)\r\n      );\r\n    this.canCreate.set(valid);\r\n  }\r\n\r\n  /**\r\n   * Handles changes to the template selection radio group.\r\n   * Shows or hides the app catalog iframe and updates Create button state.\r\n   */\r\n  onTemplateChange(event: any) {\r\n    if (event.value == 1)\r\n      this.showAppCatalog.set(true);\r\n    else\r\n      this.showAppCatalog.set(false);\r\n\r\n    this.updateCanCreate();\r\n  }\r\n\r\nswitchToImportApp(): void {\r\n  const segments = this.router.url.split('/').filter(Boolean);\r\n  segments[segments.length - 1] = 'import';\r\n  const url = '/' + segments.join('/');\r\n  this.#dialogRouter.navPath(url);\r\n}\r\n\r\n  get appTemplateIdValue() { return this.form.controls.appTemplateId.value; }\r\n}","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, DOCUMENT, ElementRef, ErrorHandler, HostAttributeToken, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { M as MatIconRegistry } from './icon-registry-CwOTJ7YM.mjs';\nexport { d as ICON_REGISTRY_PROVIDER, I as ICON_REGISTRY_PROVIDER_FACTORY, c as getMatIconFailedToSanitizeLiteralError, b as getMatIconFailedToSanitizeUrlError, g as getMatIconNameNotFoundError, a as getMatIconNoHttpProviderError } from './icon-registry-CwOTJ7YM.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/common/http';\nimport '@angular/platform-browser';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/bidi';\n\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fontawesome-v4.github.io/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon {\n    _elementRef = inject(ElementRef);\n    _iconRegistry = inject(MatIconRegistry);\n    _location = inject(MAT_ICON_LOCATION);\n    _errorHandler = inject(ErrorHandler);\n    _defaultColor;\n    /**\n     * Theme color of the icon. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/icon/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color || this._defaultColor;\n    }\n    set color(value) {\n        this._color = value;\n    }\n    _color;\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    inline = false;\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    _svgIcon;\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    _fontSet;\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    _fontIcon;\n    _previousFontSetClass = [];\n    _previousFontIconClass;\n    _svgName;\n    _svgNamespace;\n    /** Keeps track of the current page path. */\n    _previousPath;\n    /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n    _elementsWithExternalReferences;\n    /** Subscription to the current in-progress SVG icon request. */\n    _currentIconFetch = Subscription.EMPTY;\n    constructor() {\n        const ariaHidden = inject(new HostAttributeToken('aria-hidden'), { optional: true });\n        const defaults = inject(MAT_ICON_DEFAULT_OPTIONS, { optional: true });\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this._defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            this._elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIcon, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatIcon, isStandalone: true, selector: \"mat-icon\", inputs: { color: \"color\", inline: [\"inline\", \"inline\", booleanAttribute], svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color, inherit)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color, inherit)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input\n            }], inline: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\nclass MatIconModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatIcon], exports: [MatIcon, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatIcon],\n                    exports: [MatIcon, MatCommonModule],\n                }]\n        }] });\n\nexport { MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry };\n"],"x_google_ignoreList":[2,9]}