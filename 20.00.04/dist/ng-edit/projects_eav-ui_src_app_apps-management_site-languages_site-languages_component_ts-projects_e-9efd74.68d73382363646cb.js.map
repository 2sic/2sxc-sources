{"version":3,"file":"projects_eav-ui_src_app_apps-management_site-languages_site-languages_component_ts-projects_e-9efd74.68d73382363646cb.js","mappings":"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","names":["SiteLanguagesStatusComponent","agInit","params","this","value","refresh","toggleLanguage","event","onToggleLanguage","data","checked","static","__ngFactoryType__","debug_node_JnOYh9kg","VBU","selectors","decls","vars","consts","template","rf","ctx","i0","$event","MatSlideToggleModule","i1","styles","ctx_r0","gridOptions","SiteLanguagesComponent","#zoneSvc","constructor","#buildGridOptions","transient","ZoneService","#refreshLanguagesSig","signal","languages","getLanguageLive","ModuleRegistry","registerModules","ClientSideRowModelModule","#toggleLanguage","language","enable","_this","_asyncToGenerator","status","Code","set","error","console","defaultGridOptions","columnDefs","ColumnDefinitions","IdWithDefaultRenderer","field","filter","cellRendererParams","tooltipGetter","TextWide","headerName","sort","onCellClicked","IsEnabled","width","headerClass","cellClass","split","sortable","BooleanFilterComponent","valueGetter","p","cellRenderer","SiteLanguagesComponent_Conditional_0_Template","tmp_0_0","MatDialogActions","SxcGridModule","encapsulation","copyToClipboard","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/site-languages/site-languages-status/site-languages-status.component.ts","./projects/eav-ui/src/app/apps-management/site-languages/site-languages-status/site-languages-status.component.html","./projects/eav-ui/src/app/apps-management/site-languages/site-languages.component.html","./projects/eav-ui/src/app/apps-management/site-languages/site-languages.component.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { SiteLanguage } from '../../models/site-language.model';\r\nimport { SiteLanguagesStatusParams } from './site-languages-status.models';\r\n\r\n@Component({\r\n    selector: 'app-site-languages-status',\r\n    templateUrl: './site-languages-status.component.html',\r\n    styleUrls: ['./site-languages-status.component.scss'],\r\n    imports: [MatSlideToggleModule]\r\n})\r\nexport class SiteLanguagesStatusComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  private params: ICellRendererParams & SiteLanguagesStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & SiteLanguagesStatusParams): void {\r\n    this.params = params;\r\n    this.value = this.params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  toggleLanguage(event: MatSlideToggleChange): void {\r\n    const language: SiteLanguage = this.params.data;\r\n    this.params.onToggleLanguage(language, event.checked);\r\n  }\r\n}\r\n","<mat-slide-toggle [checked]=\"value\" (change)=\"toggleLanguage($event)\"></mat-slide-toggle>\r\n","@if (languages(); as languages) {\r\n  <div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"languages\" [gridOptions]=\"gridOptions\"> </ag-grid-angular>\r\n    <mat-dialog-actions align=\"end\"></mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\r\nimport { GridOptions, ModuleRegistry } from '@ag-grid-community/core';\r\nimport { Component, signal } from '@angular/core';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\nimport { transient } from '../../../../../core';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { SiteLanguage } from '../models/site-language.model';\r\nimport { ZoneService } from '../services/zone.service';\r\nimport { SiteLanguagesStatusComponent } from './site-languages-status/site-languages-status.component';\r\nimport { SiteLanguagesStatusParams } from './site-languages-status/site-languages-status.models';\r\n\r\n@Component({\r\n  selector: 'app-site-languages',\r\n  templateUrl: './site-languages.component.html',\r\n  imports: [\r\n    MatDialogActions,\r\n    SxcGridModule,\r\n  ]\r\n})\r\nexport class SiteLanguagesComponent {\r\n  gridOptions = this.#buildGridOptions();\r\n\r\n  #zoneSvc = transient(ZoneService);\r\n  constructor() {\r\n    ModuleRegistry.registerModules([ClientSideRowModelModule]);\r\n\r\n\r\n  }\r\n\r\n  #refreshLanguagesSig = signal(0);\r\n\r\n  languages = this.#zoneSvc.getLanguageLive(this.#refreshLanguagesSig).value;\r\n\r\n  async #toggleLanguage(language: SiteLanguage, enable: boolean) {\r\n    try {\r\n      // Wait for the API call to complete and get the status code\r\n      const status = await this.#zoneSvc.toggleLanguage(language.Code, enable);\r\n      if (status >= 200 && status < 300) {\r\n        this.#refreshLanguagesSig.set(this.#refreshLanguagesSig() + 1);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error toggling language:', error);\r\n    }\r\n  }\r\n\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.IdWithDefaultRenderer,\r\n          field: 'Code',\r\n          filter: 'agTextColumnFilter',\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<SiteLanguage> = {\r\n              tooltipGetter: (language: SiteLanguage) => `ID: ${language.Code}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          headerName: 'Name',\r\n          field: 'Culture',\r\n          sort: 'asc',\r\n          onCellClicked: (params) => {\r\n            const language: SiteLanguage = params.data;\r\n            this.#toggleLanguage(language, !language.IsEnabled);\r\n          },\r\n        },\r\n        {\r\n          field: 'Status',\r\n          width: 72,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: BooleanFilterComponent,\r\n          valueGetter: (p: { data: SiteLanguage }) => p.data.IsEnabled,\r\n          cellRenderer: SiteLanguagesStatusComponent,\r\n          cellRendererParams: (() => {\r\n            const params: SiteLanguagesStatusParams = {\r\n              onToggleLanguage: (language, enable) => this.#toggleLanguage(language, enable),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}