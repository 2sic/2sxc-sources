{"version":3,"file":"default-projects_eav-ui_src_app_shared_components_nav-item-list_nav-item-list_component_ts-pr-e0b2f4.53ec390532fca8ed.js","mappings":"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","names":["_c0","_c1","_c2","_c3","MatDrawerContainer_Conditional_0_Template","rf","ctx","_r1","i0","ctx_r1","_onBackdropClicked","_isShowingBackdrop","MatDrawerContainer_Conditional_3_Template","_c4","_c5","MatSidenavContainer_Conditional_0_Template","MatSidenavContainer_Conditional_3_Template","MAT_DRAWER_DEFAULT_AUTOSIZE","InjectionToken","providedIn","factory","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","CdkScrollable","_platform","inject","Platform","_changeDetectorRef","ChangeDetectorRef","_container","MatDrawerContainer","constructor","super","elementRef","ElementRef","scrollDispatcher","ScrollDispatcher","ngZone","NgZone","ngAfterContentInit","this","_contentMarginChanges","subscribe","markForCheck","_shouldBeHidden","isBrowser","start","end","mode","opened","static","__ngFactoryType__","type","selectors","hostAttrs","hostVars","hostBindings","_contentMargins","left","right","features","provide","useExisting","ngContentSelectors","decls","vars","template","encapsulation","changeDetection","MatDrawer","_elementRef","_focusTrapFactory","FocusTrapFactory","_focusMonitor","FocusMonitor","_ngZone","_renderer","Renderer2","_interactivityChecker","InteractivityChecker","_doc","DOCUMENT","optional","_focusTrap","_elementFocusedBeforeDrawerWasOpened","_eventCleanups","_isAttached","_anchor","position","_position","value","_updatePositionInParent","onPositionChanged","emit","_mode","_updateFocusTrapState","_modeChanged","next","disableClose","_disableClose","coerceBooleanProperty","autoFocus","_autoFocus","_opened","toggle","signal","_openedVia","_animationStarted","Subject","_animationEnd","openedChange","EventEmitter","_openedStream","pipe","filter","o","map","openedStart","mapTo","undefined","_closedStream","closedStart","_destroyed","_content","_injector","Injector","takeUntil","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","runOutsideAngular","element","nativeElement","fromEvent","event","keyCode","ESCAPE","hasModifierKey","run","close","stopPropagation","preventDefault","listen","_handleTransitionEvent","_forceFocus","options","isFocusable","tabIndex","callback","cleanupBlur","cleanupMousedown","removeAttribute","focus","_focusByCssSelector","selector","elementToFocus","querySelector","afterNextRender","focusInitialElement","injector","focusOrigin","focusVia","blur","activeEl","contains","ngAfterViewInit","create","ngOnDestroy","forEach","cleanup","destroy","remove","complete","open","openedVia","_closeViaBackdropClick","_setOpen","isOpen","result","restoreFocus","Promise","resolve","set","_transitionsEnabled","_setIsAnimating","setTimeout","classList","take","isAnimating","_getWidth","offsetWidth","enabled","hasBackdrop","newPosition","parent","parentNode","createComment","insertBefore","appendChild","target","viewQuery","_t","first","inputs","outputs","exportAs","consts","dependencies","_dir","Directionality","_element","_animationDisabled","_animationsDisabled","_allDrawers","_drawers","QueryList","_userContent","_start","_end","autosize","_autosize","_drawerHasBackdrop","_backdropOverride","backdropClick","_left","_right","_doCheckSubject","scrollable","platform","viewportRuler","ViewportRuler","change","_validateDrawers","updateContentMargins","add","changes","startWith","drawer","reset","item","notifyOnChanges","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","debounceTime","width","ngDoCheck","_isPushed","_setContainerClass","read","merge","isAdd","className","_closeModalDrawersViaBackdrop","contentQueries","dirIndex","styles","MatSidenavContent","ɵMatSidenavContent_BaseFactory","MatSidenav","fixedInViewport","_fixedInViewport","fixedTopGap","_fixedTopGap","coerceNumberProperty","fixedBottomGap","_fixedBottomGap","ɵMatSidenav_BaseFactory","MatSidenavContainer","ɵMatSidenavContainer_BaseFactory","MatSidenavModule","imports","MatCommonModule","CdkScrollableModule","ctx_r0","isOpenMenu","NavItemListComponent_Conditional_6_For_2_Template","_forTrack0","navItem","child","NavItemListComponent","router","input","ngOnInit","#openChildMenu","events","urlSegments","url","split","find","includes","path","i1","_angular_core__WEBPACK_IMPORTED_MODULE_0__","VBU","NavItemListComponent_Conditional_5_Template","NavItemListComponent_Conditional_6_Template","tippy","icon","name","MatIconModule","i2","NgClass","RouterLink","RouterLinkActive","TippyDirective","MatToolbarRow","MatToolbar","_document","color","_toolbarRows","_checkToolbarMixedModes","MatToolbarModule","a0","a1","a2","a3","a4","a5","$implicit","info","last","index","count","BreadcrumbComponent_ng_container_2_a_2_ng_container_1_Template","BreadcrumbComponent_ng_container_2_a_2_ng_container_2_Template","breadcrumb_r1","label","BreadcrumbComponent_ng_container_2_a_2_Template","isLast_r3","isFirst_r4","index_r5","count_r6","ctx_r6","disable","routeInterceptor","routeLink","preserveQueryParams","queryParams","preserveFragment","fragment","anchorTarget","itemTemplate","BreadcrumbComponent_ng_container_2_span_3_ng_container_1_Template","BreadcrumbComponent_ng_container_2_span_3_ng_container_2_Template","BreadcrumbComponent_ng_container_2_span_3_Template","BreadcrumbComponent_ng_container_2_li_4_ng_container_1_Template","BreadcrumbComponent_ng_container_2_li_4_ng_container_2_Template","separator","BreadcrumbComponent_ng_container_2_li_4_Template","separatorTemplate","BreadcrumbComponent_ng_container_2_Template","BreadcrumbItemDirective","ɵfac","ɵdir","isNonEmpty","obj","Object","keys","BreadcrumbService","activatedRoute","baseHref","dynamicBreadcrumbStore","currentBreadcrumbs","previousBreadcrumbs","breadcrumbs","BehaviorSubject","breadcrumbs$","asObservable","detectRouteChanges","setupBreadcrumbs","snapshot","GuardsCheckEnd","shouldActivate","state","root","activatedRouteSnapshot","rootBreadcrumb","getRootBreadcrumb","prepareBreadcrumbList","rootConfig","config","extractObject","data","breadcrumb","storeItem","getFromStore","alias","getQueryParamsFromPreviousList","prepareBreadcrumbItem","routeLinkPrefix","parseRouteData","routeConfig","resolvedSegment","resolvePathSegment","extractLabel","isAutoGeneratedLabel","autoGeneratedLabel","breadcrumbItem","push","firstChild","setQueryParamsForActiveBreadcrumb","breadcrumbsToShow","skip","matchRegex","routeRegex","match","RegExp","segment","entries","params","key","replace","lastItem","mergeWithBaseChildData","baseChild","loadChildren","_loadedRoutes","route","children","childConfig","breadcrumbObject","updateArgs","startsWith","slice","buildRegex","ensureLeadingSlash","updateStore","updateCurrentBreadcrumbs","storeItemIndex","findIndex","itemIndex","resolvedParam","ɵprov","token","BreadcrumbComponent","TemplateRef","_separator","breadcrumbService","activateRoute","autoGenerate","class","setupMessage","someParameterValue","setupComponent","someParam","Date","ɵcmp","CommonModule","i3","RouterModule","ToggleDebugDirective","globalConfigService","onClick","navigator","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","FsC","$event"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/sidenav.mjs","./projects/eav-ui/src/app/shared/components/nav-item-list/nav-item-list.component.html","./projects/eav-ui/src/app/shared/components/nav-item-list/nav-item-list.component.ts","./node_modules/@angular/material/fesm2022/toolbar.mjs","./node_modules/rxjs/dist/esm/internal/operators/mapTo.js","./node_modules/xng-breadcrumb/fesm2022/xng-breadcrumb.mjs","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts"],"sourcesContent":["import { FocusTrapFactory, FocusMonitor, InteractivityChecker } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, ElementRef, NgZone, Component, ChangeDetectionStrategy, ViewEncapsulation, Renderer2, DOCUMENT, signal, EventEmitter, Injector, afterNextRender, Input, Output, ViewChild, QueryList, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, take, startWith, debounceTime } from 'rxjs/operators';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/cdk/layout';\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    _platform = inject(Platform);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _container = inject(MatDrawerContainer);\n    constructor() {\n        const elementRef = inject(ElementRef);\n        const scrollDispatcher = inject(ScrollDispatcher);\n        const ngZone = inject(NgZone);\n        super(elementRef, scrollDispatcher, ngZone);\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Determines whether the content element should be hidden from the user. */\n    _shouldBeHidden() {\n        // In some modes the content is pushed based on the width of the opened sidenavs, however on\n        // the server we can't measure the sidenav so the margin is always zero. This can cause the\n        // content to jump around when it's rendered on the server and hydrated on the client. We\n        // avoid it by hiding the content on the initial render and then showing it once the sidenav\n        // has been measured on the client.\n        if (this._platform.isBrowser) {\n            return false;\n        }\n        const { start, end } = this._container;\n        return ((start != null && start.mode !== 'over' && start.opened) ||\n            (end != null && end.mode !== 'over' && end.opened));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDrawerContent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatDrawerContent, isStandalone: true, selector: \"mat-drawer-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\", \"class.mat-drawer-content-hidden\": \"_shouldBeHidden()\" }, classAttribute: \"mat-drawer-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatDrawerContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDrawerContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-drawer-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                        '[class.mat-drawer-content-hidden]': '_shouldBeHidden()',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatDrawerContent,\n                        },\n                    ],\n                }]\n        }], ctorParameters: () => [] });\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    _elementRef = inject(ElementRef);\n    _focusTrapFactory = inject(FocusTrapFactory);\n    _focusMonitor = inject(FocusMonitor);\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _renderer = inject(Renderer2);\n    _interactivityChecker = inject(InteractivityChecker);\n    _doc = inject(DOCUMENT, { optional: true });\n    _container = inject(MAT_DRAWER_CONTAINER, { optional: true });\n    _focusTrap = null;\n    _elementFocusedBeforeDrawerWasOpened = null;\n    _eventCleanups;\n    /** Whether the view of the component has been attached. */\n    _isAttached;\n    /** Anchor node used to restore the drawer to its initial position. */\n    _anchor;\n    /** The side that the drawer is attached to. */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value !== this._position) {\n            // Static inputs in Ivy are set before the element is in the DOM.\n            if (this._isAttached) {\n                this._updatePositionInParent(value);\n            }\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    _position = 'start';\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    _mode = 'over';\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() {\n        return this._disableClose;\n    }\n    set disableClose(value) {\n        this._disableClose = coerceBooleanProperty(value);\n    }\n    _disableClose = false;\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n     * instead.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n        // because we don't know how the sidenav is being used, but in some cases it still makes\n        // sense to do it. The consumer can explicitly set `autoFocus`.\n        if (value == null) {\n            if (this.mode === 'side') {\n                return 'dialog';\n            }\n            else {\n                return 'first-tabbable';\n            }\n        }\n        return value;\n    }\n    set autoFocus(value) {\n        if (value === 'true' || value === 'false' || value == null) {\n            value = coerceBooleanProperty(value);\n        }\n        this._autoFocus = value;\n    }\n    _autoFocus;\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() {\n        return this._opened();\n    }\n    set opened(value) {\n        this.toggle(coerceBooleanProperty(value));\n    }\n    _opened = signal(false);\n    /** How the sidenav was opened (keypress, mouse click etc.) */\n    _openedVia;\n    /** Emits whenever the drawer has started animating. */\n    _animationStarted = new Subject();\n    /** Emits whenever the drawer is done animating. */\n    _animationEnd = new Subject();\n    /** Event emitted when the drawer open state is changed. */\n    openedChange = \n    // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n    new EventEmitter(/* isAsync */ true);\n    /** Event emitted when the drawer has been opened. */\n    _openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n    /** Event emitted when the drawer has started opening. */\n    openedStart = this._animationStarted.pipe(filter(() => this.opened), mapTo(undefined));\n    /** Event emitted when the drawer has been closed. */\n    _closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n    /** Event emitted when the drawer has started closing. */\n    closedStart = this._animationStarted.pipe(filter(() => !this.opened), mapTo(undefined));\n    /** Emits when the component is destroyed. */\n    _destroyed = new Subject();\n    /** Event emitted when the drawer's position changes. */\n    // tslint:disable-next-line:no-output-on-prefix\n    onPositionChanged = new EventEmitter();\n    /** Reference to the inner element that contains all the content. */\n    _content;\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     */\n    _modeChanged = new Subject();\n    _injector = inject(Injector);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    constructor() {\n        this.openedChange.pipe(takeUntil(this._destroyed)).subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus(this._openedVia || 'program');\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            const element = this._elementRef.nativeElement;\n            fromEvent(element, 'keydown')\n                .pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed))\n                .subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n            this._eventCleanups = [\n                this._renderer.listen(element, 'transitionrun', this._handleTransitionEvent),\n                this._renderer.listen(element, 'transitionend', this._handleTransitionEvent),\n                this._renderer.listen(element, 'transitioncancel', this._handleTransitionEvent),\n            ];\n        });\n        this._animationEnd.subscribe(() => {\n            this.openedChange.emit(this.opened);\n        });\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    cleanupBlur();\n                    cleanupMousedown();\n                    element.removeAttribute('tabindex');\n                };\n                const cleanupBlur = this._renderer.listen(element, 'blur', callback);\n                const cleanupMousedown = this._renderer.listen(element, 'mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this._focusTrap) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        // When autoFocus is not on the sidenav, if the element cannot be focused or does\n        // not exist, focus the sidenav itself so the keyboard navigation still works.\n        // We need to check that `focus` is a function due to Universal.\n        switch (this.autoFocus) {\n            case false:\n            case 'dialog':\n                return;\n            case true:\n            case 'first-tabbable':\n                afterNextRender(() => {\n                    const hasMovedFocus = this._focusTrap.focusInitialElement();\n                    if (!hasMovedFocus && typeof element.focus === 'function') {\n                        element.focus();\n                    }\n                }, { injector: this._injector });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this.autoFocus);\n                break;\n        }\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus(focusOrigin) {\n        if (this.autoFocus === 'dialog') {\n            return;\n        }\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        const activeEl = this._doc.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterViewInit() {\n        this._isAttached = true;\n        // Only update the DOM position when the sidenav is positioned at\n        // the end since we project the sidenav before the content by default.\n        if (this._position === 'end') {\n            this._updatePositionInParent('end');\n        }\n        // Needs to happen after the position is updated\n        // so the focus trap anchors are in the right place.\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            this._updateFocusTrapState();\n        }\n    }\n    ngOnDestroy() {\n        this._eventCleanups.forEach(cleanup => cleanup());\n        this._focusTrap?.destroy();\n        this._anchor?.remove();\n        this._anchor = null;\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurs the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true, 'mouse');\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        if (isOpen && openedVia) {\n            this._openedVia = openedVia;\n        }\n        const result = this._setOpen(isOpen, \n        /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n        if (!isOpen) {\n            this._openedVia = null;\n        }\n        return result;\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param focusOrigin Origin to use when restoring focus.\n     */\n    _setOpen(isOpen, restoreFocus, focusOrigin) {\n        if (isOpen === this.opened) {\n            return Promise.resolve(isOpen ? 'open' : 'close');\n        }\n        this._opened.set(isOpen);\n        if (this._container?._transitionsEnabled) {\n            // Note: it's importatnt to set this as early as possible,\n            // otherwise the animation can look glitchy in some cases.\n            this._setIsAnimating(true);\n        }\n        else {\n            // Simulate the animation events if animations are disabled.\n            setTimeout(() => {\n                this._animationStarted.next();\n                this._animationEnd.next();\n            });\n        }\n        this._elementRef.nativeElement.classList.toggle('mat-drawer-opened', isOpen);\n        if (!isOpen && restoreFocus) {\n            this._restoreFocus(focusOrigin);\n        }\n        // Needed to ensure that the closing sequence fires off correctly.\n        this._changeDetectorRef.markForCheck();\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    /** Toggles whether the drawer is currently animating. */\n    _setIsAnimating(isAnimating) {\n        this._elementRef.nativeElement.classList.toggle('mat-drawer-animating', isAnimating);\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement.offsetWidth || 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // Trap focus only if the backdrop is enabled. Otherwise, allow end user to interact with the\n            // sidenav content.\n            this._focusTrap.enabled = !!this._container?.hasBackdrop && this.opened;\n        }\n    }\n    /**\n     * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n     * when it's in the `end` position so that it comes after the content and the visual order\n     * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n     * started off as `end` and was changed to `start`.\n     */\n    _updatePositionInParent(newPosition) {\n        // Don't move the DOM node around on the server, because it can throw off hydration.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        const parent = element.parentNode;\n        if (newPosition === 'end') {\n            if (!this._anchor) {\n                this._anchor = this._doc.createComment('mat-drawer-anchor');\n                parent.insertBefore(this._anchor, element);\n            }\n            parent.appendChild(element);\n        }\n        else if (this._anchor) {\n            this._anchor.parentNode.insertBefore(element, this._anchor);\n        }\n    }\n    /** Event handler for animation events. */\n    _handleTransitionEvent = (event) => {\n        const element = this._elementRef.nativeElement;\n        if (event.target === element) {\n            this._ngZone.run(() => {\n                if (event.type === 'transitionrun') {\n                    this._animationStarted.next(event);\n                }\n                else {\n                    // Don't toggle the animating state on `transitioncancel` since another animation should\n                    // start afterwards. This prevents the drawer from blinking if an animation is interrupted.\n                    if (event.type === 'transitionend') {\n                        this._setIsAnimating(false);\n                    }\n                    this._animationEnd.next(event);\n                }\n            });\n        }\n    };\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDrawer, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatDrawer, isStandalone: true, selector: \"mat-drawer\", inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, host: { properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"style.visibility\": \"(!_container && !opened) ? \\\"hidden\\\" : null\", \"attr.tabIndex\": \"(mode !== \\\"side\\\") ? \\\"-1\\\" : null\" }, classAttribute: \"mat-drawer\" }, viewQueries: [{ propertyName: \"_content\", first: true, predicate: [\"content\"], descendants: true }], exportAs: [\"matDrawer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDrawer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer', exportAs: 'matDrawer', host: {\n                        'class': 'mat-drawer',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        // The styles that render the sidenav off-screen come from the drawer container. Prior to #30235\n                        // this was also done by the animations module which some internal tests seem to depend on.\n                        // Simulate it by toggling the `hidden` attribute instead.\n                        '[style.visibility]': '(!_container && !opened) ? \"hidden\" : null',\n                        // The sidenav container should not be focused on when used in side mode. See b/286459024 for\n                        // reference. Updates tabIndex of drawer/container to default to null if in side mode.\n                        '[attr.tabIndex]': '(mode !== \"side\") ? \"-1\" : null',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, imports: [CdkScrollable], template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { position: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], disableClose: [{\n                type: Input\n            }], autoFocus: [{\n                type: Input\n            }], opened: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], openedStart: [{\n                type: Output\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], closedStart: [{\n                type: Output\n            }], onPositionChanged: [{\n                type: Output,\n                args: ['positionChanged']\n            }], _content: [{\n                type: ViewChild,\n                args: ['content']\n            }] } });\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    _dir = inject(Directionality, { optional: true });\n    _element = inject(ElementRef);\n    _ngZone = inject(NgZone);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _animationDisabled = _animationsDisabled();\n    _transitionsEnabled = false;\n    /** All drawers in the container. Includes drawers from inside nested containers. */\n    _allDrawers;\n    /** Drawers that belong to this container. */\n    _drawers = new QueryList();\n    _content;\n    _userContent;\n    /** The drawer child with the `start` position. */\n    get start() {\n        return this._start;\n    }\n    /** The drawer child with the `end` position. */\n    get end() {\n        return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() {\n        return this._autosize;\n    }\n    set autosize(value) {\n        this._autosize = coerceBooleanProperty(value);\n    }\n    _autosize = inject(MAT_DRAWER_DEFAULT_AUTOSIZE);\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        return this._drawerHasBackdrop(this._start) || this._drawerHasBackdrop(this._end);\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    _backdropOverride;\n    /** Event emitted when the drawer backdrop is clicked. */\n    backdropClick = new EventEmitter();\n    /** The drawer at the start/end position, independent of direction. */\n    _start;\n    _end;\n    /**\n     * The drawer at the left/right. When direction changes, these will change as well.\n     * They're used as aliases for the above to set the left/right style properly.\n     * In LTR, _left == _start and _right == _end.\n     * In RTL, _left == _end and _right == _start.\n     */\n    _left;\n    _right;\n    /** Emits when the component is destroyed. */\n    _destroyed = new Subject();\n    /** Emits on every ngDoCheck. Used for debouncing reflows. */\n    _doCheckSubject = new Subject();\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     */\n    _contentMargins = { left: null, right: null };\n    _contentMarginChanges = new Subject();\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    _injector = inject(Injector);\n    constructor() {\n        const platform = inject(Platform);\n        const viewportRuler = inject(ViewportRuler);\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._validateDrawers();\n            this.updateContentMargins();\n        });\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        if (!this._animationDisabled && platform.isBrowser) {\n            this._ngZone.runOutsideAngular(() => {\n                // Enable the animations after a delay in order to skip\n                // the initial transition if a drawer is open by default.\n                setTimeout(() => {\n                    this._element.nativeElement.classList.add('mat-drawer-transition');\n                    this._transitionsEnabled = true;\n                }, 200);\n            });\n        }\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject\n                .pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed))\n                .subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange\n                .pipe(takeUntil(this._drawers.changes))\n                .subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            afterNextRender({ read: () => this._validateDrawers() }, { injector: this._injector });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        drawer._modeChanged\n            .pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n            .subscribe(() => {\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return ((this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over'));\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._drawerHasBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return ((this._isDrawerOpen(this._start) && this._drawerHasBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._drawerHasBackdrop(this._end)));\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n    // Whether argument drawer should have a backdrop when it opens\n    _drawerHasBackdrop(drawer) {\n        if (this._backdropOverride == null) {\n            return !!drawer && drawer.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDrawerContainer, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.0.0\", type: MatDrawerContainer, isStandalone: true, selector: \"mat-drawer-container\", inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatDrawerContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatDrawerContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatDrawer, descendants: true }], viewQueries: [{ propertyName: \"_userContent\", first: true, predicate: MatDrawerContent, descendants: true }], exportAs: [\"matDrawerContainer\"], ngImport: i0, template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-drawer-content>\\n    <ng-content></ng-content>\\n  </mat-drawer-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-sys-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-sys-background));box-sizing:border-box;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color, color-mix(in srgb, var(--mat-sys-neutral-variant20) 40%, transparent))}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(forced-colors: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-content.mat-drawer-content-hidden{opacity:0}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow, none);background-color:var(--mat-sidenav-container-background-color, var(--mat-sys-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));width:var(--mat-sidenav-container-width, 360px);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(forced-colors: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(forced-colors: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-transition .mat-drawer{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating){visibility:hidden;box-shadow:none}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating) .mat-drawer-inner-container{display:none}.mat-drawer.mat-drawer-opened.mat-drawer-opened{transform:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto}.mat-sidenav-fixed{position:fixed}\\n\"], dependencies: [{ kind: \"component\", type: MatDrawerContent, selector: \"mat-drawer-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatDrawerContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer-container', exportAs: 'matDrawerContainer', host: {\n                        'class': 'mat-drawer-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatDrawerContainer,\n                        },\n                    ], imports: [MatDrawerContent], template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-drawer-content>\\n    <ng-content></ng-content>\\n  </mat-drawer-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-sys-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-sys-background));box-sizing:border-box;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color, color-mix(in srgb, var(--mat-sys-neutral-variant20) 40%, transparent))}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(forced-colors: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-content.mat-drawer-content-hidden{opacity:0}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow, none);background-color:var(--mat-sidenav-container-background-color, var(--mat-sys-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));width:var(--mat-sidenav-container-width, 360px);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(forced-colors: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(forced-colors: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-transition .mat-drawer{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating){visibility:hidden;box-shadow:none}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating) .mat-drawer-inner-container{display:none}.mat-drawer.mat-drawer-opened.mat-drawer-opened{transform:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto}.mat-sidenav-fixed{position:fixed}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatDrawer, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatDrawerContent]\n            }], _userContent: [{\n                type: ViewChild,\n                args: [MatDrawerContent]\n            }], autosize: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], backdropClick: [{\n                type: Output\n            }] } });\n\nclass MatSidenavContent extends MatDrawerContent {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSidenavContent, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatSidenavContent, isStandalone: true, selector: \"mat-sidenav-content\", host: { classAttribute: \"mat-drawer-content mat-sidenav-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatSidenavContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSidenavContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-sidenav-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content mat-sidenav-content',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatSidenavContent,\n                        },\n                    ],\n                }]\n        }] });\nclass MatSidenav extends MatDrawer {\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() {\n        return this._fixedInViewport;\n    }\n    set fixedInViewport(value) {\n        this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    _fixedInViewport = false;\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() {\n        return this._fixedTopGap;\n    }\n    set fixedTopGap(value) {\n        this._fixedTopGap = coerceNumberProperty(value);\n    }\n    _fixedTopGap = 0;\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() {\n        return this._fixedBottomGap;\n    }\n    set fixedBottomGap(value) {\n        this._fixedBottomGap = coerceNumberProperty(value);\n    }\n    _fixedBottomGap = 0;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSidenav, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatSidenav, isStandalone: true, selector: \"mat-sidenav\", inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, host: { properties: { \"attr.tabIndex\": \"(mode !== \\\"side\\\") ? \\\"-1\\\" : null\", \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-sidenav-fixed\": \"fixedInViewport\", \"style.top.px\": \"fixedInViewport ? fixedTopGap : null\", \"style.bottom.px\": \"fixedInViewport ? fixedBottomGap : null\" }, classAttribute: \"mat-drawer mat-sidenav\" }, providers: [{ provide: MatDrawer, useExisting: MatSidenav }], exportAs: [\"matSidenav\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSidenav, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav', exportAs: 'matSidenav', host: {\n                        'class': 'mat-drawer mat-sidenav',\n                        // The sidenav container should not be focused on when used in side mode. See b/286459024 for\n                        // reference. Updates tabIndex of drawer/container to default to null if in side mode.\n                        '[attr.tabIndex]': '(mode !== \"side\") ? \"-1\" : null',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, imports: [CdkScrollable], providers: [{ provide: MatDrawer, useExisting: MatSidenav }], template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], propDecorators: { fixedInViewport: [{\n                type: Input\n            }], fixedTopGap: [{\n                type: Input\n            }], fixedBottomGap: [{\n                type: Input\n            }] } });\nclass MatSidenavContainer extends MatDrawerContainer {\n    _allDrawers = undefined;\n    // We need an initializer here to avoid a TS error.\n    _content = undefined;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSidenavContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.0.0\", type: MatSidenavContainer, isStandalone: true, selector: \"mat-sidenav-container\", host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container mat-sidenav-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatSidenavContainer,\n            },\n            {\n                provide: MatDrawerContainer,\n                useExisting: MatSidenavContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatSidenavContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatSidenav, descendants: true }], exportAs: [\"matSidenavContainer\"], usesInheritance: true, ngImport: i0, template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-sidenav-content>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-sys-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-sys-background));box-sizing:border-box;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color, color-mix(in srgb, var(--mat-sys-neutral-variant20) 40%, transparent))}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(forced-colors: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-content.mat-drawer-content-hidden{opacity:0}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow, none);background-color:var(--mat-sidenav-container-background-color, var(--mat-sys-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));width:var(--mat-sidenav-container-width, 360px);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(forced-colors: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(forced-colors: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-transition .mat-drawer{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating){visibility:hidden;box-shadow:none}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating) .mat-drawer-inner-container{display:none}.mat-drawer.mat-drawer-opened.mat-drawer-opened{transform:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto}.mat-sidenav-fixed{position:fixed}\\n\"], dependencies: [{ kind: \"component\", type: MatSidenavContent, selector: \"mat-sidenav-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSidenavContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav-container', exportAs: 'matSidenavContainer', host: {\n                        'class': 'mat-drawer-container mat-sidenav-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatSidenavContainer,\n                        },\n                        {\n                            provide: MatDrawerContainer,\n                            useExisting: MatSidenavContainer,\n                        },\n                    ], imports: [MatSidenavContent], template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-sidenav-content>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-sys-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-sys-background));box-sizing:border-box;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color, color-mix(in srgb, var(--mat-sys-neutral-variant20) 40%, transparent))}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(forced-colors: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-content.mat-drawer-content-hidden{opacity:0}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow, none);background-color:var(--mat-sidenav-container-background-color, var(--mat-sys-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));width:var(--mat-sidenav-container-width, 360px);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(forced-colors: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(forced-colors: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-transition .mat-drawer{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating){visibility:hidden;box-shadow:none}.mat-drawer:not(.mat-drawer-opened):not(.mat-drawer-animating) .mat-drawer-inner-container{display:none}.mat-drawer.mat-drawer-opened.mat-drawer-opened{transform:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto}.mat-sidenav-fixed{position:fixed}\\n\"] }]\n        }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatSidenav, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatSidenavContent]\n            }] } });\n\nclass MatSidenavModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSidenavModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSidenavModule, imports: [MatCommonModule,\n            CdkScrollableModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent], exports: [CdkScrollableModule,\n            MatCommonModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSidenavModule, imports: [MatCommonModule,\n            CdkScrollableModule, CdkScrollableModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSidenavModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        CdkScrollableModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                }]\n        }] });\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst matDrawerAnimations = {\n    // Represents\n    // trigger('transform', [\n    //   // We remove the `transform` here completely, rather than setting it to zero, because:\n    //   // 1. Having a transform can cause elements with ripples or an animated\n    //   //    transform to shift around in Chrome with an RTL layout (see #10023).\n    //   // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    //   state(\n    //     'open, open-instant',\n    //     style({\n    //       'transform': 'none',\n    //       'visibility': 'visible',\n    //     }),\n    //   ),\n    //   state(\n    //     'void',\n    //     style({\n    //       // Avoids the shadow showing up when closed in SSR.\n    //       'box-shadow': 'none',\n    //       'visibility': 'hidden',\n    //     }),\n    //   ),\n    //   transition('void => open-instant', animate('0ms')),\n    //   transition(\n    //     'void <=> open, open-instant => void',\n    //     animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'),\n    //   ),\n    // ])\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: {\n        type: 7,\n        name: 'transform',\n        definitions: [\n            {\n                type: 0,\n                name: 'open, open-instant',\n                styles: {\n                    type: 6,\n                    styles: { transform: 'none', visibility: 'visible' },\n                    offset: null,\n                },\n            },\n            {\n                type: 0,\n                name: 'void',\n                styles: {\n                    type: 6,\n                    styles: { 'box-shadow': 'none', visibility: 'hidden' },\n                    offset: null,\n                },\n            },\n            {\n                type: 1,\n                expr: 'void => open-instant',\n                animation: { type: 4, styles: null, timings: '0ms' },\n                options: null,\n            },\n            {\n                type: 1,\n                expr: 'void <=> open, open-instant => void',\n                animation: {\n                    type: 4,\n                    styles: null,\n                    timings: '400ms cubic-bezier(0.25, 0.8, 0.25, 1)',\n                },\n                options: null,\n            },\n        ],\n        options: {},\n    },\n};\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };\n","<a\r\n  (click)=\"isOpenMenu = !isOpenMenu\"\r\n  [routerLink]=\"navItem().path\"\r\n  routerLinkActive=\"active\"\r\n  matRipple\r\n  class=\"app-menu-container\"\r\n  [tippy]=\"navItem().tippy\"\r\n>\r\n  <mat-icon>{{ navItem().icon }}</mat-icon>\r\n  <div class=\"link-text\">{{ navItem().name }}</div>\r\n  @if (navItem().child) {\r\n    <mat-icon [ngClass]=\"{ closed: !isOpenMenu, open: isOpenMenu, 'ml-auto': true }\"> expand_more</mat-icon>\r\n  }\r\n</a>\r\n\r\n@if (isOpenMenu) {\r\n  <div class=\"paddingLink\">\r\n    @for (child of navItem().child; track child.path) {\r\n      <app-nav-item-list [navItem]=\"child\"></app-nav-item-list>\r\n    }\r\n  </div>\r\n}","import { NgClass } from '@angular/common';\r\nimport { Component, input, OnInit } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { NavItem } from '../../models/nav-item.model';\r\n\r\n@Component({\r\n    selector: 'app-nav-item-list',\r\n    templateUrl: './nav-item-list.component.html',\r\n    styleUrl: './nav-item-list.component.scss',\r\n    imports: [\r\n        MatIconModule,\r\n        NgClass,\r\n        RouterLink,\r\n        RouterLinkActive,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class NavItemListComponent implements OnInit {\r\n  navItem = input<NavItem>();\r\n  isOpenMenu = false;\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.#openChildMenu();\r\n    this.router.events.subscribe(() => this.#openChildMenu());\r\n  }\r\n\r\n  #openChildMenu() {\r\n    if (!this.navItem().child?.length)\r\n      return;\r\n\r\n    const urlSegments = this.router.url.split('/');\r\n    const matchingChild = this.navItem().child.find(child => urlSegments.includes(child.path));\r\n    if (matchingChild)\r\n      this.isOpenMenu = true;\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Directive, inject, ElementRef, DOCUMENT, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ContentChildren, NgModule } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/bidi';\n\nclass MatToolbarRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatToolbarRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatToolbarRow, isStandalone: true, selector: \"mat-toolbar-row\", host: { classAttribute: \"mat-toolbar-row\" }, exportAs: [\"matToolbarRow\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatToolbarRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-toolbar-row',\n                    exportAs: 'matToolbarRow',\n                    host: { 'class': 'mat-toolbar-row' },\n                }]\n        }] });\nclass MatToolbar {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    _document = inject(DOCUMENT);\n    // TODO: should be typed as `ThemePalette` but internal apps pass in arbitrary strings.\n    /**\n     * Theme color of the toolbar. This API is supported in M2 themes only, it has\n     * no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/toolbar/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    color;\n    /** Reference to all toolbar row elements that have been projected. */\n    _toolbarRows;\n    constructor() { }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n        }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    _checkToolbarMixedModes() {\n        if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            // Check if there are any other DOM nodes that can display content but aren't inside of\n            // a <mat-toolbar-row> element.\n            const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n                .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n                .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n                .some(node => !!(node.textContent && node.textContent.trim()));\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatToolbar, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatToolbar, isStandalone: true, selector: \"mat-toolbar\", inputs: { color: \"color\" }, host: { properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"class.mat-toolbar-multiple-rows\": \"_toolbarRows.length > 0\", \"class.mat-toolbar-single-row\": \"_toolbarRows.length === 0\" }, classAttribute: \"mat-toolbar\" }, queries: [{ propertyName: \"_toolbarRows\", predicate: MatToolbarRow, descendants: true }], exportAs: [\"matToolbar\"], ngImport: i0, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color, var(--mat-sys-surface));color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font, var(--mat-sys-title-large-font));font-size:var(--mat-toolbar-title-text-size, var(--mat-sys-title-large-size));line-height:var(--mat-toolbar-title-text-line-height, var(--mat-sys-title-large-line-height));font-weight:var(--mat-toolbar-title-text-weight, var(--mat-sys-title-large-weight));letter-spacing:var(--mat-toolbar-title-text-tracking, var(--mat-sys-title-large-tracking));margin:0}@media(forced-colors: active){.mat-toolbar{outline:solid 1px}}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mat-button-text-label-text-color: var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface));--mat-button-outlined-label-text-color: var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height, 56px)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height, 56px)}}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatToolbar, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-toolbar', exportAs: 'matToolbar', host: {\n                        'class': 'mat-toolbar',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                        '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color, var(--mat-sys-surface));color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font, var(--mat-sys-title-large-font));font-size:var(--mat-toolbar-title-text-size, var(--mat-sys-title-large-size));line-height:var(--mat-toolbar-title-text-line-height, var(--mat-sys-title-large-line-height));font-weight:var(--mat-toolbar-title-text-weight, var(--mat-sys-title-large-weight));letter-spacing:var(--mat-toolbar-title-text-tracking, var(--mat-sys-title-large-tracking));margin:0}@media(forced-colors: active){.mat-toolbar{outline:solid 1px}}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mat-button-text-label-text-color: var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface));--mat-button-outlined-label-text-color: var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height, 56px)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height, 56px)}}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input\n            }], _toolbarRows: [{\n                type: ContentChildren,\n                args: [MatToolbarRow, { descendants: true }]\n            }] } });\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\nclass MatToolbarModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatToolbarModule, imports: [MatCommonModule, MatToolbar, MatToolbarRow], exports: [MatToolbar, MatToolbarRow, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatToolbarModule, imports: [MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatToolbarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatToolbar, MatToolbarRow],\n                    exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                }]\n        }] });\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n","import { map } from './map';\nexport function mapTo(value) {\n    return map(() => value);\n}\n","import * as i0 from '@angular/core';\nimport { Directive, Injectable, TemplateRef, Input, ContentChild, ViewEncapsulation, Component } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/router';\nimport { GuardsCheckEnd, RouterModule } from '@angular/router';\nimport { BehaviorSubject, map } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to the demo - app.component.html\n */\nclass BreadcrumbItemDirective {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.5\", ngImport: i0, type: BreadcrumbItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.1.5\", type: BreadcrumbItemDirective, isStandalone: true, selector: \"[xngBreadcrumbItem]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.5\", ngImport: i0, type: BreadcrumbItemDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[xngBreadcrumbItem]',\n                    standalone: true,\n                }]\n        }] });\n\nconst PATH_PARAM = {\n    PREFIX: ':',\n    REGEX_IDENTIFIER: '/:[^/]+',\n    REGEX_REPLACER: '/[^/]+',\n};\nconst ALIAS_PREFIX = '@';\nconst isNonEmpty = (obj) => {\n    return !!obj && Object.keys(obj).length > 0;\n};\nclass BreadcrumbService {\n    constructor(activatedRoute, router) {\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        this.baseHref = '/';\n        /**\n         * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n         * Breadcrumbs can be set from anywhere (component, service) in the app.\n         * On every breadcrumb update check this store and use the info if available.\n         */\n        this.dynamicBreadcrumbStore = [];\n        /**\n         * breadcrumbList for the current route\n         * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n         * If effected, update the change and emit a new stream\n         */\n        this.currentBreadcrumbs = [];\n        this.previousBreadcrumbs = [];\n        /**\n         * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n         * Emits on every route change OR dynamic update of breadcrumb\n         */\n        this.breadcrumbs = new BehaviorSubject([]);\n        this.breadcrumbs$ = this.breadcrumbs.asObservable();\n        this.detectRouteChanges();\n    }\n    /**\n     * Whenever route changes build breadcrumb list again\n     */\n    detectRouteChanges() {\n        // Special case where breadcrumb service & component instantiates after a route is navigated.\n        // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\n        // This check is also required where  { initialNavigation: 'enabledBlocking' } is applied to routes\n        this.setupBreadcrumbs(this.activatedRoute.snapshot);\n        this.router.events.pipe(filter((event) => event instanceof GuardsCheckEnd)).subscribe((event) => {\n            // activatedRoute doesn't carry data when shouldReuseRoute returns false\n            // use the event data with GuardsCheckEnd as workaround\n            // Check for shouldActivate in case where the authGuard returns false the breadcrumbs shouldn't be changed\n            if (event.shouldActivate) {\n                this.setupBreadcrumbs(event.state.root);\n            }\n        });\n    }\n    setupBreadcrumbs(activatedRouteSnapshot) {\n        this.previousBreadcrumbs = this.currentBreadcrumbs;\n        // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n        const rootBreadcrumb = this.getRootBreadcrumb();\n        this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n        this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\n    }\n    getRootBreadcrumb() {\n        const rootConfig = this.router.config.find((config) => config.path === '');\n        const rootBreadcrumb = this.extractObject(rootConfig?.data?.['breadcrumb']);\n        const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n        if (isNonEmpty(rootBreadcrumb) || isNonEmpty(storeItem)) {\n            return {\n                ...storeItem,\n                ...rootBreadcrumb,\n                routeLink: this.baseHref,\n                ...this.getQueryParamsFromPreviousList('/'),\n            };\n        }\n    }\n    prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix) {\n        const { path, breadcrumb } = this.parseRouteData(activatedRouteSnapshot.routeConfig);\n        const resolvedSegment = this.resolvePathSegment(path, activatedRouteSnapshot);\n        const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n        const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n        const label = this.extractLabel(storeItem?.label || breadcrumb?.label, resolvedSegment);\n        let isAutoGeneratedLabel = false;\n        let autoGeneratedLabel = '';\n        if (!label) {\n            isAutoGeneratedLabel = true;\n            autoGeneratedLabel = resolvedSegment;\n        }\n        return {\n            ...storeItem,\n            ...breadcrumb,\n            label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\n            routeLink,\n            isAutoGeneratedLabel,\n            ...this.getQueryParamsFromPreviousList(routeLink),\n        };\n    }\n    prepareBreadcrumbList(activatedRouteSnapshot, routeLinkPrefix) {\n        if (activatedRouteSnapshot.routeConfig?.path) {\n            const breadcrumbItem = this.prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix);\n            this.currentBreadcrumbs.push(breadcrumbItem);\n            if (activatedRouteSnapshot.firstChild) {\n                return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, breadcrumbItem.routeLink + '/');\n            }\n        }\n        else if (activatedRouteSnapshot.firstChild) {\n            return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, routeLinkPrefix);\n        }\n        const lastCrumb = this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n        this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot);\n        // remove breadcrumb items that needs to be hidden\n        const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n        this.breadcrumbs.next(breadcrumbsToShow);\n    }\n    getFromStore(alias, routeLink) {\n        return this.dynamicBreadcrumbStore.find((item) => {\n            return (alias && alias === item.alias) || (routeLink && routeLink === item.routeLink) || this.matchRegex(routeLink, item.routeRegex);\n        });\n    }\n    /**\n     * use exact match instead of regexp.test\n     * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n     */\n    matchRegex(routeLink, routeRegex) {\n        const match = routeLink.match(new RegExp(routeRegex));\n        return match?.[0] === routeLink;\n    }\n    /**\n     * if the path segment has route params, read the param value from url\n     * for each segment of route this gets called\n     *\n     * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n     */\n    resolvePathSegment(segment, activatedRouteSnapshot) {\n        //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n        if (segment.includes(PATH_PARAM.PREFIX)) {\n            Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\n                segment = segment.replace(`:${key}`, `${value}`);\n            });\n        }\n        return segment;\n    }\n    /**\n     * queryParams & fragments for previous breadcrumb path are copied over to new list\n     */\n    getQueryParamsFromPreviousList(routeLink) {\n        const { queryParams, fragment } = this.previousBreadcrumbs.find((item) => item.routeLink === routeLink) || {};\n        return { queryParams, fragment };\n    }\n    /**\n     * set current activated route query params to the last breadcrumb item\n     */\n    setQueryParamsForActiveBreadcrumb(lastItem, activatedRouteSnapshot) {\n        if (lastItem) {\n            const { queryParams, fragment } = activatedRouteSnapshot;\n            lastItem.queryParams = queryParams ? { ...queryParams } : undefined;\n            lastItem.fragment = fragment;\n        }\n    }\n    /**\n     * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n     * When both are defined, child takes precedence\n     *\n     * Ex: Below we are setting breadcrumb on both parent and child.\n     * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n     * { path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\n     *                                                AND\n     * children: [\n     *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n     * ]\n     */\n    parseRouteData(routeConfig) {\n        const { path, data } = routeConfig;\n        const breadcrumb = this.mergeWithBaseChildData(routeConfig, data?.breadcrumb);\n        return { path, breadcrumb };\n    }\n    /**\n     * get empty children of a module or Component. Empty child is the one with path: ''\n     * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n     */\n    mergeWithBaseChildData(routeConfig, // TODO: add proper type\n    config) {\n        if (!routeConfig) {\n            return this.extractObject(config);\n        }\n        let baseChild;\n        if (routeConfig.loadChildren) {\n            // To handle a module with empty child route\n            baseChild = routeConfig._loadedRoutes.find((route) => route.path === '');\n        }\n        else if (routeConfig.children) {\n            // To handle a component with empty child route\n            baseChild = routeConfig.children.find((route) => route.path === '');\n        }\n        const childConfig = baseChild?.data?.breadcrumb;\n        return childConfig\n            ? this.mergeWithBaseChildData(baseChild, {\n                ...this.extractObject(config),\n                ...this.extractObject(childConfig),\n            })\n            : this.extractObject(config);\n    }\n    /**\n     * Update breadcrumb dynamically\n     *\n     * key can be a path | alias\n     *\n     * 1) Using complete route path. route can be passed the same way you define angular routes\n     * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n     * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n     * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n     * ------------------------------------------ OR ------------------------------------------\n     * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n     * - update label Ex: set('@mentor', 'Enabler')\n     * - change visibility Ex: set('@mentorEdit', { skip: true })\n     *\n     *\n     * value can be string | BreadcrumbObject | BreadcrumbFunction\n     */\n    set(key, breadcrumb) {\n        const breadcrumbObject = this.extractObject(breadcrumb);\n        let updateArgs;\n        if (key.startsWith(ALIAS_PREFIX)) {\n            updateArgs = ['alias', { ...breadcrumbObject, alias: key.slice(1) }];\n        }\n        else if (key.includes(PATH_PARAM.PREFIX)) {\n            updateArgs = ['routeRegex', { ...breadcrumbObject, routeRegex: this.buildRegex(key) }];\n        }\n        else {\n            updateArgs = ['routeLink', { ...breadcrumbObject, routeLink: this.ensureLeadingSlash(key) }];\n        }\n        // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\n        // change it to false since this is user supplied value\n        updateArgs[1].isAutoGeneratedLabel = false;\n        this.updateStore(...updateArgs);\n        this.updateCurrentBreadcrumbs(...updateArgs);\n    }\n    /**\n     * Update the store to reuse for dynamic declarations\n     * If the store already has this route definition update it, else add\n     */\n    updateStore(key, breadcrumb) {\n        const storeItemIndex = this.dynamicBreadcrumbStore.findIndex((item) => {\n            return breadcrumb[key] === item[key];\n        });\n        if (storeItemIndex > -1) {\n            this.dynamicBreadcrumbStore[storeItemIndex] = {\n                ...this.dynamicBreadcrumbStore[storeItemIndex],\n                ...breadcrumb,\n            };\n        }\n        else {\n            this.dynamicBreadcrumbStore.push({ ...breadcrumb });\n        }\n    }\n    /**\n     * If breadcrumb is present in current breadcrumbs update it and emit new stream\n     */\n    updateCurrentBreadcrumbs(key, breadcrumb) {\n        const itemIndex = this.currentBreadcrumbs.findIndex((item) => {\n            return key === 'routeRegex' ? this.matchRegex(item.routeLink, breadcrumb[key]) : breadcrumb[key] === item[key];\n        });\n        if (itemIndex > -1) {\n            this.currentBreadcrumbs[itemIndex] = {\n                ...this.currentBreadcrumbs[itemIndex],\n                ...breadcrumb,\n            };\n            const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n            this.breadcrumbs.next([...breadcrumbsToShow]);\n        }\n    }\n    /**\n     * For a route with path param, we create regex dynamically from angular route syntax\n     * '/mentor/:id' becomes '/mentor/[^/]',\n     * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n     */\n    buildRegex(path) {\n        return this.ensureLeadingSlash(path).replace(new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'), PATH_PARAM.REGEX_REPLACER);\n    }\n    ensureLeadingSlash(path) {\n        return path.startsWith('/') ? path : `/${path}`;\n    }\n    /**\n     * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n     *\n     * string: simple static breadcrumb label for a path\n     * function: callback that gets invoked with resolved path param\n     * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n     */\n    extractLabel(config, resolvedParam) {\n        const label = typeof config === 'object' ? config.label : config;\n        if (typeof label === 'function') {\n            return label(resolvedParam);\n        }\n        return label;\n    }\n    extractObject(config) {\n        // don't include {label} if config is undefined. This is important since we merge the configs\n        if (config && (typeof config === 'string' || typeof config === 'function')) {\n            return { label: config };\n        }\n        return config || {};\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.5\", ngImport: i0, type: BreadcrumbService, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.1.5\", ngImport: i0, type: BreadcrumbService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.5\", ngImport: i0, type: BreadcrumbService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: i1.ActivatedRoute }, { type: i1.Router }] });\n\nclass BreadcrumbComponent {\n    /**\n     * separator between breadcrumbs, defaults to '/'.\n     * User can customize separator either by passing a String or Template\n     *\n     * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n     *\n     * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n     * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n     */\n    set separator(value) {\n        if (value instanceof TemplateRef) {\n            this.separatorTemplate = value;\n            this._separator = undefined;\n        }\n        else {\n            this.separatorTemplate = undefined;\n            this._separator = value || '/';\n        }\n    }\n    get separator() {\n        return this._separator;\n    }\n    constructor(breadcrumbService, activateRoute) {\n        this.breadcrumbService = breadcrumbService;\n        this._separator = '/';\n        /**\n         * If true, breadcrumb is auto generated even without any mapping label\n         * Default label is same as route segment\n         */\n        this.autoGenerate = true;\n        /**\n         * By default query params will be preserved with breadcrumbs\n         */\n        this.preserveQueryParams = true;\n        /**\n         * By default query fragments will be preserved with breadcrumbs\n         */\n        this.preserveFragment = true;\n        /**\n         * custom class provided by consumer to increase specificity\n         * This will benefit to override styles that are conflicting\n         */\n        this.class = '';\n        this.setupMessage = 'not set up yet';\n        this.someParameterValue = null;\n        // breadcrumb inside ngIf works only this way\n        activateRoute.params.subscribe((params) => {\n            this.setupComponent(params['someParam']);\n        });\n    }\n    setupComponent(someParam) {\n        this.setupMessage = 'set up at ' + new Date();\n        this.someParameterValue = someParam;\n    }\n    ngOnInit() {\n        this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(map((breadcrumbs) => {\n            return breadcrumbs\n                .filter((breadcrumb) => {\n                // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n                // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n                if (this.autoGenerate) {\n                    return true;\n                }\n                return !breadcrumb.isAutoGeneratedLabel;\n            })\n                .map((breadcrumb) => {\n                // Do not mutate breadcrumb as its source of truth.\n                // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n                const { routeInterceptor, routeLink } = breadcrumb;\n                return {\n                    ...breadcrumb,\n                    routeLink: routeInterceptor?.(routeLink, breadcrumb) || routeLink,\n                };\n            });\n        }));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.1.5\", ngImport: i0, type: BreadcrumbComponent, deps: [{ token: BreadcrumbService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.1.5\", type: BreadcrumbComponent, isStandalone: true, selector: \"xng-breadcrumb\", inputs: { autoGenerate: \"autoGenerate\", preserveQueryParams: \"preserveQueryParams\", preserveFragment: \"preserveFragment\", class: \"class\", anchorTarget: \"anchorTarget\", separator: \"separator\" }, queries: [{ propertyName: \"itemTemplate\", first: true, predicate: BreadcrumbItemDirective, descendants: true, read: TemplateRef }], ngImport: i0, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container *ngFor=\\\"let breadcrumb of breadcrumbs$ | async; last as isLast; first as isFirst; index as index; count as count\\\">\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"breadcrumb.routeInterceptor ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb) : breadcrumb.routeLink\\\"\\n          [queryParams]=\\\"preserveQueryParams ? breadcrumb.queryParams : undefined\\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{ breadcrumb.label }}</ng-container>\\n        </a>\\n\\n        <span *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{ breadcrumb.label }}</ng-container>\\n        </span>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"], dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"pipe\", type: i3.AsyncPipe, name: \"async\" }, { kind: \"ngmodule\", type: RouterModule }, { kind: \"directive\", type: i1.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"info\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.1.5\", ngImport: i0, type: BreadcrumbComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'xng-breadcrumb', imports: [CommonModule, RouterModule], encapsulation: ViewEncapsulation.None, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container *ngFor=\\\"let breadcrumb of breadcrumbs$ | async; last as isLast; first as isFirst; index as index; count as count\\\">\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"breadcrumb.routeInterceptor ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb) : breadcrumb.routeLink\\\"\\n          [queryParams]=\\\"preserveQueryParams ? breadcrumb.queryParams : undefined\\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{ breadcrumb.label }}</ng-container>\\n        </a>\\n\\n        <span *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{ breadcrumb.label }}</ng-container>\\n        </span>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"] }]\n        }], ctorParameters: () => [{ type: BreadcrumbService }, { type: i1.ActivatedRoute }], propDecorators: { itemTemplate: [{\n                type: ContentChild,\n                args: [BreadcrumbItemDirective, { static: false, read: TemplateRef }]\n            }], autoGenerate: [{\n                type: Input\n            }], preserveQueryParams: [{\n                type: Input\n            }], preserveFragment: [{\n                type: Input\n            }], class: [{\n                type: Input\n            }], anchorTarget: [{\n                type: Input\n            }], separator: [{\n                type: Input\n            }] } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreadcrumbComponent, BreadcrumbItemDirective, BreadcrumbService };\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n"],"x_google_ignoreList":[0,3,4,5]}