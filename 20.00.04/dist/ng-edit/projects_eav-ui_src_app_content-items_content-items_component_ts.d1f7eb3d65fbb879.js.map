{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts.d1f7eb3d65fbb879.js","mappings":"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","names":["logSpecs","getAll","getAllLive","getAllOnce","ContentItemsService","HttpServiceBaseSignal","constructor","this","log","classLog","getAllPromise","contentTypeStaticName","fnIf","fetchPromise","webApiEntityList","params","appId","contentType","httpResource","url","apiUrl","refresh","getColumnsPromise","webApiFieldsAll","staticName","importItem","file","from","toBase64","pipe","switchMap","fileBase64","http","post","webApiEntityRoot","AppId","ContentBase64","map","success","Success","Messages","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_10__","jDH","factory","ɵfac","dropdownInsertValue","i0","ctx_r0","dialogData","message","confirmTranslateKey","ConfirmDeleteDialogComponent","dialog","hostClass","MAT_DIALOG_DATA","i1","_angular_core__WEBPACK_IMPORTED_MODULE_0__","VBU","selectors","hostVars","hostBindings","rf","ctx","ConfirmDeleteDialogComponent_Conditional_5_Template","close","ConfirmDeleteDialogComponent_Conditional_10_Template","ConfirmDeleteDialogComponent_Conditional_11_Template","title","entityTitle","entityId","confirmColor","MatCardModule","i2","MatButtonModule","i3","SafeHtmlPipe","styles","AgGridHelper","cellLink","link","body","classes","ClickStopPropagationDirective","a","onClick","event","stopPropagation","_angular_core__WEBPACK_IMPORTED_MODULE_1__","FsC","$event","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","FieldHintComponent","isError","input","isShort","toggleIsShort","inputs","ngContentSelectors","_c0","decls","vars","consts","template","_r1","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","MatFormFieldModule","NgClass","NgTemplateOutlet","doOnDialogClosed","DialogRoutingService","ServiceBase","router","route","super","snapshot","urlSegments","split","getParam","key","paramMap","get","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","subscriptions","add","childDialogClosed$","subscribe","data","end","doOnDialogClosedWithData","#childDialogClosedWithData","urlSubRoute","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","navRelative","commands","events","filter","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","tap","fn","snapShot","prev","curr","_angular_core__WEBPACK_IMPORTED_MODULE_8__","EntityFilterComponent","idFilterString","idFilter","agInit","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","context","node","getValue","field","some","value","includes","items","headerName","idFltr","itm","Id","getModel","filterType","setModel","model","join","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","el","parseInt","isNaN","filterChanged","filterChangedCallback","debug_node_JnOYh9kg","viewQuery","FormsModule","MatRadioModule","MatInputModule","_r2","ctx_r2","do","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","verb","ContentItemsActionsComponent_ng_template_12_Template","urlTo","menu_r4","MatRippleModule","MatIconModule","MatMenuModule","TippyDirective","encapsulation","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","metadataTooltip","metadataCount","metadata","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","MatBadgeModule","metadataKeyValidator","form","control","keyType","controls","testValue","toString","eavConstants","keyTypes","number","test","patternWholeNumber","guid","hasCurly","bracket","substring","guidRegex","patternGuid","option_r2","targetType","label","vm_r3","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_14_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Conditional_3_Template","ctx_r3","targetTypeOptions","unknownTargetType","targetTypeHint","option_r5","contentType_r6","NameId","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_27_For_5_Template","contentTypes","scopeOption_r7","name","CreateMetadataDialogComponent_Conditional_0_Conditional_28_For_5_Template","scopeOptions","item_r8","Guid","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_1_Template","guidedKey","contentType_r9","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_ng_container_0_Template","defaultKeyInput_r10","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_Template","tmp_4_0","entity","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_1_Template","_r11","toggleGuidedKey","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_15_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_16_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_For_25_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_26_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_27_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_40_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_43_Template","toggleGuidedMode","closeDialog","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","valid","CreateMetadataDialogComponent","BaseComponent","contentItemsService","transient","contentTypesService","ContentTypesService","ngOnInit","Object","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","scopes","default","scopeForContentTypes","valueChanges","distinctUntilChanged","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","then","formValues$","mapUntilObjChanged","m","combineLatest","foundTargetType","find","RxHelpers","arraysEqual","updatedForm","isAppMetadata","app","UiControl","disable","viewModel$","hint","ngOnDestroy","complete","result","checked","target","scope","retrieveContentTypesPromise","getScopesPromise","CreateMetadataDialogComponent_Conditional_0_Template","tmp_0_0","ReactiveFormsModule","i4","MatSelectModule","i5","MatOptionModule","i6","i7","i8","MatDialogActions","MatSlideToggleModule","i9","AsyncPipe","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","ctx_r1","onGridReady","filesDropped","gridOptions","_r3","debugFilter","all","ContentItemsComponent","#entitiesSvc","#contentExportSvc","#contentItemsSvc","#contentTypesSvc","#dialogRouter","snackBar","matDialog","viewContainerRef","changeDetectorRef","isDebug","inject","GlobalConfigService","EntityEditService","ContentExportService","defaultGridOptions","onFilterChanged","_","#filterChanged","update","v","signal","#helpTextConst","empty","description","content","uxHelpText","computed","#gridApiSig","#contentTypeStaticName","getType","#itemsRaw","aIf","urlToExportContent","computedObj","hasFilters","getFilterModel","ids","forEachNodeAfterFilterAndSort","n","push","#urlTo","fetchItems","set","fetchColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","#buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","JsonHelpers","tryParse","undefined","sessionStorage","getItem","keyFilters","setColumnDefs","setFilterModel","#urlToMetadata","GoToMetadata","getUrlEntity","_Title","editItem","EditPrep","newFromType","editId","formUrl","convertFormToUrl","#urlToOpenEditView","urlToNewItem","files","importFile","lastIndexOf","toLocaleLowerCase","urlToImportContent","f","urlToImportItem","createMetadata","open","autoFocus","width","afterClosed","itemFor","newMetadataFromInfo","markForCheck","warn","duration","ColumnDefinitions","IdWithDefaultRenderer","cellClass","p","ReadOnly","cellRendererParams","idFieldParamsTooltipGetter","headerClass","cellRenderer","TextWidePrimary","flex","headerTooltip","sortable","_Used","_Uses","ActionsPinnedRight3","#urlToClone","#export","#delete","StaticName","minWidth","Type","DataTypeCatalog","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","Number","copy","exportEntity","#confirmAndExecuteDelete","forceDelete","dialogTitle","confirmText","_RepositoryId","isConfirmed","dismiss","delete","err","ExceptionMessage","rawValue","ContentItemsComponent_Conditional_9_Template","ContentItemsComponent_Conditional_10_Template","ContentItemsComponent_Conditional_33_Template","tmp_3_0","Name","Properties","ListInstructions","tmp_5_0","RouterOutlet","DragAndDropDirective","ToggleDebugDirective","SxcGridModule","GridWithHelpComponent","boolEquals","x","y","stringEquals","valueEquals","objectsEqual","obj1","obj2","keys1","keys2","every","key1","hasOwnProperty","index","distinct","array","indexOf","globalConfigService","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","create","zoneId","id","tryForce","force","HttpContext","IGNORED_STATUSES","_angular_core__WEBPACK_IMPORTED_MODULE_5__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-items/services/content-items.service.ts","./projects/eav-ui/src/app/shared/constants/dropdown-insert-value.constant.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.component.ts","./projects/eav-ui/src/app/shared/ag-grid/ag-grid-helper.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/shared/rxJs/rx.helpers.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/services/entity-edit.service.ts"],"sourcesContent":["import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { webApiFieldsAll } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../shared/services/entity.service';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\nconst logSpecs = {\r\n  getAll: true,\r\n  getAllLive: true,\r\n  getAllOnce: true,\r\n\r\n}\r\n@Injectable()\r\nexport class ContentItemsService extends HttpServiceBaseSignal {\r\n\r\n  log = classLog({ ContentItemsService }, logSpecs);\r\n  \r\n  getAllPromise(contentTypeStaticName: string): Promise<ContentItem[]> {\r\n    this.log.fnIf('getAll', { contentTypeStaticName });\r\n    return this.fetchPromise<ContentItem[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getAllOnce(contentTypeStaticName: string) {\r\n    this.log.fnIf('getAllOnce', { contentTypeStaticName });\r\n    return httpResource<ContentItem[]>(() => {\r\n      return ({\r\n        url: this.apiUrl(webApiEntityList),\r\n        params: { appId: this.appId, contentType: contentTypeStaticName }\r\n      });\r\n    });\r\n  }\r\n\r\n  getAllLive(contentTypeStaticName: string, refresh: Signal<unknown>) {\r\n    this.log.fnIf('getAllLive', { contentTypeStaticName, refresh });\r\n    return httpResource<ContentItem[]>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiEntityList),\r\n        params: { appId: this.appId, contentType: contentTypeStaticName }\r\n      });\r\n    });\r\n  }\r\n\r\n  getColumnsPromise(contentTypeStaticName: string): Promise<Field[]> {\r\n    return this.fetchPromise<Field[]>(webApiFieldsAll, {\r\n      params: { appId: this.appId, staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","export const dropdownInsertValue = 'DROPDOWN_INSERT_VALUE' as const;\r\n","<mat-card>\r\n  <mat-card-header style=\"margin-bottom: 12px\">\r\n    <mat-card-title> {{ dialogData.title ?? 'Delete' }} {{ dialogData.entityTitle }} ({{ dialogData.entityId }})</mat-card-title>\r\n  </mat-card-header>\r\n\r\n  <mat-card-content>\r\n    @if (dialogData.message) {\r\n      <mat-card-subtitle [innerHtml]=\"dialogData.message | safeHtml\"></mat-card-subtitle>\r\n    }\r\n  </mat-card-content>\r\n\r\n  <mat-card-actions align=\"end\">\r\n    <button mat-raised-button (click)=\"dialog.close()\">Cancel</button>\r\n    <button\r\n      class=\"eav-card-action-button\"\r\n      mat-raised-button\r\n      cdkFocusInitial\r\n      (click)=\"dialog.close(true)\"\r\n      [color]=\"dialogData.confirmColor ?? 'warn'\"\r\n    >\r\n      @if (dialogData.confirmTranslateKey) {\r\n        {{ dialogData.confirmTranslateKey }}\r\n      } @else {\r\n        Delete\r\n      }\r\n    </button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n","import { Component, HostBinding, Inject } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\nimport { ConfirmDeleteDialogData } from './confirm-delete-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-confirm-delete-dialog',\r\n  templateUrl: './confirm-delete-dialog.component.html',\r\n  styleUrls: ['./confirm-delete-dialog.component.scss'],\r\n  imports: [\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    SafeHtmlPipe,\r\n  ]\r\n})\r\nexport class ConfirmDeleteDialogComponent {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: ConfirmDeleteDialogData,\r\n    public dialog: MatDialogRef<ConfirmDeleteDialogComponent>,\r\n  ) { }\r\n\r\n}\r\n","export class AgGridHelper {\r\n  public static cellLink(link: string, body: string, classes?: string): string {\r\n    return `<a class=\"default-link fill-cell ${classes}\" href=\"${link}\">${body}</a>`;\r\n  }\r\n}","import { Directive, HostListener } from '@angular/core';\r\nimport { classLog } from '../logging';\r\n\r\n@Directive({\r\n  selector: '[appClickStopPropagation]',\r\n})\r\nexport class ClickStopPropagationDirective {\r\n\r\n  log = classLog({ClickStopPropagationDirective});\r\n\r\n  // Log constructor to detect that it was really attached/created\r\n  constructor() {\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.log.a('onClick', { event });\r\n    event.stopPropagation();\r\n\r\n    // This should never be added here, as it's often on a link, and the default behavior (link open) should happen\r\n    // event.preventDefault();\r\n  }\r\n\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n    selector: 'app-field-hint',\r\n    templateUrl: './field-hint.component.html',\r\n    styleUrls: ['./field-hint.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        NgClass,\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe((data: unknown) => {\r\n        l.a('Dialog closed', { data });\r\n        return callback();\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  public doOnDialogClosedWithData(callback: (data: any) => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.#childDialogClosedWithData().subscribe(({ state }) => {\r\n        l.a('Dialog closed', { state });\r\n        callback(state);\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n  #childDialogClosedWithData() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      tap(event => {\r\n        const l = this.log.fn(\"childDialogClosed$\", {\r\n          event,\r\n          firstChild: this.route.snapshot.firstChild,\r\n          snapShot: this.route.snapshot,\r\n          state: this.router.getCurrentNavigation()?.extras.state,\r\n        });\r\n        l.a('NavigationEnd', { event });\r\n        l.end();\r\n      }),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => ({\r\n        hasChildNow: !!this.route.snapshot.firstChild,\r\n        state: this.router.getCurrentNavigation()?.extras.state,\r\n      })),\r\n      pairwise(),\r\n      filter(([prev, curr]) => prev.hasChildNow && !curr.hasChildNow),\r\n      map(([prev, curr]) => ({\r\n        hadChildBefore: prev.hasChildNow,\r\n        hasChildNow: curr.hasChildNow,\r\n        state: curr.state\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n    selector: 'app-entity-filter',\r\n    templateUrl: './entity-filter.component.html',\r\n    styleUrls: ['./entity-filter.component.scss'],\r\n    imports: [\r\n        FormsModule,\r\n        MatRadioModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n    ]\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Clone\" [href]=\"params.urlTo('clone', item)\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </a>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"do('export')\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams, ContentItemType } from './content-items-actions.models';\r\n\r\ntype GoToUrls = 'clone'\r\n\r\n@Component({\r\n    selector: 'app-data-bundle-actions',\r\n    templateUrl: './content-items-actions.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatMenuModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  protected item: ContentItem;\r\n\r\n  public params: ContentItemsActionsParams & {\r\n    urlTo(verb: GoToUrls, item: ContentItem): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsComponent['params']): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentItemType): void {\r\n    this.params.do(verb, this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n  <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n    selector: 'app-content-items-entity',\r\n    templateUrl: './content-items-entity.component.html',\r\n    styleUrls: ['./content-items-entity.component.scss'],\r\n    imports: [TippyDirective,]\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) return;\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n    <a\r\n      class=\"eav-grid-action-button default-link highlight\"\r\n      matRipple\r\n      [tippy]=\"metadataTooltip\"\r\n      [href]=\"params.urlTo('openMetadata', item)\"\r\n      [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\"\r\n    >\r\n      <mat-icon\r\n        [matBadge]=\"metadataCount\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n        >{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </a>\r\n  }\r\n  @else if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"metadataCount\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n        >{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\n\r\ntype GoToUrls = 'openMetadata'\r\n\r\n@Component({\r\n    selector: 'app-content-items-status',\r\n    templateUrl: './content-items-status.component.html',\r\n    styleUrls: ['./content-items-status.component.scss'],\r\n    imports: [\r\n        MatIconModule,\r\n        MatRippleModule,\r\n        NgClass,\r\n        MatBadgeModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  protected item: ContentItem;\r\n\r\n  public params: {\r\n    urlTo(verb: GoToUrls, item: ContentItem): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusComponent['params']): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { Of } from '../../../../../core';\r\nimport { eavConstants, MetadataKeyTypes } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: Of<typeof MetadataKeyTypes> = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This is a special operation to add an item which is metadata for another item, see\r\n        <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <form [formGroup]=\"form\">\r\n        <!-- Target Type -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Target</mat-label>\r\n          @if (vm.guidedMode) {\r\n            <mat-select formControlName=\"targetType\" required>\r\n              @for (option of targetTypeOptions; track option) {\r\n                <mat-option [value]=\"option.targetType\">\r\n                  {{ option.label }}\r\n                </mat-option>\r\n              }\r\n              @if (vm.unknownTargetType) {\r\n                <mat-option [value]=\"vm.formValues.targetType\">\r\n                  {{ vm.formValues.targetType }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          }\r\n          @if (!vm.guidedMode) {\r\n            <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required />\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType) {\r\n          <app-field-hint [isError]=\"false\">\r\n            Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n          </app-field-hint>\r\n        }\r\n        @if (vm.targetTypeHint) {\r\n          <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern) {\r\n          <app-field-hint [isError]=\"true\"> Must be a whole number </app-field-hint>\r\n        }\r\n        <!-- Key Type -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Key type</mat-label>\r\n          <mat-select formControlName=\"keyType\" required>\r\n            @for (option of vm.keyTypeOptions; track option) {\r\n              <mat-option [value]=\"option\">\r\n                {{ option }}\r\n              </mat-option>\r\n            }\r\n          </mat-select>\r\n        </mat-form-field>\r\n        @if (form.controls['keyType'].touched && form.controls['keyType'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        <!-- Content Type for Content Items -->\r\n        @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n          <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n            <mat-label>Content Type</mat-label>\r\n            <mat-select formControlName=\"contentTypeForContentItems\" [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n              @for (contentType of vm.contentTypes; track contentType) {\r\n                <mat-option [value]=\"contentType.NameId\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <!-- Scope for Content Types -->\r\n        @if (\r\n          vm.guidedMode &&\r\n          (vm.formValues.targetType === eavConstants.metadata.entity.targetType ||\r\n            vm.formValues.targetType === eavConstants.metadata.contentType.targetType)\r\n        ) {\r\n          <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n            <mat-label>Scope</mat-label>\r\n            <mat-select formControlName=\"scopeForContentTypes\" [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n              @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n                <mat-option [value]=\"scopeOption.value\">\r\n                  {{ scopeOption.name }}\r\n                </mat-option>\r\n              }\r\n              <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n        <!-- Key -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Key</mat-label>\r\n          @if (vm.guidedMode) {\r\n            @switch (vm.formValues.targetType) {\r\n              @case (eavConstants.metadata.entity.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                    @for (item of vm.contentItems; track item) {\r\n                      <mat-option [value]=\"item.Guid\"> {{ item.Title }} ({{ item.Id }}) </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                } @else {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required />\r\n                }\r\n              }\r\n              @case (eavConstants.metadata.contentType.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                    @for (contentType of vm.contentTypes; track contentType) {\r\n                      <mat-option [value]=\"contentType.NameId\">\r\n                        {{ contentType.Label }}\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                } @else {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required />\r\n                }\r\n              }\r\n              @default {\r\n                <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n              }\r\n            }\r\n          } @else {\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\" formControlName=\"key\" required />\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\" formControlName=\"key\" required />\r\n            }\r\n          }\r\n          <ng-template #defaultKeyInput>\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\" formControlName=\"key\" required />\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\" formControlName=\"key\" required />\r\n            }\r\n          </ng-template>\r\n          @if (vm.guidedMode && vm.guidedKeyExists) {\r\n            <div matTextSuffix class=\"eav-selection-suffix\">\r\n              <button\r\n                mat-icon-button\r\n                class=\"eav-selection-suffix-button\"\r\n                type=\"button\"\r\n                [ngClass]=\"{ active: vm.guidedKey }\"\r\n                tippy=\"Pick existing value\"\r\n                (click)=\"toggleGuidedKey(true)\"\r\n              >\r\n                <mat-icon class=\"eav-icon\">search</mat-icon>\r\n              </button>\r\n              <button\r\n                mat-icon-button\r\n                class=\"eav-selection-suffix-button\"\r\n                type=\"button\"\r\n                [ngClass]=\"{ active: !vm.guidedKey }\"\r\n                tippy=\"Manual entry\"\r\n                (click)=\"toggleGuidedKey(false)\"\r\n              >\r\n                <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n              </button>\r\n            </div>\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber) {\r\n          <app-field-hint [isError]=\"true\"> Must be a whole number </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternGuid) {\r\n          <app-field-hint [isError]=\"true\"> Must be a valid GUID </app-field-hint>\r\n        }\r\n      </form>\r\n    </div>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <mat-slide-toggle\r\n        color=\"accent\"\r\n        [tippy]=\"\r\n          vm.guidedMode\r\n            ? 'Guided mode helps you select options that work'\r\n            : 'Manual mode is for advanced uses and allows you to insert any values'\r\n        \"\r\n        [checked]=\"vm.guidedMode\"\r\n        (change)=\"toggleGuidedMode($event)\"\r\n      >\r\n        {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div>\r\n        <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">Confirm</button>\r\n      </div>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { AsyncPipe, NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { UiControl } from '../../edit/shared/controls/ui-control';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyTypes, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ClickStopPropagationDirective } from '../../shared/directives/click-stop-propagation.directive';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { mapUntilObjChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { RxHelpers } from '../../shared/rxJs/rx.helpers';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    NgTemplateOutlet,\r\n    MatButtonModule,\r\n    NgClass,\r\n    MatIconModule,\r\n    MatDialogActions,\r\n    MatSlideToggleModule,\r\n    AsyncPipe,\r\n    FieldHintComponent,\r\n    ClickStopPropagationDirective,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: Of<typeof MetadataKeyTypes>[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<Of<typeof MetadataKeyTypes>[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n\r\n  private contentTypesService = transient(ContentTypesService);\r\n  constructor(\r\n    private dialog: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<Of<typeof MetadataKeyTypes>[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscriptions.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscriptions.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscriptions.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAllPromise(contentTypeStaticName).then(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      mapUntilObjChanged(m => m)\r\n      // distinctUntilChanged(RxHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscriptions.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!RxHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value))\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType))\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId)\r\n          updatedForm.key = this.context.appId;\r\n\r\n        if (Object.keys(updatedForm).length)\r\n          this.form.patchValue(updatedForm);\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        UiControl.disable(this.form.controls['keyType'], keyTypeDisabled);\r\n        UiControl.disable(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialog.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypesPromise(scope).then(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopesPromise().then(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n    selector: 'app-pub-meta-filter',\r\n    templateUrl: './pub-meta-filter.component.html',\r\n    styleUrls: ['./pub-meta-filter.component.scss'],\r\n    imports: [\r\n        MatRadioModule,\r\n        FormsModule,\r\n    ]\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n  <app-grid-with-help style=\"height: 100%\" [helpText]=\"uxHelpText()\" [refresh]=\"refresh()\" [rowLength]=\"items()?.length\">\r\n    <div class=\"eav-dialog-header\" eav-dialog-header>\r\n      <div class=\"eav-dialog-header__title\">{{ contentType()?.Label || contentType()?.Name }} Data</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <!-- Info Content -->\r\n    <div class=\"eav-dialog-content\" eav-dialog-content>\r\n      @if (contentType()?.Properties?.ListInstructions; as listInstructions) {\r\n        <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n      }\r\n    </div>\r\n\r\n    @if (items()?.length > 0) {\r\n      <ag-grid-angular\r\n        class=\"ag-theme-material eav-dialog-content\"\r\n        [rowData]=\"items()\"\r\n        [gridOptions]=\"gridOptions\"\r\n        (gridReady)=\"onGridReady($event)\"\r\n        appDragAndDrop\r\n        [allowedFileTypes]=\"'xml,json'\"\r\n        (filesDropped)=\"filesDropped($event)\"\r\n      >\r\n      </ag-grid-angular>\r\n    }\r\n\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <div class=\"eav-dialog-actions-div\">\r\n        <a [href]=\"urlToExportContent()\" mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" tippyPlacement=\"top\">\r\n          <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n          <span>Data</span>\r\n        </a>\r\n        <a [href]=\"urlToImportContent()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" tippyPlacement=\"top\">\r\n          <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n          <span>Data</span>\r\n        </a>\r\n        <a [href]=\"urlToImportItem()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" tippyPlacement=\"top\">\r\n          <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n          <span>Item</span>\r\n        </a>\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" tippyPlacement=\"top\" (click)=\"createMetadata()\">\r\n          <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n          <span>Create Metadata</span>\r\n        </button>\r\n        @if (isDebug()) {\r\n          <button\r\n            mat-button\r\n            class=\"eav-button__with-icon\"\r\n            color=\"accent\"\r\n            tippy=\"Print filter to console\"\r\n            tippyPlacement=\"top\"\r\n            (click)=\"debugFilter()\"\r\n          >\r\n            <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n            <span>Filter</span>\r\n          </button>\r\n        }\r\n      </div>\r\n      <a [href]=\"urlToNewItem()\" mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\">\r\n        <mat-icon>add</mat-icon>\r\n      </a>\r\n    </mat-dialog-actions>\r\n  </app-grid-with-help>\r\n</div>\r\n<router-outlet></router-outlet>\r\n","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, computed, inject, OnInit, signal, ViewContainerRef, WritableSignal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../../../core';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ConfirmDeleteDialogComponent } from '../app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.component';\r\nimport { ConfirmDeleteDialogData } from '../app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.models';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { AgGridHelper } from '../shared/ag-grid/ag-grid-helper';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { GridWithHelpComponent, HelpTextConst } from '../shared/ag-grid/grid-with-help/grid-with-help.component';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { TippyDirective } from '../shared/directives/tippy.directive';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { classLog } from '../shared/logging';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { SafeHtmlPipe } from '../shared/pipes/safe-html.pipe';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { EntityEditService } from '../shared/services/entity-edit.service';\r\nimport { GlobalConfigService } from '../shared/services/global-config.service';\r\nimport { computedObj } from '../shared/signals/signal.utilities';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  items: true,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatDialogActions,\r\n    SafeHtmlPipe,\r\n    DragAndDropDirective,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n    TippyDirective,\r\n    GridWithHelpComponent\r\n  ]\r\n})\r\nexport class ContentItemsComponent implements OnInit {\r\n\r\n  log = classLog({ ContentItemsComponent }, logSpecs);\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n\r\n  #entitiesSvc = transient(EntityEditService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ContentItemsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    onFilterChanged: _ => this.#filterChanged.update(v => v + 1),\r\n  };\r\n\r\n  /** Signal to tell other signals that the filter changed */\r\n  #filterChanged = signal(0);\r\n\r\n  /** Signal to trigger reloading of data */\r\n  refresh = signal(0);\r\n\r\n  // UI Help Text for the UX Help Info Card\r\n  #helpTextConst: HelpTextConst = {\r\n    empty: {\r\n      description: '<p><b>This is where you manage data items</b></p>',\r\n      hint: \"<p>Click the (+) in the bottom right corner to create your first item (think: record / entity).</p>\"\r\n    },\r\n    content: {\r\n      description: '<p><b>Each row shows a data item</b> <br>They contain the data, similar to a database row.</p>',\r\n      hint: '<p>Click on the title to edit. <br>You can also do much more - best hover over the row and icons to discover the possibilities. <br><br>You can also do data import/export (one or many), copy items, and do advanced stuff like assigning metadata.</p>'\r\n    }\r\n  };\r\n\r\n  uxHelpText = computed(() => {\r\n    const data = this.items();\r\n    return data?.length === 0 ? this.#helpTextConst.empty : this.#helpTextConst.content;\r\n  })\r\n\r\n  #gridApiSig: WritableSignal<GridApi<ContentItem>> = signal<GridApi<ContentItem>>(null);\r\n\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n  contentType = this.#contentTypesSvc.getType(this.#contentTypeStaticName).value;\r\n\r\n  #itemsRaw = this.#contentItemsSvc.getAllLive(this.#contentTypeStaticName, this.refresh).value;\r\n\r\n  items = computed(() => {\r\n    const data = this.#itemsRaw();\r\n    this.log.aIf('items', { data });\r\n    return data;\r\n  });\r\n\r\n  ngOnInit() {\r\n    this.urlToExportContent();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.fetchItems());\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApiSig.set(params.api);\r\n    this.fetchColumns();\r\n    this.urlToExportContent();\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.refresh.update(v => ++v)\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.#contentItemsSvc.getColumnsPromise(this.#contentTypeStaticName).then(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.#buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.#gridApiSig())\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.#gridApiSig().setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      this.log.a('Will try to apply filter:', filterModel);\r\n      this.#gridApiSig().setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  // This method is called multiple times, to reduce redundancy.\r\n  // It calls the urlSubRoute method from the dialogRouter service\r\n  // and sets a # infront of the url, so angular can differentiate\r\n  // angular routes from ordinary urls.\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  #urlToMetadata(item: ContentItem) {\r\n    return this.#dialogRouter.urlSubRoute(GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.#contentTypeStaticName,\r\n    ));\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n          : EditPrep.editId(item.Id)\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #urlToOpenEditView(item?: ContentItem) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          item == null\r\n            ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n            : EditPrep.editId(item.Id)\r\n        ]\r\n      })}`\r\n    )\r\n  }\r\n\r\n  urlToNewItem(item?: ContentItem) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          item == null\r\n            ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n            : EditPrep.editId(item.Id)\r\n        ],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  urlToExportContent = computedObj('urlToExportContent', () => {\r\n    const value = this.#gridApiSig();\r\n    if (!value)\r\n      return '';\r\n\r\n    // Watch for filter changes, as the IDs are probably different on each change\r\n    this.#filterChanged();\r\n\r\n    const hasFilters = Object.keys(value.getFilterModel()).length > 0;\r\n    const ids: number[] = [];\r\n\r\n    if (hasFilters)\r\n      value.forEachNodeAfterFilterAndSort(n => ids.push(n.data.Id));\r\n\r\n    return this.#urlTo(\r\n      `export/${this.#contentTypeStaticName}${ids.length > 0 ? `/${ids.join(',')}` : ''}`\r\n    );\r\n  });\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.urlToImportContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  urlToImportContent(files?: File[]) {\r\n    // Special, because the /import is at the end of the URL\r\n    return this.#urlTo(\r\n      `${this.#contentTypeStaticName}${files ? `/${files.map(f => f.name).join(',')}` : ''}/import`\r\n    );\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navRelative(['import'], { state: dialogData });\r\n  }\r\n\r\n  urlToImportItem() {\r\n    return this.#urlTo('import');\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.matDialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) return;\r\n\r\n      const form: EditForm = {\r\n        items: [EditPrep.newMetadataFromInfo(this.#contentTypeStaticName, itemFor)],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.#gridApiSig().getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  #buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        ...ColumnDefinitions.IdWithDefaultRenderer,\r\n        cellClass: (p: { data: ContentItem }) => `id-action no-padding no-outline ${p.data._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' '),\r\n        cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentItem>()\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (p) => {\r\n          const item: ContentItem = p.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => ({\r\n          urlTo: (verb, item) => '#' + this.#urlToMetadata(item),\r\n        } satisfies ContentItemsStatusComponent['params']))(),\r\n      },\r\n      {\r\n        ...ColumnDefinitions.TextWidePrimary,\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        cellRenderer: (p: { data: ContentItem, }) => AgGridHelper.cellLink(this.#urlToOpenEditView(p.data), p.data._Title),\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (p: { data: ContentItem }) => `${p.data._Used} / ${p.data._Uses}`,\r\n      },\r\n      {\r\n        ...ColumnDefinitions.ActionsPinnedRight3,\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            urlTo: (verb, item) => '#' + this.#urlToClone(item),\r\n            do: (verb, item) => {\r\n              switch (verb) {\r\n                case 'export': this.#export(item); break;\r\n                case 'delete': this.#delete(item); break;\r\n              }\r\n            }\r\n          } satisfies ContentItemsActionsParams;\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeCatalog.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeCatalog.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  #urlToClone(item: ContentItem) {\r\n    return this.#dialogRouter.urlSubRoute(\r\n      `edit/${convertFormToUrl({\r\n        items: [EditPrep.copy(this.#contentTypeStaticName, item.Id)],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  #export(item: ContentItem) {\r\n    this.#contentExportSvc.exportEntity(item.Id, this.#contentTypeStaticName, true);\r\n  }\r\n\r\n\r\n  // Show initial delete confirmation\r\n  #delete(item: ContentItem) {\r\n    this.snackBar.open('Deleting...');\r\n    this.#confirmAndExecuteDelete(\r\n      item,\r\n      \"Delete Item?\",\r\n      false\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Shows a confirmation dialog and performs delete operation if confirmed\r\n   * @param item The item to delete\r\n   * @param message Confirmation message to display\r\n   * @param forceDelete Whether to force delete\r\n   * @param dialogTitle Optional dialog title\r\n   * @param confirmText Optional confirmation button text\r\n   */\r\n  #confirmAndExecuteDelete(item: ContentItem, message: string, forceDelete: boolean, dialogTitle?: string, confirmText?: string) {\r\n\r\n    const dialogData: ConfirmDeleteDialogData = {\r\n      entityId: item._RepositoryId,\r\n      entityTitle: item._Title,\r\n      message: message,\r\n      title: dialogTitle,\r\n      confirmTranslateKey: confirmText\r\n    };\r\n\r\n    this.matDialog.open(ConfirmDeleteDialogComponent, {\r\n      autoFocus: false,\r\n      data: dialogData,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '400px',\r\n    }).afterClosed().subscribe(isConfirmed => {\r\n      this.snackBar.dismiss();\r\n      if (!isConfirmed) return;\r\n\r\n      // Execute delete operation\r\n      this.snackBar.open('Deleting...');\r\n      this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, forceDelete)\r\n        .subscribe({\r\n          next: () => {\r\n            this.snackBar.open('Deleted', null, { duration: 2000 });\r\n            this.fetchItems();\r\n          },\r\n          error: (err: HttpErrorResponse) => {\r\n            // Only show force delete option if this was a regular delete attempt\r\n            // Open Dialog to confirm force delete\r\n            if (!forceDelete) {\r\n              this.snackBar.dismiss();\r\n              this.#confirmAndExecuteDelete(\r\n                item,\r\n                `${err.error.ExceptionMessage} \\n\\nDo you want to force delete`,\r\n                true,\r\n                'Force Delete',\r\n                'Force'\r\n              );\r\n            }\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { JsonHelpers } from '../shared/helpers/json.helpers';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) return;\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) return;\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = JsonHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import isEqual from 'lodash-es/isEqual';\r\n\r\nexport class RxHelpers {\r\n\r\n  static boolEquals(x: boolean, y: boolean): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static stringEquals(x: string, y: string): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static valueEquals<T>(x: T, y: T): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static objectsEqual<T>(x: T, y: T): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    const obj1 = x as Record<string, any>;\r\n    const obj2 = y as Record<string, any>;\r\n\r\n    const keys1 = Object.keys(obj1);\r\n    const keys2 = Object.keys(obj2);\r\n    if (keys1.length !== keys2.length) return false;\r\n\r\n    const equal = keys1.every(key1 => {\r\n      if (!obj2.hasOwnProperty(key1)) return false;\r\n\r\n      return obj1[key1] === obj2[key1];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  static arraysEqual<T>(x: T[], y: T[]): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    if (x.length !== y.length) return false;\r\n\r\n    const equal = x.every((item, index) => {\r\n      return x[index] === y[index];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  /** used as .filter(distinct), filters array to only have distinct values */\r\n  static distinct<T>(value: T, index: number, array: T[]): boolean {\r\n    return array.indexOf(value) === index;\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { IGNORED_STATUSES } from '../interceptors/handle-errors.interceptor';\r\nimport { ItemInListIdentifier } from '../models/edit-form.model';\r\nimport { webApiEntityRoot } from './entity.service';\r\nimport { HttpServiceBaseSignal } from './http-service-base-signal';\r\n\r\n@Injectable()\r\nexport class EntityEditService extends HttpServiceBaseSignal {\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.appId, force: tryForce.toString() },\r\n      context: new HttpContext().set(IGNORED_STATUSES, [400]),\r\n    });\r\n  }\r\n}\r\n\r\ninterface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\ninterface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n"],"x_google_ignoreList":[]}