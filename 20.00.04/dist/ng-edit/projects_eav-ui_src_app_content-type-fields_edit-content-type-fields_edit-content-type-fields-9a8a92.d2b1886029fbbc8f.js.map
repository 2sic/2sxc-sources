{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_edit-content-type-fields_edit-content-type-fields-9a8a92.d2b1886029fbbc8f.js","mappings":"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","names":["InputTypeCatalog","BooleanDefault","BooleanTristate","CustomDefault","CustomGps","CustomJsonEditor","DateTimeDefault","DefaultSuffix","EmptyDefault","EmptyEnd","EmptyMessage","EntityContentBlocks","EntityDefault","EntityQuery","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","NumberDefault","NumberDropdown","StringDefault","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","StringWysiwyg","EntityPicker","StringPicker","NumberPicker","Unknown","i0","ctx_r1","fieldNameError","staticName_r5","errors","reservedNames","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_8_Conditional_0_Template","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_8_Conditional_1_Template","pattern","dataType_r7","name","label","icon","option_r8","EditContentTypeFieldsComponent_Conditional_6_For_4_For_34_Conditional_2_Template","inputType","_c2","isObsolete","$event","field_r4","_r3","$implicit","StaticName","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_8_Template","ɵ$index_18_r6","$index","setFieldType","value","EditContentTypeFieldsComponent_Conditional_6_For_4_For_20_Template","updateFieldPart","InputType","EditContentTypeFieldsComponent_Conditional_6_For_4_For_34_Template","fieldNamePattern","editMode","touched","Type","findIcon","findLabel","dataTypes","hints","data","tmp_31_0","getInputTypeOption","tmp_32_0","inputTypeOptions","input","_r1","save","EditContentTypeFieldsComponent_Conditional_6_For_4_Template","_forTrack0","dialog","close","fields","ngForm_r9","form","valid","saving","EditContentTypeFieldsComponent","BaseComponent","#typesSvc","#typesFieldsSvc","constructor","route","snackBar","super","this","hostClass","transient","ContentTypesService","ContentTypesFieldsService","calculateTypeIcon","calculateTypeLabel","snapshot","paramMap","get","filteredInputTypeOptions","signal","#inputTypeOptions","getInputTypes","#contentTypeRouteName","getType","#existingFieldsLazy","computed","contentTypeRouteName","untracked","getFieldsLive","NameId","initial","computedObj","length","routeId","editFieldId","parseInt","find","field","Id","#generateNewList","linkedSignal","source","computation","#reservedNamesSystem","getReservedNames","merged","ReservedNamesValidatorDirective","mergeReserved","all","map","i","filter","option","dataType","toLocaleLowerCase","description","obsoleteMessage","disableClose","subscriptions","add","backdropClick","subscribe","_","dirty","confirm","ngAfterViewInit","autoFocusInputField","setTimeout","first","nativeElement","focus","existingFieldCount","Array","keys","k","DataTypeCatalog","String","IsTitle","SortOrder","index","patch","update","f","type","defaultInputName","options","inputName","set","open","doneAndClose","duration","rename","updateInputType","of","pipe","concatMap","catchError","toArray","static","__ngFactoryType__","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_5__","VBU","selectors","viewQuery","rf","ctx","NgForm","EditContentTypeFieldsComponent_Conditional_3_Template","EditContentTypeFieldsComponent_Conditional_4_Template","EditContentTypeFieldsComponent_Conditional_5_Template","EditContentTypeFieldsComponent_Conditional_6_Template","undefined","tmp_3_0","FormsModule","i4","MatFormFieldModule","i5","MatInputModule","i6","MatSelectModule","i7","MatIconModule","i8","MatOptionModule","NgClass","MatDialogActions","MatButtonModule","i9","TranslateModule","FieldHintComponent","styles","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","_angular_core__WEBPACK_IMPORTED_MODULE_0__","inputs","ngContentSelectors","_c0","decls","vars","consts","template","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","NgTemplateOutlet","reduce","accumulator","seed","operate","scanInternals","arguments","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","EJ8","pure","MAT_ICON_DEFAULT_OPTIONS","InjectionToken","MAT_ICON_LOCATION","providedIn","factory","MAT_ICON_LOCATION_FACTORY","_document","inject","DOCUMENT","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","_elementRef","ElementRef","_iconRegistry","MatIconRegistry","_errorHandler","ErrorHandler","_defaultColor","color","_color","inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","_previousFontSetClass","_previousFontIconClass","_svgName","_svgNamespace","_previousPath","_elementsWithExternalReferences","_currentIconFetch","Subscription","EMPTY","ariaHidden","HostAttributeToken","optional","defaults","setAttribute","_splitIconName","iconName","parts","split","Error","ngOnInit","ngAfterViewChecked","cachedElements","size","newPath","_prependPathToReferences","ngOnDestroy","unsubscribe","clear","_usingFontIcon","_setSvgElement","svg","path","_cacheChildrenWithExternalReferences","appendChild","layoutElement","childCount","childNodes","child","nodeType","nodeName","toLowerCase","remove","elem","fontSetClasses","classNameForFontAlias","getDefaultFontSetClass","className","forEach","classList","includes","trim","elements","attrs","element","elementsWithFuncIri","querySelectorAll","Map","elementWithReference","getAttribute","match","attributes","push","rawName","namespace","getNamedSvgIcon","take","err","handleError","message","hostAttrs","hostVars","hostBindings","booleanAttribute","exportAs","encapsulation","changeDetection","imports","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./node_modules/rxjs/dist/esm/internal/operators/reduce.js","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts","./node_modules/@angular/material/fesm2022/icon.mjs"],"sourcesContent":["export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      @if (editMode === undefined) {\r\n        Fields\r\n      }\r\n      @if (editMode === null) {\r\n        Add Fields\r\n      }\r\n      @if (editMode != null) {\r\n        Edit Field\r\n      }\r\n    </div>\r\n  </div>\r\n  @if (fields()?.length) {\r\n    <form #ngForm=\"ngForm\" (ngSubmit)=\"save()\">\r\n      <div class=\"eav-dialog-content\">\r\n        @for (field of fields(); track field.SortOrder; let i = $index) {\r\n          <div class=\"eav-row-container\">\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Name</mat-label>\r\n                <input\r\n                  matInput\r\n                  [pattern]=\"fieldNamePattern\"\r\n                  [appReservedNames]=\"reservedNames()\"\r\n                  [(ngModel)]=\"field.StaticName\"\r\n                  [name]=\"'StaticName' + i\"\r\n                  #staticName=\"ngModel\"\r\n                  [disabled]=\"editMode === 'inputType'\"\r\n                  #autoFocusInputField\r\n                />\r\n              </mat-form-field>\r\n              @if (staticName.touched && staticName.errors) {\r\n                @if (staticName.errors.pattern) {\r\n                  <app-field-hint [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                }\r\n                @if (staticName.errors.reservedNames) {\r\n                  <app-field-hint [isError]=\"true\">\r\n                    {{ staticName.errors.reservedNames }}\r\n                  </app-field-hint>\r\n                }\r\n              }\r\n            </div>\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Data Type</mat-label>\r\n                <mat-select\r\n                  (selectionChange)=\"setFieldType(i, $event.value)\"\r\n                  [ngModel]=\"field.Type\"\r\n                  [name]=\"'Type' + i\"\r\n                  [disabled]=\"editMode != null\"\r\n                  panelClass=\"eav-type-field-type-select\"\r\n                  panelWidth=\"\"\r\n                >\r\n                  <mat-select-trigger>\r\n                    <mat-icon class=\"eav-type-icon\">{{ findIcon(field.Type) }}</mat-icon>\r\n                    <span>{{ findLabel(field.Type) }}</span>\r\n                  </mat-select-trigger>\r\n                  @for (dataType of dataTypes(); track dataType) {\r\n                    <mat-option [value]=\"dataType.name\">\r\n                      {{ dataType.label }}\r\n                      <!-- Icon must come last; Angular will put it first. Otherwise we can't type the name of the label to quickly find an entry -->\r\n                      <mat-icon class=\"eav-type-icon\">{{ dataType.icon }}</mat-icon>\r\n                    </mat-option>\r\n                  }\r\n                </mat-select>\r\n              </mat-form-field>\r\n              <app-field-hint>{{ hints()[i].data }}</app-field-hint>\r\n            </div>\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Input Type</mat-label>\r\n                <mat-select\r\n                  (selectionChange)=\"updateFieldPart(i, { InputType: $event.value })\"\r\n                  [ngModel]=\"field.InputType\"\r\n                  [name]=\"'InputType' + i\"\r\n                  [disabled]=\"editMode === 'name'\"\r\n                  panelClass=\"eav-type-field-input-type-select\"\r\n                  panelWidth=\"\"\r\n                >\r\n                  <mat-select-trigger>\r\n                    <span>{{ getInputTypeOption(field.InputType)?.label }}</span>\r\n                    <mat-icon class=\"eav-input-icon\">{{ getInputTypeOption(field.InputType)?.icon }}</mat-icon>\r\n                  </mat-select-trigger>\r\n                  @for (option of inputTypeOptions()[i]; track option) {\r\n                    <mat-option [value]=\"option.inputType\" [ngClass]=\"{ 'eav-input-obsolete': option.isObsolete }\">\r\n                      {{ option.label }}\r\n                      @if (option.icon) {\r\n                        <!-- span is needed here because <mat-option> by default puts mat-icon to the beginning -->\r\n                        <span>\r\n                          <mat-icon class=\"eav-input-icon\">{{ option.icon }}</mat-icon>\r\n                        </span>\r\n                      }\r\n                    </mat-option>\r\n                  }\r\n                </mat-select>\r\n              </mat-form-field>\r\n              <app-field-hint>{{ hints()[i].input }}</app-field-hint>\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n      <!-- Save / cancel buttons -->\r\n      <mat-dialog-actions>\r\n        <div class=\"spacer\"></div>\r\n        <button mat-raised-button type=\"button\" (click)=\"dialog.close()\">Cancel</button>\r\n        <button mat-raised-button type=\"submit\" class=\"eav-action-button\" [disabled]=\"!ngForm.form.valid || saving()\">Save</button>\r\n      </mat-dialog-actions>\r\n    </form>\r\n  }\r\n</div>\r\n","import { NgClass } from '@angular/common';\r\nimport { AfterViewInit, Component, computed, ElementRef, HostBinding, linkedSignal, QueryList, signal, untracked, ViewChild, ViewChildren } from '@angular/core';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { catchError, concatMap, filter, of, toArray } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { Field, FieldInputTypeOption } from '../../shared/fields/field.model';\r\nimport { InputTypeCatalog } from '../../shared/fields/input-type-catalog';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\nimport { ReservedNamesValidatorDirective } from './reserved-names.directive';\r\n\r\ninterface Hints {\r\n  input: string;\r\n  data: string;\r\n}\r\n\r\ntype FieldSubset = Pick<Field, 'Id' | 'Type' | 'InputType' | 'StaticName' | 'IsTitle' | 'SortOrder'>;\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type-fields',\r\n  templateUrl: './edit-content-type-fields.component.html',\r\n  styleUrls: ['./edit-content-type-fields.component.scss'],\r\n  imports: [\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    ReservedNamesValidatorDirective,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatOptionModule,\r\n    NgClass,\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    TranslateModule,\r\n    FieldHintComponent,\r\n  ]\r\n})\r\nexport class EditContentTypeFieldsComponent extends BaseComponent implements AfterViewInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n  @ViewChildren('autoFocusInputField') autoFocusInputField!: QueryList<ElementRef>;\r\n\r\n  #typesSvc = transient(ContentTypesService);\r\n  #typesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    protected dialog: MatDialogRef<EditContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    super();\r\n    this.dialog.disableClose = true;\r\n    this.subscriptions.add(\r\n      this.dialog.backdropClick().subscribe(_ => {\r\n        if (this.form.dirty) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) return;\r\n        }\r\n        this.dialog.close();\r\n      })\r\n    );\r\n  }\r\n\r\n  // External functions / constants to pass to the view\r\n  fieldNamePattern = fieldNamePattern;\r\n  fieldNameError = fieldNameError;\r\n  findIcon = calculateTypeIcon;\r\n  findLabel = calculateTypeLabel;\r\n\r\n  /** Edit mode is either not set (new fields) or edit-name / edit-inputType */\r\n  editMode = this.route.snapshot.paramMap.get('editMode') as 'name' | 'inputType';\r\n  filteredInputTypeOptions: FieldInputTypeOption[][] = [];\r\n  saving = signal(false);\r\n\r\n  /** Data types such as string, number, ... */\r\n  // dataTypes = this.#typesFieldsSvc.dataTypes();\r\n  dataTypes = this.#typesFieldsSvc.dataTypes().value;\r\n\r\n  #inputTypeOptions = this.#typesFieldsSvc.getInputTypes().value;\r\n\r\n  #contentTypeRouteName = this.#typesSvc.getType(this.route.snapshot.paramMap.get('contentTypeStaticName')).value;\r\n\r\n  #existingFieldsLazy = computed(() => {\r\n    const contentTypeRouteName = this.#contentTypeRouteName();\r\n    const data = untracked(() => {\r\n      return this.#typesFieldsSvc.getFieldsLive(signal(0), contentTypeRouteName?.NameId);\r\n    })\r\n    return data;\r\n  });\r\n\r\n\r\n  fields = (() => {\r\n    // Get the fields once the data is ready\r\n    const initial = computedObj('fields', () => {\r\n      const fields = this.#existingFieldsLazy()();\r\n      if (this.editMode != null) {\r\n        if (fields.length === 0) return [];\r\n        const routeId = this.route.snapshot.paramMap.get('id');\r\n        const editFieldId = routeId ? parseInt(routeId, 10) : null;\r\n        const editField = fields.find(field => field.Id === editFieldId);\r\n        return [editField];\r\n      } else\r\n        return this.#generateNewList(fields.length);\r\n    });\r\n\r\n    return linkedSignal({\r\n      source: initial,\r\n      computation: fields => fields,\r\n    });\r\n  })();\r\n\r\n  // Figure out the reserved names which should not be used as field names\r\n  #reservedNamesSystem = this.#typesFieldsSvc.getReservedNames().value;\r\n\r\n  reservedNames = computedObj('reservedNamesAll', () => {\r\n    // setup watchers\r\n    const fields = this.#existingFieldsLazy()();\r\n    const reservedNames = this.#reservedNamesSystem();\r\n    if (fields.length === 0)\r\n      return reservedNames;\r\n    const merged = ReservedNamesValidatorDirective.mergeReserved(reservedNames, fields);\r\n\r\n    // If we're about to rename, allow the current name to be reused\r\n    if (this.editMode === 'name')\r\n      delete merged[fields[0].StaticName];\r\n    return merged;\r\n  });\r\n\r\n\r\n  ngAfterViewInit(): void {\r\n    // Wait for the inputFields to be available\r\n    // But delay execution to ensure the view is fully rendered\r\n    if (this.autoFocusInputField)\r\n      setTimeout(() => this.autoFocusInputField.first?.nativeElement?.focus(), 250);\r\n  }\r\n\r\n\r\n  // ngOnInit() {\r\n  //   setTimeout(() => {\r\n  //     console.log(this.#contentTypeRouteName()?.NameId)\r\n\r\n  //   }, 110); // Force change detection to ensure the view is ready\r\n  //   this.#typesFieldsSvc.getFieldsPromise(this.#contentTypeRouteName()?.NameId).then(fields => {\r\n  //     console.log('Fields loaded', fields);\r\n  //     this.#existingFieldsLazy.set(fields);\r\n  //   })\r\n  // }\r\n\r\n  #generateNewList(existingFieldCount: number): FieldSubset[] {\r\n    return [...Array(8).keys()].map(k => ({\r\n      Id: 0,\r\n      Type: DataTypeCatalog.String,\r\n      InputType: InputTypeCatalog.StringDefault,\r\n      StaticName: '',\r\n      // first one is title, if there were no fields before\r\n      IsTitle: existingFieldCount === 0 && k === 0,\r\n      SortOrder: existingFieldCount + k + 1,\r\n    } satisfies FieldSubset));\r\n  }\r\n\r\n  /** 2D array of all possible options (by field index) */\r\n  inputTypeOptions = computedObj('inputTypeOptions', () => {\r\n    const all = this.#inputTypeOptions();\r\n    const fields = this.fields();\r\n    return fields.map((field, i) => {\r\n      return all.filter(option => option.dataType === field.Type.toLocaleLowerCase());\r\n    });\r\n  });\r\n\r\n  updateFieldPart(index: number, patch: Partial<Field>) {\r\n    this.fields.update(fields => [...fields].map((f, i) => (i !== index) ? f : ({ ...f, ...patch })));\r\n  }\r\n\r\n  setFieldType(index: number, type: string) {\r\n    // First update the field, as we'll access this again indirectly through other signals\r\n    this.updateFieldPart(index, { Type: type });\r\n\r\n    // Check if it has a xxx-default like string-default in the list\r\n    const defaultInputName = type.toLocaleLowerCase() + InputTypeCatalog.DefaultSuffix;\r\n    const options = this.inputTypeOptions()[index];\r\n    const inputName = options.find(option => option.inputType === defaultInputName)?.inputType\r\n      ?? options[0].inputType;\r\n    this.updateFieldPart(index, { InputType: inputName });\r\n  }\r\n\r\n\r\n  hints = computedObj('hints', () => {\r\n    const fields = this.fields();\r\n    return fields.map((field, i) => {\r\n      const dataType = this.dataTypes().find(dataType => dataType.name === field.Type);\r\n      const inputType = this.#inputTypeOptions().find(option => option.inputType === field.InputType);\r\n      return {\r\n        data: dataType?.description ?? '',\r\n        input: inputType?.isObsolete\r\n          ? `OBSOLETE - ${inputType.obsoleteMessage}`\r\n          : inputType?.description ?? '',\r\n      } satisfies Hints;\r\n    });\r\n  });\r\n\r\n  getInputTypeOption(inputName: string) {\r\n    return this.#inputTypeOptions().find(option => option.inputType === inputName);\r\n  }\r\n\r\n  save() {\r\n    this.saving.set(true);\r\n    this.snackBar.open('Saving...');\r\n\r\n    // Prepare finalize-action to reuse below\r\n    const doneAndClose = () => {\r\n      this.saving.set(false);\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.dialog.close();\r\n    }\r\n\r\n    if (this.editMode != null) {\r\n      const field = this.fields()[0];\r\n      if (this.editMode === 'name') {\r\n        this.#typesFieldsSvc\r\n          .rename(field.Id, this.#contentTypeRouteName().Id, field.StaticName)\r\n          .subscribe(() => doneAndClose());\r\n      } else if (this.editMode === 'inputType') {\r\n        this.#typesFieldsSvc\r\n          .updateInputType(field.Id, field.StaticName, field.InputType)\r\n          .subscribe(() => doneAndClose());\r\n      }\r\n    } else {\r\n      of(...this.fields())\r\n        .pipe(\r\n          filter(field => !!field.StaticName),\r\n          concatMap(field =>\r\n            this.#typesFieldsSvc.add(field, this.#contentTypeRouteName().Id).pipe(catchError(_ => of(null)))\r\n          ),\r\n          toArray(),\r\n        )\r\n        .subscribe(() => doneAndClose());\r\n    }\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n    selector: 'app-field-hint',\r\n    templateUrl: './field-hint.component.html',\r\n    styleUrls: ['./field-hint.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        NgClass,\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { scanInternals } from './scanInternals';\nimport { operate } from '../util/lift';\nexport function reduce(accumulator, seed) {\n    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safeHtml',\r\n})\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, DOCUMENT, ElementRef, ErrorHandler, HostAttributeToken, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { M as MatIconRegistry } from './icon-registry-CwOTJ7YM.mjs';\nexport { d as ICON_REGISTRY_PROVIDER, I as ICON_REGISTRY_PROVIDER_FACTORY, c as getMatIconFailedToSanitizeLiteralError, b as getMatIconFailedToSanitizeUrlError, g as getMatIconNameNotFoundError, a as getMatIconNoHttpProviderError } from './icon-registry-CwOTJ7YM.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/common/http';\nimport '@angular/platform-browser';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/bidi';\n\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fontawesome-v4.github.io/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon {\n    _elementRef = inject(ElementRef);\n    _iconRegistry = inject(MatIconRegistry);\n    _location = inject(MAT_ICON_LOCATION);\n    _errorHandler = inject(ErrorHandler);\n    _defaultColor;\n    /**\n     * Theme color of the icon. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/icon/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color || this._defaultColor;\n    }\n    set color(value) {\n        this._color = value;\n    }\n    _color;\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    inline = false;\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    _svgIcon;\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    _fontSet;\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    _fontIcon;\n    _previousFontSetClass = [];\n    _previousFontIconClass;\n    _svgName;\n    _svgNamespace;\n    /** Keeps track of the current page path. */\n    _previousPath;\n    /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n    _elementsWithExternalReferences;\n    /** Subscription to the current in-progress SVG icon request. */\n    _currentIconFetch = Subscription.EMPTY;\n    constructor() {\n        const ariaHidden = inject(new HostAttributeToken('aria-hidden'), { optional: true });\n        const defaults = inject(MAT_ICON_DEFAULT_OPTIONS, { optional: true });\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this._defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            this._elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIcon, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatIcon, isStandalone: true, selector: \"mat-icon\", inputs: { color: \"color\", inline: [\"inline\", \"inline\", booleanAttribute], svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color, inherit)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color, inherit)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input\n            }], inline: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\nclass MatIconModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatIcon], exports: [MatIcon, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatIcon],\n                    exports: [MatIcon, MatCommonModule],\n                }]\n        }] });\n\nexport { MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry };\n"],"x_google_ignoreList":[5,7]}