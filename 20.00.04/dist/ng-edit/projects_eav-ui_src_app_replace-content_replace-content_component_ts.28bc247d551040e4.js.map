{"version":3,"file":"projects_eav-ui_src_app_replace-content_replace-content_component_ts.28bc247d551040e4.js","mappings":"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","names":["i0","option_r2","label","ReplaceContentComponent","#contentGroupSvc","#dialogRoutes","constructor","dialog","snackBar","this","hostClass","transient","ContentGroupService","DialogRoutingService","#params","convert","getParams","p","guid","part","index","parseInt","isAddMode","signalObj","getQueryParam","filterText","model","#optionsRaw","options","computedObj","filter","toLocaleLowerCase","o","includes","hasSelection","map","#contentTypeName","ngOnInit","#fetchConfig","doOnDialogClosed","editResult","router","getCurrentNavigation","extras","state","cloneId","Object","keys","closeDialog","close","select","event","set","option","value","copySelected","contentGroup","#buildContentGroup","form","items","EditPrep","copy","id","formUrl","convertFormToUrl","navRelative","save","open","saveItem","subscribe","duration","isRefresh","getItemsPromise","then","replaceConfig","entries","Items","itemId","itemName","add","newId","SelectedId","newFilter","find","ContentTypeName","static","__ngFactoryType__","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_4__","VBU","selectors","hostVars","hostBindings","rf","ctx","$event","_r1","ReplaceContentComponent_mat_option_16_Template","auto_r3","length","RouterOutlet","MatFormFieldModule","i3","MatInputModule","i4","MatAutocompleteModule","i5","i6","FormsModule","i7","CdkVirtualScrollViewport","CdkFixedSizeVirtualScroll","CdkVirtualForOf","MatOptionModule","MatButtonModule","i8","MatIconModule","i9","MatDialogActions","styles","ServiceBase","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__","jDH","factory","ɵfac","obj","fn","getWith","logSpecs","route","super","log","classLog","snapshot","url","urlSegments","split","getParam","key","paramMap","get","reduce","acc","queryParamMap","getQueryParams","callback","l","fnIf","childDialogClosed$","data","a","end","doOnDialogClosedWithData","#childDialogClosedWithData","urlSubRoute","params","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","commands","events","pipe","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","tap","snapShot","prev","curr","_angular_core__WEBPACK_IMPORTED_MODULE_8__","_c0","MAT_ICON_DEFAULT_OPTIONS","InjectionToken","MAT_ICON_LOCATION","providedIn","MAT_ICON_LOCATION_FACTORY","_document","inject","DOCUMENT","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","_elementRef","ElementRef","_iconRegistry","MatIconRegistry","_errorHandler","ErrorHandler","_defaultColor","color","_color","inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","_previousFontSetClass","_previousFontIconClass","_svgName","_svgNamespace","_previousPath","_elementsWithExternalReferences","_currentIconFetch","EMPTY","ariaHidden","HostAttributeToken","optional","defaults","nativeElement","setAttribute","_splitIconName","iconName","parts","Error","ngAfterViewChecked","cachedElements","size","newPath","_prependPathToReferences","clear","_usingFontIcon","_setSvgElement","svg","path","_cacheChildrenWithExternalReferences","appendChild","layoutElement","childCount","childNodes","child","nodeType","nodeName","toLowerCase","remove","elem","fontSetClasses","classNameForFontAlias","getDefaultFontSetClass","className","forEach","classList","trim","elements","attrs","element","name","elementsWithFuncIri","querySelectorAll","Map","i","elementWithReference","getAttribute","match","attributes","push","rawName","namespace","getNamedSvgIcon","take","err","handleError","message","type","hostAttrs","inputs","booleanAttribute","exportAs","ngContentSelectors","decls","vars","template","encapsulation","changeDetection","imports","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/replace-content/replace-content.component.html","./projects/eav-ui/src/app/replace-content/replace-content.component.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./projects/core/object-utilities.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./node_modules/@angular/material/fesm2022/icon.mjs"],"sourcesContent":["<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ isAddMode() ? 'Add Existing Item' : 'Replace Content Item' }}</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <router-outlet></router-outlet>\r\n    <p>{{isAddMode()\r\n      ? 'Select a content-item to add to this list.'\r\n      : 'By replacing a content-item you can make other content appear in the slot of the original content.'}}\r\n    </p>\r\n    <div class=\"eav-options-box\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n        <mat-label>Choose item</mat-label>\r\n        <!-- Search field -->\r\n        <input matInput [matAutocomplete]=\"auto\" [(ngModel)]=\"filterText\"> \r\n        <!-- Auto-Complete list based on search -->\r\n        <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"select($event)\"\r\n          [hideSingleSelectionIndicator]=\"true\">\r\n          <cdk-virtual-scroll-viewport itemSize=\"48\" minBufferPx=\"500\" maxBufferPx=\"1000\"\r\n            [style.height.px]=\"options().length < 6 ? options().length * 48 : 240\"\r\n          >\r\n            <mat-option *cdkVirtualFor=\"let option of options()\" [value]=\"option.label\">{{ option.label }}</mat-option>\r\n          </cdk-virtual-scroll-viewport>\r\n        </mat-autocomplete>\r\n      </mat-form-field>\r\n      <!-- Copy Button -->\r\n      <button mat-icon-button tippy=\"Copy\" [disabled]=\"!hasSelection()\" (click)=\"copySelected()\">\r\n        <mat-icon>file_copy</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <!-- Close / Save -->\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!hasSelection()\" (click)=\"save()\">Save</button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\nimport { Component, HostBinding, model, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatAutocompleteModule, MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { convert, transient } from '../../../../core';\r\nimport { ContentGroupAdd } from '../manage-content-list/models/content-group.model';\r\nimport { ContentGroupService } from '../manage-content-list/services/content-group.service';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { computedObj, signalObj } from '../shared/signals/signal.utilities';\r\n\r\n@Component({\r\n    selector: 'app-replace-content',\r\n    templateUrl: './replace-content.component.html',\r\n    styleUrls: ['./replace-content.component.scss'],\r\n    imports: [\r\n        RouterOutlet,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatAutocompleteModule,\r\n        FormsModule,\r\n        CdkVirtualScrollViewport,\r\n        CdkFixedSizeVirtualScroll,\r\n        CdkVirtualForOf,\r\n        MatOptionModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatDialogActions,\r\n    ]\r\n})\r\nexport class ReplaceContentComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  #contentGroupSvc = transient(ContentGroupService);\r\n  #dialogRoutes = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ReplaceContentComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  #params = convert(this.#dialogRoutes.getParams(['guid', 'part', 'index']), p => ({\r\n    guid: p.guid,\r\n    part: p.part,\r\n    index: parseInt(p.index, 10),\r\n  }));\r\n\r\n  #contentTypeName: string;\r\n  \r\n  /** Mode is adding the to-be-selected item, not replace */\r\n  protected isAddMode = signalObj('isAddMode', !!this.#dialogRoutes.getQueryParam('add'));\r\n\r\n  /** The text being searched for */\r\n  filterText = model<string>('');\r\n\r\n  /** The options which could be used */\r\n  #optionsRaw = signalObj<ReplaceOption[]>('options', []);\r\n\r\n  /** The options after filtering */\r\n  options = computedObj<ReplaceOption[]>('filteredOptions', () => {\r\n    const filter = this.filterText().toLocaleLowerCase();\r\n    return this.#optionsRaw()\r\n      .filter(o => o.label.toLocaleLowerCase().includes(filter));\r\n  });\r\n\r\n  /** The system has a selected item, when the text exactly matches the label of an option */\r\n  hasSelection = computedObj<boolean>('isMatch', () => this.options().map(o => o.label).includes(this.filterText()));\r\n\r\n  ngOnInit() {\r\n    this.#fetchConfig(false, null);\r\n\r\n    this.#dialogRoutes.doOnDialogClosed(() => {\r\n      const navigation = this.#dialogRoutes.router.getCurrentNavigation();\r\n      const editResult = navigation.extras?.state;\r\n      const cloneId: number = editResult?.[Object.keys(editResult)[0]];\r\n      this.#fetchConfig(true, cloneId);\r\n    });\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  select(event: MatAutocompleteSelectedEvent) {\r\n    this.filterText.set(event.option.value);\r\n  }\r\n\r\n  copySelected() {\r\n    const contentGroup = this.#buildContentGroup();\r\n    const form: EditForm = {\r\n      items: [EditPrep.copy(this.#contentTypeName, contentGroup.id)],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRoutes.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    const contentGroup = this.#buildContentGroup();\r\n    this.#contentGroupSvc.saveItem(contentGroup).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  #fetchConfig(isRefresh: boolean, cloneId: number) {\r\n\r\n\r\n    const contentGroup = this.#buildContentGroup();\r\n    this.#contentGroupSvc.getItemsPromise(contentGroup).then(replaceConfig => {\r\n      const options = Object.entries(replaceConfig.Items)\r\n        .map(([itemId, itemName]) => ({\r\n          id: parseInt(itemId, 10),\r\n          label: `${itemName} (${itemId})`,\r\n        } satisfies ReplaceOption));\r\n      this.#optionsRaw.set(options);\r\n\r\n      // don't set selected option if dialog should be in add-mode and don't change selected option on refresh unless it's cloneId\r\n      if ((!contentGroup.add && !isRefresh) || cloneId != null) {\r\n        const newId = !isRefresh ? replaceConfig.SelectedId : cloneId;\r\n        const newFilter = this.#optionsRaw().find(o => o.id === newId)?.label || '';\r\n        this.filterText.set(newFilter);\r\n      }\r\n      this.#contentTypeName = replaceConfig.ContentTypeName;\r\n    });\r\n  }\r\n\r\n  #buildContentGroup() {\r\n    const filter = this.filterText();\r\n    const id = this.#optionsRaw().find(o => o.label === filter)?.id ?? null;\r\n\r\n    const contentGroup: ContentGroupAdd = {\r\n      id,\r\n      ...this.#params,\r\n      add: this.isAddMode(),\r\n    };\r\n    return contentGroup;\r\n  }\r\n}\r\n\r\n\r\ninterface ReplaceOption {\r\n  id: number;\r\n  label: string;\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","\r\n/**\r\n * Conversion function to change something to something else, a bit like 'map' but for a single item.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `getWith` function, but has a different name to indicate the usage.\r\n */\r\nexport function convert<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n/**\r\n * Function to do something with an object and return the result.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `convert` function, but has a different name to indicate the usage.\r\n */\r\nexport function getWith<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe((data: unknown) => {\r\n        l.a('Dialog closed', { data });\r\n        return callback();\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  public doOnDialogClosedWithData(callback: (data: any) => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.#childDialogClosedWithData().subscribe(({ state }) => {\r\n        l.a('Dialog closed', { state });\r\n        callback(state);\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n  #childDialogClosedWithData() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      tap(event => {\r\n        const l = this.log.fn(\"childDialogClosed$\", {\r\n          event,\r\n          firstChild: this.route.snapshot.firstChild,\r\n          snapShot: this.route.snapshot,\r\n          state: this.router.getCurrentNavigation()?.extras.state,\r\n        });\r\n        l.a('NavigationEnd', { event });\r\n        l.end();\r\n      }),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => ({\r\n        hasChildNow: !!this.route.snapshot.firstChild,\r\n        state: this.router.getCurrentNavigation()?.extras.state,\r\n      })),\r\n      pairwise(),\r\n      filter(([prev, curr]) => prev.hasChildNow && !curr.hasChildNow),\r\n      map(([prev, curr]) => ({\r\n        hadChildBefore: prev.hasChildNow,\r\n        hasChildNow: curr.hasChildNow,\r\n        state: curr.state\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { InjectionToken, inject, DOCUMENT, ElementRef, ErrorHandler, HostAttributeToken, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { M as MatIconRegistry } from './icon-registry-CwOTJ7YM.mjs';\nexport { d as ICON_REGISTRY_PROVIDER, I as ICON_REGISTRY_PROVIDER_FACTORY, c as getMatIconFailedToSanitizeLiteralError, b as getMatIconFailedToSanitizeUrlError, g as getMatIconNameNotFoundError, a as getMatIconNoHttpProviderError } from './icon-registry-CwOTJ7YM.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/common/http';\nimport '@angular/platform-browser';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/bidi';\n\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fontawesome-v4.github.io/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon {\n    _elementRef = inject(ElementRef);\n    _iconRegistry = inject(MatIconRegistry);\n    _location = inject(MAT_ICON_LOCATION);\n    _errorHandler = inject(ErrorHandler);\n    _defaultColor;\n    /**\n     * Theme color of the icon. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/icon/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color || this._defaultColor;\n    }\n    set color(value) {\n        this._color = value;\n    }\n    _color;\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    inline = false;\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    _svgIcon;\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    _fontSet;\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    _fontIcon;\n    _previousFontSetClass = [];\n    _previousFontIconClass;\n    _svgName;\n    _svgNamespace;\n    /** Keeps track of the current page path. */\n    _previousPath;\n    /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n    _elementsWithExternalReferences;\n    /** Subscription to the current in-progress SVG icon request. */\n    _currentIconFetch = Subscription.EMPTY;\n    constructor() {\n        const ariaHidden = inject(new HostAttributeToken('aria-hidden'), { optional: true });\n        const defaults = inject(MAT_ICON_DEFAULT_OPTIONS, { optional: true });\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this._defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            this._elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIcon, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatIcon, isStandalone: true, selector: \"mat-icon\", inputs: { color: \"color\", inline: [\"inline\", \"inline\", booleanAttribute], svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color, inherit)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color, inherit)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input\n            }], inline: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\nclass MatIconModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatIcon], exports: [MatIcon, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatIcon],\n                    exports: [MatIcon, MatCommonModule],\n                }]\n        }] });\n\nexport { MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry };\n"],"x_google_ignoreList":[5]}