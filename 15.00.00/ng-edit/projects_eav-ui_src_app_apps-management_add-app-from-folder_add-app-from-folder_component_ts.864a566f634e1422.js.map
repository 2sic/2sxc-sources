{"version":3,"mappings":"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","names":["AppNameShowComponent","agInit","params","this","name","value","tooltip","tooltipGetter","data","refresh","selectors","i0","CheckboxCellComponent","onChange","event","currentTarget","checked","ctx","ctx_r5","ctx_r7","AddAppFromFolderComponent","constructor","dialogRef","appsListService","snackBar","featuresService","buildGridOptions","Subject","ngOnInit","pendingApps$","refreshApps$","pipe","startWith","undefined","switchMap","getPendingApps","catchError","of","share","isAddFromFolderEnabled","isEnabled","FeatureNames","ngOnDestroy","complete","closeDialog","close","app","enabled","pendingApps","push","splice","indexOf","install","installing","open","duration","installPendingApps","subscribe","error","next","Object","defaultGridOptions","columnDefs","field","width","cellClass","sortable","cellRenderer","cellRendererParams","isDisabled","flex","sort","filter","pendingApp","ServerFolder","Folder","Version","Description","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","ctx_r1","FeatureTextInfoComponent","BaseFeatureComponent","dialog","viewContainerRef","super","featureSummary","getFeature","featureNameId","ctx_r6","oxw","ctx_r9","ctx_r12","FeatureInfoDialogComponent","dialogData","featureDetailService","feature$","getFeatureDetails","copyToClipboard","text","MAT_DIALOG_DATA","featureOn","openDialog","autoFocus","inputs","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","valueCache","defaultColDef","filterParams","newRowsAction","tooltipShowDelay","tooltipHideDelay","suppressMovableColumns","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange"],"sources":["./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/constants/default-grid-options.constants.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { IdFieldParams } from '../../../shared/components/id-field/id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-app-name-show',\r\n  templateUrl: './app-name-show.component.html',\r\n  styleUrls: ['./app-name-show.component.scss'],\r\n})\r\nexport class AppNameShowComponent implements ICellRendererAngularComp {\r\n  name: string;\r\n  tooltip: string;\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.name = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"name-box\">\r\n  <span>{{ name }}</span>\r\n  <mat-icon class=\"info-icon\" [tippy]=\"tooltip\">info</mat-icon>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { CheckboxCellParams } from './checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-checkbox-cell',\r\n  templateUrl: './checkbox-cell.component.html',\r\n  styleUrls: ['./checkbox-cell.component.scss'],\r\n})\r\nexport class CheckboxCellComponent implements ICellRendererAngularComp {\r\n  params: ICellRendererParams & CheckboxCellParams;\r\n\r\n  agInit(params: ICellRendererParams & CheckboxCellParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  public onChange(event: any) {\r\n    this.params.onChange(this.params.data, event.currentTarget.checked);\r\n  }\r\n}\r\n","<div class=\"checkbox-box\">\r\n  <input class=\"checkbox-input\" type=\"checkbox\" [disabled]=\"params.isDisabled\" [checked]=\"params.value\" (change)=\"onChange($event)\">\r\n</div>\r\n","<ng-container *ngIf=\"{pendingApps: pendingApps$ | async} as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Add App from Folder BETA</div>\r\n  </div>\r\n\r\n  <app-feature-text-info [featureNameId]=\"'AppSyncWithSiteFiles'\"></app-feature-text-info>\r\n  \r\n  <p class=\"dialog-description\">\r\n    Select an app from the apps-folder which has been copied there (or git-cloned) but not installed yet.\r\n  </p>\r\n\r\n  <p class=\"dialog-description\" *ngIf=\"data.pendingApps?.length == 0\">\r\n    No apps found which are not already installed.\r\n  </p>\r\n\r\n  <div class=\"grid-wrapper\" *ngIf=\"data.pendingApps?.length > 0\">\r\n    <ag-grid-angular style=\"height: 200px; width: auto;\" class=\"ag-theme-material\"\r\n      [rowData]=\"data.pendingApps\" [gridOptions]=\"gridOptions\">\r\n    </ag-grid-angular>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button type=\"button\" mat-raised-button (click)=\"closeDialog()\">\r\n      Cancel\r\n    </button>\r\n    <button type=\"button\" mat-raised-button color=\"accent\" [disabled]=\"pendingApps.length === 0 || installing\" (click)=\"install()\">\r\n      Install\r\n    </button>\r\n  </div> \r\n</ng-container>","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { catchError, Observable, of, share, startWith, Subject, switchMap } from \"rxjs\";\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from \"../../shared/constants/default-grid-options.constants\";\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { PendingApp } from \"../models/app.model\";\r\nimport { AppsListService } from \"../services/apps-list.service\";\r\nimport { AppNameShowComponent } from './app-name-show/app-name-show.component';\r\nimport { CheckboxCellComponent } from './checkbox-cell/checkbox-cell.component';\r\nimport { CheckboxCellParams } from './checkbox-cell/checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-add-app-from-folder',\r\n  templateUrl: './add-app-from-folder.component.html',\r\n  styleUrls: ['./add-app-from-folder.component.scss'],\r\n})\r\nexport class AddAppFromFolderComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  pendingApps$: Observable<PendingApp[]>;\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  private refreshApps$ = new Subject<void>();\r\n  pendingApps: PendingApp[] = [];\r\n  installing: boolean = false;\r\n  isAddFromFolderEnabled: boolean;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AddAppFromFolderComponent>,\r\n    private appsListService: AppsListService,\r\n    private snackBar: MatSnackBar,\r\n    private featuresService: FeaturesService,\r\n  ) { }\r\n  \r\n  ngOnInit(): void {\r\n    this.pendingApps$ = this.refreshApps$.pipe(\r\n      startWith(undefined),\r\n      switchMap(() => this.appsListService.getPendingApps().pipe(catchError(() => of(undefined)))),\r\n      share()\r\n    );\r\n    this.isAddFromFolderEnabled = this.featuresService.isEnabled(FeatureNames.AppSyncWithSiteFiles);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refreshApps$.complete();\r\n  } \r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onChange(app: PendingApp, enabled: boolean) {\r\n    if (enabled)\r\n      this.pendingApps.push(app);\r\n    else\r\n      this.pendingApps.splice(this.pendingApps.indexOf(app), 1);\r\n  }\r\n\r\n  install(): void {\r\n    this.installing = true;\r\n    this.snackBar.open('Installing', undefined, { duration: 2000 });\r\n    this.appsListService.installPendingApps(this.pendingApps).subscribe({\r\n      error: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Failed to install app. Please check console for more information', undefined, { duration: 3000 });\r\n      },\r\n      next: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Installed app', undefined, { duration: 2000 });\r\n        this.closeDialog();\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          field: '',\r\n          width: 40,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          cellRenderer: CheckboxCellComponent,\r\n          cellRendererParams: (() => {\r\n            const params: CheckboxCellParams = {\r\n              isDisabled: !this.isAddFromFolderEnabled,\r\n              onChange: (app, enabled) => this.onChange(app, enabled),\r\n            };\r\n            return params;\r\n          }),\r\n        },\r\n        {\r\n          field: 'Name',\r\n          flex: 1,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          sort: 'asc',\r\n          filter: 'agTextColumnFilter',\r\n          cellRenderer: AppNameShowComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<PendingApp> = {\r\n              tooltipGetter: (pendingApp) => `Server folder: ${pendingApp.ServerFolder}\\nFolder: ${pendingApp.Folder}\\nVersion: ${pendingApp.Version}\\nDescription: ${pendingApp.Description}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ]\r\n    }\r\n    return gridOptions;\r\n  }\r\n}","// TODO: @SDV - USE THIS\r\n// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n};\r\n","<div class=\"feature-text-info\" *ngIf=\"!featureOn\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: featureSummary\">\r\n  <mat-icon class=\"feature-text-info-icon\">warning</mat-icon>\r\n  <div class=\"feature-text-info-content\">\r\n    <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n    <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n  </div>\r\n</div>","import { Component, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureSummary } from '../models';\r\nimport { BaseFeatureComponent } from '../shared/base-feature.component';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss']\r\n})\r\nexport class FeatureTextInfoComponent extends BaseFeatureComponent implements OnInit {\r\n  featureSummary: FeatureSummary;\r\n\r\n  constructor(\r\n    dialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    featuresService: FeaturesService\r\n  ) {\r\n    super(dialog, viewContainerRef, featuresService);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.featureSummary = this.featuresService.getFeature(this.featureNameId);\r\n  }\r\n\r\n}\r\n","<div *ngIf=\"(feature$ | async) as feature\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ feature.Name }}</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\" [innerHtml]=\"feature.Description | safeHtml\"></p>\r\n\r\n  <div class=\"info-box\">\r\n    <div class=\"info-row\">\r\n      <div class=\"info-row__label\">{{ \"Features.Status\" | translate }}</div>\r\n      <div class=\"info-row__value\">\r\n        <span>{{ feature.Enabled ? \"Features.Active\" : \"Features.NotActive\" | translate }}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"info-row\" *ngIf=\"feature.NameId as id\">\r\n      <div class=\"info-row__label\">ID</div>\r\n      <div class=\"info-row__value click\">\r\n        <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"info-row\" *ngIf=\"feature.Guid as guid\">\r\n      <div class=\"info-row__label\">GUID</div>\r\n      <div class=\"info-row__value click\">\r\n        <span [tippy]=\"guid\" (click)=\"copyToClipboard(guid)\">{{ guid }}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"info-row\"\r\n      *ngIf=\"(feature.Security.Impact + ': ' + feature.Security.Message) as security\">\r\n      <div class=\"info-row__label\">{{ \"Features.SecurityRating\" | translate }}</div>\r\n      <div class=\"info-row__value\">\r\n        <span>{{ security }}</span>\r\n      </div>\r\n    </div>\r\n    <!-- <div class=\"info-row\" *ngIf=\"feature.libraryLink as link\">\r\n      <div class=\"info-row__label\">More info</div>\r\n      <div class=\"info-row__value click\">\r\n        <a [href]=\"link\"></a>\r\n      </div>\r\n    </div> -->\r\n  </div>\r\n</div>","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss']\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  feature$: Observable<Feature>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) {\r\n    this.feature$ = this.featureDetailService.getFeatureDetails(dialogData);\r\n   }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","import { Directive, Input, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\n\r\n@Directive()\r\nexport class BaseFeatureComponent implements OnInit {\r\n  @Input() featureNameId: string;\r\n\r\n  featureOn: boolean = true;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    protected featuresService: FeaturesService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.featureOn = this.featuresService.isEnabled(this.featureNameId);\r\n  }\r\n\r\n  openDialog() {\r\n    this.dialog.open(FeatureInfoDialogComponent, {\r\n      autoFocus: false,\r\n      data: this.featureNameId,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n  }\r\n}\r\n","import { GridOptions } from '@ag-grid-community/core';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  tooltipHideDelay: 100000,\r\n  suppressMovableColumns: true,\r\n} as const;\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_apps-management_add-app-from-folder_add-app-from-folder_component_ts.864a566f634e1422.js"}