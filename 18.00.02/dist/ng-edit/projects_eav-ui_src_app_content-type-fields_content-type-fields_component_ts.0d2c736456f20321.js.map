{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_content-type-fields_component_ts.0d2c736456f20321.js","mappings":"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","names":["i0","_r2","ctx_r2","do","shareText","shareOrInheritIcon","_r4","_r5","field","EditInfo","DisableRename","DisableDelete","IsTitle","ContentTypeFieldsActionsComponent","agInit","params","this","data","disableEdit","DisableEdit","enablePermissions","InputType","InputTypeCatalog","StringWysiwyg","Type","DataTypeCatalog","Hyperlink","enableMetadata","DisableMetadata","metadataCount","Metadata","Object","keys","filter","key","length","enableImageConfig","imageConfiguration","isRecommended","imgConfigCount","entityId","highlightOrDisabled","toggle","clickToConfigure","ss","SysSettings","Share","Guid","InheritMetadataOf","refresh","verb","static","t","fesm2022_core","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","_r1","ContentTypeFieldsActionsComponent_Conditional_10_Template","ContentTypeFieldsActionsComponent_Conditional_11_Template","ContentTypeFieldsActionsComponent_ng_template_17_Template","Permissions","Count","menu_r6","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","MatMenuModule","i4","TippyDirective","styles","ctx_r1","changeInputType","value","ContentTypeFieldsInputTypeComponent","onChangeInputType","ContentTypeFieldsInputTypeComponent_Conditional_0_Template","ContentTypeFieldsInputTypeComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ContentTypeFieldsSpecialComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent_Conditional_2_Template","setTitle","isTitle","suitableForTitle","ContentTypeFieldsTitleComponent","constructor","InputTypeHelpers","isEmpty","onSetTitle","ContentTypeFieldsTitleComponent_Conditional_1_Template","ContentTypeFieldsTitleComponent_Conditional_2_Template","ReadOnly","ContentTypeFieldsTypeComponent","icon","calculateTypeIcon","SharingOrInheriting","None","Sharing","Inheriting","closeDialog","message","dialogData","_r3","chooseShare","chooseInherit","field_r5","ContentType","Name","field_r6","StaticName","field_r7","row_r9","_r8","$implicit","inheritField","_c0","guid","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_th_3_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_td_4_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_th_6_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_td_7_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_th_9_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_td_10_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_tr_11_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_tr_12_Template","shareableFields","displayedShareableFieldsColumns","ShareOrInheritDialogComponent_Conditional_9_Conditional_1_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_2_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_3_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_Template","state","sharingOrInheriting","tmp_4_0","viewModel$","_r10","save","isSaveDisabled","ShareOrInheritDialogComponent","BaseComponent","dialogRef","dialog","viewContainerRef","changeDetectorRef","super","initialState","shareableFields$","BehaviorSubject","undefined","inject","FeaturesService","fieldShareConfigManagement","isEnabled","FeatureNames","FieldShareConfigManagement","contentTypesFieldsService","transient","ContentTypesFieldsService","ngOnInit","title","getShareableFieldsFor","AttributeId","pipe","map","next","subscriptions","add","share","Id","subscribe","close","inherit","openFeatureDialog","MAT_DIALOG_DATA","ShareOrInheritDialogComponent_Conditional_5_Template","ShareOrInheritDialogComponent_Conditional_7_Template","ShareOrInheritDialogComponent_Conditional_8_Template","ShareOrInheritDialogComponent_Conditional_9_Template","ShareOrInheritDialogComponent_Conditional_10_Template","MatButtonModule","MatCardModule","MatTableModule","i5","NgClass","AsyncPipe","TranslateModule","i6","FeatureIconIndicatorComponent","$event","onRowDragEnter","onRowDragEnd","onRowDragMove","onGridReady","onSortChanged","onFilterChanged","vm_r3","contentType","Label","fields","gridOptions","sortApplied","filterApplied","ContentTypeFieldsComponent","#dialogRouter","snackBar","DialogRoutingService","contentType$","fields$","buildGridOptions","rowDragSuppressed","contentTypeStaticName","snapshot","paramMap","get","contentTypesService","ContentTypesService","fetchFields","doOnDialogClosed","combineLatest","ngOnDestroy","complete","gridApi","api","columnApi","event","setEnableCellTextSelection","setSuppressRowDrag","idArray","reOrder","movingNode","node","overNode","overData","newFields","fromIndex","indexOf","toIndex","moveInArray","clearFocusedCell","arr","element","splice","columnStates","getColumnState","some","sort","suppressRowDrag","filterModel","getFilterModel","fieldsFiltered","shouldSuppress","navRelative","nameCellRenderer","currentField","inputType","endsPreviousGroup","isGroupOpen","isGroupStart","isGroupEnd","callback","retrieveContentType","of","getFields","forkJoin","editFieldMetadata","ConfigTypes","open","duration","form","items","createItemDefinition","formUrl","convertFormToUrl","metadataType","keyForMdLookup","replace","newItemTypeName","existingMd","EditPrep","editId","newMetadata","eavConstants","metadata","attribute","Prefill","rename","delete","confirm","openPermissions","GoToPermissions","getUrlAttribute","openImageConfiguration","imgConfig","Error","itemIdentifier","typeName","openMetadata","url","GoToMetadata","shareOrInherit","autoFocus","width","afterClosed","defaultGridOptions","getRowClass","rowClass","DisableSort","push","columnDefs","rowDrag","cellClass","split","valueGetter","cellRenderer","cellRendererParams","ColumnDefinitions","TextWide","headerName","onCellClicked","headerClass","sortable","substring","flex","minWidth","All","Notes","ActionsPinnedRight5","ContentTypeFieldsComponent_Conditional_0_Template","tmp_0_0","RouterOutlet","MatDialogActions","ToggleDebugDirective","SxcGridModule","encapsulation","TrueFalseComponent","trueIcon","falseIcon","reverse","_angular_core__WEBPACK_IMPORTED_MODULE_0__","AgBoolCellIconsDefault","states","true","tooltip","false","AgBoolIconRenderer_Conditional_1_ng_container_1_Template","ctx_r0","showIcon_r2","clickable","AgBoolIconRenderer","allSettings","settings","d","getUrl","core","AgBoolIconRenderer_Conditional_1_Template","AgBoolIconRenderer_Conditional_2_Template","AgBoolIconRenderer_ng_template_3_Template","cellClassSecAction","actionsRight","pinned","textSortFilter","ActionsPinnedRight1","ActionsPinnedRight3","ActionsPinnedRight4","ActionsPinnedRight6","ActionsPinnedRight7","IconShow","BooleanFilterComponent","IsHidden","Items","Fields","Character","IdWithDefaultRenderer","IdFieldComponent","Boolean","Boolean2","Boolean3","Number","TextWideType","TextWideMin100","TextWideFlex3","TextNarrow","TextWideActionClass","idFieldParamsTooltipGetter","tooltipGetter","filterParams","isFilterActive","doesFilterPass","colDef","column","context","getValue","toString","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","FormsModule","MatRadioModule","id","align","copy","copyToClipboard","_angular_core__WEBPACK_IMPORTED_MODULE_1__","logSpecs","enabled","name","specs","ServiceBase","router","route","log","EavLogger","destroy","getCurrentNavigation","extras","l","fnIf","childDialogClosed$","end","navPath","navigate","commands","relativeTo","navParentFirstChild","parent","firstChild","events","NavigationEnd","startWith","pairwise","hadChildBefore","hasChildNow","_angular_core__WEBPACK_IMPORTED_MODULE_7__","jDH","factory","ɵfac","Subscription","unsubscribe","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","type","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","isAbove","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","inputs","HasDecoratorInputTransform","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.html","./projects/eav-ui/src/app/content-type-fields/share-or-inherit-dialog/share-or-inherit-dialog-models.ts","./projects/eav-ui/src/app/content-type-fields/share-or-inherit-dialog/share-or-inherit-dialog.component.html","./projects/eav-ui/src/app/content-type-fields/share-or-inherit-dialog/share-or-inherit-dialog.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-params.ts","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.component.ts","./projects/eav-ui/src/app/shared/ag-grid/column-definitions.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.html","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["<div class=\"actions-component\">\r\n  <!-- Metadata Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableMetadata) }}\"\r\n    matRipple tippy=\"Metadata\"\r\n    (click)=\"enableMetadata ? do('metadata') : ''\"\r\n  >\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enableMetadata\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n    >local_offer</mat-icon>\r\n  </div>\r\n\r\n  <!-- Image Config Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableImageConfig) }}\"\r\n    matRipple\r\n    tippy=\"{{ enableImageConfig ? 'Image Configuration' : 'no image configuration for this field' }}\"\r\n    (click)=\"enableImageConfig ? do('image') : ''\">\r\n    <mat-icon [matBadge]=\"imgConfigCount\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!imgConfigCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      matBadgeColor=\"accent\" [matBadgeDisabled]=\"!enableImageConfig\"\r\n      >filter_center_focus</mat-icon>\r\n  </div>\r\n\r\n  <!-- Permissions Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enablePermissions) }}\"\r\n    matRipple\r\n    tippy=\"{{ enablePermissions ? 'Permissions' : 'no permissions to configure on this field' }}\"\r\n    (click)=\"enablePermissions ? do('permissions') : ''\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enablePermissions\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      >person</mat-icon>\r\n  </div>\r\n\r\n\r\n  <!-- Share Button -->\r\n  <!--\r\n    TODO: @SDV pls enhance as follows\r\n    ✅ If share is on or InheritMetadata is on, show various icons (already done)\r\n    ✅ If neither is on, it should not show an icon, until mouseover, then it should show the share icon to indicate it can be added\r\n    ❓ If the click should add sharing, open a dialog to configure share\r\n        - if there is no share it should Title \"Field Metadata Sharing\" show with the question \"Do you want to enable sharing to this field?\"\r\n          - if yes, it should call an endpoint on field/share(appId, attributeId, share: true, hide: false) (just add a todo in the code which will call the endpoint)\r\n        - If Share is already enabled, the Title should be \"Field Metadata Sharing\" (same) and content \"Shared as: [field.Guid]\"\r\n        - If it's in inherit mode, different dialog Title \"Field Inherits Metadata\", content \"Inherits from: [field.SysSettings.InheritMetadataOf]\"\r\n          - there is no endpoint to call here, because inherit is configured on create (separate todo)\r\n  -->\r\n  @if (shareOrInheritIcon() != '') {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\">\r\n        {{ shareOrInheritIcon() }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled eav-hover-icon-div\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\" class=\"eav-hover-icon disabled\">\r\n        share\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <!-- More Button -->\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<!-- More Menu -->\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableRename\" (click)=\"do('rename')\">\r\n      <mat-icon>text_fields</mat-icon>\r\n      <span>Rename</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableDelete || field.IsTitle\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { InputTypeCatalog } from '../../shared/fields/input-type-catalog';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsActions, ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-actions',\r\n  templateUrl: './content-type-fields-actions.component.html',\r\n  styleUrls: ['./content-type-fields-actions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    MatMenuModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsActionsComponent implements ICellRendererAngularComp {\r\n  field: Field;\r\n  metadataCount: number;\r\n  enablePermissions: boolean;\r\n  enableMetadata: boolean;\r\n\r\n  enableImageConfig: boolean;\r\n  imgConfigCount: number;\r\n  private params: ICellRendererParams & ContentTypeFieldsActionsParams;\r\n\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsActionsParams): void {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    const disableEdit = this.field.EditInfo.DisableEdit;\r\n\r\n    this.enablePermissions = !disableEdit && (this.field.InputType === InputTypeCatalog.StringWysiwyg || this.field.Type === DataTypeCatalog.Hyperlink);\r\n    this.enableMetadata = !this.field.EditInfo.DisableMetadata;\r\n    this.metadataCount = this.field.Metadata ? Object.keys(this.field.Metadata).filter(key => key !== 'merged').length : 0;\r\n\r\n    this.enableImageConfig = !disableEdit && this.field.imageConfiguration.isRecommended;\r\n    this.imgConfigCount = this.field.imageConfiguration.entityId ? 1 : 0;\r\n  }\r\n\r\n  highlightOrDisabled(toggle: boolean): string {\r\n    return toggle ? 'highlight' : 'disabled';\r\n  }\r\n\r\n  // #region Sharing Info for better icons #SharedFieldDefinition\r\n\r\n  shareText(): string {\r\n    const clickToConfigure = 'click to configure sharing';\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return clickToConfigure;\r\n    return ss.Share\r\n      ? 'shared enabled as ' + this.field.Guid\r\n      : ss.InheritMetadataOf\r\n        ? 'inherits ' + ss.InheritMetadataOf\r\n        : clickToConfigure;\r\n  }\r\n\r\n  shareOrInheritIcon(): string {\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return '';\r\n    return ss.Share\r\n      ? 'share'\r\n      : ss.InheritMetadataOf ? 'adjust' : '';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentTypeFieldsActions): void {\r\n    this.params.do(verb, this.field);\r\n  }\r\n\r\n}\r\n","@if (!field.EditInfo.DisableEdit) {\r\n  <div matRipple class=\"input-component highlight\" (click)=\"changeInputType()\">\r\n    <div class=\"text\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n@if (field.EditInfo.DisableEdit) {\r\n  <div class=\"input-component disabled\">\r\n    <div class=\"text disabled\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-input-type',\r\n  templateUrl: './content-type-fields-input-type.component.html',\r\n  styleUrls: ['./content-type-fields-input-type.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  field: Field;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsInputTypeParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsInputTypeParams): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  changeInputType(): void {\r\n    this.params.onChangeInputType(this.field);\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  @if (hasFormulas) {\r\n    <mat-icon tippy=\"Has Formulas\">functions</mat-icon>\r\n  }\r\n  @if (isEphemeral) {\r\n    <mat-icon tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-special',\r\n  templateUrl: './content-type-fields-special.component.html',\r\n  styleUrls: ['./content-type-fields-special.component.scss'],\r\n  standalone: true,\r\n  imports: [MatIconModule,],\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  @if (!field.EditInfo.ReadOnly)\r\n  {\r\n    <div class=\"eav-grid-action-button highlight {{ isTitle ? '' : suitableForTitle ? 'hover-only' : 'no-button' }}\"\r\n      [attr.disabled]=\"isTitle || !suitableForTitle\"\r\n      matRipple\r\n      tippy=\"Use as title field\"\r\n      (click)=\"setTitle()\"\r\n    >\r\n      <mat-icon>star</mat-icon>\r\n    </div>\r\n  }\r\n  @else\r\n  {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>{{ isTitle ? 'star' : '' }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { InputTypeHelpers } from '../../shared/fields/input-type-helpers';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-title',\r\n  templateUrl: './content-type-fields-title.component.html',\r\n  styleUrls: ['./content-type-fields-title.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n\r\n  isTitle: boolean;\r\n  \r\n  field: Field;\r\n\r\n  suitableForTitle = true;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsTitleParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsTitleParams): void {\r\n    this.params = params;\r\n    this.isTitle = params.value;\r\n    this.field = params.data;\r\n\r\n    this.suitableForTitle = !InputTypeHelpers.isEmpty(this.field.InputType)\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  setTitle(): void {\r\n    if (this.suitableForTitle)\r\n      this.params.onSetTitle(this.field);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-type',\r\n  templateUrl: './content-type-fields-type.component.html',\r\n  styleUrls: ['./content-type-fields-type.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","import { Field } from \"../../shared/fields/field.model\";\r\n\r\nexport interface ShareOrInheritDialogViewModel {\r\n  shareableFields: Field[];\r\n}\r\n\r\nexport enum SharingOrInheriting {\r\n  None,\r\n  Sharing,\r\n  Inheriting\r\n}\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ title | translate }}\r\n    </div>\r\n    @if (initialState != sharingOrInheriting.None) {\r\n      <button mat-icon-button tippy=\"Close dialog\"\r\n        (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    }\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    @if (initialState == sharingOrInheriting.Sharing) {\r\n      <div>{{ message | translate }} {{ dialogData.Guid }}</div>\r\n    }\r\n    @if (initialState == sharingOrInheriting.Inheriting) {\r\n      <div>{{ message| translate }} {{\r\n      dialogData.SysSettings.InheritMetadataOf }}</div>\r\n    }\r\n    @if (initialState == sharingOrInheriting.None) {\r\n      <div>\r\n        @if (state == sharingOrInheriting.None) {\r\n          <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\"\r\n          (click)=\"chooseShare()\">Share</button>\r\n        }\r\n        @if (state == sharingOrInheriting.None) {\r\n          <button mat-raised-button type=\"button\"\r\n          (click)=\"chooseInherit()\">Inherit</button>\r\n        }\r\n        @if (state == sharingOrInheriting.Sharing) {\r\n          <span>This will share the field definition</span>\r\n        }\r\n        @if (state == sharingOrInheriting.Inheriting && viewModel$ | async; as vm) {\r\n          <mat-card class=\"eav-table-div\">\r\n            <table mat-table [dataSource]=\"vm.shareableFields\" class=\"mat-elevation-z8 eav-fields-table\">\r\n              <ng-container matColumnDef=\"contentType\">\r\n                <th mat-header-cell *matHeaderCellDef> <b>Content Type</b> </th>\r\n                <td mat-cell *matCellDef=\"let field\"> {{field.ContentType.Name}} </td>\r\n              </ng-container>\r\n              <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef> <b>Name</b> </th>\r\n                <td mat-cell *matCellDef=\"let field\"> {{field.StaticName}} </td>\r\n              </ng-container>\r\n              <ng-container matColumnDef=\"type\">\r\n                <th mat-header-cell *matHeaderCellDef> <b>Type</b> </th>\r\n                <td mat-cell *matCellDef=\"let field\"> {{field.Type}} </td>\r\n              </ng-container>\r\n              <tr mat-header-row *matHeaderRowDef=\"displayedShareableFieldsColumns\"></tr>\r\n              <tr mat-row *matRowDef=\"let row; columns: displayedShareableFieldsColumns;\"\r\n              [ngClass]=\"{'eav-selected-row': guid === row.Guid}\" (click)=\"inheritField(row)\"></tr>\r\n            </table>\r\n          </mat-card>\r\n        }\r\n      </div>\r\n    }\r\n  </div>\r\n  @if (initialState == sharingOrInheriting.None) {\r\n    <div class=\"eav-dialog-actions-custom\">\r\n      <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\" class=\"eav-dialog-action-button\"\r\n        [disabled]=\"isSaveDisabled\" (click)=\"save()\">\r\n        <div class=\"eav-button-feature\">\r\n          <span>Save</span>\r\n          <app-feature-icon-indicator class=\"eav-button-feature-icon\" [featureNameId]=\"'FieldShareConfigManagement'\"></app-feature-icon-indicator>\r\n        </div>\r\n      </button>\r\n    </div>\r\n  }\r\n</div>\r\n","import { ChangeDetectorRef, Component, Inject, OnDestroy, OnInit, ViewContainerRef, inject } from '@angular/core';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { BehaviorSubject, Observable, combineLatest, map } from 'rxjs';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { ShareOrInheritDialogViewModel, SharingOrInheriting } from './share-or-inherit-dialog-models';\r\nimport { openFeatureDialog } from '../../features/shared/base-feature.component';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { NgClass, AsyncPipe } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { FeatureIconIndicatorComponent } from '../../features/feature-icon-indicator/feature-icon-indicator.component';\r\nimport { transient } from '../../core/transient';\r\n\r\n@Component({\r\n  selector: 'app-share-or-inherit-dialog',\r\n  templateUrl: './share-or-inherit-dialog.component.html',\r\n  styleUrls: ['./share-or-inherit-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    NgClass,\r\n    AsyncPipe,\r\n    TranslateModule,\r\n    FeatureIconIndicatorComponent\r\n  ],\r\n})\r\nexport class ShareOrInheritDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  displayedShareableFieldsColumns: string[] = ['contentType', 'name', 'type'];\r\n  title: string;\r\n  message: string;\r\n  state: SharingOrInheriting = SharingOrInheriting.None;\r\n  initialState: SharingOrInheriting = SharingOrInheriting.None;\r\n  sharingOrInheriting = SharingOrInheriting;\r\n  guid: string = null;\r\n  isSaveDisabled: boolean = true;\r\n\r\n  shareableFields$ = new BehaviorSubject<Field[]>(undefined);\r\n  viewModel$: Observable<ShareOrInheritDialogViewModel>;\r\n\r\n  public features: FeaturesService = inject(FeaturesService);\r\n  private fieldShareConfigManagement = this.features.isEnabled(FeatureNames.FieldShareConfigManagement);\r\n  \r\n  private contentTypesFieldsService = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: Field,\r\n    private dialogRef: MatDialogRef<ShareOrInheritDialogComponent>,\r\n    // All this is just for the feature dialog\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initialState = !this.dialogData.SysSettings || (!this.dialogData.SysSettings.Share && !this.dialogData.SysSettings.InheritMetadataOf)\r\n      ? SharingOrInheriting.None\r\n      : this.dialogData.SysSettings.Share\r\n        ? SharingOrInheriting.Sharing\r\n        : SharingOrInheriting.Inheriting;\r\n    if (this.initialState === SharingOrInheriting.None) {\r\n      this.title = 'SharingOrInheriting.TitleNone';\r\n      const shareableFields$ = this.contentTypesFieldsService.getShareableFieldsFor(this.dialogData.AttributeId);\r\n\r\n      // TODO: @2dg - this should be easy to get rid of #remove-observables\r\n      this.viewModel$ = shareableFields$.pipe(\r\n        map((shareableFields) => {\r\n          this.shareableFields$.next(shareableFields);\r\n          return { shareableFields };\r\n        })\r\n      );\r\n    } else if (this.initialState === SharingOrInheriting.Sharing) {\r\n      this.title = 'SharingOrInheriting.TitleSharing';\r\n      this.message = 'SharingOrInheriting.MessageSharing';\r\n    } else if (this.initialState === SharingOrInheriting.Inheriting) {\r\n      this.title = 'SharingOrInheriting.TitleInheriting';\r\n      this.message = 'SharingOrInheriting.MessageInheriting';\r\n    }\r\n  }\r\n\r\n  chooseShare() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Sharing;\r\n    this.isSaveDisabled = false;\r\n  }\r\n\r\n  chooseInherit() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Inheriting;\r\n    this.isSaveDisabled = true;\r\n  }\r\n\r\n  inheritField(field: Field) {\r\n    this.guid = field.Guid;\r\n    this.isSaveDisabled = false;\r\n  }\r\n\r\n  save() {\r\n    if (!this.fieldShareConfigManagement()) {\r\n      openFeatureDialog(this.dialog, FeatureNames.FieldShareConfigManagement, this.viewContainerRef, this.changeDetectorRef);\r\n      return;\r\n    }\r\n    \r\n    if (this.state == SharingOrInheriting.Sharing) {\r\n      this.subscriptions.add(this.contentTypesFieldsService.share(this.dialogData.Id)\r\n        .subscribe(() => this.dialogRef.close()));\r\n    } else if (this.state == SharingOrInheriting.Inheriting) {\r\n      this.subscriptions.add(this.contentTypesFieldsService.inherit(this.dialogData.Id, this.guid)\r\n        .subscribe(() => this.dialogRef.close()));\r\n    }\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog nav-component-wrapper\" appToggleDebug>\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">\r\n        {{ vm.contentType?.Label || vm.contentType?.Name }} Fields\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"eav-dialog-content nav-component-wrapper\">\r\n      <router-outlet></router-outlet>\r\n      <div class=\"grid-wrapper\">\r\n        <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.fields\" [gridOptions]=\"gridOptions\"\r\n          (rowDragEnter)=\"onRowDragEnter($event)\" (rowDragEnd)=\"onRowDragEnd($event)\" (rowDragMove)=\"onRowDragMove($event)\"\r\n          (gridReady)=\"onGridReady($event)\" (sortChanged)=\"onSortChanged($event)\" (filterChanged)=\"onFilterChanged($event)\"\r\n          [ngClass]=\"{\r\n          'grid-sorted': sortApplied,\r\n          'grid-filtered': filterApplied\r\n          }\">\r\n        </ag-grid-angular>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add fields\"\r\n        [disabled]=\"vm.contentType == null || vm.contentType.EditInfo.ReadOnly\" (click)=\"add()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { ColumnApi, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowClassParams, RowDragEvent, SortChangedEvent } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, Observable, combineLatest, forkJoin, map, of } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { ItemAddIdentifier, EditForm, ItemEditIdentifier, ItemIdentifier, EditPrep } from '../shared/models/edit-form.model';\r\nimport { ContentTypeFieldsActionsComponent } from './content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsInputTypeComponent } from './content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type/content-type-fields-input-type.models';\r\nimport { ContentTypeFieldsSpecialComponent } from './content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title/content-type-fields-title.models';\r\nimport { ContentTypeFieldsTypeComponent } from './content-type-fields-type/content-type-fields-type.component';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { ContentTypesFieldsService } from '../shared/fields/content-types-fields.service';\r\nimport { ShareOrInheritDialogComponent } from './share-or-inherit-dialog/share-or-inherit-dialog.component';\r\nimport { NgClass, AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { transient } from '../core';\r\nimport { InputTypeHelpers } from '../shared/fields/input-type-helpers';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    NgClass,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsComponent implements OnInit, OnDestroy {\r\n\r\n  #dialogRouter = transient(DialogRoutingService);\r\n  \r\n  contentType$ = new BehaviorSubject<ContentType>(undefined);\r\n  fields$ = new BehaviorSubject<Field[]>(undefined);\r\n  gridOptions = this.buildGridOptions();\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n\r\n  private gridApi: GridApi;\r\n  private columnApi: ColumnApi;\r\n  private rowDragSuppressed = false;\r\n  private contentTypeStaticName = this.#dialogRouter.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  viewModel$: Observable<ContentTypeFieldsViewModel>;\r\n\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private contentTypesFieldsService = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchFields();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.fetchFields());\r\n    // TODO: @2dg - this should be easy to get rid of #remove-observables\r\n    this.viewModel$ = combineLatest([\r\n      this.contentType$, this.fields$\r\n    ]).pipe(\r\n      map(([contentType, fields]) => ({ contentType, fields }))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.fields$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n    this.columnApi = params.columnApi;\r\n  }\r\n\r\n  onRowDragEnter(event: RowDragEvent) {\r\n    this.gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(event: RowDragEvent) {\r\n    this.gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields$.value.map(field => field.Id);\r\n    this.contentTypesFieldsService.reOrder(idArray, this.contentType$.value).subscribe(() => {\r\n      this.fetchFields(() => {\r\n        this.gridApi.setEnableCellTextSelection(true);\r\n        this.gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const movingNode = event.node;\r\n    const overNode = event.overNode;\r\n    if (!overNode) return;\r\n    const rowNeedsToMove = movingNode !== overNode;\r\n    if (rowNeedsToMove) {\r\n      const movingData: Field = movingNode.data;\r\n      const overData: Field = overNode.data;\r\n      const newFields = [...this.fields$.value];\r\n      const fromIndex = newFields.indexOf(movingData);\r\n      const toIndex = newFields.indexOf(overData);\r\n      this.moveInArray(newFields, fromIndex, toIndex);\r\n      this.fields$.next(newFields);\r\n      this.gridApi.clearFocusedCell();\r\n    }\r\n  }\r\n\r\n  private moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n  }\r\n\r\n  onSortChanged(params: SortChangedEvent) {\r\n    const columnStates = this.columnApi.getColumnState();\r\n    this.sortApplied = columnStates.some(state => state.sort != null);\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(params: FilterChangedEvent) {\r\n    const filterModel = this.gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  private suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = true;\r\n      this.gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = false;\r\n      this.gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.#dialogRouter.navRelative([`add/${this.contentTypeStaticName}`]);\r\n  }\r\n\r\n  private nameCellRenderer(params: ICellRendererParams) {\r\n    const currentField: Field = params.data;\r\n    const inputType = currentField.InputType;\r\n\r\n    if (InputTypeHelpers.endsPreviousGroup(inputType))\r\n      return params.value;\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields$.value) {\r\n      if (InputTypeHelpers.isGroupStart(inputType)) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (InputTypeHelpers.isGroupEnd(inputType)) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === currentField.StaticName)\r\n        break;\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  private fetchFields(callback?: () => void) {\r\n    const contentType$ = this.contentType$.value == null\r\n      ? this.contentTypesService.retrieveContentType(this.contentTypeStaticName)\r\n      : of(this.contentType$.value);\r\n    const fields$ = this.contentTypesFieldsService.getFields(this.contentTypeStaticName);\r\n    forkJoin([contentType$, fields$]).subscribe(([contentType, fields]) => {\r\n      this.contentType$.next(contentType);\r\n      this.fields$.next(fields);\r\n      if (callback != null)\r\n        callback();\r\n    });\r\n  }\r\n\r\n  private editFieldMetadata(field: Field) {\r\n    // 2023-11-10 @2dm #ConfigTypesFromBackend\r\n    // https://github.com/2sic/2sxc/issues/3205\r\n    // Keep old code in till 2024-01 for ref in case something breaks\r\n    // console.warn('2dm - editFieldMetadata', field);\r\n    // console.warn('2dm - editFieldMetadata', field.ConfigTypes);\r\n    // const form: EditForm = {\r\n    //   items: [\r\n    //     this.createItemDefinition(field, 'All'),\r\n    //     this.createItemDefinition(field, field.Type),\r\n    //     this.createItemDefinition(field, field.InputType),\r\n    //   ],\r\n    // };\r\n\r\n    // If this field is inherited and therefor has no own metadata, show a snackbar and exit\r\n    if (field.SysSettings?.InheritMetadataOf) {\r\n      if (!Object.keys(field.ConfigTypes).length) {\r\n        this.snackBar.open('This field inherits all configuration so there is nothing to edit.', null, { duration: 3000 });\r\n        return;\r\n      }\r\n      this.snackBar.open('This field inherits some configuration. Edit will only show configuration which is not inherited.', null, { duration: 5000 });\r\n    }\r\n\r\n    // if this field is shared/can-be-inherited, show warning so the user is aware of it\r\n    if (field.SysSettings?.Share)\r\n      this.snackBar.open('This field is shared, so changing it will affect all other fields inheriting it.', null, { duration: 5000 });\r\n\r\n    const form: EditForm = {\r\n      items: Object.keys(field.ConfigTypes).map((t) => this.createItemDefinition(field, t))\r\n    };\r\n    // console.warn('2dm - editFieldMetadata', field.ConfigTypes, form);\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  private createItemDefinition(field: Field, metadataType: string): ItemAddIdentifier | ItemEditIdentifier {\r\n    // The keys could start with an @ but may not, and in some cases we need it, others we don't\r\n    const keyForMdLookup = metadataType.replace('@', '');\r\n    const newItemTypeName = ('@' + metadataType).replace('@@', '@');\r\n\r\n    // Is an item of this type already loaded? Then just edit it, otherwise request new as Metadata\r\n    const existingMd = field.Metadata[keyForMdLookup];\r\n    return existingMd != null\r\n      ? EditPrep.editId(existingMd.Id) // if defined, return the entity-number to edit\r\n      : {\r\n        ...EditPrep.newMetadata(field.Id, newItemTypeName, eavConstants.metadata.attribute),\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n\r\n  private setTitle(field: Field) {\r\n    this.snackBar.open('Setting title...');\r\n    this.contentTypesFieldsService.setTitle(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private changeInputType(field: Field) {\r\n    this.#dialogRouter.navRelative([`update/${this.contentTypeStaticName}/${field.Id}/inputType`]);\r\n  }\r\n\r\n  private rename(field: Field) {\r\n    this.#dialogRouter.navRelative([`update/${this.contentTypeStaticName}/${field.Id}/name`]);\r\n  }\r\n\r\n  private delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.contentTypesFieldsService.delete(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private openPermissions(field: Field) {\r\n    this.#dialogRouter.navRelative([GoToPermissions.getUrlAttribute(field.Id)]);\r\n  }\r\n\r\n  private openImageConfiguration(field: Field) {\r\n    const imgConfig = field.imageConfiguration;\r\n    if (imgConfig?.isRecommended != true)\r\n      throw new Error('This field does not expect to have an image configuration');\r\n\r\n    const itemIdentifier: ItemIdentifier = imgConfig.entityId\r\n      ? EditPrep.editId(imgConfig.entityId)\r\n      : EditPrep.newMetadata(field.Id, imgConfig.typeName, eavConstants.metadata.attribute);\r\n    const formUrl = convertFormToUrl({ items: [itemIdentifier] });\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  private openMetadata(field: Field) {\r\n    const url = GoToMetadata.getUrlAttribute(\r\n      field.Id,\r\n      `Metadata for Field: ${field.StaticName} (${field.Id})`,\r\n    );\r\n    this.#dialogRouter.navRelative([url]);\r\n  }\r\n\r\n  private shareOrInherit(field: Field) {\r\n    const shareOrInheritDialogRef = this.dialog.open(ShareOrInheritDialogComponent, {\r\n      autoFocus: false,\r\n      width: '800px',\r\n      data: field,\r\n    });\r\n    shareOrInheritDialogRef.afterClosed().subscribe(() => this.fetchFields());\r\n  }\r\n\r\n  //#region Grid Options\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      getRowClass(params: RowClassParams) {\r\n        const field: Field = params.data;\r\n        const rowClass: string[] = [];\r\n        if (field.EditInfo.DisableSort) { rowClass.push('disable-row-drag'); }\r\n        if (InputTypeHelpers.isGroupStart(field.InputType)) { rowClass.push('group-start-row'); }\r\n        if (InputTypeHelpers.isGroupEnd(field.InputType)) { rowClass.push('group-end-row'); }\r\n        return rowClass;\r\n      },\r\n      columnDefs: [\r\n        {\r\n          rowDrag: true,\r\n          width: 18,\r\n          cellClass: 'no-select no-padding no-outline'.split(' '),\r\n        },\r\n        {\r\n          field: 'Title',\r\n          width: 42,\r\n          cellClass: 'secondary-action no-padding no-outline'.split(' '),\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.IsTitle;\r\n          },\r\n          cellRenderer: ContentTypeFieldsTitleComponent,\r\n          cellRendererParams: (() => {\r\n            const params: ContentTypeFieldsTitleParams = {\r\n              onSetTitle: (field) => this.setTitle(field),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          headerName: 'Name',\r\n          field: 'StaticName',\r\n          onCellClicked: (params) => {\r\n            const field: Field = params.data;\r\n            this.editFieldMetadata(field);\r\n          },\r\n          cellRenderer: (params: ICellRendererParams) => this.nameCellRenderer(params),\r\n        },\r\n        {\r\n          field: 'Type',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.Type;\r\n          },\r\n          cellRenderer: ContentTypeFieldsTypeComponent,\r\n        },\r\n        {\r\n          headerName: 'Input',\r\n          field: 'InputType',\r\n          width: 160,\r\n          cellClass: (params) => {\r\n            const field: Field = params.data;\r\n            return `${field.EditInfo.DisableEdit ? 'no-outline no-padding' : 'secondary-action no-padding'}`.split(' ');\r\n          },\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            const inputType = field.InputType.substring(field.InputType.indexOf('-') + 1);\r\n            return inputType;\r\n          },\r\n          cellRenderer: ContentTypeFieldsInputTypeComponent,\r\n          cellRendererParams: (() => {\r\n            const params: ContentTypeFieldsInputTypeParams = {\r\n              onChangeInputType: (field) => this.changeInputType(field),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          field: 'Label',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.Metadata?.All?.Name;\r\n          },\r\n        },\r\n        {\r\n          field: 'Special',\r\n          width: 66,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          cellRenderer: ContentTypeFieldsSpecialComponent,\r\n        },\r\n        {\r\n          field: 'Notes',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.Metadata?.All?.Notes;\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight5,\r\n          cellRenderer: ContentTypeFieldsActionsComponent,\r\n          cellRendererParams: (() => ({\r\n            do: (verb, field) => {\r\n              switch (verb) {\r\n                case 'rename': this.rename(field); break;\r\n                case 'delete': this.delete(field); break;\r\n                case 'permissions': this.openPermissions(field); break;\r\n                case 'metadata': this.openMetadata(field); break;\r\n                case 'shareOrInherit': this.shareOrInherit(field); break;\r\n                case 'image': this.openImageConfiguration(field); break;\r\n              }\r\n            }\r\n          } satisfies ContentTypeFieldsActionsParams))(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n\r\ninterface ContentTypeFieldsViewModel {\r\n  contentType: ContentType;\r\n  fields: Field[];\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { TrueFalseParams } from './true-false.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-rest-api-true-false',\r\n  templateUrl: './true-false.component.html',\r\n  standalone: true,\r\n  imports: [MatIconModule],\r\n})\r\nexport class TrueFalseComponent implements ICellRendererAngularComp {\r\n  icon: string;\r\n\r\n  private trueIcon = 'check_circle';\r\n  private falseIcon = 'circle';\r\n\r\n  agInit(params: ICellRendererParams & TrueFalseParams): void {\r\n    let value: boolean = params.value;\r\n    if (params.reverse) { value = !value; }\r\n    if (params.trueIcon) { this.trueIcon = params.trueIcon; }\r\n    if (params.falseIcon) { this.falseIcon = params.falseIcon; }\r\n    this.icon = value ? this.trueIcon : this.falseIcon;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","export interface AgBoolCellIconSetting {\r\n  clickable?: boolean;\r\n  tooltip: string;\r\n  icon: string;\r\n  url?: string;\r\n  getUrl?: (data: any) => string;\r\n}\r\n\r\nexport interface AgBoolCellIconSettings {\r\n  states: Record<'true' | 'false' | string, AgBoolCellIconSetting>;\r\n}\r\n\r\nexport interface AgBoolCellIconsParams<T = any> {\r\n  settings(data: T): AgBoolCellIconSettings;\r\n}\r\n\r\nexport const AgBoolCellIconsDefault: AgBoolCellIconSettings = {\r\n  states: {\r\n    true: {\r\n      tooltip: 'true/on',\r\n      icon: 'radio_button_checked',\r\n    },\r\n    false: {\r\n      tooltip: 'false/off',\r\n      icon: 'radio_button_unchecked',\r\n    }\r\n  }\r\n};","<div class=\"icon-container\">\r\n  @if (data.url) {\r\n    <a [href]=\"data.url\" target=\"_blank\">\r\n      <ng-container *ngTemplateOutlet=\"showIcon\"></ng-container>\r\n    </a>\r\n  } @else {\r\n    <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n      <mat-icon>{{ data.icon }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n\r\n<ng-template #showIcon>\r\n  <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n    <mat-icon>{{ data.icon }}</mat-icon>\r\n  </div>\r\n</ng-template>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { AgBoolCellIconSetting, AgBoolCellIconSettings, AgBoolCellIconsDefault, AgBoolCellIconsParams } from './ag-bool-icon-params';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-ag-bool-icon-renderer',\r\n  templateUrl: './ag-bool-icon-renderer.html',\r\n  standalone: true,\r\n  imports: [\r\n    TippyDirective,\r\n    MatIconModule,\r\n    NgClass,\r\n  ],\r\n})\r\nexport class AgBoolIconRenderer implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  private allSettings: AgBoolCellIconSettings;\r\n\r\n  data: AgBoolCellIconSetting; // | { link: boolean  };\r\n\r\n  agInit(params: ICellRendererParams & AgBoolCellIconsParams): void {\r\n    this.value = params.value;\r\n\r\n    this.allSettings = params.settings?.(params.data) ?? AgBoolCellIconsDefault;\r\n    const d = this.allSettings.states[this.value ? 'true' : 'false'];\r\n    this.data = {\r\n      ...d,\r\n      url: d.url ?? d.getUrl?.(params.data),\r\n      // link: !!(d.url || d.getUrl),\r\n    };\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { ColDef } from '@ag-grid-community/core';\r\nimport { BooleanFilterComponent } from '../components/boolean-filter/boolean-filter.component';\r\nimport { App } from '../../apps-management/models/app.model';\r\nimport { AgBoolIconRenderer } from './apps-list-show/ag-bool-icon-renderer.component';\r\nimport { TrueFalseComponent } from '../../dev-rest/api/true-false/true-false.component';\r\nimport { TrueFalseParams } from '../../dev-rest/api/true-false/true-false.models';\r\nimport { IdFieldComponent } from '../components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../components/id-field/id-field.models';\r\n\r\nconst cellClassSecAction = 'secondary-action no-padding'.split(' ');\r\n\r\nconst actionsRight: ColDef = {\r\n  cellClass: cellClassSecAction,\r\n  pinned: 'right',\r\n};\r\n\r\nconst textSortFilter: ColDef = {\r\n  sortable: true,\r\n  filter: 'agTextColumnFilter',\r\n};\r\n\r\nexport class ColumnDefinitions {\r\n  static ActionsPinnedRight1: ColDef = {\r\n    width: 42,\r\n    ...actionsRight,\r\n  };\r\n\r\n  static ActionsPinnedRight3: ColDef = {\r\n    width: 122,\r\n    ...actionsRight,\r\n  };\r\n\r\n  static ActionsPinnedRight4: ColDef = {\r\n    width: 162,\r\n    ...actionsRight,\r\n  };\r\n\r\n  static ActionsPinnedRight5: ColDef = {\r\n    width: 202,\r\n    ...actionsRight,\r\n  };\r\n\r\n  // TODO: the name here is wrong - 6 indicates 6 buttons, but the size wouldn't allow this\r\n  static ActionsPinnedRight6: ColDef = {\r\n    width: 82,\r\n    ...actionsRight,\r\n  };\r\n\r\n  // TODO: the name here is wrong - 7 indicates 6 buttons, but the size wouldn't allow this\r\n  static ActionsPinnedRight7: ColDef = {\r\n    width: 62,\r\n    cellClass: cellClassSecAction + ' no-outline',\r\n    pinned: 'right',\r\n  };\r\n\r\n  static IconShow: ColDef = {\r\n    headerName: 'Show',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'icons no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: BooleanFilterComponent,\r\n    valueGetter: (params) => {\r\n      const app: App = params.data;\r\n      return !app.IsHidden;\r\n    },\r\n    cellRenderer: AgBoolIconRenderer,\r\n  };\r\n\r\n  static Items: ColDef = {\r\n    width: 102,\r\n    headerClass: 'dense',\r\n    cellClass: cellClassSecAction,\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static Fields: ColDef = {\r\n    width: 94,\r\n    headerClass: 'dense',\r\n    cellClass: cellClassSecAction,\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  /**\r\n   * Very narrow columns, typically just showing 1 character\r\n   */\r\n  static Character: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'no-outline',\r\n    ...textSortFilter,\r\n  };\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Id: ColDef = {\r\n    headerName: 'ID',\r\n    field: 'Id',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'id-action no-padding no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static IdWithDefaultRenderer: ColDef = {\r\n    ...ColumnDefinitions.Id,\r\n    cellRenderer: IdFieldComponent,\r\n  }\r\n\r\n  static Boolean: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    sortable: true,\r\n  };\r\n\r\n  static Boolean2: ColDef = {\r\n    width: 100,\r\n    sortable: true,\r\n    cellClass: 'no-outline',\r\n    filter: BooleanFilterComponent,\r\n  };\r\n\r\n  static Boolean3: ColDef = {\r\n    headerClass: 'dense',\r\n    width: 80,\r\n    cellClass: 'no-outline',\r\n    cellRenderer: TrueFalseComponent,\r\n    cellRendererParams: (() => ({\r\n      reverse: false,\r\n    } satisfies TrueFalseParams))(),\r\n  }\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Number: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextWideType: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action highlight'.split(' '),\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextWide: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextWideMin100: ColDef = {\r\n    flex: 1,\r\n    minWidth: 100,\r\n    ...textSortFilter,\r\n  }\r\n\r\n  static TextWideFlex3: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextNarrow: ColDef = {\r\n    flex: 1,\r\n    minWidth: 150,\r\n    cellClass: 'no-outline',\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextWideActionClass: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action no-padding no-outline'.split(' '),\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static idFieldParamsTooltipGetter<T extends { Id: string | number, Guid?: string }>(key?: keyof T): IdFieldParams<T> {\r\n    const objWithTooltipGetter: IdFieldParams<T> = {\r\n      tooltipGetter: (contentType: T) => `ID: ${contentType.Id}\\nGUID: ${contentType[key || \"Guid\"]}`,\r\n    };\r\n    return objWithTooltipGetter;\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n  ]\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy(): void {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>","import { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  enabled: false,\r\n  name: 'DialogRoutingService',\r\n  specs: {\r\n    doOnDialogClosed: true,\r\n  }\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase implements OnDestroy {\r\n\r\n  log = new EavLogger(logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.destroy();\r\n  }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => { callback(); })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public navParentFirstChild(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route.parent.firstChild });\r\n  }\r\n  \r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/** Base class for services, withOUT logging */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  // todo use this instead\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n  // Note: we can't do this, because angular compiler complains about wanting to implement OnDestroy\r\n  // and if we do that, it will want a decorator, which we can't have here.\r\n  // ngOnDestroy() {\r\n  //   this.destroy();\r\n  // }\r\n\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[27]}