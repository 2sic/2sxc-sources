{"version":3,"file":"projects_eav-ui_src_app_app-administration_data-rest-api_data-rest-api_component_ts.9e13a2d9100e6902.js","mappings":"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","names":["i0","contentType_r1","StaticName","Label","DataRestApiComponent_Conditional_5_For_1_Template","ctx","sort","DataRestApiComponent","#contentTypesSvc","#dialogRouter","constructor","fb","this","transient","ContentTypesService","DialogRoutingService","contentTypes$","BehaviorSubject","undefined","contentTypes","ngOnInit","fetchData","contentTypeForm","group","contentType","retrieveContentTypes","subscribe","next","urlSegments","url","split","urlStaticName","length","selectedContentType","find","get","setValue","openRestApi","event","navParentFirstChild","static","t","i1","_angular_core__WEBPACK_IMPORTED_MODULE_3__","VBU","selectors","standalone","features","decls","vars","consts","template","rf","$event","DataRestApiComponent_Conditional_5_Template","tmp_1_0","MatSelectModule","i2","i3","i4","MatButtonModule","MatCardModule","MatIconModule","ReactiveFormsModule","AsyncPipe","RouterOutlet","SxcGridModule","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","http","context","dnnContext","getAll","$2sxc","apiUrl","webApiEntityList","params","appId","toString","importQuery","file","from","toBase64","pipe","switchMap","fileBase64","post","AppId","ContentBase64","map","success","Success","Messages","clonePipeline","id","Id","delete","_angular_core__WEBPACK_IMPORTED_MODULE_6__","jDH","factory","Éµfac","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","import","formData","FormData","append","zoneId","export","window","open","getPolymorphism","getUsage","guid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","readAsText"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/data-rest-api/data-rest-api.component.html","./projects/eav-ui/src/app/app-administration/data-rest-api/data-rest-api.component.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts"],"sourcesContent":["<form [formGroup]=\"contentTypeForm\">\r\n  <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n    <mat-label>Content-Type</mat-label>\r\n    <mat-select formControlName=\"contentType\" (valueChange)=\"openRestApi($event)\">\r\n      @if (contentTypes$ | async; as contentTypes) {\r\n        @for (contentType of contentTypes.sort() ; track contentType) {\r\n        <mat-option [value]=\"contentType.StaticName\" >\r\n          {{ contentType.Label }}\r\n        </mat-option>\r\n        }\r\n      }\r\n    </mat-select>\r\n  </mat-form-field>\r\n</form>\r\n\r\n<router-outlet></router-outlet>\r\n","import { Component } from '@angular/core';\r\nimport { ContentTypesService } from '../services';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ContentType } from '../models';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { DevRestDataComponent } from '../../dev-rest/data/data.component';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../core';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\n\r\n@Component({\r\n  selector: 'app-data-rest-api',\r\n  standalone: true,\r\n  imports: [\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n    AsyncPipe,\r\n    DevRestDataComponent,\r\n    RouterOutlet,\r\n    SxcGridModule,\r\n  ],\r\n  templateUrl: './data-rest-api.component.html',\r\n  styleUrl: './data-rest-api.component.scss'\r\n})\r\nexport class DataRestApiComponent {\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  contentTypes$ = new BehaviorSubject<ContentType[]>(undefined);\r\n  contentTypes: ContentType[] = [];\r\n\r\n  contentTypeForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchData();\r\n    this.contentTypeForm = this.fb.group({\r\n      contentType: ['']\r\n    });\r\n  }\r\n\r\n  fetchData() {\r\n    this.#contentTypesSvc.retrieveContentTypes(\"Default\").subscribe(\r\n      (contentTypes: ContentType[]) => {\r\n        this.contentTypes$.next(contentTypes);\r\n        // When Route are reload and have some StaticName in the Route\r\n        const urlSegments = this.#dialogRouter.url.split('/');\r\n        const urlStaticName = urlSegments[urlSegments.length - 1]\r\n\r\n        const selectedContentType = contentTypes.find(contentType => contentType.StaticName === urlStaticName);\r\n        if (selectedContentType)\r\n          this.contentTypeForm.get('contentType').setValue(selectedContentType.StaticName);\r\n      }\r\n    );\r\n  }\r\n\r\n  openRestApi(event: string): void {\r\n    if (!event) return;\r\n    this.#dialogRouter.navParentFirstChild([`${event}`]);\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"x_google_ignoreList":[]}