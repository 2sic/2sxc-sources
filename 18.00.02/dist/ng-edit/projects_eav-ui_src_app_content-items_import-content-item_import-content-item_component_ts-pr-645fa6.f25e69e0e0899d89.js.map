{"version":3,"file":"projects_eav-ui_src_app_content-items_import-content-item_import-content-item_component_ts-pr-645fa6.f25e69e0e0899d89.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","staticName","this","http","get","apiUrl","params","appId","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","Éµfac","ImportContentItemComponent","constructor","dialogData","uploadType","UploadTypes","ContentItem","contentItemsService","transient","ContentItemsService","title","description","allowedFileTypes","upload$","importItem","i0","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_3__","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","FileUploadDialogComponent","webApiFieldsRoot","webApiFieldsAll","webApiFieldsGetShared","ContentTypesFieldsService","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","contentTypeStaticName","fields","fld","Metadata","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","toString","addInheritedField","targetContentTypeId","sourceContentTypeStaticName","sourceFieldGuid","newName","AppId","ContentTypeId","SourceType","SourceField","share","inherit","inheritMetadataOf","reOrder","idArray","Id","order","JSON","stringify","setTitle","item","rename","fieldId","IsTitle","Error","add","newField","Index","SortOrder","updateInputType","id","field","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText","logSpecs","all","getEntities","getAvailableEntities","webApiEntityRoot","webApiEntityList","EntityService","dnnContext","log","classLog","queryService","QueryService","getEntities$","fnIf","filter","p","switchMap","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","data","Default","entityId","force","parentId","parentField","parent","$2sxc","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_7__","inject","DnnContext","HttpClient","context","Context","_angular_core__WEBPACK_IMPORTED_MODULE_1__","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","Guids","join"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/content-items/import-content-item/import-content-item.component.ts","./projects/eav-ui/src/app/content-items/import-content-item/import-content-item.component.html","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/http-service-base.ts","./projects/eav-ui/src/app/shared/services/query.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FileUploadDialogComponent, FileUploadDialogData, UploadTypes } from '../../shared/components/file-upload-dialog';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { transient } from '../../core';\r\n\r\n@Component({\r\n  selector: 'app-import-content-item',\r\n  templateUrl: './import-content-item.component.html',\r\n  styleUrls: ['./import-content-item.component.scss'],\r\n  standalone: true,\r\n  imports: [FileUploadDialogComponent,],\r\n})\r\nexport class ImportContentItemComponent {\r\n\r\n  uploadType = UploadTypes.ContentItem;\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) dialogData: FileUploadDialogData) {\r\n    dialogData.title ??= `Import Single Item`;\r\n    dialogData.description ??= `Select an item file (json) from your computer to import.`;\r\n    dialogData.allowedFileTypes ??= 'json';\r\n    dialogData.upload$ ??= (files) => this.contentItemsService.importItem(files[0]);\r\n  }\r\n\r\n}\r\n","<app-file-upload-dialog [uploadType]=\"uploadType\"></app-file-upload-dialog>\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\nimport { InputTypeStrict } from './input-type-catalog';\r\nimport { HttpServiceBase } from '../services/http-service-base';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = 'admin/field/all';\r\nexport const webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService extends HttpServiceBase {\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.appId }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputTypeMetadata[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.appId } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.appId, staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * \r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * \r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    // TODO: @SDV - do the same as in getShareableFields()\r\n    // but add parameter attributeId to the webapi call\r\n    // I'll create the backend afterwards\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.appId, attributeId: attributeId.toString() },\r\n      });\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceContentTypeStaticName: string, sourceFieldGuid: string, newName: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'AddInheritedField'), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: targetContentTypeId.toString(),\r\n        SourceType: sourceContentTypeStaticName,\r\n        SourceField: sourceFieldGuid,\r\n        name: newName,\r\n      }\r\n    });\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Share'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Inherit'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: InputTypeStrict) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.appId, attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { EntityBasic } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { transient } from '../../core';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n @Injectable()\r\n export class EntityService {\r\n  \r\n  log = classLog({EntityService}, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext) { }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { inject, Injectable } from '@angular/core';\r\nimport { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { Context } from '../../shared/services/context';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n/**\r\n * Base class for all services that need to make HTTP calls.\r\n * Provides important typical information and services, especially\r\n * * apiUrl(name) - to get the full API URL\r\n * * appId - the current app id\r\n * * zoneId - the current zone id\r\n */\r\n@Injectable()\r\nexport class HttpServiceBase {\r\n\r\n  protected dnnContext = inject(DnnContext);\r\n  protected http = inject(HttpClient);\r\n  protected context = inject(Context);\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Convert a short 2sxc-url into the correct full URL on the system.\r\n   * @param name 2sxc-style short url\r\n   * @returns \r\n   */\r\n  protected apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  /**\r\n   * The current app id\r\n   */\r\n  protected get appId() { return this.context.appId.toString(); }\r\n\r\n  /**\r\n   * The current zone id\r\n   */\r\n  protected get zoneId() { return this.context.zoneId.toString(); }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Context } from './context';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getAvailableEntities(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}