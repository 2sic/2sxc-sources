{"version":3,"file":"projects_eav-ui_src_app_app-administration_data_data_component_ts.c5c34ad6d624cd13.js","mappings":"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","names":["i0","_r1","ctx_r1","do","_r3","contentType","Metadata","length","_r4","Permissions","Count","_r5","EditInfo","DisableRename","DisableDelete","DataActionsComponent","agInit","params","this","data","enablePermissions","enablePermissionsGetter","guidRegex","test","StaticName","refresh","verb","static","t","core","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","DataActionsComponent_Conditional_1_Template","DataActionsComponent_Conditional_2_Template","DataActionsComponent_Conditional_3_Template","DataActionsComponent_Conditional_4_Template","DataActionsComponent_Conditional_5_Template","DataActionsComponent_Conditional_6_Template","DataActionsComponent_ng_template_12_Template","DisableEdit","Properties","DisableMetadata","menu_r6","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","MatMenuModule","i4","DataFieldsComponent","value","tooltip","ReadOnly","ReadOnlyMessage","SharedDefId","icon","editFields","onEditFields","TippyDirective","DataItemsComponent","showItems","onShowItems","addItem","onAddItem","styles","scopeOption_r1","name","label","_r2","ctx_r2","createGhost","DataComponent","BaseComponent","#snackBar","#contentTypeSvc","#contentExportSvc","#dialogConfigSvc","#dialogRouter","constructor","super","isDebug","inject","GlobalConfigService","MatSnackBar","transient","ContentTypesService","ContentExportService","DialogConfigAppService","DialogRoutingService","contentTypes","signal","undefined","scope","scopeOptions","gridOptions","#buildGridOptions","dropdownInsertValue","ngOnInit","#fetchScopes","#refreshScopeOnRouteChange","doOnDialogClosed","#fetchContentTypes","getCurrent$","subscribe","Context","Enable","AppPermissions","ngOnDestroy","filesDropped","files","importFile","substring","lastIndexOf","toLocaleLowerCase","from","toString","pipe","take","fileString","contentTypeName","split","find","ct","Name","#openDataImport","open","duration","importType","navParentFirstChild","state","#showContentItems","editContentType","retrieveContentTypes","_compareLabel","Label","replace","RegExp","set","eavConstants","scopes","default","getScopesV2","scopeList","manual","filter","sOld","sNew","withNiceLabel","map","s","countInfo","typesInherited","typesTotal","sourceName","window","prompt","res","changeScope","newScope","console","log","navRelative","#addItem","form","items","EditPrep","newFromType","formUrl","convertFormToUrl","#editFields","#createOrEditMetadata","editId","Id","newMetadata","metadata","Prefill","Description","#openMetadata","url","GoToMetadata","getUrlContentType","#openRestApi","GoToDevRest","getUrlData","#exportType","exportJson","#openDataExport","#openPermissions","GoToPermissions","#deleteContentType","confirm","delete","result","subscriptions","add","router","events","event","NavigationEnd","getParam","startWith","mapUntilChanged","m","option","includes","newScopeOption","typesOfApp","defaultGridOptions","columnDefs","ColumnDefinitions","IdWithDefaultRenderer","cellRendererParams","idFieldParamsTooltipGetter","TextWidePrimary","headerName","field","sort","onCellClicked","comparator","valueA","valueB","nodeA","nodeB","isInverted","localeCompare","Items","cellRenderer","Fields","TextWideMin100","cellClass","valueGetter","TextWideFlex3","ActionsPinnedRight4","$event","DataComponent_For_7_Template","DataComponent_Conditional_15_Template","MatDialogActions","MatFormFieldModule","MatSelectModule","FormsModule","MatOptionModule","MatButtonModule","i5","i6","RouterOutlet","SxcGridModule","i7","DragAndDropDirective","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","readAsText","fn","distinctUntilChanged","mapUntilObjChanged","isEqual","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵfac","ɵcmp","type","encapsulation","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","inputs","None","HasDecoratorInputTransform","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/data/data-actions/data-actions.component.html","./projects/eav-ui/src/app/app-administration/data/data-actions/data-actions.component.ts","./projects/eav-ui/src/app/app-administration/data/data-fields/data-fields.component.ts","./projects/eav-ui/src/app/app-administration/data/data-fields/data-fields.component.html","./projects/eav-ui/src/app/app-administration/data/data-items/data-items.component.ts","./projects/eav-ui/src/app/app-administration/data/data-items/data-items.component.html","./projects/eav-ui/src/app/app-administration/data/data.component.html","./projects/eav-ui/src/app/app-administration/data/data.component.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["<div class=\"actions-component\">\r\n  @if (!contentType.EditInfo.DisableEdit || contentType.Properties) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple\r\n      tippy=\"Description and more\"\r\n      (click)=\"do('createUpdateMetaData')\">\r\n      <mat-icon>edit</mat-icon>\r\n    </div>\r\n  }\r\n  @if (contentType.EditInfo.DisableEdit && !contentType.Properties) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>edit</mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!contentType.EditInfo.DisableMetadata) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Metadata\"\r\n      (click)=\"do('openMetadata')\">\r\n      <mat-icon [matBadge]=\"contentType.Metadata.length\" matBadgePosition=\"below after\" matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\" [matBadgeHidden]=\"!contentType.Metadata.length\" aria-hidden=\"false\">\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @if (contentType.EditInfo.DisableMetadata) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"contentType.Metadata.length\" matBadgePosition=\"below after\" matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\" matBadgeDisabled=\"true\" [matBadgeHidden]=\"!contentType.Metadata.length\" aria-hidden=\"false\">\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!contentType.EditInfo.DisableEdit && enablePermissions) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple\r\n      tippy=\"Permissions\" (click)=\"do('openPermissions')\">\r\n      <mat-icon [matBadge]=\"contentType.Permissions.Count\" matBadgePosition=\"below after\" matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\" [matBadgeHidden]=\"!contentType.Permissions.Count\" aria-hidden=\"false\">\r\n      person</mat-icon>\r\n    </div>\r\n  }\r\n  @if (contentType.EditInfo.DisableEdit || !enablePermissions) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"contentType.Permissions.Count\" matBadgePosition=\"below after\" matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\" matBadgeDisabled=\"true\" [matBadgeHidden]=\"!contentType.Permissions.Count\"\r\n        aria-hidden=\"false\">\r\n      person</mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"contentType.EditInfo.DisableRename\" (click)=\"do('editContentType')\">\r\n      <mat-icon>settings</mat-icon>\r\n      <span>Rename</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"do('openRestApi')\">\r\n      <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      <span>REST API</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"do('typeExport')\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export content type</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"do('dataExport')\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export data</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"do('dataImport')\">\r\n      <mat-icon>cloud_upload</mat-icon>\r\n      <span>Import data</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"contentType.EditInfo.DisableDelete\" (click)=\"do('deleteContentType')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { guidRegex } from '../../../shared/constants/guid.constants';\r\nimport { ContentType } from '../../models/content-type.model';\r\nimport { DataActionsParams, DataActionType } from './data-actions.models';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-data-actions',\r\n  templateUrl: './data-actions.component.html',\r\n  styleUrls: ['./data-actions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    MatMenuModule,\r\n  ],\r\n})\r\nexport class DataActionsComponent implements ICellRendererAngularComp {\r\n  contentType: ContentType;\r\n  enablePermissions: boolean;\r\n  private params: ICellRendererParams & DataActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & DataActionsParams): void {\r\n    this.params = params;\r\n    this.contentType = this.params.data;\r\n    const enablePermissions = this.params.enablePermissionsGetter();\r\n    this.enablePermissions = enablePermissions && guidRegex().test(this.contentType.StaticName);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: DataActionType): void {\r\n    this.params.do(verb, this.contentType);\r\n  }\r\n\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentType } from '../../models/content-type.model';\r\nimport { DataFieldsParams } from './data-fields.models';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-data-fields',\r\n  templateUrl: './data-fields.component.html',\r\n  styleUrls: ['./data-fields.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class DataFieldsComponent implements ICellRendererAngularComp {\r\n  value: number;\r\n  tooltip: string;\r\n  icon: string;\r\n\r\n  private params: ICellRendererParams & DataFieldsParams;\r\n  private contentType: ContentType;\r\n\r\n  agInit(params: ICellRendererParams & DataFieldsParams): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    this.value = params.value;\r\n    this.tooltip = !this.contentType.EditInfo.ReadOnly\r\n      ? 'Edit fields'\r\n      : `${this.contentType.EditInfo.ReadOnlyMessage ? `${this.contentType.EditInfo.ReadOnlyMessage}\\n\\n` : ''}This ContentType shares the definition of #${this.contentType.SharedDefId} so you can't edit it here. Read 2sxc.org/help?tag=shared-types`;\r\n    this.icon = !this.contentType.EditInfo.ReadOnly ? 'dns' : 'share';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  editFields(): void {\r\n    this.params.onEditFields(this.contentType);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple [tippy]=\"tooltip\" (click)=\"editFields()\">\r\n    <mat-icon [matBadge]=\"value\" matBadgePosition=\"below after\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!value\" aria-hidden=\"false\">\r\n      {{icon}}\r\n    </mat-icon>\r\n  </div>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentType } from '../../models';\r\nimport { DataItemsParams } from './data-items.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-data-items',\r\n  templateUrl: './data-items.component.html',\r\n  styleUrls: ['./data-items.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class DataItemsComponent implements ICellRendererAngularComp {\r\n  value: number;\r\n  private params: DataItemsParams;\r\n  private contentType: ContentType;\r\n\r\n  agInit(params: ICellRendererParams & DataItemsParams): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  showItems(): void {\r\n    this.params.onShowItems(this.contentType);\r\n  }\r\n\r\n  addItem(): void {\r\n    this.params.onAddItem(this.contentType);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"{{ value }} items\" (click)=\"showItems()\">\r\n    <div class=\"text-icon\">{{ value }}</div>\r\n  </div>\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Add item\" (click)=\"addItem()\">\r\n    <mat-icon>add</mat-icon>\r\n  </div>\r\n</div>","<div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n  <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"contentTypes()\" [gridOptions]=\"gridOptions\" appDragAndDrop\r\n    [allowedFileTypes]=\"'xml,json'\" (filesDropped)=\"filesDropped($event)\">\r\n  </ag-grid-angular>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field eav-scope-dropdown\">\r\n        <mat-select [ngModel]=\"scope()\" name=\"Scope\" (ngModelChange)=\"changeScope($event)\">\r\n          @for (scopeOption of (scopeOptions()); track scopeOption) {\r\n          <mat-option [value]=\"scopeOption.name\">\r\n            {{ 'Scope: ' + scopeOption.label }}\r\n          </mat-option>\r\n          }\r\n          <mat-option [value]=\"dropdownInsertValue\">Scope: Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import content type\" (click)=\"importType()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Content Type</span>\r\n      </button>\r\n      @if (isDebug()) {\r\n      <button mat-button class=\"eav-button__with-icon\" color=\"accent\" tippy=\"Create a ghost content type\"\r\n        (click)=\"createGhost()\">\r\n        <mat-icon class=\"eav-icon\">share</mat-icon>\r\n        <span>Ghost</span>\r\n      </button>\r\n      }\r\n    </div>\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new content type\"\r\n      (click)=\"editContentType(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n<router-outlet></router-outlet>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, inject, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { NavigationEnd, RouterOutlet } from '@angular/router';\r\nimport { filter, from, map, startWith, take } from 'rxjs';\r\nimport { ContentExportService } from '../../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../../content-import/content-import-dialog.config';\r\nimport { GoToDevRest } from '../../dev-rest/go-to-dev-rest';\r\nimport { GoToMetadata } from '../../metadata';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { FileUploadDialogData } from '../../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { toString } from '../../shared/helpers/file-to-base64.helper';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../../shared/models/edit-form.model';\r\nimport { ContentType } from '../models/content-type.model';\r\nimport { ContentTypesService } from '../services/content-types.service';\r\nimport { DataActionsComponent } from './data-actions/data-actions.component';\r\nimport { DataActionsParams } from './data-actions/data-actions.models';\r\nimport { DataFieldsComponent } from './data-fields/data-fields.component';\r\nimport { DataFieldsParams } from './data-fields/data-fields.models';\r\nimport { DataItemsComponent } from './data-items/data-items.component';\r\nimport { DataItemsParams } from './data-items/data-items.models';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { DragAndDropDirective } from '../../shared/directives/drag-and-drop.directive';\r\nimport { transient } from '../../core';\r\nimport { mapUntilChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\n\r\n@Component({\r\n  selector: 'app-data',\r\n  templateUrl: './data.component.html',\r\n  styleUrls: ['./data.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogActions,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    FormsModule,\r\n    MatOptionModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    SxcGridModule,\r\n    DragAndDropDirective,\r\n  ],\r\n})\r\nexport class DataComponent extends BaseComponent implements OnInit, OnDestroy {\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n  #snackBar = inject(MatSnackBar);\r\n\r\n  #contentTypeSvc = transient(ContentTypesService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor() { super(); }\r\n  contentTypes = signal<ContentType[]>(undefined);\r\n  scope = signal<string>(undefined);\r\n  scopeOptions = signal<ScopeDetailsDto[]>([]);\r\n\r\n\r\n  /** Possible scopes - the ones from the backend + manually entered scopes by the current user */\r\n  gridOptions = this.#buildGridOptions();\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  enablePermissions!: boolean;\r\n\r\n  ngOnInit() {\r\n    this.#fetchScopes();\r\n    this.#refreshScopeOnRouteChange();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.#fetchContentTypes());\r\n\r\n    this.#dialogConfigSvc.getCurrent$().subscribe(data => {\r\n      this.enablePermissions = data.Context.Enable.AppPermissions;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        from(toString(files[0])).pipe(take(1)).subscribe(fileString => {\r\n          const contentTypeName = fileString.split('<Entity Type=\"')[1]?.split('\"')[0];\r\n          const contentType = this.contentTypes().find(ct => ct.Name === contentTypeName);\r\n          if (contentType == null) {\r\n            const message = `Cannot find Content Type named '${contentTypeName}'. Please open Content Type Import dialog manually.`;\r\n            this.#snackBar.open(message, null, { duration: 5000 });\r\n            return;\r\n          }\r\n          this.#openDataImport(contentType, files);\r\n        });\r\n        break;\r\n      case 'json':\r\n        this.importType(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importType(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navParentFirstChild(['import'], { state: dialogData });\r\n  }\r\n\r\n  #showContentItems(contentType: ContentType) {\r\n    this.#dialogRouter.navParentFirstChild([`items/${contentType.StaticName}`]);\r\n  }\r\n\r\n  editContentType(contentType: ContentType) {\r\n    if (!contentType) {\r\n      this.#dialogRouter.navParentFirstChild(['add']);\r\n    } else {\r\n      if (contentType.EditInfo.ReadOnly) return;\r\n      this.#dialogRouter.navParentFirstChild([`${contentType.StaticName}/edit`]);\r\n    }\r\n  }\r\n\r\n  #fetchContentTypes() {\r\n    this.#contentTypeSvc.retrieveContentTypes(this.scope()).subscribe(contentTypes => {\r\n      for (const contentType of contentTypes) {\r\n        contentType._compareLabel = contentType.Label.replace(/\\p{Emoji}/gu, 'ž');\r\n      }\r\n      this.contentTypes.set(contentTypes);\r\n      if (this.scope() !== eavConstants.scopes.default.value) {\r\n        const message = 'Warning! You are in a special scope. Changing things here could easily break functionality';\r\n        this.#snackBar.open(message, null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  #fetchScopes() {\r\n    this.#contentTypeSvc.getScopesV2().subscribe(scopeList => {\r\n      // Merge the new scopes with the existing ones - in case there were manual scopes added\r\n      // If old scope list had a manual scope which the server didn't send, re-add it here\r\n      const manual = this.scopeOptions()\r\n        .filter(sOld => scopeList.find(sNew => sNew.name === sOld.name) == null);\r\n\r\n      // Add a nice label to each scope containing count-information of types\r\n      const withNiceLabel = scopeList.map(s => {\r\n        let countInfo = !s.typesInherited\r\n          ? `${s.typesTotal} types`               // only not-inherited\r\n          : (s.typesInherited == s.typesTotal)\r\n            ? s.typesInherited + ' sys types'     // only inherited\r\n            : `${s.typesTotal} types / ${s.typesInherited} system`;\r\n        return ({ ...s, label: s.name + ` - ${countInfo}` });\r\n      });\r\n\r\n      this.scopeOptions.set([...withNiceLabel, ...manual]);\r\n    });\r\n  }\r\n\r\n  createGhost() {\r\n    const sourceName = window.prompt('To create a ghost content-type enter source static name / id - this is a very advanced operation - read more about it on 2sxc.org/help?tag=ghost');\r\n    if (!sourceName) return;\r\n    this.#snackBar.open('Saving...');\r\n    this.#contentTypeSvc.createGhost(sourceName).subscribe(res => {\r\n      this.#snackBar.open('Saved', null, { duration: 2000 });\r\n      this.#fetchContentTypes();\r\n    });\r\n  }\r\n\r\n  changeScope(newScope: string) {\r\n    console.log(\"trigger\")\r\n    if (newScope === dropdownInsertValue) {\r\n      newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n    }\r\n    this.#dialogRouter.navRelative(['..', newScope]);\r\n  }\r\n\r\n  //#region Actions in the grid\r\n\r\n  #addItem(contentType: ContentType) {\r\n    const form: EditForm = {\r\n      items: [EditPrep.newFromType(contentType.StaticName)],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navParentFirstChild([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #editFields(contentType: ContentType) {\r\n    this.#dialogRouter.navParentFirstChild([`fields/${contentType.StaticName}`]);\r\n  }\r\n\r\n  #createOrEditMetadata(contentType: ContentType) {\r\n    const form: EditForm = {\r\n      items: [\r\n        !contentType.Properties\r\n          ? {\r\n              ...EditPrep.newMetadata(contentType.StaticName, eavConstants.contentTypes.contentType, eavConstants.metadata.contentType),\r\n              Prefill: {\r\n                Label: contentType.Name,\r\n                Description: contentType.Description\r\n              },\r\n            }\r\n          : EditPrep.editId(contentType.Properties.Id),\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navParentFirstChild([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #openMetadata(contentType: ContentType) {\r\n    const url = GoToMetadata.getUrlContentType(\r\n      contentType.StaticName,\r\n      `Metadata for Content Type: ${contentType.Name} (${contentType.Id})`,\r\n    );\r\n    this.#dialogRouter.navParentFirstChild([url]);\r\n  }\r\n\r\n  #openRestApi(contentType: ContentType) {\r\n    this.#dialogRouter.navParentFirstChild([GoToDevRest.getUrlData(contentType)]);\r\n  }\r\n\r\n  #exportType(contentType: ContentType) {\r\n    this.#contentExportSvc.exportJson(contentType.StaticName);\r\n  }\r\n\r\n  #openDataExport(contentType: ContentType) {\r\n    this.#dialogRouter.navParentFirstChild([`export/${contentType.StaticName}`]);\r\n  }\r\n\r\n  #openDataImport(contentType: ContentType, files?: File[]) {\r\n    const contentImportData: ContentImportDialogData = { files };\r\n    this.#dialogRouter.navParentFirstChild([`${contentType.StaticName}/import`], { state: contentImportData });\r\n  }\r\n\r\n  #openPermissions(contentType: ContentType) {\r\n    this.#dialogRouter.navParentFirstChild([GoToPermissions.getUrlContentType(contentType.StaticName)]);\r\n  }\r\n\r\n  #deleteContentType(contentType: ContentType) {\r\n    if (!confirm(`Are you sure you want to delete '${contentType.Name}' (${contentType.Id})?`)) return;\r\n    this.#snackBar.open('Deleting...');\r\n    this.#contentTypeSvc.delete(contentType).subscribe(result => {\r\n      this.#snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.#fetchContentTypes();\r\n    });\r\n  }\r\n\r\n  //#endregion\r\n\r\n  /**\r\n   * Refreshes the scope when the route changes.\r\n   * ...also adds a scope name if the route scope is not found in the list of possible scopes.\r\n   * This is to allow an admin to enter a custom scope.\r\n   * Note 2024-03-04 2dm - not sure if this auto-add feature is still needed though...\r\n   */\r\n  #refreshScopeOnRouteChange() {\r\n    this.subscriptions.add(\r\n      this.#dialogRouter.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        map(() => this.#dialogRouter.getParam('scope')),\r\n        startWith(this.#dialogRouter.getParam('scope')),\r\n        filter(scope => !!scope),\r\n        mapUntilChanged(m => m),\r\n      ).subscribe(scope => {\r\n        this.scope.set(scope);\r\n\r\n        // If we can't find the scope in the list of options, add it as it was entered manually\r\n        if (!this.scopeOptions().map(option => option.name).includes(scope)) {\r\n          const newScopeOption: ScopeDetailsDto = {\r\n            name: scope,\r\n            label: scope,\r\n            typesTotal: 0,\r\n            typesInherited: 0,\r\n            typesOfApp: 0,\r\n          };\r\n          this.scopeOptions.set([...this.scopeOptions(), newScopeOption]);\r\n        }\r\n        this.#fetchContentTypes();\r\n      })\r\n    );\r\n  }\r\n\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.IdWithDefaultRenderer,\r\n          cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentType>('StaticName'),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWidePrimary,\r\n          headerName: 'ContentType',\r\n          field: 'Label',\r\n          sort: 'asc',\r\n          onCellClicked: (params) => {\r\n            const contentType: ContentType = params.data;\r\n            this.#showContentItems(contentType);\r\n          },\r\n          comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {\r\n            const contentTypeA: ContentType = nodeA.data;\r\n            const contentTypeB: ContentType = nodeB.data;\r\n            return contentTypeA._compareLabel.localeCompare(contentTypeB._compareLabel);\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Items,\r\n          field: 'Items',\r\n          cellRenderer: DataItemsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: DataItemsParams = {\r\n              onShowItems: (contentType) => this.#showContentItems(contentType),\r\n              onAddItem: (contentType) => this.#addItem(contentType),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Fields,\r\n          field: 'Fields',\r\n          cellRenderer: DataFieldsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: DataFieldsParams = {\r\n              onEditFields: (contentType) => this.#editFields(contentType),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideMin100,\r\n          field: 'Name',\r\n          cellClass: (params) => {\r\n            const contentType: ContentType = params.data;\r\n            return `${contentType.EditInfo.DisableEdit ? 'no-outline' : 'primary-action highlight'}`.split(' ');\r\n          },\r\n          valueGetter: (params) => {\r\n            const contentType: ContentType = params.data;\r\n            return contentType.Name;\r\n          },\r\n          onCellClicked: (params) => {\r\n            const contentType: ContentType = params.data;\r\n            this.editContentType(contentType);\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideFlex3,\r\n          field: 'Description',\r\n          valueGetter: (params) => {\r\n            const contentType: ContentType = params.data;\r\n            return contentType.Properties?.Description;\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight4,\r\n          cellRenderer: DataActionsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: DataActionsParams = {\r\n              enablePermissionsGetter: () => this.enablePermissions,\r\n              do: (verb, contentType) => {\r\n                switch (verb) {\r\n                  case 'createUpdateMetaData': this.#createOrEditMetadata(contentType); break;\r\n                  case 'openPermissions': this.#openPermissions(contentType); break;\r\n                  case 'editContentType': this.editContentType(contentType); break;\r\n                  case 'openMetadata': this.#openMetadata(contentType); break;\r\n                  case 'openRestApi': this.#openRestApi(contentType); break;\r\n                  case 'typeExport': this.#exportType(contentType); break;\r\n                  case 'dataExport': this.#openDataExport(contentType); break;\r\n                  case 'dataImport': this.#openDataImport(contentType); break;\r\n                  case 'deleteContentType': this.#deleteContentType(contentType); break;\r\n                }\r\n              }\r\n            } satisfies DataActionsParams;\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[10]}