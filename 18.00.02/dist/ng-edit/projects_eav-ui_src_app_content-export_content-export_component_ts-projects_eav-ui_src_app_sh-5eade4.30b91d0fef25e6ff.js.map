{"version":3,"file":"projects_eav-ui_src_app_content-export_content-export_component_ts-projects_eav-ui_src_app_sh-5eade4.30b91d0fef25e6ff.js","mappings":"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","names":["AppDialogConfigService","constructor","contextSvcShared","context","this","log","EavLogger","getCurrent$","appId","a","getShared$","static","t","i0","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_3__","jDH","factory","ɵfac","webApiTypeRoot","webApiTypeScopes","ContentTypesService","http","dnnContext","apiUrl","name","$2sxc","retrieveContentType","staticName","get","params","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","GlobalDialogConfigService","globalConfigService","dialogSettings$","svcId","getDialogSettings","shareReplay","refCount","reqBy","dlgSettings","Context","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","_angular_core__WEBPACK_IMPORTED_MODULE_6__","providedIn","lang_r3","NameId","ctx_r1","itemIds","length","$event","_r1","formValues","ContentExportComponent_Conditional_5_For_17_Template","recordExport","ContentExportComponent_Conditional_5_Conditional_26_Template","languageReferences","resourcesReferences","closeDialog","exportContent","languages","hasIdList","ngForm_r4","form","valid","ContentExportComponent","dialogRef","route","hostClass","contentExportService","transient","ContentExportService","contentTypesService","dialogConfigSvc","loading$","BehaviorSubject","contentType$","contentTypeStaticName","snapshot","paramMap","selectedIds","split","id","parseInt","ngOnInit","next","forkJoin","subscribe","dialogSettings","defaultLanguage","Primary","ngOnDestroy","complete","close","VBU","selectors","hostVars","hostBindings","rf","ctx","ContentExportComponent_Conditional_5_Template","tmp_0_0","Name","FormsModule","MatFormFieldModule","i4","MatSelectModule","i5","i6","MatOptionModule","MatRadioModule","i7","MatDialogActions","MatButtonModule","i8","AsyncPipe","styles","logSpecs","enabled","specs","all","getEntities","getAvailableEntities","webApiEntityRoot","webApiEntityList","EntityService","queryService","QueryService","getEntities$","fnIf","p","switchMap","contentTypeName","entitiesFilter","contentTypes","fields","data","Default","entityId","force","parentId","parentField","parent","_angular_core__WEBPACK_IMPORTED_MODULE_7__","GlobalConfigService","snackBar","debugState","signal","isDebug","computed","allowDebugMode","debugEnabled","debugEnabled$","toObservable","initial","sessionStorage","getItem","keyDebug","set","allow","oldConfig","newConfig","toggleDebugEnabled","open","duration","_angular_core__WEBPACK_IMPORTED_MODULE_1__","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","Guids","join","source","options","injector","assertInInjectionContext","inject","Injector","subject","ReplaySubject","watcher","effect","err","untracked","error","manualCleanup","DestroyRef","onDestroy","destroy","asObservable","toSignal","requiresCleanup","cleanupRef","state","requireSync","kind","initialValue","sub","rejectErrors","unsubscribe","bind","current","ɵRuntimeError"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/global-dialog-config.service.ts","./projects/eav-ui/src/app/content-export/content-export.component.html","./projects/eav-ui/src/app/content-export/content-export.component.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/global-config.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./node_modules/@angular/core/fesm2022/rxjs-interop.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { GlobalDialogConfigService } from './global-dialog-config.service';\r\n\r\nconst logThis = false;\r\nconst nameOfThis = 'DialogConfigService';\r\n\r\n/**\r\n * Context aware dialog configuration service.\r\n * \r\n * It uses the shared service so the settings are cached when re-requested by anything else.\r\n */\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n\r\n  log = new EavLogger(nameOfThis, logThis);\r\n\r\n  constructor(private contextSvcShared: GlobalDialogConfigService, private context: Context) {\r\n  }\r\n\r\n  getCurrent$(): Observable<DialogSettings> {\r\n    const appId = this.context.appId;\r\n    this.log.a(`getCurrent\\$ - appId:${appId}`);\r\n    return this.contextSvcShared.getShared$(appId);\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\n\r\nconst logThis = false;\r\nconst nameOfThis = 'GlobalDialogConfigService';\r\n\r\nconst webApiSettings = 'admin/dialog/settings';\r\n\r\n/**\r\n * Service for getting dialog settings for the current app.\r\n * \r\n * Note that it should normally be shared, to save resources / network calls.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalDialogConfigService {\r\n\r\n  log = new EavLogger(nameOfThis, logThis);\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private globalConfigService: GlobalConfigService,\r\n  ) {\r\n    this.log.a(`using context #${this.context.log.svcId}`);\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getShared$(appId: number): Observable<DialogSettings> {\r\n    this.log.a('getShared$ appId: ' + appId);\r\n    this.dialogSettings$[appId] ??= this.getDialogSettings(appId, 'getShared$')\r\n      .pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n  }\r\n\r\n  private getDialogSettings(appId?: number, reqBy?: string): Observable<DialogSettings> {\r\n    this.log.a('getDialogSettings', {appId, reqBy});\r\n    return this.http.get<DialogSettings>(webApiSettings, {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dlgSettings => {\r\n        dlgSettings.Context.Language.List = dlgSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dlgSettings;\r\n      }),\r\n      tap(dlgSettings => {\r\n        this.globalConfigService.allowDebug(dlgSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Export {{ (contentType$ | async)?.Name }}</div>\r\n  </div>\r\n  @if ((loading$ | async) === false) {\r\n  <form #ngForm=\"ngForm\">\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This will generate an XML file which you can edit in Excel. If you just want to import new data, use this to\r\n        export the schema that you can then fill in using Excel. Please visit\r\n        <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n      </p>\r\n      <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n        <div>\r\n          <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n            <mat-label>Languages</mat-label>\r\n            <mat-select [(ngModel)]=\"formValues.language\" name=\"Language\">\r\n              <mat-option value=\"\">All</mat-option>\r\n              @for (lang of languages; track lang) {\r\n              <mat-option [value]=\"lang.NameId\">{{ lang.NameId }}</mat-option>\r\n              }\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <p class=\"eav-radio-group-label\">Export data</p>\r\n          <mat-radio-group [(ngModel)]=\"formValues.recordExport\" name=\"RecordExport\" class=\"eav-radio-group\">\r\n            <mat-radio-button value=\"Blank\">No, just export blank data schema (for new data import)\r\n            </mat-radio-button>\r\n            <mat-radio-button value=\"All\">Yes, export all content-items</mat-radio-button>\r\n            @if (hasIdList) {\r\n            <mat-radio-button value=\"Selection\">\r\n              Export selected {{ itemIds.length }} items\r\n            </mat-radio-button>\r\n            }\r\n          </mat-radio-group>\r\n        </div>\r\n        <div>\r\n          <p class=\"eav-radio-group-label\">Value references to other languages</p>\r\n          <mat-radio-group [(ngModel)]=\"formValues.languageReferences\" name=\"LanguageReferences\"\r\n            [disabled]=\"formValues.recordExport === 'Blank'\" class=\"eav-radio-group\">\r\n            <mat-radio-button value=\"Link\">Keep references to other languages (for re-import)\r\n            </mat-radio-button>\r\n            <mat-radio-button value=\"Resolve\">Replace references with values</mat-radio-button>\r\n          </mat-radio-group>\r\n        </div>\r\n        <div>\r\n          <p class=\"eav-radio-group-label\">File / page references</p>\r\n          <mat-radio-group [(ngModel)]=\"formValues.resourcesReferences\" name=\"ResourcesReferences\"\r\n            [disabled]=\"formValues.recordExport === 'Blank'\" class=\"eav-radio-group\">\r\n            <mat-radio-button value=\"Link\">Keep references (for re-import, for example Page:4711)\r\n            </mat-radio-button>\r\n            <mat-radio-button value=\"Resolve\">Replace references with real URLs (for example\r\n              /Portals/0...)\r\n            </mat-radio-button>\r\n          </mat-radio-group>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!ngForm.form.valid\" (click)=\"exportContent()\">\r\n        Export Data\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </form>\r\n  }\r\n</div>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExport } from './models/content-export.model';\r\nimport { ContentExportService } from './services/content-export.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { transient } from '../core';\r\nimport { Language } from '../shared/models/language.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\n\r\n@Component({\r\n  selector: 'app-content-export',\r\n  templateUrl: './content-export.component.html',\r\n  styleUrls: ['./content-export.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatRadioModule,\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    AsyncPipe,\r\n  ],\r\n})\r\nexport class ContentExportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private contentExportService = transient(ContentExportService);\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private dialogConfigSvc = transient(AppDialogConfigService);\r\n\r\n  formValues: ContentExport;\r\n  languages: Language[];\r\n  itemIds: number[];\r\n  hasIdList = false;\r\n  loading$ = new BehaviorSubject(false);\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentExportComponent>,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    const selectedIds = this.route.snapshot.paramMap.get('selectedIds');\r\n    this.hasIdList = !!selectedIds;\r\n    if (this.hasIdList) {\r\n      this.itemIds = selectedIds.split(',').map(id => parseInt(id, 10));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.dialogConfigSvc.getCurrent$();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.languages = dialogSettings.Context.Language.List;\r\n\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentTypeStaticName: this.contentTypeStaticName,\r\n        language: '',\r\n        recordExport: this.hasIdList ? 'Selection' : 'All',\r\n        languageReferences: 'Link',\r\n        resourcesReferences: 'Link',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportContent() {\r\n    this.contentExportService.exportContent(this.formValues,\r\n      this.hasIdList && this.formValues.recordExport === 'Selection' ? this.itemIds : null);\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { EntityBasic } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { transient } from '../../core';\r\n\r\nconst logSpecs = {\r\n  enabled: false,\r\n  name: 'EntityService',\r\n  specs: {\r\n    all: false,\r\n    getEntities: false,\r\n    getAvailableEntities: false,\r\n    delete: false,\r\n  }\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n @Injectable()\r\n export class EntityService {\r\n  private queryService = transient(QueryService);\r\n\r\n  log = new EavLogger(logSpecs);\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext) { }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable, computed, signal } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { keyDebug } from '../constants/session.constants';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalConfigService {\r\n\r\n  private debugState = signal<GlobalConfig>(null);\r\n\r\n  isDebug = computed(() => !!this.debugState()?.allowDebugMode && !!this.debugState()?.debugEnabled);\r\n\r\n  /** This observable is a left-over, try to remove once more is refactored */\r\n  debugEnabled$ = toObservable(this.isDebug);\r\n\r\n  constructor(private snackBar: MatSnackBar) {\r\n    const initial: GlobalConfig = {\r\n      id: 0,\r\n      debugEnabled: sessionStorage.getItem(keyDebug) === 'true',\r\n      allowDebugMode: false,\r\n    };\r\n    this.debugState.set(initial);\r\n  }\r\n\r\n  allowDebug(allow: boolean): void {\r\n    const oldConfig = this.debugState();\r\n    if (oldConfig.allowDebugMode === allow)\r\n      return;\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      allowDebugMode: allow,\r\n    };\r\n    this.debugState.set(newConfig);\r\n  }\r\n\r\n  toggleDebugEnabled(): void {\r\n    const oldConfig = this.debugState();\r\n    if (!oldConfig.allowDebugMode) {\r\n      this.snackBar.open('You do not have permissions to enter developer mode', null, { duration: 3000 });\r\n      return;\r\n    }\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      debugEnabled: !oldConfig.debugEnabled,\r\n    };\r\n    this.debugState.set(newConfig);\r\n    this.snackBar.open(newConfig.debugEnabled ? 'developer mode on' : 'developer mode off', null, { duration: 3000 });\r\n  }\r\n}\r\n\r\ninterface GlobalConfig {\r\n  id: 0;\r\n  debugEnabled: boolean;\r\n  allowDebugMode: boolean;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { Context } from './context';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\n\r\nconst logSpecs = {\r\n  enabled: false,\r\n  name: 'QueryService',\r\n  specs: {\r\n    all: false,\r\n    getAvailableEntities: false,\r\n    getEntities: false,\r\n  }\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = new EavLogger(logSpecs);\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getAvailableEntities(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","/**\n * @license Angular v17.3.11\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { assertInInjectionContext, inject, DestroyRef, ɵRuntimeError, ɵgetOutputDestroyRef, Injector, effect, untracked, assertNotInReactiveContext, signal, computed } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Operator which completes the Observable when the calling context (component, directive, service,\n * etc) is destroyed.\n *\n * @param destroyRef optionally, the `DestroyRef` representing the current context. This can be\n *     passed explicitly to use `takeUntilDestroyed` outside of an [injection\n * context](guide/dependency-injection-context). Otherwise, the current `DestroyRef` is injected.\n *\n * @developerPreview\n */\nfunction takeUntilDestroyed(destroyRef) {\n    if (!destroyRef) {\n        assertInInjectionContext(takeUntilDestroyed);\n        destroyRef = inject(DestroyRef);\n    }\n    const destroyed$ = new Observable(observer => {\n        const unregisterFn = destroyRef.onDestroy(observer.next.bind(observer));\n        return unregisterFn;\n    });\n    return (source) => {\n        return source.pipe(takeUntil(destroyed$));\n    };\n}\n\n/**\n * Implementation of `OutputRef` that emits values from\n * an RxJS observable source.\n *\n * @internal\n */\nclass OutputFromObservableRef {\n    constructor(source) {\n        this.source = source;\n        this.destroyed = false;\n        this.destroyRef = inject(DestroyRef);\n        this.destroyRef.onDestroy(() => {\n            this.destroyed = true;\n        });\n    }\n    subscribe(callbackFn) {\n        if (this.destroyed) {\n            throw new ɵRuntimeError(953 /* ɵRuntimeErrorCode.OUTPUT_REF_DESTROYED */, ngDevMode &&\n                'Unexpected subscription to destroyed `OutputRef`. ' +\n                    'The owning directive/component is destroyed.');\n        }\n        // Stop yielding more values when the directive/component is already destroyed.\n        const subscription = this.source.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n            next: value => callbackFn(value),\n        });\n        return {\n            unsubscribe: () => subscription.unsubscribe(),\n        };\n    }\n}\n/**\n * Declares an Angular output that is using an RxJS observable as a source\n * for events dispatched to parent subscribers.\n *\n * The behavior for an observable as source is defined as followed:\n *    1. New values are forwarded to the Angular output (next notifications).\n *    2. Errors notifications are not handled by Angular. You need to handle these manually.\n *       For example by using `catchError`.\n *    3. Completion notifications stop the output from emitting new values.\n *\n * @usageNotes\n * Initialize an output in your directive by declaring a\n * class field and initializing it with the `outputFromObservable()` function.\n *\n * ```ts\n * @Directive({..})\n * export class MyDir {\n *   nameChange$ = <some-observable>;\n *   nameChange = outputFromObservable(this.nameChange$);\n * }\n * ```\n *\n * @developerPreview\n */\nfunction outputFromObservable(observable, opts) {\n    ngDevMode && assertInInjectionContext(outputFromObservable);\n    return new OutputFromObservableRef(observable);\n}\n\n/**\n * Converts an Angular output declared via `output()` or `outputFromObservable()`\n * to an observable.\n *\n * You can subscribe to the output via `Observable.subscribe` then.\n *\n * @developerPreview\n */\nfunction outputToObservable(ref) {\n    const destroyRef = ɵgetOutputDestroyRef(ref);\n    return new Observable(observer => {\n        // Complete the observable upon directive/component destroy.\n        // Note: May be `undefined` if an `EventEmitter` is declared outside\n        // of an injection context.\n        destroyRef?.onDestroy(() => observer.complete());\n        const subscription = ref.subscribe(v => observer.next(v));\n        return () => subscription.unsubscribe();\n    });\n}\n\n/**\n * Exposes the value of an Angular `Signal` as an RxJS `Observable`.\n *\n * The signal's value will be propagated into the `Observable`'s subscribers using an `effect`.\n *\n * `toObservable` must be called in an injection context unless an injector is provided via options.\n *\n * @developerPreview\n */\nfunction toObservable(source, options) {\n    !options?.injector && assertInInjectionContext(toObservable);\n    const injector = options?.injector ?? inject(Injector);\n    const subject = new ReplaySubject(1);\n    const watcher = effect(() => {\n        let value;\n        try {\n            value = source();\n        }\n        catch (err) {\n            untracked(() => subject.error(err));\n            return;\n        }\n        untracked(() => subject.next(value));\n    }, { injector, manualCleanup: true });\n    injector.get(DestroyRef).onDestroy(() => {\n        watcher.destroy();\n        subject.complete();\n    });\n    return subject.asObservable();\n}\n\n/**\n * Get the current value of an `Observable` as a reactive `Signal`.\n *\n * `toSignal` returns a `Signal` which provides synchronous reactive access to values produced\n * by the given `Observable`, by subscribing to that `Observable`. The returned `Signal` will always\n * have the most recent value emitted by the subscription, and will throw an error if the\n * `Observable` errors.\n *\n * With `requireSync` set to `true`, `toSignal` will assert that the `Observable` produces a value\n * immediately upon subscription. No `initialValue` is needed in this case, and the returned signal\n * does not include an `undefined` type.\n *\n * By default, the subscription will be automatically cleaned up when the current [injection\n * context](/guide/dependency-injection-context) is destroyed. For example, when `toSignal` is\n * called during the construction of a component, the subscription will be cleaned up when the\n * component is destroyed. If an injection context is not available, an explicit `Injector` can be\n * passed instead.\n *\n * If the subscription should persist until the `Observable` itself completes, the `manualCleanup`\n * option can be specified instead, which disables the automatic subscription teardown. No injection\n * context is needed in this configuration as well.\n *\n * @developerPreview\n */\nfunction toSignal(source, options) {\n    ngDevMode &&\n        assertNotInReactiveContext(toSignal, 'Invoking `toSignal` causes new subscriptions every time. ' +\n            'Consider moving `toSignal` outside of the reactive context and read the signal value where needed.');\n    const requiresCleanup = !options?.manualCleanup;\n    requiresCleanup && !options?.injector && assertInInjectionContext(toSignal);\n    const cleanupRef = requiresCleanup ? options?.injector?.get(DestroyRef) ?? inject(DestroyRef) : null;\n    // Note: T is the Observable value type, and U is the initial value type. They don't have to be\n    // the same - the returned signal gives values of type `T`.\n    let state;\n    if (options?.requireSync) {\n        // Initially the signal is in a `NoValue` state.\n        state = signal({ kind: 0 /* StateKind.NoValue */ });\n    }\n    else {\n        // If an initial value was passed, use it. Otherwise, use `undefined` as the initial value.\n        state = signal({ kind: 1 /* StateKind.Value */, value: options?.initialValue });\n    }\n    // Note: This code cannot run inside a reactive context (see assertion above). If we'd support\n    // this, we would subscribe to the observable outside of the current reactive context, avoiding\n    // that side-effect signal reads/writes are attribute to the current consumer. The current\n    // consumer only needs to be notified when the `state` signal changes through the observable\n    // subscription. Additional context (related to async pipe):\n    // https://github.com/angular/angular/pull/50522.\n    const sub = source.subscribe({\n        next: value => state.set({ kind: 1 /* StateKind.Value */, value }),\n        error: error => {\n            if (options?.rejectErrors) {\n                // Kick the error back to RxJS. It will be caught and rethrown in a macrotask, which causes\n                // the error to end up as an uncaught exception.\n                throw error;\n            }\n            state.set({ kind: 2 /* StateKind.Error */, error });\n        },\n        // Completion of the Observable is meaningless to the signal. Signals don't have a concept of\n        // \"complete\".\n    });\n    if (ngDevMode && options?.requireSync && state().kind === 0 /* StateKind.NoValue */) {\n        throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n    }\n    // Unsubscribe when the current context is destroyed, if requested.\n    cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));\n    // The actual returned signal is a `computed` of the `State` signal, which maps the various states\n    // to either values or errors.\n    return computed(() => {\n        const current = state();\n        switch (current.kind) {\n            case 1 /* StateKind.Value */:\n                return current.value;\n            case 2 /* StateKind.Error */:\n                throw current.error;\n            case 0 /* StateKind.NoValue */:\n                // This shouldn't really happen because the error is thrown on creation.\n                // TODO(alxhub): use a RuntimeError when we finalize the error semantics\n                throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n        }\n    });\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { outputFromObservable, outputToObservable, takeUntilDestroyed, toObservable, toSignal };\n"],"x_google_ignoreList":[8]}