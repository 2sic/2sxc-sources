{"version":3,"file":"projects_eav-ui_src_app_content-export_content-export_component_ts-projects_eav-ui_src_app_sh-5eade4.6276c8924623f82b.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","staticName","this","http","get","apiUrl","params","appId","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","Éµfac","i0","lang_r3","NameId","ctx_r1","itemIds","length","$event","_r1","formValues","language","ContentExportComponent_Conditional_5_For_17_Template","recordExport","ContentExportComponent_Conditional_5_Conditional_26_Template","languageReferences","resourcesReferences","closeDialog","exportContent","languages","hasIdList","ngForm_r4","form","valid","ContentExportComponent","constructor","dialogRef","route","hostClass","contentExportService","transient","ContentExportService","contentTypesService","dialogConfigSvc","DialogConfigAppService","loading$","BehaviorSubject","contentType$","contentTypeStaticName","snapshot","paramMap","selectedIds","split","id","parseInt","ngOnInit","next","dialogSettings$","getCurrent$","forkJoin","subscribe","dialogSettings","Context","Language","List","defaultLanguage","Primary","ngOnDestroy","complete","close","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_3__","VBU","selectors","hostVars","hostBindings","rf","ctx","ContentExportComponent_Conditional_5_Template","tmp_0_0","Name","FormsModule","i3","MatFormFieldModule","i4","MatSelectModule","i5","i6","MatOptionModule","MatRadioModule","i7","MatDialogActions","MatButtonModule","i8","AsyncPipe","styles","logSpecs","all","getEntities","getAvailableEntities","webApiEntityRoot","webApiEntityList","EntityService","dnnContext","log","classLog","queryService","QueryService","getEntities$","fnIf","filter","p","switchMap","contentTypeName","shareReplay","entitiesFilter","contentTypes","fields","data","Default","entityId","force","parentId","parentField","parent","$2sxc","toString","_angular_core__WEBPACK_IMPORTED_MODULE_7__","inject","DnnContext","HttpClient","context","_angular_core__WEBPACK_IMPORTED_MODULE_1__","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","Guids","join"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/content-export/content-export.component.html","./projects/eav-ui/src/app/content-export/content-export.component.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/http-service-base.ts","./projects/eav-ui/src/app/shared/services/query.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Export {{ (contentType$ | async)?.Name }}</div>\r\n  </div>\r\n  @if ((loading$ | async) === false) {\r\n  <form #ngForm=\"ngForm\">\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This will generate an XML file which you can edit in Excel. If you just want to import new data, use this to\r\n        export the schema that you can then fill in using Excel. Please visit\r\n        <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n      </p>\r\n      <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n        <div>\r\n          <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n            <mat-label>Languages</mat-label>\r\n            <mat-select [(ngModel)]=\"formValues.language\" name=\"Language\">\r\n              <mat-option value=\"\">All</mat-option>\r\n              @for (lang of languages; track lang) {\r\n              <mat-option [value]=\"lang.NameId\">{{ lang.NameId }}</mat-option>\r\n              }\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <p class=\"eav-radio-group-label\">Export data</p>\r\n          <mat-radio-group [(ngModel)]=\"formValues.recordExport\" name=\"RecordExport\" class=\"eav-radio-group\">\r\n            <mat-radio-button value=\"Blank\">No, just export blank data schema (for new data import)\r\n            </mat-radio-button>\r\n            <mat-radio-button value=\"All\">Yes, export all content-items</mat-radio-button>\r\n            @if (hasIdList) {\r\n            <mat-radio-button value=\"Selection\">\r\n              Export selected {{ itemIds.length }} items\r\n            </mat-radio-button>\r\n            }\r\n          </mat-radio-group>\r\n        </div>\r\n        <div>\r\n          <p class=\"eav-radio-group-label\">Value references to other languages</p>\r\n          <mat-radio-group [(ngModel)]=\"formValues.languageReferences\" name=\"LanguageReferences\"\r\n            [disabled]=\"formValues.recordExport === 'Blank'\" class=\"eav-radio-group\">\r\n            <mat-radio-button value=\"Link\">Keep references to other languages (for re-import)\r\n            </mat-radio-button>\r\n            <mat-radio-button value=\"Resolve\">Replace references with values</mat-radio-button>\r\n          </mat-radio-group>\r\n        </div>\r\n        <div>\r\n          <p class=\"eav-radio-group-label\">File / page references</p>\r\n          <mat-radio-group [(ngModel)]=\"formValues.resourcesReferences\" name=\"ResourcesReferences\"\r\n            [disabled]=\"formValues.recordExport === 'Blank'\" class=\"eav-radio-group\">\r\n            <mat-radio-button value=\"Link\">Keep references (for re-import, for example Page:4711)\r\n            </mat-radio-button>\r\n            <mat-radio-button value=\"Resolve\">Replace references with real URLs (for example\r\n              /Portals/0...)\r\n            </mat-radio-button>\r\n          </mat-radio-group>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!ngForm.form.valid\" (click)=\"exportContent()\">\r\n        Export Data\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </form>\r\n  }\r\n</div>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExport } from './models/content-export.model';\r\nimport { ContentExportService } from './services/content-export.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { transient } from '../core';\r\nimport { Language } from '../shared/models/language.model';\r\nimport { DialogConfigAppService } from '../app-administration/services/dialog-config-app.service';\r\n\r\n@Component({\r\n  selector: 'app-content-export',\r\n  templateUrl: './content-export.component.html',\r\n  styleUrls: ['./content-export.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatRadioModule,\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    AsyncPipe,\r\n  ],\r\n})\r\nexport class ContentExportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private contentExportService = transient(ContentExportService);\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private dialogConfigSvc = transient(DialogConfigAppService);\r\n\r\n  formValues: ContentExport;\r\n  languages: Language[];\r\n  itemIds: number[];\r\n  hasIdList = false;\r\n  loading$ = new BehaviorSubject(false);\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentExportComponent>,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    const selectedIds = this.route.snapshot.paramMap.get('selectedIds');\r\n    this.hasIdList = !!selectedIds;\r\n    if (this.hasIdList) {\r\n      this.itemIds = selectedIds.split(',').map(id => parseInt(id, 10));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.dialogConfigSvc.getCurrent$();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.languages = dialogSettings.Context.Language.List;\r\n\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentTypeStaticName: this.contentTypeStaticName,\r\n        language: '',\r\n        recordExport: this.hasIdList ? 'Selection' : 'All',\r\n        languageReferences: 'Link',\r\n        resourcesReferences: 'Link',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportContent() {\r\n    this.contentExportService.exportContent(this.formValues,\r\n      this.hasIdList && this.formValues.recordExport === 'Selection' ? this.itemIds : null);\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { EntityBasic } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { transient } from '../../core';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n @Injectable()\r\n export class EntityService {\r\n  \r\n  log = classLog({EntityService}, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext) { }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { inject, Injectable } from '@angular/core';\r\nimport { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { Context } from '../../shared/services/context';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n/**\r\n * Base class for all services that need to make HTTP calls.\r\n * Provides important typical information and services, especially\r\n * * apiUrl(name) - to get the full API URL\r\n * * appId - the current app id\r\n * * zoneId - the current zone id\r\n */\r\n@Injectable()\r\nexport class HttpServiceBase {\r\n\r\n  protected dnnContext = inject(DnnContext);\r\n  protected http = inject(HttpClient);\r\n  protected context = inject(Context);\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Convert a short 2sxc-url into the correct full URL on the system.\r\n   * @param name 2sxc-style short url\r\n   * @returns \r\n   */\r\n  protected apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  /**\r\n   * The current app id\r\n   */\r\n  protected get appId() { return this.context.appId.toString(); }\r\n\r\n  /**\r\n   * The current zone id\r\n   */\r\n  protected get zoneId() { return this.context.zoneId.toString(); }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Context } from './context';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getAvailableEntities(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}