{"version":3,"file":"default-projects_eav-ui_src_app_edit_shared_controls_ui-control_ts-projects_eav-ui_src_app_sh-27362b.e08d8c2341d5a3dc.js","mappings":"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","names":["DebugFields","environment","production","logSpecs","all","constructor","markTouched","set","disable","fields","UiControl","control","name","moreDisabled","this","log","classLog","dirty","invalid","touched","value","disabled","extendName","aIfInList","emptyControl","touchedAndInvalid","setIfChanged","newValue","markAsTouched","FieldValueHelpers","fieldValuesAreEqual","markAsDirty","patchValue","updateValueAndValidity","enable","x","y","isNaN","Array","isArray","RxHelpers","arraysEqual","getItemValuesChanges","oldValues","newValues","changes","key","Object","keys","length","undefined","EntityEditService","http","context","dnnContext","create","contentType","entity","post","params","appId","zoneId","update","entityId","delete","type","id","tryForce","$2sxc","apiUrl","webApiEntityRoot","toString","force","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","getEntities","getAvailableEntities","webApiEntityList","EntityService","queryService","transient","QueryService","getEntities$","fnIf","pipe","filter","p","switchMap","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","map","data","Default","parentId","parentField","parent","_angular_core__WEBPACK_IMPORTED_MODULE_7__","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","selectors","standalone","features","decls","vars","template","rf","ctx","styles","encapsulation","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","add","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","inputs","None","HasDecoratorInputTransform","booleanAttribute","MatBadgeModule","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/edit/edit-debug.ts","./projects/eav-ui/src/app/edit/shared/controls/ui-control.ts","./projects/eav-ui/src/app/edit/shared/helpers/field-value.helpers.ts","./projects/eav-ui/src/app/shared/services/entity-edit.service.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { environment } from '../../environments/environment';\r\n\r\n/**\r\n * List of fields to debug across the entire application.\r\n * \r\n * Change as you need, but after debugging, best set it back to [].\r\n */\r\nexport const DebugFields: string[] = !environment.production\r\n  // ? ['StringPicker']\r\n  // ? ['NumberInputAddUntillDevisibleBy5']\r\n  ? ['WysiwygConfiguration']\r\n  // ? ['Title']\r\n  // ? [] // no fields\r\n  // ? ['*'] // all fields\r\n  : [];\r\n","import { AbstractControl } from '@angular/forms';\r\nimport { FieldValue } from '../../../../../../edit-types';\r\nimport { classLog } from '../../../shared/logging';\r\nimport { FieldValueHelpers } from '../helpers/field-value.helpers';\r\nimport { DebugFields } from '../../edit-debug';\r\n\r\nconst logSpecs = {\r\n  all: true,\r\n  constructor: true,\r\n  markTouched: true,\r\n  set: true,\r\n  disable: true,\r\n  fields: [...DebugFields, 'StringPicker'] as string[], // examples: ['SomeField'] or ['*'] for all\r\n};\r\n\r\n/**\r\n * Provides information about the UI Control, but NOT the value.\r\n * It is used to simplify the logic when interacting with the Angular Virtual Form.\r\n */\r\nexport class UiControl {\r\n\r\n  log = classLog({UiControl}, logSpecs, false);\r\n\r\n  constructor(\r\n    public control: AbstractControl,\r\n    private name = 'unknown',\r\n    private moreDisabled: boolean = false,\r\n  ) {\r\n    // Patch control with dummy object for the nullable case where we're just creating a fake control...\r\n    this.control ??= { dirty: false, invalid: false, touched: false, value: null, disabled: false } as AbstractControl;\r\n    this.log.extendName(`[${name}]`);\r\n    this.log.aIfInList('fields', this.name, { moreDisabled }, 'constructor');\r\n  }\r\n\r\n  static emptyControl() {\r\n    return new UiControl({ dirty: false, invalid: false, touched: false, value: null, disabled: false } as AbstractControl);\r\n  }\r\n\r\n  //#region simple direct properties\r\n  get dirty() { return this.control.dirty; }\r\n  get invalid() { return this.control.invalid; }\r\n  get touched() { return this.control.touched; }\r\n  //#endregion\r\n\r\n  //#region complex properties\r\n  get disabled() { return this.control.disabled || this.moreDisabled; }\r\n  get touchedAndInvalid() { return this.control.touched && this.control.invalid; }\r\n  //#endregion\r\n\r\n  //#region methods\r\n  \r\n  markTouched(): void {\r\n    this.log.aIfInList('fields', this.name, null, 'markTouched');\r\n    UiControl.markTouched(this.control);\r\n  }\r\n\r\n  setIfChanged(newValue: FieldValue): void {\r\n    this.log.aIfInList('fields', this.name, { newValue }, 'setIfChanged');\r\n    if (newValue === this.control.value) return;\r\n    this.set(newValue);\r\n  }\r\n\r\n  /** Use to update form controls value */\r\n  set(newValue: FieldValue): void {\r\n    this.log.aIfInList('fields', this.name, { newValue }, 'set');\r\n    const control = this.control;\r\n    if (!control.touched)\r\n      control.markAsTouched();\r\n\r\n    if (!control.dirty && !FieldValueHelpers.fieldValuesAreEqual(control.value, newValue))\r\n      control.markAsDirty();\r\n\r\n    control.patchValue(newValue);\r\n  }\r\n\r\n  disable(disable: boolean): void {\r\n    this.log.aIfInList('fields', this.name, null, `disable: ${disable}`);\r\n    UiControl.disable(this.control, disable);\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region private helpers\r\n\r\n  /** TODO: Try to remove this by assigning controls [formControlName] in [formGroup] */\r\n  static markTouched(control: AbstractControl): void {\r\n    if (control.touched)\r\n      return;\r\n\r\n    control.markAsTouched();\r\n    control.updateValueAndValidity();\r\n  }\r\n\r\n  /** Disables/enables control if not already disabled/enabled. Use this helper to trigger fewer events on the form */\r\n  static disable(control: AbstractControl, disable: boolean) {\r\n    if (control.disabled === disable)\r\n      return;\r\n\r\n    if (disable)\r\n      control.disable();\r\n    else\r\n      control.enable();\r\n  }\r\n  //#endregion\r\n}","import { FieldValue } from '../../../../../../edit-types';\r\nimport { RxHelpers } from '../../../shared/rxJs/rx.helpers';\r\nimport { ItemValuesOfLanguage } from '../../state/item-values-of-language.model';\r\n\r\n\r\nexport class FieldValueHelpers {\r\n  /** Detect if two values are equal, incl. special NaN and Array checks */\r\n  static fieldValuesAreEqual(x: FieldValue, y: FieldValue): boolean {\r\n    if (x === y) return true;\r\n    if (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y)) return true;\r\n    if (Array.isArray(x) && Array.isArray(y) && RxHelpers.arraysEqual(x, y)) return true;\r\n    return false;\r\n  }\r\n\r\n  /** Searches where newValues has values different from oldValues */\r\n  static getItemValuesChanges(oldValues: ItemValuesOfLanguage, newValues: ItemValuesOfLanguage): ItemValuesOfLanguage {\r\n    const changes: ItemValuesOfLanguage = {};\r\n    for (const key of Object.keys(newValues)) {\r\n      const newValue = newValues[key];\r\n      const oldValue = oldValues[key];\r\n      if (FieldValueHelpers.fieldValuesAreEqual(newValue, oldValue))\r\n        continue;\r\n\r\n      changes[key] = newValue;\r\n    }\r\n    return Object.keys(changes).length === 0 ? undefined : changes;\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { ItemInListIdentifier } from '../models/edit-form.model';\r\nimport { Context } from './context';\r\nimport { webApiEntityRoot } from './entity.service';\r\n\r\n@Injectable()\r\nexport class EntityEditService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\ninterface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\ninterface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { EntityBasic } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { transient } from '../../core';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n @Injectable()\r\n export class EntityService {\r\n  \r\n  log = classLog({EntityService}, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext) { }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[5]}