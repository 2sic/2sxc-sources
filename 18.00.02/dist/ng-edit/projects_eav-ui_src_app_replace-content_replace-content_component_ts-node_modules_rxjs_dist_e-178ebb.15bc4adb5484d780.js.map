{"version":3,"file":"projects_eav-ui_src_app_replace-content_replace-content_component_ts-node_modules_rxjs_dist_e-178ebb.15bc4adb5484d780.js","mappings":"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","names":["i0","option_r3","$event","_r1","ctx_r1","setFilter","select","ReplaceContentComponent_Conditional_0_mat_option_16_Template","copySelected","closeDialog","save","vm_r4","isAddMode","auto_r5","filterText","filteredOptions","length","isMatch","ReplaceContentComponent","#guid","#part","#index","#add","#filterText$","#options$","#contentTypeName","#contentGroupSvc","#dialogRoutes","constructor","dialogRef","snackBar","this","hostClass","transient","ContentGroupService","DialogRoutingService","ngOnInit","snapshot","paramMap","get","parseInt","queryParamMap","BehaviorSubject","filteredOptions$","combineLatest","pipe","map","options","filter","option","label","toLocaleLowerCase","includes","viewModel$","fetchConfig","doOnDialogClosed","editResult","router","getCurrentNavigation","extras","state","cloneId","Object","keys","ngOnDestroy","complete","close","next","event","value","contentGroup","buildContentGroup","form","items","EditPrep","copy","id","formUrl","convertFormToUrl","navRelative","open","saveItem","subscribe","duration","isRefresh","getItems","replaceConfig","entries","Items","itemId","itemName","add","newId","SelectedId","newFilter","find","ContentTypeName","guid","part","index","static","t","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_4__","VBU","selectors","hostVars","hostBindings","rf","ctx","ReplaceContentComponent_Conditional_0_Template","tmp_0_0","RouterOutlet","MatFormFieldModule","i3","MatInputModule","i4","MatAutocompleteModule","i5","i6","FormsModule","i7","CdkVirtualScrollViewport","CdkFixedSizeVirtualScroll","CdkVirtualForOf","MatOptionModule","MatButtonModule","i8","MatIconModule","i9","MatDialogActions","AsyncPipe","styles","logSpecs","enabled","name","specs","ServiceBase","route","super","log","EavLogger","destroy","url","callback","l","fnIf","subscriptions","childDialogClosed$","end","navPath","navigate","commands","relativeTo","navParentFirstChild","parent","firstChild","events","NavigationEnd","startWith","pairwise","hadChildBefore","hasChildNow","_angular_core__WEBPACK_IMPORTED_MODULE_7__","jDH","factory","Éµfac","Subscription","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__","delayWhen","delayDurationSelector","subscriptionDelay","source","concat","take","ignoreElements","operate","subscriber","createOperatorSubscriber","noop","mergeMap","innerFrom","mapTo","delay","due","scheduler","asyncScheduler","timer"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/replace-content/replace-content.component.html","./projects/eav-ui/src/app/replace-content/replace-content.component.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./node_modules/rxjs/dist/esm/internal/operators/delayWhen.js","./node_modules/rxjs/dist/esm/internal/operators/ignoreElements.js","./node_modules/rxjs/dist/esm/internal/operators/delay.js"],"sourcesContent":["@if (viewModel$ | async; as vm) {\r\n\r\n<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ vm.isAddMode ? 'Add Existing Item' : 'Replace Content Item' }}</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <router-outlet></router-outlet>\r\n    <p>{{vm.isAddMode\r\n      ? 'Select a content-item to add to this list.'\r\n      : 'By replacing a content-item you can make other content appear in the slot of the original content.'}}\r\n    </p>\r\n    <div class=\"eav-options-box\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n        <mat-label>Choose item</mat-label>\r\n        <input matInput [matAutocomplete]=\"auto\" [ngModel]=\"vm.filterText\" (ngModelChange)=\"setFilter($event)\">\r\n        <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"select($event)\"\r\n          [hideSingleSelectionIndicator]=\"true\">\r\n          <cdk-virtual-scroll-viewport itemSize=\"48\" minBufferPx=\"500\" maxBufferPx=\"1000\"\r\n            [style.height.px]=\"vm.filteredOptions.length < 6 ? vm.filteredOptions.length * 48 : 240\">\r\n            <mat-option *cdkVirtualFor=\"let option of vm.filteredOptions\" [value]=\"option\">{{ option }}</mat-option>\r\n          </cdk-virtual-scroll-viewport>\r\n        </mat-autocomplete>\r\n      </mat-form-field>\r\n      <button mat-icon-button tippy=\"Copy\" [disabled]=\"!vm.isMatch\" (click)=\"copySelected()\">\r\n        <mat-icon>file_copy</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!vm.isMatch\" (click)=\"save()\">Save</button>\r\n  </mat-dialog-actions>\r\n</div>\r\n}\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatAutocompleteSelectedEvent, MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, map, Observable } from 'rxjs';\r\nimport { ContentGroupAdd } from '../manage-content-list/models/content-group.model';\r\nimport { ContentGroupService } from '../manage-content-list/services/content-group.service';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { ReplaceOption } from './models/replace-option.model';\r\nimport { ReplaceContentViewModel } from './replace-content.models';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { CdkVirtualScrollViewport, CdkFixedSizeVirtualScroll, CdkVirtualForOf } from '@angular/cdk/scrolling';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { transient } from '../core';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\n\r\n@Component({\r\n  selector: 'app-replace-content',\r\n  templateUrl: './replace-content.component.html',\r\n  styleUrls: ['./replace-content.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    RouterOutlet,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatAutocompleteModule,\r\n    FormsModule,\r\n    CdkVirtualScrollViewport,\r\n    CdkFixedSizeVirtualScroll,\r\n    CdkVirtualForOf,\r\n    MatOptionModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n  ],\r\n})\r\nexport class ReplaceContentComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  viewModel$: Observable<ReplaceContentViewModel>;\r\n\r\n  #guid: string;\r\n  #part: string;\r\n  #index: number;\r\n  #add: boolean;\r\n  #filterText$: BehaviorSubject<string>;\r\n  #options$: BehaviorSubject<ReplaceOption[]>;\r\n  #contentTypeName: string;\r\n\r\n  #contentGroupSvc = transient(ContentGroupService);\r\n  #dialogRoutes = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ReplaceContentComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    const snapshot = this.#dialogRoutes.snapshot;\r\n    this.#guid = snapshot.paramMap.get('guid');\r\n    this.#part = snapshot.paramMap.get('part');\r\n    this.#index = parseInt(snapshot.paramMap.get('index'), 10);\r\n    this.#add = !!snapshot.queryParamMap.get('add');\r\n\r\n    this.#filterText$ = new BehaviorSubject('');\r\n    this.#options$ = new BehaviorSubject([]);\r\n\r\n    // TODO: @2dg - this should be easy to get rid of #remove-observables\r\n    const filteredOptions$ = combineLatest([this.#filterText$, this.#options$]).pipe(\r\n      map(([filterText, options]) =>\r\n        options.filter(option => option.label.toLocaleLowerCase().includes(filterText.toLocaleLowerCase())).map(option => option.label)\r\n      ),\r\n    );\r\n    this.viewModel$ = combineLatest([this.#filterText$, filteredOptions$]).pipe(\r\n      map(([filterText, filteredOptions]) => {\r\n        const viewModel: ReplaceContentViewModel = {\r\n          filterText,\r\n          filteredOptions,\r\n          isAddMode: this.#add,\r\n          isMatch: filteredOptions.includes(filterText),\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n\r\n    this.fetchConfig(false, null);\r\n\r\n    this.#dialogRoutes.doOnDialogClosed(() => {\r\n      const navigation = this.#dialogRoutes.router.getCurrentNavigation();\r\n      const editResult = navigation.extras?.state;\r\n      const cloneId: number = editResult?.[Object.keys(editResult)[0]];\r\n      this.fetchConfig(true, cloneId);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.#filterText$.complete();\r\n    this.#options$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  setFilter(filterText: string) {\r\n    this.#filterText$.next(filterText);\r\n  }\r\n\r\n  select(event: MatAutocompleteSelectedEvent) {\r\n    this.#filterText$.next(event.option.value);\r\n  }\r\n\r\n  copySelected() {\r\n    const contentGroup = this.buildContentGroup();\r\n    const form: EditForm = {\r\n      items: [EditPrep.copy(this.#contentTypeName, contentGroup.id)],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRoutes.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    const contentGroup = this.buildContentGroup();\r\n    this.#contentGroupSvc.saveItem(contentGroup).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  private fetchConfig(isRefresh: boolean, cloneId: number) {\r\n    const contentGroup = this.buildContentGroup();\r\n    this.#contentGroupSvc.getItems(contentGroup).subscribe(replaceConfig => {\r\n      const options = Object.entries(replaceConfig.Items).map(([itemId, itemName]) => {\r\n        const option: ReplaceOption = {\r\n          id: parseInt(itemId, 10),\r\n          label: `${itemName} (${itemId})`,\r\n        };\r\n        return option;\r\n      });\r\n      this.#options$.next(options);\r\n\r\n      // don't set selected option if dialog should be in add-mode and don't change selected option on refresh unless it's cloneId\r\n      if ((!contentGroup.add && !isRefresh) || cloneId != null) {\r\n        const newId = !isRefresh ? replaceConfig.SelectedId : cloneId;\r\n        const newFilter = this.#options$.value.find(option => option.id === newId)?.label || '';\r\n        this.#filterText$.next(newFilter);\r\n      }\r\n      this.#contentTypeName = replaceConfig.ContentTypeName;\r\n    });\r\n  }\r\n\r\n  private buildContentGroup() {\r\n    const id = this.#options$.value.find(option => option.label === this.#filterText$.value)?.id ?? null;\r\n\r\n    const contentGroup: ContentGroupAdd = {\r\n      id,\r\n      guid: this.#guid,\r\n      part: this.#part,\r\n      index: this.#index,\r\n      add: this.#add,\r\n    };\r\n    return contentGroup;\r\n  }\r\n}\r\n","import { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  enabled: false,\r\n  name: 'DialogRoutingService',\r\n  specs: {\r\n    doOnDialogClosed: true,\r\n  }\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase implements OnDestroy {\r\n\r\n  log = new EavLogger(logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.destroy();\r\n  }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => { callback(); })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public navParentFirstChild(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route.parent.firstChild });\r\n  }\r\n  \r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/** Base class for services, withOUT logging */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  // todo use this instead\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n  // Note: we can't do this, because angular compiler complains about wanting to implement OnDestroy\r\n  // and if we do that, it will want a decorator, which we can't have here.\r\n  // ngOnDestroy() {\r\n  //   this.destroy();\r\n  // }\r\n\r\n}\r\n","import { concat } from '../observable/concat';\nimport { take } from './take';\nimport { ignoreElements } from './ignoreElements';\nimport { mapTo } from './mapTo';\nimport { mergeMap } from './mergeMap';\nimport { innerFrom } from '../observable/innerFrom';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n    }\n    return mergeMap((value, index) => innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value)));\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function ignoreElements() {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, noop));\n    });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\nexport function delay(due, scheduler = asyncScheduler) {\n    const duration = timer(due, scheduler);\n    return delayWhen(() => duration);\n}\n"],"x_google_ignoreList":[4,5,6]}