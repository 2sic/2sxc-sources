{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts-projects_eav-ui_src_app_shar-d0da70.1d62b988dbf635d8.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","staticName","this","http","get","apiUrl","params","appId","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","ExportAppPartsService","constructor","context","dnnContext","getContentInfo","$2sxc","webApiAppPartsRoot","toString","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","i0","i1","i2","i3","ExportAppService","getAppInfo","webApiAppRoot","exportAppUrl","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","_angular_core__WEBPACK_IMPORTED_MODULE_6__","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","export","getPolymorphism","getUsage","guid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","EntityFilterComponent","filter","idFilterString","idFilter","agInit","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","data","node","getValue","field","some","includes","items","headerName","idFltr","itm","getModel","filterType","setModel","model","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","el","parseInt","isNaN","filterChanged","filterChangedCallback","core","VBU","selectors","viewQuery","rf","ctx","$event","_r1","FormsModule","MatRadioModule","MatFormFieldModule","MatInputModule","styles","_r2","ctx_r2","do","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","refresh","verb","standalone","features","decls","vars","consts","template","ContentItemsActionsComponent_ng_template_12_Template","menu_r4","MatRippleModule","MatIconModule","MatMenuModule","ctx_r0","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","TippyDirective","ctx_r1","openMetadata","_c0","metadataCount","metadata","metadataTooltip","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","onOpenMetadata","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","NgClass","MatBadgeModule","metadataKeyValidator","form","control","keyType","controls","testValue","eavConstants","keyTypes","number","test","patternWholeNumber","hasCurly","bracket","substring","guidRegex","patternGuid","option_r2","targetType","label","vm_r3","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_14_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Conditional_3_Template","ctx_r3","targetTypeOptions","unknownTargetType","targetTypeHint","option_r5","contentType_r6","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_27_For_5_Template","contentTypes","scopeOption_r7","CreateMetadataDialogComponent_Conditional_0_Conditional_28_For_5_Template","scopeOptions","dropdownInsertValue","item_r8","Guid","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_1_Template","guidedKey","contentType_r9","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_ng_container_0_Template","defaultKeyInput_r10","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_Template","tmp_4_0","entity","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_1_Template","_r11","toggleGuidedKey","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_15_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_16_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_For_25_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_26_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_27_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_40_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_43_Template","toggleGuidedMode","closeDialog","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","valid","CreateMetadataDialogComponent","BaseComponent","dialogRef","super","hostClass","contentItemsService","transient","ContentItemsService","contentTypesService","ngOnInit","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","default","subscriptions","add","scopeForContentTypes","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","contentTypeStaticName","formValues$","mapUntilObjChanged","m","combineLatest","foundTargetType","find","RxHelpers","arraysEqual","updatedForm","isAppMetadata","app","UiControl","disable","viewModel$","hint","ngOnDestroy","complete","result","close","event","checked","target","hostVars","hostBindings","CreateMetadataDialogComponent_Conditional_0_Template","tmp_0_0","ReactiveFormsModule","i4","MatSelectModule","i5","i6","MatOptionModule","i7","NgTemplateOutlet","MatButtonModule","i8","i9","MatDialogActions","MatSlideToggleModule","i10","AsyncPipe","FieldHintComponent","ClickStopPropagationDirective","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","debugFilter","ContentItemsComponent","#entitiesSvc","#contentExportSvc","#contentItemsSvc","#contentTypesSvc","#dialogRouter","snackBar","dialog","viewContainerRef","changeDetectorRef","log","classLog","isDebug","inject","GlobalConfigService","EntityEditService","ContentExportService","DialogRoutingService","signal","undefined","gridOptions","defaultGridOptions","#gridApi$","#contentTypeStaticName","getParam","fetchContentType","fetchItems","fetchColumns","doOnDialogClosed","onGridReady","set","getColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","JsonHelpers","tryParse","v","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","a","setFilterModel","GoToMetadata","getUrlEntity","_Title","navRelative","editItem","EditPrep","newFromType","editId","formUrl","convertFormToUrl","exportContent","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","filesDropped","importFile","lastIndexOf","toLocaleLowerCase","importContent","importItem","state","createMetadata","autoFocus","width","afterClosed","itemFor","newMetadataFromInfo","markForCheck","warn","duration","ColumnDefinitions","IdWithDefaultRenderer","cellClass","p","ReadOnly","cellRendererParams","idFieldParamsTooltipGetter","headerClass","cellRenderer","TextWidePrimary","flex","onCellClicked","headerTooltip","sortable","_Used","_Uses","ActionsPinnedRight3","clone","minWidth","Type","DataTypeCatalog","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","Number","copy","exportEntity","_RepositoryId","err","dismiss","ExceptionMessage","rawValue","ContentItemsComponent_Conditional_9_Template","ContentItemsComponent_Conditional_34_Template","Name","tmp_1_0","Properties","ListInstructions","RouterOutlet","SafeHtmlPipe","DragAndDropDirective","ToggleDebugDirective","SxcGridModule","encapsulation","TrueFalseComponent","trueIcon","falseIcon","reverse","icon","_angular_core__WEBPACK_IMPORTED_MODULE_0__","ImportAppService","importApp","changedName","retryOnDuplicate","MessageType","FileUploadMessageTypes","Warning","folderName","Text","of","_angular_core__WEBPACK_IMPORTED_MODULE_4__","AgBoolCellIconsDefault","states","true","tooltip","false","AgBoolIconRenderer_Conditional_1_ng_container_1_Template","showIcon_r2","clickable","AgBoolIconRenderer","allSettings","settings","d","getUrl","AgBoolIconRenderer_Conditional_1_Template","AgBoolIconRenderer_Conditional_2_Template","AgBoolIconRenderer_ng_template_3_Template","cellClassSecAction","actionsRight","pinned","textSortFilter","ActionsPinnedRight1","ActionsPinnedRight4","ActionsPinnedRight5","ActionsPinnedRight6","ActionsPinnedRight7","IconShow","IsHidden","Items","Fields","Character","IdFieldComponent","Boolean2","Boolean3","TextWide","TextWideMin100","TextWideFlex3","TextNarrow","TextWideActionClass","tooltipGetter","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","inputs","ngContentSelectors","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","align","copyToClipboard","onClick","stopPropagation","preventDefault","FsC","globalConfigService","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","webApiFieldsRoot","webApiFieldsAll","webApiFieldsGetShared","ContentTypesFieldsService","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","indexOf","inputType","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","getReservedNames","getFields","fields","fld","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","addInheritedField","targetContentTypeId","sourceContentTypeStaticName","sourceFieldGuid","newName","ContentTypeId","SourceType","SourceField","share","inherit","inheritMetadataOf","reOrder","idArray","order","stringify","setTitle","rename","fieldId","IsTitle","Error","newField","Index","SortOrder","updateInputType","_angular_core__WEBPACK_IMPORTED_MODULE_3__","Custom","Empty","Hyperlink","String","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","readAsText","logSpecs","ServiceBase","router","route","snapshot","paramMap","getParams","reduce","acc","getQueryParam","queryParamMap","getQueryParams","getCurrentNavigation","extras","callback","l","fnIf","childDialogClosed$","end","navPath","navigate","commands","relativeTo","navParentFirstChild","parent","firstChild","events","NavigationEnd","pairwise","hadChildBefore","hasChildNow","_angular_core__WEBPACK_IMPORTED_MODULE_7__","mapUntilChanged","fn","isEqual","boolEquals","x","y","stringEquals","valueEquals","objectsEqual","obj1","obj2","keys1","keys2","every","key1","hasOwnProperty","index","distinct","array","DnnContext","HttpClient","Context","all","getAvailableEntities","getEntities","QueryService","queryUrl","entitiesFilter","hasParams","urlParams","Guids","itemIds","Subscription","destroy","unsubscribe"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.html","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-params.ts","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.component.ts","./projects/eav-ui/src/app/shared/ag-grid/column-definitions.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.html","./projects/eav-ui/src/app/shared/constants/dropdown-insert-value.constant.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/fields/data-type-catalog.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts","./projects/eav-ui/src/app/shared/rxJs/rx.helpers.ts","./projects/eav-ui/src/app/shared/services/http-service-base.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.dnnContext.$2sxc.http.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.context.appId}&zoneId=${this.context.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n  ]\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Copy\" (click)=\"do('clone')\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\" eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"do('export')\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams, ContentItemType } from './content-items-actions.models';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n  ],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ICellRendererParams & ContentItemsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsParams): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n\r\n  do(verb: ContentItemType): void {\r\n    this.params.do(verb, this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n  <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n  standalone: true,\r\n  imports: [TippyDirective,],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) return;\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n  <div class=\"eav-grid-action-button highlight\" matRipple\r\n    [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\"\r\n      matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  }\r\n  @if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n  <div class=\"eav-grid-action-button disabled\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty'\r\n      : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  }\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    MatRippleModule,\r\n    NgClass,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ICellRendererParams & ContentItemsStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusParams): void {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata(): void {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <p>\r\n      This is a special operation to add an item which is metadata for another item,\r\n      see <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n    </p>\r\n    <form [formGroup]=\"form\">\r\n      <!-- Target Type -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Target</mat-label>\r\n        @if (vm.guidedMode) {\r\n        <mat-select formControlName=\"targetType\" required>\r\n          @for (option of targetTypeOptions; track option) {\r\n          <mat-option [value]=\"option.targetType\">\r\n            {{ option.label }}\r\n          </mat-option>\r\n          }\r\n          @if (vm.unknownTargetType) {\r\n          <mat-option [value]=\"vm.formValues.targetType\">\r\n            {{ vm.formValues.targetType }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n        }\r\n        @if (!vm.guidedMode) {\r\n        <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required>\r\n        }\r\n      </mat-form-field>\r\n      @if (form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType) {\r\n      <app-field-hint [isError]=\"false\">\r\n        Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're\r\n        doing\r\n      </app-field-hint>\r\n      }\r\n      @if (vm.targetTypeHint) {\r\n      <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n      }\r\n      @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.required) {\r\n      <app-field-hint [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      }\r\n      @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern) {\r\n      <app-field-hint [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      }\r\n      <!-- Key Type -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Key type</mat-label>\r\n        <mat-select formControlName=\"keyType\" required>\r\n          @for (option of vm.keyTypeOptions; track option) {\r\n          <mat-option [value]=\"option\">\r\n            {{ option }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n      @if (form.controls['keyType'].touched && form.controls['keyType'].errors?.required) {\r\n      <app-field-hint [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      }\r\n      <!-- Content Type for Content Items -->\r\n      @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Content Type</mat-label>\r\n        <mat-select formControlName=\"contentTypeForContentItems\"\r\n          [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n          @for (contentType of vm.contentTypes; track contentType) {\r\n          <mat-option [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n      }\r\n      <!-- Scope for Content Types -->\r\n      @if (vm.guidedMode && (vm.formValues.targetType === eavConstants.metadata.entity.targetType ||\r\n      vm.formValues.targetType === eavConstants.metadata.contentType.targetType)) {\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Scope</mat-label>\r\n        <mat-select formControlName=\"scopeForContentTypes\"\r\n          [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n          @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n          <mat-option [value]=\"scopeOption.value\">\r\n            {{ scopeOption.name }}\r\n          </mat-option>\r\n          }\r\n          <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      }\r\n      <app-field-hint>\r\n        The scope should almost never be changed -\r\n        <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n      </app-field-hint>\r\n      <!-- Key -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Key</mat-label>\r\n        @if (vm.guidedMode) {\r\n          @switch (vm.formValues.targetType) {\r\n            @case (eavConstants.metadata.entity.targetType) {\r\n              @if (vm.guidedKey) {\r\n              <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                @for (item of vm.contentItems; track item) {\r\n                  <mat-option [value]=\"item.Guid\">\r\n                    {{ item.Title }} ({{ item.Id }})\r\n                  </mat-option>\r\n                }\r\n              </mat-select>\r\n              }\r\n              @else {\r\n                <input matInput type=\"text\" formControlName=\"key\" required>\r\n              }\r\n            }\r\n            @case (eavConstants.metadata.contentType.targetType) {\r\n              @if (vm.guidedKey) {\r\n              <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                @for (contentType of vm.contentTypes; track contentType) {\r\n                  <mat-option [value]=\"contentType.StaticName\">\r\n                    {{ contentType.Label }}\r\n                  </mat-option>\r\n                }\r\n              </mat-select>\r\n              }\r\n              @else {\r\n                <input matInput type=\"text\" formControlName=\"key\" required>\r\n              }\r\n            }\r\n            @default {\r\n              <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n            }\r\n          }\r\n        }\r\n        @else {\r\n          @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n            <input matInput type=\"text\" formControlName=\"key\" required>\r\n          }\r\n          @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n            <input matInput type=\"number\" formControlName=\"key\" required>\r\n          }\r\n        }\r\n        <ng-template #defaultKeyInput>\r\n          @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n            <input matInput type=\"text\" formControlName=\"key\" required>\r\n          }\r\n          @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n            <input matInput type=\"number\" formControlName=\"key\" required>\r\n          }\r\n        </ng-template>\r\n        @if (vm.guidedMode && vm.guidedKeyExists) {\r\n          <div matTextSuffix class=\"eav-selection-suffix\">\r\n            <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\"\r\n              [ngClass]=\"{ 'active': vm.guidedKey }\" tippy=\"Pick existing value\" (click)=\"toggleGuidedKey(true)\">\r\n              <mat-icon class=\"eav-icon\">search</mat-icon>\r\n            </button>\r\n            <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\"\r\n              [ngClass]=\"{ 'active': !vm.guidedKey }\" tippy=\"Manual entry\" (click)=\"toggleGuidedKey(false)\">\r\n              <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n            </button>\r\n          </div>\r\n        }\r\n      </mat-form-field>\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.required) {\r\n        <app-field-hint [isError]=\"true\">\r\n          This field is required\r\n        </app-field-hint>\r\n      }\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber) {\r\n        <app-field-hint [isError]=\"true\">\r\n          Must be a whole number\r\n        </app-field-hint>\r\n      }\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.patternGuid) {\r\n        <app-field-hint [isError]=\"true\">\r\n          Must be a valid GUID\r\n        </app-field-hint>\r\n      }\r\n    </form>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <mat-slide-toggle color=\"accent\"\r\n      [tippy]=\"vm.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n      [checked]=\"vm.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n      {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n    </mat-slide-toggle>\r\n    <div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </mat-dialog-actions>\r\n</div>\r\n}\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { NgTemplateOutlet, NgClass, AsyncPipe } from '@angular/common';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ClickStopPropagationDirective } from '../../shared/directives/click-stop-propagation.directive';\r\nimport { RxHelpers } from '../../shared/rxJs/rx.helpers';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { mapUntilObjChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { transient } from '../../core';\r\nimport { UiControl } from '../../edit/shared/controls/ui-control';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    NgTemplateOutlet,\r\n    MatButtonModule,\r\n    NgClass,\r\n    MatIconModule,\r\n    MatDialogActions,\r\n    MatSlideToggleModule,\r\n    AsyncPipe,\r\n    FieldHintComponent,\r\n    ClickStopPropagationDirective,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n  \r\n  private contentTypesService = transient(ContentTypesService);\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscriptions.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscriptions.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscriptions.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      mapUntilObjChanged(m => m)\r\n      // distinctUntilChanged(RxHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscriptions.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!RxHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value))\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType))\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId)\r\n          updatedForm.key = this.context.appId;\r\n\r\n        if (Object.keys(updatedForm).length)\r\n          this.form.patchValue(updatedForm);\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        UiControl.disable(this.form.controls['keyType'], keyTypeDisabled);\r\n        UiControl.disable(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRadioModule,\r\n    FormsModule,\r\n  ],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ contentType()?.Label || contentType()?.Name }} Data\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    @if (contentType()?.Properties?.ListInstructions; as listInstructions) {\r\n    <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n    }\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items()\" [gridOptions]=\"gridOptions\"\r\n        (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n        (filesDropped)=\"filesDropped($event)\">\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n        <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      @if (isDebug()) {\r\n      <button mat-button class=\"eav-button__with-icon\" color=\"accent\" tippy=\"Print filter to console\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n      }\r\n    </div>\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, inject, OnDestroy, OnInit, signal, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, filter, take } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './content-items-status/content-items-status.models';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntityEditService } from '../shared/services/entity-edit.service';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { SafeHtmlPipe } from '../shared/pipes/safe-html.pipe';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { transient } from '../core';\r\nimport { GlobalConfigService } from '../shared/services/global-config.service';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { classLog } from '../shared/logging';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatDialogActions,\r\n    SafeHtmlPipe,\r\n    DragAndDropDirective,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n\r\n  log = classLog({ContentItemsComponent});\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n\r\n  #entitiesSvc = transient(EntityEditService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  contentType = signal<ContentType>(undefined);\r\n  items = signal<ContentItem[]>(undefined);\r\n\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n  };\r\n\r\n  #gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.fetchItems());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.#gridApi$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.#contentTypesSvc.retrieveContentType(this.#contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType.set(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.#contentItemsSvc.getAll(this.#contentTypeStaticName).subscribe(items => {\r\n      this.items.set(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.#contentItemsSvc.getColumns(this.#contentTypeStaticName).subscribe(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.#gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.#gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.#gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      this.log.a('Will try to apply filter:', filterModel);\r\n      this.#gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.#contentTypeStaticName,\r\n    );\r\n    this.#dialogRouter.navRelative([url]);\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n          : EditPrep.editId(item.Id)\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.#gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.#gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        const contentItem: ContentItem = rowNode.data;\r\n        ids.push(contentItem.Id);\r\n      });\r\n    }\r\n    this.#dialogRouter.navRelative([`export/${this.#contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`]);\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.#dialogRouter.navRelative([`${this.#contentTypeStaticName}/import`], { state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navRelative(['import'], { state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) return;\r\n\r\n      const form: EditForm = {\r\n        items: [ EditPrep.newMetadataFromInfo(this.#contentTypeStaticName, itemFor) ],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.#gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        ...ColumnDefinitions.IdWithDefaultRenderer,\r\n        cellClass: (p: { data: ContentItem }) => `id-action no-padding no-outline ${p.data._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' '),\r\n        cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentItem>()\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsStatusParams = {\r\n            onOpenMetadata: (item) => this.openMetadata(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        ...ColumnDefinitions.TextWidePrimary,\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        onCellClicked: (p: { data: ContentItem }) => this.editItem(p.data),\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (p: { data: ContentItem }) => `${p.data._Used} / ${p.data._Uses}`,\r\n      },\r\n      {\r\n        ...ColumnDefinitions.ActionsPinnedRight3,\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            do: (verb, item) => {\r\n              switch (verb) {\r\n                case 'clone': this.clone(item); break;\r\n                case 'export': this.export(item); break;\r\n                case 'delete': this.delete(item); break;\r\n              }\r\n            }\r\n          } satisfies ContentItemsActionsParams;\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeCatalog.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeCatalog.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [EditPrep.copy(this.#contentTypeStaticName, item.Id)],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.#contentExportSvc.exportEntity(item.Id, this.#contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { JsonHelpers } from '../shared/helpers/json.helpers';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) return;\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) return;\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = JsonHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { TrueFalseParams } from './true-false.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-rest-api-true-false',\r\n  templateUrl: './true-false.component.html',\r\n  standalone: true,\r\n  imports: [MatIconModule],\r\n})\r\nexport class TrueFalseComponent implements ICellRendererAngularComp {\r\n  icon: string;\r\n\r\n  private trueIcon = 'check_circle';\r\n  private falseIcon = 'circle';\r\n\r\n  agInit(params: ICellRendererParams & TrueFalseParams): void {\r\n    let value: boolean = params.value;\r\n    if (params.reverse) { value = !value; }\r\n    if (params.trueIcon) { this.trueIcon = params.trueIcon; }\r\n    if (params.falseIcon) { this.falseIcon = params.falseIcon; }\r\n    this.icon = value ? this.trueIcon : this.falseIcon;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","export interface AgBoolCellIconSetting {\r\n  clickable?: boolean;\r\n  tooltip: string;\r\n  icon: string;\r\n  url?: string;\r\n  getUrl?: (data: any) => string;\r\n}\r\n\r\nexport interface AgBoolCellIconSettings {\r\n  states: Record<'true' | 'false' | string, AgBoolCellIconSetting>;\r\n}\r\n\r\nexport interface AgBoolCellIconsParams<T = any> {\r\n  settings(data: T): AgBoolCellIconSettings;\r\n}\r\n\r\nexport const AgBoolCellIconsDefault: AgBoolCellIconSettings = {\r\n  states: {\r\n    true: {\r\n      tooltip: 'true/on',\r\n      icon: 'radio_button_checked',\r\n    },\r\n    false: {\r\n      tooltip: 'false/off',\r\n      icon: 'radio_button_unchecked',\r\n    }\r\n  }\r\n};","<div class=\"icon-container\">\r\n  @if (data.url) {\r\n    <a [href]=\"data.url\" target=\"_blank\">\r\n      <ng-container *ngTemplateOutlet=\"showIcon\"></ng-container>\r\n    </a>\r\n  } @else {\r\n    <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n      <mat-icon>{{ data.icon }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n\r\n<ng-template #showIcon>\r\n  <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n    <mat-icon>{{ data.icon }}</mat-icon>\r\n  </div>\r\n</ng-template>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { AgBoolCellIconSetting, AgBoolCellIconSettings, AgBoolCellIconsDefault, AgBoolCellIconsParams } from './ag-bool-icon-params';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-ag-bool-icon-renderer',\r\n  templateUrl: './ag-bool-icon-renderer.html',\r\n  standalone: true,\r\n  imports: [\r\n    TippyDirective,\r\n    MatIconModule,\r\n    NgClass,\r\n  ],\r\n})\r\nexport class AgBoolIconRenderer implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  private allSettings: AgBoolCellIconSettings;\r\n\r\n  data: AgBoolCellIconSetting; // | { link: boolean  };\r\n\r\n  agInit(params: ICellRendererParams & AgBoolCellIconsParams): void {\r\n    this.value = params.value;\r\n\r\n    this.allSettings = params.settings?.(params.data) ?? AgBoolCellIconsDefault;\r\n    const d = this.allSettings.states[this.value ? 'true' : 'false'];\r\n    this.data = {\r\n      ...d,\r\n      url: d.url ?? d.getUrl?.(params.data),\r\n      // link: !!(d.url || d.getUrl),\r\n    };\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { ColDef } from '@ag-grid-community/core';\r\nimport { BooleanFilterComponent } from '../components/boolean-filter/boolean-filter.component';\r\nimport { App } from '../../apps-management/models/app.model';\r\nimport { AgBoolIconRenderer } from './apps-list-show/ag-bool-icon-renderer.component';\r\nimport { TrueFalseComponent } from '../../dev-rest/api/true-false/true-false.component';\r\nimport { TrueFalseParams } from '../../dev-rest/api/true-false/true-false.models';\r\nimport { IdFieldComponent } from '../components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../components/id-field/id-field.models';\r\n\r\nconst cellClassSecAction = 'secondary-action no-padding'.split(' ');\r\n\r\nconst actionsRight: ColDef = {\r\n  cellClass: cellClassSecAction,\r\n  pinned: 'right',\r\n};\r\n\r\nconst textSortFilter: ColDef = {\r\n  sortable: true,\r\n  filter: 'agTextColumnFilter',\r\n};\r\n\r\nexport class ColumnDefinitions {\r\n  static ActionsPinnedRight1: ColDef = {\r\n    width: 42,\r\n    ...actionsRight,\r\n  };\r\n\r\n  static ActionsPinnedRight3: ColDef = {\r\n    width: 122,\r\n    ...actionsRight,\r\n  };\r\n\r\n  static ActionsPinnedRight4: ColDef = {\r\n    width: 162,\r\n    ...actionsRight,\r\n  };\r\n\r\n  static ActionsPinnedRight5: ColDef = {\r\n    width: 202,\r\n    ...actionsRight,\r\n  };\r\n\r\n  // TODO: the name here is wrong - 6 indicates 6 buttons, but the size wouldn't allow this\r\n  static ActionsPinnedRight6: ColDef = {\r\n    width: 82,\r\n    ...actionsRight,\r\n  };\r\n\r\n  // TODO: the name here is wrong - 7 indicates 6 buttons, but the size wouldn't allow this\r\n  static ActionsPinnedRight7: ColDef = {\r\n    width: 62,\r\n    cellClass: cellClassSecAction + ' no-outline',\r\n    pinned: 'right',\r\n  };\r\n\r\n  static IconShow: ColDef = {\r\n    headerName: 'Show',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'icons no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: BooleanFilterComponent,\r\n    valueGetter: (params) => {\r\n      const app: App = params.data;\r\n      return !app.IsHidden;\r\n    },\r\n    cellRenderer: AgBoolIconRenderer,\r\n  };\r\n\r\n  static Items: ColDef = {\r\n    width: 102,\r\n    headerClass: 'dense',\r\n    cellClass: cellClassSecAction,\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static Fields: ColDef = {\r\n    width: 94,\r\n    headerClass: 'dense',\r\n    cellClass: cellClassSecAction,\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  /**\r\n   * Very narrow columns, typically just showing 1 character\r\n   */\r\n  static Character: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'no-outline',\r\n    ...textSortFilter,\r\n  };\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Id: ColDef = {\r\n    headerName: 'ID',\r\n    field: 'Id',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'id-action no-padding no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static IdWithDefaultRenderer: ColDef = {\r\n    ...ColumnDefinitions.Id,\r\n    cellRenderer: IdFieldComponent,\r\n  }\r\n\r\n  static Boolean: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    sortable: true,\r\n  };\r\n\r\n  static Boolean2: ColDef = {\r\n    width: 100,\r\n    sortable: true,\r\n    cellClass: 'no-outline',\r\n    filter: BooleanFilterComponent,\r\n  };\r\n\r\n  static Boolean3: ColDef = {\r\n    headerClass: 'dense',\r\n    width: 80,\r\n    cellClass: 'no-outline',\r\n    cellRenderer: TrueFalseComponent,\r\n    cellRendererParams: (() => ({\r\n      reverse: false,\r\n    } satisfies TrueFalseParams))(),\r\n  }\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Number: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextWidePrimary: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action highlight'.split(' '),\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextWide: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextWideMin100: ColDef = {\r\n    flex: 1,\r\n    minWidth: 100,\r\n    ...textSortFilter,\r\n  }\r\n\r\n  static TextWideFlex3: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextNarrow: ColDef = {\r\n    flex: 1,\r\n    minWidth: 150,\r\n    cellClass: 'no-outline',\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextWideActionClass: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action no-padding no-outline'.split(' '),\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static idFieldParamsTooltipGetter<T extends { Id: string | number, Guid?: string }>(key?: keyof T): IdFieldParams<T> {\r\n    const objWithTooltipGetter: IdFieldParams<T> = {\r\n      tooltipGetter: (contentType: T) => `ID: ${contentType.Id}\\nGUID: ${contentType[key || \"Guid\"]}`,\r\n    };\r\n    return objWithTooltipGetter;\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n  ]\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    NgClass,\r\n    NgTemplateOutlet\r\n  ]\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy(): void {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>","export const dropdownInsertValue = 'DROPDOWN_INSERT_VALUE' as const;\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { classLog } from '../logging';\r\n\r\n@Directive({\r\n  selector: '[appClickStopPropagation]',\r\n  standalone: true,\r\n})\r\nexport class ClickStopPropagationDirective {\r\n\r\n  log = classLog({ClickStopPropagationDirective});\r\n\r\n  // Log constructor to detect that it was really attached/created\r\n  constructor() {\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.log.a('onClick', { event });\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n  standalone: true\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\nimport { InputTypeStrict } from './input-type-catalog';\r\nimport { HttpServiceBase } from '../services/http-service-base';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = 'admin/field/all';\r\nexport const webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService extends HttpServiceBase {\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.appId }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputTypeMetadata[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.appId } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.appId, staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * \r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * \r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    // TODO: @SDV - do the same as in getShareableFields()\r\n    // but add parameter attributeId to the webapi call\r\n    // I'll create the backend afterwards\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.appId, attributeId: attributeId.toString() },\r\n      });\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceContentTypeStaticName: string, sourceFieldGuid: string, newName: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'AddInheritedField'), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: targetContentTypeId.toString(),\r\n        SourceType: sourceContentTypeStaticName,\r\n        SourceField: sourceFieldGuid,\r\n        name: newName,\r\n      }\r\n    });\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Share'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Inherit'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: InputTypeStrict) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.appId, attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","export const DataTypeCatalog = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n\r\nexport type DataTypeStrict = typeof DataTypeCatalog[keyof typeof DataTypeCatalog];\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { ServiceBase } from '../services/service-base';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({DialogRoutingService}, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public navParentFirstChild(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route.parent.firstChild });\r\n  }\r\n  \r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n}\r\n","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n","import isEqual from 'lodash-es/isEqual';\r\n\r\nexport class RxHelpers {\r\n\r\n  static boolEquals(x: boolean, y: boolean): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static stringEquals(x: string, y: string): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static valueEquals<T>(x: T, y: T): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static objectsEqual<T>(x: T, y: T): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    const obj1 = x as Record<string, any>;\r\n    const obj2 = y as Record<string, any>;\r\n\r\n    const keys1 = Object.keys(obj1);\r\n    const keys2 = Object.keys(obj2);\r\n    if (keys1.length !== keys2.length) return false;\r\n\r\n    const equal = keys1.every(key1 => {\r\n      if (!obj2.hasOwnProperty(key1)) return false;\r\n\r\n      return obj1[key1] === obj2[key1];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  static arraysEqual<T>(x: T[], y: T[]): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    if (x.length !== y.length) return false;\r\n\r\n    const equal = x.every((item, index) => {\r\n      return x[index] === y[index];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  /** used as .filter(distinct), filters array to only have distinct values */\r\n  static distinct<T>(value: T, index: number, array: T[]): boolean {\r\n    return array.indexOf(value) === index;\r\n  }\r\n\r\n}\r\n","import { inject, Injectable } from '@angular/core';\r\nimport { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { Context } from '../../shared/services/context';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n/**\r\n * Base class for all services that need to make HTTP calls.\r\n * Provides important typical information and services, especially\r\n * * apiUrl(name) - to get the full API URL\r\n * * appId - the current app id\r\n * * zoneId - the current zone id\r\n */\r\n@Injectable()\r\nexport class HttpServiceBase {\r\n\r\n  protected dnnContext = inject(DnnContext);\r\n  protected http = inject(HttpClient);\r\n  protected context = inject(Context);\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Convert a short 2sxc-url into the correct full URL on the system.\r\n   * @param name 2sxc-style short url\r\n   * @returns \r\n   */\r\n  protected apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  /**\r\n   * The current app id\r\n   */\r\n  protected get appId() { return this.context.appId.toString(); }\r\n\r\n  /**\r\n   * The current zone id\r\n   */\r\n  protected get zoneId() { return this.context.zoneId.toString(); }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Context } from './context';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getAvailableEntities(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}