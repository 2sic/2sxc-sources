{"version":3,"file":"default-projects_eav-ui_src_app_content-type-fields_content-type-fields_helpers_ts-projects_e-141689.125da7f6cd23724a.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","constructor","http","context","dnnContext","this","apiUrl","name","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","calculateTypeIcon","typeName","DataTypeCatalog","Boolean","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","calculateTypeLabel","FeatureIconIndicatorComponent","FeatureComponentBase","_angular_core__WEBPACK_IMPORTED_MODULE_1__","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","FeatureIconIndicatorComponent_Conditional_0_Template","show$","MatIconModule","AsyncPipe","TranslateModule","TippyDirective","FeatureNames","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","FieldShareConfigManagement","AppExportAssetsAdvanced","BaseComponent","subscriptions","Subscription","ngOnDestroy","unsubscribe","encapsulation","ToggleDebugDirective","globalConfigService","onClick","event","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","FsC","hostBindings","$event","webApiFieldsRoot","webApiFieldsAll","webApiFieldsGetShared","ContentTypesFieldsService","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","contentTypeStaticName","fields","fld","Metadata","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","addInheritedField","targetContentTypeId","sourceContentTypeStaticName","sourceFieldGuid","newName","AppId","ContentTypeId","SourceType","SourceField","share","inherit","inheritMetadataOf","reOrder","idArray","Id","order","JSON","stringify","setTitle","item","rename","fieldId","IsTitle","Error","add","newField","Index","SortOrder","updateInputType","id","field","_angular_core__WEBPACK_IMPORTED_MODULE_3__","InputTypeCatalog","BooleanDefault","BooleanTristate","CustomDefault","CustomGps","CustomJsonEditor","DateTimeDefault","DefaultSuffix","EmptyDefault","EmptyEnd","EmptyMessage","EntityContentBlocks","EntityDefault","EntityQuery","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","NumberDefault","NumberDropdown","StringDefault","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","StringWysiwyg","EntityPicker","StringPicker","NumberPicker","Unknown","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","_angular_core__WEBPACK_IMPORTED_MODULE_0__","EJ8","pure","_c0","_c1","CdkTable_Conditional_2_Template","CdkTable_Conditional_3_Template","CdkTable_Conditional_4_Template","CDK_TABLE","InjectionToken","CdkCellDef","ɵdir","type","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","_name","_setNameInput","sticky","_sticky","_hasStickyChanged","stickyEnd","_stickyEnd","_table","hasStickyChanged","resetStickyChanged","_updateColumnCssClassName","_columnCssClassName","cssClassFriendlyName","replace","contentQueries","dirIndex","_t","cell","first","headerCell","footerCell","inputs","None","HasDecoratorInputTransform","booleanAttribute","provide","useExisting","BaseCdkCell","columnDef","elementRef","nativeElement","classList","CdkHeaderCell","super","hostAttrs","CdkCell","role","_getCellRole","setAttribute","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_ngZone","_currentSchedule","_destroyed","Subject","schedule","task","_createScheduleIfNeeded","push","scheduleEnd","next","complete","_getScheduleObservable","takeUntil","subscribe","length","isStable","from","Promise","resolve","undefined","onStable","take","ɵprov","token","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","when","CdkCellOutlet","mostRecentCellOutlet","_viewContainer","CdkHeaderRow","ɵcmp","dependencies","CdkRow","CdkNoDataRow","templateRef","_contentClassName","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","top","bottom","left","right","clearStickyPositioning","rows","stickyDirections","elementsToClear","row","nodeType","ELEMENT_NODE","i","children","element","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","some","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","isRtl","start","end","_addStickyStyle","stickyColumnsUpdated","sizes","slice","width","index","stickyEndColumnsUpdated","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","height","getBoundingClientRect","borderedRowIndex","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","dir","style","remove","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","firstRowCells","widths","positions","nextPosition","STICKY_POSITIONING_LISTENER","DataRowOutlet","viewContainer","table","inject","_rowOutlet","_outletAssigned","HeaderRowOutlet","_headerRowOutlet","FooterRowOutlet","_footerRowOutlet","NoDataRowOutlet","_noDataRowOutlet","CdkTable","_cellRoleInternal","_elementRef","getAttribute","cellRole","trackBy","_trackByFn","fn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_multiTemplateDataRows","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","_fixedLayout","_forceRecalculateCellWidths","_stickyColumnStylesNeedReset","_changeDetectorRef","_dir","_document","_platform","_viewRepeater","_viewportRuler","_stickyPositioningListener","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_hasAllOutlets","_hasInitialized","contentChanged","EventEmitter","viewChange","BehaviorSubject","MAX_VALUE","_isServer","isBrowser","nodeName","ngOnInit","_setupStickyStyler","_dataDiffer","_i","dataRow","dataIndex","data","change","ngAfterContentInit","ngAfterContentChecked","_canRender","_render","forEach","def","clear","_headerRowDefs","_footerRowDefs","_defaultRowDef","isDataSource","disconnect","renderRows","_renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","operation","_ViewRepeaterOperation","INSERTED","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","$implicit","NgZone","isInAngularZone","addColumnDef","removeColumnDef","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","_customNoDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","closestTableSection","display","_stickyStyler","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","_rowDefs","footerRow","values","_cacheRowDefs","_cacheColumnDefs","rowDefsChanged","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","j","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","dataStream","connect","isObservable","isArray","of","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","outlet","view","createEmbeddedView","cellTemplate","_getCellTemplates","markForCheck","renderIndex","count","last","even","odd","columnId","stickyCheckReducer","d","items","_noDataRow","shouldShow","container","rootNode","DOCUMENT","_VIEW_REPEATER_STRATEGY","hostVars","outputs","exportAs","useClass","_DisposeViewRepeaterStrategy","useValue","ngContentSelectors","styles","array","concat","section","uppercaseSection","toUpperCase","current","parentNode","CdkTableModule","ɵmod","ɵinj","imports","ScrollingModule","MatTable_Conditional_2_Template","MatTable_Conditional_3_Template","MatTable_Conditional_4_Template","MatTable","arguments","ɵMatTable_BaseFactory","MatCellDef","ɵMatCellDef_BaseFactory","MatHeaderCellDef","ɵMatHeaderCellDef_BaseFactory","MatColumnDef","ɵMatColumnDef_BaseFactory","MatHeaderCell","ɵMatHeaderCell_BaseFactory","MatCell","ɵMatCell_BaseFactory","MatHeaderRowDef","ɵMatHeaderRowDef_BaseFactory","MatRowDef","ɵMatRowDef_BaseFactory","MatHeaderRow","ɵMatHeaderRow_BaseFactory","MatRow","ɵMatRow_BaseFactory","MatTableModule","MatCommonModule","MatTableDataSource","DataSource","_renderChangesSubscription","_filterData","_filter","sort","_sort","_updateChangeSubscription","paginator","_paginator","initialData","_renderData","_internalPageChanges","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","active","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","filterPredicate","dataStr","currentTerm","toLowerCase","transformedFilter","trim","sortChange","merge","initialized","pageChange","page","filteredData","combineLatest","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","filteredDataLength","then","lastPageIndex","Math","ceil","newPageIndex","min"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.helpers.ts","./projects/eav-ui/src/app/features/feature-icon-indicator/feature-icon-indicator.component.html","./projects/eav-ui/src/app/features/feature-icon-indicator/feature-icon-indicator.component.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/shared/components/base.component.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/fields/data-type-catalog.ts","./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts","./node_modules/@angular/cdk/fesm2022/table.mjs","./node_modules/@angular/material/fesm2022/table.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\n\r\nexport function calculateTypeIcon(typeName: string): string {\r\n  const typeIconMap: Record<string, string> = {\r\n    [DataTypeCatalog.Boolean]: 'toggle_on',\r\n    [DataTypeCatalog.Custom]: 'extension',\r\n    [DataTypeCatalog.DateTime]: 'today',\r\n    [DataTypeCatalog.Empty]: 'crop_free',\r\n    [DataTypeCatalog.Entity]: 'share',\r\n    [DataTypeCatalog.Hyperlink]: 'link',\r\n    [DataTypeCatalog.Number]: 'dialpad',\r\n    [DataTypeCatalog.String]: 'text_fields',\r\n  };\r\n  return typeIconMap[typeName] ?? 'device_unknown';\r\n}\r\n\r\nexport function calculateTypeLabel(typeName: string): string {\r\n  const typeLabelMap: Record<string, string> = {\r\n    [DataTypeCatalog.Boolean]: 'Boolean (yes/no)',\r\n    [DataTypeCatalog.Custom]: 'Custom - ui-tools or custom types',\r\n    [DataTypeCatalog.DateTime]: 'Date and/or time',\r\n    [DataTypeCatalog.Empty]: 'Empty - for form-titles etc.',\r\n    [DataTypeCatalog.Entity]: 'Entity (other content-items)',\r\n    [DataTypeCatalog.Hyperlink]: 'Link / file reference',\r\n    [DataTypeCatalog.Number]: 'Number',\r\n    [DataTypeCatalog.String]: 'Text / string',\r\n  };\r\n  return typeLabelMap[typeName] ?? 'device_unknown';\r\n}\r\n","@if (show$ | async) {\r\n  <mat-icon [tippy]=\"'Features.NotActivated' | translate\">diamond</mat-icon>\r\n}","import { Component } from '@angular/core';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-feature-icon-indicator',\r\n  templateUrl: './feature-icon-indicator.component.html',\r\n  styleUrls: ['./feature-icon-indicator.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    AsyncPipe,\r\n    TranslateModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class FeatureIconIndicatorComponent extends FeatureComponentBase { }\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  FieldShareConfigManagement: 'FieldShareConfigManagement',\r\n\r\n  AppExportAssetsAdvanced: 'AppExportAssetsAdvanced',\r\n  \r\n};\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * A newer base component, without Log being created / requested.\r\n * This is so it's easier to inherit than the BaseComponent,\r\n * which would make typed log with specs harder to implement.\r\n * \r\n * Note that as with time, we wish to get away from these, as we don't want to use many observables any more.\r\n */\r\n@Component({\r\n  selector: 'app-base-component',\r\n  template: ''\r\n})\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseComponent implements OnDestroy {\r\n  \r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n  standalone: true\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../services/context';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\nimport { InputTypeStrict } from './input-type-catalog';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = 'admin/field/all';\r\nexport const webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputTypeMetadata[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString() },\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * \r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * \r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    // TODO: @SDV - do the same as in getShareableFields()\r\n    // but add parameter attributeId to the webapi call\r\n    // I'll create the backend afterwards\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString(), attributeId: attributeId.toString() },\r\n      });\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceContentTypeStaticName: string, sourceFieldGuid: string, newName: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'AddInheritedField'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: targetContentTypeId.toString(),\r\n        SourceType: sourceContentTypeStaticName,\r\n        SourceField: sourceFieldGuid,\r\n        name: newName,\r\n      }\r\n    });\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Share'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Inherit'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: InputTypeStrict) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","export const DataTypeCatalog = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const;\r\n\r\nexport type DataTypeStrict = typeof DataTypeCatalog[keyof typeof DataTypeCatalog];\r\n","export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const;\r\n\r\nexport type InputTypeStrict = typeof InputTypeCatalog[keyof typeof InputTypeCatalog];\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml', standalone: true })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import * as i1 from '@angular/cdk/bidi';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _ViewRepeaterOperation, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, booleanAttribute, Inject, Optional, Input, ContentChild, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, inject, EmbeddedViewRef, EventEmitter, NgZone, Attribute, SkipSelf, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkCellDef, isStandalone: true, selector: \"[cdkCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellDef]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkHeaderCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkHeaderCellDef, isStandalone: true, selector: \"[cdkHeaderCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderCellDef]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkFooterCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkFooterCellDef, isStandalone: true, selector: \"[cdkFooterCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterCellDef]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /** Whether the cell is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(value) {\n        if (value !== this._stickyEnd) {\n            this._stickyEnd = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    constructor(_table) {\n        this._table = _table;\n        this._hasStickyChanged = false;\n        this._sticky = false;\n        this._stickyEnd = false;\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkColumnDef, deps: [{ token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkColumnDef, isStandalone: true, selector: \"[cdkColumnDef]\", inputs: { name: [\"cdkColumnDef\", \"name\"], sticky: [\"sticky\", \"sticky\", booleanAttribute], stickyEnd: [\"stickyEnd\", \"stickyEnd\", booleanAttribute] }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], sticky: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], stickyEnd: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkHeaderCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkHeaderCell, isStandalone: true, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkColumnDef }, { type: i0.ElementRef }] });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkFooterCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkFooterCell, isStandalone: true, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkColumnDef }, { type: i0.ElementRef }] });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkCell, isStandalone: true, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkColumnDef }, { type: i0.ElementRef }] });\n\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._currentSchedule = null;\n        this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._getScheduleObservable()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        });\n    }\n    _getScheduleObservable() {\n        // Use onStable when in the context of an ongoing change detection cycle so that we\n        // do not accidentally trigger additional cycles.\n        return this._ngZone.isStable\n            ? from(Promise.resolve(undefined))\n            : this._ngZone.onStable.pipe(take(1));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _CoalescedStyleScheduler, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _CoalescedStyleScheduler }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _CoalescedStyleScheduler, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.NgZone }] });\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: BaseRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: BaseRowDef, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }] });\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends BaseRowDef {\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n        this._hasStickyChanged = false;\n        this._sticky = false;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkHeaderRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkHeaderRowDef, isStandalone: true, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkHeaderRowDef' }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkHeaderRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends BaseRowDef {\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n        this._hasStickyChanged = false;\n        this._sticky = false;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkFooterRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkFooterRowDef, isStandalone: true, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkFooterRowDef' }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkFooterRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkRowDef, isStandalone: true, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: [\n                        { name: 'columns', alias: 'cdkRowDefColumns' },\n                        { name: 'when', alias: 'cdkRowDefWhen' },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }] });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static { this.mostRecentCellOutlet = null; }\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkCellOutlet, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkCellOutlet, isStandalone: true, selector: \"[cdkCellOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkHeaderRow, isStandalone: true, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkFooterRow, isStandalone: true, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkRow, isStandalone: true, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._contentClassName = 'cdk-no-data-row';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkNoDataRow, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkNoDataRow, isStandalone: true, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const firstRow = rows[0];\n            const numCells = firstRow.children.length;\n            const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n            const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n            const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n            const lastStickyStart = stickyStartStates.lastIndexOf(true);\n            const firstStickyEnd = stickyEndStates.indexOf(true);\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1\n                        ? []\n                        : cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => (stickyStartStates[index] ? width : null)),\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1\n                        ? []\n                        : cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                            .reverse(),\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n            // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n            // sticky states need to be reversed as well.\n            const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n            const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n            // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n            const stickyOffsets = [];\n            const stickyCellHeights = [];\n            const elementsToStick = [];\n            for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                stickyOffsets[rowIndex] = stickyOffset;\n                const row = rows[rowIndex];\n                elementsToStick[rowIndex] = this._isNativeHtmlTable\n                    ? Array.from(row.children)\n                    : [row];\n                const height = row.getBoundingClientRect().height;\n                stickyOffset += height;\n                stickyCellHeights[rowIndex] = height;\n            }\n            const borderedRowIndex = states.lastIndexOf(true);\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                this._positionListener?.stickyHeaderRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n            else {\n                this._positionListener?.stickyFooterRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const tfoot = tableElement.querySelector('tfoot');\n            if (tfoot) {\n                if (stickyStates.some(state => !state)) {\n                    this._removeStickyStyle(tfoot, ['bottom']);\n                }\n                else {\n                    this._addStickyStyle(tfoot, 'bottom', 0, false);\n                }\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkRecycleRows, isStandalone: true, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._rowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: DataRowOutlet, isStandalone: true, selector: \"[rowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[rowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._headerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: HeaderRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: HeaderRowOutlet, isStandalone: true, selector: \"[headerRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[headerRowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._footerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: FooterRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: FooterRowOutlet, isStandalone: true, selector: \"[footerRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[footerRowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._noDataRowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: NoDataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: NoDataRowOutlet, isStandalone: true, selector: \"[noDataRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[noDataRowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"/>\n  <ng-content select=\"colgroup, col\"/>\n\n  <!--\n    Unprojected content throws a hydration error so we need this to capture it.\n    It gets removed on the client so it doesn't affect the layout.\n  -->\n  @if (_isServer) {\n    <ng-content/>\n  }\n\n  @if (_isNativeHtmlTable) {\n    <thead role=\"rowgroup\">\n      <ng-container headerRowOutlet/>\n    </thead>\n    <tbody role=\"rowgroup\">\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n    </tbody>\n    <tfoot role=\"rowgroup\">\n      <ng-container footerRowOutlet/>\n    </tfoot>\n  } @else {\n    <ng-container headerRowOutlet/>\n    <ng-container rowOutlet/>\n    <ng-container noDataRowOutlet/>\n    <ng-container footerRowOutlet/>\n  }\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    /** Aria role to apply to the table's cells based on the table's own role. */\n    _getCellRole() {\n        if (this._cellRoleInternal === undefined) {\n            // Perform this lazily in case the table's role was updated by a directive after construction.\n            const role = this._elementRef.nativeElement.getAttribute('role');\n            const cellRole = role === 'grid' || role === 'treegrid' ? 'gridcell' : 'cell';\n            this._cellRoleInternal = this._isNativeHtmlTable && cellRole === 'cell' ? null : cellRole;\n        }\n        return this._cellRoleInternal;\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(value) {\n        this._multiTemplateDataRows = value;\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(value) {\n        this._fixedLayout = value;\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, \n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener, \n    /**\n     * @deprecated `_ngZone` parameter to become required.\n     * @breaking-change 14.0.0\n     */\n    _ngZone) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._viewportRuler = _viewportRuler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        this._ngZone = _ngZone;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        /** Whether the table has rendered out all the outlets for the first time. */\n        this._hasAllOutlets = false;\n        /** Whether the table is done initializing. */\n        this._hasInitialized = false;\n        this._cellRoleInternal = undefined;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        /**\n         * Emits when the table completes rendering a set of data rows based on the latest data from the\n         * data source, even if the set of rows is empty.\n         */\n        this.contentChanged = new EventEmitter();\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({\n            start: 0,\n            end: Number.MAX_VALUE,\n        });\n        if (!role) {\n            _elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._document = _document;\n        this._isServer = !_platform.isBrowser;\n        this._isNativeHtmlTable = _elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentInit() {\n        this._hasInitialized = true;\n    }\n    ngAfterContentChecked() {\n        // Only start re-rendering in `ngAfterContentChecked` after the first render.\n        if (this._canRender()) {\n            this._render();\n        }\n    }\n    ngOnDestroy() {\n        [\n            this._rowOutlet?.viewContainer,\n            this._headerRowOutlet?.viewContainer,\n            this._footerRowOutlet?.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach((def) => {\n            def?.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        // Allow the new row data to render before measuring it.\n        // @breaking-change 14.0.0 Remove undefined check once _ngZone is required.\n        if (this._ngZone && NgZone.isInAngularZone()) {\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => {\n                this.updateStickyColumnStyles();\n            });\n        }\n        else {\n            this.updateStickyColumnStyles();\n        }\n        this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const thead = closestTableSection(this._headerRowOutlet, 'thead');\n            if (thead) {\n                thead.style.display = headerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const tfoot = closestTableSection(this._footerRowOutlet, 'tfoot');\n            if (tfoot) {\n                tfoot.style.display = footerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /** Invoked whenever an outlet is created and has been assigned to the table. */\n    _outletAssigned() {\n        // Trigger the first render once all outlets have been assigned. We do it this way, as\n        // opposed to waiting for the next `ngAfterContentChecked`, because we don't know when\n        // the next change detection will happen.\n        // Also we can't use queries to resolve the outlets, because they're wrapped in a\n        // conditional, so we have to rely on them being assigned via DI.\n        if (!this._hasAllOutlets &&\n            this._rowOutlet &&\n            this._headerRowOutlet &&\n            this._footerRowOutlet &&\n            this._noDataRowOutlet) {\n            this._hasAllOutlets = true;\n            // In some setups this may fire before `ngAfterContentInit`\n            // so we need a check here. See #28538.\n            if (this._canRender()) {\n                this._render();\n            }\n        }\n    }\n    /** Whether the table has all the information to start rendering. */\n    _canRender() {\n        return this._hasAllOutlets && this._hasInitialized;\n    }\n    /** Renders the table if its state has changed. */\n    _render() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            if (this._rowOutlet) {\n                this._rowOutlet.viewContainer.clear();\n            }\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n        this._changeDetectorRef.markForCheck();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkTable, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: 'role', attribute: true }, { token: i1.Directionality, optional: true }, { token: DOCUMENT }, { token: i2.Platform }, { token: _VIEW_REPEATER_STRATEGY }, { token: _COALESCED_STYLE_SCHEDULER }, { token: i3.ViewportRuler }, { token: STICKY_POSITIONING_LISTENER, optional: true, skipSelf: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.2.0\", type: CdkTable, isStandalone: true, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: [\"multiTemplateDataRows\", \"multiTemplateDataRows\", booleanAttribute], fixedLayout: [\"fixedLayout\", \"fixedLayout\", booleanAttribute] }, outputs: { contentChanged: \"contentChanged\" }, host: { properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"/>\\n  <ng-content select=\\\"colgroup, col\\\"/>\\n\\n  <!--\\n    Unprojected content throws a hydration error so we need this to capture it.\\n    It gets removed on the client so it doesn't affect the layout.\\n  -->\\n  @if (_isServer) {\\n    <ng-content/>\\n  }\\n\\n  @if (_isNativeHtmlTable) {\\n    <thead role=\\\"rowgroup\\\">\\n      <ng-container headerRowOutlet/>\\n    </thead>\\n    <tbody role=\\\"rowgroup\\\">\\n      <ng-container rowOutlet/>\\n      <ng-container noDataRowOutlet/>\\n    </tbody>\\n    <tfoot role=\\\"rowgroup\\\">\\n      <ng-container footerRowOutlet/>\\n    </tfoot>\\n  } @else {\\n    <ng-container headerRowOutlet/>\\n    <ng-container rowOutlet/>\\n    <ng-container noDataRowOutlet/>\\n    <ng-container footerRowOutlet/>\\n  }\\n\", isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], standalone: true, imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"] }]\n        }], ctorParameters: () => [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['role']\n                }] }, { type: i1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i2.Platform }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                    type: Inject,\n                    args: [_COALESCED_STYLE_SCHEDULER]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [STICKY_POSITIONING_LISTENER]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }], propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], fixedLayout: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], contentChanged: [{\n                type: Output\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n/**\n * Finds the closest table section to an outlet. We can't use `HTMLElement.closest` for this,\n * because the node representing the outlet is a comment.\n */\nfunction closestTableSection(outlet, section) {\n    const uppercaseSection = section.toUpperCase();\n    let current = outlet.viewContainer.element.nativeElement;\n    while (current) {\n        // 1 is an element node.\n        const nodeName = current.nodeType === 1 ? current.nodeName : null;\n        if (nodeName === uppercaseSection) {\n            return current;\n        }\n        else if (nodeName === 'TABLE') {\n            // Stop traversing past the `table` node.\n            break;\n        }\n        current = current.parentNode;\n    }\n    return null;\n}\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkTextColumn, deps: [{ token: CdkTable, optional: true }, { token: TEXT_COLUMN_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkTextColumn, isStandalone: true, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"cdkColumnDef\", \"sticky\", \"stickyEnd\"] }, { kind: \"directive\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { kind: \"directive\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }, { kind: \"directive\", type: CdkCellDef, selector: \"[cdkCellDef]\" }, { kind: \"directive\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    standalone: true,\n                    imports: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n                }]\n        }], ctorParameters: () => [{ type: CdkTable, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [TEXT_COLUMN_OPTIONS]\n                }] }], propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule, CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet], exports: [CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule, ...EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n * @deprecated Implement the `CanStick` interface instead.\n * @breaking-change 19.0.0\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /** Whether sticky positioning should be applied. */\n        get sticky() {\n            return this._sticky;\n        }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, booleanAttribute, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CdkCellOutlet, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy, DataSource } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { map } from 'rxjs/operators';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass MatRecycleRows {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatRecycleRows, isStandalone: true, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }] });\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /** Overrides the sticky CSS class set by the `CdkTable`. */\n        this.stickyCssClass = 'mat-mdc-table-sticky';\n        /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n        this.needsPositionStickyOnElement = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTable, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.2.0\", type: MatTable, isStandalone: true, selector: \"mat-table, table[mat-table]\", host: { properties: { \"class.mdc-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-mdc-table mdc-data-table__table\" }, providers: [\n            { provide: CdkTable, useExisting: MatTable },\n            { provide: CDK_TABLE, useExisting: MatTable },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n            //  is only included in the build if used.\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, isInline: true, styles: [\".mat-mdc-table-sticky{position:sticky !important}.mdc-data-table{-webkit-overflow-scrolling:touch;display:inline-flex;flex-direction:column;box-sizing:border-box;position:relative}.mdc-data-table__table-container{-webkit-overflow-scrolling:touch;overflow-x:auto;width:100%}.mdc-data-table__table{min-width:100%;border:0;white-space:nowrap;border-spacing:0;table-layout:fixed}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell,.mdc-data-table__cell[dir=rtl]{text-align:right}.mdc-data-table__cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__cell--numeric,.mdc-data-table__cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell{box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mdc-data-table__header-cell,.mdc-data-table__header-cell[dir=rtl]{text-align:right}.mdc-data-table__header-cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__header-cell--numeric,.mdc-data-table__header-cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell-wrapper{align-items:center;display:inline-flex;vertical-align:middle}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px 0 16px}.mdc-data-table__header-cell--checkbox,.mdc-data-table__cell--checkbox{padding-left:4px;padding-right:0}[dir=rtl] .mdc-data-table__header-cell--checkbox,[dir=rtl] .mdc-data-table__cell--checkbox,.mdc-data-table__header-cell--checkbox[dir=rtl],.mdc-data-table__cell--checkbox[dir=rtl]{padding-left:0;padding-right:4px}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color)}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-header-headline-font, Roboto, sans-serif);line-height:var(--mat-table-header-headline-line-height);font-size:var(--mat-table-header-headline-size, 14px);font-weight:var(--mat-table-header-headline-weight, 500)}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, Roboto, sans-serif);line-height:var(--mat-table-row-item-label-text-line-height);font-size:var(--mat-table-row-item-label-text-size, 14px);font-weight:var(--mat-table-row-item-label-text-weight)}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-footer-supporting-text-font, Roboto, sans-serif);line-height:var(--mat-table-footer-supporting-text-line-height);font-size:var(--mat-table-footer-supporting-text-size, 14px);font-weight:var(--mat-table-footer-supporting-text-weight);letter-spacing:var(--mat-table-footer-supporting-text-tracking)}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking);font-weight:inherit;line-height:inherit}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking);line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking)}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, host: {\n                        'class': 'mat-mdc-table mdc-data-table__table',\n                        '[class.mdc-table-fixed-layout]': 'fixedLayout',\n                    }, providers: [\n                        { provide: CdkTable, useExisting: MatTable },\n                        { provide: CDK_TABLE, useExisting: MatTable },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                        //  is only included in the build if used.\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".mat-mdc-table-sticky{position:sticky !important}.mdc-data-table{-webkit-overflow-scrolling:touch;display:inline-flex;flex-direction:column;box-sizing:border-box;position:relative}.mdc-data-table__table-container{-webkit-overflow-scrolling:touch;overflow-x:auto;width:100%}.mdc-data-table__table{min-width:100%;border:0;white-space:nowrap;border-spacing:0;table-layout:fixed}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell,.mdc-data-table__cell[dir=rtl]{text-align:right}.mdc-data-table__cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__cell--numeric,.mdc-data-table__cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell{box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mdc-data-table__header-cell,.mdc-data-table__header-cell[dir=rtl]{text-align:right}.mdc-data-table__header-cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__header-cell--numeric,.mdc-data-table__header-cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell-wrapper{align-items:center;display:inline-flex;vertical-align:middle}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px 0 16px}.mdc-data-table__header-cell--checkbox,.mdc-data-table__cell--checkbox{padding-left:4px;padding-right:0}[dir=rtl] .mdc-data-table__header-cell--checkbox,[dir=rtl] .mdc-data-table__cell--checkbox,.mdc-data-table__header-cell--checkbox[dir=rtl],.mdc-data-table__cell--checkbox[dir=rtl]{padding-left:0;padding-right:4px}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color)}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-header-headline-font, Roboto, sans-serif);line-height:var(--mat-table-header-headline-line-height);font-size:var(--mat-table-header-headline-size, 14px);font-weight:var(--mat-table-header-headline-weight, 500)}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, Roboto, sans-serif);line-height:var(--mat-table-row-item-label-text-line-height);font-size:var(--mat-table-row-item-label-text-size, 14px);font-weight:var(--mat-table-row-item-label-text-weight)}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-footer-supporting-text-font, Roboto, sans-serif);line-height:var(--mat-table-footer-supporting-text-line-height);font-size:var(--mat-table-footer-supporting-text-size, 14px);font-weight:var(--mat-table-footer-supporting-text-weight);letter-spacing:var(--mat-table-footer-supporting-text-tracking)}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking);font-weight:inherit;line-height:inherit}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking);line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking)}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"] }]\n        }] });\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatCellDef, isStandalone: true, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatHeaderCellDef, isStandalone: true, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatFooterCellDef, isStandalone: true, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatColumnDef, isStandalone: true, selector: \"[matColumnDef]\", inputs: { name: [\"matColumnDef\", \"name\"] }, providers: [\n            { provide: CdkColumnDef, useExisting: MatColumnDef },\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n        ], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matColumnDef]',\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n                    ],\n                    standalone: true,\n                }]\n        }], propDecorators: { name: [{\n                type: Input,\n                args: ['matColumnDef']\n            }] } });\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatHeaderCell, isStandalone: true, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-mdc-header-cell mdc-data-table__header-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\n                        'role': 'columnheader',\n                    },\n                    standalone: true,\n                }]\n        }] });\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatFooterCell, isStandalone: true, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { classAttribute: \"mat-mdc-footer-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-mdc-footer-cell mdc-data-table__cell',\n                    },\n                    standalone: true,\n                }]\n        }] });\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatCell, isStandalone: true, selector: \"mat-cell, td[mat-cell]\", host: { classAttribute: \"mat-mdc-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-mdc-cell mdc-data-table__cell',\n                    },\n                    standalone: true,\n                }]\n        }] });\n\n// We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatHeaderRowDef, isStandalone: true, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matHeaderRowDef' },\n                        { name: 'sticky', alias: 'matHeaderRowDefSticky', transform: booleanAttribute },\n                    ],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatFooterRowDef, isStandalone: true, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matFooterRowDef' },\n                        { name: 'sticky', alias: 'matFooterRowDefSticky', transform: booleanAttribute },\n                    ],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatRowDef, isStandalone: true, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matRowDefColumns' },\n                        { name: 'when', alias: 'matRowDefWhen' },\n                    ],\n                    standalone: true,\n                }]\n        }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatHeaderRow, isStandalone: true, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-header-row mdc-data-table__header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-header-row, tr[mat-header-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-header-row mdc-data-table__header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatFooterRow, isStandalone: true, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-footer-row mdc-data-table__row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-footer-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatRow, isStandalone: true, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-row mdc-data-table__row\" }, providers: [{ provide: CdkRow, useExisting: MatRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-row, tr[mat-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n    constructor() {\n        super(...arguments);\n        this._contentClassName = 'mat-mdc-no-data-row';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatNoDataRow, isStandalone: true, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matNoDataRow]',\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }],\n                    standalone: true,\n                }]\n        }] });\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatTextColumn, isStandalone: true, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"matColumnDef\"] }, { kind: \"directive\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: MatCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: MatCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-text-column',\n                    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    standalone: true,\n                    imports: [MatColumnDef, MatHeaderCellDef, MatHeaderCell, MatCellDef, MatCell],\n                }]\n        }] });\n\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    MatRecycleRows,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn], exports: [MatCommonModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CdkTableModule, ...EXPORTED_DECLARATIONS],\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends DataSource {\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() {\n        return this._data.value;\n    }\n    set data(data) {\n        data = Array.isArray(data) ? data : [];\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() {\n        return this._filter.value;\n    }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() {\n        return this._sort;\n    }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the paginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the paginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() {\n        return this._paginator;\n    }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    constructor(initialData = []) {\n        super();\n        /** Stream emitting render data to the table (depends on ordered data changes). */\n        this._renderData = new BehaviorSubject([]);\n        /** Stream that emits when a new filter string is set on the data source. */\n        this._filter = new BehaviorSubject('');\n        /** Used to react to internal changes of the paginator that are made by the data source itself. */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = null;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (data, sortHeaderId) => {\n            const value = data[sortHeaderId];\n            if (_isNumberValue(value)) {\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        };\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((a, b) => {\n                let valueA = this.sortingDataAccessor(a, active);\n                let valueB = this.sortingDataAccessor(b, active);\n                // If there are data in the column that can be converted to a number,\n                // it must be ensured that the rest of the data\n                // is of the same type so as not to order incorrectly.\n                const valueAType = typeof valueA;\n                const valueBType = typeof valueB;\n                if (valueAType !== valueBType) {\n                    if (valueAType === 'number') {\n                        valueA += '';\n                    }\n                    if (valueBType === 'number') {\n                        valueB += '';\n                    }\n                }\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            });\n        };\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @returns Whether the filter matches against the data\n         */\n        this.filterPredicate = (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            const dataStr = Object.keys(data)\n                .reduce((currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + data[key] + '◬';\n            }, '')\n                .toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        };\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort\n            ? merge(this._sort.sortChange, this._sort.initialized)\n            : of(null);\n        const pageChange = this._paginator\n            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)\n            : of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterPredicate function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterPredicate.\n        // May be overridden for customization.\n        this.filteredData =\n            this.filter == null || this.filter === ''\n                ? data\n                : data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided paginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn };\n"],"x_google_ignoreList":[11,12]}