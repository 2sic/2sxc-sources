{"version":3,"file":"default-node_modules_angular_material_fesm2022_autocomplete_mjs.42007c81f90f324a.js","mappings":"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","names":["_c0","_c1","MatAutocomplete_ng_template_0_Template","rf","ctx","_r1","i0","$event","ctx_r1","_animationDone","next","formFieldId_r3","id","_classList","showPanel","_color","isOpen","ariaLabel","_getPanelAriaLabelledby","panelAnimation","trigger","state","style","opacity","transform","transition","group","animate","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","this","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","autoSelectActiveOption","hideSingleSelectionIndicator","requireSelection","MatAutocomplete","_isOpen","_setColor","value","_changeDetectorRef","markForCheck","classList","_elementRef","nativeElement","className","_hideSingleSelectionIndicator","_syncParentProperties","options","_defaults","platform","_activeOptionChanges","Subscription","EMPTY","EventEmitter","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","ngAfterContentInit","_keyManager","ActiveDescendantKeyManager","withWrap","skipPredicate","_skipPredicate","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","destroy","unsubscribe","complete","_setScrollTop","scrollTop","panel","_getScrollTop","length","_emitSelectEvent","event","labelId","ariaLabelledby","static","ɵfac","t","i1","ɵcmp","type","selectors","contentQueries","dirIndex","MatOption","MAT_OPTGROUP","_t","optionGroups","viewQuery","TemplateRef","template","first","hostAttrs","inputs","None","HasDecoratorInputTransform","booleanAttribute","panelWidth","disableRipple","outputs","exportAs","standalone","features","provide","MAT_OPTION_PARENT_COMPONENT","useExisting","ngContentSelectors","decls","vars","consts","styles","encapsulation","data","animation","changeDetection","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","multi","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","overlay","inject","Overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","Subject","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_aboveClass","_overlayAttached","optionSelections","defer","autocomplete","changes","pipe","startWith","switchMap","merge","map","onSelectionChange","onStable","take","_handlePanelKeydown","keyCode","ESCAPE","hasModifierKey","UP_ARROW","_pendingAutoselectedOption","_updateNativeInputValue","_valueBeforeAutoSelection","_resetActiveItem","stopPropagation","preventDefault","_trackedModal","_scrollStrategy","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","_clearFromModal","openPanel","_openPanelInternal","closePanel","_resetLabel","run","_latestOpeningTrigger","hasAttached","detach","_closingActionsSubscription","_updatePanelState","detectChanges","removeAriaReferencedId","panelClosingActions","tabOut","filter","_getOutsideClickStream","detachments","of","MatOptionSelectionChange","activeOption","activeItem","fromEvent","clickTarget","_getEventTarget","formField","getConnectedOverlayOrigin","customOrigin","connectedTo","elementRef","contains","overlayElement","writeValue","Promise","resolve","then","_assignOptionValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","hasModifier","_valueOnLastKeydown","ENTER","_selectViaInteraction","prevActiveItem","isArrowKey","DOWN_ARROW","TAB","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_previousValue","selectedOption","find","selected","_getDisplayValue","deselect","_clearPreviousSelectedOption","valueOnAttach","_handleFocus","_attachOverlay","_floatLabel","_handleClick","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","tap","reapplyLastPosition","delay","wasOpen","_emitOpened","_setValueAndClose","dispose","toDisplay","_control","toSelect","focus","_valueOnAttach","skip","emitEvent","forEach","addAriaReferencedId","overlayRef","setOrigin","_getConnectedElement","updateSize","width","_getPanelWidth","_portal","TemplatePortal","getLabelId","create","_getOverlayConfig","attach","color","_applyModalPanelOwnership","_keydownSubscription","keydownEvents","_outsideClickSubscription","outsidePointerEvents","OverlayConfig","positionStrategy","_getOverlayPosition","direction","undefined","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","abovePositions","positions","withPositions","_getHostWidth","getBoundingClientRect","firstEnabledOptionIndex","get","setActiveItem","element","readOnly","autocompleteDisabled","defaultView","labelCount","_countGroupLabelsBeforeOption","_getHostElement","newScrollPosition","_getOptionScrollPosition","offsetTop","offsetHeight","modal","closest","panelId","i1$1","i2","MAT_FORM_FIELD","DOCUMENT","i3","ɵdir","hostVars","hostBindings","toString","MatAutocompleteModule","ɵmod","ɵinj","providers","imports","OverlayModule","MatOptionModule","MatCommonModule","CommonModule","CdkScrollableModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/autocomplete.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, booleanAttribute, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, ContentChildren, Input, Output, Directive, forwardRef, inject, Optional, Host, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nexport { MatOptgroup, MatOption } from '@angular/material/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ActiveDescendantKeyManager, removeAriaReferencedId, addAriaReferencedId } from '@angular/cdk/a11y';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, group, animate } from '@angular/animations';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { ESCAPE, hasModifierKey, UP_ARROW, ENTER, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\nimport * as i2 from '@angular/cdk/bidi';\n\n// Animation values come from\n// https://github.com/material-components/material-components-web/blob/master/packages/mdc-menu-surface/_mixins.scss\n// TODO(mmalerba): Ideally find a way to import the values from MDC's code.\nconst panelAnimation = trigger('panelAnimation', [\n    state('void, hidden', style({\n        opacity: 0,\n        transform: 'scaleY(0.8)',\n    })),\n    transition(':enter, hidden => visible', [\n        group([\n            animate('0.03s linear', style({ opacity: 1 })),\n            animate('0.12s cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scaleY(1)' })),\n        ]),\n    ]),\n    transition(':leave, visible => hidden', [animate('0.075s linear', style({ opacity: 0 }))]),\n]);\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        autoActiveFirstOption: false,\n        autoSelectActiveOption: false,\n        hideSingleSelectionIndicator: false,\n        requireSelection: false,\n    };\n}\n/** Autocomplete component. */\nclass MatAutocomplete {\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n        this._color = value;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        this._classList = value;\n        this._elementRef.nativeElement.className = '';\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    constructor(_changeDetectorRef, _elementRef, _defaults, platform) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._defaults = _defaults;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Emits when the panel animation is done. Null if the panel doesn't animate. */\n        this._animationDone = new EventEmitter();\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated. */\n        this.optionActivated = new EventEmitter();\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = platform?.SAFARI || false;\n        this.autoActiveFirstOption = !!_defaults.autoActiveFirstOption;\n        this.autoSelectActiveOption = !!_defaults.autoSelectActiveOption;\n        this.requireSelection = !!_defaults.requireSelection;\n        this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withWrap()\n            .skipPredicate(this._skipPredicate);\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._activeOptionChanges.unsubscribe();\n        this._animationDone.complete();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate() {\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatAutocomplete, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatAutocomplete, isStandalone: true, selector: \"mat-autocomplete\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: [\"autoActiveFirstOption\", \"autoActiveFirstOption\", booleanAttribute], autoSelectActiveOption: [\"autoSelectActiveOption\", \"autoSelectActiveOption\", booleanAttribute], requireSelection: [\"requireSelection\", \"requireSelection\", booleanAttribute], panelWidth: \"panelWidth\", disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], classList: [\"class\", \"classList\"], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, host: { classAttribute: \"mat-mdc-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], exportAs: [\"matAutocomplete\"], ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [class]=\\\"_classList\\\"\\n    [class.mat-mdc-autocomplete-visible]=\\\"showPanel\\\"\\n    [class.mat-mdc-autocomplete-hidden]=\\\"!showPanel\\\"\\n    [class.mat-primary]=\\\"_color === 'primary'\\\"\\n    [class.mat-accent]=\\\"_color === 'accent'\\\"\\n    [class.mat-warn]=\\\"_color === 'warn'\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;box-sizing:border-box;position:static;border-radius:var(--mat-autocomplete-container-shape);box-shadow:var(--mat-autocomplete-container-elevation-shadow);background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden;pointer-events:none}mat-autocomplete{display:none}\"], animations: [panelAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', host: {\n                        'class': 'mat-mdc-autocomplete',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], animations: [panelAnimation], standalone: true, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [class]=\\\"_classList\\\"\\n    [class.mat-mdc-autocomplete-visible]=\\\"showPanel\\\"\\n    [class.mat-mdc-autocomplete-hidden]=\\\"!showPanel\\\"\\n    [class.mat-primary]=\\\"_color === 'primary'\\\"\\n    [class.mat-accent]=\\\"_color === 'accent'\\\"\\n    [class.mat-warn]=\\\"_color === 'warn'\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;box-sizing:border-box;position:static;border-radius:var(--mat-autocomplete-container-shape);box-shadow:var(--mat-autocomplete-container-elevation-shadow);background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden;pointer-events:none}mat-autocomplete{display:none}\"] }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }, { type: i1.Platform }], propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], autoSelectActiveOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], requireSelection: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], panelWidth: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatAutocompleteOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatAutocompleteOrigin, isStandalone: true, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }] });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass MatAutocompleteTrigger {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        /** Class to apply to the panel when it's above the input. */\n        this._aboveClass = 'mat-mdc-autocomplete-panel-above';\n        this._overlayAttached = false;\n        /** Stream of changes to the selection state of the autocomplete options. */\n        this.optionSelections = defer(() => {\n            const options = this.autocomplete ? this.autocomplete.options : null;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        /** Handles keyboard events coming from the overlay panel. */\n        this._handlePanelKeydown = (event) => {\n            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n            if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                // If the user had typed something in before we autoselected an option, and they decided\n                // to cancel the selection, restore the input value to the one they had typed in.\n                if (this._pendingAutoselectedOption) {\n                    this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n                    this._pendingAutoselectedOption = null;\n                }\n                this._closeKeyEventStream.next();\n                this._resetActiveItem();\n                // We need to stop propagation, otherwise the event will eventually\n                // reach the input itself and cause the overlay to be reopened.\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        };\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        this._scrollStrategy = scrollStrategy;\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n        this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._openPanelInternal();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            // The `NgZone.onStable` always emits outside of the Angular zone,\n            // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\n            // We should manually run in Angular zone to update UI after panel closing.\n            this._zone.run(() => {\n                this.autocomplete.closed.emit();\n            });\n        }\n        // Only reset if this trigger is the latest one that opened the\n        // autocomplete since another may have taken it over.\n        if (this.autocomplete._latestOpeningTrigger === this) {\n            this.autocomplete._isOpen = false;\n            this.autocomplete._latestOpeningTrigger = null;\n        }\n        this._overlayAttached = false;\n        this._pendingAutoselectedOption = null;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        this._updatePanelState();\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n        // Remove aria-owns attribute when the autocomplete is no longer visible.\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', this.autocomplete.id);\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField\n                ? this._formField.getConnectedOverlayOrigin().nativeElement\n                : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return (this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                // Normally focus moves inside `mousedown` so this condition will almost always be\n                // true. Its main purpose is to handle the case where the input is focused from an\n                // outside click which propagates up to the `body` listener within the same sequence\n                // and causes the panel to close immediately (see #3106).\n                this._document.activeElement !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                !!this._overlayRef &&\n                !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        this._valueOnLastKeydown = this._element.nativeElement.value;\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this._openPanelInternal(this._valueOnLastKeydown);\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n                if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n                    if (!this._pendingAutoselectedOption) {\n                        this._valueBeforeAutoSelection = this._valueOnLastKeydown;\n                    }\n                    this._pendingAutoselectedOption = this.activeOption;\n                    this._assignOptionValue(this.activeOption.value);\n                }\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._pendingAutoselectedOption = null;\n            // If selection is required we don't write to the CVA while the user is typing.\n            // At the end of the selection either the user will have picked something\n            // or we'll reset the value back to null.\n            if (!this.autocomplete || !this.autocomplete.requireSelection) {\n                this._onChange(value);\n            }\n            if (!value) {\n                this._clearPreviousSelectedOption(null, false);\n            }\n            else if (this.panelOpen && !this.autocomplete.requireSelection) {\n                // Note that we don't reset this when `requireSelection` is enabled,\n                // because the option will be reset when the panel is closed.\n                const selectedOption = this.autocomplete.options?.find(option => option.selected);\n                if (selectedOption) {\n                    const display = this._getDisplayValue(selectedOption.value);\n                    if (value !== display) {\n                        selectedOption.deselect(false);\n                    }\n                }\n            }\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                // When the `input` event fires, the input's value will have already changed. This means\n                // that if we take the `this._element.nativeElement.value` directly, it'll be one keystroke\n                // behind. This can be a problem when the user selects a value, changes a character while\n                // the input still has focus and then clicks away (see #28432). To work around it, we\n                // capture the value in `keydown` so we can use it here.\n                const valueOnAttach = this._valueOnLastKeydown ?? this._element.nativeElement.value;\n                this._valueOnLastKeydown = null;\n                this._openPanelInternal(valueOnAttach);\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay(this._previousValue);\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this._openPanelInternal();\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            if (this._formField) {\n                this._formField.floatLabel = 'auto';\n            }\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return (merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            this._zone.run(() => {\n                const wasOpen = this.panelOpen;\n                this._resetActiveItem();\n                this._updatePanelState();\n                this._changeDetectorRef.detectChanges();\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                }\n                if (wasOpen !== this.panelOpen) {\n                    // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n                    // `closed` event, because we may not have emitted it. This can happen\n                    // - if the users opens the panel and there are no options, but the\n                    //   options come in slightly later or as a result of the value changing,\n                    // - if the panel is closed after the user entered a string that did not match any\n                    //   of the available options,\n                    // - if a valid string is entered after an invalid one.\n                    if (this.panelOpen) {\n                        this._emitOpened();\n                    }\n                    else {\n                        this.autocomplete.closed.emit();\n                    }\n                }\n            });\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /**\n     * Emits the opened event once it's known that the panel will be shown and stores\n     * the state of the trigger right before the opening sequence was finished.\n     */\n    _emitOpened() {\n        this.autocomplete.opened.emit();\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /** Given a value, returns the string that should be shown within the input. */\n    _getDisplayValue(value) {\n        const autocomplete = this.autocomplete;\n        return autocomplete && autocomplete.displayWith ? autocomplete.displayWith(value) : value;\n    }\n    _assignOptionValue(value) {\n        const toDisplay = this._getDisplayValue(value);\n        if (value == null) {\n            this._clearPreviousSelectedOption(null, false);\n        }\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = value;\n        }\n        else {\n            this._element.nativeElement.value = value;\n        }\n        this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const panel = this.autocomplete;\n        const toSelect = event ? event.source : this._pendingAutoselectedOption;\n        if (toSelect) {\n            this._clearPreviousSelectedOption(toSelect);\n            this._assignOptionValue(toSelect.value);\n            // TODO(crisbeto): this should wait until the animation is done, otherwise the value\n            // gets reset while the panel is still animating which looks glitchy. It'll likely break\n            // some tests to change it at this point.\n            this._onChange(toSelect.value);\n            panel._emitSelectEvent(toSelect);\n            this._element.nativeElement.focus();\n        }\n        else if (panel.requireSelection &&\n            this._element.nativeElement.value !== this._valueOnAttach) {\n            this._clearPreviousSelectedOption(null);\n            this._assignOptionValue(null);\n            // Wait for the animation to finish before clearing the form control value, otherwise\n            // the options might change while the animation is running which looks glitchy.\n            if (panel._animationDone) {\n                panel._animationDone.pipe(take(1)).subscribe(() => this._onChange(null));\n            }\n            else {\n                this._onChange(null);\n            }\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip, emitEvent) {\n        // Null checks are necessary here, because the autocomplete\n        // or its options may not have been assigned yet.\n        this.autocomplete?.options?.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect(emitEvent);\n            }\n        });\n    }\n    _openPanelInternal(valueOnAttach = this._element.nativeElement.value) {\n        this._attachOverlay(valueOnAttach);\n        this._floatLabel();\n        // Add aria-owns attribute when the autocomplete becomes visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            addAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    _attachOverlay(valueOnAttach) {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: this._formField?.getLabelId(),\n            });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._valueOnAttach = valueOnAttach;\n            this._valueOnLastKeydown = null;\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        this.autocomplete._latestOpeningTrigger = this;\n        this.autocomplete._setColor(this._formField?.color);\n        this._updatePanelState();\n        this._applyModalPanelOwnership();\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this._emitOpened();\n        }\n    }\n    /** Updates the panel's visibility state and any trigger state tied to id. */\n    _updatePanelState() {\n        this.autocomplete._setVisibility();\n        // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n        // because the act of subscribing will prevent events from reaching other overlays and\n        // we don't want to block the events if there are no options.\n        if (this.panelOpen) {\n            const overlayRef = this._overlayRef;\n            if (!this._keydownSubscription) {\n                // Use the `keydownEvents` in order to take advantage of\n                // the overlay event targeting provided by the CDK overlay.\n                this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n            }\n            if (!this._outsideClickSubscription) {\n                // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n                // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n                // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n                this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n            }\n        }\n        else {\n            this._keydownSubscription?.unsubscribe();\n            this._outsideClickSubscription?.unsubscribe();\n            this._keydownSubscription = this._outsideClickSubscription = null;\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir ?? undefined,\n            panelClass: this._defaults?.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n            // because it activates the first option that passes the skip predicate, rather than the\n            // first *enabled* option.\n            let firstEnabledOptionIndex = -1;\n            for (let index = 0; index < autocomplete.options.length; index++) {\n                const option = autocomplete.options.get(index);\n                if (!option.disabled) {\n                    firstEnabledOptionIndex = index;\n                    break;\n                }\n            }\n            autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this.autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document?.defaultView || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = this.autocomplete.id;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n            this._trackedModal = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatAutocompleteTrigger, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: MAT_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i2.Directionality, optional: true }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: i3.ViewportRuler }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatAutocompleteTrigger, isStandalone: true, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\", booleanAttribute] }, host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-controls\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-mdc-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-mdc-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }, {\n                    type: Host\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }], propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: [{ alias: 'matAutocompleteDisabled', transform: booleanAttribute }]\n            }] } });\n\nclass MatAutocompleteModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatAutocompleteModule, imports: [OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule,\n            MatAutocomplete,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin], exports: [CdkScrollableModule,\n            MatAutocomplete,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule, CdkScrollableModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        OverlayModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                        CommonModule,\n                        MatAutocomplete,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatAutocomplete,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n"],"x_google_ignoreList":[0]}