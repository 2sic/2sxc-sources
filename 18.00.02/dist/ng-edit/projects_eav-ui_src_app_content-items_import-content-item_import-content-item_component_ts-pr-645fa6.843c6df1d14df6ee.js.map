{"version":3,"file":"projects_eav-ui_src_app_content-items_import-content-item_import-content-item_component_ts-pr-645fa6.843c6df1d14df6ee.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","constructor","http","context","dnnContext","this","apiUrl","name","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","Éµfac","ImportContentItemComponent","dialogData","uploadType","UploadTypes","ContentItem","contentItemsService","transient","ContentItemsService","title","description","allowedFileTypes","upload$","importItem","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_3__","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","FileUploadDialogComponent","webApiFieldsRoot","webApiFieldsAll","webApiFieldsGetShared","ContentTypesFieldsService","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","contentTypeStaticName","fields","fld","Metadata","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","addInheritedField","targetContentTypeId","sourceContentTypeStaticName","sourceFieldGuid","newName","AppId","ContentTypeId","SourceType","SourceField","share","inherit","inheritMetadataOf","reOrder","idArray","Id","order","JSON","stringify","setTitle","item","rename","fieldId","IsTitle","Error","add","newField","Index","SortOrder","updateInputType","id","field","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText","logSpecs","enabled","specs","all","getEntities","getAvailableEntities","webApiEntityRoot","webApiEntityList","EntityService","queryService","QueryService","log","EavLogger","getEntities$","fnIf","filter","p","switchMap","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","data","Default","entityId","force","parentId","parentField","parent","_angular_core__WEBPACK_IMPORTED_MODULE_7__","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","Guids","join"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/content-items/import-content-item/import-content-item.component.ts","./projects/eav-ui/src/app/content-items/import-content-item/import-content-item.component.html","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FileUploadDialogComponent, FileUploadDialogData, UploadTypes } from '../../shared/components/file-upload-dialog';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { transient } from '../../core';\r\n\r\n@Component({\r\n  selector: 'app-import-content-item',\r\n  templateUrl: './import-content-item.component.html',\r\n  styleUrls: ['./import-content-item.component.scss'],\r\n  standalone: true,\r\n  imports: [FileUploadDialogComponent,],\r\n})\r\nexport class ImportContentItemComponent {\r\n\r\n  uploadType = UploadTypes.ContentItem;\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) dialogData: FileUploadDialogData) {\r\n    dialogData.title ??= `Import Single Item`;\r\n    dialogData.description ??= `Select an item file (json) from your computer to import.`;\r\n    dialogData.allowedFileTypes ??= 'json';\r\n    dialogData.upload$ ??= (files) => this.contentItemsService.importItem(files[0]);\r\n  }\r\n\r\n}\r\n","<app-file-upload-dialog [uploadType]=\"uploadType\"></app-file-upload-dialog>\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../services/context';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\nimport { InputTypeStrict } from './input-type-catalog';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = 'admin/field/all';\r\nexport const webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputTypeMetadata[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString() },\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * \r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * \r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    // TODO: @SDV - do the same as in getShareableFields()\r\n    // but add parameter attributeId to the webapi call\r\n    // I'll create the backend afterwards\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString(), attributeId: attributeId.toString() },\r\n      });\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceContentTypeStaticName: string, sourceFieldGuid: string, newName: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'AddInheritedField'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: targetContentTypeId.toString(),\r\n        SourceType: sourceContentTypeStaticName,\r\n        SourceField: sourceFieldGuid,\r\n        name: newName,\r\n      }\r\n    });\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Share'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Inherit'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: InputTypeStrict) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { EntityBasic } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { transient } from '../../core';\r\n\r\nconst logSpecs = {\r\n  enabled: false,\r\n  name: 'EntityService',\r\n  specs: {\r\n    all: false,\r\n    getEntities: false,\r\n    getAvailableEntities: false,\r\n    delete: false,\r\n  }\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n @Injectable()\r\n export class EntityService {\r\n  private queryService = transient(QueryService);\r\n\r\n  log = new EavLogger(logSpecs);\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext) { }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { Context } from './context';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\n\r\nconst logSpecs = {\r\n  enabled: false,\r\n  name: 'QueryService',\r\n  specs: {\r\n    all: false,\r\n    getAvailableEntities: false,\r\n    getEntities: false,\r\n  }\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = new EavLogger(logSpecs);\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getAvailableEntities(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}