{"version":3,"mappings":"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","names":["AppDialogConfigService","constructor","http","context","dnnContext","this","getDialogSettings","appId","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","pipe","map","dialogSettings","Context","Language","List","filter","language","IsEnabled","i0","factory","ExportAppPartsService","getContentInfo","scope","webApiAppPartsRoot","appid","zoneId","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","getAppInfo","webApiAppRoot","exportApp","includeContentGroups","resetAppGuid","exportForVersionControl","ImportAppPartsService","importAppParts","file","formData","FormData","append","post","resetApp","webApiQueryRoot","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","contentType","webApiEntityList","importQuery","from","toBase64","mergeMap","fileBase64","AppId","ContentBase64","clonePipeline","id","Id","delete","ViewsService","webApiViewRoot","import","export","getPolymorphism","getUsage","guid","ContentItemsService","contentTypeStaticName","getColumns","webApiFieldsAll","staticName","importItem","webApiEntityRoot","ImportAppService","importApp","changedName","MetadataActionsComponent","agInit","refresh","deleteMetadata","onDelete","data","selectors","ctx","MetadataContentTypeComponent","value","metadata","ConfirmDeleteDialogComponent","dialogData","dialogRef","closeDialog","confirm","close","MAT_DIALOG_DATA","ctx_r12","ctx_r14","ctx_r15","ctx_r16","ctx_r17","MetadataSaveDialogComponent","contentTypesService","dropdownInsertValue","ngOnInit","contentTypes$","BehaviorSubject","scopeOptions$","buildForm","fetchScopes","templateVars$","combineLatest","contentTypes","scopeOptions","ngOnDestroy","complete","toggleGuidedContentType","guidedContentType","toggleAdvancedMode","event","advancedMode","checked","formValues","form","getRawValue","FormGroup","addControl","FormControl","Validators","eavConstants","controls","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","patchValue","prompt","some","option","next","name","fetchContentTypes","retrieveContentTypes","getScopes","scopes","ctx_r19","oxw","ctx_r21","ctx_r23","ctx_r25","MetadataComponent","router","route","metadataService","snackBar","entitiesService","contentItemsService","dialog","viewContainerRef","changeDetectorRef","AllCommunityModules","Object","defaultGridOptions","frameworkComponents","idFieldComponent","IdFieldComponent","metadataContentTypeComponent","metadataActionsComponent","columnDefs","headerName","field","width","headerClass","cellClass","cellRenderer","sortable","valueGetter","cellRendererParams","tooltipGetter","Guid","flex","minWidth","Title","sort","onCellClicked","editMetadata","_Type","Name","pinned","undefined","Subscription","parseInt","snapshot","paramMap","decodeURIComponent","K","_a","fetchFor","fetchMetadata","refreshOnChildClosed","filteredRecommendations$","metadata$","recommendations$","metadataItems","recommendations","r","Count","i","itemFor$","fabOpen$","itemFor","fabOpen","subscription","unsubscribe","openChange","createMetadata","recommendation","CreateEmpty","create","For","calculateItemFor","error","duration","createMetadataForm","autoFocus","afterClosed","items","ContentTypeName","formUrl","convertFormToUrl","navigate","relativeTo","markForCheck","Target","a","e","values","find","m","targetType","target","_b","TargetType","keyType","key","Number","String","item","getMetadata","Items","Recommendations","EntityId","confirmed","entityId","entityTitle","message","u","DeleteWarning","isConfirmed","add","events","NavigationEnd","firstChild","pairwise","hadChild","hasChild","FieldHintComponent","toggleIsShort","isShort","ClickStopPropagationDirective","onClick","stopPropagation","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","readAsText","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","pure"],"sources":["./projects/ng-dialogs/src/app/app-administration/services/app-dialog-config.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app.service.ts","./projects/ng-dialogs/src/app/app-administration/services/import-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/pipelines.service.ts","./projects/ng-dialogs/src/app/app-administration/services/views.service.ts","./projects/ng-dialogs/src/app/content-items/services/content-items.service.ts","./projects/ng-dialogs/src/app/import-app/services/import-app.service.ts","./projects/ng-dialogs/src/app/metadata/ag-grid-components/metadata-actions/metadata-actions.component.ts","./projects/ng-dialogs/src/app/metadata/ag-grid-components/metadata-actions/metadata-actions.component.html","./projects/ng-dialogs/src/app/metadata/ag-grid-components/metadata-content-type/metadata-content-type.component.ts","./projects/ng-dialogs/src/app/metadata/ag-grid-components/metadata-content-type/metadata-content-type.component.html","./projects/ng-dialogs/src/app/metadata/confirm-delete-dialog/confirm-delete-dialog.component.html","./projects/ng-dialogs/src/app/metadata/confirm-delete-dialog/confirm-delete-dialog.component.ts","./projects/ng-dialogs/src/app/metadata/metadata-save-dialog/metadata-save-dialog.component.html","./projects/ng-dialogs/src/app/metadata/metadata-save-dialog/metadata-save-dialog.component.ts","./projects/ng-dialogs/src/app/metadata/metadata.component.html","./projects/ng-dialogs/src/app/metadata/metadata.component.ts","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/helpers/file-to-base64.helper.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dialogSettings => {\r\n        dialogSettings.Context.Language.List = dialogSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dialogSettings;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp() {\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryRoot = 'admin/query/';\r\nconst webApiQueryImport = webApiQueryRoot + 'import';\r\nconst webApiQueryClone = webApiQueryRoot + 'Clone';\r\nconst webApiQueryDelete = webApiQueryRoot + 'Delete';\r\nexport const webApiQueryRun = webApiQueryRoot + 'Run';\r\nexport const webApiQueryDebugStream = webApiQueryRoot + 'DebugStream';\r\nexport const webApiQuerySave = webApiQueryRoot + 'Save';\r\nexport const webApiQueryGet = webApiQueryRoot + 'Get';\r\nexport const webApiQueryDataSources = webApiQueryRoot + 'DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ImportAppResult } from '../models/import-app-result.model';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ? changedName : '');\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MetadataItem } from '../../models/metadata.model';\r\nimport { MetadataActionsParams } from './metadata-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-metadata-actions',\r\n  templateUrl: './metadata-actions.component.html',\r\n  styleUrls: ['./metadata-actions.component.scss'],\r\n})\r\nexport class MetadataActionsComponent implements ICellRendererAngularComp {\r\n  private params: MetadataActionsParams;\r\n\r\n  agInit(params: MetadataActionsParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  deleteMetadata() {\r\n    const metadata: MetadataItem = this.params.data;\r\n    this.params.onDelete(metadata);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Delete\" (click)=\"deleteMetadata()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MetadataItem } from '../../models/metadata.model';\r\n\r\n@Component({\r\n  selector: 'app-metadata-content-type',\r\n  templateUrl: './metadata-content-type.component.html',\r\n  styleUrls: ['./metadata-content-type.component.scss'],\r\n})\r\nexport class MetadataContentTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  metadata: MetadataItem;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.metadata = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"container\" [tippy]=\"metadata._Type.Description\" [tippyDisabled]=\"!metadata._Type.Description\">\r\n  {{ value }}\r\n</div>\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Delete {{ dialogData.entityTitle }} ({{ dialogData.entityId }})?</div>\r\n</div>\r\n\r\n<div class=\"dialog-component-content fancy-scrollbar-light\" *ngIf=\"dialogData.message\"\r\n  [innerHtml]=\"dialogData.message | safeHtml\">\r\n</div>\r\n\r\n<div class=\"dialog-component-actions\">\r\n  <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n  <button mat-raised-button (click)=\"closeDialog(true)\">Delete</button>\r\n</div>\r\n","import { Component, HostBinding, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ConfirmDeleteDialogData } from './confirm-delete-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-confirm-delete-dialog',\r\n  templateUrl: './confirm-delete-dialog.component.html',\r\n  styleUrls: ['./confirm-delete-dialog.component.scss'],\r\n})\r\nexport class ConfirmDeleteDialogComponent {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: ConfirmDeleteDialogData,\r\n    private dialogRef: MatDialogRef<ConfirmDeleteDialogComponent>,\r\n  ) { }\r\n\r\n  closeDialog(confirm?: boolean) {\r\n    this.dialogRef.close(confirm);\r\n  }\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create Metadata</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This is a special operation to add an item which is metadata for another item,\r\n    see <a href=\"http://r.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- Scope -->\r\n      <ng-container *ngIf=\"advancedMode && guidedContentType\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select formControlName=\"scope\" [placeholder]=\"!data.scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n            <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n      </ng-container>\r\n\r\n      <!-- Content Type of metadata item -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Content Type</mat-label>\r\n        <mat-select *ngIf=\"guidedContentType\" formControlName=\"contentType\" required\r\n          [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"text\" *ngIf=\"!guidedContentType\" formControlName=\"contentType\" required>\r\n\r\n        <div matSuffix class=\"selection-suffix\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': guidedContentType }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedContentType(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !guidedContentType }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedContentType(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"form.controls.contentType.touched && form.controls.contentType.errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <mat-slide-toggle color=\"accent\" [checked]=\"advancedMode\" (change)=\"toggleAdvancedMode($event)\">\r\n        {{ advancedMode ? 'Advanced' : 'Simple' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { MetadataSaveDialogTemplateVars, MetadataSaveFormValues } from './metadata-save-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-metadata-save-dialog',\r\n  templateUrl: './metadata-save-dialog.component.html',\r\n  styleUrls: ['./metadata-save-dialog.component.scss']\r\n})\r\nexport class MetadataSaveDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  templateVars$: Observable<MetadataSaveDialogTemplateVars>;\r\n  guidedContentType = true;\r\n  advancedMode = false;\r\n\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<MetadataSaveDialogComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n\r\n    this.buildForm();\r\n    this.fetchScopes();\r\n\r\n    this.templateVars$ = combineLatest([this.contentTypes$, this.scopeOptions$]).pipe(\r\n      map(([contentTypes, scopeOptions]) => {\r\n        const templateVars: MetadataSaveDialogTemplateVars = {\r\n          contentTypes,\r\n          scopeOptions,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.contentTypes$.complete();\r\n    this.scopeOptions$.complete();\r\n  }\r\n\r\n  closeDialog(contentType?: string): void {\r\n    this.dialogRef.close(contentType);\r\n  }\r\n\r\n  toggleGuidedContentType(guidedContentType: boolean): void {\r\n    this.guidedContentType = guidedContentType;\r\n  }\r\n\r\n  toggleAdvancedMode(event: MatSlideToggleChange): void {\r\n    this.advancedMode = event.checked;\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataSaveFormValues = this.form.getRawValue();\r\n    this.closeDialog(formValues.contentType);\r\n  }\r\n\r\n  private buildForm(): void {\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('contentType', new FormControl(null, [Validators.required]));\r\n    this.form.addControl('scope', new FormControl(eavConstants.scopes.default.value));\r\n\r\n    this.form.controls.scope.valueChanges.pipe(\r\n      startWith(this.form.controls.scope.value),\r\n      distinctUntilChanged(),\r\n    ).subscribe((newScope: string) => {\r\n      // reset content types when scope changes\r\n      if (this.form.controls.contentType.value != null) {\r\n        this.form.controls.contentType.patchValue(null);\r\n      }\r\n\r\n      // add new scope on manual entry\r\n      if (newScope === dropdownInsertValue) {\r\n        newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n        if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n          const newScopeOption: ScopeOption = {\r\n            name: newScope,\r\n            value: newScope,\r\n          };\r\n          this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n        }\r\n        this.form.controls.scope.patchValue(newScope);\r\n      } else {\r\n        this.fetchContentTypes(newScope);\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div class=\"nav-component-wrapper\">\r\n    <div mat-dialog-title>\r\n      <div class=\"dialog-title-box\">\r\n        <div>{{ title || 'Metadata' }}</div>\r\n        <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <p class=\"dialog-description\">\r\n      <ng-container *ngIf=\"!data.itemFor\">This item is not metadata for anything else.</ng-container>\r\n      <ng-container *ngIf=\"data.itemFor\">\r\n        This item is metadata for:\r\n        <br>Target: {{ data.itemFor.Target }}\r\n        <br>TargetType: {{ data.itemFor.TargetType }}\r\n        <ng-container *ngIf=\"data.itemFor.Number\"><br>Number: {{ data.itemFor.Number }}</ng-container>\r\n        <ng-container *ngIf=\"data.itemFor.Guid\"><br>Guid: {{ data.itemFor.Guid }}</ng-container>\r\n        <ng-container *ngIf=\"data.itemFor.String\"><br>String: {{ data.itemFor.String }}</ng-container>\r\n        <ng-container *ngIf=\"data.itemFor.Title\"><br>Title: {{ data.itemFor.String }}</ng-container>\r\n      </ng-container>\r\n    </p>\r\n\r\n    <router-outlet></router-outlet>\r\n\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"data.metadata\" [modules]=\"modules\"\r\n        [gridOptions]=\"gridOptions\">\r\n      </ag-grid-angular>\r\n\r\n      <div class=\"grid-more-actions-box\"></div>\r\n\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" *ngIf=\"data.recommendations.length === 0\"\r\n        tippy=\"Create a new metadata for this item\" (click)=\"createMetadata()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n\r\n      <eco-fab-speed-dial class=\"grid-fab\" [ngClass]=\"{ 'fab-opened': data.fabOpen }\"\r\n        *ngIf=\"data.recommendations.length > 0\" (openChange)=\"openChange($event)\">\r\n        <eco-fab-speed-dial-trigger [spin]=\"true\">\r\n          <button mat-fab>\r\n            <mat-icon class=\"spin180\">{{ data.fabOpen ? 'close' : 'add' }}</mat-icon>\r\n          </button>\r\n        </eco-fab-speed-dial-trigger>\r\n\r\n        <eco-fab-speed-dial-actions>\r\n          <button mat-mini-fab label=\"Other Content Type\" (click)=\"createMetadata()\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-mini-fab *ngFor=\"let recommendation of data.recommendations\" [attr.label]=\"recommendation.Title\"\r\n            (click)=\"createMetadata(recommendation)\">\r\n            <mat-icon>{{ recommendation.Icon || 'add' }}</mat-icon>\r\n          </button>\r\n        </eco-fab-speed-dial-actions>\r\n      </eco-fab-speed-dial>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n","import { AllCommunityModules, GridOptions } from '@ag-grid-community/all-modules';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { EavFor } from '../../../../edit/shared/models/eav';\r\nimport { ContentItemsService } from '../content-items/services/content-items.service';\r\nimport { EntitiesService } from '../content-items/services/entities.service';\r\nimport { MetadataService } from '../permissions';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { MetadataActionsComponent } from './ag-grid-components/metadata-actions/metadata-actions.component';\r\nimport { MetadataActionsParams } from './ag-grid-components/metadata-actions/metadata-actions.models';\r\nimport { MetadataContentTypeComponent } from './ag-grid-components/metadata-content-type/metadata-content-type.component';\r\nimport { ConfirmDeleteDialogComponent } from './confirm-delete-dialog/confirm-delete-dialog.component';\r\nimport { ConfirmDeleteDialogData } from './confirm-delete-dialog/confirm-delete-dialog.models';\r\nimport { MetadataSaveDialogComponent } from './metadata-save-dialog/metadata-save-dialog.component';\r\nimport { MetadataItem, MetadataRecommendation, MetadataTemplateVars } from './models/metadata.model';\r\n\r\n@Component({\r\n  selector: 'app-metadata',\r\n  templateUrl: './metadata.component.html',\r\n  styleUrls: ['./metadata.component.scss'],\r\n})\r\nexport class MetadataComponent implements OnInit, OnDestroy {\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      idFieldComponent: IdFieldComponent,\r\n      metadataContentTypeComponent: MetadataContentTypeComponent,\r\n      metadataActionsComponent: MetadataActionsComponent,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline',\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agNumberColumnFilter',\r\n        valueGetter: (params) => (params.data as MetadataItem).Id,\r\n        cellRendererParams: {\r\n          tooltipGetter: (metadata: MetadataItem) => `ID: ${metadata.Id}\\nGUID: ${metadata.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        field: 'Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        valueGetter: (params) => (params.data as MetadataItem).Title,\r\n        sortable: true, sort: 'asc', filter: 'agTextColumnFilter',\r\n        onCellClicked: (event) => this.editMetadata(event.data as MetadataItem),\r\n      },\r\n      {\r\n        headerName: 'Content Type', field: 'ContentType', flex: 2, minWidth: 250, cellClass: 'no-outline', sortable: true,\r\n        cellRenderer: 'metadataContentTypeComponent', filter: 'agTextColumnFilter', valueGetter: (params) => {\r\n          const metadata = params.data as MetadataItem;\r\n          return `${metadata._Type.Name}${metadata._Type.Title !== metadata._Type.Name ? ` (${metadata._Type.Title})` : ''}`;\r\n        },\r\n      },\r\n      {\r\n        width: 42, cellClass: 'secondary-action no-padding', cellRenderer: 'metadataActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onDelete: (metadata) => this.deleteMetadata(metadata),\r\n        } as MetadataActionsParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  private metadata$ = new BehaviorSubject<MetadataItem[]>([]);\r\n  private recommendations$ = new BehaviorSubject<MetadataRecommendation[]>([]);\r\n  private itemFor$ = new BehaviorSubject<EavFor | undefined>(undefined);\r\n  private fabOpen$ = new BehaviorSubject(false);\r\n  private subscription = new Subscription();\r\n  private targetType = parseInt(this.route.snapshot.paramMap.get('targetType'), 10);\r\n  private keyType = this.route.snapshot.paramMap.get('keyType') as MetadataKeyType;\r\n  private key = this.route.snapshot.paramMap.get('key');\r\n  title = decodeURIComponent(this.route.snapshot.paramMap.get('title') ?? '');\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  templateVars$: Observable<MetadataTemplateVars>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<MetadataComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private metadataService: MetadataService,\r\n    private snackBar: MatSnackBar,\r\n    private entitiesService: EntitiesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchFor();\r\n    this.fetchMetadata();\r\n    this.refreshOnChildClosed();\r\n\r\n    const filteredRecommendations$ = combineLatest([this.metadata$, this.recommendations$]).pipe(\r\n      map(([metadataItems, recommendations]) =>\r\n        recommendations.filter(r => r.Count === 1 && !metadataItems.some(i => i._Type.Id === r.Id))),\r\n    );\r\n    this.templateVars$ = combineLatest([this.metadata$, filteredRecommendations$, this.itemFor$, this.fabOpen$]).pipe(\r\n      map(([metadata, recommendations, itemFor, fabOpen]) => {\r\n        const templateVars: MetadataTemplateVars = {\r\n          metadata,\r\n          recommendations,\r\n          itemFor,\r\n          fabOpen,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.metadata$.complete();\r\n    this.recommendations$.complete();\r\n    this.itemFor$.complete();\r\n    this.fabOpen$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openChange(open: boolean) {\r\n    this.fabOpen$.next(open);\r\n  }\r\n\r\n  createMetadata(recommendation?: MetadataRecommendation) {\r\n    if (recommendation) {\r\n      if (recommendation.CreateEmpty) {\r\n        this.snackBar.open(`Creating ${recommendation.Name}...`);\r\n        this.entitiesService.create(recommendation.Id, { For: this.calculateItemFor() }).subscribe({\r\n          error: () => {\r\n            this.snackBar.open(`Creating ${recommendation.Name} failed. Please check console for more info`, undefined, { duration: 3000 });\r\n            this.fetchMetadata();\r\n          },\r\n          next: () => {\r\n            this.snackBar.open(`Created ${recommendation.Name}`, undefined, { duration: 3000 });\r\n            this.fetchMetadata();\r\n          },\r\n        });\r\n      } else {\r\n        this.createMetadataForm(recommendation.Id);\r\n      }\r\n      return;\r\n    }\r\n    const metadataDialogRef = this.dialog.open(MetadataSaveDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((contentType?: string) => {\r\n      if (contentType == null) { return; }\r\n      this.createMetadataForm(contentType);\r\n    });\r\n  }\r\n\r\n  private createMetadataForm(contentType: string) {\r\n    const form: EditForm = {\r\n      items: [{\r\n        ContentTypeName: contentType,\r\n        For: this.calculateItemFor(),\r\n      }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private calculateItemFor(): EavFor {\r\n    const itemFor: EavFor = {\r\n      Target: Object.values(eavConstants.metadata).find(m => m.targetType === this.targetType)?.target ?? this.targetType.toString(),\r\n      TargetType: this.targetType,\r\n      ...(this.keyType === eavConstants.keyTypes.guid && { Guid: this.key }),\r\n      ...(this.keyType === eavConstants.keyTypes.number && { Number: parseInt(this.key, 10) }),\r\n      ...(this.keyType === eavConstants.keyTypes.string && { String: this.key }),\r\n    };\r\n    return itemFor;\r\n  }\r\n\r\n  private fetchFor() {\r\n    if (!this.contentTypeStaticName) { return; }\r\n\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      const item = items.find(i => i.Guid === this.key);\r\n      if (item?.For) {\r\n        this.itemFor$.next(item.For);\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchMetadata() {\r\n    this.metadataService.getMetadata(this.targetType, this.keyType, this.key).subscribe(metadata => {\r\n      this.metadata$.next(metadata.Items);\r\n      this.recommendations$.next(metadata.Recommendations);\r\n    });\r\n  }\r\n\r\n  private editMetadata(metadata: MetadataItem) {\r\n    const form: EditForm = {\r\n      items: [{ EntityId: metadata.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private deleteMetadata(metadata: MetadataItem, confirmed = false) {\r\n    if (!confirmed) {\r\n      const data: ConfirmDeleteDialogData = {\r\n        entityId: metadata.Id,\r\n        entityTitle: metadata.Title,\r\n        message: this.recommendations$.value.find(r => r.Id === metadata._Type.Id)?.DeleteWarning,\r\n      };\r\n      const confirmationDialogRef = this.dialog.open(ConfirmDeleteDialogComponent, {\r\n        autoFocus: false,\r\n        data,\r\n        viewContainerRef: this.viewContainerRef,\r\n        width: '650px',\r\n      });\r\n      confirmationDialogRef.afterClosed().subscribe((isConfirmed: boolean) => {\r\n        if (isConfirmed) {\r\n          this.deleteMetadata(metadata, true);\r\n        }\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(metadata._Type.Id, metadata.Id, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchMetadata();\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Delete failed. Please check console for more information', null, { duration: 3000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchMetadata();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_metadata_metadata_component_ts.159ca9b520612e4b.js"}