{"version":3,"mappings":"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","names":["PermissionsActionsComponent","agInit","params","this","refresh","deletePermission","onDelete","data","selectors","i0","ctx","PermissionsComponent","constructor","dialogRef","router","route","permissionsService","snackBar","BehaviorSubject","AllCommunityModules","Object","defaultGridOptions","frameworkComponents","idFieldComponent","IdFieldComponent","permissionsActionsComponent","columnDefs","headerName","field","width","headerClass","cellClass","cellRenderer","sortable","filter","valueGetter","Id","cellRendererParams","tooltipGetter","permission","Guid","flex","minWidth","sort","onCellClicked","event","editPermission","Title","Identity","Condition","Grant","pinned","Subscription","parseInt","snapshot","paramMap","get","eavConstants","PermissionType","ngOnInit","fetchPermissions","refreshOnChildClosed","ngOnDestroy","permissions$","complete","subscription","unsubscribe","closeDialog","close","getAll","targetType","keyType","key","subscribe","permissions","next","form","items","ContentTypeName","For","Target","m","o","values","find","_a","target","_b","toString","TargetType","Number","String","prefills","Prefill","EntityId","formUrl","convertFormToUrl","navigate","relativeTo","confirm","open","delete","duration","add","events","pipe","NavigationEnd","startWith","firstChild","map","pairwise","hadChild","hasChild","id","value","align","tooltip","copy","copyToClipboard","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange"],"sources":["./projects/ng-dialogs/src/app/permissions/ag-grid-components/permissions-actions/permissions-actions.component.ts","./projects/ng-dialogs/src/app/permissions/ag-grid-components/permissions-actions/permissions-actions.component.html","./projects/ng-dialogs/src/app/permissions/permissions.component.ts","./projects/ng-dialogs/src/app/permissions/permissions.component.html","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.html","./projects/ng-dialogs/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { Permission } from '../../models/permission.model';\r\nimport { PermissionsActionsParams } from './permissions-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-permissions-actions',\r\n  templateUrl: './permissions-actions.component.html',\r\n  styleUrls: ['./permissions-actions.component.scss'],\r\n})\r\nexport class PermissionsActionsComponent implements ICellRendererAngularComp {\r\n  private params: PermissionsActionsParams;\r\n\r\n  agInit(params: PermissionsActionsParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  deletePermission() {\r\n    const permission: Permission = this.params.data;\r\n    this.params.onDelete(permission);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Delete\" (click)=\"deletePermission()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n</div>\r\n","import { AllCommunityModules, GridOptions } from '@ag-grid-community/all-modules';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { PermissionsActionsComponent } from './ag-grid-components/permissions-actions/permissions-actions.component';\r\nimport { PermissionsActionsParams } from './ag-grid-components/permissions-actions/permissions-actions.models';\r\nimport { Permission } from './models/permission.model';\r\nimport { PermissionsService } from './services/permissions.service';\r\n\r\n@Component({\r\n  selector: 'app-permissions',\r\n  templateUrl: './permissions.component.html',\r\n  styleUrls: ['./permissions.component.scss'],\r\n})\r\nexport class PermissionsComponent implements OnInit, OnDestroy {\r\n  permissions$ = new BehaviorSubject<Permission[]>(null);\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      idFieldComponent: IdFieldComponent,\r\n      permissionsActionsComponent: PermissionsActionsComponent,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline',\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agNumberColumnFilter',\r\n        valueGetter: (params) => (params.data as Permission).Id,\r\n        cellRendererParams: {\r\n          tooltipGetter: (permission: Permission) => `ID: ${permission.Id}\\nGUID: ${permission.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        field: 'Name', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, sort: 'asc', filter: 'agTextColumnFilter',\r\n        onCellClicked: (event) => this.editPermission(event.data as Permission),\r\n        valueGetter: (params) => (params.data as Permission).Title,\r\n      },\r\n      {\r\n        field: 'Identity', flex: 2, minWidth: 250, cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter', valueGetter: (params) => (params.data as Permission).Identity,\r\n      },\r\n      {\r\n        field: 'Condition', flex: 2, minWidth: 250, cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter', valueGetter: (params) => (params.data as Permission).Condition,\r\n      },\r\n      {\r\n        field: 'Grant', width: 70, headerClass: 'dense', cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter', valueGetter: (params) => (params.data as Permission).Grant,\r\n      },\r\n      {\r\n        width: 42, cellClass: 'secondary-action no-padding', cellRenderer: 'permissionsActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onDelete: (permission) => this.deletePermission(permission),\r\n        } as PermissionsActionsParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  private subscription = new Subscription();\r\n  private targetType = parseInt(this.route.snapshot.paramMap.get('targetType'), 10);\r\n  private keyType = this.route.snapshot.paramMap.get('keyType') as MetadataKeyType;\r\n  private key = this.route.snapshot.paramMap.get('key');\r\n  private prefills: Record<string, Record<string, string>> = {\r\n    [eavConstants.metadata.language.targetType]: {\r\n      PermissionType: 'language',\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<PermissionsComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private permissionsService: PermissionsService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchPermissions();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.permissions$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private fetchPermissions() {\r\n    this.permissionsService.getAll(this.targetType, this.keyType, this.key).subscribe(permissions => {\r\n      this.permissions$.next(permissions);\r\n    });\r\n  }\r\n\r\n  editPermission(permission?: Permission) {\r\n    let form: EditForm;\r\n    if (permission == null) {\r\n      form = {\r\n        items: [{\r\n          ContentTypeName: eavConstants.contentTypes.permissions,\r\n          For: {\r\n            Target: Object.values(eavConstants.metadata).find(m => m.targetType === this.targetType)?.target ?? this.targetType.toString(),\r\n            TargetType: this.targetType,\r\n            ...(this.keyType === eavConstants.keyTypes.guid && { Guid: this.key }),\r\n            ...(this.keyType === eavConstants.keyTypes.number && { Number: parseInt(this.key, 10) }),\r\n            ...(this.keyType === eavConstants.keyTypes.string && { String: this.key }),\r\n          },\r\n          ...(this.prefills[this.targetType] && { Prefill: this.prefills[this.targetType] }),\r\n        }],\r\n      };\r\n    } else {\r\n      form = {\r\n        items: [{ EntityId: permission.Id }],\r\n      };\r\n    }\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private deletePermission(permission: Permission) {\r\n    if (!confirm(`Delete '${permission.Title}' (${permission.Id})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.permissionsService.delete(permission.Id).subscribe(() => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchPermissions();\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchPermissions();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Permissions</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"permissions$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\"></div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new permission\" (click)=\"editPermission(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: IdFieldParams) {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_permissions_permissions_component_ts.6cd416c6ac50d64f.js"}