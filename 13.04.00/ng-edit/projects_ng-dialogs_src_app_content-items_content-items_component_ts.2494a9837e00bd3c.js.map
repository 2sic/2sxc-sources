{"version":3,"mappings":"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","names":["AppDialogConfigService","constructor","http","context","dnnContext","this","getDialogSettings","appId","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","pipe","map","dialogSettings","Context","Language","List","filter","language","IsEnabled","i0","factory","ExportAppPartsService","getContentInfo","scope","webApiAppPartsRoot","appid","zoneId","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","getAppInfo","webApiAppRoot","exportApp","includeContentGroups","resetAppGuid","exportForVersionControl","ImportAppPartsService","importAppParts","file","formData","FormData","append","post","resetApp","webApiQueryRoot","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","contentType","webApiEntityList","importQuery","from","toBase64","mergeMap","fileBase64","AppId","ContentBase64","clonePipeline","id","Id","delete","ViewsService","webApiViewRoot","import","export","getPolymorphism","getUsage","guid","EntityFilterComponent","agInit","filterParams","isFilterActive","idFilter","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","data","node","getValue","field","some","value","includes","item","n","headerName","_a","getModel","filterType","setModel","model","e","a","_b","idFilterString","v","r","_c","_d","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","el","parseInt","isNaN","filterChanged","filterChangedCallback","selectors","ctx","ctx_r2","ContentItemsActionsComponent","refresh","clone","onClone","onExport","deleteItem","onDelete","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","entities","text","replace","ContentItemsStatusComponent","readOnly","_EditInfo","ReadOnly","metadataCount","Metadata","metadataTooltip","For","Target","TargetType","Number","String","Guid","Title","openMetadata","onOpenMetadata","PubMetaFilterComponent","published","metadata","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","f","form","control","keyType","controls","testValue","eavConstants","test","patternWholeNumber","hasCurly","bracket","substring","guidRegex","patternGuid","ctx_r54","oxw","ctx_r56","ctx_r58","ctx_r60","ctx_r61","CreateMetadataDialogComponent","dialogRef","contentItemsService","contentTypesService","dropdownInsertValue","ngOnInit","subscription","Subscription","targetTypeOptions","Object","option","keyTypeOptions","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","FormGroup","addControl","FormControl","Validators","metadataKeyValidator","add","scopeForContentTypes","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","name","fetchContentTypes","merge","targetType","formValues","getRawValue","key","contentTypeStaticName","items","formValues$","GeneralHelpers","combineLatest","guidedMode","foundTargetType","find","updatedForm","isAppMetadata","keys","templateVars$","scopeOptions","contentItems","contentTypes","guidedKey","unknownTargetType","targetTypeHint","h","hint","guidedKeyExists","ngOnDestroy","complete","unsubscribe","closeDialog","result","close","toggleGuidedKey","event","toggleGuidedMode","checked","confirm","target","retrieveContentTypes","getScopes","scopes","ctx_r5","ContentItemsComponent","router","route","entitiesService","contentExportService","snackBar","globalConfigService","dialog","viewContainerRef","changeDetectorRef","undefined","getDebugEnabled$","AllCommunityModules","defaultGridOptions","snapshot","paramMap","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosed","contentType$","items$","gridApi$","onGridReady","retrieveContentType","getColumns","columns","columnDefs","buildColumnDefs","filterModel","urlFilters","filters","charAt","atob","JSON","parse","error","console","IsPublished","IsMetadata","Status","entries","forEach","columnDef","c","F","type","filterTo","A","buildFilterModel","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","consoleLogAngular","setFilterModel","GoToMetadata","_Title","navigate","relativeTo","editItem","formUrl","convertFormToUrl","ContentTypeName","EntityId","exportContent","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","filesDropped","files","importFile","lastIndexOf","toLocaleLowerCase","importContent","importItem","state","createMetadata","autoFocus","width","afterClosed","itemFor","markForCheck","debugFilter","warn","duration","events","NavigationEnd","firstChild","pairwise","hadChild","hasChild","headerClass","cellClass","cellRenderer","IdFieldComponent","sortable","cellRendererParams","tooltipGetter","_RepositoryId","valueGetterStatus","flex","minWidth","onCellClicked","headerTooltip","valueGetterUsage","pinned","StaticName","Type","DataTypeConstants","Entity","AllowMultiValue","valueGetterEntityField","useTimePicker","DateTime","_e","UseTimePicker","_f","valueGetterDateTime","valueGetterBoolean","BooleanFilterComponent","DuplicateEntity","exportEntity","err","dismiss","ExceptionMessage","_Used","_Uses","rawValue","ImportAppService","importApp","changedName","FieldHintComponent","toggleIsShort","isShort","align","tooltip","copy","copyToClipboard","ClickStopPropagationDirective","onClick","stopPropagation","ToggleDebugDirective","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","str","document","createElement","setAttribute","style","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","pure"],"sources":["./projects/ng-dialogs/src/app/app-administration/services/app-dialog-config.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app.service.ts","./projects/ng-dialogs/src/app/app-administration/services/import-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/pipelines.service.ts","./projects/ng-dialogs/src/app/app-administration/services/views.service.ts","./projects/ng-dialogs/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/ng-dialogs/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.html","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/ng-dialogs/src/app/content-items/content-items.component.html","./projects/ng-dialogs/src/app/content-items/content-items.component.ts","./projects/ng-dialogs/src/app/content-items/content-items.helpers.ts","./projects/ng-dialogs/src/app/import-app/services/import-app.service.ts","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.html","./projects/ng-dialogs/src/app/shared/constants/guid.constants.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dialogSettings => {\r\n        dialogSettings.Context.Language.List = dialogSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dialogSettings;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp() {\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryRoot = 'admin/query/';\r\nconst webApiQueryImport = webApiQueryRoot + 'import';\r\nconst webApiQueryClone = webApiQueryRoot + 'Clone';\r\nconst webApiQueryDelete = webApiQueryRoot + 'Delete';\r\nexport const webApiQueryRun = webApiQueryRoot + 'Run';\r\nexport const webApiQueryDebugStream = webApiQueryRoot + 'DebugStream';\r\nexport const webApiQuerySave = webApiQueryRoot + 'Save';\r\nexport const webApiQueryGet = webApiQueryRoot + 'Get';\r\nexport const webApiQueryDataSources = webApiQueryRoot + 'DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const item: { Id: number; Title: string; } | undefined = params.data[this.filterParams.colDef.headerName]?.[0];\r\n      if (item == null) { return false; }\r\n      if (!this.idFilter.includes(item.Id)) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field appearance=\"standard\" color=\"accent\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"standard\" color=\"accent\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.ReadOnly\" (click)=\"deleteItem()\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ContentItemsActionsParams;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ContentItemsActionsParams) {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone() {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export() {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem() {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple *ngIf=\"!readOnly\"\r\n    [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\">\r\n      {{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"readOnly && !(!metadataCount && !value.metadata)\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\">\r\n      {{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  readOnly: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ContentItemsStatusParams;\r\n\r\n  agInit(params: ContentItemsStatusParams) {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.readOnly = this.item._EditInfo.ReadOnly;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    this.metadataTooltip = this.item.For\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${this.item.For.Target}`\r\n      + `\\nTargetType: ${this.item.For.TargetType}`\r\n      + (this.item.For.Number ? `\\nNumber: ${this.item.For.Number}` : '')\r\n      + (this.item.For.String ? `\\nString: ${this.item.For.String}` : '')\r\n      + (this.item.For.Guid ? `\\nGuid: ${this.item.For.Guid}` : '')\r\n      + (this.item.For.Title ? `\\nTitle: ${this.item.For.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata() {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","import { AbstractControl, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: FormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create Metadata</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This is a special operation to add an item which is metadata for another item,\r\n    see <a href=\"http://r.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- Target Type -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Target</mat-label>\r\n\r\n        <mat-select *ngIf=\"data.guidedMode\" formControlName=\"targetType\" required>\r\n          <mat-option *ngFor=\"let option of targetTypeOptions\" [value]=\"option.targetType\">\r\n            {{ option.label }}\r\n          </mat-option>\r\n          <mat-option *ngIf=\"data.unknownTargetType\" [value]=\"data.formValues.targetType\">\r\n            {{ data.formValues.targetType }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"number\" min=\"0\" *ngIf=\"!data.guidedMode\" formControlName=\"targetType\" required>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint\r\n        *ngIf=\"form.controls['targetType'].touched && !form.controls['targetType'].invalid && data.unknownTargetType\"\r\n        [isError]=\"false\">\r\n        Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"data.targetTypeHint\" [isError]=\"false\">{{ data.targetTypeHint }}</app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern\"\r\n        [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n\r\n      <!-- Key Type -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Key type</mat-label>\r\n\r\n        <mat-select formControlName=\"keyType\" required>\r\n          <mat-option *ngFor=\"let option of data.keyTypeOptions\" [value]=\"option\">\r\n            {{ option }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint *ngIf=\"form.controls['keyType'].touched && form.controls['keyType'].errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n\r\n      <!-- Content Type for Content Items -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\"\r\n        *ngIf=\"data.guidedMode && data.formValues.targetType === eavConstants.metadata.entity.targetType\">\r\n        <mat-label>Content Type</mat-label>\r\n\r\n        <mat-select formControlName=\"contentTypeForContentItems\"\r\n          [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <!-- Scope for Content Types -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\"\r\n        *ngIf=\"data.guidedMode && (data.formValues.targetType === eavConstants.metadata.entity.targetType || data.formValues.targetType === eavConstants.metadata.contentType.targetType)\">\r\n        <mat-label>Scope</mat-label>\r\n\r\n        <mat-select formControlName=\"scopeForContentTypes\"\r\n          [placeholder]=\"!data.scopeOptions.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n            {{ scopeOption.name }}\r\n          </mat-option>\r\n          <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint>\r\n        The scope should almost never be changed -\r\n        <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n      </app-field-hint>\r\n\r\n      <!-- Key -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Key</mat-label>\r\n\r\n        <ng-container *ngIf=\"data.guidedMode; then specialKeyInputs else defaultKeyInput\">\r\n        </ng-container>\r\n\r\n        <ng-template #specialKeyInputs>\r\n          <ng-container [ngSwitch]=\"data.formValues.targetType\">\r\n            <ng-container *ngSwitchCase=\"eavConstants.metadata.entity.targetType\">\r\n              <mat-select *ngIf=\"data.guidedKey\" formControlName=\"key\" required\r\n                [placeholder]=\"!data.contentItems.length ? 'No items found' : ''\">\r\n                <mat-option *ngFor=\"let item of data.contentItems\" [value]=\"item.Guid\">\r\n                  {{ item.Title }} ({{ item.Id }})\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n              <input matInput type=\"text\" *ngIf=\"!data.guidedKey\" formControlName=\"key\" required>\r\n            </ng-container>\r\n\r\n            <ng-container *ngSwitchCase=\"eavConstants.metadata.contentType.targetType\">\r\n              <mat-select *ngIf=\"data.guidedKey\" formControlName=\"key\" required\r\n                [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n                <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n              <input matInput type=\"text\" *ngIf=\"!data.guidedKey\" formControlName=\"key\" required>\r\n            </ng-container>\r\n\r\n            <ng-container *ngSwitchDefault>\r\n              <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n            </ng-container>\r\n          </ng-container>\r\n        </ng-template>\r\n\r\n        <ng-template #defaultKeyInput>\r\n          <input matInput type=\"text\" *ngIf=\"data.formValues.keyType !== eavConstants.keyTypes.number\"\r\n            formControlName=\"key\" required>\r\n          <input matInput type=\"number\" *ngIf=\"data.formValues.keyType === eavConstants.keyTypes.number\"\r\n            formControlName=\"key\" required>\r\n        </ng-template>\r\n\r\n        <div matSuffix class=\"selection-suffix\" *ngIf=\"data.guidedMode && data.guidedKeyExists\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': data.guidedKey }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedKey(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !data.guidedKey }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedKey(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber\"\r\n        [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternGuid\" [isError]=\"true\">\r\n        Must be a valid GUID\r\n      </app-field-hint>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <mat-slide-toggle color=\"accent\"\r\n        [tippy]=\"data.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n        [checked]=\"data.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n        {{ data.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, merge, Observable, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogTemplateVars, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss']\r\n})\r\nexport class CreateMetadataDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: FormGroup;\r\n  templateVars$: Observable<MetadataDialogTemplateVars>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = new Subscription();\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('targetType', new FormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new FormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new FormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new FormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new FormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscription.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscription.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscription.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!GeneralHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value)) {\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n        }\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType)) {\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n        }\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId) {\r\n          updatedForm.key = this.context.appId;\r\n        }\r\n\r\n        if (Object.keys(updatedForm).length) {\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        GeneralHelpers.disableControl(this.form.controls['keyType'], keyTypeDisabled);\r\n        GeneralHelpers.disableControl(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.templateVars$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const templateVars: MetadataDialogTemplateVars = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","<div appToggleDebug class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>\r\n        <ng-container *ngIf=\"contentType$ | async as contentType\">\r\n          {{ contentType.Label || contentType.Name }}\r\n        </ng-container>\r\n        Data\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div *ngIf=\"(contentType$ | async)?.Properties?.ListInstructions as listInstructions\"\r\n    [innerHTML]=\"listInstructions | safeHtml\">\r\n  </div>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n      (filesDropped)=\"filesDropped($event)\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\">\r\n      <button mat-button tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon>cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n        <mat-icon>local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      <button mat-button color=\"accent\" tippy=\"Print filter to console\" *ngIf=\"debugEnabled$ | async\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon>filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n    </div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { AllCommunityModules, ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith, take } from 'rxjs/operators';\r\nimport { GlobalConfigService } from '../../../../edit/shared/store/ngrx-data';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogAngular } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './ag-grid-components/content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './ag-grid-components/content-items-status/content-items-status.models';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemImportDialogData } from './content-item-import/content-item-import-dialog.config';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(undefined);\r\n  items$ = new BehaviorSubject<ContentItem[]>(undefined);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      const columnDefs = this.buildColumnDefs(columns);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogAngular('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.contentTypeStaticName,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        ids.push((rowNode.data as ContentItem).Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: ContentItemImportDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: itemFor.target ?? itemFor.targetType.toString(),\r\n            TargetType: itemFor.targetType,\r\n            ...(itemFor.keyType === eavConstants.keyTypes.guid && { Guid: itemFor.key }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.number && { Number: parseInt(itemFor.key, 10) }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.string && { String: itemFor.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchItems();\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense',\r\n        cellClass: (params) => `${(params.data as ContentItem)._EditInfo.ReadOnly ? 'disabled' : ''} id-action no-padding no-outline`.split(' '),\r\n        cellRenderer: IdFieldComponent, sortable: true, filter: 'agNumberColumnFilter',\r\n        valueGetter: (params) => (params.data as ContentItem).Id,\r\n        cellRendererParams: {\r\n          tooltipGetter: (item: ContentItem) => `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        field: 'Status', width: 82, headerClass: 'dense', cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent, cellRenderer: ContentItemsStatusComponent, valueGetter: this.valueGetterStatus,\r\n        cellRendererParams: {\r\n          onOpenMetadata: (item) => this.openMetadata(item),\r\n        } as ContentItemsStatusParams,\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)', field: '_Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight'.split(' '),\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: (event) => this.editItem(event.data as ContentItem),\r\n        valueGetter: (params) => (params.data as ContentItem)._Title,\r\n      },\r\n      {\r\n        headerName: 'Stats', headerTooltip: 'Used by others / uses others',\r\n        field: '_Used', width: 70, headerClass: 'dense', cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter', valueGetter: this.valueGetterUsage,\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding'.split(' '), width: 122, cellRenderer: ContentItemsActionsComponent, pinned: 'right',\r\n        cellRendererParams: {\r\n          onClone: (item) => this.clone(item),\r\n          onExport: (item) => this.export(item),\r\n          onDelete: (item) => this.delete(item),\r\n        } as ContentItemsActionsParams,\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName, field: column.StaticName, flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterStatus(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    const published: PubMeta = {\r\n      published: item.IsPublished,\r\n      metadata: !!item.For,\r\n      hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n    };\r\n    return published;\r\n  }\r\n\r\n  private valueGetterUsage(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    return `${item._Used} / ${item._Uses}`;\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/all-modules';\r\nimport { GeneralHelpers } from '../../../../edit/shared/helpers';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { PubMetaFilterModel } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) { return; }\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === 'entityFilterComponent') {\r\n        value = GeneralHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ImportAppResult } from '../models/import-app-result.model';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ? changedName : '');\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: IdFieldParams) {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>\r\n","/**\r\n * Do not reuse regex:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#using_test_on_a_regex_with_the_global_flag\r\n */\r\nexport function guidRegex(): RegExp {\r\n  return /^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$/i;\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_content-items_content-items_component_ts.2494a9837e00bd3c.js"}