{"version":3,"mappings":"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","names":["AnalyzeSettingsKeyComponent","constructor","snackBar","agInit","params","this","key","value","refresh","copy","copyToClipboard","open","duration","i0","selectors","ctx","ctx_r2","AnalyzeSettingsTotalResultsComponent","totalResults","stackItem","data","openDetails","ctx_r4","ctx_r6","AnalyzeSettingsComponent","dialogRef","route","router","viewsService","analyzeSettingsService","AllCommunityModules","Object","defaultGridOptions","frameworkComponents","analyzeSettingsKeyComponent","analyzeSettingsValueComponent","AnalyzeSettingsValueComponent","analyzeSettingsTotalComponent","columnDefs","field","flex","minWidth","cellClass","cellRenderer","sortable","filter","valueGetter","Path","_value","Source","width","headerClass","TotalResults","cellRendererParams","navigate","selectedView$","relativeTo","part","snapshot","paramMap","get","ngOnInit","views$","BehaviorSubject","undefined","stack$","getViews","getStack","templateVars$","combineLatest","pipe","map","views","selectedView","stack","ngOnDestroy","complete","closeDialog","close","changeView","viewGuid","next","getAll","subscribe"],"sources":["./projects/ng-dialogs/src/app/app-administration/ag-grid-components/analyze-settings-key/analyze-settings-key.component.ts","./projects/ng-dialogs/src/app/app-administration/ag-grid-components/analyze-settings-key/analyze-settings-key.component.html","./projects/ng-dialogs/src/app/app-administration/ag-grid-components/analyze-settings-total-results/analyze-settings-total-results.component.html","./projects/ng-dialogs/src/app/app-administration/ag-grid-components/analyze-settings-total-results/analyze-settings-total-results.component.ts","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.component.html","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.component.ts"],"sourcesContent":["import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../../shared/helpers/copy-to-clipboard.helper';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings-key',\r\n  templateUrl: './analyze-settings-key.component.html',\r\n  styleUrls: ['./analyze-settings-key.component.scss'],\r\n})\r\nexport class AnalyzeSettingsKeyComponent implements ICellRendererAngularComp {\r\n  key: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.key = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.key);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"key-box highlight\" [tippy]=\"key\" (click)=\"copy()\">\r\n  <span class=\"key\">{{ key }}</span>\r\n</div>\r\n","<div class=\"input-component no-click\" *ngIf=\"totalResults <= 1\">\r\n  <div>{{ totalResults }}</div>\r\n  <div class=\"like-button disabled\">\r\n    <mat-icon>search</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<div matRipple class=\"input-component highlight\" tippy=\"Open details\" *ngIf=\"totalResults > 1\" (click)=\"openDetails()\">\r\n  <div class=\"text\">{{ totalResults }}</div>\r\n  <div class=\"like-button\">\r\n    <mat-icon>search</mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { SettingsStackItem } from '../../sub-dialogs/analyze-settings/analyze-settings.models';\r\nimport { AnalyzeSettingsTotalResultsParams } from './analyze-settings-total-results.models';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings-total-results',\r\n  templateUrl: './analyze-settings-total-results.component.html',\r\n  styleUrls: ['./analyze-settings-total-results.component.scss'],\r\n})\r\nexport class AnalyzeSettingsTotalResultsComponent implements ICellRendererAngularComp {\r\n  totalResults: number;\r\n\r\n  private stackItem: SettingsStackItem;\r\n  private params: AnalyzeSettingsTotalResultsParams;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: AnalyzeSettingsTotalResultsParams) {\r\n    this.totalResults = params.value;\r\n    this.params = params;\r\n    this.stackItem = this.params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openDetails() {\r\n    this.params.openDetails(this.stackItem);\r\n  }\r\n}\r\n","<div class=\"nav-component-wrapper\" *ngIf=\"(templateVars$ | async) as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Analyze {{ part }}</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    Settings and Resources are consolidated from many sources. Here you see what the resulting values would be.\r\n  </p>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <mat-form-field appearance=\"standard\" color=\"accent\" class=\"view-select-box\">\r\n    <mat-label>Merge settings / resources of a View</mat-label>\r\n    <mat-select [ngModel]=\"data.selectedView\" (ngModelChange)=\"changeView($event)\">\r\n      <mat-option [value]=\"undefined\">No view selected - this is how APIs see the data</mat-option>\r\n      <mat-option *ngFor=\"let view of data.views\" [value]=\"view.Guid\">{{ view.Name }}</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"data.stack\" [modules]=\"modules\" [gridOptions]=\"gridOptions\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\"></div>\r\n  </div>\r\n</div>\r\n","import { AllCommunityModules, GridOptions } from '@ag-grid-community/all-modules';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { defaultGridOptions } from '../../../shared/constants/default-grid-options.constants';\r\nimport { AnalyzeSettingsKeyComponent } from '../../ag-grid-components/analyze-settings-key/analyze-settings-key.component';\r\nimport { AnalyzeSettingsTotalResultsComponent } from '../../ag-grid-components/analyze-settings-total-results/analyze-settings-total-results.component';\r\nimport { AnalyzeSettingsTotalResultsParams } from '../../ag-grid-components/analyze-settings-total-results/analyze-settings-total-results.models';\r\nimport { AnalyzeSettingsValueComponent } from '../../ag-grid-components/analyze-settings-value/analyze-settings-value.component';\r\nimport { View } from '../../models';\r\nimport { ViewsService } from '../../services';\r\nimport { AnalyzeSettingsService } from '../../services/analyze-settings.service';\r\nimport { AnalyzePart, AnalyzeSettingsTemplateVars, SettingsStackItem } from './analyze-settings.models';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings',\r\n  templateUrl: './analyze-settings.component.html',\r\n  styleUrls: ['./analyze-settings.component.scss'],\r\n})\r\nexport class AnalyzeSettingsComponent implements OnInit, OnDestroy {\r\n  part: AnalyzePart;\r\n  templateVars$: Observable<AnalyzeSettingsTemplateVars>;\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      analyzeSettingsKeyComponent: AnalyzeSettingsKeyComponent,\r\n      analyzeSettingsValueComponent: AnalyzeSettingsValueComponent,\r\n      analyzeSettingsTotalComponent: AnalyzeSettingsTotalResultsComponent,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        field: 'Key', flex: 2, minWidth: 250, cellClass: 'primary-action no-padding no-outline',\r\n        cellRenderer: 'analyzeSettingsKeyComponent', sortable: true, filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => (params.data as SettingsStackItem).Path,\r\n      },\r\n      {\r\n        field: 'Value', flex: 2, minWidth: 250, cellClass: 'primary-action no-padding no-outline',\r\n        cellRenderer: 'analyzeSettingsValueComponent', sortable: true, filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => (params.data as SettingsStackItem)._value,\r\n      },\r\n      {\r\n        field: 'Source', flex: 1, minWidth: 150, cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => (params.data as SettingsStackItem).Source,\r\n      },\r\n      {\r\n        field: 'Total', width: 72, headerClass: 'dense', cellClass: 'secondary-action no-padding no-outline',\r\n        cellRenderer: 'analyzeSettingsTotalComponent', sortable: true, filter: 'agNumberColumnFilter',\r\n        valueGetter: (params) => (params.data as SettingsStackItem).TotalResults,\r\n        cellRendererParams: {\r\n          openDetails: (stackItem) => {\r\n            this.router.navigate([`details/${this.selectedView$.value}/${stackItem.Path}`], { relativeTo: this.route });\r\n          },\r\n        } as AnalyzeSettingsTotalResultsParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  private views$: BehaviorSubject<View[]>;\r\n  private selectedView$: BehaviorSubject<string>;\r\n  private stack$: BehaviorSubject<SettingsStackItem[]>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AnalyzeSettingsComponent>,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private viewsService: ViewsService,\r\n    private analyzeSettingsService: AnalyzeSettingsService,\r\n  ) {\r\n    this.part = this.route.snapshot.paramMap.get('part') as AnalyzePart;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.views$ = new BehaviorSubject<View[]>([]);\r\n    this.selectedView$ = new BehaviorSubject<string>(undefined);\r\n    this.stack$ = new BehaviorSubject<SettingsStackItem[]>([]);\r\n\r\n    this.getViews();\r\n    this.getStack();\r\n\r\n    this.templateVars$ = combineLatest([this.views$, this.selectedView$, this.stack$]).pipe(\r\n      map(([views, selectedView, stack]) => {\r\n        const templateVars: AnalyzeSettingsTemplateVars = {\r\n          views,\r\n          selectedView,\r\n          stack,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.views$.complete();\r\n    this.selectedView$.complete();\r\n    this.stack$.complete();\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  changeView(viewGuid: string): void {\r\n    this.selectedView$.next(viewGuid);\r\n    this.getStack();\r\n  }\r\n\r\n  private getViews(): void {\r\n    this.viewsService.getAll().subscribe(views => {\r\n      this.views$.next(views);\r\n    });\r\n  }\r\n\r\n  private getStack(): void {\r\n    this.analyzeSettingsService.getStack(this.part, undefined, this.selectedView$.value, true).subscribe(stack => {\r\n      this.stack$.next(stack);\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_app-administration_sub-dialogs_analyze-settings_analyze-settings_-10b80d.1b2dfcea1e7362fd.js"}