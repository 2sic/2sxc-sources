{"version":3,"sources":["webpack:///./projects/field-custom-gps/src/shared/console-log-webpack.helper.ts","webpack:///./projects/field-custom-gps/src/shared/constants.ts","webpack:///./projects/field-custom-gps/src/assets/icons/font-awesome/map-marker-alt-solid.svg","webpack:///./projects/field-custom-gps/src/shared/helpers.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///./projects/edit/shared/helpers/field-mask.helper.ts","webpack:///./projects/field-custom-gps/src/main/main.html","webpack:///./projects/field-custom-gps/src/main/main.ts","webpack:///./projects/field-custom-gps/src/main/main.scss","webpack:///./projects/field-custom-gps/src/preview/preview.html","webpack:///./projects/field-custom-gps/src/preview/preview.ts","webpack:///./projects/field-custom-gps/src/preview/preview.scss"],"names":["consoleLogWebpack","message","optionalParams","defaultCoordinates","lat","lng","mapsApiUrl","url","customGpsIcons","mapMarker","buildTemplate","template","styles","parseLatLng","value","JSON","parse","replace","stringifyLatLng","latLng","stringify","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","FieldMask","constructor","mask","model","changeEvent","overloadPreCleanValues","eavConfig","fields","findFields","unwrapField","subscriptions","this","fieldList","preClean","watchAllFields","resolve","appId","zoneId","forEach","e","i","replaceValue","cleaned","result","matches","match","staticName","push","onChange","maybeNew","field","valueSub","valueChanges","subscribe","destroy","subscription","unsubscribe","gpsDialogTag","FieldCustomGpsDialog","HTMLElement","super","fieldInitialized","connectedCallback","eventListeners","mapApiUrl","innerHTML","latInput","querySelector","lngInput","addressMaskContainer","iconSearch","formattedAddressContainer","mapContainer","allInputNames","connector","_experimental","allInputTypeNames","map","inputType","name","includes","settings","LatField","latFieldName","LongField","lngFieldName","addressMaskSetting","AddressMask","addressMask","formGroup","controls","classList","remove","innerText","loadScript","mapScriptLoaded","google","maps","Map","zoom","center","gestureHandling","marker","Marker","position","draggable","geocoder","Geocoder","data","updateHtml","onLatLngInputChange","addEventListener","autoSelect","element","type","listener","addListener","event","onMarkerDragend","toString","setCenter","setPosition","updateForm","update","updateField","length","parseFloat","address","geocode","results","status","GeocoderStatus","OK","geometry","location","alert","disconnectedCallback","clearInstanceListeners","removeEventListener","customElements","define","gpsTag","FieldCustomGps","latContainer","lngContainer","expand","onValueChange","dialog","open"],"mappings":"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","file":"index.js","sourcesContent":["declare const __PRODUCTION__: boolean; // set by the definePlugin with string-replace\r\n\r\n/** Console log that doesn't show in Webpack production mode */\r\nexport function consoleLogWebpack(message?: any, ...optionalParams: any[]) {\r\n  if (__PRODUCTION__) { return; }\r\n\r\n  console.groupCollapsed(message, ...optionalParams);\r\n  // tslint:disable-next-line:no-console\r\n  console.trace();\r\n  console.groupEnd();\r\n}\r\n","export const defaultCoordinates: google.maps.LatLngLiteral = {\r\n  lat: 47.17465989999999,\r\n  lng: 9.469142499999975,\r\n};\r\n\r\nconst mapApiKeyPart1 = 'AIzaSyDPhn';\r\nconst mapApiKeyPart2 = 'NKpEg8FmY8nooE7Zwnue6SusxEnHE';\r\n\r\n/** Special helper to assemble the url for the maps */\r\nexport function mapsApiUrl() {\r\n  let url = 'https://maps.googleapis.com/maps/api/js?key=';\r\n  // note: don't use `${...}` here, because that's probably combined at compile time, and we want to keep\r\n  // the key parts separate so the google console doesn't complain about the key being public\r\n  // add some fake condition, to prevent compiler optimization from pre-connecting the strings\r\n  if (url) { url += mapApiKeyPart1; }\r\n  if (!!url) { url += mapApiKeyPart2; }\r\n  return url;\r\n}\r\n","export default \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" data-prefix=\\\"fas\\\" data-icon=\\\"map-marker-alt\\\" class=\\\"svg-inline--fa fa-map-marker-alt fa-w-12\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 384 512\\\"><path fill=\\\"currentColor\\\" d=\\\"M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0zM192 272c44.183 0 80-35.817 80-80s-35.817-80-80-80-80 35.817-80 80 35.817 80 80 80z\\\"></path></svg>\";","import * as mapMarker from '../assets/icons/font-awesome/map-marker-alt-solid.svg';\r\n\r\nexport const customGpsIcons = {\r\n  mapMarker: mapMarker.default,\r\n};\r\n\r\nexport function buildTemplate(template: string, styles: string): string {\r\n  return `${template}<style>\\n${styles}\\n</style>`;\r\n}\r\n\r\nexport function parseLatLng(value: string): google.maps.LatLngLiteral {\r\n  const latLng: google.maps.LatLngLiteral = JSON.parse(value.replace('latitude', 'lat').replace('longitude', 'lng'));\r\n  return latLng;\r\n}\r\n\r\nexport function stringifyLatLng(latLng: google.maps.LatLngLiteral): string {\r\n  const value = JSON.stringify(latLng).replace('lat', 'latitude').replace('lng', 'longitude');\r\n  return value;\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { AbstractControl } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { EavConfig } from '../models';\r\n\r\n/**\r\n * Create a new FieldMask instance and access result with resolve\r\n * @example\r\n * const mask = new FieldMask(\"[FirstName]\", formGroup.controls);\r\n * const maskValue = mask.resolve();\r\n *\r\n * @param mask a string like \"[FirstName] [LastName]\"\r\n * @param model usually FormGroup controls, passed into here\r\n * @param overloadPreCleanValues a function which will \"scrub\" the found field-values\r\n */\r\nexport class FieldMask {\r\n  private mask: string;\r\n  private model: Record<string, AbstractControl>;\r\n  private fields: string[] = [];\r\n  private value: string;\r\n  private findFields = /\\[.*?\\]/ig;\r\n  private unwrapField = /[\\[\\]]/ig;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    mask: string,\r\n    model: Record<string, AbstractControl>,\r\n    private changeEvent: (newValue: string) => void,\r\n    overloadPreCleanValues: (key: string, value: string) => string,\r\n    private eavConfig?: EavConfig,\r\n  ) {\r\n    this.mask = mask;\r\n    this.model = model;\r\n    this.fields = this.fieldList();\r\n\r\n    if (overloadPreCleanValues) {\r\n      this.preClean = overloadPreCleanValues;\r\n    }\r\n\r\n    // bind auto-watch only if needed...\r\n    if (model && changeEvent) {\r\n      this.watchAllFields();\r\n    }\r\n  }\r\n\r\n  /** Resolves a mask to the final value */\r\n  resolve(): string {\r\n    let value = this.mask;\r\n    if (this.eavConfig != null && value != null) {\r\n      value = value.replace('[App:AppId]', this.eavConfig.appId);\r\n      value = value.replace('[App:ZoneId]', this.eavConfig.zoneId);\r\n    }\r\n    this.fields.forEach((e, i) => {\r\n      const replaceValue = this.model.hasOwnProperty(e) && this.model[e] && this.model[e].value ? this.model[e].value : '';\r\n      const cleaned = this.preClean(e, replaceValue);\r\n      value = value.replace('[' + e + ']', cleaned);\r\n    });\r\n\r\n    return value;\r\n  }\r\n\r\n  /** Retrieves a list of all fields used in the mask */\r\n  fieldList(): string[] {\r\n    const result: string[] = [];\r\n    if (!this.mask) { return result; }\r\n    const matches = this.mask.match(this.findFields);\r\n    if (matches) {\r\n      matches.forEach((e, i) => {\r\n        const staticName = e.replace(this.unwrapField, '');\r\n        result.push(staticName);\r\n      });\r\n    } else { // TODO: ask is this good\r\n      result.push(this.mask);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /** Default preClean function */\r\n  private preClean(key: string, value: string): string {\r\n    return value;\r\n  }\r\n\r\n  /** Change-event - will only fire if it really changes */\r\n  private onChange() {\r\n    const maybeNew = this.resolve();\r\n    if (this.value !== maybeNew) {\r\n      this.changeEvent(maybeNew);\r\n    }\r\n    this.value = maybeNew;\r\n  }\r\n\r\n  /** Add watcher and execute onChange */\r\n  private watchAllFields() {\r\n    // add a watch for each field in the field-mask\r\n    this.fields.forEach(field => {\r\n      if (!this.model[field]) { return; }\r\n      const valueSub = this.model[field].valueChanges.subscribe(value => this.onChange());\r\n      this.subscriptions.push(valueSub);\r\n    });\r\n  }\r\n\r\n  destroy() {\r\n    this.subscriptions.forEach(subscription => { subscription.unsubscribe(); });\r\n  }\r\n}\r\n","export default \"<div class=\\\"custom-gps-container\\\">\\r\\n  <div class=\\\"map-info\\\">\\r\\n    <div class=\\\"input-component\\\">\\r\\n      <label for=\\\"lat\\\">Lat:</label>\\r\\n      <input id=\\\"lat\\\" type=\\\"number\\\" step=\\\"0.001\\\" />\\r\\n    </div>\\r\\n    &nbsp;\\r\\n    <div class=\\\"input-component\\\">\\r\\n      <label for=\\\"lng\\\">Lng:</label>\\r\\n      <input id=\\\"lng\\\" type=\\\"number\\\" step=\\\"0.001\\\" />\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div id=\\\"address-mask-container\\\" class=\\\"map-info address-mask-container hidden\\\">\\r\\n    <a id=\\\"icon-search\\\" class=\\\"btn\\\">\\r\\n      <i class=\\\"material-icons-outlined\\\">search</i>\\r\\n    </a>\\r\\n    <span id=\\\"formatted-address-container\\\"></span>\\r\\n  </div>\\r\\n\\r\\n  <div id=\\\"map\\\" class=\\\"map-info__map\\\"></div>\\r\\n</div>\\r\\n\";","import { Connector, EavCustomInputField } from '../../../edit-types';\r\nimport { FieldMask } from '../../../edit/shared/helpers/field-mask.helper';\r\nimport { ElementEventListener } from '../../../edit/shared/models';\r\nimport { consoleLogWebpack } from '../shared/console-log-webpack.helper';\r\nimport { defaultCoordinates, mapsApiUrl } from '../shared/constants';\r\nimport { buildTemplate, parseLatLng, stringifyLatLng } from '../shared/helpers';\r\nimport * as template from './main.html';\r\nimport * as styles from './main.scss';\r\n\r\nconst gpsDialogTag = 'field-custom-gps-dialog';\r\n\r\nclass FieldCustomGpsDialog extends HTMLElement implements EavCustomInputField<string> {\r\n  fieldInitialized: boolean;\r\n  connector: Connector<string>;\r\n\r\n  private addressMask: FieldMask;\r\n  private geocoder: google.maps.Geocoder;\r\n  private iconSearch: HTMLAnchorElement;\r\n  private latFieldName: string;\r\n  private latInput: HTMLInputElement;\r\n  private lngFieldName: string;\r\n  private lngInput: HTMLInputElement;\r\n  private map: google.maps.Map;\r\n  private mapApiUrl: string;\r\n  private mapContainer: HTMLDivElement;\r\n  private marker: google.maps.Marker;\r\n  private eventListeners: ElementEventListener[];\r\n\r\n  constructor() {\r\n    super();\r\n    consoleLogWebpack(`${gpsDialogTag} constructor called`);\r\n    this.fieldInitialized = false;\r\n  }\r\n\r\n  connectedCallback(): void {\r\n    if (this.fieldInitialized) { return; }\r\n    this.fieldInitialized = true;\r\n    consoleLogWebpack(`${gpsDialogTag} connectedCallback called`);\r\n\r\n    this.eventListeners = [];\r\n    this.mapApiUrl = mapsApiUrl();\r\n\r\n    this.innerHTML = buildTemplate(template.default, styles.default);\r\n    this.latInput = this.querySelector<HTMLInputElement>('#lat');\r\n    this.lngInput = this.querySelector<HTMLInputElement>('#lng');\r\n    const addressMaskContainer = this.querySelector<HTMLDivElement>('#address-mask-container');\r\n    this.iconSearch = this.querySelector<HTMLAnchorElement>('#icon-search');\r\n    const formattedAddressContainer = this.querySelector<HTMLSpanElement>('#formatted-address-container');\r\n    this.mapContainer = this.querySelector<HTMLDivElement>('#map');\r\n\r\n    const allInputNames = this.connector._experimental.allInputTypeNames.map(inputType => inputType.name);\r\n    if (allInputNames.includes(this.connector.field.settings.LatField)) {\r\n      this.latFieldName = this.connector.field.settings.LatField;\r\n    }\r\n    if (allInputNames.includes(this.connector.field.settings.LongField)) {\r\n      this.lngFieldName = this.connector.field.settings.LongField;\r\n    }\r\n\r\n    const addressMaskSetting = this.connector.field.settings.AddressMask || this.connector.field.settings['Address Mask'];\r\n    this.addressMask = new FieldMask(addressMaskSetting, this.connector._experimental.formGroup.controls, null, null);\r\n    consoleLogWebpack(`${gpsDialogTag} addressMask:`, addressMaskSetting);\r\n    if (addressMaskSetting) {\r\n      addressMaskContainer.classList.remove('hidden');\r\n      formattedAddressContainer.innerText = this.addressMask.resolve();\r\n    }\r\n\r\n    this.connector.loadScript('google', this.mapApiUrl, () => { this.mapScriptLoaded(); });\r\n  }\r\n\r\n  private mapScriptLoaded(): void {\r\n    consoleLogWebpack(`${gpsDialogTag} mapScriptLoaded called`);\r\n    this.map = new google.maps.Map(this.mapContainer, { zoom: 15, center: defaultCoordinates, gestureHandling: 'greedy' });\r\n    this.marker = new google.maps.Marker({ position: defaultCoordinates, map: this.map, draggable: true });\r\n    this.geocoder = new google.maps.Geocoder();\r\n\r\n    // set initial values\r\n    if (!this.connector.data.value) {\r\n      this.updateHtml(defaultCoordinates);\r\n    } else {\r\n      this.updateHtml(parseLatLng(this.connector.data.value));\r\n    }\r\n\r\n    // listen to inputs, iconSearch and marker. Update inputs, map, marker and form\r\n    const onLatLngInputChange = () => { this.onLatLngInputChange(); };\r\n    this.latInput.addEventListener('change', onLatLngInputChange);\r\n    this.lngInput.addEventListener('change', onLatLngInputChange);\r\n\r\n    const autoSelect = () => { this.autoSelect(); };\r\n    this.iconSearch.addEventListener('click', autoSelect);\r\n\r\n    this.eventListeners.push(\r\n      { element: this.latInput, type: 'change', listener: onLatLngInputChange },\r\n      { element: this.lngInput, type: 'change', listener: onLatLngInputChange },\r\n      { element: this.iconSearch, type: 'click', listener: autoSelect },\r\n    );\r\n\r\n    this.marker.addListener('dragend', (event: google.maps.MapMouseEvent) => {\r\n      this.onMarkerDragend(event);\r\n    });\r\n  }\r\n\r\n  private updateHtml(latLng: google.maps.LatLngLiteral): void {\r\n    this.latInput.value = latLng.lat?.toString() ?? '';\r\n    this.lngInput.value = latLng.lng?.toString() ?? '';\r\n    this.map.setCenter(latLng);\r\n    this.marker.setPosition(latLng);\r\n  }\r\n\r\n  private updateForm(latLng: google.maps.LatLngLiteral): void {\r\n    this.connector.data.update(stringifyLatLng(latLng));\r\n    if (this.latFieldName) {\r\n      this.connector._experimental.updateField(this.latFieldName, latLng.lat);\r\n    }\r\n    if (this.lngFieldName) {\r\n      this.connector._experimental.updateField(this.lngFieldName, latLng.lng);\r\n    }\r\n  }\r\n\r\n  private onLatLngInputChange(): void {\r\n    consoleLogWebpack(`${gpsDialogTag} input changed`);\r\n    const latLng: google.maps.LatLngLiteral = {\r\n      lat: this.latInput.value.length > 0 ? parseFloat(this.latInput.value) : null,\r\n      lng: this.lngInput.value.length > 0 ? parseFloat(this.lngInput.value) : null,\r\n    };\r\n    this.updateHtml(latLng);\r\n    this.updateForm(latLng);\r\n  }\r\n\r\n  private autoSelect(): void {\r\n    consoleLogWebpack(`${gpsDialogTag} geocoder called`);\r\n    const address = this.addressMask.resolve();\r\n    this.geocoder.geocode({\r\n      address,\r\n    }, (results, status) => {\r\n      if (status === google.maps.GeocoderStatus.OK) {\r\n        const result = results[0].geometry.location;\r\n        const latLng: google.maps.LatLngLiteral = {\r\n          lat: result.lat(),\r\n          lng: result.lng(),\r\n        };\r\n        this.updateHtml(latLng);\r\n        this.updateForm(latLng);\r\n      } else {\r\n        alert(`Could not locate address: ${address}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  private onMarkerDragend(event: google.maps.MapMouseEvent): void {\r\n    consoleLogWebpack(`${gpsDialogTag} marker changed`);\r\n    const latLng: google.maps.LatLngLiteral = {\r\n      lat: event.latLng.lat(),\r\n      lng: event.latLng.lng(),\r\n    };\r\n    this.updateHtml(latLng);\r\n    this.updateForm(latLng);\r\n  }\r\n\r\n  disconnectedCallback(): void {\r\n    consoleLogWebpack(`${gpsDialogTag} disconnectedCallback called`);\r\n    google?.maps.event.clearInstanceListeners(this.marker);\r\n    google?.maps.event.clearInstanceListeners(this.map);\r\n\r\n    this.eventListeners.forEach(({ element, type, listener }) => {\r\n      element.removeEventListener(type, listener);\r\n    });\r\n    this.addressMask.destroy();\r\n  }\r\n}\r\n\r\nif (!customElements.get(gpsDialogTag)) {\r\n  customElements.define(gpsDialogTag, FieldCustomGpsDialog);\r\n}\r\n","export default \".custom-gps-container{display:flex;flex-direction:column;height:100%}.map-info{flex:0 0 32px;display:flex;flex-wrap:wrap;align-items:center;padding:4px;padding-left:14px;border-bottom:1px solid #e1e1e1;background:#fff}.map-info label,.map-info #icon-search{margin-right:8px;display:flex;justify-content:center;align-items:center;font-size:12px;text-transform:uppercase;padding:4px}.map-info #icon-search i{font-size:14px;width:14px;height:14px;font-weight:bold}.map-info input{margin-right:8px;padding:4px 16px;border:none;background:transparent;outline:none !important}.address-mask-container{flex-wrap:nowrap}.map-info__map{flex:1 1 auto;width:100%;display:block}.hidden{display:none}.btn{border:1px solid silver;border-radius:4px}.btn:hover{background-color:rgba(69,79,99,.08);cursor:pointer}.input-component{display:flex;background-color:rgba(69,79,99,.08);padding:4px;border-radius:4px 4px 0 0;border-bottom:1px solid silver;margin:8px 0}.input-component:hover{border-bottom:1px solid #002753}\";","export default \"<div class=\\\"custom-gps-preview\\\">\\r\\n  <div class=\\\"custom-gps-preview__text\\\">\\r\\n    Lat: <span id=\\\"lat-container\\\"></span>, Lng: <span id=\\\"lng-container\\\"></span>\\r\\n  </div>\\r\\n  <div class=\\\"custom-gps-preview__spacer\\\"></div>\\r\\n  <div id=\\\"map-icon-container\\\" class=\\\"custom-gps-preview__map-icon\\\"></div>\\r\\n</div>\\r\\n\";","import { Connector, EavCustomInputField } from '../../../edit-types';\r\nimport { ElementEventListener } from '../../../edit/shared/models';\r\nimport { consoleLogWebpack } from '../shared/console-log-webpack.helper';\r\nimport { defaultCoordinates } from '../shared/constants';\r\nimport { buildTemplate, customGpsIcons, parseLatLng } from '../shared/helpers';\r\nimport * as template from './preview.html';\r\nimport * as styles from './preview.scss';\r\n\r\nconst gpsTag = 'field-custom-gps';\r\n\r\nclass FieldCustomGps extends HTMLElement implements EavCustomInputField<string> {\r\n  fieldInitialized: boolean;\r\n  connector: Connector<string>;\r\n\r\n  private latContainer: HTMLSpanElement;\r\n  private lngContainer: HTMLSpanElement;\r\n  private eventListeners: ElementEventListener[];\r\n\r\n  constructor() {\r\n    super();\r\n    consoleLogWebpack(`${gpsTag} constructor called`);\r\n    this.fieldInitialized = false;\r\n  }\r\n\r\n  connectedCallback(): void {\r\n    if (this.fieldInitialized) { return; }\r\n    this.fieldInitialized = true;\r\n    consoleLogWebpack(`${gpsTag} connectedCallback called`);\r\n\r\n    this.innerHTML = buildTemplate(template.default, styles.default);\r\n    const mapIconContainer = this.querySelector<HTMLDivElement>('#map-icon-container');\r\n    mapIconContainer.innerHTML = customGpsIcons.mapMarker;\r\n    this.latContainer = this.querySelector<HTMLSpanElement>('#lat-container');\r\n    this.lngContainer = this.querySelector<HTMLSpanElement>('#lng-container');\r\n    this.eventListeners = [];\r\n    const expand = () => { this.expand(); };\r\n    this.addEventListener('click', expand);\r\n    this.eventListeners.push({ element: this, type: 'click', listener: expand });\r\n\r\n    // set initial value\r\n    if (!this.connector.data.value) {\r\n      this.updateHtml(defaultCoordinates);\r\n    } else {\r\n      this.updateHtml(parseLatLng(this.connector.data.value));\r\n    }\r\n\r\n    // update on value change\r\n    this.connector.data.onValueChange(value => {\r\n      if (!value) {\r\n        this.updateHtml(defaultCoordinates);\r\n      } else {\r\n        const latLng = parseLatLng(value);\r\n        this.updateHtml(latLng);\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateHtml(latLng: google.maps.LatLngLiteral): void {\r\n    this.latContainer.innerText = latLng.lat?.toString() ?? '';\r\n    this.lngContainer.innerText = latLng.lng?.toString() ?? '';\r\n  }\r\n\r\n  private expand(): void {\r\n    this.connector.dialog.open();\r\n  }\r\n\r\n  disconnectedCallback(): void {\r\n    consoleLogWebpack(`${gpsTag} disconnectedCallback called`);\r\n    this.eventListeners.forEach(({ element, type, listener }) => {\r\n      element.removeEventListener(type, listener);\r\n    });\r\n  }\r\n}\r\n\r\nif (!customElements.get(gpsTag)) {\r\n  customElements.define(gpsTag, FieldCustomGps);\r\n}\r\n","export default \".custom-gps-preview{width:100%;display:flex;align-items:center;position:absolute;top:0;bottom:0;font-size:16px;line-height:20px;margin-bottom:-2px;cursor:pointer}.custom-gps-preview__text{flex-shrink:0;max-width:80%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.custom-gps-preview__spacer{flex-grow:1}.custom-gps-preview__map-icon{flex-shrink:0;margin-right:4px;display:flex;align-items:center;justify-content:center}.custom-gps-preview__map-icon svg{width:20px;height:20px;line-height:20px}\";"],"sourceRoot":""}