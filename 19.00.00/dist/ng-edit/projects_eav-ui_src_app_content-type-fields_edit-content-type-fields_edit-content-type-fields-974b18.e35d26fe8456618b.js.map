{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_edit-content-type-fields_edit-content-type-fields-974b18.e35d26fe8456618b.js","mappings":"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","names":["i0","ctx_r1","fieldNameError","staticName_r5","errors","reservedNames","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_8_Conditional_0_Template","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_8_Conditional_1_Template","pattern","dataType_r7","name","label","icon","option_r8","EditContentTypeFieldsComponent_Conditional_6_For_4_For_34_Conditional_2_Template","inputType","_c2","isObsolete","$event","field_r4","_r3","$implicit","StaticName","EditContentTypeFieldsComponent_Conditional_6_For_4_Conditional_8_Template","Éµ$index_18_r6","$index","setFieldType","value","EditContentTypeFieldsComponent_Conditional_6_For_4_For_20_Template","updateFieldPart","InputType","EditContentTypeFieldsComponent_Conditional_6_For_4_For_34_Template","fieldNamePattern","editMode","touched","Type","findIcon","findLabel","dataTypes","hints","data","tmp_31_0","getInputTypeOption","tmp_32_0","inputTypeOptions","input","_r1","save","EditContentTypeFieldsComponent_Conditional_6_For_4_Template","_forTrack0","dialog","close","fields","ngForm_r9","form","valid","saving","EditContentTypeFieldsComponent","BaseComponent","#typesSvc","#typesFieldsSvc","constructor","route","snackBar","super","this","hostClass","transient","ContentTypesService","ContentTypesFieldsService","calculateTypeIcon","calculateTypeLabel","snapshot","paramMap","get","filteredInputTypeOptions","signal","#inputTypeOptions","getInputTypes","#contentTypeSig","retrieveContentTypeSig","existingFieldsLazy","computedObj","contentType","getFieldsSig","NameId","initial","length","routeId","editFieldId","parseInt","find","field","Id","#generateNewList","linkedSignal","source","computation","#reservedNamesSystem","merged","ReservedNamesValidatorDirective","mergeReserved","all","map","i","filter","option","dataType","toLocaleLowerCase","description","obsoleteMessage","disableClose","subscriptions","add","backdropClick","subscribe","_","dirty","confirm","ngAfterViewInit","autoFocusInputField","setTimeout","first","nativeElement","focus","existingFieldCount","Array","keys","k","DataTypeCatalog","String","InputTypeCatalog","StringDefault","IsTitle","SortOrder","index","patch","update","f","type","defaultInputName","DefaultSuffix","options","inputName","set","open","doneAndClose","duration","rename","updateInputType","of","pipe","concatMap","catchError","toArray","i1","i2","i3","selectors","viewQuery","rf","ctx","NgForm","EditContentTypeFieldsComponent_Conditional_3_Template","EditContentTypeFieldsComponent_Conditional_4_Template","EditContentTypeFieldsComponent_Conditional_5_Template","EditContentTypeFieldsComponent_Conditional_6_Template","undefined","FormsModule","i4","MatFormFieldModule","i5","MatInputModule","i6","MatSelectModule","i7","i8","MatIconModule","i9","MatOptionModule","NgClass","MatDialogActions","MatButtonModule","i10","TranslateModule","FieldHintComponent","styles","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","inputs","ngContentSelectors","_c0","decls","vars","consts","template","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","NgTemplateOutlet","BooleanDefault","BooleanTristate","CustomDefault","CustomGps","CustomJsonEditor","DateTimeDefault","EmptyDefault","EmptyEnd","EmptyMessage","EntityContentBlocks","EntityDefault","EntityQuery","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","NumberDefault","NumberDropdown","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","StringWysiwyg","EntityPicker","StringPicker","NumberPicker","Unknown","reduce","accumulator","seed","operate","scanInternals","arguments"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./node_modules/rxjs/dist/esm/internal/operators/reduce.js"],"sourcesContent":["<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      @if (editMode === undefined) {\r\n        Fields\r\n      }\r\n      @if (editMode === null) {\r\n        Add Fields\r\n      }\r\n      @if (editMode != null) {\r\n        Edit Field\r\n      }\r\n    </div>\r\n  </div>\r\n  @if (fields().length) {\r\n    <form #ngForm=\"ngForm\" (ngSubmit)=\"save()\">\r\n      <div class=\"eav-dialog-content\">\r\n        @for (field of fields(); track field.SortOrder; let i = $index) {\r\n          <div class=\"eav-row-container\">\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Name</mat-label>\r\n                <input\r\n                  matInput\r\n                  [pattern]=\"fieldNamePattern\"\r\n                  [appReservedNames]=\"reservedNames()\"\r\n                  [(ngModel)]=\"field.StaticName\"\r\n                  [name]=\"'StaticName' + i\"\r\n                  #staticName=\"ngModel\"\r\n                  [disabled]=\"editMode === 'inputType'\"\r\n                  #autoFocusInputField\r\n                />\r\n              </mat-form-field>\r\n              @if (staticName.touched && staticName.errors) {\r\n                @if (staticName.errors.pattern) {\r\n                  <app-field-hint [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                }\r\n                @if (staticName.errors.reservedNames) {\r\n                  <app-field-hint [isError]=\"true\">\r\n                    {{ staticName.errors.reservedNames }}\r\n                  </app-field-hint>\r\n                }\r\n              }\r\n            </div>\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Data Type</mat-label>\r\n                <mat-select\r\n                  (selectionChange)=\"setFieldType(i, $event.value)\"\r\n                  [ngModel]=\"field.Type\"\r\n                  [name]=\"'Type' + i\"\r\n                  [disabled]=\"editMode != null\"\r\n                  panelClass=\"eav-type-field-type-select\"\r\n                  panelWidth=\"\"\r\n                >\r\n                  <mat-select-trigger>\r\n                    <mat-icon class=\"eav-type-icon\">{{ findIcon(field.Type) }}</mat-icon>\r\n                    <span>{{ findLabel(field.Type) }}</span>\r\n                  </mat-select-trigger>\r\n                  @for (dataType of dataTypes(); track dataType) {\r\n                    <mat-option [value]=\"dataType.name\">\r\n                      {{ dataType.label }}\r\n                      <!-- Icon must come last; Angular will put it first. Otherwise we can't type the name of the label to quickly find an entry -->\r\n                      <mat-icon class=\"eav-type-icon\">{{ dataType.icon }}</mat-icon>\r\n                    </mat-option>\r\n                  }\r\n                </mat-select>\r\n              </mat-form-field>\r\n              <app-field-hint>{{ hints()[i].data }}</app-field-hint>\r\n            </div>\r\n            <div class=\"eav-edit-input\">\r\n              <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                <mat-label>Input Type</mat-label>\r\n                <mat-select\r\n                  (selectionChange)=\"updateFieldPart(i, { InputType: $event.value })\"\r\n                  [ngModel]=\"field.InputType\"\r\n                  [name]=\"'InputType' + i\"\r\n                  [disabled]=\"editMode === 'name'\"\r\n                  panelClass=\"eav-type-field-input-type-select\"\r\n                  panelWidth=\"\"\r\n                >\r\n                  <mat-select-trigger>\r\n                    <span>{{ getInputTypeOption(field.InputType)?.label }}</span>\r\n                    <mat-icon class=\"eav-input-icon\">{{ getInputTypeOption(field.InputType)?.icon }}</mat-icon>\r\n                  </mat-select-trigger>\r\n                  @for (option of inputTypeOptions()[i]; track option) {\r\n                    <mat-option [value]=\"option.inputType\" [ngClass]=\"{ 'eav-input-obsolete': option.isObsolete }\">\r\n                      {{ option.label }}\r\n                      @if (option.icon) {\r\n                        <!-- span is needed here because <mat-option> by default puts mat-icon to the beginning -->\r\n                        <span>\r\n                          <mat-icon class=\"eav-input-icon\">{{ option.icon }}</mat-icon>\r\n                        </span>\r\n                      }\r\n                    </mat-option>\r\n                  }\r\n                </mat-select>\r\n              </mat-form-field>\r\n              <app-field-hint>{{ hints()[i].input }}</app-field-hint>\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n      <!-- Save / cancel buttons -->\r\n      <mat-dialog-actions>\r\n        <div class=\"spacer\"></div>\r\n        <button mat-raised-button type=\"button\" (click)=\"dialog.close()\">Cancel</button>\r\n        <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || saving()\">Save</button>\r\n      </mat-dialog-actions>\r\n    </form>\r\n  }\r\n</div>\r\n","import { NgClass } from '@angular/common';\r\nimport { AfterViewInit, Component, ElementRef, HostBinding, linkedSignal, QueryList, Signal, signal, ViewChild, ViewChildren } from '@angular/core';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { catchError, concatMap, filter, of, toArray } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { Field, FieldInputTypeOption } from '../../shared/fields/field.model';\r\nimport { InputTypeCatalog } from '../../shared/fields/input-type-catalog';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\nimport { ReservedNamesValidatorDirective } from './reserved-names.directive';\r\n\r\ninterface Hints {\r\n  input: string;\r\n  data: string;\r\n}\r\n\r\ntype FieldSubset = Pick<Field, 'Id' | 'Type' | 'InputType' | 'StaticName' | 'IsTitle' | 'SortOrder'>;\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type-fields',\r\n  templateUrl: './edit-content-type-fields.component.html',\r\n  styleUrls: ['./edit-content-type-fields.component.scss'],\r\n  imports: [\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    ReservedNamesValidatorDirective,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatOptionModule,\r\n    NgClass,\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    TranslateModule,\r\n    FieldHintComponent,\r\n  ]\r\n})\r\nexport class EditContentTypeFieldsComponent extends BaseComponent implements AfterViewInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n  @ViewChildren('autoFocusInputField') autoFocusInputField!: QueryList<ElementRef>;\r\n\r\n  #typesSvc = transient(ContentTypesService);\r\n  #typesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    protected dialog: MatDialogRef<EditContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    super();\r\n    this.dialog.disableClose = true;\r\n    this.subscriptions.add(\r\n      this.dialog.backdropClick().subscribe(_ => {\r\n        if (this.form.dirty) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) return;\r\n        }\r\n        this.dialog.close();\r\n      })\r\n    );\r\n  }\r\n\r\n  // External functions / constants to pass to the view\r\n  fieldNamePattern = fieldNamePattern;\r\n  fieldNameError = fieldNameError;\r\n  findIcon = calculateTypeIcon;\r\n  findLabel = calculateTypeLabel;\r\n\r\n  /** Edit mode is either not set (new fields) or edit-name / edit-inputType */\r\n  editMode = this.route.snapshot.paramMap.get('editMode') as 'name' | 'inputType';\r\n  filteredInputTypeOptions: FieldInputTypeOption[][] = [];\r\n  saving = signal(false);\r\n\r\n  /** Data types such as string, number, ... */\r\n  dataTypes = this.#typesFieldsSvc.dataTypes();\r\n\r\n  #inputTypeOptions = this.#typesFieldsSvc.getInputTypes();\r\n  #contentTypeSig = this.#typesSvc.retrieveContentTypeSig(this.route.snapshot.paramMap.get('contentTypeStaticName'), null);\r\n\r\n  // Existing fields - to setup reserved names and initialize the fields\r\n  existingFieldsLazy = computedObj<Signal<Field[]>>('rawFields', () => {\r\n    const contentType = this.#contentTypeSig();\r\n    return contentType\r\n      ? this.#typesFieldsSvc.getFieldsSig(contentType.NameId)\r\n      : signal([]);\r\n  });\r\n\r\n  fields = (() => {\r\n    // Get the fields once the data is ready\r\n    const initial = computedObj('fields', () => {\r\n      const fields = this.existingFieldsLazy()();\r\n      if (this.editMode != null) {\r\n        if (fields.length === 0) return [];\r\n        const routeId = this.route.snapshot.paramMap.get('id');\r\n        const editFieldId = routeId ? parseInt(routeId, 10) : null;\r\n        const editField = fields.find(field => field.Id === editFieldId);\r\n        return [editField];\r\n      } else\r\n        return this.#generateNewList(fields.length);\r\n    });\r\n\r\n    return linkedSignal({\r\n      source: initial,\r\n      computation: fields => fields,\r\n    });\r\n  })();\r\n\r\n  // Figure out the reserved names which should not be used as field names\r\n  #reservedNamesSystem = this.#typesFieldsSvc.reservedNames();\r\n  reservedNames = computedObj('reservedNamesAll', () => {\r\n    // setup watchers\r\n    const fields = this.existingFieldsLazy()();\r\n    const reservedNames = this.#reservedNamesSystem();\r\n    if (fields.length === 0)\r\n      return reservedNames;\r\n    const merged = ReservedNamesValidatorDirective.mergeReserved(reservedNames, fields);\r\n    \r\n    // If we're about to rename, allow the current name to be reused\r\n    if (this.editMode === 'name')\r\n      delete merged[fields[0].StaticName];\r\n    return merged;\r\n  });\r\n\r\n  ngAfterViewInit(): void {\r\n    // Wait for the inputFields to be available\r\n    // But delay execution to ensure the view is fully rendered\r\n    if (this.autoFocusInputField)\r\n      setTimeout(() => this.autoFocusInputField.first?.nativeElement?.focus(), 250);\r\n  }\r\n\r\n  #generateNewList(existingFieldCount: number): FieldSubset[] {\r\n    return [...Array(8).keys()].map(k => ({\r\n      Id: 0,\r\n      Type: DataTypeCatalog.String,\r\n      InputType: InputTypeCatalog.StringDefault,\r\n      StaticName: '',\r\n      // first one is title, if there were no fields before\r\n      IsTitle: existingFieldCount === 0 && k === 0,\r\n      SortOrder: existingFieldCount + k + 1,\r\n    } satisfies FieldSubset));\r\n  }\r\n\r\n  /** 2D array of all possible options (by field index) */\r\n  inputTypeOptions = computedObj('inputTypeOptions', () => {\r\n    const all = this.#inputTypeOptions();\r\n    const fields = this.fields();\r\n    return fields.map((field, i) => {\r\n      return all.filter(option => option.dataType === field.Type.toLocaleLowerCase());\r\n    });\r\n  });\r\n\r\n  updateFieldPart(index: number, patch: Partial<Field>) {\r\n    this.fields.update(fields => [...fields].map((f, i) => (i !== index) ? f : ({ ...f, ...patch })));\r\n  }\r\n\r\n  setFieldType(index: number, type: string) {\r\n    // First update the field, as we'll access this again indirectly through other signals\r\n    this.updateFieldPart(index, { Type: type });\r\n\r\n    // Check if it has a xxx-default like string-default in the list\r\n    const defaultInputName = type.toLocaleLowerCase() + InputTypeCatalog.DefaultSuffix;\r\n    const options = this.inputTypeOptions()[index];\r\n    const inputName = options.find(option => option.inputType === defaultInputName)?.inputType\r\n      ?? options[0].inputType;\r\n    this.updateFieldPart(index, { InputType: inputName });\r\n  }\r\n\r\n  hints = computedObj('hints', () => {\r\n    const fields = this.fields();\r\n    return fields.map((field, i) => {\r\n      const dataType = this.dataTypes().find(dataType => dataType.name === field.Type);\r\n      const inputType = this.#inputTypeOptions().find(option => option.inputType === field.InputType);\r\n      return {\r\n        data: dataType?.description ?? '',\r\n        input: inputType?.isObsolete\r\n          ? `OBSOLETE - ${inputType.obsoleteMessage}`\r\n          : inputType?.description ?? '',\r\n      } satisfies Hints;\r\n    });\r\n  });\r\n\r\n  getInputTypeOption(inputName: string) {\r\n    return this.#inputTypeOptions().find(option => option.inputType === inputName);\r\n  }\r\n\r\n  save() {\r\n    this.saving.set(true);\r\n    this.snackBar.open('Saving...');\r\n\r\n    // Prepare finalize-action to reuse below\r\n    const doneAndClose = () => {\r\n      this.saving.set(false);\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.dialog.close();\r\n    }\r\n\r\n    if (this.editMode != null) {\r\n      const field = this.fields()[0];\r\n      if (this.editMode === 'name') {\r\n        this.#typesFieldsSvc\r\n          .rename(field.Id, this.#contentTypeSig().Id, field.StaticName)\r\n          .subscribe(() => doneAndClose());\r\n      } else if (this.editMode === 'inputType') {\r\n        this.#typesFieldsSvc\r\n          .updateInputType(field.Id, field.StaticName, field.InputType)\r\n          .subscribe(() => doneAndClose());\r\n      }\r\n    } else {\r\n      of(...this.fields())\r\n        .pipe(\r\n          filter(field => !!field.StaticName),\r\n          concatMap(field =>\r\n            this.#typesFieldsSvc.add(field, this.#contentTypeSig().Id).pipe(catchError(_ => of(null)))\r\n          ),\r\n          toArray(),\r\n        )\r\n        .subscribe(() => doneAndClose());\r\n    }\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n    selector: 'app-field-hint',\r\n    templateUrl: './field-hint.component.html',\r\n    styleUrls: ['./field-hint.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        NgClass,\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { scanInternals } from './scanInternals';\nimport { operate } from '../util/lift';\nexport function reduce(accumulator, seed) {\n    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n"],"x_google_ignoreList":[5]}