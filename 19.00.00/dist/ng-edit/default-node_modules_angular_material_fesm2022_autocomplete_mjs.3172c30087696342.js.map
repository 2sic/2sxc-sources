{"version":3,"file":"default-node_modules_angular_material_fesm2022_autocomplete_mjs.3172c30087696342.js","mappings":"ydAEmN,MAAAA,EAAA,UAAAC,EAAA,eAAAC,EAAAC,EAAAC,GAAA,KAAAD,EAAA,OAAAE,EAkPtHC,cAAE,aAAFA,MAAE,gCAAAC,GAAFD,MAAED,GAAA,MAAAG,EAAFF,QAAE,OAAFA,MACy+DE,EAAAC,eAAAC,KAAAH,GAA2B,GADpgED,MAAE,GAAFA,OAC4jE,MAAAH,EAAA,OAAAQ,EAAAP,EAAAQ,GAAAJ,EAD5jEF,cAAEE,EAAAK,YAAFP,MAAE,+BAAAE,EAAAM,UAAFR,CACylD,+BAAAE,EAAAM,UADzlDR,CACipD,0BAAAE,EAAAO,OADjpDT,CACmsD,wBAAAE,EAAAO,OADnsDT,CACmvD,oBAAAE,EAAAO,QADnvDT,MAAE,KAAAE,EAAAI,GAAFN,CACqgD,kBAAAE,EAAAQ,OAAA,oBADrgDV,MAAE,aAAAE,EAAAS,WAAA,KAAFX,CAAE,kBAAAE,EAAAU,wBAAAP,GAAA,EA/N/F,MAAMQ,GAAiBC,QAAQ,iBAAkB,EAC7CC,QAAM,gBAAgBC,QAAM,CACxBC,QAAS,EACTC,UAAW,kBAEfC,QAAW,4BAA6B,EACpCC,QAAM,EACFC,QAAQ,gBAAgBL,QAAM,CAAEC,QAAS,MACzCI,QAAQ,oCAAoCL,QAAM,CAAEE,UAAW,oBAGvEC,QAAW,4BAA6B,EAACE,QAAQ,iBAAiBL,QAAM,CAAEC,QAAS,SAIvF,MAAMK,EACFC,OACAC,OACAC,YAEAF,EAEAC,GACIE,KAAKH,OAASA,EACdG,KAAKF,OAASA,CAClB,EAGJ,MAAMG,EAAmC,IAAIC,MAAe,mCAAoC,CAC5FC,WAAY,OACZC,QAGJ,SAASC,IACL,MAAO,CACHC,uBAAuB,EACvBC,wBAAwB,EACxBC,8BAA8B,EAC9BC,kBAAkB,EAE1B,IACA,IACMC,EAAe,MAArB,MAAMA,EACFC,sBAAqBC,OAAOC,OAC5BC,eAAcF,OAAOG,OACrBC,aAAYJ,OAAOX,GACnBgB,qBAAuBC,KAAaC,MAEpC1C,eAAiB,IAAI2C,MAErBC,YAEAvC,WAAY,EAEZ,UAAIE,GACA,OAAOgB,KAAKsB,SAAWtB,KAAKlB,SAChC,CACAwC,SAAU,EAEVC,sBAEAC,UAAUC,GACNzB,KAAKjB,OAAS0C,EACdzB,KAAKW,mBAAmBe,cAC5B,CAEA3C,OAKA4C,SAEAC,MAEAC,QAEAC,aAEA7C,UAEA8C,eAEAC,YAAc,KAKd1B,sBAEAC,uBAOAE,iBAKAwB,WAEAC,cAEAC,eAAiB,IAAIf,MAErBgB,OAAS,IAAIhB,MAEbiB,OAAS,IAAIjB,MAEbkB,gBAAkB,IAAIlB,MAKtB,aAAImB,CAAUd,GACVzB,KAAKnB,WAAa4C,EAClBzB,KAAKc,YAAY0B,cAAcC,UAAY,EAC/C,CACA5D,WAEA,gCAAI2B,GACA,OAAOR,KAAK0C,6BAChB,CACA,gCAAIlC,CAA6BiB,GAC7BzB,KAAK0C,8BAAgCjB,EACrCzB,KAAK2C,uBACT,CACAD,8BAEAC,wBACI,GAAI3C,KAAK6B,QACL,UAAW/B,KAAUE,KAAK6B,QACtB/B,EAAOa,mBAAmBe,cAGtC,CAEA9C,MAAKgC,OAAOgC,MAAcC,MAAM,qBAKhCC,YACA/C,cACI,MAAMgD,KAAWnC,OAAOoC,MAKxBhD,KAAK8C,YAAcC,GAAUE,SAAU,EACvCjD,KAAKM,wBAA0BN,KAAKgB,UAAUV,sBAC9CN,KAAKO,yBAA2BP,KAAKgB,UAAUT,uBAC/CP,KAAKS,mBAAqBT,KAAKgB,UAAUP,iBACzCT,KAAK0C,8BAAgC1C,KAAKgB,UAAUR,+BAAgC,CACxF,CACA0C,qBACIlD,KAAKqB,YAAc,IAAI8B,KAA2BnD,KAAK6B,SAClDuB,WACAC,cAAcrD,KAAKsD,gBACxBtD,KAAKiB,qBAAuBjB,KAAKqB,YAAYkC,OAAOC,UAAUC,IACtDzD,KAAKhB,QACLgB,KAAKsC,gBAAgBoB,KAAK,CAAE7D,OAAQG,KAAMF,OAAQE,KAAK6B,QAAQ8B,UAAUF,IAAU,MAAM,GAIjGzD,KAAK4D,gBACT,CACAC,cACI7D,KAAKqB,aAAayC,UAClB9D,KAAKiB,qBAAqB8C,cAC1B/D,KAAKvB,eAAeuF,UACxB,CAKAC,cAAcC,GACNlE,KAAK4B,QACL5B,KAAK4B,MAAMY,cAAc0B,UAAYA,EAE7C,CAEAC,gBACI,OAAOnE,KAAK4B,MAAQ5B,KAAK4B,MAAMY,cAAc0B,UAAY,CAC7D,CAEAN,iBACI5D,KAAKlB,YAAckB,KAAK6B,QAAQuC,OAChCpE,KAAKW,mBAAmBe,cAC5B,CAEA2C,iBAAiBvE,GACb,MAAMwE,EAAQ,IAAI1E,EAA6BI,KAAMF,GACrDE,KAAKmC,eAAeuB,KAAKY,EAC7B,CAEApF,wBAAwBqF,GACpB,OAAIvE,KAAKf,UACE,KAGJe,KAAK+B,gBADYwC,EAAUA,EAAU,IAAM,IACHvE,KAAK+B,eAAiBwC,CACzE,CAeAjB,iBACI,OAAO,CACX,CACAkB,iBAAW,SAAAC,GAAA,WAAAA,GAAwF/D,EAAe,EAClH8D,iBADyFlG,MAAE,CAAAoG,KACJhE,EAAeiE,UAAA,uBAAAC,eAAA,SAAAzG,EAAAC,EAAAyG,GAA+jC,GAA/jC,EAAA1G,IADbG,MAAEuG,EACm/BC,KAAS,GAD9/BxG,MAAEuG,EAC8jCE,KAAY,MAAA5G,EAAA,KAAA6G,EAD5kC1G,MAAE0G,EAAF1G,WAAEF,EAAAyD,QAAAmD,GAAF1G,MAAE0G,EAAF1G,WAAEF,EAAA0D,aAAAkD,EAAA,GAAAC,UAAA,SAAA9G,EAAAC,GAAA,KAAAD,IAAFG,MACsqC4G,MAAW,GADjrC5G,MAAEN,EAAA,MAAAG,EAAA,KAAA6G,EAAF1G,MAAE0G,EAAF1G,WAAEF,EAAAuD,SAAAqD,EAAAG,OAAF7G,MAAE0G,EAAF1G,WAAEF,EAAAwD,MAAAoD,EAAAG,MAAA,GAAAC,UAAA,2BAAAC,OAAA,CAAApG,UAAA,6BAAA8C,eAAA,uCAAAC,YAAA,cAAA1B,sBAAA,mDAC8QgF,OAAgB/E,uBAAA,qDAAgF+E,OAAgB7E,iBAAA,yCAA8D6E,OAAgBrD,WAAA,aAAAC,cAAA,mCAA+EoD,OAAgB/C,UAAA,wBAAA/B,6BAAA,iEAAqI8E,QAAgBC,QAAA,CAAApD,eAAA,iBAAAC,OAAA,SAAAC,OAAA,SAAAC,gBAAA,mBAAAkD,SAAA,oBAAAC,SAAA,CADlsBnH,MAC23B,CAAC,CAAEoH,QAASC,KAA6BC,YAAalF,KADj7BpC,OAAEuH,mBAAA5H,EAAA6H,MAAA,EAAAC,KAAA,EAAAC,OAAA,oHAAArE,SAAA,SAAAxD,EAAAC,GAAA,EAAAD,IAAFG,cAAE,EAAAJ,EAAA,oBACk4C,EAAA+H,OAAA,olCAAAC,cAAA,EAAAC,KAAA,CAAAC,UAAszD,CAACjH,IAAekH,gBAAA,IACtyG,OAvLK3F,CAAe,KAqQrB,MAAM4F,EAAkC,CACpCZ,QAASa,KACTX,aAAaY,SAAW,IAAMC,GAC9BC,OAAO,GAYLC,EAAmC,IAAIzG,MAAe,mCAAoC,CAC5FC,WAAY,OACZC,QAASA,KACL,MAAMwG,KAAUhG,OAAOiG,MACvB,MAAO,IAAMD,EAAQE,iBAAiBC,YAAW,IAQnDC,EAAoD,CACtDtB,QAASiB,EACTM,KAAM,CAACJ,MACPK,WAPJ,SAASC,EAAyCP,GAC9C,MAAO,IAAMA,EAAQE,iBAAiBC,YAC1C,GAOA,IACMN,EAAsB,MAA5B,MAAMA,EACFW,YAAWxG,OAAOG,OAClBsG,YAAWzG,OAAOiG,MAClBS,qBAAoB1G,OAAO2G,OAC3BC,SAAQ5G,OAAO6G,OACf9G,sBAAqBC,OAAOC,OAC5B6G,QAAO9G,OAAO+G,KAAgB,CAAEC,UAAU,IAC1CC,cAAajH,OAAOkH,KAAgB,CAAEF,UAAU,EAAMG,MAAM,IAC5DC,aAAYpH,OAAOqH,MACnBC,kBAAiBtH,OAAOuH,MACxBnH,aAAYJ,OAAOX,EAAkC,CAAE2H,UAAU,IACjEQ,YACAC,QACAC,qBAAsB,EACtBC,mBAAkB3H,OAAO+F,GACzB6B,qBACAC,0BAEAC,eAEAC,eAEAC,oBAEAC,kBAEAC,wBAAyB,EAEzBC,4BAEAC,sBAAwB9H,KAAaC,MAErC8H,uBAAsBrI,OAAOsI,MAC7BC,8BAAgCjI,KAAaC,MAM7CiI,qBAAsB,EAEtBC,0BAKAC,2BAEAC,qBAAuB,IAAIC,IAK3BC,mBAAqBA,KAIjBzJ,KAAKoJ,oBACDpJ,KAAKgI,UAAU0B,gBAAkB1J,KAAKoH,SAAS5E,eAAiBxC,KAAK2J,WAG7EC,UAAYA,OAEZC,WAAaA,OAEbC,aAQAC,SAAW,OAKXC,YAKAC,sBAAwB,MAKxBC,qBACAC,aAAe,IAAIX,IACnBY,aAAYxJ,OAAOyJ,OACnBtK,cAAgB,CAEhBuK,YAAc,mCACdC,kBACIvK,KAAKmK,aAAazL,OAClBsB,KAAKmK,aAAanG,WAClB,MAAMwG,EAASxK,KAAKyK,oBACTD,EAAW,KAClBxK,KAAKwH,MAAMkD,kBAAkB,IAAMF,EAAOG,iBAAiB,OAAQ3K,KAAKyJ,oBAEhF,CACAmB,YAAYC,GACJA,EAAQd,UAAe/J,KAAK6I,oBAC5B7I,KAAK8K,sBAAsB9K,KAAK6I,mBAC5B7I,KAAK2J,WACL3J,KAAKoI,YAAY2C,iBAG7B,CACAlH,cACI,MAAM2G,EAASxK,KAAKyK,oBACTD,EAAW,KAClBA,EAAOQ,oBAAoB,OAAQhL,KAAKyJ,oBAE5CzJ,KAAKmJ,8BAA8BpF,cACnC/D,KAAKgJ,sBAAsBjF,cAC3B/D,KAAKsI,qBAAsB,EAC3BtI,KAAKiL,gBACLjL,KAAKuJ,qBAAqBvF,WAC1BhE,KAAKkL,iBACT,CAEA,aAAIvB,GACA,OAAO3J,KAAKmL,kBAAoBnL,KAAK8J,aAAahL,SACtD,CACAqM,kBAAmB,EAEnBC,YACIpL,KAAKqL,oBACT,CAEAC,aACItL,KAAKuL,cACAvL,KAAKmL,mBAGNnL,KAAK2J,WAKL3J,KAAKwH,MAAMgE,IAAI,KACXxL,KAAK8J,aAAazH,OAAOqB,MAAK,GAKlC1D,KAAK8J,aAAavI,wBAA0BvB,OAC5CA,KAAK8J,aAAaxI,SAAU,EAC5BtB,KAAK8J,aAAavI,sBAAwB,MAE9CvB,KAAKmL,kBAAmB,EACxBnL,KAAKsJ,2BAA6B,KAC9BtJ,KAAKoI,aAAepI,KAAKoI,YAAYqD,gBACrCzL,KAAKoI,YAAYsD,SACjB1L,KAAK+I,4BAA4BhF,eAErC/D,KAAK2L,oBAGA3L,KAAKsI,qBAKNtI,KAAKW,mBAAmBiL,gBAGxB5L,KAAK6L,kBACLC,MAAuB9L,KAAK6L,cAAe,YAAa7L,KAAK8J,aAAalL,IAElF,CAKAmM,iBACQ/K,KAAKmL,kBACLnL,KAAKoI,YAAY2C,gBAEzB,CAKA,uBAAIgB,GACA,SAAOC,KAAMhM,KAAKiM,iBAAkBjM,KAAK8J,aAAazI,YAAY6K,OAAOC,QAAKC,KAAO,IAAMpM,KAAKmL,mBAAoBnL,KAAKuJ,qBAAsBvJ,KAAKqM,yBAA0BrM,KAAKoI,YAC7KpI,KAAKoI,YAAYkE,cAAcH,QAAKC,KAAO,IAAMpM,KAAKmL,oBAAiB,EACvEoB,SAAMJ,QAEZK,KAAIlI,GAAUA,aAAiBmI,KAA2BnI,EAAQ,MACtE,CAEA2H,oBAAmBS,KAAM,KACrB,MAAM7K,EAAU7B,KAAK8J,aAAe9J,KAAK8J,aAAajI,QAAU,KAChE,OAAIA,EACOA,EAAQgJ,QAAQsB,QAAKQ,KAAU9K,IAAO,EAAG+K,KAAU,OAAMZ,QAASnK,EAAQ2K,IAAI1M,GAAUA,EAAO+M,sBAInG7M,KAAKmK,aAAagC,QAAKS,KAAU,IAAM5M,KAAKiM,kBAAiB,GAGxE,gBAAIa,GACA,OAAI9M,KAAK8J,cAAgB9J,KAAK8J,aAAazI,YAChCrB,KAAK8J,aAAazI,YAAY0L,WAElC,IACX,CAEAV,yBACI,SAAOL,QAAMgB,KAAUhN,KAAKgI,UAAW,UAAO,EAAGgF,KAAUhN,KAAKgI,UAAW,aAAU,EAAGgF,KAAUhN,KAAKgI,UAAW,aAAamE,QAAKC,KAAO9H,IAGvI,MAAM2I,KAAcC,MAAgB5I,GAC9B6I,EAAYnN,KAAK6H,WACjB7H,KAAK6H,WAAWuF,4BAA4B5K,cAC5C,KACA6K,EAAerN,KAAKgK,YAAchK,KAAKgK,YAAYsD,WAAW9K,cAAgB,KACpF,OAAQxC,KAAKmL,kBACT8B,IAAgBjN,KAAKoH,SAAS5E,eAK9BxC,KAAKgI,UAAU0B,gBAAkB1J,KAAKoH,SAAS5E,iBAC7C2K,IAAcA,EAAUI,SAASN,OACjCI,IAAiBA,EAAaE,SAASN,OACvCjN,KAAKoI,cACNpI,KAAKoI,YAAYoF,eAAeD,SAASN,EAAW,GAEjE,CAEAQ,WAAWhM,GACPiM,QAAQC,QAAQ,MAAMC,KAAK,IAAM5N,KAAK6N,mBAAmBpM,GAC7D,CAEAqM,iBAAiBC,GACb/N,KAAK4J,UAAYmE,CACrB,CAEAC,kBAAkBD,GACd/N,KAAK6J,WAAakE,CACtB,CAEAE,iBAAiBC,GACblO,KAAKoH,SAAS5E,cAAc2L,SAAWD,CAC3C,CACAE,eAAe9J,GACX,MAAM+J,EAAU/J,EAAM+J,QAChBC,KAAcC,MAAejK,GASnC,GAJI+J,IAAYG,OAAWF,GACvBhK,EAAMmK,iBAEVzO,KAAK4I,oBAAsB5I,KAAKoH,SAAS5E,cAAcf,MACnDzB,KAAK8M,cAAgBuB,IAAYK,MAAS1O,KAAK2J,YAAc2E,EAC7DtO,KAAK8M,aAAa6B,wBAClB3O,KAAK4O,mBACLtK,EAAMmK,sBAAe,GAEhBzO,KAAK8J,aAAc,CACxB,MAAM+E,EAAiB7O,KAAK8J,aAAazI,YAAY0L,WAC/C+B,EAAaT,IAAYU,MAAYV,IAAYW,KACnDX,IAAYY,MAAQH,IAAeR,GAAetO,KAAK2J,UACvD3J,KAAK8J,aAAazI,YAAY6N,UAAU5K,GAEnCwK,GAAc9O,KAAKmP,YACxBnP,KAAKqL,mBAAmBrL,KAAK4I,sBAE7BkG,GAAc9O,KAAK8J,aAAazI,YAAY0L,aAAe8B,KAC3D7O,KAAKoP,gBAAgBpP,KAAK8J,aAAazI,YAAYgO,iBAAmB,GAClErP,KAAK8J,aAAavJ,wBAA0BP,KAAK8M,eAC5C9M,KAAKsJ,6BACNtJ,KAAKqJ,0BAA4BrJ,KAAK4I,qBAE1C5I,KAAKsJ,2BAA6BtJ,KAAK8M,aACvC9M,KAAK6N,mBAAmB7N,KAAK8M,aAAarL,QAGtD,CACJ,CACA6N,aAAahL,GACT,IAAIiL,EAASjL,EAAMiL,OACf9N,EAAQ8N,EAAO9N,MAUnB,GARoB,WAAhB8N,EAAO7K,OACPjD,EAAiB,IAATA,EAAc,KAAO+N,WAAW/N,IAOxCzB,KAAK0I,iBAAmBjH,EAAO,CAS/B,GARAzB,KAAK0I,eAAiBjH,EACtBzB,KAAKsJ,2BAA6B,OAI7BtJ,KAAK8J,eAAiB9J,KAAK8J,aAAarJ,mBACzCT,KAAK4J,UAAUnI,GAEdA,GAC4C,GAExCzB,KAAK2J,YAAc3J,KAAK8J,aAAarJ,iBAAkB,CAG5D,MAAMgP,EAAiBzP,KAAK8J,aAAajI,SAAS6N,KAAK5P,GAAUA,EAAO6P,UACpEF,GAEIhO,IADYzB,KAAK4P,iBAAiBH,EAAehO,QAEjDgO,EAAeI,UAAS,EAGpC,OAZI7P,KAAK8P,6BAA6B,MAAM,GAa5C,GAAI9P,KAAKmP,YAAcnP,KAAKgI,UAAU0B,gBAAkBpF,EAAMiL,OAAQ,CAMlE,MAAMQ,EAAgB/P,KAAK4I,qBAAuB5I,KAAKoH,SAAS5E,cAAcf,MAC9EzB,KAAK4I,oBAAsB,KAC3B5I,KAAKqL,mBAAmB0E,EAC5B,CACJ,CACJ,CACAC,eACShQ,KAAKoJ,oBAGDpJ,KAAKmP,aACVnP,KAAK0I,eAAiB1I,KAAKoH,SAAS5E,cAAcf,MAClDzB,KAAKiQ,eAAejQ,KAAK0I,gBACzB1I,KAAKkQ,aAAY,IALjBlQ,KAAKoJ,qBAAsB,CAOnC,CACA+G,eACQnQ,KAAKmP,aAAenP,KAAK2J,WACzB3J,KAAKqL,oBAEb,CAOA6E,YAAYE,GAAgB,GACpBpQ,KAAK6H,YAA6C,SAA/B7H,KAAK6H,WAAWwI,aAC/BD,EACApQ,KAAK6H,WAAWyI,uBAGhBtQ,KAAK6H,WAAWwI,WAAa,SAEjCrQ,KAAK8I,wBAAyB,EAEtC,CAEAyC,cACQvL,KAAK8I,yBACD9I,KAAK6H,aACL7H,KAAK6H,WAAWwI,WAAa,QAEjCrQ,KAAK8I,wBAAyB,EAEtC,CAKAyH,6BACI,MAAMC,EAAgB,IAAIC,IAAWC,KACjCC,SAAgB,KACZD,EAAWhS,MAAK,EACjB,CAAEkS,SAAU5Q,KAAKoK,WAAW,GAE7ByG,EAAgB7Q,KAAK8J,aAAajI,QAAQgJ,QAAQsB,QAAK2E,KAAI,IAAM9Q,KAAK6I,kBAAkBkI,wBAAqB,EAGnHC,KAAM,IAEN,SAAQhF,KAAMwE,EAAeK,GACxB1E,QAGLS,KAAU,IAAM5M,KAAKwH,MAAMgE,IAAI,KAI3B,MAAMyF,EAAUjR,KAAK2J,UACrB,OAAA3J,KAAK4O,mBACL5O,KAAK2L,oBACL3L,KAAKW,mBAAmBiL,gBACpB5L,KAAK2J,WACL3J,KAAKoI,YAAY2C,iBAEjBkG,IAAYjR,KAAK2J,YAQb3J,KAAK2J,UACL3J,KAAKkR,cAGLlR,KAAK8J,aAAazH,OAAOqB,QAG1B1D,KAAK+L,wBACd,EAEFoF,KAAK,IAEA3N,UAAUc,GAAStE,KAAKoR,kBAAkB9M,GACnD,CAKA4M,cACIlR,KAAK8J,aAAa1H,OAAOsB,MAC7B,CAEAuH,gBACQjL,KAAKoI,cACLpI,KAAKsL,aACLtL,KAAKoI,YAAYiJ,UACjBrR,KAAKoI,YAAc,KAE3B,CAEAwH,iBAAiBnO,GACb,MAAMqI,EAAe9J,KAAK8J,aAC1B,OAAOA,GAAgBA,EAAa9H,YAAc8H,EAAa9H,YAAYP,GAASA,CACxF,CACAoM,mBAAmBpM,GACf,MAAM6P,EAAYtR,KAAK4P,iBAAiBnO,GAC3B,MAATA,GACAzB,KAAK8P,6BAA6B,MAAM,GAI5C9P,KAAKuR,wBAAwBD,GAAgC,GACjE,CACAC,wBAAwB9P,GAGhBzB,KAAK6H,WACL7H,KAAK6H,WAAW2J,SAAS/P,MAAQA,EAGjCzB,KAAKoH,SAAS5E,cAAcf,MAAQA,EAExCzB,KAAK0I,eAAiBjH,CAC1B,CAMA2P,kBAAkB9M,GACd,MAAM1C,EAAQ5B,KAAK8J,aACb2H,EAAWnN,EAAQA,EAAMzE,OAASG,KAAKsJ,2BACzCmI,GACAzR,KAAK8P,6BAA6B2B,GAClCzR,KAAK6N,mBAAmB4D,EAAShQ,OAIjCzB,KAAK4J,UAAU6H,EAAShQ,OACxBG,EAAMyC,iBAAiBoN,GACvBzR,KAAKoH,SAAS5E,cAAckP,SAEvB9P,EAAMnB,kBACXT,KAAKoH,SAAS5E,cAAcf,QAAUzB,KAAK2I,iBAC3C3I,KAAK8P,6BAA6B,MAClC9P,KAAK6N,mBAAmB,MAGpBjM,EAAMnD,eACNmD,EAAMnD,eAAe0N,QAAKgF,KAAK,IAAI3N,UAAU,IAAMxD,KAAK4J,UAAU,OAGlE5J,KAAK4J,UAAU,OAGvB5J,KAAKsL,YACT,CAIAwE,6BAA6B6B,EAAMC,GAG/B5R,KAAK8J,cAAcjI,SAASgQ,QAAQ/R,IAC5BA,IAAW6R,GAAQ7R,EAAO6P,UAC1B7P,EAAO+P,SAAS+B,EAAS,EAGrC,CACAvG,mBAAmB0E,EAAgB/P,KAAKoH,SAAS5E,cAAcf,OAC3DzB,KAAKiQ,eAAeF,GACpB/P,KAAKkQ,cAEDlQ,KAAK6L,gBAELiG,QAAoB9R,KAAK6L,cAAe,YADxB7L,KAAK8J,aAAalL,GAG1C,CACAqR,eAAeF,GAIX,IAAIgC,EAAa/R,KAAKoI,YACjB2J,GAmCD/R,KAAK6I,kBAAkBmJ,UAAUhS,KAAKiS,wBACtCF,EAAWG,WAAW,CAAEC,MAAOnS,KAAKoS,qBAnCpCpS,KAAKqI,QAAU,IAAIgK,KAAerS,KAAK8J,aAAanI,SAAU3B,KAAKsH,kBAAmB,CAClF1I,GAAIoB,KAAK6H,YAAYyK,eAEzBP,EAAa/R,KAAKqH,SAASkL,OAAOvS,KAAKwS,qBACvCxS,KAAKoI,YAAc2J,EACnB/R,KAAKgJ,sBAAwBhJ,KAAKkI,eAAe3E,SAASC,UAAU,KAC5DxD,KAAK2J,WAAaoI,GAClBA,EAAWG,WAAW,CAAEC,MAAOnS,KAAKoS,kBAAkB,GAK9DpS,KAAKmJ,8BAAgCnJ,KAAKiJ,oBACrCwJ,QAAQC,KAAYC,kBACpBnP,UAAUoP,IACgBA,EAAOC,QAI9B7S,KAAK6I,kBACAiK,wBAAuB,GACvBC,mBAAkB,GAClBC,mBAAmB,GAGxBhT,KAAK6I,kBACAiK,wBAAuB,GACvBC,mBAAkB,GAClBC,mBAAmB,EAAC,IASjCjB,IAAeA,EAAWtG,gBAC1BsG,EAAWkB,OAAOjT,KAAKqI,SACvBrI,KAAK2I,eAAiBoH,EACtB/P,KAAK4I,oBAAsB,KAC3B5I,KAAK+I,4BAA8B/I,KAAKuQ,8BAE5C,MAAMU,EAAUjR,KAAK2J,UACrB3J,KAAK8J,aAAaxI,QAAUtB,KAAKmL,kBAAmB,EACpDnL,KAAK8J,aAAavI,sBAAwBvB,KAC1CA,KAAK8J,aAAatI,UAAUxB,KAAK6H,YAAYqL,OAC7ClT,KAAK2L,oBACL3L,KAAKmT,4BAGDnT,KAAK2J,WAAasH,IAAYjR,KAAK2J,WACnC3J,KAAKkR,aAEb,CAEAkC,oBAAuB9O,KAGdA,EAAM+J,UAAYG,QAAU,EAACD,MAAejK,IAC5CA,EAAM+J,UAAYU,SAAYR,MAAejK,EAAO,aAGjDtE,KAAKsJ,6BACLtJ,KAAKuR,wBAAwBvR,KAAKqJ,2BAA6B,IAC/DrJ,KAAKsJ,2BAA6B,MAEtCtJ,KAAKuJ,qBAAqB7K,OAC1BsB,KAAK4O,mBAGLtK,EAAM+O,kBACN/O,EAAMmK,iBAAe,EAI7B9C,oBAKI,GAJA3L,KAAK8J,aAAalG,iBAId5D,KAAK2J,UAAW,CAChB,MAAMoI,EAAa/R,KAAKoI,YACnBpI,KAAKwI,uBAGNxI,KAAKwI,qBAAuBuJ,EAAWuB,gBAAgB9P,UAAUxD,KAAKoT,sBAErEpT,KAAKyI,4BAINzI,KAAKyI,0BAA4BsJ,EAAWwB,uBAAuB/P,YAE3E,MAEIxD,KAAKwI,sBAAsBzE,cAC3B/D,KAAKyI,2BAA2B1E,cAChC/D,KAAKwI,qBAAuBxI,KAAKyI,0BAA4B,IAErE,CACA+J,oBACI,OAAO,IAAIgB,KAAc,CACrBC,iBAAkBzT,KAAK0T,sBACvBC,eAAgB3T,KAAKuI,kBACrB4J,MAAOnS,KAAKoS,iBACZwB,UAAW5T,KAAK0H,WAAQmM,EACxBC,WAAY9T,KAAKgB,WAAW+S,mBAEpC,CACAL,sBAEI,MAAMM,EAAWhU,KAAKqH,SACjB0C,WACAkK,oBAAoBjU,KAAKiS,wBACzBa,wBAAuB,GACvBoB,UAAS,GACd,OAAAlU,KAAK8K,sBAAsBkJ,GAC3BhU,KAAK6I,kBAAoBmL,EAClBA,CACX,CAEAlJ,sBAAsB2I,GAGlB,MAAMU,EAAiB,CACnB,CAAEC,QAAS,QAASC,QAAS,SAAUC,SAAU,QAASC,SAAU,OACpE,CAAEH,QAAS,MAAOC,QAAS,SAAUC,SAAU,MAAOC,SAAU,QAK9DT,EAAa9T,KAAKsK,YAClBkK,EAAiB,CACnB,CAAEJ,QAAS,QAASC,QAAS,MAAOC,SAAU,QAASC,SAAU,SAAUT,cAC3E,CAAEM,QAAS,MAAOC,QAAS,MAAOC,SAAU,MAAOC,SAAU,SAAUT,eAE3E,IAAIW,EAEAA,EADkB,UAAlBzU,KAAK+J,SACOyK,EAEW,UAAlBxU,KAAK+J,SACEoK,EAGA,IAAIA,KAAmBK,GAEvCf,EAAiBiB,cAAcD,EACnC,CACAxC,uBACI,OAAIjS,KAAKgK,YACEhK,KAAKgK,YAAYsD,WAErBtN,KAAK6H,WAAa7H,KAAK6H,WAAWuF,4BAA8BpN,KAAKoH,QAChF,CACAgL,iBACI,OAAOpS,KAAK8J,aAAa7H,YAAcjC,KAAK2U,eAChD,CAEAA,gBACI,OAAO3U,KAAKiS,uBAAuBzP,cAAcoS,wBAAwBzC,KAC7E,CAQAvD,mBACI,MAAM9E,EAAe9J,KAAK8J,aAC1B,GAAIA,EAAaxJ,sBAAuB,CAIpC,IAAIuU,GAA0B,EAC9B,QAASpR,EAAQ,EAAGA,EAAQqG,EAAajI,QAAQuC,OAAQX,IAErD,IADeqG,EAAajI,QAAQiT,IAAIrR,GAC5B0K,SAAU,CAClB0G,EAA0BpR,EAC1B,KACJ,CAEJqG,EAAazI,YAAY0T,cAAcF,EAC3C,MAEI/K,EAAazI,YAAY0T,eAAc,EAE/C,CAEA5F,WACI,MAAM6F,EAAUhV,KAAKoH,SAAS5E,cAC9B,OAAQwS,EAAQC,WAAaD,EAAQ7G,WAAanO,KAAKkK,oBAC3D,CAEAO,aACI,OAAOzK,KAAKgI,WAAWkN,aAAe1K,MAC1C,CAEA4E,gBAAgB3L,GAQZ,MAAMqG,EAAe9J,KAAK8J,aACpBqL,KAAaC,MAA8B3R,EAAOqG,EAAajI,QAASiI,EAAahI,cAC3F,GAAc,IAAV2B,GAA8B,IAAf0R,EAIfrL,EAAa7F,cAAc,QAAC,GAEvB6F,EAAalI,MAAO,CACzB,MAAM9B,EAASgK,EAAajI,QAAQ8B,UAAUF,GAC9C,GAAI3D,EAAQ,CACR,MAAMkV,EAAUlV,EAAOuV,kBACjBC,KAAoBC,MAAyBP,EAAQQ,UAAWR,EAAQS,aAAc3L,EAAa3F,gBAAiB2F,EAAalI,MAAMY,cAAciT,cAC3J3L,EAAa7F,cAAcqR,EAC/B,CACJ,CACJ,CAMAzJ,cAAgB,KAoBhBsH,4BAOI,MAAMuC,EAAQ1V,KAAKoH,SAAS5E,cAAcmT,QAAQ,qDAClD,IAAKD,EAED,OAEJ,MAAME,EAAU5V,KAAK8J,aAAalL,GAC9BoB,KAAK6L,kBACLC,MAAuB9L,KAAK6L,cAAe,YAAa+J,IAAO,EAEnE9D,MAAoB4D,EAAO,YAAaE,GACxC5V,KAAK6L,cAAgB6J,CACzB,CAEAxK,kBACQlL,KAAK6L,iBAELC,QAAuB9L,KAAK6L,cAAe,YAD3B7L,KAAK8J,aAAalL,IAElCoB,KAAK6L,cAAgB,KAE7B,CACArH,iBAAW,SAAAC,GAAA,WAAAA,GAAwFgC,EAAsB,EACzHjC,iBAp5ByFlG,MAAE,CAAAoG,KAo5BJ+B,EAAsB9B,UAAA,mEAAAS,UAAA,mCAAAyQ,SAAA,EAAAC,aAAA,SAAA3X,EAAAC,GAAA,EAAAD,GAp5BpBG,MAAE,4BAo5BJF,EAAA4R,cAAc,EAp5BZ1R,CAo5BoB,yBAAtBF,EAAAyL,YAAY,EAp5BVvL,CAo5BoB,iBAAAC,GAAA,OAAtBH,EAAAkR,aAAA/Q,EAAoB,EAp5BlBD,CAo5BoB,mBAAAC,GAAA,OAAtBH,EAAAgQ,eAAA7P,EAAsB,EAp5BpBD,CAo5BoB,0BAAtBF,EAAA+R,cAAc,GAAQ,EAAAhS,GAp5BpBG,MAAE,eAAAF,EAAA6L,sBAAF3L,CAAE,OAAAF,EAAA8L,qBAo5BmB,KAAO,WAp5B5B5L,CAo5BsC,oBAAAF,EAAA8L,qBAAjB,KAAO,OAp5B5B5L,CAo5BkC,wBAAAF,EAAAuL,WAAAvL,EAAA0O,aAAA1O,EAAA0O,aAAAlO,GAAY,KAp5B9CN,CAo5BkD,gBAAAF,EAAA8L,qBAA7B,KAAO9L,EAAAuL,UAAAoM,WAp5B5BzX,CAo5BgD,gBAAAF,EAAA8L,uBAAA9L,EAAAuL,WAAP,MAAAvL,EAAA0L,aAAJ,KAAI1L,EAAA0L,aAAAlL,GAp5BzCN,CAo5ByC,gBAAAF,EAAA8L,qBAApB,KAAO,UAAS,EAAA7E,OAAA,CAAAyE,aAAA,qCAAAC,SAAA,yCAAAC,YAAA,+CAAAC,sBAAA,2CAAAC,qBAAA,oDAA4X5E,QAAgBE,SAAA,2BAAAC,SAAA,CAp5BjbnH,MAo5B0pC,CAACgI,IAp5B3pChI,eAq5B5F,OApyBKmI,CAAsB,KA80BtBuP,EAAqB,MAA3B,MAAMA,EACFxR,iBAAW,SAAAC,GAAA,WAAAA,GAAwFuR,EAAqB,EACxHxR,iBAj8ByFlG,KAAE,CAAAoG,KAi8BSsR,IAWpGxR,iBA58ByFlG,MAAE,CAAA2X,UA48B2C,CAACjP,GAAkDkP,QAAA,CAAYC,KAC7LC,KACAC,KAAiBC,KACjBF,KACAC,QACX,OAlBKL,CAAqB","names":["_c0","_c1","MatAutocomplete_ng_template_0_Template","rf","ctx","_r1","i0","$event","ctx_r1","_animationDone","next","formFieldId_r3","id","_classList","showPanel","_color","isOpen","ariaLabel","_getPanelAriaLabelledby","panelAnimation","trigger","state","style","opacity","transform","transition","group","animate","MatAutocompleteSelectedEvent","source","option","constructor","this","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","autoSelectActiveOption","hideSingleSelectionIndicator","requireSelection","MatAutocomplete","_changeDetectorRef","inject","ChangeDetectorRef","_elementRef","ElementRef","_defaults","_activeOptionChanges","Subscription","EMPTY","EventEmitter","_keyManager","_isOpen","_latestOpeningTrigger","_setColor","value","markForCheck","template","panel","options","optionGroups","ariaLabelledby","displayWith","panelWidth","disableRipple","optionSelected","opened","closed","optionActivated","classList","nativeElement","className","_hideSingleSelectionIndicator","_syncParentProperties","_IdGenerator","getId","inertGroups","platform","Platform","SAFARI","ngAfterContentInit","ActiveDescendantKeyManager","withWrap","skipPredicate","_skipPredicate","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","destroy","unsubscribe","complete","_setScrollTop","scrollTop","_getScrollTop","length","_emitSelectEvent","event","labelId","static","__ngFactoryType__","type","selectors","contentQueries","dirIndex","MatOption","MAT_OPTGROUP","_t","viewQuery","TemplateRef","first","hostAttrs","inputs","booleanAttribute","outputs","exportAs","features","provide","MAT_OPTION_PARENT_COMPONENT","useExisting","ngContentSelectors","decls","vars","consts","styles","encapsulation","data","animation","changeDetection","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","multi","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","overlay","Overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","_element","_overlay","_viewContainerRef","ViewContainerRef","_zone","NgZone","_dir","Directionality","optional","_formField","MAT_FORM_FIELD","host","_document","DOCUMENT","_viewportRuler","ViewportRuler","_overlayRef","_portal","_componentDestroyed","_scrollStrategy","_keydownSubscription","_outsideClickSubscription","_previousValue","_valueOnAttach","_valueOnLastKeydown","_positionStrategy","_manuallyFloatingLabel","_closingActionsSubscription","_viewportSubscription","_breakpointObserver","BreakpointObserver","_handsetLandscapeSubscription","_canOpenOnNextFocus","_valueBeforeAutoSelection","_pendingAutoselectedOption","_closeKeyEventStream","Subject","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","autocomplete","position","connectedTo","autocompleteAttribute","autocompleteDisabled","_initialized","_injector","Injector","_aboveClass","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","changes","_setStrategyPositions","updatePosition","removeEventListener","_destroyPanel","_clearFromModal","_overlayAttached","openPanel","_openPanelInternal","closePanel","_resetLabel","run","hasAttached","detach","_updatePanelState","detectChanges","_trackedModal","removeAriaReferencedId","panelClosingActions","merge","optionSelections","tabOut","pipe","filter","_getOutsideClickStream","detachments","of","map","MatOptionSelectionChange","defer","startWith","switchMap","onSelectionChange","activeOption","activeItem","fromEvent","clickTarget","_getEventTarget","formField","getConnectedOverlayOrigin","customOrigin","elementRef","contains","overlayElement","writeValue","Promise","resolve","then","_assignOptionValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","hasModifier","hasModifierKey","ESCAPE","preventDefault","ENTER","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","UP_ARROW","DOWN_ARROW","TAB","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","selectedOption","find","selected","_getDisplayValue","deselect","_clearPreviousSelectedOption","valueOnAttach","_handleFocus","_attachOverlay","_floatLabel","_handleClick","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","initialRender","Observable","subscriber","afterNextRender","injector","optionChanges","tap","reapplyLastPosition","delay","wasOpen","_emitOpened","take","_setValueAndClose","dispose","toDisplay","_updateNativeInputValue","_control","toSelect","focus","skip","emitEvent","forEach","addAriaReferencedId","overlayRef","setOrigin","_getConnectedElement","updateSize","width","_getPanelWidth","TemplatePortal","getLabelId","create","_getOverlayConfig","observe","Breakpoints","HandsetLandscape","result","matches","withFlexibleDimensions","withGrowAfterOpen","withViewportMargin","attach","color","_applyModalPanelOwnership","_handlePanelKeydown","stopPropagation","keydownEvents","outsidePointerEvents","OverlayConfig","positionStrategy","_getOverlayPosition","scrollStrategy","direction","undefined","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withPush","belowPositions","originX","originY","overlayX","overlayY","abovePositions","positions","withPositions","_getHostWidth","getBoundingClientRect","firstEnabledOptionIndex","get","setActiveItem","element","readOnly","defaultView","labelCount","_countGroupLabelsBeforeOption","_getHostElement","newScrollPosition","_getOptionScrollPosition","offsetTop","offsetHeight","modal","closest","panelId","hostVars","hostBindings","toString","MatAutocompleteModule","providers","imports","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/autocomplete.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, ElementRef, EventEmitter, booleanAttribute, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, ContentChildren, Input, Output, Directive, forwardRef, ViewContainerRef, NgZone, Injector, afterNextRender, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nexport { MatOptgroup, MatOption } from '@angular/material/core';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { _IdGenerator, ActiveDescendantKeyManager, removeAriaReferencedId, addAriaReferencedId } from '@angular/cdk/a11y';\nimport { Platform, _getEventTarget } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, group, animate } from '@angular/animations';\nimport { Subscription, Subject, merge, of, defer, fromEvent, Observable } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { hasModifierKey, ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { filter, map, startWith, switchMap, tap, delay, take } from 'rxjs/operators';\n\n// Animation values come from\n// TODO(mmalerba): Ideally find a way to import the values from MDC's code.\nconst panelAnimation = trigger('panelAnimation', [\n    state('void, hidden', style({\n        opacity: 0,\n        transform: 'scaleY(0.8)',\n    })),\n    transition(':enter, hidden => visible', [\n        group([\n            animate('0.03s linear', style({ opacity: 1 })),\n            animate('0.12s cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scaleY(1)' })),\n        ]),\n    ]),\n    transition(':leave, visible => hidden', [animate('0.075s linear', style({ opacity: 0 }))]),\n]);\n\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    source;\n    option;\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        autoActiveFirstOption: false,\n        autoSelectActiveOption: false,\n        hideSingleSelectionIndicator: false,\n        requireSelection: false,\n    };\n}\n/** Autocomplete component. */\nclass MatAutocomplete {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _defaults = inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS);\n    _activeOptionChanges = Subscription.EMPTY;\n    /** Emits when the panel animation is done. Null if the panel doesn't animate. */\n    _animationDone = new EventEmitter();\n    /** Manages active item in option list based on key events. */\n    _keyManager;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel = false;\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    _isOpen = false;\n    /** Latest trigger that opened the autocomplete. */\n    _latestOpeningTrigger;\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n        this._color = value;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** @docs-private theme color of the panel */\n    _color;\n    // The @ViewChild query for TemplateRef here needs to be static because some code paths\n    // lead to the overlay being created before change detection has finished for this component.\n    // Notably, another component may trigger `focus` on the autocomplete-trigger.\n    /** @docs-private */\n    template;\n    /** Element for the panel containing the autocomplete options. */\n    panel;\n    /** Reference to all options within the autocomplete. */\n    options;\n    /** Reference to all option groups within the autocomplete. */\n    optionGroups;\n    /** Aria label of the autocomplete. */\n    ariaLabel;\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    displayWith = null;\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    autoActiveFirstOption;\n    /** Whether the active option should be selected as the user is navigating. */\n    autoSelectActiveOption;\n    /**\n     * Whether the user is required to make a selection when they're interacting with the\n     * autocomplete. If the user moves away from the autocomplete without selecting an option from\n     * the list, the value will be reset. If the user opens the panel and closes it without\n     * interacting or selecting a value, the initial value will be kept.\n     */\n    requireSelection;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    panelWidth;\n    /** Whether ripples are disabled within the autocomplete panel. */\n    disableRipple;\n    /** Event that is emitted whenever an option from the list is selected. */\n    optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n    opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n    closed = new EventEmitter();\n    /** Emits whenever an option is activated. */\n    optionActivated = new EventEmitter();\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        this._classList = value;\n        this._elementRef.nativeElement.className = '';\n    }\n    _classList;\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    _hideSingleSelectionIndicator;\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id = inject(_IdGenerator).getId('mat-autocomplete-');\n    /**\n     * Tells any descendant `mat-optgroup` to use the inert a11y pattern.\n     * @docs-private\n     */\n    inertGroups;\n    constructor() {\n        const platform = inject(Platform);\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = platform?.SAFARI || false;\n        this.autoActiveFirstOption = !!this._defaults.autoActiveFirstOption;\n        this.autoSelectActiveOption = !!this._defaults.autoSelectActiveOption;\n        this.requireSelection = !!this._defaults.requireSelection;\n        this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withWrap()\n            .skipPredicate(this._skipPredicate);\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._activeOptionChanges.unsubscribe();\n        this._animationDone.complete();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate() {\n        return false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatAutocomplete, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatAutocomplete, isStandalone: true, selector: \"mat-autocomplete\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: [\"autoActiveFirstOption\", \"autoActiveFirstOption\", booleanAttribute], autoSelectActiveOption: [\"autoSelectActiveOption\", \"autoSelectActiveOption\", booleanAttribute], requireSelection: [\"requireSelection\", \"requireSelection\", booleanAttribute], panelWidth: \"panelWidth\", disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], classList: [\"class\", \"classList\"], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, host: { classAttribute: \"mat-mdc-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], exportAs: [\"matAutocomplete\"], ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [class]=\\\"_classList\\\"\\n    [class.mat-mdc-autocomplete-visible]=\\\"showPanel\\\"\\n    [class.mat-mdc-autocomplete-hidden]=\\\"!showPanel\\\"\\n    [class.mat-primary]=\\\"_color === 'primary'\\\"\\n    [class.mat-accent]=\\\"_color === 'accent'\\\"\\n    [class.mat-warn]=\\\"_color === 'warn'\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;box-sizing:border-box;position:static;border-radius:var(--mat-autocomplete-container-shape, var(--mat-sys-corner-extra-small));box-shadow:var(--mat-autocomplete-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));background-color:var(--mat-autocomplete-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-autocomplete-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden;pointer-events:none}mat-autocomplete{display:none}\"], animations: [panelAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', host: {\n                        'class': 'mat-mdc-autocomplete',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], animations: [panelAnimation], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [class]=\\\"_classList\\\"\\n    [class.mat-mdc-autocomplete-visible]=\\\"showPanel\\\"\\n    [class.mat-mdc-autocomplete-hidden]=\\\"!showPanel\\\"\\n    [class.mat-primary]=\\\"_color === 'primary'\\\"\\n    [class.mat-accent]=\\\"_color === 'accent'\\\"\\n    [class.mat-warn]=\\\"_color === 'warn'\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;box-sizing:border-box;position:static;border-radius:var(--mat-autocomplete-container-shape, var(--mat-sys-corner-extra-small));box-shadow:var(--mat-autocomplete-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));background-color:var(--mat-autocomplete-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-autocomplete-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden;pointer-events:none}mat-autocomplete{display:none}\"] }]\n        }], ctorParameters: () => [], propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], autoSelectActiveOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], requireSelection: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], panelWidth: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    elementRef = inject(ElementRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatAutocompleteOrigin, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatAutocompleteOrigin, isStandalone: true, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass MatAutocompleteTrigger {\n    _element = inject(ElementRef);\n    _overlay = inject(Overlay);\n    _viewContainerRef = inject(ViewContainerRef);\n    _zone = inject(NgZone);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dir = inject(Directionality, { optional: true });\n    _formField = inject(MAT_FORM_FIELD, { optional: true, host: true });\n    _document = inject(DOCUMENT);\n    _viewportRuler = inject(ViewportRuler);\n    _defaults = inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, { optional: true });\n    _overlayRef;\n    _portal;\n    _componentDestroyed = false;\n    _scrollStrategy = inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY);\n    _keydownSubscription;\n    _outsideClickSubscription;\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    _previousValue;\n    /** Value of the input element when the panel was attached (even if there are no options). */\n    _valueOnAttach;\n    /** Value on the previous keydown event. */\n    _valueOnLastKeydown;\n    /** Strategy that is used to position the panel. */\n    _positionStrategy;\n    /** Whether or not the label state is being overridden. */\n    _manuallyFloatingLabel = false;\n    /** The subscription for closing actions (some are bound to document). */\n    _closingActionsSubscription;\n    /** Subscription to viewport size changes. */\n    _viewportSubscription = Subscription.EMPTY;\n    /** Implements BreakpointObserver to be used to detect handset landscape */\n    _breakpointObserver = inject(BreakpointObserver);\n    _handsetLandscapeSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    _canOpenOnNextFocus = true;\n    /** Value inside the input before we auto-selected an option. */\n    _valueBeforeAutoSelection;\n    /**\n     * Current option that we have auto-selected as the user is navigating,\n     * but which hasn't been propagated to the model value yet.\n     */\n    _pendingAutoselectedOption;\n    /** Stream of keyboard events that can close the panel. */\n    _closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    _windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this._canOpenOnNextFocus =\n            this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n    _onChange = () => { };\n    /** `View -> model callback called when autocomplete has been touched` */\n    _onTouched = () => { };\n    /** The autocomplete panel to be attached to this trigger. */\n    autocomplete;\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n    position = 'auto';\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    connectedTo;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    autocompleteAttribute = 'off';\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    autocompleteDisabled;\n    _initialized = new Subject();\n    _injector = inject(Injector);\n    constructor() { }\n    /** Class to apply to the panel when it's above the input. */\n    _aboveClass = 'mat-mdc-autocomplete-panel-above';\n    ngAfterViewInit() {\n        this._initialized.next();\n        this._initialized.complete();\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._handsetLandscapeSubscription.unsubscribe();\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n        this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    _overlayAttached = false;\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._openPanelInternal();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            // `afterNextRender` always runs outside of the Angular zone, so all the subscriptions from\n            // `_subscribeToClosingActions()` are also outside of the Angular zone.\n            // We should manually run in Angular zone to update UI after panel closing.\n            this._zone.run(() => {\n                this.autocomplete.closed.emit();\n            });\n        }\n        // Only reset if this trigger is the latest one that opened the\n        // autocomplete since another may have taken it over.\n        if (this.autocomplete._latestOpeningTrigger === this) {\n            this.autocomplete._isOpen = false;\n            this.autocomplete._latestOpeningTrigger = null;\n        }\n        this._overlayAttached = false;\n        this._pendingAutoselectedOption = null;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        this._updatePanelState();\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n        // Remove aria-owns attribute when the autocomplete is no longer visible.\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', this.autocomplete.id);\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** Stream of changes to the selection state of the autocomplete options. */\n    optionSelections = defer(() => {\n        const options = this.autocomplete ? this.autocomplete.options : null;\n        if (options) {\n            return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n        }\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this._initialized.pipe(switchMap(() => this.optionSelections));\n    });\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField\n                ? this._formField.getConnectedOverlayOrigin().nativeElement\n                : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return (this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                // Normally focus moves inside `mousedown` so this condition will almost always be\n                // true. Its main purpose is to handle the case where the input is focused from an\n                // outside click which propagates up to the `body` listener within the same sequence\n                // and causes the panel to close immediately (see #3106).\n                this._document.activeElement !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                !!this._overlayRef &&\n                !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        this._valueOnLastKeydown = this._element.nativeElement.value;\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this._openPanelInternal(this._valueOnLastKeydown);\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n                if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n                    if (!this._pendingAutoselectedOption) {\n                        this._valueBeforeAutoSelection = this._valueOnLastKeydown;\n                    }\n                    this._pendingAutoselectedOption = this.activeOption;\n                    this._assignOptionValue(this.activeOption.value);\n                }\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._pendingAutoselectedOption = null;\n            // If selection is required we don't write to the CVA while the user is typing.\n            // At the end of the selection either the user will have picked something\n            // or we'll reset the value back to null.\n            if (!this.autocomplete || !this.autocomplete.requireSelection) {\n                this._onChange(value);\n            }\n            if (!value) {\n                this._clearPreviousSelectedOption(null, false);\n            }\n            else if (this.panelOpen && !this.autocomplete.requireSelection) {\n                // Note that we don't reset this when `requireSelection` is enabled,\n                // because the option will be reset when the panel is closed.\n                const selectedOption = this.autocomplete.options?.find(option => option.selected);\n                if (selectedOption) {\n                    const display = this._getDisplayValue(selectedOption.value);\n                    if (value !== display) {\n                        selectedOption.deselect(false);\n                    }\n                }\n            }\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                // When the `input` event fires, the input's value will have already changed. This means\n                // that if we take the `this._element.nativeElement.value` directly, it'll be one keystroke\n                // behind. This can be a problem when the user selects a value, changes a character while\n                // the input still has focus and then clicks away (see #28432). To work around it, we\n                // capture the value in `keydown` so we can use it here.\n                const valueOnAttach = this._valueOnLastKeydown ?? this._element.nativeElement.value;\n                this._valueOnLastKeydown = null;\n                this._openPanelInternal(valueOnAttach);\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay(this._previousValue);\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this._openPanelInternal();\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            if (this._formField) {\n                this._formField.floatLabel = 'auto';\n            }\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const initialRender = new Observable(subscriber => {\n            afterNextRender(() => {\n                subscriber.next();\n            }, { injector: this._injector });\n        });\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the options are initially rendered, and when the option list changes...\n        return (merge(initialRender, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => this._zone.run(() => {\n            // `afterNextRender` always runs outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this._updatePanelState();\n            this._changeDetectorRef.detectChanges();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n            if (wasOpen !== this.panelOpen) {\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n                // `closed` event, because we may not have emitted it. This can happen\n                // - if the users opens the panel and there are no options, but the\n                //   options come in slightly later or as a result of the value changing,\n                // - if the panel is closed after the user entered a string that did not match any\n                //   of the available options,\n                // - if a valid string is entered after an invalid one.\n                if (this.panelOpen) {\n                    this._emitOpened();\n                }\n                else {\n                    this.autocomplete.closed.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /**\n     * Emits the opened event once it's known that the panel will be shown and stores\n     * the state of the trigger right before the opening sequence was finished.\n     */\n    _emitOpened() {\n        this.autocomplete.opened.emit();\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /** Given a value, returns the string that should be shown within the input. */\n    _getDisplayValue(value) {\n        const autocomplete = this.autocomplete;\n        return autocomplete && autocomplete.displayWith ? autocomplete.displayWith(value) : value;\n    }\n    _assignOptionValue(value) {\n        const toDisplay = this._getDisplayValue(value);\n        if (value == null) {\n            this._clearPreviousSelectedOption(null, false);\n        }\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = value;\n        }\n        else {\n            this._element.nativeElement.value = value;\n        }\n        this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const panel = this.autocomplete;\n        const toSelect = event ? event.source : this._pendingAutoselectedOption;\n        if (toSelect) {\n            this._clearPreviousSelectedOption(toSelect);\n            this._assignOptionValue(toSelect.value);\n            // TODO(crisbeto): this should wait until the animation is done, otherwise the value\n            // gets reset while the panel is still animating which looks glitchy. It'll likely break\n            // some tests to change it at this point.\n            this._onChange(toSelect.value);\n            panel._emitSelectEvent(toSelect);\n            this._element.nativeElement.focus();\n        }\n        else if (panel.requireSelection &&\n            this._element.nativeElement.value !== this._valueOnAttach) {\n            this._clearPreviousSelectedOption(null);\n            this._assignOptionValue(null);\n            // Wait for the animation to finish before clearing the form control value, otherwise\n            // the options might change while the animation is running which looks glitchy.\n            if (panel._animationDone) {\n                panel._animationDone.pipe(take(1)).subscribe(() => this._onChange(null));\n            }\n            else {\n                this._onChange(null);\n            }\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip, emitEvent) {\n        // Null checks are necessary here, because the autocomplete\n        // or its options may not have been assigned yet.\n        this.autocomplete?.options?.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect(emitEvent);\n            }\n        });\n    }\n    _openPanelInternal(valueOnAttach = this._element.nativeElement.value) {\n        this._attachOverlay(valueOnAttach);\n        this._floatLabel();\n        // Add aria-owns attribute when the autocomplete becomes visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            addAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    _attachOverlay(valueOnAttach) {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: this._formField?.getLabelId(),\n            });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n            // Subscribe to the breakpoint events stream to detect when screen is in\n            // handsetLandscape.\n            this._handsetLandscapeSubscription = this._breakpointObserver\n                .observe(Breakpoints.HandsetLandscape)\n                .subscribe(result => {\n                const isHandsetLandscape = result.matches;\n                // Check if result.matches Breakpoints.HandsetLandscape. Apply HandsetLandscape\n                // settings to prevent overlay cutoff in that breakpoint. Fixes b/284148377\n                if (isHandsetLandscape) {\n                    this._positionStrategy\n                        .withFlexibleDimensions(true)\n                        .withGrowAfterOpen(true)\n                        .withViewportMargin(8);\n                }\n                else {\n                    this._positionStrategy\n                        .withFlexibleDimensions(false)\n                        .withGrowAfterOpen(false)\n                        .withViewportMargin(0);\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._valueOnAttach = valueOnAttach;\n            this._valueOnLastKeydown = null;\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        this.autocomplete._latestOpeningTrigger = this;\n        this.autocomplete._setColor(this._formField?.color);\n        this._updatePanelState();\n        this._applyModalPanelOwnership();\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this._emitOpened();\n        }\n    }\n    /** Handles keyboard events coming from the overlay panel. */\n    _handlePanelKeydown = (event) => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n            (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n            // If the user had typed something in before we autoselected an option, and they decided\n            // to cancel the selection, restore the input value to the one they had typed in.\n            if (this._pendingAutoselectedOption) {\n                this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n                this._pendingAutoselectedOption = null;\n            }\n            this._closeKeyEventStream.next();\n            this._resetActiveItem();\n            // We need to stop propagation, otherwise the event will eventually\n            // reach the input itself and cause the overlay to be reopened.\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    };\n    /** Updates the panel's visibility state and any trigger state tied to id. */\n    _updatePanelState() {\n        this.autocomplete._setVisibility();\n        // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n        // because the act of subscribing will prevent events from reaching other overlays and\n        // we don't want to block the events if there are no options.\n        if (this.panelOpen) {\n            const overlayRef = this._overlayRef;\n            if (!this._keydownSubscription) {\n                // Use the `keydownEvents` in order to take advantage of\n                // the overlay event targeting provided by the CDK overlay.\n                this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n            }\n            if (!this._outsideClickSubscription) {\n                // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n                // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n                // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n                this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n            }\n        }\n        else {\n            this._keydownSubscription?.unsubscribe();\n            this._outsideClickSubscription?.unsubscribe();\n            this._keydownSubscription = this._outsideClickSubscription = null;\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir ?? undefined,\n            panelClass: this._defaults?.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        // Set default Overlay Position\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n            // because it activates the first option that passes the skip predicate, rather than the\n            // first *enabled* option.\n            let firstEnabledOptionIndex = -1;\n            for (let index = 0; index < autocomplete.options.length; index++) {\n                const option = autocomplete.options.get(index);\n                if (!option.disabled) {\n                    firstEnabledOptionIndex = index;\n                    break;\n                }\n            }\n            autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this.autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document?.defaultView || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n    _trackedModal = null;\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = this.autocomplete.id;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n            this._trackedModal = null;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatAutocompleteTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatAutocompleteTrigger, isStandalone: true, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\", booleanAttribute] }, host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-controls\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-mdc-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-mdc-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                }]\n        }], ctorParameters: () => [], propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: [{ alias: 'matAutocompleteDisabled', transform: booleanAttribute }]\n            }] } });\n\nclass MatAutocompleteModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatAutocompleteModule, imports: [OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocomplete,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin], exports: [CdkScrollableModule,\n            MatAutocomplete,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule,\n            MatOptionModule,\n            MatCommonModule, CdkScrollableModule,\n            MatOptionModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        OverlayModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocomplete,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatAutocomplete,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n"],"x_google_ignoreList":[0]}