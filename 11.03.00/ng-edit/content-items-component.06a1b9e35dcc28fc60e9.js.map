{"version":3,"sources":["./src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.ts","./src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.html","./src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.html","./src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.ts","./src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.ts","./src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.html","./src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.html","./src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.ts","./src/app/content-items/content-items.component.ts","./src/app/content-items/content-items.helpers.ts","./src/app/content-items/content-items.component.html"],"names":["published","metadata","agInit","params","this","isFilterActive","doesFilterPass","publishedPassed","metadataPassed","value","valueGetter","node","toString","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","PubMetaFilterComponent","item","data","Metadata","metadataTooltip","TargetType","KeyNumber","KeyString","KeyGuid","refresh","ContentItemsStatusComponent","clone","onClone","export","onExport","delete","onDelete","ContentItemsActionsComponent","Array","isArray","encodedValue","htmlEncode","join","colDef","allowMultiValue","entities","length","text","replace","ContentItemsEntityComponent","dialogRef","contentTypesService","router","route","contentItemsService","entitiesService","contentExportService","snackBar","modules","gridOptions","frameworkComponents","pubMetaFilterComponent","booleanFilterComponent","idFieldComponent","contentItemsStatusComponent","contentItemsActionsComponent","contentItemsEntityComponent","subscription","Subscription","hasChild","snapshot","firstChild","contentTypeStaticName","paramMap","get","ngOnInit","fetchContentType","fetchItems","refreshOnChildClosed","getColumns","subscribe","columns","columnDefs","buildColumnDefs","gridApi","setColumnDefs","filterModel","urlFilters","parsed","charAt","atob","JSON","parse","error","console","IsPublished","IsMetadata","Status","filter","filterKeys","Object","keys","key","type","filterTo","buildFilterModel","sessionStorage","getItem","setFilterModel","ngOnDestroy","unsubscribe","onGridReady","api","retrieveContentType","contentType","getAll","items","editItem","form","ContentTypeName","EntityId","Id","navigate","stringify","relativeTo","exportContent","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","importItem","addMetadata","confirm","metadataKeys","validTargetTypes","map","metaKey","targetType","parseInt","prompt","target","entity","alert","includes","keyTypeKeys","keyTypes","validKeyTypes","keyTypeKey","keyType","number","For","Target","guid","Guid","Number","string","String","debugFilter","warn","closeDialog","close","add","events","pipe","event","hadChild","headerName","field","width","headerClass","cellClass","cellRenderer","sortable","idValueGetter","valueGetterStatus","flex","minWidth","onCellClicked","bind","cellRendererParams","headerTooltip","valueGetterUsage","column","StaticName","Type","Entity","AllowMultiValue","e","valueGetterEntityField","useTimePicker","DateTime","UseTimePicker","valueGetterDateTime","valueGetterBoolean","DuplicateEntity","exportEntity","_Title","_RepositoryId","open","next","duration","err","dismiss","ExceptionMessage","_Used","_Uses","rawValue","Title","substring","ContentItemsComponent"],"mappings":"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","file":"content-items-component.06a1b9e35dcc28fc60e9.js","sourcesContent":["import { Component } from '@angular/core';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\n\r\nimport { PubMetaFilterModel, PubMeta } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss']\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    const value: PubMeta = this.params.valueGetter(params.node);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n    };\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div class=\"icon-container\">\r\n  <mat-icon *ngIf=\"value.published\" matTooltip=\"Published\">visibility</mat-icon>\r\n  <mat-icon *ngIf=\"!value.published\" matTooltip=\"Not published\">visibility_off</mat-icon>\r\n  <ng-container *ngIf=\"value.metadata\">\r\n    <mat-icon class=\"meta-icon\" [matTooltip]=\"metadataTooltip\">local_offer</mat-icon>\r\n  </ng-container>\r\n</div>\r\n","import { Component } from '@angular/core';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/all-modules';\r\n\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItem } from '../../models/content-item.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss']\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  metadataTooltip: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    // spm TODO: something about data.DraftEntity and data.PublishedEntity is missing. Search in eav-ui project\r\n    this.value = params.value;\r\n    const item: ContentItem = params.data;\r\n    if (item.Metadata) {\r\n      this.metadataTooltip = 'Metadata'\r\n        + `\\nType: ${item.Metadata.TargetType}`\r\n        + (item.Metadata.KeyNumber ? `\\nNumber: ${item.Metadata.KeyNumber}` : '')\r\n        + (item.Metadata.KeyString ? `\\nString: ${item.Metadata.KeyString}` : '')\r\n        + (item.Metadata.KeyGuid ? `\\nGuid: ${item.Metadata.KeyGuid}` : '');\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\n\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\nimport { ContentItem } from '../../models/content-item.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss']\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  params: ContentItemsActionsParams;\r\n  item: ContentItem;\r\n\r\n  agInit(params: ContentItemsActionsParams) {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone() {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export() {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  delete() {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Delete\" (click)=\"delete()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n</div>\r\n","<div [matTooltip]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { Component } from '@angular/core';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/all-modules';\r\n\r\nimport { ExtendedColDef } from '../../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss']\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  params: ICellRendererParams;\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.params = params;\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: http://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Router, ActivatedRoute, NavigationEnd } from '@angular/router';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { ColDef, AllCommunityModules, GridOptions, GridReadyEvent, CellClickedEvent, GridApi, ValueGetterParams } from '@ag-grid-community/all-modules';\r\n\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { EntitiesService } from './services/entities.service';\r\nimport { ContentExportService } from '../app-administration/services/content-export.service';\r\nimport { eavConstants, EavMetadataKey, EavKeyTypeKey } from '../shared/constants/eav.constants';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './ag-grid-components/content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { PubMeta } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { angularConsoleLog } from '../shared/helpers/angular-console-log.helper';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss']\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n  contentType: ContentType;\r\n  items: ContentItem[];\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      pubMetaFilterComponent: PubMetaFilterComponent,\r\n      booleanFilterComponent: BooleanFilterComponent,\r\n      idFieldComponent: IdFieldComponent,\r\n      contentItemsStatusComponent: ContentItemsStatusComponent,\r\n      contentItemsActionsComponent: ContentItemsActionsComponent,\r\n      contentItemsEntityComponent: ContentItemsEntityComponent,\r\n    },\r\n  };\r\n\r\n  private gridApi: GridApi;\r\n  private contentTypeStaticName: string;\r\n  private subscription = new Subscription();\r\n  private hasChild: boolean;\r\n  private columnDefs: ColDef[];\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.hasChild = !!this.route.snapshot.firstChild;\r\n    this.contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.refreshOnChildClosed();\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      this.columnDefs = this.buildColumnDefs(columns);\r\n      this.gridApi?.setColumnDefs(this.columnDefs);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters));\r\n      if (filterModel) {\r\n        angularConsoleLog('Will try to apply filter:', filterModel);\r\n        this.gridApi.setFilterModel(filterModel);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n    this.subscription = null;\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n    if (this.columnDefs) {\r\n      this.gridApi.setColumnDefs(this.columnDefs);\r\n    }\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType = contentType;\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items = items;\r\n    });\r\n  }\r\n\r\n  editItem(params: CellClickedEvent) {\r\n    let form: EditForm;\r\n    if (params === null) {\r\n      form = {\r\n        items: [{ ContentTypeName: this.contentTypeStaticName }],\r\n      };\r\n    } else {\r\n      const item: ContentItem = params.data;\r\n      form = {\r\n        items: [{ EntityId: item.Id.toString() }],\r\n      };\r\n    }\r\n    this.router.navigate([`edit/${JSON.stringify(form)}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi.forEachNodeAfterFilterAndSort(rowNode => {\r\n        ids.push((rowNode.data as ContentItem).Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  importItem() {\r\n    this.router.navigate(['import'], { relativeTo: this.route });\r\n  }\r\n\r\n  addMetadata() {\r\n    if (!confirm(\r\n      'This is a special operation to add an item which is metadata for another item.'\r\n      + ' If you didn\\'t understand that, this is not for you :). Continue?'\r\n    )) { return; }\r\n\r\n    const metadataKeys = Object.keys(eavConstants.metadata) as EavMetadataKey[];\r\n    const validTargetTypes = metadataKeys.map(metaKey => eavConstants.metadata[metaKey].type);\r\n    const targetType = parseInt(prompt(\r\n      'What kind of assignment do you want?'\r\n      + metadataKeys.map(metaKey => `\\n${eavConstants.metadata[metaKey].type}: ${eavConstants.metadata[metaKey].target}`),\r\n      eavConstants.metadata.entity.type.toString()\r\n    ), 10);\r\n    if (!targetType) { return alert('No target type entered. Cancelled'); }\r\n    if (!validTargetTypes.includes(targetType)) { return alert('Invalid target type. Cancelled'); }\r\n\r\n    const key = prompt('What key do you want?');\r\n    if (!key) { return alert('No key entered. Cancelled'); }\r\n\r\n    const keyTypeKeys = Object.keys(eavConstants.keyTypes) as EavKeyTypeKey[];\r\n    const validKeyTypes = keyTypeKeys.map(keyTypeKey => eavConstants.keyTypes[keyTypeKey]);\r\n    const keyType = prompt(\r\n      'What key type do you want?'\r\n      + keyTypeKeys.map(keyTypeKey => `\\n${eavConstants.keyTypes[keyTypeKey]}`),\r\n      eavConstants.keyTypes.number\r\n    );\r\n    if (!keyType) { return alert('No key type entered. Cancelled'); }\r\n    if (!validKeyTypes.includes(keyType)) { return alert('Invalid key type. Cancelled'); }\r\n    if (keyType === eavConstants.keyTypes.number && !parseInt(key, 10)) {\r\n      return alert('Key type number and key don\\'t match. Cancelled');\r\n    }\r\n\r\n    let target: string;\r\n    for (const metaKey of metadataKeys) {\r\n      if (targetType !== eavConstants.metadata[metaKey].type) { continue; }\r\n      target = eavConstants.metadata[metaKey].target;\r\n    }\r\n\r\n    const form: EditForm = {\r\n      items: [{\r\n        ContentTypeName: this.contentTypeStaticName,\r\n        For: {\r\n          Target: target,\r\n          ...(keyType === eavConstants.keyTypes.guid && { Guid: key }),\r\n          ...(keyType === eavConstants.keyTypes.number && { Number: parseInt(key, 10) }),\r\n          ...(keyType === eavConstants.keyTypes.string && { String: key }),\r\n        },\r\n      }],\r\n    };\r\n    this.router.navigate([`edit/${JSON.stringify(form)}`], { relativeTo: this.route });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi.getFilterModel());\r\n    alert('Check console for filter information');\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe((event: NavigationEnd) => {\r\n        const hadChild = this.hasChild;\r\n        this.hasChild = !!this.route.snapshot.firstChild;\r\n        if (!this.hasChild && hadChild) {\r\n          this.fetchItems();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline',\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agTextColumnFilter', valueGetter: this.idValueGetter,\r\n      },\r\n      {\r\n        headerName: 'Status', field: 'Status', width: 80, headerClass: 'dense', cellClass: 'no-outline',\r\n        filter: 'pubMetaFilterComponent', cellRenderer: 'contentItemsStatusComponent', valueGetter: this.valueGetterStatus,\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)', field: '_Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: this.editItem.bind(this),\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding', width: 120, cellRenderer: 'contentItemsActionsComponent',\r\n        cellRendererParams: {\r\n          onClone: this.clone.bind(this),\r\n          onExport: this.export.bind(this),\r\n          onDelete: this.delete.bind(this),\r\n        } as ContentItemsActionsParams,\r\n      },\r\n      {\r\n        headerName: 'Stats', headerTooltip: 'Used by others / uses others',\r\n        field: '_Used', width: 70, headerClass: 'dense', cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter', valueGetter: this.valueGetterUsage,\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName, field: column.StaticName, flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case 'Entity':\r\n          try {\r\n            colDef.allowMultiValue = column.Metadata.Entity.AllowMultiValue;\r\n          } catch (e) {\r\n            colDef.allowMultiValue = true;\r\n          }\r\n          colDef.cellRenderer = 'contentItemsEntityComponent';\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case 'DateTime':\r\n          try {\r\n            colDef.useTimePicker = column.Metadata.DateTime.UseTimePicker;\r\n          } catch (e) {\r\n            colDef.useTimePicker = false;\r\n          }\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case 'Boolean':\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = 'booleanFilterComponent';\r\n          break;\r\n        case 'Number':\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    this.router.navigate([`edit/${JSON.stringify(form)}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private idValueGetter(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    return `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`;\r\n  }\r\n\r\n  private valueGetterStatus(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    const published: PubMeta = {\r\n      published: item.IsPublished,\r\n      metadata: !!item.Metadata,\r\n    };\r\n    return published;\r\n  }\r\n\r\n  private valueGetterUsage(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    return `${item._Used} / ${item._Uses}`;\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n\r\n    // remove 'Z' and replace 'T'\r\n    return (params.colDef as ExtendedColDef).useTimePicker ? rawValue.substring(0, 19).replace('T', ' ') : rawValue.substring(0, 10);\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== typeof true) { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { TextFilterModel, NumberFilterModel } from '@ag-grid-community/all-modules';\r\n\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let parsed: { [key: string]: any };\r\n  try {\r\n    parsed = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!parsed) { return; }\r\n\r\n  // filters can be published, metadata, string, number and boolean\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (parsed.IsPublished || parsed.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: parsed.IsPublished ? parsed.IsPublished : '',\r\n      metadata: parsed.IsMetadata ? parsed.IsMetadata : '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  const filterKeys = Object.keys(parsed);\r\n  for (const key of filterKeys) {\r\n    if (key === 'IsPublished' || key === 'IsMetadata') { continue; }\r\n\r\n    const value = parsed[key];\r\n    if (typeof value === typeof '') {\r\n      const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n      filterModel[key] = filter;\r\n    } else if (typeof value === typeof 0) {\r\n      const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n      filterModel[key] = filter;\r\n    } else if (typeof value === typeof true) {\r\n      const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n      filterModel[key] = filter;\r\n    }\r\n  }\r\n\r\n  return filterModel;\r\n}\r\n","<div class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ contentType?.Name }} Data</div>\r\n      <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items\" [modules]=\"modules\" [gridOptions]=\"gridOptions\"\r\n      (gridReady)=\"onGridReady($event)\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"actions-box\">\r\n      <button mat-icon-button matTooltip=\"Export\" (click)=\"exportContent()\">\r\n        <mat-icon>cloud_download</mat-icon>\r\n      </button>\r\n      <button mat-icon-button matTooltip=\"Import\" (click)=\"importItem()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n      </button>\r\n      <button mat-icon-button matTooltip=\"Add metadata\" (click)=\"addMetadata()\">\r\n        <mat-icon>local_offer</mat-icon>\r\n      </button>\r\n      <button mat-icon-button matTooltip=\"Debug filter\" (click)=\"debugFilter()\">\r\n        <mat-icon>filter_list</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" matTooltip=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n"],"sourceRoot":"webpack:///"}