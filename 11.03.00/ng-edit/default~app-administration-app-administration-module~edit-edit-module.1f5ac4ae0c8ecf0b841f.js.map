{"version":3,"sources":["../edit/eav-material-controls/adam/sanitize.service.ts","C:/Projects/eav-item-dialog-angular/node_modules/@angular/material/__ivy_ngcc__/fesm5/checkbox.js"],"names":["cleanBadPath","sanitized","replace","removeFromStart","charToRemove","substring","removeFromEnd","length","sanitizePath","this","sanitizeName","SanitizeService","_c0","_c1","enterDuration","_c2","MAT_CHECKBOX_DEFAULT_OPTIONS","providedIn","factory","color","clickAction","MAT_CHECKBOX_CLICK_ACTION","nextUniqueId","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","MatCheckboxChange","MatCheckboxBase","_elementRef","_super","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_clickAction","_animationMode","_options","_this","call","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","parseInt","monitor","subscribe","focusOrigin","Promise","resolve","then","markForCheck","Object","defineProperty","prototype","get","enumerable","configurable","_required","set","value","ngAfterViewInit","_syncIndeterminate","ngAfterViewChecked","ngOnDestroy","stopMonitoring","checked","newValue","disabled","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","indeterminate","newState","oldState","element","nativeElement","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass_1","runOutsideAngular","setTimeout","_emitChangeEvent","event","source","toggle","_onInputClick","stopPropagation","_inputElement","focus","origin","options","focusVia","_onInteractionEvent","animSuffix","nativeCheckbox","ɵfac","t","ɵcmp","type","selectors","viewQuery","rf","ctx","_t","first","ripple","hostAttrs","hostVars","hostBindings","inputs","required","outputs","exportAs","features","ngContentSelectors","decls","vars","consts","template","$event","_r76","_r78","inputId","textContent","trim","directives","styles","encapsulation","changeDetection","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","apply","arguments","ɵMatCheckboxRequiredValidator_BaseFactory","ɵdir","_MatCheckboxRequiredValidatorModule","ɵmod","ɵinj","MatCheckboxModule","imports"],"mappings":"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","file":"default~app-administration-app-administration-module~edit-edit-module.1f5ac4ae0c8ecf0b841f.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class SanitizeService {\r\n\r\n  constructor() { }\r\n\r\n  private removeFromStart(sanitized: string, charToRemove: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(0, 1) === charToRemove) {\r\n      sanitized = sanitized.substring(1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private removeFromEnd(sanitized: string, charToRemove: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(sanitized.length - 1, sanitized.length) === charToRemove) {\r\n      sanitized = sanitized.substring(0, sanitized.length - 1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private cleanBadPath = (sanitized: string) => {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    const goodChar = '_';\r\n    const illegalRe = /[\\?<>\\\\:\\*\\|\":]/g;\r\n    const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\r\n    const reservedRe = /^\\.+$/;\r\n    const windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\r\n    const windowsTrailingRe = /[\\. ]+$/;\r\n    return sanitized\r\n      .replace(illegalRe, goodChar)\r\n      .replace(controlRe, goodChar)\r\n      .replace(reservedRe, goodChar)\r\n      .replace(windowsReservedRe, goodChar)\r\n      .replace(windowsTrailingRe, goodChar);\r\n  }\r\n\r\n  // sanitize path\r\n  public sanitizePath(sanitized: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // remove slashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\/');\r\n\r\n    // remove slashed form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\/');\r\n\r\n    // remove backslashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\\\');\r\n\r\n    // remove backslashes form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\\\');\r\n\r\n    // replace bad\r\n    sanitized = this.cleanBadPath(sanitized);\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  // sanitize file or folder name\r\n  public sanitizeName(sanitized: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // in addition to all path validation rules\r\n    // slashes are not valid in file or folder name\r\n    const replacement = '_';\r\n    const illegalRe = /\\//g;\r\n    return this.sanitizePath(sanitized)\r\n      .replace(illegalRe, replacement);\r\n  }\r\n\r\n}\r\n","import { __extends } from 'tslib';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, NgZone, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nvar _c0 = [\"input\"];\nvar _c1 = function () { return { enterDuration: 150 }; };\nvar _c2 = [\"*\"];\nvar MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @deprecated Injection token will be removed, use `MAT_CHECKBOX_DEFAULT_OPTIONS` instead.\n * @breaking-change 10.0.0\n */\nvar MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for checkbox components.\nvar nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nvar MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MatCheckbox; }),\n    multi: true\n};\n/** Change event object emitted by MatCheckbox. */\nvar MatCheckboxChange = /** @class */ (function () {\n    function MatCheckboxChange() {\n    }\n    return MatCheckboxChange;\n}());\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nvar MatCheckboxBase = /** @class */ (function () {\n    function MatCheckboxBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatCheckboxBase;\n}());\nvar _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nvar MatCheckbox = /** @class */ (function (_super) {\n    __extends(MatCheckbox, _super);\n    function MatCheckbox(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, \n    /**\n     * @deprecated `_clickAction` parameter to be removed, use\n     * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n     * @breaking-change 10.0.0\n     */\n    _clickAction, _animationMode, _options) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._focusMonitor = _focusMonitor;\n        _this._ngZone = _ngZone;\n        _this._clickAction = _clickAction;\n        _this._animationMode = _animationMode;\n        _this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        _this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        _this.ariaLabelledby = null;\n        _this._uniqueId = \"mat-checkbox-\" + ++nextUniqueId;\n        /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n        _this.id = _this._uniqueId;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        _this.labelPosition = 'after';\n        /** Name value will be applied to the input element if present */\n        _this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        _this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        _this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * @docs-private\n         */\n        _this._onTouched = function () { };\n        _this._currentAnimationClass = '';\n        _this._currentCheckState = 0 /* Init */;\n        _this._controlValueAccessorChangeFn = function () { };\n        _this._checked = false;\n        _this._disabled = false;\n        _this._indeterminate = false;\n        _this._options = _this._options || {};\n        if (_this._options.color) {\n            _this.color = _this._options.color;\n        }\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        _this._focusMonitor.monitor(elementRef, true).subscribe(function (focusOrigin) {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(function () {\n                    _this._onTouched();\n                    _changeDetectorRef.markForCheck();\n                });\n            }\n        });\n        // TODO: Remove this after the `_clickAction` parameter is removed as an injection parameter.\n        _this._clickAction = _this._clickAction || _this._options.clickAction;\n        return _this;\n    }\n    Object.defineProperty(MatCheckbox.prototype, \"inputId\", {\n        /** Returns the unique id for the visual hidden input. */\n        get: function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCheckbox.prototype, \"required\", {\n        /** Whether the checkbox is required. */\n        get: function () { return this._required; },\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    MatCheckbox.prototype.ngAfterViewInit = function () {\n        this._syncIndeterminate(this._indeterminate);\n    };\n    // TODO: Delete next major revision.\n    MatCheckbox.prototype.ngAfterViewChecked = function () { };\n    MatCheckbox.prototype.ngOnDestroy = function () {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    };\n    Object.defineProperty(MatCheckbox.prototype, \"checked\", {\n        /**\n         * Whether the checkbox is checked.\n         */\n        get: function () { return this._checked; },\n        set: function (value) {\n            if (value != this.checked) {\n                this._checked = value;\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCheckbox.prototype, \"disabled\", {\n        /**\n         * Whether the checkbox is disabled. This fully overrides the implementation provided by\n         * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n         */\n        get: function () { return this._disabled; },\n        set: function (value) {\n            var newValue = coerceBooleanProperty(value);\n            if (newValue !== this.disabled) {\n                this._disabled = newValue;\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCheckbox.prototype, \"indeterminate\", {\n        /**\n         * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n         * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n         * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n         * set to false.\n         */\n        get: function () { return this._indeterminate; },\n        set: function (value) {\n            var changed = value != this._indeterminate;\n            this._indeterminate = coerceBooleanProperty(value);\n            if (changed) {\n                if (this._indeterminate) {\n                    this._transitionCheckState(3 /* Indeterminate */);\n                }\n                else {\n                    this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\n                }\n                this.indeterminateChange.emit(this._indeterminate);\n            }\n            this._syncIndeterminate(this._indeterminate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MatCheckbox.prototype._isRippleDisabled = function () {\n        return this.disableRipple || this.disabled;\n    };\n    /** Method being called whenever the label text changes. */\n    MatCheckbox.prototype._onLabelTextChange = function () {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    };\n    // Implemented as part of ControlValueAccessor.\n    MatCheckbox.prototype.writeValue = function (value) {\n        this.checked = !!value;\n    };\n    // Implemented as part of ControlValueAccessor.\n    MatCheckbox.prototype.registerOnChange = function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    // Implemented as part of ControlValueAccessor.\n    MatCheckbox.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    // Implemented as part of ControlValueAccessor.\n    MatCheckbox.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    MatCheckbox.prototype._getAriaChecked = function () {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    };\n    MatCheckbox.prototype._transitionCheckState = function (newState) {\n        var oldState = this._currentCheckState;\n        var element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            var animationClass_1 = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(function () {\n                setTimeout(function () {\n                    element.classList.remove(animationClass_1);\n                }, 1000);\n            });\n        }\n    };\n    MatCheckbox.prototype._emitChangeEvent = function () {\n        var event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    };\n    /** Toggles the `checked` state of the checkbox. */\n    MatCheckbox.prototype.toggle = function () {\n        this.checked = !this.checked;\n    };\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    MatCheckbox.prototype._onInputClick = function (event) {\n        var _this = this;\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n                Promise.resolve().then(function () {\n                    _this._indeterminate = false;\n                    _this.indeterminateChange.emit(_this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    };\n    /** Focuses the checkbox. */\n    MatCheckbox.prototype.focus = function (origin, options) {\n        if (origin === void 0) { origin = 'keyboard'; }\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n    };\n    MatCheckbox.prototype._onInteractionEvent = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    };\n    MatCheckbox.prototype._getAnimationClassForCheckStateTransition = function (oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        var animSuffix = '';\n        switch (oldState) {\n            case 0 /* Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* Checked */) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == 3 /* Indeterminate */) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case 2 /* Unchecked */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case 1 /* Checked */:\n                animSuffix = newState === 2 /* Unchecked */ ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case 3 /* Indeterminate */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return \"mat-checkbox-anim-\" + animSuffix;\n    };\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n    MatCheckbox.prototype._syncIndeterminate = function (value) {\n        var nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    };\n    /** @nocollapse */\n    MatCheckbox.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: FocusMonitor },\n        { type: NgZone },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_DEFAULT_OPTIONS,] }] }\n    ]; };\n    MatCheckbox.propDecorators = {\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        id: [{ type: Input }],\n        required: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        name: [{ type: Input }],\n        change: [{ type: Output }],\n        indeterminateChange: [{ type: Output }],\n        value: [{ type: Input }],\n        _inputElement: [{ type: ViewChild, args: ['input',] }],\n        ripple: [{ type: ViewChild, args: [MatRipple,] }],\n        checked: [{ type: Input }],\n        disabled: [{ type: Input }],\n        indeterminate: [{ type: Input }]\n    };\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) { return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_CLICK_ACTION, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_DEFAULT_OPTIONS, 8)); };\nMatCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCheckbox, selectors: [[\"mat-checkbox\"]], viewQuery: function MatCheckbox_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(MatRipple, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    } }, hostAttrs: [1, \"mat-checkbox\"], hostVars: 12, hostBindings: function MatCheckbox_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", required: \"required\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", labelPosition: \"labelPosition\", name: \"name\", value: \"value\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, exportAs: [\"matCheckbox\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 17, vars: 19, consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]], template: function MatCheckbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) { return ctx._onInteractionEvent($event); })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(7, \"div\", 7);\n        ɵngcc0.ɵɵelementStart(8, \"div\", 8);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n        ɵngcc0.ɵɵelement(10, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(11, \"div\", 11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n        ɵngcc0.ɵɵtext(15, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(16);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var _r76 = ɵngcc0.ɵɵreference(1);\n        var _r78 = ɵngcc0.ɵɵreference(13);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r78.textContent || !_r78.textContent.trim());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r76)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox.cdk-keyboard-focused .cdk-high-contrast-active .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n        type: Component,\n        args: [{\n                selector: 'mat-checkbox',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <div class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <div matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n      <div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div>\\n    </div>\\n    <div class=\\\"mat-checkbox-frame\\\"></div>\\n    <div class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <div class=\\\"mat-checkbox-mixedmark\\\"></div>\\n    </div>\\n  </div>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                exportAs: 'matCheckbox',\n                host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': \"_animationMode === 'NoopAnimations'\"\n                },\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                inputs: ['disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox.cdk-keyboard-focused .cdk-high-contrast-active .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_CLICK_ACTION]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n            }] }]; }, { required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], indeterminate: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], indeterminateChange: [{\n            type: Output\n        }], value: [{\n            type: Input\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }], ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }] }); })();\n    return MatCheckbox;\n}(_MatCheckboxMixinBase));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MatCheckboxRequiredValidator; }),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nvar MatCheckboxRequiredValidator = /** @class */ (function (_super) {\n    __extends(MatCheckboxRequiredValidator, _super);\n    function MatCheckboxRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\nMatCheckboxRequiredValidator.ɵfac = function MatCheckboxRequiredValidator_Factory(t) { return ɵMatCheckboxRequiredValidator_BaseFactory(t || MatCheckboxRequiredValidator); };\nMatCheckboxRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCheckboxRequiredValidator, selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nvar ɵMatCheckboxRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\",\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n    return MatCheckboxRequiredValidator;\n}(CheckboxRequiredValidator));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based checkbox implementations. */\nvar _MatCheckboxRequiredValidatorModule = /** @class */ (function () {\n    function _MatCheckboxRequiredValidatorModule() {\n    }\n_MatCheckboxRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatCheckboxRequiredValidatorModule });\n_MatCheckboxRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatCheckboxRequiredValidatorModule_Factory(t) { return new (t || _MatCheckboxRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatCheckboxRequiredValidatorModule, { declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatCheckboxRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatCheckboxRequiredValidator],\n                declarations: [MatCheckboxRequiredValidator]\n            }]\n    }], function () { return []; }, null); })();\n    return _MatCheckboxRequiredValidatorModule;\n}());\nvar MatCheckboxModule = /** @class */ (function () {\n    function MatCheckboxModule() {\n    }\nMatCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatCheckboxModule });\nMatCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatCheckboxModule_Factory(t) { return new (t || MatCheckboxModule)(); }, imports: [[\n            MatRippleModule, MatCommonModule, ObserversModule,\n            _MatCheckboxRequiredValidatorModule\n        ],\n        MatCommonModule,\n        _MatCheckboxRequiredValidatorModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, { declarations: function () { return [MatCheckbox]; }, imports: function () { return [MatRippleModule, MatCommonModule, ObserversModule,\n        _MatCheckboxRequiredValidatorModule]; }, exports: function () { return [MatCheckbox,\n        MatCommonModule,\n        _MatCheckboxRequiredValidatorModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    MatRippleModule, MatCommonModule, ObserversModule,\n                    _MatCheckboxRequiredValidatorModule\n                ],\n                exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                declarations: [MatCheckbox]\n            }]\n    }], function () { return []; }, null); })();\n    return MatCheckboxModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CLICK_ACTION, MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n\n//# sourceMappingURL=checkbox.js.map"],"sourceRoot":"webpack:///"}