{"version":3,"file":"projects_eav-ui_src_app_permissions_permissions_component_ts.3375adef20eb0112.js","mappings":"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","names":["convert","obj","fn","getWith","PermissionsActionsComponent","agInit","params","this","refresh","deletePermission","onDelete","data","selectors","decls","vars","consts","template","rf","ctx","i0","MatRippleModule","i1","MatIconModule","i2","TippyDirective","encapsulation","PermissionsComponent","#permissionsService","#dialogRoutes","#params","#prefills","constructor","dialog","snackBar","gridOptions","buildGridOptions","permissions","signal","transient","PermissionsService","DialogRoutingService","getParams","p","targetType","parseInt","keyType","key","eavConstants","metadata","language","PermissionType","ngOnInit","#fetchPermissions","doOnDialogClosed","closeDialog","close","getAll","subscribe","set","editPermission","permission","form","items","EditPrep","newMetadataFromInfo","contentTypes","constructMetadataInfo","Prefill","editId","Id","formUrl","convertFormToUrl","navRelative","confirm","Title","open","delete","duration","defaultGridOptions","columnDefs","ColumnDefinitions","cellRendererParams","idFieldParamsTooltipGetter","TextWide","headerName","field","sort","onCellClicked","Character","ActionsPinnedRight1","cellRenderer","MatButtonModule","i3","i4","RouterOutlet","MatDialogActions","SxcGridModule","i5","MetadataService","HttpServiceBase","getMetadata","contentTypeName","getHttp","appId","toString","contentType","__ngFactoryType__","factory","Éµfac","metadataService","entitiesService","EntityEditService","pipe","map","Items","id","logSpecs","ServiceBase","router","route","super","log","classLog","snapshot","url","getParam","paramMap","get","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","fnIf","subscriptions","add","childDialogClosed$","end","urlSubRoute","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","commands","events","filter","event","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","create","entity","http","post","zoneId","update","entityId","type","tryForce","apiUrl","webApiEntityRoot","force","all","getEntities","getAvailableEntities","webApiEntityList","EntityService","queryService","QueryService","getEntities$","switchMap","shareReplay","entitiesFilter","itemIds","fields","Default","parentId","parentField","parent","context","getFromQuery","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","Guids","join","Subscription","ngOnDestroy","destroy","unsubscribe"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/core/object-utilities.ts","./projects/eav-ui/src/app/permissions/permissions-actions/permissions-actions.component.ts","./projects/eav-ui/src/app/permissions/permissions-actions/permissions-actions.component.html","./projects/eav-ui/src/app/permissions/permissions.component.ts","./projects/eav-ui/src/app/permissions/permissions.component.html","./projects/eav-ui/src/app/permissions/services/metadata.service.ts","./projects/eav-ui/src/app/permissions/services/permissions.service.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/entity-edit.service.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts"],"sourcesContent":["\r\n/**\r\n * Conversion function to change something to something else, a bit like 'map' but for a single item.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `getWith` function, but has a different name to indicate the usage.\r\n */\r\nexport function convert<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n/**\r\n * Function to do something with an object and return the result.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `convert` function, but has a different name to indicate the usage.\r\n */\r\nexport function getWith<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { Permission } from '../models/permission.model';\r\nimport { PermissionsActionsParams } from './permissions-actions.models';\r\n\r\n@Component({\r\n    selector: 'app-permissions-actions',\r\n    templateUrl: './permissions-actions.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class PermissionsActionsComponent implements ICellRendererAngularComp {\r\n  private params: ICellRendererParams & PermissionsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & PermissionsActionsParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  deletePermission(): void {\r\n    const permission: Permission = this.params.data;\r\n    this.params.onDelete(permission);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Delete\" (click)=\"deletePermission()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n</div>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, OnInit, signal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { convert, Of, transient } from '../../../../core';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants, MetadataKeyTypes } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { Permission } from './models/permission.model';\r\nimport { PermissionsActionsComponent } from './permissions-actions/permissions-actions.component';\r\nimport { PermissionsActionsParams } from './permissions-actions/permissions-actions.models';\r\nimport { PermissionsService } from './services/permissions.service';\r\n\r\n@Component({\r\n    selector: 'app-permissions',\r\n    templateUrl: './permissions.component.html',\r\n    imports: [\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        RouterOutlet,\r\n        MatDialogActions,\r\n        SxcGridModule,\r\n    ]\r\n})\r\nexport class PermissionsComponent implements OnInit {\r\n  gridOptions = this.buildGridOptions();\r\n  permissions = signal<Permission[]>([]);\r\n  #permissionsService = transient(PermissionsService);\r\n  #dialogRoutes = transient(DialogRoutingService);\r\n\r\n  #params = convert(this.#dialogRoutes.getParams(['targetType', 'keyType', 'key']), p => ({\r\n    targetType: parseInt(p.targetType, 10),\r\n    keyType: p.keyType as Of<typeof MetadataKeyTypes>,\r\n    key: p.key,\r\n  }));\r\n\r\n  #prefills: Record<string, Record<string, string>> = {\r\n    [eavConstants.metadata.language.targetType]: {\r\n      PermissionType: 'language',\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<PermissionsComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.#fetchPermissions();\r\n    this.#dialogRoutes.doOnDialogClosed(() => this.#fetchPermissions());\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  #fetchPermissions() {\r\n    this.#permissionsService.getAll(this.#params.targetType, this.#params.keyType, this.#params.key)\r\n      .subscribe(permissions => {\r\n        this.permissions.set(permissions);\r\n      });\r\n  }\r\n\r\n  editPermission(permission?: Permission) {\r\n    let form: EditForm;\r\n    if (permission == null) {\r\n      form = {\r\n        items: [{\r\n          ...EditPrep.newMetadataFromInfo(\r\n            eavConstants.contentTypes.permissions,\r\n            EditPrep.constructMetadataInfo(this.#params.targetType, this.#params.keyType, this.#params.key)\r\n          ),\r\n          ...(this.#prefills[this.#params.targetType] && { Prefill: this.#prefills[this.#params.targetType] }),\r\n        }],\r\n      };\r\n    } else {\r\n      form = {\r\n        items: [EditPrep.editId(permission.Id)],\r\n      };\r\n    }\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRoutes.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  private deletePermission(permission: Permission) {\r\n    if (!confirm(`Delete '${permission.Title}' (${permission.Id})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.#permissionsService.delete(permission.Id).subscribe(() => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.#fetchPermissions();\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.Id,\r\n          cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<Permission>()\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          headerName: 'Name',\r\n          field: 'Title',\r\n          sort: 'asc',\r\n          onCellClicked: (params) => {\r\n            const permission: Permission = params.data;\r\n            this.editPermission(permission);\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Identity',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Condition',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Character,\r\n          field: 'Grant',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight1,\r\n          cellRenderer: PermissionsActionsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: PermissionsActionsParams = {\r\n              onDelete: (permission) => this.deletePermission(permission),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","<div class=\"eav-dialog nav-component-wrapper\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Permissions</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"permissions()\" [gridOptions]=\"gridOptions\">\r\n      </ag-grid-angular>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new permission\" (click)=\"editPermission(null)\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Of } from '../../../../../core';\r\nimport { MetadataDto } from '../../metadata';\r\nimport { MetadataKeyTypes } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiRoot = 'admin/metadata/get';\r\n\r\n@Injectable()\r\nexport class MetadataService extends HttpServiceBase {\r\n  /**\r\n   * Fetches metadata for given key in metadata content type\r\n   * @param targetType type of target metadata item is for, e.g. for Entity, or ContentType\r\n   * @param keyType e.g. for keyType === guid, key === contentTypeStaticName\r\n   * @param key key of target metadata item is for\r\n   * @param contentTypeName name of content type where permissions are stored. If blank, backend returns all metadata except permissions\r\n   */\r\n  getMetadata(targetType: number, keyType: Of<typeof MetadataKeyTypes>, key: string | number, contentTypeName?: string): Observable<MetadataDto> {\r\n    return this.getHttp<MetadataDto>(webApiRoot, {\r\n      params: {\r\n        appId: this.appId,\r\n        targetType: targetType.toString(),\r\n        keyType,\r\n        key: key.toString(),\r\n        ...(contentTypeName && { contentType: contentTypeName }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { eavConstants, MetadataKeyTypes } from '../../shared/constants/eav.constants';\r\nimport { EntityEditService } from '../../shared/services/entity-edit.service';\r\nimport { Permission } from '../models/permission.model';\r\nimport { MetadataService } from './metadata.service';\r\n\r\n@Injectable()\r\nexport class PermissionsService {\r\n\r\n  private metadataService = transient(MetadataService);\r\n\r\n  private entitiesService = transient(EntityEditService);\r\n\r\n  getAll(targetType: number, keyType: Of<typeof MetadataKeyTypes>, key: string): Observable<Permission[]> {\r\n    return this.metadataService.getMetadata(targetType, keyType, key, eavConstants.contentTypes.permissions).pipe(\r\n      map(metadata => metadata.Items as Permission[]),\r\n    );\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.entitiesService.delete(eavConstants.contentTypes.permissions, id, false);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { ItemInListIdentifier } from '../models/edit-form.model';\r\nimport { webApiEntityRoot } from './entity.service';\r\nimport { HttpServiceBase } from './http-service-base';\r\n\r\n@Injectable()\r\nexport class EntityEditService extends HttpServiceBase {\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.appId, force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\ninterface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\ninterface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}