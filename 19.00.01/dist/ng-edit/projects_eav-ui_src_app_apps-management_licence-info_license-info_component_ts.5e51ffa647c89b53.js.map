{"version":3,"file":"projects_eav-ui_src_app_apps-management_licence-info_license-info_component_ts.5e51ffa647c89b53.js","mappings":"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","names":["i0","ctx_r1","feature","isEnabled","_r3","clipboard","copyToClipboard","guid","_r4","dialog","close","_r1","nameId","FeatureDetailsDialogComponent_Conditional_0_Conditional_13_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_14_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_26_Template","name","description","mySpecs","showStatus","showGuid","security","Impact","Message","link","showClose","FeatureDetailsDialogComponent","constructor","dialogSpecs","this","specs","input","computedObj","transient","ClipboardService","MAT_DIALOG_DATA","i1","selectors","inputs","decls","vars","consts","template","rf","ctx","FeatureDetailsDialogComponent_Conditional_0_Template","MatCardModule","i2","MatButtonModule","i3","MatIconModule","i4","SafeHtmlPipe","TranslateModule","i5","encapsulation","ExpirationExtension","expandFeature","getExpiration","expiration","expandLicense","license","lowestExpiration","Features","map","f","sort","dateString","result","icon","text","ExpMessage","ExpIcon","ExpWarningIcon","expires","split","startsWith","expDate","Date","toDateString","setDate","getDate","endsWith","ActiveFeaturesCountPipe","transform","filter","length","pure","AgGridHeightDirective","elementRef","itemsCount","headerHeight","rowHeight","maxRows","extraHeight","element","nativeElement","ngOnChanges","changes","rows","style","height","features","FeaturesListEnabledReasonComponent","agInit","params","value","data","refresh","enabledReasonDetailed","TippyDirective","FeaturesListEnabledComponent","FeaturesStatusComponent","disabled","isDisabled","tooltip","tooltipGetter","toggle","nextValue","onToggle","_c0","MatSlideToggleModule","NgClass","styles","LicensesOrderPipe","licenses","Array","isArray","a","b","Priority","license_r1","gridOptions","LicenseInfoComponent_Conditional_0_For_2_Conditional_17_Template","IsEnabled","Name","panel_r3","expanded","Description","LicenseInfoComponent_Conditional_0_For_2_Template","trackLicenses","LicenseInfoComponent","#refreshLicenses$","#featuresConfigSvc","#dialogRouter","matDialog","viewContainerRef","changeDetectorRef","#buildGridOptions","Subject","FeaturesConfigService","DialogRoutingService","signal","#refreshLicensesSig","licensesSig","computed","set","getLicensesSig","ModuleRegistry","registerModules","ClientSideRowModelModule","ngOnInit","doOnDialogClosed","next","viewModel$","pipe","startWith","undefined","switchMap","getLicenses","catchError","of","tap","l","share","index","Guid","openRegistration","router","navigate","url","replace","#showFeatureDetails","open","autoFocus","width","markForCheck","#toggleFeature","enabled","forkJoin","saveFeatures","FeatureGuid","Enabled","timer","subscribe","error","defaultGridOptions","columnDefs","ColumnDefinitions","ItemsText","headerName","field","cellClass","cellRenderer","IdFieldComponent","cellRendererParams","TextWideFlex3","onCellClicked","headerClass","sortable","BooleanFilterComponent","TextNarrow","tooltipValueGetter","p","ActionsPinnedRight7","isConfigurable","viewQuery","AgGridAngular","LicenseInfoComponent_Conditional_0_Template","tmp_0_0","MatExpansionModule","SxcGridModule","MatDialogActions","RouterOutlet","AsyncPipe","logSpecs","ServiceBase","route","super","log","classLog","snapshot","getParam","key","paramMap","get","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","fnIf","subscriptions","add","childDialogClosed$","end","urlSubRoute","tree","createUrlTree","relativeTo","serializeUrl","navPath","navRelative","commands","events","event","NavigationEnd","firstChild","pairwise","hadChildBefore","hasChildNow","factory","ɵfac","Subscription","ngOnDestroy","destroy","unsubscribe"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./projects/eav-ui/src/app/features/expiration-extension.ts","./projects/eav-ui/src/app/apps-management/licence-info/active-features-count.pipe.ts","./projects/eav-ui/src/app/apps-management/licence-info/ag-grid-height.directive.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled-reason/features-list-enabled-reason.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled-reason/features-list-enabled-reason.component.html","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled/features-list-enabled.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled/features-list-enabled.component.html","./projects/eav-ui/src/app/apps-management/licence-info/features-status/features-status.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-status/features-status.component.html","./projects/eav-ui/src/app/apps-management/licence-info/licenses-order.pipe.ts","./projects/eav-ui/src/app/apps-management/licence-info/license-info.component.html","./projects/eav-ui/src/app/apps-management/licence-info/license-info.component.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts"],"sourcesContent":["@if (feature()) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ feature().name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"feature().description | safeHtml\"></p>\r\n      <!-- Name ID -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">ID:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span (click)=\"clipboard.copyToClipboard(feature().nameId)\">{{ feature().nameId }}</span>\r\n        </div>\r\n      </div>\r\n      <!-- Status -->\r\n      @if (mySpecs().showStatus) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">{{ 'Features.Status' | translate }}:</div>\r\n          <div class=\"eav-info-row__value\">\r\n            <span>{{ (feature().isEnabled ? 'Features.Active' : 'Features.NotActive') | translate }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- GUID -->\r\n      @if (mySpecs().showGuid) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">GUID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span (click)=\"clipboard.copyToClipboard(feature().guid)\">{{ feature().guid }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- Security Rating -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Security Rating:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ feature().security.Impact + ': ' + feature().security.Message }}</span>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <a [href]=\"feature().link\" target=\"_blank\" mat-raised-button class=\"eav-card-action-button\" color=\"accent\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n        Find out more\r\n      </a>\r\n      @if (mySpecs().showClose != false) {\r\n        <button mat-raised-button class=\"eav-card-action-button\" (click)=\"dialog.close()\">Close</button>\r\n      }\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, Inject, input, Optional } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core/transient';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { computedObj } from '../../../shared/signals/signal.utilities';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\n\r\n@Component({\r\n    selector: 'app-feature-details-dialog',\r\n    templateUrl: './feature-details-dialog.component.html',\r\n    imports: [\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        SafeHtmlPipe,\r\n        TranslateModule,\r\n    ]\r\n})\r\nexport class FeatureDetailsDialogComponent {\r\n  specs = input<FeatureDetailsDialogData>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_DIALOG_DATA) private dialogSpecs: FeatureDetailsDialogData,\r\n    protected dialog: MatDialogRef<FeatureDetailsDialogComponent>,\r\n  ) { }\r\n\r\n  protected mySpecs = computedObj('mySpecs', () =>  this.specs() ?? this.dialogSpecs );\r\n  protected feature = computedObj('feature', () => this.mySpecs()?.feature);\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","import { License } from '../apps-management/models/license.model';\r\nimport { Feature } from './models';\r\n\r\n/**\r\n * Helper class used in union with other classes to add expiration hints to features.\r\n * It's implemented as a class, so it's easier to bundle static functions.\r\n */\r\nexport class ExpirationExtension {\r\n\r\n  /** The expiration date as a human readable string. Not from the server; generated on the client */\r\n  ExpMessage?: string;\r\n  ExpIcon?: string;\r\n\r\n  ExpWarningIcon?: string;\r\n\r\n  static expandFeature(feature: Feature): Feature & ExpirationExtension {\r\n    return {\r\n      ...feature,\r\n      ...ExpirationExtension.getExpiration(feature?.expiration)\r\n    };\r\n  }\r\n\r\n  static expandLicense(license: License): License & ExpirationExtension {\r\n    // Wrap in Try-Catch to avoid errors in the UI\r\n    try {\r\n      // find the lowest expiration date on the features\r\n      const lowestExpiration = license?.Features?.map(f => f.expiration).sort()[0];\r\n      // if there is no lowest expiration date, skip the rest\r\n      if (lowestExpiration == null) return license;\r\n\r\n      // debugger;\r\n      const withState = {\r\n        ...license,\r\n        ...ExpirationExtension.getExpiration(lowestExpiration),\r\n      };\r\n\r\n      return withState;\r\n    } catch (error) {\r\n      return license;\r\n    }\r\n  }\r\n\r\n  private static getExpiration(dateString: string): ExpirationExtension {\r\n    // Inner helper to create the final result\r\n    const result = (icon: string, text: string) => ({\r\n      ExpMessage: (icon != null ? icon + ' ' : '') + text,\r\n      ExpIcon: icon,\r\n      ExpWarningIcon: icon != '✅' ? icon : null,\r\n    })\r\n    const expires = dateString?.split('T')[0];\r\n    // no valid expiration date\r\n    if (expires == null) return result(null, null);\r\n    // never expires\r\n    if (expires.startsWith('9999')) return result('✅', 'never');\r\n    const expDate = new Date(expires);\r\n    // show \"expired\" if it's over-due\r\n    if (expDate < new Date()) return result('🛑', 'expired');\r\n    // return \"today\" if it's today\r\n    if (expDate.toDateString() === new Date().toDateString()) return result('⚠️', 'today');\r\n    // return \"tomorrow\" if it's tomorrow\r\n    if (expDate.toDateString() === new Date(new Date().setDate(new Date().getDate() + 1)).toDateString()) return result('⚠️', 'tomorrow');\r\n    // Warn if it's within 30 days\r\n    if (expDate < new Date(new Date().setDate(new Date().getDate() + 30))) return result('⚠️', expires);\r\n    // Show special EOY if it's at the end of the year - the most common expiration\r\n    if (expires.endsWith('12-31')) return result('✅', `EOY ${expires.split('-')[0]}`);\r\n    // otherwise: just show the date\r\n    return result('❓', expires);\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { License } from '../models/license.model';\r\n\r\n@Pipe({\r\n  name: 'activeFeaturesCount',\r\n})\r\nexport class ActiveFeaturesCountPipe implements PipeTransform {\r\n\r\n  transform(license: License) {\r\n    return `${license.Features.filter(f => f.isEnabled).length}/${license.Features.length}`;\r\n  }\r\n}\r\n","import { Directive, ElementRef, input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appAgGridHeight]',\r\n})\r\nexport class AgGridHeightDirective implements OnChanges {\r\n  itemsCount = input<number>(0);\r\n  headerHeight = input<number>(32);\r\n  rowHeight = input<number>(48);\r\n  maxRows = input<number>(100);\r\n\r\n  /** Fixes a bug where scrollbar appears when then is no overflow */\r\n  private extraHeight = 2;\r\n\r\n  private element: HTMLElement;\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.itemsCount != null) {\r\n      const rows = this.itemsCount() === 0 ? 2 : this.itemsCount() > this.maxRows() ? this.maxRows() : this.itemsCount();\r\n      this.element.style.height = `${this.headerHeight() + rows * this.rowHeight() + this.extraHeight}px`;\r\n    }\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Feature } from '../../../features/models/feature.model';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n    selector: 'app-features-list-enabled-reason',\r\n    templateUrl: './features-list-enabled-reason.component.html',\r\n    imports: [TippyDirective]\r\n})\r\nexport class FeaturesListEnabledReasonComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n  feature: Feature;\r\n\r\n  agInit(params: ICellRendererParams): void {\r\n    this.value = params.value;\r\n    this.feature = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div [tippy]=\"feature.enabledReasonDetailed\">{{ value }}</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n    selector: 'app-features-list-enabled',\r\n    templateUrl: './features-list-enabled.component.html',\r\n    imports: [MatIconModule]\r\n})\r\nexport class FeaturesListEnabledComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  agInit(params: ICellRendererParams): void {\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon>{{ value ? 'check_box' : 'check_box_outline_blank' }}</mat-icon>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Feature } from '../../../features/models/feature.model';\r\nimport { FeaturesStatusParams } from './features-status.models';\r\nimport { IdFieldParams } from '../../../shared/components/id-field/id-field.models';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n    selector: 'app-features-status',\r\n    templateUrl: './features-status.component.html',\r\n    styleUrls: ['./features-status.component.scss'],\r\n    imports: [\r\n        MatSlideToggleModule,\r\n        NgClass,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class FeaturesStatusComponent implements ICellRendererAngularComp {\r\n  value: boolean | null;\r\n  disabled: boolean;\r\n  tooltip: string;\r\n\r\n  private params: ICellRendererParams & FeaturesStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & FeaturesStatusParams & IdFieldParams<Feature>): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.disabled = params.isDisabled(params.data);\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params: ICellRendererParams & FeaturesStatusParams): boolean {\r\n    this.disabled = this.params.isDisabled(this.params.data);\r\n    return true;\r\n  }\r\n\r\n  toggle(): void {\r\n    const feature: Feature = this.params.data;\r\n    let nextValue: boolean;\r\n    switch (this.value) {\r\n      case false:\r\n        nextValue = null;\r\n        break;\r\n      case null:\r\n        nextValue = true;\r\n        break;\r\n      case true:\r\n        nextValue = false;\r\n        break;\r\n    }\r\n    this.value = nextValue;\r\n    this.params.onToggle(feature, nextValue);\r\n  }\r\n}\r\n","<mat-slide-toggle [checked]=\"value\" [tippy]=\"tooltip\" [disabled]=\"disabled\" (change)=\"toggle()\" [ngClass]=\"{\r\n  'toggle-false': value === false,\r\n  'toggle-null': value === null\r\n  }\">\r\n</mat-slide-toggle>\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { License } from '../models/license.model';\r\n\r\n@Pipe({\r\n  name: 'licensesOrder',\r\n})\r\nexport class LicensesOrderPipe implements PipeTransform {\r\n\r\n  transform(licenses: License[]): any {\r\n    if (!Array.isArray(licenses)) { return licenses; }\r\n\r\n    const sorted = [...licenses].sort((a: License, b: License) => {\r\n      if (a.Priority < b.Priority) {\r\n        return -1;\r\n      } else if (a.Priority > b.Priority) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return sorted;\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <!-- <pre>\r\n    Toast old: {{ vm | json }}\r\n    Toast new: {{ licensesSig()| json }}\r\n  </pre> -->\r\n\r\n  <mat-accordion multi>\r\n    @for (license of vm.licenses| licensesOrder; track trackLicenses($index, license)) {\r\n      <mat-expansion-panel #panel>\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>\r\n            <mat-icon class=\"panel-icon\" [tippy]=\"license.IsEnabled ? 'License is active' : 'License is not active'\">{{\r\n              license.IsEnabled ? 'check_circle_outline' : 'cancel'\r\n            }}</mat-icon>\r\n            <div>\r\n              <div class=\"panel-title\">\r\n                <span>{{ license.Name }}</span>\r\n                <span class=\"active-features-count\">{{ license | activeFeaturesCount }}</span>\r\n                <span> {{ license.ExpWarningIcon }}</span>\r\n              </div>\r\n              <div class=\"panel-description\" [ngClass]=\"{ expanded: panel.expanded }\">\r\n                {{ license.Description }}\r\n              </div>\r\n            </div>\r\n          </mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        @if (panel.expanded) {\r\n          <ag-grid-angular\r\n            class=\"ag-theme-material\"\r\n            [rowData]=\"license.Features\"\r\n            [gridOptions]=\"gridOptions\"\r\n            appAgGridHeight\r\n            [itemsCount]=\"license.Features?.length\"\r\n          >\r\n          </ag-grid-angular>\r\n        }\r\n      </mat-expansion-panel>\r\n    }\r\n  </mat-accordion>\r\n}\r\n\r\n<mat-dialog-actions align=\"start\">\r\n  <button mat-button class=\"eav-button__with-icon\" tippy=\"Registration\" (click)=\"openRegistration()\">\r\n    <mat-icon class=\"eav-icon\">app_registration</mat-icon>\r\n    <span>Registration</span>\r\n  </button>\r\n</mat-dialog-actions>\r\n\r\n<router-outlet></router-outlet>\r\n","import { AgGridAngular } from '@ag-grid-community/angular';\r\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\r\nimport { GridOptions, ModuleRegistry } from '@ag-grid-community/core';\r\nimport { AsyncPipe, NgClass } from '@angular/common';\r\nimport { ChangeDetectorRef, Component, computed, OnInit, signal, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { catchError, forkJoin, map, Observable, of, share, startWith, Subject, switchMap, tap, timer } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { ExpirationExtension } from '../../features/expiration-extension';\r\nimport { FeatureState } from '../../features/models';\r\nimport { Feature } from '../../features/models/feature.model';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { License } from '../models/license.model';\r\nimport { FeaturesConfigService } from '../services/features-config.service';\r\nimport { ActiveFeaturesCountPipe } from './active-features-count.pipe';\r\nimport { AgGridHeightDirective } from './ag-grid-height.directive';\r\nimport { FeatureDetailsDialogComponent } from './feature-details-dialog/feature-details-dialog.component';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog/feature-details-dialog.models';\r\nimport { FeaturesListEnabledReasonComponent } from './features-list-enabled-reason/features-list-enabled-reason.component';\r\nimport { FeaturesListEnabledComponent } from './features-list-enabled/features-list-enabled.component';\r\nimport { FeaturesStatusComponent } from './features-status/features-status.component';\r\nimport { FeaturesStatusParams } from './features-status/features-status.models';\r\nimport { LicensesOrderPipe } from './licenses-order.pipe';\r\n\r\n@Component({\r\n    selector: 'app-license-info',\r\n    templateUrl: './license-info.component.html',\r\n    styleUrls: ['./license-info.component.scss'],\r\n    imports: [\r\n        MatExpansionModule,\r\n        MatIconModule,\r\n        NgClass,\r\n        SxcGridModule,\r\n        AgGridHeightDirective,\r\n        MatDialogActions,\r\n        MatButtonModule,\r\n        RouterOutlet,\r\n        AsyncPipe,\r\n        LicensesOrderPipe,\r\n        ActiveFeaturesCountPipe,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class LicenseInfoComponent implements OnInit {\r\n  @ViewChild(AgGridAngular) private gridRef?: AgGridAngular;\r\n\r\n  gridOptions = this.#buildGridOptions();\r\n  #refreshLicenses$ = new Subject<void>();\r\n  viewModel$: Observable<LicenseInfoViewModel>;\r\n\r\n  #featuresConfigSvc = transient(FeaturesConfigService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    ModuleRegistry.registerModules([ClientSideRowModelModule]);\r\n  }\r\n\r\n  disabled = signal(false);\r\n  #refreshLicensesSig = signal(0);\r\n\r\n  licensesSig = computed(() => {\r\n    const refreshState = this.#refreshLicensesSig();\r\n    this.disabled.set(false);\r\n    return this.#featuresConfigSvc.getLicensesSig();\r\n\r\n  });\r\n  // TODO: @2dg, ask 2dm licensesSig refresh is false\r\n  // licensesSignal = this.#featuresConfigSvc.getLicensesSig(); // Holt das Signal, nicht den Wert\r\n\r\n  // licensesSig2 = computed(() => {\r\n  //   const refreshState = this.#refreshLicensesSig(); // Ein Refresh-Mechanismus\r\n  //   const licenses = this.licensesSignal(); // Holt die Liste der Lizenzen (License[]), nicht das Signal selbst\r\n\r\n  //   this.disabled.set(false);\r\n\r\n  //   // Überprüfen, ob Lizenzen vorhanden sind, bevor sie erweitert werden\r\n  //   if (licenses) {\r\n  //     return licenses.map(l => ({\r\n  //       ...ExpirationExtension.expandLicense(l), // Lizenz erweitern\r\n  //       Features: l.Features.map((f: Feature) => ExpirationExtension.expandFeature(f)), // Features erweitern\r\n  //     }));\r\n  //   }\r\n\r\n  //   // Fallback, falls keine Lizenzen vorhanden sind\r\n  //   return [];\r\n  // });\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.#dialogRouter.doOnDialogClosed(() => {\r\n      this.#refreshLicenses$.next()\r\n      this.#refreshLicensesSig.set(this.#refreshLicensesSig() + 1);\r\n    });\r\n\r\n    this.viewModel$ =\r\n      this.#refreshLicenses$.pipe(\r\n        startWith(undefined),\r\n        switchMap(() => this.#featuresConfigSvc.getLicenses().pipe(catchError(() => of(undefined)))), // Use new http Signals\r\n        tap(() => {\r\n          this.disabled.set(false);\r\n        }),\r\n\r\n        // Fiddle with the data for development tests\r\n        // 2023-11-16 2dm disabled - causes trouble in production\r\n        // @STV - do you still need this? or is this a forgotten debug code?\r\n        // map(licenses => {\r\n        //   var licTesting = licenses[licenses.length - 2];\r\n        //   licTesting.Features[licTesting.Features.length - 1].Expiration = \"2023-08-25\";\r\n        //   return licenses;\r\n        // }),\r\n\r\n        // Expand the data to have pre-calculated texts/states\r\n        map(licenses => licenses.map(l => {\r\n          // const expandedFeatures = l.Features.map(f => ExpirationExtension.expandFeature(f));\r\n          return ({\r\n            ...ExpirationExtension.expandLicense(l),\r\n            Features: l.Features.map(f => ExpirationExtension.expandFeature(f)),\r\n          });\r\n        })),\r\n\r\n        // Share the resulting stream with all subscribers\r\n        share(),\r\n      )\r\n        //])\r\n        .pipe(\r\n          map((licenses) => ({ licenses })),\r\n        );\r\n  }\r\n\r\n  trackLicenses(index: number, license: License): string {\r\n    return license.Guid;\r\n  }\r\n\r\n\r\n  openRegistration(): void {\r\n    const router = this.#dialogRouter.router;\r\n    router.navigate([router.url.replace('license', '') + \"/registration\"]);\r\n  }\r\n\r\n  #showFeatureDetails(feature: Feature): void {\r\n    const data: FeatureDetailsDialogData = {\r\n      feature,\r\n      showGuid: true,\r\n      showStatus: true,\r\n    };\r\n    this.matDialog.open(FeatureDetailsDialogComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '600px',\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  #toggleFeature(feature: Feature, enabled: boolean): void {\r\n    this.disabled.set(true);\r\n    const state: FeatureState = {\r\n      FeatureGuid: feature.guid,\r\n      Enabled: enabled,\r\n    };\r\n    forkJoin([this.#featuresConfigSvc.saveFeatures([state]), timer(100)]).subscribe({\r\n      error: () => {\r\n        this.#refreshLicensesSig.set(this.#refreshLicensesSig() + 1);\r\n        this.#refreshLicenses$.next();\r\n      },\r\n      next: () => {\r\n        this.#refreshLicensesSig.set(this.#refreshLicensesSig() + 1);\r\n        this.#refreshLicenses$.next();\r\n      },\r\n    });\r\n  }\r\n\r\n  // Note: @SDV\r\n  // I think this should serve as a good example of how to use the grid\r\n  // 1. eg. with cellDefaults and similar initial objects containing most commonly used options here\r\n  // 2. Also we should probably never add a valueGetter for the simple properties\r\n  // ...not sure why it's even in here, my guess is copy-paste of code which wasn't understood properly\r\n  // 3. I think the header-name should always be the first line, then the field\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          headerName: 'ID',\r\n          field: 'nameId',\r\n          width: 200,\r\n          cellClass: 'no-outline',\r\n          cellRenderer: IdFieldComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<Feature> = {\r\n              tooltipGetter: (feature: Feature) => feature.nameId,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideFlex3,\r\n          headerName: 'Name',\r\n          field: 'name',\r\n          cellClass: 'primary-action highlight'.split(' '),\r\n          onCellClicked: (params) => {\r\n            this.#showFeatureDetails(params.data as Feature);\r\n          },\r\n        },\r\n        {\r\n\r\n          headerName: 'Enabled',\r\n          field: 'isEnabled',\r\n          width: 80,\r\n          cellClass: 'no-outline',\r\n          headerClass: 'dense',\r\n          sortable: true,\r\n          filter: BooleanFilterComponent,\r\n          cellRenderer: FeaturesListEnabledComponent,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextNarrow,\r\n          headerName: 'Reason',\r\n          field: 'enabledReason',\r\n          cellRenderer: FeaturesListEnabledReasonComponent,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          headerName: 'Expiration',\r\n          field: 'ExpMessage',\r\n          sortable: false,\r\n          width: 120,\r\n          tooltipValueGetter: (p) => (p.data as Feature & ExpirationExtension)?.expiration,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight7,\r\n          headerName: '',\r\n          field: 'enabledInConfiguration',\r\n          cellRenderer: FeaturesStatusComponent,\r\n          cellRendererParams: (() => {\r\n            const params: FeaturesStatusParams & IdFieldParams<Feature> = {\r\n              isDisabled: (feature) => !feature.isConfigurable || this.disabled(),\r\n              onToggle: (feature, enabled) => this.#toggleFeature(feature, enabled),\r\n              tooltipGetter: (feature: Feature) => feature.isConfigurable ? \"Toggle off | default | on\" : \"This feature can't be configured\",\r\n            };\r\n            return params;\r\n          }),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\n\r\ninterface LicenseInfoViewModel {\r\n  licenses: (License & ExpirationExtension)[];\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}