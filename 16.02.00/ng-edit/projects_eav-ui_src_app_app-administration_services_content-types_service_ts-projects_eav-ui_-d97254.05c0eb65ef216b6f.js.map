{"version":3,"mappings":"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","names":["webApiTypeRoot","ContentTypesService","constructor","http","context","dnnContext","this","apiUrl","name","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopes","Object","keys","key","value","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","i0","factory","manageContentListDialog","initContext","panelSize","panelClass","getComponent","ManageContentListComponent","Promise","routes","path","component","DialogEntryComponent","data","dialog","children","matcher","edit","loadChildren","then","m","EditModule","refreshEdit","t","RefreshEditModule","ReplaceContentModule","ManageContentListRoutingModule","RouterModule","ManageContentListModule","Context","ContentGroupService","EavService","AppDialogConfigService","imports","CommonModule","SharedComponentsModule","MatDialogModule","MatButtonModule","MatIconModule","DragDropModule","MatSnackBarModule","TranslateModule","buildTranslateConfiguration","translateLoaderFactory","viewContainerRef","router","route","changeDetectorRef","navigation","getCurrentNavigation","dialogData","g","f","extras","_a","state","ngOnInit","dialogConfig","snapshot","Error","consoleLogAngular","id","_dialogAnimatingOpen","_lastDialogRef","afterOpened","subscribe","openDialogComponent","ngOnDestroy","dialogRef","close","init","open","autoFocus","backdropClass","closeOnNavigation","showScrollbar","position","top","afterClosed","navRes","d","navigateUrl","pathFromRoot","length","window","parent","totalPopup","error","navigate","url","relativeTo","markForCheck","selectors","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","readAsText","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","TranslateLoaderWithErrorHandling","sxcVersion","prefix","suffix","getTranslation","lang","catchError","console","warn","of"],"sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/manage-content-list/manage-content-list-dialog.config.ts","./projects/eav-ui/src/app/manage-content-list/manage-content-list-routing.module.ts","./projects/eav-ui/src/app/manage-content-list/manage-content-list.module.ts","./projects/eav-ui/src/app/shared/components/dialog-entry/dialog-entry.component.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-factory.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const manageContentListDialog: DialogConfig = {\r\n  name: 'MANAGE_CONTENT_LIST_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ManageContentListComponent } = await import('./manage-content-list.component');\r\n    return ManageContentListComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../edit/edit.matcher';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { manageContentListDialog } from './manage-content-list-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: manageContentListDialog }, children: [\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n      {\r\n        matcher: refreshEdit,\r\n        loadChildren: () => import('../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n      },\r\n      {\r\n        path: ':guid/:part/:index/replace',\r\n        loadChildren: () => import('../replace-content/replace-content.module').then(m => m.ReplaceContentModule)\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ManageContentListRoutingModule { }\r\n","import { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ManageContentListRoutingModule } from './manage-content-list-routing.module';\r\nimport { ManageContentListComponent } from './manage-content-list.component';\r\nimport { ContentGroupService } from './services/content-group.service';\r\nimport { buildTranslateConfiguration } from '../shared/translation';\r\nimport { EavService } from '../edit/shared/services';\r\nimport { AppDialogConfigService } from '../app-administration/services';\r\nimport { translateLoaderFactory } from '../shared/translation/translate-loader-factory';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ManageContentListComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ManageContentListRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    DragDropModule,\r\n    MatSnackBarModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactory)),\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentGroupService,\r\n    EavService,\r\n    AppDialogConfigService\r\n  ]\r\n})\r\nexport class ManageContentListModule { }\r\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit, Type, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NavigateFormResult } from '../../../edit/shared/models';\r\nimport { consoleLogAngular } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { EavWindow } from '../../models/eav-window.model';\r\nimport { Context } from '../../services/context';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: Record<string, any>;\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogAngular('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      // spm Workaround for \"feature\" where you can't open new dialog while last one is still opening\r\n      // https://github.com/angular/components/commit/728cf1c8ebd49e089f4bae945511bb0918972c26\r\n      if ((this.dialog as any)._dialogAnimatingOpen && (this.dialog as any)._lastDialogRef) {\r\n        ((this.dialog as any)._lastDialogRef as MatDialogRef<any>).afterOpened().subscribe(() => {\r\n          this.openDialogComponent(dialogConfig, component);\r\n        });\r\n      } else {\r\n        this.openDialogComponent(dialogConfig, component);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private openDialogComponent(dialogConfig: DialogConfig, component: Type<any>) {\r\n    if (dialogConfig.initContext) {\r\n      this.context.init(this.route);\r\n    }\r\n\r\n    this.dialogRef = this.dialog.open(component, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: this.dialogData,\r\n      panelClass: [\r\n        'dialog-panel',\r\n        `dialog-panel-${dialogConfig.panelSize}`,\r\n        dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n        ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n      ],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n\r\n    this.dialogRef.afterClosed().subscribe((data: any) => {\r\n      consoleLogAngular('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n      const navRes = data as NavigateFormResult;\r\n      if (navRes?.navigateUrl != null) {\r\n        this.router.navigate([navRes.navigateUrl]);\r\n        return;\r\n      }\r\n\r\n      if (this.route.pathFromRoot.length <= 3) {\r\n        try {\r\n          window.parent.$2sxc.totalPopup.close();\r\n        } catch (error) { }\r\n        return;\r\n      }\r\n\r\n      if (this.route.snapshot.url.length > 0) {\r\n        this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n      } else {\r\n        this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n      }\r\n    });\r\n\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateLoader } from \"@ngx-translate/core\";\r\nimport { EavWindow } from \"../models/eav-window.model\";\r\nimport { TranslateLoaderWithErrorHandling } from \"./translate-loader-with-error-handling\";\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactory(http: HttpClient): TranslateLoader {\r\n    return new TranslateLoaderWithErrorHandling(http, './i18n/', `.js?${window.sxcVersion}`);\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_app-administration_services_content-types_service_ts-projects_eav-ui_-d97254.05c0eb65ef216b6f.js"}