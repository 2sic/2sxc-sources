{"version":3,"mappings":"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","names":["Config","g","parseInt","get","Number","req","$2sxc","moduleId","cbId","key","urlParams","require","SupportedLanguages","i18nPrefix","BackendSettings","http","m","this","BehaviorSubject","data","appId","pipe","distinctUntilChanged","switchMap","id","map","bundle","Context","share","next","o","i0","factory","BehaviorObservable","initialValue","subj","obs","asObservable","subject","reset","isInitial","value","i","Observable","DebugConfig","Log","name","parent","Array","Object","msg","args","s","logs","push","autoDump","forceLogToConsole","arguments","Constants","console","log","apply","newLog","loggers","add","state","window","logger","cViewWithoutContent","parentLog","ContentTypesProcessor","translate","allTypes","type","allTemplates","template","unhide","unhideSelectedType","addEmptyTypeIfNeeded","filtered","hideNecessaryTypes","sortTypes","types","filter","t","IsHidden","contentTypes","currentType","currentTemplate","r","TemplateId","c","StaticName","a","forEach","templates","layoutElementLabel","instant","find","ContentTypeStaticName","slice","Name","Thumbnail","Label","sort","b","localeCompare","IsDefault","sortTypesWithDefault","selectedContentTypeId","TemplateProcessor","selected","app","length","sortTemplates","n","App","json","assign","VersionMain","Version","substr","e","uninitializedList","PickerService","buildObservables","enableLogging","ready$","combineLatest","apps$","contentTypes$","templates$","apps","set","mustLoadApps","startWith","reloadParts","loadApps","Error","post","toPromise","requireApps","reloadAppParts","loadTemplates","loadContentTypes","subscribe","response","ct","l","Properties","_a","_b","alreadyLoaded","appsFilter","streamLog","TemplateFilterPipe","typeId","contentType","undefined","typeNameFilter","isContent","pure","CurrentDataService","api","templateFilter","ctProcessor","buildBasicObservables","app$","appId$","AppId","initialType$","initialTypeId$","type$","merge","selectedType$","findTemplatesForTypeOrAll","initialTemplate$","initialTemplateId$","selected$","selectedTemplate$","template$","types$","buildList","config","JSON","stringify","appReady$","typeReady$","scan","acc","contentTypeId","templReady$","debounceTime","templateId","loadAll$","initLogging","activateCurrentApp","inita$","inittyp$","initt$","initAll$","slog","subLog","initLog","transform","InstallerService","packages","step","reduce","url","observableOf","GettingStartedService","Subject","gettingStarted$","gettingStartedSubject","tap","isContentApp","InstallerComponent","installer","sanitizer","subscriptions","remoteInstallerUrl","bypassSecurityTrustResourceUrl","ready","bootController","rebootRequest$","destroy","sub","unsubscribe","alreadyProcessing","loadGettingStarted","fromEvent","evt","parse","action","values","packagesDisplayNames","displayName","confirm","showProgress","installPackages","currentPackage","p","alert","top","location","reload","catchError","error","errorMsg","Message","_c","message","_d","of","selectors","FilterByPropertyValuePipe","input","propertyName","filterValue","toLocaleLowerCase","includes","A","_e","ctx_r11","ctx_r13","ctx_r22","ctx_r24","ctx_r25","ctx_r27","ctx_r34","ctx_r36","ctx_r46","ctx_r48","TemplatePickerComponent","backendSettings","cdRef","bridge","frameElement","dashInfo","getAdditionalDashboardConfig","boot","debugObservables","autosyncObservablesToEnsureUiUpdates","showDebug","debug","setApp","showAdvanced","Enable","CodeEditor","initLoading","initDone$","init","initObservables","initValuesFromBridge","loading$","initTrue$","typeOrAppReady","switchTab","showInstaller","templatesLoading$","skipUntil","previewTemplate","defaultContentType","detectChanges","preventTypeSwitch","hasContent","isBadContextForInstaller","isInnerContent","supportsAjax","preventAppSwich","showCancel","cancel","run","setTemplate","before","after","updateApp","setContentType","activateTemplate","activateType","timer","then","tabIndex","newApp","ajax","SupportsAjaxReload","showMessage","saveAppId","toString","reloadAndReInit","newConfig","AppComponent","el","context","preConfigure","sxc","addLangs","lang","ctxDto","Language","setDefaultLang","use","langCode5","split","langCode2","Current","DnnAppComponent","CoreModule","imports","CommonModule","HttpClientModule","InstallerModule","MatProgressSpinnerModule","MATERIAL_MODULES","MatButtonModule","MatDialogModule","MatExpansionModule","MatIconModule","MatProgressBarModule","MatTabsModule","MatToolbarModule","MaterialModule","TemplatePickerModule","BrowserAnimationsModule","MatMenuModule","FormsModule","FlexLayoutModule","TranslateModule","loader","TranslateHttpLoader","AppModule","bootstrap","DnnInterceptor","BrowserModule","provide","TranslateLoader","useFactory","HttpLoaderFactory","deps","HttpClient","BootController","_reboot","instance","enableProdMode","platform","__NgCli_bootstrap_1","destroyed","bootstrapModule","appBootstrap","catch","err"],"sources":["./src/app/config.ts","../connect-parts/inpage-quick-dialog/quick-dialog-params.ts","./src/app/i18n/constants.ts","./src/app/core/backend-settings.ts","./src/app/core/constants.ts","./src/app/core/behavior-observable.ts","./src/app/debug-config.ts","./src/app/core/log.ts","./src/app/template-picker/constants.ts","./src/app/template-picker/data/content-types-processor.service.ts","./src/app/template-picker/data/template-processor.ts","./src/app/core/app.ts","./src/app/template-picker/picker.service.ts","./src/app/template-picker/template-filter.pipe.ts","./src/app/template-picker/current-data.service.ts","./src/app/installer/installer.service.ts","./src/app/installer/getting-started.service.ts","./src/app/installer/installer.component.html","./src/app/installer/installer.component.ts","./src/app/template-picker/filter-by-property-value.pipe.ts","./src/app/template-picker/template-picker.component.html","./src/app/template-picker/template-picker.component.ts","./src/app/app.component.ts","./src/app/i18n/index.ts","./src/app/app.component.html","./src/app/core/core.module.ts","./src/app/installer/installer.module.ts","./src/app/material-module.ts","./src/app/template-picker/template-picker.module.ts","./src/app/app.module.ts","./src/app/core/boot-control.ts","./src/main.ts"],"sourcesContent":["import { SxcRoot } from '@2sic.com/2sxc-typings';\r\nimport { urlParams } from './core/constants';\r\n\r\ndeclare const $2sxc: SxcRoot;\r\n\r\nexport class Config {\r\n  static appId = () => parseInt(get(urlParams.appId));\r\n  static apps = () => get(urlParams.apps);\r\n\r\n  static moduleId = () => Number(req(urlParams.moduleId));\r\n  static cbId = () => Number(req(urlParams.contentBlockId));\r\n\r\n  static getSxcInstance = () => $2sxc(Config.moduleId(), Config.cbId());\r\n}\r\n\r\n\r\nfunction req(key) { return $2sxc.urlParams.require(key); }\r\n\r\nfunction get(key) { return $2sxc.urlParams.get(key); }\r\n","\r\n/**\r\n * These are all the url params the UI needs to function\r\n * @internal\r\n */\r\nexport const urlParams = {\r\n  // These are used in UI.html, but we keep them here so we have a full list documented\r\n  pageId: 'tid',\r\n\r\n  /**\r\n   *  request verification token header name\r\n   */\r\n  requestVerificationTokenHeader: 'rvth',\r\n\r\n  /**\r\n   *  request verification token value\r\n   */\r\n  requestVerificationToken: 'rvt',\r\n\r\n  api: 'api',\r\n\r\n  /**\r\n   * Context: App we're on.\r\n   * This is often 0 (zero) as initially it's not known.\r\n   */\r\n  appId: 'appId',\r\n\r\n  /**\r\n   * Selection of what apps should be shown by the dialog\r\n   * this is an optional parameter\r\n   */\r\n  apps: 'apps',\r\n\r\n  /** Context: Module we're on */\r\n  moduleId: 'mid',\r\n\r\n  /** Context: ContentBlock we're on */\r\n  contentBlockId: 'cbid',\r\n};\r\n","/* Constants for i18n */\r\n\r\nexport const PrimaryUiLanguage = 'en';\r\nexport const SupportedLanguages = ['en', 'de', 'es', 'fr', 'it', 'uk'];\r\nexport const i18nPrefix = 'TemplatePicker.LayoutElement';\r\nexport const pathToI18n = './i18n/';\r\nexport const i18nExtension = '.js';\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, switchMap, share, distinctUntilChanged } from 'rxjs/operators';\r\nimport { Constants } from './constants';\r\nimport { ContextDto } from '../../../../shared';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BackendSettings {\r\n\r\n  appId = new BehaviorSubject<number>(0);\r\n\r\n  data: Observable<ContextDto>\r\n\r\n  constructor(http: HttpClient) {\r\n    this.data = this.appId.pipe(\r\n      distinctUntilChanged(),\r\n      switchMap(id => http.get<{ Context: ContextDto }>(`${Constants.webApiDialogContext}?appId=${id}`)),\r\n      map(bundle => bundle.Context),\r\n      share()\r\n    );\r\n  }\r\n\r\n  setApp(id: number) {\r\n    this.appId.next(id);\r\n  }\r\n}\r\n","export const Constants = {\r\n  logName: 'quick-edit',\r\n\r\n  //#region WebApi Endpoints used: 2sxc\r\n  webApiDialogContext: 'admin/dialog/settings',\r\n  webApiInstallPackage: 'sys/install/RemotePackage',\r\n  webApiRemoteInstaller: 'sys/install/RemoteWizardUrl',\r\n  webApiGetTemplates: 'cms/block/Templates',\r\n  webApiGetTypes: 'cms/block/ContentTypes',\r\n  webApiGetApps: 'cms/block/Apps',\r\n  webApiSetApp: 'cms/block/App',\r\n  //#endregion\r\n};\r\n\r\nexport * from '../../../../connect-parts/inpage-quick-dialog/quick-dialog-params';\r\n","import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n// Todo: probably not needed any more, since now Subjects are automatically observables\r\nexport class BehaviorObservable<T> extends Observable<T> {\r\n  private constructor() {\r\n    super();\r\n  }\r\n  /** The source subject */\r\n  subject: BehaviorSubject<T>;\r\n\r\n  /** will reset back to the initial value */\r\n  reset: () => void;\r\n\r\n  /** check if it's the initial object */\r\n  isInitial: () => boolean;\r\n\r\n  /** the initial object */\r\n  initialValue: T;\r\n\r\n  /** shorthand to push next value */\r\n  next: (value: T) => void;\r\n\r\n  static create<T>(initialValue: T): BehaviorObservable<T> {\r\n    const subj = new BehaviorSubject<T>(initialValue);\r\n    const obs = subj.asObservable() as BehaviorObservable<T>;\r\n    obs.initialValue = initialValue;\r\n    obs.subject = subj;\r\n    obs.reset = () => {\r\n      obs.subject.next(obs.initialValue);\r\n    };\r\n    obs.isInitial = () => {\r\n      return obs.subject.value === obs.initialValue;\r\n    };\r\n    obs.next = (value: T) => obs.subject.next(value);\r\n    return obs;\r\n  }\r\n}\r\n","\r\n/** configuration what to debug directly to the screen and what to keep secret */\r\nexport const DebugConfig = {\r\n\r\n  /** logger configuration */\r\n  logger: {\r\n    /** should we stream messages directly to console */\r\n    logToConsole: false,\r\n    /** should we also log internal events */\r\n    internals: false,\r\n    /** allow url param ?debug=true to turn on logging */\r\n    urlDebugEnablesAll: true,\r\n    /** if url param ?debug=true also enables all live-logging */\r\n    urlDebugActivatesLive: true\r\n  },\r\n\r\n  /** api debugging */\r\n  api: {\r\n    enabled: false,\r\n    streams: false,\r\n  },\r\n\r\n  /** template picker */\r\n  picker: {\r\n    enabled: false,\r\n    streams: false,\r\n    showDebugPanel: false\r\n  },\r\n\r\n  /** template state */\r\n  state: {\r\n    enabled: false,\r\n    streams: false,\r\n    inits: false,\r\n  },\r\n\r\n  /** content-type processor */\r\n  typeProcessor: false,\r\n  /** template processor */\r\n  templateProcessor: false,\r\n};\r\n","import { Constants } from './constants';\r\nimport { DebugConfig } from 'app/debug-config';\r\n\r\n\r\nexport class Log {\r\n  /** global state to determine if logging to console should be done or not */\r\n  public static forceLogToConsole = false;\r\n\r\n  name = '';\r\n  autoDump = DebugConfig.logger.logToConsole;\r\n  logs = new Array<string>();\r\n  parent: Log;\r\n  loggers: any = new Object();\r\n\r\n  constructor (name?: string, parent?: Log) {\r\n    this.name = name;\r\n    this.parent = parent;\r\n  }\r\n\r\n  add(msg: string, ...args: any[]): void {\r\n    this.logs.push(msg);\r\n    if (this.name) msg = this.name + ':' + msg;\r\n    if (this.parent) this.parent.logs.push(msg);\r\n    if (this.autoDump || Log.forceLogToConsole) {\r\n      arguments[0] = Constants.logName + ': ' + msg;\r\n      console.log.apply(null, arguments);\r\n    }\r\n  }\r\n\r\n  subLog(name: string, autoDump?: boolean): Log {\r\n    const newLog = new Log(name, this);\r\n    this.loggers[name] = newLog;\r\n    newLog.autoDump = typeof(autoDump) === 'boolean'\r\n      ? autoDump : this.autoDump;\r\n    if (DebugConfig.logger.internals)\r\n      this.add(`logger: subLog(${name}, ${autoDump}) resulting in autoDump=${newLog.autoDump}`);\r\n\r\n    return newLog;\r\n  }\r\n\r\n  dump(): void {\r\n    this.add('dumping to console');\r\n    console.log(`Log dump for '${this.name}'`, this);\r\n  }\r\n\r\n  public static configureRuntimeLogging(state: boolean) {\r\n    if(DebugConfig.logger.urlDebugActivatesLive)\r\n      Log.forceLogToConsole = state;\r\n  }\r\n}\r\n\r\n\r\nexport const log = new Log();\r\n\r\nwindow['logger'] = log;\r\n","export const cViewWithoutContent = '_LayoutElement';\r\nexport const cAppActionImport = -1;\r\n","import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { i18nPrefix } from 'app/i18n';\r\nimport { cViewWithoutContent } from '../constants';\r\nimport { ContentType } from '../content-type';\r\nimport { Template } from '../template';\r\n\r\n// const debug = true;\r\nconst log = parentLog.subLog('ct-processor', DebugConfig.typeProcessor);\r\n\r\n/**\r\n * This is a helper to do various transformations for the list of content-types\r\n */\r\n@Injectable()\r\nexport class ContentTypesProcessor {\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  public buildList(allTypes: ContentType[], type: ContentType, allTemplates: Template[], template: Template): ContentType[] {\r\n    log.add('buildList(...) of content-types to show');\r\n    let unhide = this.unhideSelectedType(allTypes, type, template);\r\n    unhide = this.addEmptyTypeIfNeeded(unhide, allTemplates);\r\n    const filtered = this.hideNecessaryTypes(unhide);\r\n    return this.sortTypes(filtered);\r\n  }\r\n\r\n  private hideNecessaryTypes(types: ContentType[]): ContentType[] {\r\n    return types.filter(t => !t.IsHidden);\r\n  }\r\n\r\n  /**\r\n   * Ensure current content-type is visible, just in case it's configured as hidden\r\n   */\r\n  private unhideSelectedType(contentTypes: ContentType[], currentType: ContentType, currentTemplate: Template): ContentType[] {\r\n    contentTypes\r\n      .filter(c => (currentTemplate?.TemplateId === c.TemplateId) || (c.StaticName === currentType?.StaticName))\r\n      .forEach(c => c.IsHidden = false);\r\n    return contentTypes;\r\n  }\r\n\r\n\r\n  /**\r\n   * add an empty content-type for UI selection if any template would support \"no content-type\"\r\n   */\r\n  private addEmptyTypeIfNeeded(contentTypes: ContentType[], templates: Template[]): ContentType[] {\r\n    const layoutElementLabel = (this.translate && this.translate.instant(i18nPrefix))\r\n      || cViewWithoutContent; // if translate is not ready, use the nicer label\r\n\r\n    // add option for empty content type\r\n    if (templates && templates.find(t => t.ContentTypeStaticName === '')) {\r\n      contentTypes = contentTypes.slice(); // copy it first to not change original\r\n      contentTypes.push({\r\n        StaticName: cViewWithoutContent,\r\n        Name: i18nPrefix,\r\n        Thumbnail: null,\r\n        Label: layoutElementLabel,\r\n        IsHidden: false,\r\n      } as ContentType);\r\n    }\r\n    return contentTypes;\r\n  }\r\n\r\n  /**\r\n   * Sort the types by label\r\n   */\r\n  private sortTypes(contentTypes: ContentType[]): ContentType[] {\r\n    // https://stackoverflow.com/questions/51165/how-to-sort-strings-in-javascript\r\n    return contentTypes.sort((a, b) => ('' + a.Label).localeCompare(b.Label));\r\n  }\r\n\r\n  /**\r\n   * Sort the types by IsDefault DESC and Label ASC\r\n  */\r\n  private static sortTypesWithDefault(contentTypes: ContentType[]): ContentType[] {\r\n    return contentTypes.sort((a, b) => {\r\n      // first sort by IsDefault DESC\r\n      if (a.IsDefault > b.IsDefault) return -1;\r\n      if (a.IsDefault < b.IsDefault) return 1;\r\n      // than sort by Label ASC\r\n      return ('' + a.Label).localeCompare(b.Label);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get first default or alphabetically\r\n   */\r\n  static firstDefault(contentTypes: ContentType[]): ContentType {\r\n    return this.sortTypesWithDefault([...contentTypes])[0];\r\n  }\r\n\r\n  // tslint:disable-next-line:member-ordering\r\n  static findContentTypesById(contentTypes: ContentType[], selectedContentTypeId: string): ContentType {\r\n    log.add(`findContentTypesById(..., ${selectedContentTypeId}`);\r\n    return selectedContentTypeId\r\n      ? contentTypes.find(c => c.StaticName === selectedContentTypeId)\r\n      : null;\r\n  }\r\n\r\n}\r\n","import { Template } from '../template';\r\nimport { ContentType } from '../content-type';\r\nimport { App } from 'app/core/app';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\n\r\nconst log = parentLog.subLog('TemplateProcessor', DebugConfig.templateProcessor);\r\n\r\nexport class TemplateProcessor {\r\n  static pickSelected(selected: Template, templates: Template[], type: ContentType, app: App): Template {\r\n    log.add(`pickSelected(selected: ${selected && selected.TemplateId}, templates: ${templates.length})`)\r\n    // if one is selected, return that; but only if it's in the list of possible templates\r\n    if (selected && templates.find(t => t.TemplateId === selected.TemplateId))\r\n      return selected;\r\n\r\n    // if none is selected, return the first (preferred default DESC); assuming a type or app has been selected\r\n    if ((type || app) && templates && templates.length) return this.sortTemplates([...templates])[0];\r\n\r\n    // nothing valid\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Sort the templates by IsDefault DESC and Name ASC\r\n   */\r\n  static sortTemplates(templates: Template[]): Template[] {\r\n    // https://stackoverflow.com/questions/51165/how-to-sort-strings-in-javascript\r\n    return templates.sort((a, b) => {\r\n      // first sort by IsDefault DESC\r\n      if (a.IsDefault > b.IsDefault) return -1;\r\n      if (a.IsDefault < b.IsDefault) return 1;\r\n      // than by Name ASC\r\n      return ('' + a.Name).localeCompare(b.Name);\r\n    });\r\n  }\r\n}\r\n","export class App {\r\n    AppId: number;\r\n    Name: string;\r\n    Thumbnail: string;\r\n    SupportsAjaxReload: boolean;\r\n    Version: string;\r\n    VersionMain: number;\r\n\r\n    constructor(json: any) {\r\n        Object.assign(this, json);\r\n\r\n        try {\r\n            this.VersionMain = parseInt(this.Version.substr(0,2));\r\n        } catch(e) { /* ignore */}\r\n    }\r\n\r\n}\r\n","import { combineLatest } from 'rxjs';\r\nimport { map, startWith, share } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { App } from 'app/core/app';\r\nimport { ContentType } from 'app/template-picker/content-type';\r\nimport { Template } from 'app/template-picker/template';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { Constants } from 'app/core/constants';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\nimport { Config } from '../config';\r\n\r\nconst log = parentLog.subLog('api', DebugConfig.api.enabled);\r\nconst uninitializedList = []; // this must be created as a variable, so we can check later if it's still the original or a new empty list\r\n@Injectable()\r\nexport class PickerService {\r\n  // #region public properties\r\n  /** all apps of the zone */\r\n  apps$ = BehaviorObservable.create<App[]>(uninitializedList);\r\n\r\n  /** all types of this app */\r\n  contentTypes$ = BehaviorObservable.create<ContentType[]>(uninitializedList);\r\n\r\n  /** templates/views of this app */\r\n  templates$ = BehaviorObservable.create<Template[]>(uninitializedList);\r\n\r\n  /**\r\n   * ready is true when all necessary data is loaded\r\n   * note that apps are not loaded if not needed */\r\n  ready$ = new Observable<boolean>();\r\n  // #endregion\r\n\r\n  // #region private properties\r\n  private mustLoadApps = false;\r\n  // all the subjects - these are all multi-cast, so don't use share!\r\n  // #endregion\r\n\r\n  constructor(private http: HttpClient) {\r\n    log.add('constructor()');\r\n    this.buildObservables();\r\n    this.enableLogging();\r\n  }\r\n\r\n  private buildObservables() {\r\n    log.add(`buildObservables()`);\r\n\r\n    // ready requires all to have data, but app can be skipped if not required\r\n    this.ready$ = combineLatest([this.apps$, this.contentTypes$, this.templates$])\r\n      .pipe(\r\n        map(([a, ct, t]) => ({ apps: a, types: ct, templates: t })),\r\n        map(set => set.templates !== uninitializedList\r\n          && set.types !== uninitializedList\r\n          && (!this.mustLoadApps || !!(set.apps && set.apps !== uninitializedList))),\r\n        startWith(false),\r\n        share());\r\n  }\r\n\r\n  public saveAppId(appId: string, reloadParts: boolean): Promise<any> {\r\n    log.add(`saveAppId(${appId}, ${reloadParts})`);\r\n    // skip doing anything here, if we're in content-mode (which doesn't use/change apps)\r\n    if (!this.loadApps) throw new Error(`can't save app, as we're not in app-mode`);\r\n    return this.http.post(`${Constants.webApiSetApp}?appId=${appId}`, {}).toPromise();\r\n  }\r\n\r\n\r\n\r\n  public initLoading(requireApps: boolean): Observable<any> {\r\n    log.add(`initLoading(requireApps: ${requireApps})`);\r\n    this.mustLoadApps = requireApps;\r\n    if (requireApps) this.loadApps();\r\n    return this.reloadAppParts();\r\n  }\r\n\r\n  public reloadAppParts(): Observable<any> {\r\n    return combineLatest([this.loadTemplates(), this.loadContentTypes()]);\r\n  }\r\n\r\n  /**\r\n   * load templates - is sometimes repeated if the app changes\r\n   */\r\n  public loadTemplates(): Observable<any> {\r\n    log.add('loadTemplates()');\r\n    this.templates$.reset();\r\n    const obs = this.http.get<Template[]>(Constants.webApiGetTemplates)\r\n      .pipe(share()); // ensure it's only run once\r\n\r\n    obs.subscribe(response => this.templates$.next(response || []));\r\n    return obs;\r\n  }\r\n\r\n  /**\r\n   * Load the ContentTypes - only needed on first initialization\r\n   */\r\n  private loadContentTypes(): Observable<any> {\r\n    log.add(`loadContentTypes()`);\r\n    this.contentTypes$.reset();\r\n    const obs = this.http.get<ContentType[]>(Constants.webApiGetTypes)\r\n      .pipe(share()); // ensure it's only run once\r\n    obs.pipe(map(response => (response || []).map(ct => {\r\n        ct.Label = ct.Properties?.Label ?? ct.Name;\r\n        return ct;\r\n      })))\r\n      .subscribe(json => this.contentTypes$.next(json));\r\n    return obs;\r\n  }\r\n\r\n  /**\r\n   * Load all Apps, only needed on first initialization\r\n   */\r\n  private loadApps(): Observable<any> {\r\n    const alreadyLoaded = !this.apps$.isInitial();\r\n    log.add(`loadApps() - skip:${alreadyLoaded}`);\r\n    if (alreadyLoaded) return;\r\n\r\n    const appsFilter = Config.apps();\r\n\r\n    const obs = this.http.get<any[]>(`${Constants.webApiGetApps}?apps=${appsFilter}`)\r\n      .pipe(share()); // ensure it's only run once\r\n\r\n    obs.subscribe(response => this.apps$.subject.next(response.map(a => new App(a))));\r\n    return obs;\r\n  }\r\n\r\n  private enableLogging() {\r\n    const streamLog = parentLog.subLog('api-streams', DebugConfig.api.streams);\r\n    this.apps$.subscribe(a => streamLog.add(`app$:${a && a.length}`));\r\n    this.contentTypes$.subscribe(ct => streamLog.add(`contentTypes$:${ct && ct.length}`));\r\n    this.templates$.subscribe(t => streamLog.add(`templates$:${t && t.length}`));\r\n    this.ready$.subscribe(r => streamLog.add(`ready$:${r}`));\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { cViewWithoutContent } from './constants';\r\nimport { Template } from './template';\r\nimport { ContentType } from './content-type';\r\n\r\n@Pipe({\r\n  name: 'templateFilter'\r\n})\r\nexport class TemplateFilterPipe implements PipeTransform {\r\n\r\n\r\n  transform(templates: Template[], args: {isContent: boolean, contentType: ContentType } ): Template[] {\r\n\r\n    const typeId = args.contentType ? args.contentType.StaticName : undefined;\r\n\r\n    // in case we're filtering for the special \"empty\" code, use empty in the filter\r\n    const typeNameFilter = typeId === cViewWithoutContent\r\n      ? ''\r\n      : (typeId || '');\r\n\r\n    return templates\r\n      .filter(t => !t.IsHidden)\r\n      .filter(t => !args.isContent || t.ContentTypeStaticName === typeNameFilter);\r\n  }\r\n}\r\n","\r\n// #region imports\r\nimport { Injectable } from '@angular/core';\r\nimport { App } from 'app/core/app';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { IQuickDialogConfig } from 'app/interfaces/shared';\r\nimport { combineLatest, merge, Observable } from 'rxjs';\r\nimport { debounceTime, filter, map, scan, share, startWith, tap } from 'rxjs/operators';\r\nimport { ContentType } from './content-type';\r\nimport { ContentTypesProcessor } from './data/content-types-processor.service';\r\nimport { TemplateProcessor } from './data/template-processor';\r\nimport { PickerService } from './picker.service';\r\nimport { Template } from './template';\r\nimport { TemplateFilterPipe } from './template-filter.pipe';\r\n\r\n// #endregion\r\n\r\nconst log = parentLog.subLog('state', DebugConfig.state.enabled);\r\n\r\n@Injectable()\r\nexport class CurrentDataService {\r\n  /** Currently selected app */\r\n  app$: Observable<App>;\r\n\r\n  /** Relevant types */\r\n  types$: Observable<ContentType[]>;\r\n\r\n  /** The currently selected type */\r\n  type$: Observable<ContentType>;\r\n\r\n  /** Stream containing the currently selected template or null if not selected */\r\n  template$: Observable<Template>;\r\n\r\n  /** all templates relevant for the UI */\r\n  templates$: Observable<Template[]>;\r\n\r\n  private appId$ = BehaviorObservable.create<number>(null);\r\n  private initialTypeId$ = BehaviorObservable.create<string>(null);\r\n  private initialTemplateId$ = BehaviorObservable.create<number>(null);\r\n  private selectedType$ = BehaviorObservable.create<ContentType>(null);\r\n  private selectedTemplate$ = BehaviorObservable.create<Template>(null);\r\n\r\n\r\n  private config: IQuickDialogConfig;\r\n\r\n  constructor(\r\n    private api: PickerService,\r\n    private templateFilter: TemplateFilterPipe,\r\n    private ctProcessor: ContentTypesProcessor\r\n  ) {\r\n    this.buildBasicObservables();\r\n  }\r\n\r\n  private buildBasicObservables() {\r\n    // app-stream should contain selected app, once the ID is known - or null\r\n    this.app$ = combineLatest([\r\n      this.api.apps$,\r\n      this.appId$]).pipe(map(([apps, appId]) => apps.find(a => a.AppId === appId)));\r\n\r\n    // current type should be either the initial type, or a manually selected type\r\n    const initialType$ = combineLatest([this.initialTypeId$, this.api.contentTypes$])\r\n      .pipe(map(([typeId, all]) => ContentTypesProcessor.findContentTypesById(all, typeId)));\r\n    this.type$ = merge(initialType$, this.selectedType$).pipe(\r\n      startWith(null as ContentType),\r\n      share());\r\n\r\n    // the templates-list is always filtered by the currently selected type\r\n    this.templates$ = combineLatest([this.api.templates$, this.type$])\r\n      .pipe(map(([all, current]) => this.findTemplatesForTypeOrAll(all, current)))\r\n      .pipe(startWith(new Array<Template>()));\r\n\r\n    // the current template is either the last selected, or auto-selected when conditions change\r\n    const initialTemplate$ = combineLatest([\r\n      this.initialTemplateId$,\r\n      this.api.templates$])\r\n      .pipe(\r\n        map(([id, templates]) => templates.find(t => t.TemplateId === id)),\r\n        filter(t => t != null), // only allow new values which are not null, to guarantee later template$ updates don't affect this\r\n        startWith(null as Template),\r\n        share());\r\n\r\n    const selected$ = merge(initialTemplate$, this.selectedTemplate$.pipe(filter(t => t !== null)));\r\n    this.template$ = combineLatest([\r\n      selected$,\r\n      this.templates$,\r\n      this.type$,\r\n      this.app$]).pipe(\r\n        map(([selected, templates, type, app]) => TemplateProcessor.pickSelected(selected, templates, type, app)),\r\n        startWith(null as Template),\r\n        share(),\r\n      );\r\n\r\n    // construct list of relevant types for the UI\r\n    this.types$ = combineLatest([\r\n      this.api.contentTypes$,\r\n      this.type$,\r\n      this.api.templates$,\r\n      this.template$])\r\n      .pipe(map(([types, type, templates, template]) => this.ctProcessor.buildList(types, type, templates, template)));\r\n  }\r\n\r\n  init(config: IQuickDialogConfig): Observable<boolean> {\r\n    this.config = config;\r\n    // app-init is ready, if it has an app or doesn't need to init one\r\n    log.add(`initializing with config:${JSON.stringify(config)}`, config);\r\n    const appReady$ = this.app$.pipe(\r\n      map(a => config.isContent || !!a),\r\n      startWith(config.isContent || !config.appId)\r\n    );\r\n\r\n    const typeReady$ = this.type$.pipe(\r\n      map(t => !!t),\r\n      scan((acc, value) => acc || value, !config.contentTypeId)\r\n    );\r\n    const templReady$ = this.template$.pipe(\r\n      map(t => !!t),\r\n      debounceTime(100), // need to debounce, because the template might have a value and change again\r\n      startWith(!config.templateId)\r\n    );\r\n\r\n    const loadAll$ = combineLatest([appReady$, templReady$, typeReady$])\r\n      .pipe(map(set => set[0] && set[1] && set[2]));\r\n\r\n    this.initLogging(appReady$, typeReady$, templReady$, loadAll$);\r\n\r\n    // automatically set the app, type and template\r\n    this.activateCurrentApp(config.appId);\r\n    this.initialTypeId$.next(config.contentTypeId);\r\n    this.initialTemplateId$.next(config.templateId);\r\n\r\n    return loadAll$;\r\n  }\r\n\r\n  private initLogging(inita$: Observable<boolean>,\r\n    inittyp$: Observable<boolean>,\r\n    initt$: Observable<boolean>,\r\n    initAll$: Observable<boolean>): void {\r\n    const slog = log.subLog('stream', DebugConfig.state.streams);\r\n    this.type$.subscribe(t => slog.add(`type$ update:'${t && t.Label}'`, t));\r\n    this.app$.subscribe(a => slog.add(`app$ update:'${a && a.AppId}'`, a));\r\n    this.template$.subscribe(t => slog.add(`template$ update:'${t && t.TemplateId}'`, t));\r\n    this.templates$.subscribe(t => slog.add(`templates$ count:'${t && t.length}'`, t));\r\n    this.types$.subscribe(t => slog.add(`types$ count:'${t && t.length}'`, t));\r\n    this.selectedTemplate$.subscribe(t => slog.add(`selectedTemplate$: ${t && t.TemplateId}`));\r\n\r\n    const initLog = log.subLog('stream-init', DebugConfig.state.inits);\r\n    this.initialTypeId$.subscribe(t => initLog.add(`initial TypeId:'${t}'`, t));\r\n    this.initialTemplateId$.subscribe(t => initLog.add(`initial TemplateId:'${t}'`, t));\r\n    inita$.subscribe(t => initLog.add(`init app$`, t));\r\n    inittyp$.subscribe(t => initLog.add(`init type$`, t));\r\n    initt$.subscribe(t => initLog.add(`init temp$`, t));\r\n    initAll$.subscribe(t => initLog.add(`init all$`, t));\r\n  }\r\n\r\n\r\n\r\n  //#region activate calls from outside\r\n  activateCurrentApp(appId: number) {\r\n    log.add(`activateApp(${appId})`);\r\n    this.appId$.next(appId);\r\n  }\r\n  activateType(contentType: ContentType) {\r\n    log.add(`activateType(${contentType.Name})`);\r\n    this.selectedType$.next(contentType);\r\n  }\r\n  activateTemplate(template: Template) {\r\n    log.add(`activateTemplate(${template.TemplateId})`);\r\n    this.selectedTemplate$.next(template);\r\n  }\r\n  //#endregion\r\n\r\n  private findTemplatesForTypeOrAll(allTemplates: Template[], contentType: ContentType): Template[] {\r\n    return this.templateFilter.transform(allTemplates, { contentType, isContent: this.config.isContent });\r\n  }\r\n\r\n}\r\n","\r\nimport {of as observableOf } from 'rxjs';\r\n\r\nimport {switchMap} from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Constants } from 'app/core/constants';\r\n\r\n@Injectable()\r\nexport class InstallerService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  installPackages(packages: any[], step: Function): Observable<any> {\r\n    return packages.reduce((t: Observable<Response>, c) => t.pipe(\r\n        switchMap(() => {\r\n          if (!c.url) return observableOf(true);\r\n          step(c);\r\n          return <Observable<any>>this.http.post(`${Constants.webApiInstallPackage}?packageUrl=${c.url}`, {});\r\n        })), observableOf(true));\r\n  }\r\n}\r\n","\r\nimport { startWith, map, tap } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { log } from 'app/core/log';\r\nimport { Constants } from 'app/core/constants';\r\n\r\n@Injectable()\r\nexport class GettingStartedService {\r\n  gettingStarted$: Observable<string>;\r\n  ready$ = new Observable<boolean>();\r\n\r\n  private gettingStartedSubject: Subject<string> = new Subject<string>();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.gettingStarted$ = this.gettingStartedSubject.asObservable();\r\n    this.ready$ = this.gettingStarted$.pipe(\r\n      map(() => true),\r\n      startWith(false));\r\n\r\n    this.ready$.pipe(tap(r => log.add(`ready getting started:${r}`))).subscribe();\r\n  }\r\n\r\n  public loadGettingStarted(isContentApp: boolean): void {\r\n    this.http.get<string>(`${Constants.webApiRemoteInstaller}?isContentApp=${isContentApp}`)\r\n      .subscribe(json => this.gettingStartedSubject.next(json));\r\n  }\r\n\r\n}\r\n","<div class=\"progress\" *ngIf=\"showProgress\">\r\n  <mat-progress-spinner [mode]=\"'indeterminate'\"></mat-progress-spinner>\r\n  <span>Installing {{ currentPackage?.displayName }}..</span>\r\n</div>\r\n<div *ngIf=\"ready\">\r\n  <iframe class=\"fr-getting-started\" id=\"frGettingStarted\" [src]=\"remoteInstallerUrl\" width=\"100%\" height=\"300px\"></iframe>\r\n</div>\r\n","\r\nimport { tap, switchMap, map, filter, debounceTime, catchError } from 'rxjs/operators';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\nimport { InstallerService } from 'app/installer/installer.service';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { fromEvent, of, Subscription } from 'rxjs';\r\nimport { GettingStartedService } from './getting-started.service';\r\nimport { Config } from '../config';\r\n\r\ndeclare const $2sxc: any;\r\n\r\n@Component({\r\n  selector: 'app-installer',\r\n  templateUrl: './installer.component.html',\r\n  styleUrls: ['./installer.component.scss']\r\n})\r\nexport class InstallerComponent implements OnInit {\r\n  @Input() isContentApp: boolean;\r\n\r\n  showProgress: boolean;\r\n  currentPackage: any;\r\n  remoteInstallerUrl = '';\r\n  ready = false;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    private installer: InstallerService,\r\n    private api: GettingStartedService,\r\n    private sanitizer: DomSanitizer,\r\n  ) {\r\n    this.subscriptions.push(\r\n      this.api.gettingStarted$.subscribe(url => {\r\n        this.remoteInstallerUrl = <string>this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n        this.ready = true;\r\n      }));\r\n\r\n    window.bootController.rebootRequest$.pipe(\r\n      debounceTime(1000))\r\n      .subscribe(() => this.destroy());\r\n  }\r\n\r\n  destroy(): void {\r\n    this.subscriptions\r\n      .forEach(sub => sub.unsubscribe());\r\n    console.log('destroy subs', this.subscriptions);\r\n  }\r\n\r\n  ngOnInit() {\r\n    let alreadyProcessing = false;\r\n    this.api.loadGettingStarted(this.isContentApp);\r\n\r\n    this.subscriptions.push(fromEvent(window, 'message').pipe(\r\n\r\n      // Ensure only one installation is processed.\r\n      filter(() => !alreadyProcessing),\r\n\r\n      // Get data from event.\r\n      map((evt: MessageEvent) => {\r\n        try {\r\n          return JSON.parse(evt.data);\r\n        } catch (e) {\r\n          return void 0;\r\n        }\r\n      }),\r\n\r\n      // Check if data is correct.\r\n      filter(data => data\r\n        && Number(data.moduleId) === Config.moduleId()\r\n        && data.action === 'install'),\r\n\r\n      // Get packages from data.\r\n      map(data => Object.values(data.packages)),\r\n\r\n      // Show confirm dialog.\r\n      filter(packages => {\r\n        const packagesDisplayNames = packages\r\n          .reduce((t, c) => `${t} - ${(c as any).displayName}\\n`, '');\r\n\r\n        const msg = `Do you want to install these packages?\r\n\r\n${packagesDisplayNames}\r\nThis takes about 10 seconds per package. Don't reload the page while it's installing.`;\r\n        return confirm(msg);\r\n      }),\r\n\r\n      switchMap(packages => {\r\n        alreadyProcessing = true;\r\n        this.showProgress = true;\r\n        return this.installer.installPackages(packages, p => this.currentPackage = p);\r\n      }),\r\n\r\n      tap(() => {\r\n        this.showProgress = false;\r\n        alert('Installation complete 👍');\r\n        window.top.location.reload();\r\n      }),\r\n\r\n      catchError(error => {\r\n        console.error('Error: ', error);\r\n        this.showProgress = false;\r\n        alreadyProcessing = false;\r\n        var errorMsg = `An error occurred: ${error.error?.Message ?? error.error?.message ?? ''}\r\n\r\n${error.message}\r\n\r\nPlease try again later or check how to manually install content-templates: https://azing.org/2sxc/r/0O4OymoA`;\r\n        alert(errorMsg);\r\n        return of(error);\r\n      }),\r\n    ).subscribe());\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'filterByPropertyValue' })\r\nexport class FilterByPropertyValuePipe implements PipeTransform {\r\n  transform<T>(input: T[], propertyName: string, filterValue: string): T[] {\r\n    return input?.filter(i => i[propertyName]?.toLocaleLowerCase?.().includes?.(filterValue?.toLocaleLowerCase?.())) ?? input;\r\n  }\r\n}\r\n","\r\n<div class=\"content\">\r\n\r\n  <!-- debug info section -->\r\n  <div *ngIf=\"showDebug\">\r\n    <h4>Debug 2sxc 11 / ng 11</h4>\r\n    <ul>\r\n      <li>Types: {{ types?.length }}, current: {{contentType?.StaticName}}, default: {{defaultContentType?.Label}}</li>\r\n      <li>Apps: {{ (apps$ | async)?.length }}, current: {{app?.AppId }} </li>\r\n      <li>Templates: {{templates?.length}}, current: {{template?.TemplateId}}</li>\r\n      <li>Config: isContent='{{isContent}}' Ready: {{ready}} </li>\r\n      <li>Tab to show: '{{tabIndex}}' / preventTypeSwitch '{{preventTypeSwitch}}' / preventAppSwitch '{{preventAppSwich}}'</li>\r\n    </ul>\r\n  </div>\r\n\r\n  <!-- loading indicator -->\r\n  <mat-progress-bar [ngStyle]=\"{ opacity: ready ? 0 : 1 }\" [mode]=\"'indeterminate'\"></mat-progress-bar>\r\n\r\n  <!-- main dialog, starting with save/cancel button -->\r\n  <div class=\"card\"\r\n    [ngClass]=\"{ blocked: !ready }\"\r\n  >\r\n    <div class=\"top-controls\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n      <button mat-fab *ngIf=\"template\" (click)=\"persistTemplate(template)\" [attr.title]=\"'TemplatePicker.Save' | translate\">\r\n        <mat-icon>check</mat-icon>\r\n      </button>\r\n      <button mat-mini-fab class=\"secondary\" *ngIf=\"showCancel\" (click)=\"cancel()\" [attr.title]=\"('TemplatePicker.' + (isContent ? 'Cancel' : 'Close')) | translate\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- tabs -->\r\n    <mat-tab-group [(selectedIndex)]=\"tabIndex\">\r\n      <mat-tab>\r\n        <ng-template mat-tab-label>\r\n          {{(isContent\r\n            ? (contentType?.Name || ('TemplatePicker.ContentTypePickerDefault' | translate))\r\n            : (app?.Name || ('TemplatePicker.AppPickerDefault' | translate)))}}\r\n        </ng-template>\r\n\r\n        <!-- App Selector -->\r\n        <div *ngIf=\"!isContent; else contentApp\" class=\"tiles\" [ngClass]=\"{ 'show-installer': !isBadContextForInstaller && showInstaller }\">\r\n\r\n          <div class=\"tile\"\r\n            [ngClass]=\"{ active: app?.AppId === a.AppId, blocked: preventTypeSwitch }\"\r\n            [attr.title]=\"a.Name\"\r\n            (click)=\"selectApp(app, a)\"\r\n            (dblclick)=\"switchTab()\" *ngFor=\"let a of apps$ | async | filterByPropertyValue:'Name':appFilter\">\r\n            <div class=\"bg\">\r\n              <img *ngIf=\"a.Thumbnail !== null && a.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"a.Thumbnail + '?w=176&h=176'\">\r\n              <div *ngIf=\"a.Thumbnail === null || a.Thumbnail === ''\" class=\"bg-icon\">\r\n                <mat-icon>star</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"version\"><span>v{{a.VersionMain}}</span></div>\r\n\r\n            <div class=\"title\" [ngClass]=\"{ show: a.Thumbnail === null || a.Thumbnail === '' }\">\r\n              <span>{{a.Name}}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- install and manage buttons -->\r\n          <div class=\"tile config\" *ngIf=\"showAdvanced\" (click)=\"run('app-import')\" [attr.title]=\"'TemplatePicker.Install' | translate\">\r\n            <div class=\"bg\">\r\n              <div class=\"bg-icon\">\r\n                <mat-icon>get_app</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title show\">\r\n              <span>{{\"TemplatePicker.Install\" | translate}}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"tile config\" *ngIf=\"showAdvanced\" (click)=\"run('apps')\" [attr.title]=\"'TemplatePicker.Zone' | translate\">\r\n            <div class=\"bg\">\r\n              <div class=\"bg-icon\">\r\n                <mat-icon>apps</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title show\">\r\n              <span>{{\"TemplatePicker.Zone\" | translate}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Content-Type selection (when not a generic app, but the default content-app) -->\r\n        <ng-template #contentApp>\r\n          <div class=\"tiles\" [ngClass]=\"{ 'show-installer': !isBadContextForInstaller && showInstaller }\">\r\n            <div mat-button class=\"tile\"\r\n              [ngClass]=\"{ active: contentType ? contentType?.StaticName === c.StaticName : defaultContentType?.StaticName === c.StaticName, blocked: preventTypeSwitch }\"\r\n              [attr.title]=\"(c.Label | translate) + (showDebug ? ' (' + c.StaticName + ')' : '')\"\r\n              (click)=\"selectContentType(contentType, c)\"\r\n              (dblclick)=\"switchTab()\"\r\n              *ngFor=\"let c of types | filterByPropertyValue:'Label':contentTypeFilter\"\r\n            >\r\n              <div class=\"bg\">\r\n                <img *ngIf=\"c.Thumbnail !== null && c.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"c.Thumbnail + '?w=176&h=176'\">\r\n                <div *ngIf=\"c.Thumbnail === null || c.Thumbnail === ''\" class=\"bg-icon\">\r\n                  <mat-icon>bubble_chart</mat-icon>\r\n                </div>\r\n              </div>\r\n              <div class=\"title\" [ngClass]=\"{ show: c.Thumbnail === null || c.Thumbnail === '' }\">\r\n                <span>{{c.Label}}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </mat-tab>\r\n\r\n      <!-- template selection after app/content-type selection -->\r\n      <mat-tab *ngIf=\"isContent ? contentType : app\" [label]=\"('TemplatePicker.ChangeView' | translate) + ' (' + templates.length + ')'\">\r\n        <div class=\"tiles\" [ngClass]=\"{ 'show-installer': !isBadContextForInstaller && showInstaller }\">\r\n          <mat-spinner class=\"templates-spinner\" *ngIf=\"templatesLoading$ | async\"></mat-spinner>\r\n          <div class=\"tile\"\r\n            [ngClass]=\"{ active: template?.TemplateId === t.TemplateId }\"\r\n            [attr.title]=\"t.Name + (showDebug ? ' (' + t.TemplateId + ')' : '')\"\r\n            (click)=\"selectTemplate(t)\"\r\n            *ngFor=\"let t of templates | filterByPropertyValue:'Name':templateFilter\">\r\n            <div class=\"bg\">\r\n              <img *ngIf=\"t.Thumbnail !== null && t.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"t.Thumbnail + '?w=176&h=176'\">\r\n              <div *ngIf=\"t.Thumbnail === null || t.Thumbnail === ''\" class=\"bg-icon\">\r\n                <mat-icon *ngIf=\"isContent\">view_carousel</mat-icon>\r\n                <mat-icon *ngIf=\"!isContent\">view_quilt</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title\" [ngClass]=\"{ show: t.Thumbnail === null || t.Thumbnail === '' }\">\r\n              <span>{{t.Name}}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"tile config\" *ngIf=\"showAdvanced && !isContent && app?.AppId !== null\" (click)=\"run('app')\" [attr.title]=\"'TemplatePicker.App' | translate\">\r\n            <div class=\"bg\">\r\n              <div class=\"bg-icon\">\r\n                <mat-icon>settings</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title show\">\r\n              <span>{{\"TemplatePicker.App\" | translate}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </mat-tab>\r\n      <!-- Search -->\r\n      <mat-tab disabled *ngIf=\"!(!isBadContextForInstaller && showInstaller)\">\r\n        <ng-template mat-tab-label>\r\n          <div class=\"search-field\">\r\n            <input type=\"text\" *ngIf=\"tabIndex === 0 && !isContent\" [(ngModel)]=\"appFilter\">\r\n            <input type=\"text\" *ngIf=\"tabIndex === 0 && isContent\" [(ngModel)]=\"contentTypeFilter\">\r\n            <input type=\"text\" *ngIf=\"tabIndex === 1\" [(ngModel)]=\"templateFilter\">\r\n          </div>\r\n        </ng-template>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n\r\n    <span class=\"no-install-allowed\" *ngIf=\"isBadContextForInstaller && showInstaller\">No {{isContent ? 'Content Apps' : 'Apps'}} installed yet. Please persue the installation by creating a new {{isContent ? 'Content' : 'App'}} in the root of your website.</span>\r\n    <app-installer *ngIf=\"!isBadContextForInstaller && showInstaller\" [isContentApp]=\"isContent\"></app-installer>\r\n  </div>\r\n</div>\r\n","\r\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { App } from 'app/core/app';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\nimport { Log, log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { IDialogFrameElement, IIFrameBridge, IQuickDialogConfig } from 'app/interfaces/shared';\r\nimport { ContentType } from 'app/template-picker/content-type';\r\nimport { Template } from 'app/template-picker/template';\r\nimport { combineLatest, merge, Observable, timer } from 'rxjs';\r\nimport { filter, map, skipUntil, startWith } from 'rxjs/operators';\r\nimport { BackendSettings } from '../core/backend-settings';\r\nimport { cAppActionImport } from './constants';\r\nimport { CurrentDataService } from './current-data.service';\r\nimport { ContentTypesProcessor } from './data/content-types-processor.service';\r\nimport { PickerService } from './picker.service';\r\n\r\nconst log = parentLog.subLog('picker', DebugConfig.picker.enabled);\r\n\r\n@Component({\r\n  selector: 'app-template-picker',\r\n  templateUrl: './template-picker.component.html',\r\n  styleUrls: ['./template-picker.component.scss'],\r\n})\r\nexport class TemplatePickerComponent implements OnInit {\r\n  // #region properties\r\n  /** Stream of all apps */\r\n  apps$: Observable<App[]>;\r\n\r\n  /** is cancelling possible */\r\n  showCancel = true;\r\n\r\n  /** is in the main content-app or a generic app */\r\n  isContent: boolean;\r\n\r\n  /** show advanced features (admin/host only) */\r\n  showAdvanced = false;\r\n\r\n  /** show the installer */\r\n  showInstaller = false;\r\n\r\n  /** Stream to indicate ready, for loading-indicator */\r\n  ready$: Observable<boolean>;\r\n  templatesLoading$: Observable<boolean>;\r\n\r\n  /** Tab-id, when we set it, the tab switches */\r\n  tabIndex = 0;\r\n\r\n  /** Indicate if the user is allowed to change content-types or not */\r\n  preventTypeSwitch: boolean;\r\n\r\n  /** Indicates whether the installer can be shown in this dialog or not */\r\n  isBadContextForInstaller = false;\r\n\r\n  /** The communication-object to the parent */\r\n  private bridge: IIFrameBridge;\r\n\r\n  /** internal loading state */\r\n  private loading$ = BehaviorObservable.create<boolean>(false);\r\n\r\n  /** Ajax-support changes how saving/changing is handled */\r\n  private supportsAjax: boolean;\r\n\r\n  preventAppSwich = false;\r\n\r\n  public showDebug = DebugConfig.picker.showDebugPanel;\r\n\r\n  appFilter = '';\r\n  contentTypeFilter = '';\r\n  templateFilter = '';\r\n  // #endregion\r\n\r\n  // #region data to show - using local variables, because streams didn't update correctly :(\r\n  app: App;\r\n  templates: Template[];\r\n  template: Template;\r\n  contentType: ContentType;\r\n  types: ContentType[];\r\n  defaultContentType: ContentType;\r\n  ready = false;\r\n  //#endregion\r\n\r\n  constructor(\r\n    private backendSettings: BackendSettings,\r\n    private api: PickerService,\r\n    public state: CurrentDataService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {\r\n    // get configuration from iframe-bridge and set everything\r\n    this.bridge = (<IDialogFrameElement>window.frameElement).bridge;\r\n    const dashInfo = this.bridge.getAdditionalDashboardConfig();\r\n\r\n    this.boot(dashInfo);\r\n    this.debugObservables();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.autosyncObservablesToEnsureUiUpdates();\r\n  }\r\n\r\n\r\n  private boot(dashInfo: IQuickDialogConfig) {\r\n    this.showDebug = dashInfo.debug;\r\n    Log.configureRuntimeLogging(dashInfo.debug);\r\n\r\n    // Make sure we have the latest backend settings\r\n    this.backendSettings.setApp(dashInfo.appId);\r\n    this.backendSettings.data.subscribe(settings => {\r\n      this.showAdvanced = settings.Enable?.CodeEditor ?? false;\r\n    });\r\n\r\n    // start data-loading\r\n    this.api.initLoading(!dashInfo.isContent);\r\n\r\n    // init parts, variables, observables\r\n    const initDone$ = this.state.init(dashInfo);\r\n    this.initObservables(initDone$);\r\n    this.initValuesFromBridge(dashInfo);\r\n    this.loading$.next(false);\r\n  }\r\n\r\n  private debugObservables() {\r\n    if (!DebugConfig.picker.streams) return;\r\n    this.loading$.subscribe(l => log.add(`loading$:${l}`));\r\n    this.ready$.subscribe(r => log.add(`ready$:${r}`));\r\n  }\r\n\r\n  /**\r\n   * wire up observables for this component\r\n   */\r\n  private initObservables(initDone$: Observable<boolean>): void {\r\n    const initTrue$ = initDone$.pipe(filter(t => !!t));\r\n\r\n    // wire up basic observables\r\n    this.ready$ = combineLatest([this.api.ready$, this.loading$])\r\n      .pipe(map(([r, l]) => r && !l));\r\n\r\n    // all apps are the same as provided by the api\r\n    this.apps$ = this.api.apps$;\r\n\r\n    // if the content-type or app is set, switch tabs (ignore null/empty states)\r\n    const typeOrAppReady = merge(this.state.type$, this.state.app$)\r\n      .pipe(filter(t => !!t));\r\n    combineLatest([typeOrAppReady, initTrue$])\r\n      .subscribe(_ => this.switchTab());\r\n\r\n    // once the data is known, check if installer is needed\r\n    combineLatest([this.api.templates$,\r\n      this.api.contentTypes$,\r\n      this.api.apps$,\r\n      this.api.ready$.pipe(filter(r => !!r))])\r\n      .pipe(\r\n        map(([templates, _, apps, _2]) => {\r\n          log.add('apps/templates loaded, will check if we should show installer');\r\n          this.showInstaller = this.isContent\r\n            ? templates.length === 0\r\n            : apps.filter(a => a.AppId !== cAppActionImport).length === 0;\r\n        }))\r\n      .subscribe();\r\n\r\n    // template loading is true, when the template-list or selected template are not ready\r\n    this.templatesLoading$ = combineLatest([this.state.templates$, this.state.template$])\r\n      .pipe(\r\n        map(([all, selected]) => !(all && selected)),\r\n        startWith(false)\r\n      );\r\n\r\n    // whenever the template changes, ensure the preview reloads\r\n    // but don't do this when initializing, that's why we listen to initDone$\r\n    this.state.template$.pipe(\r\n      filter(t => !!t),\r\n      skipUntil(initTrue$))\r\n      .subscribe(t => this.previewTemplate(t));\r\n  }\r\n\r\n  /** The UI doesn't update reliably :(, so we copy the data to local variables */\r\n  private autosyncObservablesToEnsureUiUpdates(): any {\r\n    this.state.app$.subscribe(a => this.app = a);\r\n    this.state.templates$.subscribe(t => this.templates = t);\r\n    this.state.template$.subscribe(t => this.template = t);\r\n    this.state.types$.subscribe(t => {\r\n      this.types = t;\r\n      this.defaultContentType = ContentTypesProcessor.firstDefault(t);\r\n    });\r\n    this.state.type$.subscribe(t => this.contentType = t);\r\n\r\n    this.ready$.subscribe(r => this.ready = r);\r\n    merge(\r\n      this.ready$,\r\n      this.state.app$,\r\n      this.state.type$,\r\n      this.state.types$,\r\n      this.state.template$,\r\n      this.state.templates$,\r\n      ).subscribe(() => this.cdRef.detectChanges());\r\n  }\r\n\r\n\r\n  private initValuesFromBridge(config: IQuickDialogConfig): void {\r\n    this.preventTypeSwitch = config.hasContent;\r\n    this.isBadContextForInstaller = config.isInnerContent;\r\n    this.isContent = config.isContent;\r\n    this.supportsAjax = this.isContent || config.supportsAjax;\r\n    this.preventAppSwich = config.hasContent;\r\n    this.showCancel = config.templateId != null;\r\n  }\r\n\r\n  //#region basic UI action binding\r\n  cancel(): void { this.bridge.cancel(); }\r\n\r\n  run(action: string): void { this.bridge.run(action); }\r\n\r\n  persistTemplate(template: Template) { this.bridge.setTemplate(template.TemplateId, template.Name, true); }\r\n\r\n  /**\r\n   * app selection from UI\r\n   */\r\n  selectApp(before: App, after: App): void {\r\n    if (before && before.AppId === after.AppId) {\r\n      this.switchTab();\r\n    } else {\r\n      this.updateApp(after);\r\n      this.templateFilter = '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * content-type selection from UI\r\n   */\r\n  selectContentType(before: ContentType, after: ContentType): void {\r\n    if (before && before.StaticName === after.StaticName) {\r\n      this.switchTab();\r\n    } else {\r\n      this.setContentType(after);\r\n      this.templateFilter = '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * activate a template from the UI\r\n   */\r\n  selectTemplate(template: Template): void {\r\n    this.state.activateTemplate(template);\r\n  }\r\n  //#endregion\r\n\r\n  private setContentType(contentType: ContentType): void {\r\n    log.add(`select content-type '${contentType.Name}'; prevent: ${this.preventTypeSwitch}`);\r\n    if (this.preventTypeSwitch) return;\r\n    this.state.activateType(contentType);\r\n  }\r\n\r\n  switchTab() {\r\n    log.add('switchTab()');\r\n    // must delay change because of a bug in the tabs-updating\r\n    timer(100).toPromise().then(_ => this.tabIndex = 1);\r\n  }\r\n\r\n\r\n  private updateApp(newApp: App): void {\r\n    // ajax-support can change as apps are changed; for ajax, maybe both the previous and new must support it\r\n    // or just new? still WIP\r\n    const ajax = newApp.SupportsAjaxReload;\r\n    log.add(`changing app to ${newApp.AppId}; prevent-switch: ${this.preventAppSwich} use-ajax:${ajax}`);\r\n    if (this.preventAppSwich) return;\r\n\r\n\r\n    this.loading$.next(true);\r\n    this.bridge.showMessage('loading App...');\r\n    const savePromise = this.api.saveAppId(newApp.AppId.toString(), ajax);\r\n\r\n    if (ajax) {\r\n      savePromise.then(() => {\r\n        log.add('saved app, will reset some stuff');\r\n        // do this after save completed, to ensure that the module is ready on the server\r\n        log.add('calling reloadAndReInit()');\r\n        this.bridge.reloadAndReInit()\r\n          .then(newConfig => this.boot(newConfig));\r\n      });\r\n    } else {\r\n      savePromise.then(() => window.parent.location.reload());\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  private previewTemplate(t: Template): void {\r\n    log.add(`previewTemplate(${t.TemplateId}), ajax is ${this.supportsAjax}`);\r\n    this.loading$.next(true);\r\n    this.bridge\r\n      .setTemplate(t.TemplateId, t.Name, false)\r\n      .then(_ => this.loading$.next(false));\r\n  }\r\n\r\n}\r\n","import { TranslateService } from '@ngx-translate/core';\r\nimport { Component, ElementRef } from '@angular/core';\r\nimport { DnnAppComponent, Context } from '@2sic.com/dnn-sxc-angular';\r\nimport { Config } from './config';\r\nimport { SupportedLanguages, langCode2, PrimaryUiLanguage } from './i18n';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BackendSettings } from './core/backend-settings';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent extends DnnAppComponent {\r\n  constructor(\r\n    public translate: TranslateService,\r\n    el: ElementRef,\r\n    context: Context,\r\n    backendSettings: BackendSettings,\r\n  ) {\r\n    super(el, context.preConfigure({ sxc: Config.getSxcInstance() }), false);\r\n    translate.addLangs(SupportedLanguages);\r\n\r\n    backendSettings.setApp(Config.appId());\r\n\r\n    backendSettings.data\r\n      .subscribe(ctxDto => {\r\n        const lang = ctxDto.Language;\r\n        translate.setDefaultLang(PrimaryUiLanguage);\r\n        translate.use(langCode2(lang.Current));\r\n      });\r\n  }\r\n}\r\n","\r\nexport * from './constants';\r\n\r\n\r\nexport function langCode2(langCode5: string) {\r\n  return langCode5.split('-')[0];\r\n}\r\n","<app-template-picker></app-template-picker>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { GettingStartedService } from 'app/installer/getting-started.service';\r\nimport { PickerService } from 'app/template-picker/picker.service';\r\nimport { CurrentDataService } from 'app/template-picker/current-data.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    GettingStartedService,\r\n    PickerService,\r\n    CurrentDataService,\r\n  ]\r\n})\r\nexport class CoreModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InstallerComponent } from './installer.component';\r\nimport { InstallerService } from 'app/installer/installer.service';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatProgressSpinnerModule,\r\n  ],\r\n  exports: [\r\n    InstallerComponent\r\n  ],\r\n  declarations: [\r\n    InstallerComponent\r\n  ],\r\n  providers: [\r\n    InstallerService\r\n  ]\r\n})\r\nexport class InstallerModule { }","import { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\nconst MATERIAL_MODULES = [\r\n  MatButtonModule,\r\n  MatDialogModule,\r\n  MatExpansionModule,\r\n  MatIconModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n];\r\n\r\n@NgModule({\r\n  imports: MATERIAL_MODULES,\r\n  exports: MATERIAL_MODULES,\r\n})\r\n\r\nexport class MaterialModule { }\r\n","import { TranslateModule } from '@ngx-translate/core';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { TemplatePickerComponent } from './template-picker.component';\r\nimport { TemplateFilterPipe } from './template-filter.pipe';\r\nimport { CoreModule } from 'app/core/core.module';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { InstallerModule } from 'app/installer/installer.module';\r\nimport { DebugPipe } from './debug.pipe';\r\nimport { ContentTypesProcessor } from './data/content-types-processor.service';\r\nimport { MaterialModule } from 'app/material-module';\r\nimport { FilterByPropertyValuePipe } from './filter-by-property-value.pipe';\r\n\r\n@NgModule({\r\n  exports: [\r\n    TemplatePickerComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserAnimationsModule,\r\n    MatMenuModule,\r\n    MatTabsModule,\r\n    MaterialModule,\r\n    MatProgressBarModule,\r\n    CoreModule,\r\n    FormsModule,\r\n    FlexLayoutModule,\r\n    InstallerModule,\r\n    TranslateModule,\r\n  ],\r\n  providers: [\r\n    TemplateFilterPipe,\r\n    ContentTypesProcessor\r\n  ],\r\n  declarations: [\r\n    TemplatePickerComponent,\r\n    TemplateFilterPipe,\r\n    DebugPipe,\r\n    FilterByPropertyValuePipe,\r\n  ]\r\n})\r\nexport class TemplatePickerModule { }\r\n","import { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DnnInterceptor } from '@2sic.com/dnn-sxc-angular';\r\nimport { AppComponent } from './app.component';\r\nimport { TemplatePickerModule } from 'app/template-picker/template-picker.module';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { MaterialModule } from './material-module';\r\nimport { log } from './core/log';\r\nimport { pathToI18n, i18nExtension } from './i18n';\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n  const loader = new TranslateHttpLoader(http, pathToI18n, i18nExtension);\r\n  log.add('created translate-loader', loader);\r\n  return loader;\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  exports: [ ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    TemplatePickerModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n    MaterialModule, // must be after BrowserModule\r\n  ],\r\n  providers: [DnnInterceptor],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Subject } from 'rxjs';\r\nimport { log as parentLog } from './log';\r\n\r\nconst log = parentLog.subLog('boot-controller');\r\n/**\r\n * Special reboot controller, to restart the angular app\r\n * when critical parameters were changed\r\n */\r\nexport class BootController {\r\n  private static instance: BootController;\r\n  private _reboot: Subject<boolean> = new Subject();\r\n  rebootRequest$ = this._reboot.asObservable();\r\n\r\n  static getRebootController() {\r\n    log.add('getRebootController()');\r\n    if (!BootController.instance) {\r\n      BootController.instance = new BootController();\r\n    }\r\n    return BootController.instance;\r\n  }\r\n\r\n  public reboot() {\r\n    log.add('restarting...');\r\n    this._reboot.next(true);\r\n  }\r\n}\r\n","\r\nimport { startWith } from 'rxjs/operators';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\nimport { BootController } from './app/core/boot-control';\r\nimport { log } from 'app/core/log';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nlog.add('loading main.ts');\r\n\r\ndeclare const window;\r\nconst platform = platformBrowserDynamic();\r\n\r\nfunction init() {\r\n  log.add('init()');\r\n\r\n  try {\r\n    // kill listeners\r\n    if (!platform.destroyed)\r\n      platform.destroy();\r\n  } catch (e) {\r\n    console.log('platform destroy error', e);\r\n  }\r\n\r\n  // must re-create the object here, otherwise AOT compiler optimizations\r\n  // break these lines of code\r\n  platformBrowserDynamic().bootstrapModule(AppModule)\r\n    .then(() => window.appBootstrap && window.appBootstrap())\r\n    .catch(err => console.error('NG Bootstrap Error =>', err));\r\n}\r\n\r\n\r\n// provide hook for outside reboot calls\r\nconst bootController = window.bootController = BootController.getRebootController();\r\n\r\n// Init on reboot request.\r\nbootController.rebootRequest$.pipe(\r\n  startWith(true)) // Init on first load.\r\n  .subscribe(() => init());\r\n"],"sourceRoot":"webpack:///","file":"main.0eaadbd400a710e9.js"}