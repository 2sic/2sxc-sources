{"version":3,"mappings":"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","names":["QueryDefinitionService","constructor","http","context","dnnContext","this","fetchPipeline","pipelineEntityId","dataSources","get","$2sxc","apiUrl","webApiQueryGet","params","appId","toString","id","pipe","map","pipelineModel","DataSources","length","buildDefaultModel","fixPipelineDataSources","templateDataSources","eavConstants","templateDS","dataSource","find","ds","PartAssemblyAndType","push","Description","EntityGuid","EntityId","undefined","Name","VisualDesignerData","Pipeline","StreamWiring","pipelineDataSources","some","pipelineDS","outDs","pipelineDataSource","n","_a","s","Top","Left","fetchDataSources","webApiQueryDataSources","appid","zoneId","ContentType","Difficulty","DynamicIn","DynamicOut","EnableConfig","HelpLink","Icon","In","Out","PrimaryType","TypeNameForUi","UiHint","typeNameFilter","input","format","globalParts","split","classFullNameParts","savePipeline","pipeline","post","webApiQuerySave","Id","newPipelineModel","runPipeline","top","webApiQueryRun","debugStream","source","sourceOut","webApiQueryDebugStream","from","out","i0","factory","ctx_r14","QueryResultComponent","dialogData","dialogRef","visualQueryService","ngOnInit","pipelineModel$","value","t","Params","_b","filter","el","testParams","o","TestParameters","_c","_d","parameters","concat","timeUsed","result","QueryTimer","Milliseconds","ticksUsed","Ticks","optionsForTop","Query","sources","Sources","streams","Streams","closeDialog","close","show","original","MAT_DIALOG_DATA","selectors","ctx","StreamErrorResultComponent","errorData","openInsights","window","open","VisualQueryService","BaseComponent","router","route","queryDefinitionService","titleService","snackBar","dialog","viewContainerRef","zone","metadataService","contentTypesService","changeDetectorRef","super","BehaviorSubject","Subject","parseInt","snapshot","paramMap","ngOnDestroy","complete","dataSources$","putEntityCountOnConnections$","init","attachKeyboardSave","subscription","add","refreshOnChildClosedShallow","subscribe","refreshPipeline","refreshDataSourceConfigs","editPipelineEntity","formUrl","convertFormToUrl","items","navigate","relativeTo","saveAndRun","save","run","showDataSourceDetails","showDetails","cloneDeep","visualDesignerData","ShowDataSourceDetails","JSON","stringify","next","addDataSource","removeDataSource","pipelineDataSourceGuid","connections","streamsOut","StreamsOut","renameDataSource","name","changeDataSourceDescription","description","changeConnections","changeDataSourcePosition","position","Object","calculateDataSourceConfigs","dataSourceConfigs","forEach","Metadata","metadataItem","entries","attributeName","attributeValue","includes","Array","isArray","p","Title","d","dataSourceConfigs$","editDataSource","contentTypeName","key","getMetadata","metadata","Items","retrieveContentType","contentType","duration","ContentTypeName","For","Target","TargetType","Guid","error","callback","pipelineResult","showQueryResult","console","warn","setTimeout","stream","Error","showStreamErrorResult","Count","Source","SourceOut","streamResult","sourceName","showSnackBar","pipelineId","setTitle","autoFocus","backdropClass","closeOnNavigation","data","panelClass","markForCheck","ErrorData","runOutsideAngular","fromEvent","firstChild","event","navigator","platform","match","metaKey","ctrlKey","keyCode","preventDefault","guiTypes","App","Label","Cache","Filter","Logic","Lookup","Modify","Security","Sort","Unknown","Debug","System","typeInfos","typeInfo","ctx_r13","ctx_r15","ctx_r16","RenameStreamComponent","BaseSubsinkComponent","isSource","buildForm","label","toggleGuidedLabel","guidedLabel","toggleAdvancedMode","advancedMode","checked","rename","formValue","form","getRawValue","FormGroup","FormControl","Validators","scope","controls","pipelineResultExists","valueChanges","startWith","distinctUntilChanged","labelOptions","values","Scope","patchValue","getScopes","scopes","filtered","scopeOptions","dataSrcIdPrefix","jsPlumbRoot","onConnectionsChanged","onDragend","onDebugStream","stroke","strokeWidth","outlineStroke","outlineWidth","lineColors","instance","jsPlumb","getInstance","getInstanceDefaults","batch","initDomDataSources","initWirings","bindEvents","repaintEverything","destroy","a","reset","unbindContainer","removeEndpointsOnDataSource","elementId","bulkDelete","selectEndpoints","element","delete","getAllConnections","connection","From","sourceId","replace","endpoints","getOverlay","To","targetId","getStreamsOut","target","each","endpoint","join","putEntityCountOnConnections","sourceElementId","toUuid","outTargets","TargetIn","sEndp","getEndpoint","f","getUuid","setLabel","cssClass","events","click","overlay","AllowEdit","nextLinePaintStyle","uuid","uuidColorMap","assign","linePaintDefault","lineCount","maxCols","container","Container","Connector","curviness","PaintStyle","HoverPaintStyle","domDataSource","querySelector","draggable","grid","stop","finalPos","addEndpoint","targetEndpointUnlimited","buildTargetEndpoint","maxConnections","makeTarget","makeSource","buildSourceEndpoint","wire","fromUuid","targetElementId","guid","pipeDataSource","connect","uuids","paintStyle","e","message","to","endpointName","isIn","isDynamic","getEndpointInfo","r","endpointInfo","style","required","l","model","enabled","fill","radius","anchor","faces","overlays","getEndpointOverlays","endpointOrOverlay","onChangeLabel","isTarget","dropOptions","hoverClass","activeClass","location","width","afterClosed","newLabel","bind","info","targetEndpoint","deleteEndpoint","deleteConnection","fireEvent","endpointLabel","labelPrompt","getLabel","getEndpoints","canvas","classList","contains","Math","floor","random","trimmed","trim","endsWith","substring","oxw","ctx_r20","ctx_r27","ctx_r30","PlumbEditorComponent","loadScripts","test","src","scriptLoaded$","plumber","pipelineDesignerData$","GeneralHelpers","templateModel$","combineLatest","pipelineDesignerData","hardReset","detectChanges","calculateTypeInfos","allowEdit","ngAfterViewInit","domDataSourcesLoaded$","domDataSourcesRef","changes","scriptLoaded","domDataSourcesLoaded","Plumber","domRootRef","nativeElement","configureDataSource","getTypeName","partAssemblyAndType","isOutDataSource","remove","confirm","openHelp","url","editName","newName","editDescription","newDescription","ctx_r22","ctx_r24","ctx_r25","ctx_r26","ctx_r28","RunExplorerComponent","asObservable","warnings$","warnings","queryParams","param","matched","midMatch","exec","testMid","urlMid","u","moduleId","oldMidMatch","calculateWarnings","visualDesignerData$","editPipeline","openParamsHelp","saveAndRunQuery","openRestApi","GoToDevRest","ctx_r7","ctx_r10","ctx_r12","AddExplorerComponent","difficulties","default","sorted$","difficulty$","difficulty","maxDifficulty","cloned","sort","b","toLocaleLowerCase","localeCompare","sorted","type","filterAndSortDataSources","toggleDifficulty","advanced","toggleItem","item","toggledItems","trackGroups","index","trackDataSources","routes","path","component","explorer","toggleExplorer","activeExplorer","VisualQueryComponent","decls","children","matcher","edit","loadChildren","Promise","then","m","EditModule","history","VisualQueryRoutingModule","RouterModule","VisualQueryModule","Context","MetadataService","ContentTypesService","imports","CommonModule","SharedComponentsModule","MatIconModule","MatButtonModule","MatSlideToggleModule","MatSnackBarModule","MatDialogModule","MatTabsModule","MatFormFieldModule","ReactiveFormsModule","MatSelectModule","MatInputModule"],"sources":["./projects/eav-ui/src/app/visual-query/services/query-definition.service.ts","./projects/eav-ui/src/app/visual-query/query-result/query-result.component.html","./projects/eav-ui/src/app/visual-query/query-result/query-result.component.ts","./projects/eav-ui/src/app/visual-query/stream-error-result/stream-error-result.component.ts","./projects/eav-ui/src/app/visual-query/stream-error-result/stream-error-result.component.html","./projects/eav-ui/src/app/visual-query/services/visual-query.service.ts","./projects/eav-ui/src/app/visual-query/plumb-editor/plumb-editor.helpers.ts","./projects/eav-ui/src/app/visual-query/plumb-editor/rename-stream/rename-stream.component.html","./projects/eav-ui/src/app/visual-query/plumb-editor/rename-stream/rename-stream.component.ts","./projects/eav-ui/src/app/visual-query/plumb-editor/plumber.helper.ts","./projects/eav-ui/src/app/visual-query/plumb-editor/plumb-editor.component.html","./projects/eav-ui/src/app/visual-query/plumb-editor/plumb-editor.component.ts","./projects/eav-ui/src/app/visual-query/run-explorer/run-explorer.component.html","./projects/eav-ui/src/app/visual-query/run-explorer/run-explorer.component.ts","./projects/eav-ui/src/app/visual-query/run-explorer/run-explorer.helpers.ts","./projects/eav-ui/src/app/visual-query/add-explorer/add-explorer.component.html","./projects/eav-ui/src/app/visual-query/add-explorer/add-explorer.component.ts","./projects/eav-ui/src/app/visual-query/add-explorer/add-explorer.helpers.ts","./projects/eav-ui/src/app/visual-query/visual-query-routing.module.ts","./projects/eav-ui/src/app/visual-query/visual-query.component.ts","./projects/eav-ui/src/app/visual-query/visual-query.component.html","./projects/eav-ui/src/app/visual-query/visual-query.module.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { webApiQueryDataSources, webApiQueryDebugStream, webApiQueryGet, webApiQueryRun, webApiQuerySave } from '../../app-administration/services';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult } from '../models';\r\n\r\n@Injectable()\r\nexport class QueryDefinitionService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  fetchPipeline(pipelineEntityId: number, dataSources: DataSource[]) {\r\n    return this.http.get<PipelineModel>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryGet), {\r\n      params: { appId: this.context.appId.toString(), id: pipelineEntityId.toString() }\r\n    }).pipe(\r\n      map(pipelineModel => {\r\n        // if pipeline is new, populate it with default model\r\n        if (!pipelineModel.DataSources.length) {\r\n          this.buildDefaultModel(pipelineModel, dataSources);\r\n        }\r\n        this.fixPipelineDataSources(pipelineModel.DataSources);\r\n        return pipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private buildDefaultModel(pipelineModel: PipelineModel, dataSources: DataSource[]) {\r\n    const templateDataSources = eavConstants.pipelineDesigner.defaultPipeline.dataSources;\r\n    for (const templateDS of templateDataSources) {\r\n      const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === templateDS.PartAssemblyAndType);\r\n      const pipelineDataSource: PipelineDataSource = {\r\n        Description: '',\r\n        EntityGuid: templateDS.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: dataSource.Name,\r\n        PartAssemblyAndType: templateDS.PartAssemblyAndType,\r\n        VisualDesignerData: templateDS.VisualDesignerData,\r\n      };\r\n      pipelineModel.DataSources.push(pipelineDataSource);\r\n    }\r\n\r\n    pipelineModel.Pipeline.StreamWiring = eavConstants.pipelineDesigner.defaultPipeline.streamWiring;\r\n  }\r\n\r\n  private fixPipelineDataSources(pipelineDataSources: PipelineDataSource[]) {\r\n    const outDataSourceExists = pipelineDataSources.some(\r\n      pipelineDS => pipelineDS.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    );\r\n    if (!outDataSourceExists) {\r\n      const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n      const outDsConst: PipelineDataSource = {\r\n        Description: outDs.Description,\r\n        EntityGuid: outDs.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: outDs.Name,\r\n        PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n        VisualDesignerData: outDs.VisualDesignerData,\r\n      };\r\n      pipelineDataSources.push(outDsConst);\r\n    }\r\n\r\n    for (const pipelineDataSource of pipelineDataSources) {\r\n      pipelineDataSource.VisualDesignerData ??= { Top: 50, Left: 50 };\r\n    }\r\n  }\r\n\r\n  fetchDataSources() {\r\n    return this.http.get<DataSource[]>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDataSources), {\r\n      params: {\r\n        appid: this.context.appId,\r\n        zoneId: this.context.zoneId,\r\n      },\r\n    }).pipe(\r\n      map(dataSources => {\r\n        const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n        const outDsConst: DataSource = {\r\n          ContentType: undefined,\r\n          Difficulty: eavConstants.pipelineDesigner.dataSourceDifficulties.default,\r\n          DynamicIn: true,\r\n          DynamicOut: false,\r\n          EnableConfig: undefined,\r\n          HelpLink: undefined,\r\n          Icon: undefined,\r\n          In: outDs.In,\r\n          Name: outDs.Name,\r\n          Out: undefined,\r\n          PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n          PrimaryType: outDs.PrimaryType,\r\n          TypeNameForUi: undefined,\r\n          UiHint: undefined,\r\n        };\r\n        dataSources.push(outDsConst);\r\n        return dataSources;\r\n      }),\r\n    );\r\n  }\r\n\r\n  typeNameFilter(input: string, format: 'className' | 'classFullName') {\r\n    const globalParts = input.split(', ');\r\n\r\n    switch (format) {\r\n      case 'classFullName':\r\n        const classFullName = globalParts[0];\r\n        return classFullName;\r\n      case 'className':\r\n        const classFullNameParts = globalParts[0].split('.');\r\n        const className = classFullNameParts[classFullNameParts.length - 1];\r\n        return className;\r\n      default:\r\n        return input;\r\n    }\r\n  }\r\n\r\n  /** Save the current query and reload entire definition as returned from server */\r\n  savePipeline(pipelineModel: PipelineModel) {\r\n    const pipeline = pipelineModel.Pipeline;\r\n    const dataSources = pipelineModel.DataSources;\r\n\r\n    return this.http.post<PipelineModel>(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiQuerySave),\r\n      { pipeline, dataSources },\r\n      { params: { appId: this.context.appId.toString(), Id: pipeline.EntityId.toString() } }\r\n    ).pipe(\r\n      map(newPipelineModel => {\r\n        this.fixPipelineDataSources(newPipelineModel.DataSources);\r\n        return newPipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  runPipeline(id: number, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryRun), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), top: top.toString() }\r\n    });\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  debugStream(id: number, source: string, sourceOut: string, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDebugStream), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), from: source, out: sourceOut, top: top.toString() }\r\n    });\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>\r\n      Query Results\r\n      <ng-container *ngIf=\"debugStream\">\r\n        for Stream: \"{{ debugStream.name }}\" on Source: \"{{ debugStream.sourceName }}\"\r\n      </ng-container>\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<p class=\"dialog-description\">\r\n  The Full result was logged to the Browser Console. Further down you'll find more debug-infos.\r\n  Executed in {{ timeUsed }}ms ({{ ticksUsed }} ticks)\r\n</p>\r\n\r\n<mat-tab-group dynamicHeight color=\"accent\">\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Results\">\r\n      <span>Results</span>\r\n    </div>\r\n\r\n    <p class=\"description\">\r\n      <ng-container *ngIf=\"top === 0\">Showing All results</ng-container>\r\n      <ng-container *ngIf=\"top !== 0\">Showing top {{ top }} results</ng-container>\r\n      <button mat-button *ngFor=\"let option of optionsForTop\" (click)=\"show(option)\">\r\n        Show\r\n        <ng-container *ngIf=\"option === 0\">All</ng-container>\r\n        <ng-container *ngIf=\"option !== 0\">{{ option }}</ng-container>\r\n      </button>\r\n    </p>\r\n    <pre>{{ result | json }}</pre>\r\n  </mat-tab>\r\n\r\n  <mat-tab *ngIf=\"parameters?.length\">\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Parameters\">\r\n      <span>Parameters</span>\r\n    </div>\r\n\r\n    <br />\r\n    <ul class=\"description\">\r\n      <li *ngFor=\"let param of parameters\">{{ param }}</li>\r\n    </ul>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Sources\">\r\n      <span>Sources</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Name and Guid</th>\r\n        <th>Type</th>\r\n        <th>Configuration</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let source of sources | keyvalue\">\r\n        <td>\r\n          <div *ngIf=\"source.value.Definition?.Name\">{{ source.value.Definition?.Name }}</div>\r\n          <pre>{{ source.value.Guid }}</pre>\r\n        </td>\r\n        <td>{{ source.value.Type }}</td>\r\n        <td>\r\n          <ol>\r\n            <li *ngFor=\"let config of source.value.Configuration | keyvalue\">\r\n              <b>{{ config.key }}</b>=<em>{{ config.value }}</em>\r\n            </li>\r\n          </ol>\r\n        </td>\r\n        <td>{{ source.value.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Streams\">\r\n      <span>Streams</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Source</th>\r\n        <th>Target</th>\r\n        <th>Items</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let stream of streams\">\r\n        <td>\r\n          <pre>{{ stream.Source + \":\" + stream.SourceOut }}</pre>\r\n        </td>\r\n        <td>\r\n          <pre>{{ stream.Target + \":\" + stream.TargetIn }}</pre>\r\n        </td>\r\n        <td>{{ stream.Count }}</td>\r\n        <td>{{ stream.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n</mat-tab-group>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DebugStreamInfo, PipelineResultQuery, PipelineResultSources, PipelineResultStream } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { QueryResultDialogData } from './query-result.models';\r\n\r\n@Component({\r\n  selector: 'app-query-result',\r\n  templateUrl: './query-result.component.html',\r\n  styleUrls: ['./query-result.component.scss'],\r\n})\r\nexport class QueryResultComponent implements OnInit {\r\n  parameters: string[];\r\n  timeUsed: number;\r\n  ticksUsed: number;\r\n  top: number;\r\n  optionsForTop: number[];\r\n  result: PipelineResultQuery;\r\n  debugStream: DebugStreamInfo;\r\n  sources: PipelineResultSources;\r\n  streams: PipelineResultStream[];\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: QueryResultDialogData,\r\n    private dialogRef: MatDialogRef<QueryResultComponent>,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const pipeline = this.visualQueryService.pipelineModel$.value.Pipeline;\r\n    const params = (pipeline.Params?.split('\\n') ?? []).filter(el => !!el);\r\n    const testParams = (pipeline.TestParameters?.split('\\n') ?? []).filter(el => !!el);\r\n    this.parameters = [].concat(params, testParams);\r\n    this.timeUsed = this.dialogData.result.QueryTimer.Milliseconds;\r\n    this.ticksUsed = this.dialogData.result.QueryTimer.Ticks;\r\n    this.top = this.dialogData.top;\r\n    this.optionsForTop = [25, 100, 1000, 0];\r\n    this.result = this.dialogData.result.Query;\r\n    this.debugStream = this.dialogData.debugStream;\r\n    this.sources = this.dialogData.result.Sources;\r\n    this.streams = this.dialogData.result.Streams;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  show(top: number) {\r\n    if (top === this.top) { return; }\r\n\r\n    if (this.debugStream) {\r\n      this.visualQueryService.debugStream(this.debugStream.original, top);\r\n    } else {\r\n      this.visualQueryService.runPipeline(top);\r\n    }\r\n\r\n    this.closeDialog();\r\n  }\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { StreamErrorData } from '../models';\r\nimport { StreamErrorResultDialogData } from './stream-error-result.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-stream-error-result',\r\n  templateUrl: './stream-error-result.component.html',\r\n  styleUrls: ['./stream-error-result.component.scss'],\r\n})\r\nexport class StreamErrorResultComponent implements OnInit {\r\n  errorData: StreamErrorData;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: StreamErrorResultDialogData,\r\n    private dialogRef: MatDialogRef<StreamErrorResultComponent>,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.errorData = this.dialogData.errorData;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openInsights() {\r\n    window.open(window.$2sxc.http.apiUrl('sys/insights/logs?key=web-api'), '_blank');\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Stream Error Results</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<br />\r\n\r\n<pre>{{ errorData | json }}</pre>\r\n\r\n<div>\r\n  <button mat-button tippy=\"Open 2sxc Insights\" (click)=\"openInsights()\">\r\n    <mat-icon>speed</mat-icon>\r\n    <span>Insights</span>\r\n  </button>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Injectable, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { BehaviorSubject, filter, fromEvent, Subject } from 'rxjs';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { MetadataService } from '../../permissions/services/metadata.service';\r\nimport { BaseComponent } from '../../shared/components/base-component/base.component';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\n// tslint:disable-next-line:max-line-length\r\nimport { DataSource, DataSourceConfig, DataSourceConfigs, DebugStreamInfo, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { QueryResultComponent } from '../query-result/query-result.component';\r\nimport { QueryResultDialogData } from '../query-result/query-result.models';\r\nimport { StreamErrorResultComponent } from '../stream-error-result/stream-error-result.component';\r\nimport { StreamErrorResultDialogData } from '../stream-error-result/stream-error-result.models';\r\nimport { QueryDefinitionService } from './query-definition.service';\r\n\r\n@Injectable()\r\nexport class VisualQueryService extends BaseComponent implements OnDestroy {\r\n  pipelineModel$ = new BehaviorSubject<PipelineModel>(null);\r\n  dataSources$ = new BehaviorSubject<DataSource[]>(null);\r\n  putEntityCountOnConnections$ = new Subject<PipelineResult>();\r\n  dataSourceConfigs$ = new BehaviorSubject<DataSourceConfigs>({});\r\n  pipelineResult?: PipelineResult;\r\n\r\n  private pipelineId = parseInt(this.route.snapshot.paramMap.get('pipelineId'), 10);\r\n  private refreshPipeline = false;\r\n  private refreshDataSourceConfigs = false;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private titleService: Title,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private zone: NgZone,\r\n    private metadataService: MetadataService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { \r\n    super(router, route);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.pipelineModel$.complete();\r\n    this.dataSources$.complete();\r\n    this.putEntityCountOnConnections$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  init() {\r\n    this.fetchDataSources(() => this.fetchPipeline(true, true, false));\r\n    this.attachKeyboardSave();\r\n    this.subscription.add(this.refreshOnChildClosedShallow().subscribe(() => { \r\n      if (this.refreshPipeline || this.refreshDataSourceConfigs) {\r\n        this.fetchPipeline(this.refreshPipeline, this.refreshDataSourceConfigs, this.refreshPipeline);\r\n      }\r\n      this.refreshPipeline = false;\r\n      this.refreshDataSourceConfigs = false;\r\n     }));\r\n  }\r\n\r\n  editPipelineEntity() {\r\n    // save Pipeline, then open Edit Dialog\r\n    this.savePipeline(() => {\r\n      const form: EditForm = {\r\n        items: [{ EntityId: this.pipelineModel$.value.Pipeline.EntityId }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.refreshPipeline = true;\r\n    });\r\n  }\r\n\r\n  saveAndRun(save: boolean, run: boolean) {\r\n    if (save && run) {\r\n      this.savePipeline(() => { this.runPipeline(); });\r\n    } else if (save) {\r\n      this.savePipeline();\r\n    } else if (run) {\r\n      this.runPipeline();\r\n    }\r\n  }\r\n\r\n  showDataSourceDetails(showDetails: boolean) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const visualDesignerData: Record<string, any> = GeneralHelpers.tryParse(pipelineModel.Pipeline.VisualDesignerData) ?? {};\r\n    visualDesignerData.ShowDataSourceDetails = showDetails;\r\n    pipelineModel.Pipeline.VisualDesignerData = JSON.stringify(visualDesignerData);\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const newPipelineDataSource: PipelineDataSource = {\r\n      Description: '',\r\n      EntityGuid: 'unsaved' + (pipelineModel.DataSources.length + 1),\r\n      EntityId: undefined,\r\n      Name: dataSource.Name,\r\n      PartAssemblyAndType: dataSource.PartAssemblyAndType,\r\n      VisualDesignerData: { Top: 100, Left: 100 },\r\n    };\r\n    pipelineModel.DataSources.push(newPipelineDataSource);\r\n    this.pipelineModel$.next(pipelineModel);\r\n    this.savePipeline();\r\n  }\r\n\r\n  removeDataSource(pipelineDataSourceGuid: string, connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.DataSources = pipelineModel.DataSources.filter(pipelineDS => pipelineDS.EntityGuid !== pipelineDataSourceGuid);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  renameDataSource(pipelineDataSourceGuid: string, name: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Name = name;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourceDescription(pipelineDataSourceGuid: string, description: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Description = description;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeConnections(connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourcePosition(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    if (!pipelineDataSource) {\r\n      // spm NOTE: fixes problem where dataSource position can't be updated if dataSource with guid unsavedXX gets saved while dragging.\r\n      // Can happen if dataSource is just added and user drags it and save happens.\r\n      return;\r\n    }\r\n    pipelineDataSource.VisualDesignerData = { ...pipelineDataSource.VisualDesignerData, ...position };\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  private calculateDataSourceConfigs(dataSources: PipelineDataSource[]) {\r\n    const dataSourceConfigs: DataSourceConfigs = {};\r\n    dataSources.forEach(dataSource => {\r\n      if (dataSource.EntityId == null) { return; }\r\n      dataSourceConfigs[dataSource.EntityId] = [];\r\n      dataSource.Metadata?.forEach(metadataItem => {\r\n        Object.entries(metadataItem).forEach(([attributeName, attributeValue]) => {\r\n          if (attributeValue == null || attributeValue === '') { return; }\r\n          if (['Created', 'Guid', 'Id', 'Modified', 'Title', '_Type'].includes(attributeName)) { return; }\r\n          if (Array.isArray(attributeValue) && attributeValue[0]?.Title != null && attributeValue[0]?.Id != null) {\r\n            attributeValue = `${attributeValue[0].Title} (${attributeValue[0].Id})`;\r\n          }\r\n          const dataSourceConfig: DataSourceConfig = {\r\n            name: attributeName,\r\n            value: attributeValue,\r\n          };\r\n          dataSourceConfigs[dataSource.EntityId].push(dataSourceConfig);\r\n        });\r\n      });\r\n    });\r\n    this.dataSourceConfigs$.next(dataSourceConfigs);\r\n  }\r\n\r\n  editDataSource(pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources$.value.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    const contentTypeName = dataSource.ContentType;\r\n    const targetType = eavConstants.metadata.entity.targetType;\r\n    const keyType = eavConstants.metadata.entity.keyType;\r\n    const key = pipelineDataSource.EntityGuid;\r\n\r\n    // query for existing Entity\r\n    this.metadataService.getMetadata(targetType, keyType, key, contentTypeName).subscribe(metadata => {\r\n      // edit existing Entity\r\n      if (metadata.Items.length) {\r\n        const form: EditForm = {\r\n          items: [{ EntityId: metadata.Items[0].Id }],\r\n        };\r\n        const formUrl = convertFormToUrl(form);\r\n        this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        this.refreshDataSourceConfigs = true;\r\n        return;\r\n      }\r\n\r\n      // Check if the type exists, and if yes, create new Entity\r\n      this.contentTypesService.retrieveContentType(contentTypeName).subscribe({\r\n        next: contentType => {\r\n          if (contentType == null) {\r\n            this.snackBar.open('DataSource doesn\\'t have any configuration', undefined, { duration: 3000 });\r\n            return;\r\n          }\r\n          const form: EditForm = {\r\n            items: [{\r\n              ContentTypeName: contentTypeName,\r\n              For: {\r\n                Target: eavConstants.metadata.entity.target,\r\n                TargetType: eavConstants.metadata.entity.targetType,\r\n                Guid: key,\r\n              },\r\n            }],\r\n          };\r\n          const formUrl = convertFormToUrl(form);\r\n          this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n          this.refreshDataSourceConfigs = true;\r\n        },\r\n        error: (error: HttpErrorResponse) => {\r\n          const message = 'Server reports error - this usually means that this DataSource doesn\\'t have any configuration';\r\n          this.snackBar.open(message, undefined, { duration: 3000 });\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private savePipeline(callback?: () => void) {\r\n    this.snackBar.open('Saving...');\r\n    this.queryDefinitionService.savePipeline(this.pipelineModel$.value).subscribe({\r\n      next: pipelineModel => {\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.pipelineModel$.next(pipelineModel);\r\n        if (callback != null) { callback(); }\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Save Pipeline failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  runPipeline(top = 25) {\r\n    this.snackBar.open('Running query...');\r\n    this.queryDefinitionService.runPipeline(this.pipelineModel$.value.Pipeline.EntityId, top).subscribe({\r\n      next: pipelineResult => {\r\n        this.snackBar.open('Query worked', null, { duration: 2000 });\r\n        this.pipelineResult = pipelineResult;\r\n        this.showQueryResult(pipelineResult, top);\r\n        console.warn(pipelineResult);\r\n        // push cloned pipelineModel to reset jsPlumb\r\n        this.pipelineModel$.next(cloneDeep(this.pipelineModel$.value));\r\n        setTimeout(() => { this.putEntityCountOnConnections$.next(pipelineResult); });\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Query failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  debugStream(stream: PipelineResultStream, top = 25) {\r\n    if (stream.Error) {\r\n      this.showStreamErrorResult(stream);\r\n      return;\r\n    }\r\n\r\n    if (stream.Count === 0) { return; }\r\n\r\n    this.snackBar.open('Running stream...');\r\n    const pipelineId = this.pipelineModel$.value.Pipeline.EntityId;\r\n    this.queryDefinitionService.debugStream(pipelineId, stream.Source, stream.SourceOut, top).subscribe({\r\n      next: streamResult => {\r\n        this.snackBar.open('Stream worked', null, { duration: 2000 });\r\n        const pipelineDataSource = this.pipelineModel$.value.DataSources.find(ds => ds.EntityGuid === stream.Source);\r\n        const debugStream: DebugStreamInfo = {\r\n          name: stream.SourceOut,\r\n          source: stream.Source,\r\n          sourceName: pipelineDataSource.Name,\r\n          original: stream,\r\n        };\r\n        this.showQueryResult(streamResult, top, debugStream);\r\n        console.warn(streamResult);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Stream failed', null, { duration: 2000 });\r\n      },\r\n    });\r\n  }\r\n\r\n  private fetchPipeline(refreshPipeline: boolean, refreshDataSourceConfigs: boolean, showSnackBar: boolean) {\r\n    if (showSnackBar) {\r\n      this.snackBar.open('Reloading query, please wait...');\r\n    }\r\n    this.queryDefinitionService.fetchPipeline(this.pipelineId, this.dataSources$.value).subscribe(pipelineModel => {\r\n      if (showSnackBar) {\r\n        this.snackBar.open('Query reloaded', null, { duration: 2000 });\r\n      }\r\n      this.titleService.setTitle(`${pipelineModel.Pipeline.Name} - Visual Query`);\r\n      if (refreshPipeline) {\r\n        this.pipelineModel$.next(pipelineModel);\r\n      }\r\n      if (refreshDataSourceConfigs) {\r\n        this.calculateDataSourceConfigs(pipelineModel.DataSources);\r\n      }\r\n    });\r\n  }\r\n\r\n  private showQueryResult(result: PipelineResult, top: number, debugStream?: DebugStreamInfo) {\r\n    const dialogData: QueryResultDialogData = {\r\n      result,\r\n      debugStream,\r\n      top,\r\n    };\r\n    this.dialog.open(QueryResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private showStreamErrorResult(stream: PipelineResultStream) {\r\n    const dialogData: StreamErrorResultDialogData = {\r\n      errorData: stream.ErrorData,\r\n    };\r\n    this.dialog.open(StreamErrorResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private fetchDataSources(callback?: () => void) {\r\n    this.queryDefinitionService.fetchDataSources().subscribe(dataSources => {\r\n      this.dataSources$.next(dataSources);\r\n      callback();\r\n    });\r\n  }\r\n\r\n  private attachKeyboardSave() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<KeyboardEvent>(window, 'keydown').pipe(\r\n          filter(() => !this.route.snapshot.firstChild),\r\n          filter(event => {\r\n            const CTRL_S = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.keyCode === 83;\r\n            return CTRL_S;\r\n          }),\r\n        ).subscribe(event => {\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.savePipeline(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { DataSource, PipelineDataSource } from '../models';\r\nimport { GuiTypes, TypeInfo, TypeInfos } from './plumb-editor.models';\r\n\r\nexport const guiTypes: GuiTypes = {\r\n  App: { Name: 'App', Label: 'App DataSources', Icon: 'star', UiHint: 'DataSources from the current App' },\r\n  Cache: { Name: 'Cache', Icon: 'history', UiHint: 'Caching of data' },\r\n  Filter: { Name: 'Filter', Icon: 'filter_list', UiHint: 'Filter data - usually returning less items than came in' },\r\n  Logic: { Name: 'Logic', Icon: 'share', UiHint: 'Logic operations - usually choosing between different streams' },\r\n  Lookup: { Name: 'Lookup', Icon: 'search', UiHint: 'Lookup operation - usually looking for other data based on a criteria' },\r\n  Modify: { Name: 'Modify', Icon: 'edit_attributes', UiHint: 'Modify data - usually changing, adding or removing values' },\r\n  Security: { Name: 'Security', Icon: 'account_circle', UiHint: 'Security - usually limit what the user sees based on his identity' },\r\n  Sort: { Name: 'Sort', Icon: 'sort', UiHint: 'Sort the items' },\r\n  Source: { Name: 'Source', Icon: 'cloud_upload', UiHint: 'Source of new data - usually SQL, CSV or similar' },\r\n  Target: { Name: 'Target', Icon: 'adjust', UiHint: 'Target - usually just a destination of data' },\r\n  Unknown: { Name: 'Unknown', Icon: 'fiber_manual_record', UiHint: 'Unknown type' },\r\n  Debug: { Name: 'Debug', Icon: 'bug_report', UiHint: 'Debugging Tools'},\r\n  System: { Name: 'System', Icon: 'military_tech', UiHint: 'System Data' },\r\n};\r\n\r\nexport function calculateTypeInfos(pipelineDataSources: PipelineDataSource[], dataSources: DataSource[]) {\r\n  const typeInfos: TypeInfos = {};\r\n\r\n  for (const pipelineDataSource of pipelineDataSources) {\r\n    let typeInfo: TypeInfo;\r\n    const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    if (dataSource) {\r\n      typeInfo = { ...(dataSource.PrimaryType ? guiTypes[dataSource.PrimaryType] : guiTypes.Unknown) };\r\n      if (dataSource.Icon != null) { typeInfo.Icon = dataSource.Icon; }\r\n      if (dataSource.DynamicIn != null) { typeInfo.DynamicIn = dataSource.DynamicIn; }\r\n      if (dataSource.DynamicOut != null) { typeInfo.DynamicOut = dataSource.DynamicOut; }\r\n      if (dataSource.HelpLink != null) { typeInfo.HelpLink = dataSource.HelpLink; }\r\n      if (dataSource.EnableConfig != null) { typeInfo.EnableConfig = dataSource.EnableConfig; }\r\n      if (dataSource.UiHint != null) { typeInfo.UiHint = dataSource.UiHint; }\r\n    }\r\n    if (!typeInfo) { typeInfo = { ...guiTypes.Unknown }; }\r\n    typeInfos[pipelineDataSource.EntityGuid] = typeInfo;\r\n  }\r\n\r\n  return typeInfos;\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Rename stream</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<!-- <p class=\"dialog-description\"></p> -->\r\n\r\n<form [formGroup]=\"form\" class=\"dialog-form\">\r\n  <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n    <!-- Simple form -->\r\n    <ng-container *ngIf=\"!isSource || !pipelineResultExists\">\r\n      <!-- Label -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Label</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"label\" required>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"isSource && !pipelineResultExists\">\r\n        You will get suggestions for out-streams after you run query\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"controls.label.touched && controls.label.errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </ng-container>\r\n\r\n    <!-- Rich form -->\r\n    <ng-container *ngIf=\"isSource && pipelineResultExists\">\r\n      <!-- Scope -->\r\n      <ng-container *ngIf=\"advancedMode && guidedLabel\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select formControlName=\"scope\" [placeholder]=\"!scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n      </ng-container>\r\n\r\n      <!-- Label -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Label</mat-label>\r\n        <mat-select *ngIf=\"guidedLabel\" formControlName=\"label\" required\r\n          [placeholder]=\"!labelOptions.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let labelOption of labelOptions\" [value]=\"labelOption\">\r\n            {{ labelOption }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"text\" *ngIf=\"!guidedLabel\" formControlName=\"label\" required>\r\n\r\n        <div matSuffix class=\"selection-suffix\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': guidedLabel }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedLabel(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !guidedLabel }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedLabel(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"controls.label.touched && controls.label.errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <div class=\"dialog-form-actions\">\r\n    <!-- Extra button for rich form -->\r\n    <ng-container *ngIf=\"isSource && pipelineResultExists\">\r\n      <mat-slide-toggle color=\"accent\" [checked]=\"advancedMode\" (change)=\"toggleAdvancedMode($event)\">\r\n        {{ advancedMode ? 'Advanced' : 'Simple' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n    </ng-container>\r\n    <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"rename()\">\r\n      Rename\r\n    </button>\r\n  </div>\r\n</form>\r\n","import { ChangeDetectorRef, Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { distinctUntilChanged, startWith, Subscription } from 'rxjs';\r\nimport { ContentTypesService } from '../../../app-administration/services';\r\nimport { BaseSubsinkComponent } from '../../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { eavConstants, ScopeOption } from '../../../shared/constants/eav.constants';\r\nimport { VisualQueryService } from '../../services/visual-query.service';\r\nimport { RenameStreamDialogControls, RenameStreamDialogData, RenameStreamDialogFormValue } from './rename-stream.models';\r\n\r\n@Component({\r\n  selector: 'app-rename-stream',\r\n  templateUrl: './rename-stream.component.html',\r\n  styleUrls: ['./rename-stream.component.scss']\r\n})\r\nexport class RenameStreamComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  controls: RenameStreamDialogControls;\r\n  isSource = this.dialogData.isSource;\r\n  pipelineResultExists = this.visualQueryService.pipelineResult != null;\r\n  scopeOptions: ScopeOption[] = [];\r\n  labelOptions: string[] = [];\r\n  guidedLabel = true;\r\n  advancedMode = false;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: RenameStreamDialogData,\r\n    private dialogRef: MatDialogRef<RenameStreamComponent>,\r\n    private visualQueryService: VisualQueryService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    this.buildForm();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(label?: string): void {\r\n    this.dialogRef.close(label);\r\n  }\r\n\r\n  toggleGuidedLabel(guidedLabel: boolean): void {\r\n    this.guidedLabel = guidedLabel;\r\n  }\r\n\r\n  toggleAdvancedMode(event: MatSlideToggleChange): void {\r\n    this.advancedMode = event.checked;\r\n  }\r\n\r\n  rename(): void {\r\n    const formValue: RenameStreamDialogFormValue = this.form.getRawValue();\r\n    this.closeDialog(formValue.label);\r\n  }\r\n\r\n  private buildForm(): void {\r\n    this.form = new FormGroup({\r\n      label: new FormControl(this.dialogData.label, Validators.required),\r\n      scope: new FormControl(eavConstants.scopes.default.value),\r\n    });\r\n    this.controls = this.form.controls as any;\r\n\r\n    if (!this.isSource || !this.pipelineResultExists) { return; }\r\n\r\n    this.subscription.add(\r\n      this.controls.scope.valueChanges.pipe(\r\n        startWith<string>(this.controls.scope.value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(scope => {\r\n        this.labelOptions = Object.values(this.visualQueryService.pipelineResult.Sources)\r\n          .find(source => source.Guid === this.dialogData.pipelineDataSourceGuid).Out\r\n          .filter(out => out.Scope === scope)\r\n          .map(out => out.Name);\r\n        if (!this.labelOptions.includes(this.controls.label.value) && this.controls.label.value != null) {\r\n          this.controls.label.patchValue(null);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      const sourceOut = Object.values(this.visualQueryService.pipelineResult.Sources)\r\n        .find(source => source.Guid === this.dialogData.pipelineDataSourceGuid).Out;\r\n      const filtered = scopes.filter(s => sourceOut.some(o => o.Scope === s.value));\r\n      this.scopeOptions = filtered;\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectorRef, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { EndpointInfo, PlumbType } from './plumb-editor.models';\r\nimport { RenameStreamComponent } from './rename-stream/rename-stream.component';\r\nimport { RenameStreamDialogData } from './rename-stream/rename-stream.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\nexport const dataSrcIdPrefix = 'dataSource_';\r\n\r\nexport class Plumber {\r\n  private instance: PlumbType;\r\n  private lineCount = 0;\r\n  private linePaintDefault = {\r\n    stroke: '#61B7CF',\r\n    strokeWidth: 4,\r\n    outlineStroke: 'white',\r\n    outlineWidth: 2,\r\n  };\r\n  private lineColors = [\r\n    '#009688', '#00bcd4', '#3f51b5', '#9c27b0', '#e91e63',\r\n    '#db4437', '#ff9800', '#60a917', '#60a917', '#008a00',\r\n    '#00aba9', '#1ba1e2', '#0050ef', '#6a00ff', '#aa00ff',\r\n    '#f472d0', '#d80073', '#a20025', '#e51400', '#fa6800',\r\n    '#f0a30a', '#e3c800', '#825a2c', '#6d8764', '#647687',\r\n    '#76608a', '#a0522d',\r\n  ];\r\n  private maxCols = this.lineColors.length - 1;\r\n  private uuidColorMap: Record<string, any> = {};\r\n  private bulkDelete = false;\r\n  private dialogRef: MatDialogRef<RenameStreamComponent>;\r\n\r\n  constructor(\r\n    private jsPlumbRoot: HTMLElement,\r\n    private pipelineModel: PipelineModel,\r\n    private dataSources: DataSource[],\r\n    private onConnectionsChanged: () => void,\r\n    private onDragend: (pipelineDataSourceGuid: string, position: VisualDesignerData) => void,\r\n    private onDebugStream: (stream: PipelineResultStream) => void,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    this.instance = window.jsPlumb.getInstance(this.getInstanceDefaults(this.jsPlumbRoot));\r\n    this.instance.batch(() => {\r\n      this.initDomDataSources();\r\n      this.initWirings();\r\n      this.bindEvents();\r\n    });\r\n    // spm NOTE: repaint after initial paint fixes:\r\n    // Error: <svg> attribute width: Expected length, \"-Infinity\".\r\n    this.instance.repaintEverything();\r\n  }\r\n\r\n  destroy() {\r\n    this.dialogRef?.close();\r\n    this.instance.reset();\r\n    this.instance.unbindContainer();\r\n  }\r\n\r\n  removeEndpointsOnDataSource(pipelineDataSourceGuid: string) {\r\n    const elementId = dataSrcIdPrefix + pipelineDataSourceGuid;\r\n    this.bulkDelete = true;\r\n    this.instance.batch(() => {\r\n      this.instance.selectEndpoints({ element: elementId }).delete();\r\n    });\r\n    this.bulkDelete = false;\r\n  }\r\n\r\n  getAllConnections() {\r\n    const connectionInfos: StreamWire[] = this.instance.getAllConnections().map((connection: PlumbType) => {\r\n      const wire: StreamWire = {\r\n        From: connection.sourceId.replace(dataSrcIdPrefix, ''),\r\n        Out: connection.endpoints[0].getOverlay('endpointLabel').label,\r\n        To: connection.targetId.replace(dataSrcIdPrefix, ''),\r\n        In: connection.endpoints[1].getOverlay('endpointLabel').label,\r\n      };\r\n      return wire;\r\n    });\r\n    return connectionInfos;\r\n  }\r\n\r\n  getStreamsOut() {\r\n    const streamsOut: string[] = [];\r\n    this.instance.selectEndpoints({ target: dataSrcIdPrefix + 'Out' }).each((endpoint: PlumbType) => {\r\n      streamsOut.push(endpoint.getOverlay('endpointLabel').label);\r\n    });\r\n    const streamsOutStr = streamsOut.join(',');\r\n    return streamsOutStr;\r\n  }\r\n\r\n  putEntityCountOnConnections(result: PipelineResult) {\r\n    result.Streams?.forEach(stream => {\r\n      const sourceElementId = dataSrcIdPrefix + stream.Source;\r\n      const outTargets = ['00000000-0000-0000-0000-000000000000', this.pipelineModel.Pipeline.EntityGuid];\r\n      const targetElementId = outTargets.includes(stream.Target) ? dataSrcIdPrefix + 'Out' : dataSrcIdPrefix + stream.Target;\r\n\r\n      const fromUuid = sourceElementId + '_out_' + stream.SourceOut;\r\n      const toUuid = targetElementId + '_in_' + stream.TargetIn;\r\n\r\n      const sEndp: PlumbType = this.instance.getEndpoint(fromUuid);\r\n      sEndp?.connections\r\n        ?.filter((connection: PlumbType) => connection.endpoints[1].getUuid() === toUuid)\r\n        ?.forEach((connection: PlumbType) => {\r\n          const label = !stream.Error ? stream.Count.toString() : '';\r\n          const cssClass = 'streamEntitiesCount ' + (!stream.Error ? '' : 'streamEntitiesError');\r\n          connection.setLabel({\r\n            label,\r\n            cssClass,\r\n            events: {\r\n              click: (overlay: PlumbType) => {\r\n                if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n                this.onDebugStream(stream);\r\n              },\r\n            },\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  private nextLinePaintStyle(uuid: string) {\r\n    return (\r\n      this.uuidColorMap[uuid] ||\r\n      (this.uuidColorMap[uuid] = Object.assign({}, this.linePaintDefault, { stroke: this.lineColors[this.lineCount++ % this.maxCols] }))\r\n    );\r\n  }\r\n\r\n  private getInstanceDefaults(container: HTMLElement) {\r\n    const defaults = {\r\n      Container: container,\r\n      Connector: ['Bezier', { curviness: 70 }],\r\n      PaintStyle: this.nextLinePaintStyle('dummy'),\r\n      HoverPaintStyle: {\r\n        stroke: '#216477',\r\n        strokeWidth: 4,\r\n        outlineStroke: 'white',\r\n        outlineWidth: 2,\r\n      },\r\n    };\r\n    return defaults;\r\n  }\r\n\r\n  /** Create sources, targets and endpoints */\r\n  private initDomDataSources() {\r\n    for (const pipelineDataSource of this.pipelineModel.DataSources) {\r\n      const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + dataSrcIdPrefix + pipelineDataSource.EntityGuid);\r\n      if (!domDataSource) { continue; }\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      if (!dataSource) { continue; }\r\n\r\n      if (this.pipelineModel.Pipeline.AllowEdit) {\r\n        // WARNING! Must happen before instance.makeSource()\r\n        this.instance.draggable(domDataSource, {\r\n          grid: [20, 20], stop: (event: PlumbType) => {\r\n            const element: HTMLElement = event.el;\r\n            const pipelineDataSourceGuid: string = element.id.replace(dataSrcIdPrefix, '');\r\n            const position: VisualDesignerData = {\r\n              Top: event.finalPos[1],\r\n              Left: event.finalPos[0],\r\n            };\r\n            setTimeout(() => { this.onDragend(pipelineDataSourceGuid, position); });\r\n          }\r\n        });\r\n      }\r\n\r\n      // Add Out-Endpoints from Definition\r\n      dataSource.Out?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, false, pipelineDataSource);\r\n      });\r\n\r\n      // Add In-Endpoints from Definition\r\n      dataSource.In?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, true, pipelineDataSource);\r\n      });\r\n\r\n      // Make DataSource a Target for new Endpoints (if .In is an Array)\r\n      if (dataSource.In) {\r\n        const targetEndpointUnlimited = this.buildTargetEndpoint(pipelineDataSource.EntityGuid);\r\n        targetEndpointUnlimited.maxConnections = -1;\r\n        this.instance.makeTarget(domDataSource, targetEndpointUnlimited);\r\n      }\r\n\r\n      if (dataSource.DynamicOut) {\r\n        this.instance.makeSource(domDataSource, this.buildSourceEndpoint(pipelineDataSource.EntityGuid), { filter: '.add-endpoint' });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Create wires */\r\n  private initWirings() {\r\n    this.pipelineModel.Pipeline.StreamWiring?.forEach(wire => {\r\n      // read connections from Pipeline\r\n      const sourceElementId = dataSrcIdPrefix + wire.From;\r\n      const fromUuid = sourceElementId + '_out_' + wire.Out;\r\n      const targetElementId = dataSrcIdPrefix + wire.To;\r\n      const toUuid = targetElementId + '_in_' + wire.In;\r\n\r\n      // Ensure In-Endpoint exist\r\n      if (!this.instance.getEndpoint(fromUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + sourceElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.Out, false, pipelineDataSource);\r\n      }\r\n\r\n      // Ensure Out-Endpoint exist\r\n      if (!this.instance.getEndpoint(toUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + targetElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.In, true, pipelineDataSource);\r\n      }\r\n\r\n      try {\r\n        this.instance.connect({\r\n          uuids: [fromUuid, toUuid],\r\n          paintStyle: this.nextLinePaintStyle(fromUuid),\r\n        });\r\n      } catch (e) {\r\n        console.error({ message: 'Connection failed', from: fromUuid, to: toUuid });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addEndpoint(domDataSource: HTMLElement, endpointName: string, isIn: boolean, pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources.find(d => d.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    const isDynamic = isIn\r\n      ? !dataSource.In?.some(name => this.getEndpointInfo(name, false))\r\n      : !dataSource.Out?.some(name => this.getEndpointInfo(name, false));\r\n    const endpointInfo = this.getEndpointInfo(endpointName, isDynamic);\r\n\r\n    let style: string;\r\n    if (isDynamic) {\r\n      style = 'dynamic';\r\n    } else if (!endpointInfo.required) {\r\n      style = '';\r\n    } else {\r\n      const wireExists = this.pipelineModel.Pipeline.StreamWiring?.some(wire => {\r\n        const targetElementId = dataSrcIdPrefix + wire.To;\r\n        const targetEndpointName = wire.In;\r\n\r\n        return targetElementId === domDataSource.id && targetEndpointName === endpointInfo.name;\r\n      });\r\n      style = wireExists ? '' : 'required';\r\n    }\r\n\r\n    const uuid = domDataSource.id + (isIn ? '_in_' : '_out_') + endpointInfo.name;\r\n    const model = isIn\r\n      ? this.buildTargetEndpoint(pipelineDataSource.EntityGuid, style)\r\n      : this.buildSourceEndpoint(pipelineDataSource.EntityGuid, style);\r\n    // Endpoints on Out-DataSource must be always enabled\r\n    const params = {\r\n      uuid,\r\n      enabled: this.pipelineModel.Pipeline.AllowEdit\r\n        || pipelineDataSource.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    };\r\n\r\n    const endpoint: PlumbType = this.instance.addEndpoint(domDataSource, model, params);\r\n    endpoint.getOverlay('endpointLabel').setLabel(endpointInfo.name);\r\n  }\r\n\r\n  private buildSourceEndpoint(pipelineDataSourceGuid: string, style?: string) {\r\n    const isSource = true;\r\n    const sourceEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'sourceEndpoint ' + style ?? '',\r\n      maxConnections: -1,\r\n      isSource,\r\n      anchor: ['Continuous', { faces: ['top'] }],\r\n      overlays: this.getEndpointOverlays(isSource),\r\n      events: {\r\n        click: (endpointOrOverlay: PlumbType) => {\r\n          this.onChangeLabel(endpointOrOverlay, isSource, pipelineDataSourceGuid);\r\n        },\r\n      },\r\n    };\r\n    return sourceEndpoint;\r\n  }\r\n\r\n  private buildTargetEndpoint(pipelineDataSourceGuid: string, style?: string) {\r\n    const isSource = false;\r\n    const targetEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'targetEndpoint ' + style ?? '',\r\n      maxConnections: 1,\r\n      isTarget: !isSource,\r\n      anchor: ['Continuous', { faces: ['bottom'] }],\r\n      overlays: this.getEndpointOverlays(isSource),\r\n      dropOptions: { hoverClass: 'hover', activeClass: 'active' },\r\n      events: {\r\n        click: (endpointOrOverlay: PlumbType) => {\r\n          this.onChangeLabel(endpointOrOverlay, isSource, pipelineDataSourceGuid);\r\n        },\r\n      },\r\n    };\r\n    return targetEndpoint;\r\n  }\r\n\r\n  private getEndpointOverlays(isSource: boolean) {\r\n    return [\r\n      [\r\n        'Label', {\r\n          id: 'endpointLabel',\r\n          location: [0.5, isSource ? 0 : 1],\r\n          label: 'Default',\r\n          cssClass: isSource ? 'endpointSourceLabel' : 'endpointTargetLabel',\r\n        },\r\n      ],\r\n    ];\r\n  }\r\n\r\n  private onChangeLabel(endpointOrOverlay: PlumbType, isSource: boolean, pipelineDataSourceGuid: string) {\r\n    if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n\r\n    const overlay: PlumbType = endpointOrOverlay.getOverlay ? endpointOrOverlay.getOverlay('endpointLabel') : endpointOrOverlay;\r\n    const data: RenameStreamDialogData = {\r\n      pipelineDataSourceGuid,\r\n      isSource,\r\n      label: overlay.label,\r\n    };\r\n    this.dialogRef = this.dialog.open(RenameStreamComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    this.dialogRef.afterClosed().subscribe(newLabel => {\r\n      if (!newLabel) { return; }\r\n      overlay.setLabel(newLabel);\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private bindEvents() {\r\n    this.instance.bind('connectionDetached', (info: PlumbType) => {\r\n      if (this.bulkDelete) { return; }\r\n      const domDataSource: HTMLElement = info.target;\r\n      const pipelineDataSource = this.pipelineModel.DataSources.find(\r\n        pipelineDS => pipelineDS.EntityGuid === domDataSource.id.replace(dataSrcIdPrefix, '')\r\n      );\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      const label: string = info.targetEndpoint.getOverlay('endpointLabel').label;\r\n      const isDynamic = !dataSource.In.some(name => this.getEndpointInfo(name, false).name === label);\r\n      if (isDynamic) {\r\n        this.instance.deleteEndpoint(info.targetEndpoint);\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      } else {\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      }\r\n    });\r\n\r\n    this.instance.bind('connection', (info: PlumbType) => {\r\n      if (info.sourceId === info.targetId) {\r\n        setTimeout(() => {\r\n          this.instance.deleteConnection(info.connection, { fireEvent: false });\r\n          setTimeout(() => { this.onConnectionsChanged(); });\r\n        });\r\n        return;\r\n      }\r\n      const endpointLabel: PlumbType = info.targetEndpoint.getOverlay('endpointLabel');\r\n      const labelPrompt: string = endpointLabel.getLabel();\r\n      const endpoints: PlumbType[] = this.instance.getEndpoints(info.target.id);\r\n      const targetEndpointHasSameLabel = endpoints.some(endpoint => {\r\n        const label: string = endpoint.getOverlay('endpointLabel').getLabel();\r\n        return label === labelPrompt &&\r\n          info.targetEndpoint.id !== endpoint.id &&\r\n          (endpoint.canvas as HTMLCanvasElement).classList.contains('targetEndpoint');\r\n      });\r\n      if (targetEndpointHasSameLabel) {\r\n        endpointLabel.setLabel(`PleaseRename${Math.floor(Math.random() * 99999)}`);\r\n      }\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n  }\r\n\r\n  private getEndpointInfo(endpointName: string, isDynamic: boolean): EndpointInfo {\r\n    let name: string;\r\n    let required: boolean;\r\n\r\n    if (isDynamic) {\r\n      name = endpointName;\r\n      required = false;\r\n    } else {\r\n      const trimmed = endpointName.trim();\r\n      required = trimmed.endsWith('*');\r\n      name = !required ? trimmed : trimmed.substring(0, trimmed.length - 1);\r\n    }\r\n\r\n    const endpointInfo: EndpointInfo = {\r\n      name,\r\n      required,\r\n    };\r\n    return endpointInfo;\r\n  }\r\n}\r\n","<div #domRoot id=\"pipeline-root\" *ngIf=\"(templateModel$ | async) as templateModel\">\r\n  <!-- do not use trackBy, jsPlumb drag stops working properly after delete -->\r\n  <ng-container *ngIf=\"!hardReset\">\r\n    <div #domDataSource *ngFor=\"let dataSource of templateModel.pipelineDataSources\"\r\n      [id]=\"dataSrcIdPrefix + dataSource.EntityGuid\" class=\"dataSource\" [ngStyle]=\"{\r\n        'top': dataSource.VisualDesignerData.Top + 'px',\r\n        'left': dataSource.VisualDesignerData.Left + 'px',\r\n        'min-width': dataSource.VisualDesignerData.Width ? dataSource.VisualDesignerData.Width + 'px' : null\r\n      }\" [ngClass]=\"{\r\n        'show-details': templateModel.showDataSourceDetails && templateModel.dataSourceConfigs[dataSource.EntityId]?.length\r\n      }\">\r\n\r\n      <div class=\"actions left\">\r\n        <mat-icon class=\"type-info\" [title]=\"templateModel.typeInfos[dataSource.EntityGuid].UiHint\">\r\n          {{ templateModel.typeInfos[dataSource.EntityGuid].Icon }}\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"configure\" title=\"Configure data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].EnableConfig\"\r\n          (click)=\"configureDataSource(dataSource)\">\r\n          settings\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"help\" title=\"Help for this data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.typeInfos[dataSource.EntityGuid].HelpLink\"\r\n          (click)=\"openHelp(templateModel.typeInfos[dataSource.EntityGuid].HelpLink)\">\r\n          help_outline\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"actions right\">\r\n        <mat-icon class=\"delete\" title=\"Delete\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && !isOutDataSource(dataSource)\" (click)=\"remove(dataSource)\">\r\n          delete\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"name\" title=\"Click to edit name\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editName(dataSource)\">\r\n        <span>{{ dataSource.Name || '(no name)' }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br>\r\n\r\n      <div class=\"description\" title=\"Click to edit description\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editDescription(dataSource)\">\r\n        <span>{{ dataSource.Description }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br>\r\n\r\n      <ng-container\r\n        *ngIf=\"templateModel.showDataSourceDetails && templateModel.dataSourceConfigs[dataSource.EntityId]?.length\">\r\n        <hr style=\"margin: 0\">\r\n        <table class=\"configs\">\r\n          <tr class=\"config\" *ngFor=\"let config of templateModel.dataSourceConfigs[dataSource.EntityId]\">\r\n            <td class=\"config-name\" [title]=\"config.name\">{{ config.name }}</td>\r\n            <td class=\"config-value\" [title]=\"config.value\">{{ config.value }}</td>\r\n          </tr>\r\n        </table>\r\n      </ng-container>\r\n\r\n      <div class=\"typename\" [title]=\"dataSource.PartAssemblyAndType\">\r\n        Type: {{ getTypeName(dataSource.PartAssemblyAndType) }}\r\n      </div>\r\n\r\n      <div class=\"add-endpoint sourceEndpoint dynamic\" title=\"Drag a new Out-Connection\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicOut\">\r\n      </div>\r\n\r\n      <div class=\"many-in targetEndpoint dynamic\" title=\"This data source supports multiple In-Connections\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicIn\">\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, Observable, Subscription } from 'rxjs';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { loadScripts } from '../../shared/helpers/load-scripts.helper';\r\nimport { PipelineDataSource, PipelineResultStream, VisualDesignerData } from '../models';\r\nimport { QueryDefinitionService } from '../services/query-definition.service';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateTypeInfos } from './plumb-editor.helpers';\r\nimport { PlumbEditorTemplateModel } from './plumb-editor.models';\r\nimport { dataSrcIdPrefix, Plumber } from './plumber.helper';\r\n\r\nconst jsPlumbUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.14.5/js/jsplumb.min.js';\r\n\r\n@Component({\r\n  selector: 'app-plumb-editor',\r\n  templateUrl: './plumb-editor.component.html',\r\n  styles: [':host { display: block; width: 100%; height: 100%; }'],\r\n  styleUrls: ['./plumb-editor.component.scss'],\r\n})\r\nexport class PlumbEditorComponent extends BaseSubsinkComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('domRoot') private domRootRef: ElementRef<HTMLDivElement>;\r\n  @ViewChildren('domDataSource') private domDataSourcesRef: QueryList<ElementRef<HTMLDivElement>>;\r\n\r\n  dataSrcIdPrefix = dataSrcIdPrefix;\r\n  templateModel$: Observable<PlumbEditorTemplateModel>;\r\n  hardReset = false;\r\n\r\n  private plumber: Plumber;\r\n  private scriptLoaded$ = new BehaviorSubject(false);\r\n\r\n  constructor(\r\n    private visualQueryService: VisualQueryService,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n  ) {\r\n    super();\r\n   }\r\n\r\n  ngOnInit() {\r\n    loadScripts([{ test: 'jsPlumb', src: jsPlumbUrl }], () => {\r\n      this.scriptLoaded$.next(true);\r\n    });\r\n\r\n    this.subscription.add(\r\n      this.visualQueryService.putEntityCountOnConnections$.subscribe(result => {\r\n        this.plumber.putEntityCountOnConnections(result);\r\n      })\r\n    );\r\n\r\n    const pipelineDesignerData$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => GeneralHelpers.tryParse(pipelineModel?.Pipeline.VisualDesignerData) ?? {}),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.templateModel$ = combineLatest([\r\n      this.visualQueryService.pipelineModel$,\r\n      this.visualQueryService.dataSources$,\r\n      pipelineDesignerData$,\r\n      this.visualQueryService.dataSourceConfigs$,\r\n    ]).pipe(\r\n      map(([pipelineModel, dataSources, pipelineDesignerData, dataSourceConfigs]) => {\r\n        if (pipelineModel == null || dataSources == null) { return; }\r\n\r\n        // workaround for jsPlumb not working with dom elements which it initialized on previously.\r\n        // This wipes dom entirely and gives us new elements\r\n        this.hardReset = true;\r\n        this.changeDetectorRef.detectChanges();\r\n        this.hardReset = false;\r\n        const templateModel: PlumbEditorTemplateModel = {\r\n          pipelineDataSources: pipelineModel.DataSources,\r\n          typeInfos: calculateTypeInfos(pipelineModel.DataSources, dataSources),\r\n          allowEdit: pipelineModel.Pipeline.AllowEdit,\r\n          showDataSourceDetails: pipelineDesignerData.ShowDataSourceDetails ?? false,\r\n          dataSourceConfigs,\r\n        };\r\n        return templateModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // https://stackoverflow.com/questions/37087864/execute-a-function-when-ngfor-finished-in-angular-2/37088348#37088348\r\n    const domDataSourcesLoaded$ = this.domDataSourcesRef.changes.pipe(map(() => true));\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.scriptLoaded$, domDataSourcesLoaded$]).subscribe(([scriptLoaded, domDataSourcesLoaded]) => {\r\n        if (!scriptLoaded || !domDataSourcesLoaded) { return; }\r\n\r\n        this.plumber?.destroy();\r\n        this.plumber = new Plumber(\r\n          this.domRootRef.nativeElement,\r\n          this.visualQueryService.pipelineModel$.value,\r\n          this.visualQueryService.dataSources$.value,\r\n          this.onConnectionsChanged.bind(this),\r\n          this.onDragend.bind(this),\r\n          this.onDebugStream.bind(this),\r\n          this.dialog,\r\n          this.viewContainerRef,\r\n          this.changeDetectorRef,\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.plumber?.destroy();\r\n    this.scriptLoaded$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  onConnectionsChanged() {\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.changeConnections(connections, streamsOut);\r\n  }\r\n\r\n  onDragend(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    this.visualQueryService.changeDataSourcePosition(pipelineDataSourceGuid, position);\r\n  }\r\n\r\n  onDebugStream(stream: PipelineResultStream) {\r\n    this.visualQueryService.debugStream(stream);\r\n  }\r\n\r\n  configureDataSource(dataSource: PipelineDataSource) {\r\n    // ensure dataSource entity is saved\r\n    if (dataSource.EntityGuid.includes('unsaved')) {\r\n      this.visualQueryService.saveAndRun(true, false);\r\n    } else {\r\n      this.visualQueryService.editDataSource(dataSource);\r\n    }\r\n  }\r\n\r\n  getTypeName(partAssemblyAndType: string) {\r\n    const dataSource = this.visualQueryService.dataSources$.value.find(ds => ds.PartAssemblyAndType === partAssemblyAndType);\r\n    return this.queryDefinitionService.typeNameFilter(dataSource?.TypeNameForUi || partAssemblyAndType, 'className');\r\n  }\r\n\r\n  isOutDataSource(pipelineDataSource: PipelineDataSource) {\r\n    return pipelineDataSource.PartAssemblyAndType === eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType;\r\n  }\r\n\r\n  remove(pipelineDataSource: PipelineDataSource) {\r\n    if (!confirm(`Delete ${pipelineDataSource.Name} data source?`)) { return; }\r\n\r\n    this.plumber.removeEndpointsOnDataSource(pipelineDataSource.EntityGuid);\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.removeDataSource(pipelineDataSource.EntityGuid, connections, streamsOut);\r\n  }\r\n\r\n  openHelp(url: string) {\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  editName(dataSource: PipelineDataSource) {\r\n    const newName = prompt('Rename data source', dataSource.Name)?.trim();\r\n    if (newName == null || newName === '') { return; }\r\n\r\n    this.visualQueryService.renameDataSource(dataSource.EntityGuid, newName);\r\n  }\r\n\r\n  editDescription(dataSource: PipelineDataSource) {\r\n    const newDescription = prompt('Edit description', dataSource.Description)?.trim();\r\n    if (newDescription == null) { return; }\r\n\r\n    this.visualQueryService.changeDataSourceDescription(dataSource.EntityGuid, newDescription);\r\n  }\r\n\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"(pipelineModel$ | async) as pipelineModel\">\r\n\r\n  <div class=\"wrapper\">\r\n    <div class=\"actions\">\r\n      <button mat-raised-button class=\"action\" color=\"accent\" (click)=\"saveAndRunQuery(true, true)\">\r\n        Save and run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(false, true)\">\r\n        Run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(true, false)\">\r\n        Save\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">\r\n        <div>Query Parameters</div>\r\n        <div>\r\n          <button mat-icon-button tippy=\"Edit parameters\" (click)=\"editPipeline()\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button tippy=\"Query Params Docs\" (click)=\"openParamsHelp()\">\r\n            <mat-icon>info</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.Params?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.Params?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">Test Parameters</div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.TestParameters?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.TestParameters?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\" *ngIf=\"visualDesignerData$ | async as visualDesignerData\">\r\n      <mat-slide-toggle color=\"primary\" labelPosition=\"before\" [checked]=\"visualDesignerData.ShowDataSourceDetails\"\r\n        (change)=\"showDataSourceDetails($event)\">\r\n        Show DataSource Params\r\n      </mat-slide-toggle>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"(warnings$ | async) as warnings\">\r\n      <div class=\"warnings\" *ngIf=\"warnings.length\">\r\n        <div class=\"title\">\r\n          <span>Warnings</span>\r\n          <mat-icon style=\"color: red\">warning</mat-icon>\r\n        </div>\r\n        <ol class=\"values\">\r\n          <li *ngFor=\"let warning of warnings\" [innerHTML]=\"warning\">\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"description\" *ngIf=\"pipelineModel.Pipeline.Description\">\r\n      <div class=\"title\">Query Description</div>\r\n      <div>{{ pipelineModel.Pipeline.Description }}</div>\r\n    </div>\r\n\r\n    <div class=\"footer-actions\">\r\n      <button mat-raised-button class=\"action\" (click)=\"openRestApi()\">\r\n        <span>Use in JSON / REST API</span>\r\n        <mat-icon>code_curly</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { map, Observable } from 'rxjs';\r\nimport { GoToDevRest } from '../../dev-rest';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateWarnings } from './run-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-run-explorer',\r\n  templateUrl: './run-explorer.component.html',\r\n  styleUrls: ['./run-explorer.component.scss'],\r\n})\r\nexport class RunExplorerComponent implements OnInit {\r\n  pipelineModel$: Observable<PipelineModel>;\r\n  warnings$: Observable<string[]>;\r\n  visualDesignerData$: Observable<Record<string, any>>;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.pipelineModel$ = this.visualQueryService.pipelineModel$.asObservable();\r\n    this.warnings$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => calculateWarnings(pipelineModel, this.context)),\r\n    );\r\n    this.visualDesignerData$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => GeneralHelpers.tryParse(pipelineModel.Pipeline.VisualDesignerData) ?? {}),\r\n    );\r\n  }\r\n\r\n  editPipeline() {\r\n    this.visualQueryService.editPipelineEntity();\r\n  }\r\n\r\n  openParamsHelp() {\r\n    window.open('http://r.2sxc.org/QueryParams', '_blank');\r\n  }\r\n\r\n  saveAndRunQuery(save: boolean, run: boolean) {\r\n    this.visualQueryService.saveAndRun(save, run);\r\n  }\r\n\r\n  showDataSourceDetails(event: MatSlideToggleChange): void {\r\n    this.visualQueryService.showDataSourceDetails(event.checked);\r\n  }\r\n\r\n  openRestApi() {\r\n    const queryGuid = this.visualQueryService.pipelineModel$.value.Pipeline.EntityGuid;\r\n    this.router.navigate([GoToDevRest.getUrlQuery(queryGuid)], { relativeTo: this.route });\r\n  }\r\n}\r\n","import { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\n\r\n/**\r\n * Check if there are special warnings the developer should know.\r\n * Typically when the test ModuleId is different from the one we're currently working on\r\n */\r\nexport function calculateWarnings(pipelineModel: PipelineModel, context: Context) {\r\n  const warnings: string[] = [];\r\n\r\n  try {\r\n    const queryParams = pipelineModel.Pipeline.Params?.split(/\\r?\\n/) || [];\r\n    const testParams = pipelineModel.Pipeline.TestParameters?.split(/\\r?\\n/) || [];\r\n\r\n    queryParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Query Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const paramSyntax = /^[a-zA-Z0-9]+=(.*)$/gmi;\r\n      const matched = paramSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Query Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>key=value</code> <br>\r\n          or resolve to a token like: <br>\r\n          <code>key=[source:key]</code>\r\n        `);\r\n      }\r\n    });\r\n\r\n    testParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Test Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const testParamSyntax = /^\\[[a-zA-Z]+:[a-zA-Z0-9]+\\]=(.*)$/gmi;\r\n      const matched = testParamSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Test Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>[source:key]=value</code>\r\n        `);\r\n      }\r\n\r\n      // Check if we should show the warning about the test ModuleId.\r\n      // This is because in the old days, the ModuleId wasn't auto-filled, so people had to add it as a test value.\r\n      // Now it's not necessary any more\r\n      const midRegex = /^\\[module:id\\]=([0-9]*)$/gmi;\r\n      const midMatch = midRegex.exec(param);\r\n      if (midMatch) {\r\n        const testMid = midMatch[1];\r\n        const urlMid = context.moduleId?.toString();\r\n        if (testMid !== urlMid) {\r\n          warnings.push(`\r\n            Your test ModuleId (${testMid}) is different from the current ModuleId (${urlMid}).<br>\r\n            Note that 2sxc automatically provides the ModuleId - so you usually do not need to set it\r\n          `);\r\n        }\r\n      }\r\n\r\n      const oldMidRegex = /^\\[module:moduleid\\]=([0-9]*)$/gmi;\r\n      const oldMidMatch = oldMidRegex.exec(param);\r\n      if (oldMidMatch) {\r\n        warnings.push(`\r\n          You are using deprecated [Module:ModuleId] test parameter.<br>\r\n          Please use [Module:Id]\r\n        `);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Something went wrong in calculateWarnings for params', error);\r\n  }\r\n\r\n  return warnings;\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"sorted$ | async as sorted\">\r\n\r\n  <mat-slide-toggle labelPosition=\"before\" color=\"primary\" (change)=\"toggleDifficulty($event)\">\r\n    Show Advanced\r\n  </mat-slide-toggle>\r\n\r\n  <ng-container *ngFor=\"let group of sorted | keyvalue; trackBy: trackGroups\">\r\n    <div class=\"collapsible\" [tippy]=\"guiTypes[group.key].UiHint || group.key\" tippyShowDelay=\"750\"\r\n      (click)=\"toggleItem(group.key)\">\r\n      <mat-icon>{{ guiTypes[group.key].Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n      <span>{{ guiTypes[group.key].Label ?? guiTypes[group.key].Name ?? group.key }}</span>\r\n    </div>\r\n\r\n    <div class=\"list\" *ngIf=\"toggledItems.includes(group.key)\">\r\n      <div class=\"list-item\" *ngFor=\"let dataSource of group.value; trackBy: trackDataSources\"\r\n        [tippy]=\"dataSource.UiHint || dataSource.Name\" tippyShowDelay=\"750\" (click)=\"addDataSource(dataSource)\">\r\n        <mat-icon>{{ dataSource.Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n        <span>{{ dataSource.Name }}</span>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { KeyValue } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, map, Observable } from 'rxjs';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\nimport { guiTypes } from '../plumb-editor/plumb-editor.helpers';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { filterAndSortDataSources } from './add-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-add-explorer',\r\n  templateUrl: './add-explorer.component.html',\r\n  styleUrls: ['./add-explorer.component.scss'],\r\n})\r\nexport class AddExplorerComponent implements OnInit, OnDestroy {\r\n  sorted$: Observable<SortedDataSources>;\r\n  toggledItems: string[] = [];\r\n  guiTypes = guiTypes;\r\n\r\n  private difficulties = eavConstants.pipelineDesigner.dataSourceDifficulties;\r\n  private difficulty$ = new BehaviorSubject(this.difficulties.default);\r\n\r\n  constructor(private visualQueryService: VisualQueryService) { }\r\n\r\n  ngOnInit() {\r\n    this.sorted$ = combineLatest([this.visualQueryService.dataSources$, this.difficulty$]).pipe(\r\n      map(([dataSources, difficulty]) => filterAndSortDataSources(dataSources, difficulty)),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.difficulty$.complete();\r\n  }\r\n\r\n  toggleDifficulty(event: MatSlideToggleChange) {\r\n    const difficulty = event.checked ? this.difficulties.advanced : this.difficulties.default;\r\n    this.difficulty$.next(difficulty);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    this.visualQueryService.addDataSource(dataSource);\r\n  }\r\n\r\n  toggleItem(item: string) {\r\n    GeneralHelpers.toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n  trackGroups(index: number, type: KeyValue<string, DataSource[]>) {\r\n    return type.key;\r\n  }\r\n\r\n  trackDataSources(index: number, dataSource: DataSource) {\r\n    return dataSource.PartAssemblyAndType;\r\n  }\r\n}\r\n","import cloneDeep from 'lodash-es/cloneDeep';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\n\r\nexport function filterAndSortDataSources(dataSources: DataSource[], maxDifficulty: number) {\r\n  if (!dataSources) { return; }\r\n\r\n  const cloned = cloneDeep(dataSources);\r\n\r\n  const filtered = cloned.filter(dataSource =>\r\n    dataSource.Difficulty <= maxDifficulty\r\n    && dataSource.PartAssemblyAndType !== eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType\r\n  );\r\n\r\n  filtered.sort((a, b) => a.Name.toLocaleLowerCase().localeCompare(b.Name.toLocaleLowerCase()));\r\n\r\n  const sorted: SortedDataSources = {};\r\n  for (const dataSource of filtered) {\r\n    const type = dataSource.PrimaryType;\r\n    if (sorted[type]) {\r\n      sorted[type].push(dataSource);\r\n    } else {\r\n      sorted[type] = [dataSource];\r\n    }\r\n  }\r\n\r\n  return sorted;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { GoToDevRest } from '../dev-rest';\r\nimport { edit } from '../edit/edit.matcher';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: VisualQueryComponent, children: [\r\n      GoToDevRest.route,\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../edit/edit.module').then(m => m.EditModule),\r\n        data: { history: false },\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class VisualQueryRoutingModule { }\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Context } from '../shared/services/context';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { VisualQueryService } from './services/visual-query.service';\r\n\r\n@Component({\r\n  selector: 'app-visual-query',\r\n  templateUrl: './visual-query.component.html',\r\n  styleUrls: ['./visual-query.component.scss'],\r\n  providers: [VisualQueryService],\r\n})\r\nexport class VisualQueryComponent implements OnInit {\r\n  @ViewChild(PlumbEditorComponent) plumbEditor: PlumbEditorComponent;\r\n\r\n  explorer = {\r\n    run: 'run',\r\n    add: 'add'\r\n  };\r\n  activeExplorer = this.explorer.run;\r\n\r\n  constructor(private context: Context, private route: ActivatedRoute, private visualQueryService: VisualQueryService) {\r\n    this.context.init(this.route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.visualQueryService.init();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    this.activeExplorer = (this.activeExplorer === explorer) ? null : explorer;\r\n  }\r\n\r\n  openHelp() {\r\n    window.open('http://r.2sxc.org/visual-query', '_blank');\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>\r\n\r\n<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" tippy=\"Run\" [ngClass]=\"{ 'active': activeExplorer === explorer.run }\"\r\n      (click)=\"toggleExplorer(explorer.run)\">\r\n      <mat-icon>play_arrow</mat-icon>\r\n    </div>\r\n    <div class=\"button\" tippy=\"Add\" [ngClass]=\"{ 'active': activeExplorer === explorer.add }\"\r\n      (click)=\"toggleExplorer(explorer.add)\">\r\n      <mat-icon>add</mat-icon>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"button\" tippy=\"Help\" (click)=\"openHelp()\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-run-explorer [hidden]=\"activeExplorer !== explorer.run\"></app-run-explorer>\r\n\r\n  <app-add-explorer [hidden]=\"activeExplorer !== explorer.add\"></app-add-explorer>\r\n\r\n  <app-plumb-editor></app-plumb-editor>\r\n</div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../permissions/services/metadata.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { AddExplorerComponent } from './add-explorer/add-explorer.component';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { RenameStreamComponent } from './plumb-editor/rename-stream/rename-stream.component';\r\nimport { QueryResultComponent } from './query-result/query-result.component';\r\nimport { RunExplorerComponent } from './run-explorer/run-explorer.component';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { StreamErrorResultComponent } from './stream-error-result/stream-error-result.component';\r\nimport { VisualQueryRoutingModule } from './visual-query-routing.module';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n    QueryResultComponent,\r\n    StreamErrorResultComponent,\r\n    RenameStreamComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedComponentsModule,\r\n    VisualQueryRoutingModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule,\r\n    MatSelectModule,\r\n    MatInputModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    QueryDefinitionService,\r\n    MetadataService,\r\n    ContentTypesService,\r\n  ],\r\n})\r\nexport class VisualQueryModule { }\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_visual-query_visual-query_module_ts.05b5563237c22204.js"}