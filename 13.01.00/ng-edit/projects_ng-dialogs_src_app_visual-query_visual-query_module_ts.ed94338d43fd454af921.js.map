{"version":3,"sources":["./projects/ng-dialogs/src/app/visual-query/services/query-definition.service.ts","./projects/ng-dialogs/src/app/visual-query/plumb-editor/plumb-editor.helpers.ts","./projects/ng-dialogs/src/app/visual-query/query-result/query-result.component.html","./projects/ng-dialogs/src/app/visual-query/query-result/query-result.component.ts","./projects/ng-dialogs/src/app/visual-query/stream-error-result/stream-error-result.component.ts","./projects/ng-dialogs/src/app/visual-query/stream-error-result/stream-error-result.component.html","./projects/ng-dialogs/src/app/visual-query/services/visual-query.service.ts","./projects/ng-dialogs/src/app/visual-query/plumb-editor/rename-stream/rename-stream.component.html","./projects/ng-dialogs/src/app/visual-query/plumb-editor/rename-stream/rename-stream.component.ts","./projects/ng-dialogs/src/app/visual-query/plumb-editor/plumber.helper.ts","./projects/ng-dialogs/src/app/visual-query/plumb-editor/plumb-editor.component.html","./projects/ng-dialogs/src/app/visual-query/plumb-editor/plumb-editor.component.ts","./projects/ng-dialogs/src/app/visual-query/run-explorer/run-explorer.component.html","./projects/ng-dialogs/src/app/visual-query/run-explorer/run-explorer.component.ts","./projects/ng-dialogs/src/app/visual-query/run-explorer/run-explorer.helpers.ts","./projects/ng-dialogs/src/app/visual-query/add-explorer/add-explorer.component.html","./projects/ng-dialogs/src/app/visual-query/add-explorer/add-explorer.component.ts","./projects/ng-dialogs/src/app/visual-query/add-explorer/add-explorer.helpers.ts","./projects/ng-dialogs/src/app/visual-query/visual-query-routing.module.ts","./projects/ng-dialogs/src/app/visual-query/visual-query.component.ts","./projects/ng-dialogs/src/app/visual-query/visual-query.component.html","./projects/ng-dialogs/src/app/visual-query/visual-query.module.ts"],"names":["http","context","dnnContext","fetchPipeline","pipelineEntityId","dataSources","this","get","$2sxc","apiUrl","params","appId","toString","id","pipe","map","pipelineModel","DataSources","length","buildDefaultModel","fixPipelineDataSources","templateDataSources","templateDS","dataSource","find","ds","PartAssemblyAndType","push","Description","EntityGuid","EntityId","undefined","Name","VisualDesignerData","Pipeline","StreamWiring","pipelineDataSources","some","pipelineDS","outDs","pipelineDataSource","Top","Left","fetchDataSources","ContentType","Difficulty","DynamicIn","DynamicOut","EnableConfig","HelpLink","Icon","In","Out","PrimaryType","TypeNameForUi","UiHint","typeNameFilter","input","format","globalParts","split","classFullNameParts","savePipeline","pipeline","post","Id","newPipelineModel","runPipeline","top","debugStream","source","sourceOut","from","out","QueryDefinitionService","guiTypes","Cache","Filter","Logic","Lookup","Modify","Security","Sort","Source","Target","Unknown","Debug","System","calculateTypeInfos","typeInfos","typeInfo","dialogData","dialogRef","visualQueryService","ngOnInit","pipelineModel$","value","Params","filter","el","testParams","TestParameters","parameters","concat","timeUsed","result","QueryTimer","Milliseconds","ticksUsed","Ticks","optionsForTop","Query","sources","Sources","streams","Streams","closeDialog","close","show","original","QueryResultComponent","errorData","openInsights","window","open","StreamErrorResultComponent","router","route","queryDefinitionService","titleService","snackBar","dialog","viewContainerRef","zone","metadataService","contentTypesService","changeDetectorRef","BehaviorSubject","dataSources$","putEntityCountOnConnections$","Subject","dataSourceConfigs$","pipelineId","parseInt","snapshot","paramMap","refreshPipeline","refreshDataSourceConfigs","subscription","Subscription","ngOnDestroy","complete","unsubscribe","init","attachKeyboardSave","refreshOnChildClosed","editPipelineEntity","formUrl","items","navigate","relativeTo","saveAndRun","save","run","showDataSourceDetails","showDetails","cloneDeep","visualDesignerData","ShowDataSourceDetails","JSON","stringify","next","addDataSource","removeDataSource","pipelineDataSourceGuid","connections","streamsOut","StreamsOut","renameDataSource","name","changeDataSourceDescription","description","changeConnections","changeDataSourcePosition","position","calculateDataSourceConfigs","dataSourceConfigs","forEach","Metadata","metadataItem","Object","entries","attributeName","attributeValue","includes","Array","isArray","Title","editDataSource","contentTypeName","key","getMetadata","subscribe","metadata","Items","retrieveContentType","contentType","ContentTypeName","For","Guid","error","alert","callback","duration","pipelineResult","showQueryResult","console","warn","setTimeout","stream","Error","showStreamErrorResult","Count","SourceOut","streamResult","sourceName","showSnackBar","setTitle","autoFocus","backdropClass","closeOnNavigation","data","panelClass","markForCheck","ErrorData","runOutsideAngular","add","fromEvent","firstChild","event","navigator","platform","match","metaKey","ctrlKey","keyCode","preventDefault","events","startWith","pairwise","VisualQueryService","hostClass","isSource","pipelineResultExists","scopeOptions","labelOptions","guidedLabel","advancedMode","buildForm","label","toggleGuidedLabel","toggleAdvancedMode","checked","rename","formValue","form","getRawValue","scope","controls","valueChanges","distinctUntilChanged","values","Scope","patchValue","getScopes","scopes","filtered","s","o","RenameStreamComponent","dataSrcIdPrefix","jsPlumbRoot","onConnectionsChanged","onDragend","onDebugStream","lineCount","linePaintDefault","stroke","strokeWidth","outlineStroke","outlineWidth","lineColors","maxCols","uuidColorMap","bulkDelete","instance","jsPlumb","getInstance","getInstanceDefaults","batch","initDomDataSources","initWirings","bindEvents","repaintEverything","destroy","reset","unbindContainer","removeEndpointsOnDataSource","elementId","selectEndpoints","element","delete","getAllConnections","connection","From","sourceId","replace","endpoints","getOverlay","To","targetId","getStreamsOut","target","each","endpoint","join","putEntityCountOnConnections","sourceElementId","toUuid","TargetIn","sEndp","getEndpoint","getUuid","setLabel","cssClass","click","overlay","AllowEdit","nextLinePaintStyle","uuid","assign","container","Container","Connector","curviness","PaintStyle","HoverPaintStyle","domDataSource","querySelector","draggable","grid","stop","finalPos","addEndpoint","targetEndpointUnlimited","buildTargetEndpoint","maxConnections","makeTarget","makeSource","buildSourceEndpoint","wire","fromUuid","targetElementId","pipeDataSource","connect","uuids","paintStyle","e","message","to","endpointName","isIn","style","d","isDynamic","getEndpointInfo","endpointInfo","required","model","enabled","fill","radius","anchor","faces","overlays","getEndpointOverlays","endpointOrOverlay","onChangeLabel","isTarget","dropOptions","hoverClass","activeClass","location","width","afterClosed","newLabel","bind","info","targetEndpoint","deleteEndpoint","endpointLabel","labelPrompt","getLabel","getEndpoints","canvas","classList","contains","Math","floor","random","deleteConnection","fireEvent","trimmed","trim","endsWith","substring","hardReset","scriptLoaded$","test","src","plumber","pipelineDesignerData$","templateModel$","combineLatest","pipelineDesignerData","detectChanges","allowEdit","ngAfterViewInit","domDataSourcesLoaded$","domDataSourcesRef","changes","Plumber","domRootRef","nativeElement","configureDataSource","getTypeName","partAssemblyAndType","isOutDataSource","remove","confirm","openHelp","url","editName","newName","prompt","editDescription","newDescription","PlumbEditorComponent","asObservable","warnings$","warnings","queryParams","param","midMatch","exec","testMid","urlMid","moduleId","calculateWarnings","visualDesignerData$","editPipeline","openParamsHelp","saveAndRunQuery","openRestApi","RunExplorerComponent","toggledItems","difficulties","difficulty$","default","sorted$","maxDifficulty","sort","a","b","toLocaleLowerCase","localeCompare","sorted","type","filterAndSortDataSources","toggleDifficulty","advanced","toggleItem","item","trackGroups","index","trackDataSources","AddExplorerComponent","routes","path","component","explorer","activeExplorer","toggleExplorer","VisualQueryComponent","children","matcher","loadChildren","then","m","EditModule","history","VisualQueryRoutingModule","VisualQueryModule"],"mappings":"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","file":"projects_ng-dialogs_src_app_visual-query_visual-query_module_ts.ed94338d43fd454af921.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiQueryDataSources, webApiQueryDebugStream, webApiQueryGet, webApiQueryRun, webApiQuerySave } from '../../app-administration/services';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult } from '../models';\r\n\r\n@Injectable()\r\nexport class QueryDefinitionService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  fetchPipeline(pipelineEntityId: number, dataSources: DataSource[]) {\r\n    return this.http.get<PipelineModel>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryGet), {\r\n      params: { appId: this.context.appId.toString(), id: pipelineEntityId.toString() }\r\n    }).pipe(\r\n      map(pipelineModel => {\r\n        // if pipeline is new, populate it with default model\r\n        if (!pipelineModel.DataSources.length) {\r\n          this.buildDefaultModel(pipelineModel, dataSources);\r\n        }\r\n        this.fixPipelineDataSources(pipelineModel.DataSources);\r\n        return pipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private buildDefaultModel(pipelineModel: PipelineModel, dataSources: DataSource[]) {\r\n    const templateDataSources = eavConstants.pipelineDesigner.defaultPipeline.dataSources;\r\n    for (const templateDS of templateDataSources) {\r\n      const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === templateDS.PartAssemblyAndType);\r\n      const pipelineDataSource: PipelineDataSource = {\r\n        Description: '',\r\n        EntityGuid: templateDS.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: dataSource.Name,\r\n        PartAssemblyAndType: templateDS.PartAssemblyAndType,\r\n        VisualDesignerData: templateDS.VisualDesignerData,\r\n      };\r\n      pipelineModel.DataSources.push(pipelineDataSource);\r\n    }\r\n\r\n    pipelineModel.Pipeline.StreamWiring = eavConstants.pipelineDesigner.defaultPipeline.streamWiring;\r\n  }\r\n\r\n  private fixPipelineDataSources(pipelineDataSources: PipelineDataSource[]) {\r\n    const outDataSourceExists = pipelineDataSources.some(\r\n      pipelineDS => pipelineDS.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    );\r\n    if (!outDataSourceExists) {\r\n      const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n      const outDsConst: PipelineDataSource = {\r\n        Description: outDs.Description,\r\n        EntityGuid: outDs.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: outDs.Name,\r\n        PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n        VisualDesignerData: outDs.VisualDesignerData,\r\n      };\r\n      pipelineDataSources.push(outDsConst);\r\n    }\r\n\r\n    for (const pipelineDataSource of pipelineDataSources) {\r\n      pipelineDataSource.VisualDesignerData ??= { Top: 50, Left: 50 };\r\n    }\r\n  }\r\n\r\n  fetchDataSources() {\r\n    return this.http.get<DataSource[]>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDataSources)).pipe(\r\n      map(dataSources => {\r\n        const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n        const outDsConst: DataSource = {\r\n          ContentType: undefined,\r\n          Difficulty: eavConstants.pipelineDesigner.dataSourceDifficulties.default,\r\n          DynamicIn: true,\r\n          DynamicOut: false,\r\n          EnableConfig: undefined,\r\n          HelpLink: undefined,\r\n          Icon: undefined,\r\n          In: outDs.In,\r\n          Name: outDs.Name,\r\n          Out: undefined,\r\n          PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n          PrimaryType: outDs.PrimaryType,\r\n          TypeNameForUi: undefined,\r\n          UiHint: undefined,\r\n        };\r\n        dataSources.push(outDsConst);\r\n        return dataSources;\r\n      }),\r\n    );\r\n  }\r\n\r\n  typeNameFilter(input: string, format: 'className' | 'classFullName') {\r\n    const globalParts = input.split(', ');\r\n\r\n    switch (format) {\r\n      case 'classFullName':\r\n        const classFullName = globalParts[0];\r\n        return classFullName;\r\n      case 'className':\r\n        const classFullNameParts = globalParts[0].split('.');\r\n        const className = classFullNameParts[classFullNameParts.length - 1];\r\n        return className;\r\n      default:\r\n        return input;\r\n    }\r\n  }\r\n\r\n  /** Save the current query and reload entire definition as returned from server */\r\n  savePipeline(pipelineModel: PipelineModel) {\r\n    const pipeline = pipelineModel.Pipeline;\r\n    const dataSources = pipelineModel.DataSources;\r\n\r\n    return this.http.post<PipelineModel>(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiQuerySave),\r\n      { pipeline, dataSources },\r\n      { params: { appId: this.context.appId.toString(), Id: pipeline.EntityId.toString() } }\r\n    ).pipe(\r\n      map(newPipelineModel => {\r\n        this.fixPipelineDataSources(newPipelineModel.DataSources);\r\n        return newPipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  runPipeline(id: number, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryRun), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), top: top.toString() }\r\n    });\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  debugStream(id: number, source: string, sourceOut: string, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDebugStream), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), from: source, out: sourceOut, top: top.toString() }\r\n    });\r\n  }\r\n}\r\n","import { DataSource, PipelineDataSource } from '../models';\r\nimport { GuiTypes, TypeInfo, TypeInfos } from './plumb-editor.models';\r\n\r\nexport const guiTypes: GuiTypes = {\r\n  Cache: { Name: 'Cache', Icon: 'history', UiHint: 'Caching of data' },\r\n  Filter: { Name: 'Filter', Icon: 'filter_list', UiHint: 'Filter data - usually returning less items than came in' },\r\n  Logic: { Name: 'Logic', Icon: 'share', UiHint: 'Logic operations - usually choosing between different streams' },\r\n  Lookup: { Name: 'Lookup', Icon: 'search', UiHint: 'Lookup operation - usually looking for other data based on a criteria' },\r\n  Modify: { Name: 'Modify', Icon: 'edit_attributes', UiHint: 'Modify data - usually changing, adding or removing values' },\r\n  Security: { Name: 'Security', Icon: 'account_circle', UiHint: 'Security - usually limit what the user sees based on his identity' },\r\n  Sort: { Name: 'Sort', Icon: 'sort', UiHint: 'Sort the items' },\r\n  Source: { Name: 'Source', Icon: 'cloud_upload', UiHint: 'Source of new data - usually SQL, CSV or similar' },\r\n  Target: { Name: 'Target', Icon: 'adjust', UiHint: 'Target - usually just a destination of data' },\r\n  Unknown: { Name: 'Unknown', Icon: 'fiber_manual_record', UiHint: 'Unknown type' },\r\n  Debug: { Name: 'Debug', Icon: 'bug_report', UiHint: 'Debugging Tools'},\r\n  System: { Name: 'System', Icon: 'military_tech', UiHint: 'System Data' },\r\n};\r\n\r\nexport function calculateTypeInfos(pipelineDataSources: PipelineDataSource[], dataSources: DataSource[]) {\r\n  const typeInfos: TypeInfos = {};\r\n\r\n  for (const pipelineDataSource of pipelineDataSources) {\r\n    let typeInfo: TypeInfo;\r\n    const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    if (dataSource) {\r\n      typeInfo = { ...(dataSource.PrimaryType ? guiTypes[dataSource.PrimaryType] : guiTypes.Unknown) };\r\n      if (dataSource.Icon != null) { typeInfo.Icon = dataSource.Icon; }\r\n      if (dataSource.DynamicIn != null) { typeInfo.DynamicIn = dataSource.DynamicIn; }\r\n      if (dataSource.DynamicOut != null) { typeInfo.DynamicOut = dataSource.DynamicOut; }\r\n      if (dataSource.HelpLink != null) { typeInfo.HelpLink = dataSource.HelpLink; }\r\n      if (dataSource.EnableConfig != null) { typeInfo.EnableConfig = dataSource.EnableConfig; }\r\n      if (dataSource.UiHint != null) { typeInfo.UiHint = dataSource.UiHint; }\r\n    }\r\n    if (!typeInfo) { typeInfo = { ...guiTypes.Unknown }; }\r\n    typeInfos[pipelineDataSource.EntityGuid] = typeInfo;\r\n  }\r\n\r\n  return typeInfos;\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>\r\n      Query Results\r\n      <ng-container *ngIf=\"debugStream\">\r\n        for Stream: \"{{ debugStream.name }}\" on Source: \"{{ debugStream.sourceName }}\"\r\n      </ng-container>\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<p class=\"dialog-description\">\r\n  The Full result was logged to the Browser Console. Further down you'll find more debug-infos.\r\n  Executed in {{ timeUsed }}ms ({{ ticksUsed }} ticks)\r\n</p>\r\n\r\n<mat-tab-group dynamicHeight color=\"accent\">\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Results\">\r\n      <span>Results</span>\r\n    </div>\r\n\r\n    <p class=\"description\">\r\n      <ng-container *ngIf=\"top === 0\">Showing All results</ng-container>\r\n      <ng-container *ngIf=\"top !== 0\">Showing top {{ top }} results</ng-container>\r\n      <button mat-button *ngFor=\"let option of optionsForTop\" (click)=\"show(option)\">\r\n        Show\r\n        <ng-container *ngIf=\"option === 0\">All</ng-container>\r\n        <ng-container *ngIf=\"option !== 0\">{{ option }}</ng-container>\r\n      </button>\r\n    </p>\r\n    <pre>{{ result | json }}</pre>\r\n  </mat-tab>\r\n\r\n  <mat-tab *ngIf=\"parameters?.length\">\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Parameters\">\r\n      <span>Parameters</span>\r\n    </div>\r\n\r\n    <br />\r\n    <ul class=\"description\">\r\n      <li *ngFor=\"let param of parameters\">{{ param }}</li>\r\n    </ul>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Sources\">\r\n      <span>Sources</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Name and Guid</th>\r\n        <th>Type</th>\r\n        <th>Configuration</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let source of sources | keyvalue\">\r\n        <td>\r\n          <div *ngIf=\"source.value.Definition?.Name\">{{ source.value.Definition?.Name }}</div>\r\n          <pre>{{ source.value.Guid }}</pre>\r\n        </td>\r\n        <td>{{ source.value.Type }}</td>\r\n        <td>\r\n          <ol>\r\n            <li *ngFor=\"let config of source.value.Configuration | keyvalue\">\r\n              <b>{{ config.key }}</b>=<em>{{ config.value }}</em>\r\n            </li>\r\n          </ol>\r\n        </td>\r\n        <td>{{ source.value.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Streams\">\r\n      <span>Streams</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Source</th>\r\n        <th>Target</th>\r\n        <th>Items</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let stream of streams\">\r\n        <td>\r\n          <pre>{{ stream.Source + \":\" + stream.SourceOut }}</pre>\r\n        </td>\r\n        <td>\r\n          <pre>{{ stream.Target + \":\" + stream.TargetIn }}</pre>\r\n        </td>\r\n        <td>{{ stream.Count }}</td>\r\n        <td>{{ stream.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n</mat-tab-group>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DebugStreamInfo, PipelineResultQuery, PipelineResultSources, PipelineResultStream } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { QueryResultDialogData } from './query-result.models';\r\n\r\n@Component({\r\n  selector: 'app-query-result',\r\n  templateUrl: './query-result.component.html',\r\n  styleUrls: ['./query-result.component.scss'],\r\n})\r\nexport class QueryResultComponent implements OnInit {\r\n  parameters: string[];\r\n  timeUsed: number;\r\n  ticksUsed: number;\r\n  top: number;\r\n  optionsForTop: number[];\r\n  result: PipelineResultQuery;\r\n  debugStream: DebugStreamInfo;\r\n  sources: PipelineResultSources;\r\n  streams: PipelineResultStream[];\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: QueryResultDialogData,\r\n    private dialogRef: MatDialogRef<QueryResultComponent>,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const pipeline = this.visualQueryService.pipelineModel$.value.Pipeline;\r\n    const params = (pipeline.Params?.split('\\n') ?? []).filter(el => !!el);\r\n    const testParams = (pipeline.TestParameters?.split('\\n') ?? []).filter(el => !!el);\r\n    this.parameters = [].concat(params, testParams);\r\n    this.timeUsed = this.dialogData.result.QueryTimer.Milliseconds;\r\n    this.ticksUsed = this.dialogData.result.QueryTimer.Ticks;\r\n    this.top = this.dialogData.top;\r\n    this.optionsForTop = [25, 100, 1000, 0];\r\n    this.result = this.dialogData.result.Query;\r\n    this.debugStream = this.dialogData.debugStream;\r\n    this.sources = this.dialogData.result.Sources;\r\n    this.streams = this.dialogData.result.Streams;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  show(top: number) {\r\n    if (top === this.top) { return; }\r\n\r\n    if (this.debugStream) {\r\n      this.visualQueryService.debugStream(this.debugStream.original, top);\r\n    } else {\r\n      this.visualQueryService.runPipeline(top);\r\n    }\r\n\r\n    this.closeDialog();\r\n  }\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { StreamErrorData } from '../models';\r\nimport { StreamErrorResultDialogData } from './stream-error-result.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-stream-error-result',\r\n  templateUrl: './stream-error-result.component.html',\r\n  styleUrls: ['./stream-error-result.component.scss'],\r\n})\r\nexport class StreamErrorResultComponent implements OnInit {\r\n  errorData: StreamErrorData;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: StreamErrorResultDialogData,\r\n    private dialogRef: MatDialogRef<StreamErrorResultComponent>,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.errorData = this.dialogData.errorData;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openInsights() {\r\n    window.open(window.$2sxc.http.apiUrl('sys/insights/logs?key=web-api'), '_blank');\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Stream Error Results</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<br />\r\n\r\n<pre>{{ errorData | json }}</pre>\r\n\r\n<div>\r\n  <button mat-button tippy=\"Open 2sxc Insights\" (click)=\"openInsights()\">\r\n    <mat-icon>speed</mat-icon>\r\n    <span>Insights</span>\r\n  </button>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Injectable, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { BehaviorSubject, fromEvent, Subject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../../permissions/services/metadata.service';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\n// tslint:disable-next-line:max-line-length\r\nimport { DataSource, DataSourceConfig, DataSourceConfigs, DebugStreamInfo, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { QueryResultComponent } from '../query-result/query-result.component';\r\nimport { QueryResultDialogData } from '../query-result/query-result.models';\r\nimport { StreamErrorResultComponent } from '../stream-error-result/stream-error-result.component';\r\nimport { StreamErrorResultDialogData } from '../stream-error-result/stream-error-result.models';\r\nimport { QueryDefinitionService } from './query-definition.service';\r\n\r\n@Injectable()\r\nexport class VisualQueryService implements OnDestroy {\r\n  pipelineModel$ = new BehaviorSubject<PipelineModel>(null);\r\n  dataSources$ = new BehaviorSubject<DataSource[]>(null);\r\n  putEntityCountOnConnections$ = new Subject<PipelineResult>();\r\n  dataSourceConfigs$ = new BehaviorSubject<DataSourceConfigs>({});\r\n  pipelineResult?: PipelineResult;\r\n\r\n  private pipelineId = parseInt(this.route.snapshot.paramMap.get('pipelineId'), 10);\r\n  private refreshPipeline = false;\r\n  private refreshDataSourceConfigs = false;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private titleService: Title,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private zone: NgZone,\r\n    private metadataService: MetadataService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnDestroy() {\r\n    this.pipelineModel$.complete();\r\n    this.dataSources$.complete();\r\n    this.putEntityCountOnConnections$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  init() {\r\n    this.fetchDataSources(() => this.fetchPipeline(true, true, false));\r\n    this.attachKeyboardSave();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  editPipelineEntity() {\r\n    // save Pipeline, then open Edit Dialog\r\n    this.savePipeline(() => {\r\n      const form: EditForm = {\r\n        items: [{ EntityId: this.pipelineModel$.value.Pipeline.EntityId }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.refreshPipeline = true;\r\n    });\r\n  }\r\n\r\n  saveAndRun(save: boolean, run: boolean) {\r\n    if (save && run) {\r\n      this.savePipeline(() => { this.runPipeline(); });\r\n    } else if (save) {\r\n      this.savePipeline();\r\n    } else if (run) {\r\n      this.runPipeline();\r\n    }\r\n  }\r\n\r\n  showDataSourceDetails(showDetails: boolean) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const visualDesignerData: Record<string, any> = GeneralHelpers.tryParse(pipelineModel.Pipeline.VisualDesignerData) ?? {};\r\n    visualDesignerData.ShowDataSourceDetails = showDetails;\r\n    pipelineModel.Pipeline.VisualDesignerData = JSON.stringify(visualDesignerData);\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const newPipelineDataSource: PipelineDataSource = {\r\n      Description: '',\r\n      EntityGuid: 'unsaved' + (pipelineModel.DataSources.length + 1),\r\n      EntityId: undefined,\r\n      Name: dataSource.Name,\r\n      PartAssemblyAndType: dataSource.PartAssemblyAndType,\r\n      VisualDesignerData: { Top: 100, Left: 100 },\r\n    };\r\n    pipelineModel.DataSources.push(newPipelineDataSource);\r\n    this.pipelineModel$.next(pipelineModel);\r\n    this.savePipeline();\r\n  }\r\n\r\n  removeDataSource(pipelineDataSourceGuid: string, connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.DataSources = pipelineModel.DataSources.filter(pipelineDS => pipelineDS.EntityGuid !== pipelineDataSourceGuid);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  renameDataSource(pipelineDataSourceGuid: string, name: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Name = name;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourceDescription(pipelineDataSourceGuid: string, description: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Description = description;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeConnections(connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourcePosition(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    if (!pipelineDataSource) {\r\n      // spm NOTE: fixes problem where dataSource position can't be updated if dataSource with guid unsavedXX gets saved while dragging.\r\n      // Can happen if dataSource is just added and user drags it and save happens.\r\n      return;\r\n    }\r\n    pipelineDataSource.VisualDesignerData = { ...pipelineDataSource.VisualDesignerData, ...position };\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  private calculateDataSourceConfigs(dataSources: PipelineDataSource[]) {\r\n    const dataSourceConfigs: DataSourceConfigs = {};\r\n    dataSources.forEach(dataSource => {\r\n      if (dataSource.EntityId == null) { return; }\r\n      dataSourceConfigs[dataSource.EntityId] = [];\r\n      dataSource.Metadata?.forEach(metadataItem => {\r\n        Object.entries(metadataItem).forEach(([attributeName, attributeValue]) => {\r\n          if (attributeValue == null || attributeValue === '') { return; }\r\n          if (['Created', 'Guid', 'Id', 'Modified', 'Title', '_Type'].includes(attributeName)) { return; }\r\n          if (Array.isArray(attributeValue) && attributeValue[0]?.Title != null && attributeValue[0]?.Id != null) {\r\n            attributeValue = `${attributeValue[0].Title} (${attributeValue[0].Id})`;\r\n          }\r\n          const dataSourceConfig: DataSourceConfig = {\r\n            name: attributeName,\r\n            value: attributeValue,\r\n          };\r\n          dataSourceConfigs[dataSource.EntityId].push(dataSourceConfig);\r\n        });\r\n      });\r\n    });\r\n    this.dataSourceConfigs$.next(dataSourceConfigs);\r\n  }\r\n\r\n  editDataSource(pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources$.value.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    const contentTypeName = dataSource.ContentType;\r\n    const typeId = eavConstants.metadata.entity.type;\r\n    const keyType = eavConstants.metadata.entity.keyType;\r\n    const key = pipelineDataSource.EntityGuid;\r\n\r\n    // query for existing Entity\r\n    this.metadataService.getMetadata(typeId, keyType, key, contentTypeName).subscribe(metadata => {\r\n      // edit existing Entity\r\n      if (metadata.Items.length) {\r\n        const form: EditForm = {\r\n          items: [{ EntityId: metadata.Items[0].Id }],\r\n        };\r\n        const formUrl = convertFormToUrl(form);\r\n        this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        this.refreshDataSourceConfigs = true;\r\n        return;\r\n      }\r\n\r\n      // Check if the type exists, and if yes, create new Entity\r\n      this.contentTypesService.retrieveContentType(contentTypeName).subscribe({\r\n        next: contentType => {\r\n          const form: EditForm = {\r\n            items: [{\r\n              ContentTypeName: contentTypeName,\r\n              For: {\r\n                Target: eavConstants.metadata.entity.target,\r\n                Guid: key,\r\n              }\r\n            }],\r\n          };\r\n          const formUrl = convertFormToUrl(form);\r\n          this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n          this.refreshDataSourceConfigs = true;\r\n        },\r\n        error: (error: HttpErrorResponse) => {\r\n          alert('Server reports error - this usually means that this data-source doesn\\'t have any configuration');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private savePipeline(callback?: () => void) {\r\n    this.snackBar.open('Saving...');\r\n    this.queryDefinitionService.savePipeline(this.pipelineModel$.value).subscribe({\r\n      next: pipelineModel => {\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.pipelineModel$.next(pipelineModel);\r\n        if (callback != null) { callback(); }\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Save Pipeline failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  runPipeline(top = 25) {\r\n    this.snackBar.open('Running query...');\r\n    this.queryDefinitionService.runPipeline(this.pipelineModel$.value.Pipeline.EntityId, top).subscribe({\r\n      next: pipelineResult => {\r\n        this.snackBar.open('Query worked', null, { duration: 2000 });\r\n        this.pipelineResult = pipelineResult;\r\n        this.showQueryResult(pipelineResult, top);\r\n        console.warn(pipelineResult);\r\n        // push cloned pipelineModel to reset jsPlumb\r\n        this.pipelineModel$.next(cloneDeep(this.pipelineModel$.value));\r\n        setTimeout(() => { this.putEntityCountOnConnections$.next(pipelineResult); });\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Query failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  debugStream(stream: PipelineResultStream, top = 25) {\r\n    if (stream.Error) {\r\n      this.showStreamErrorResult(stream);\r\n      return;\r\n    }\r\n\r\n    if (stream.Count === 0) { return; }\r\n\r\n    this.snackBar.open('Running stream...');\r\n    const pipelineId = this.pipelineModel$.value.Pipeline.EntityId;\r\n    this.queryDefinitionService.debugStream(pipelineId, stream.Source, stream.SourceOut, top).subscribe({\r\n      next: streamResult => {\r\n        this.snackBar.open('Stream worked', null, { duration: 2000 });\r\n        const pipelineDataSource = this.pipelineModel$.value.DataSources.find(ds => ds.EntityGuid === stream.Source);\r\n        const debugStream: DebugStreamInfo = {\r\n          name: stream.SourceOut,\r\n          source: stream.Source,\r\n          sourceName: pipelineDataSource.Name,\r\n          original: stream,\r\n        };\r\n        this.showQueryResult(streamResult, top, debugStream);\r\n        console.warn(streamResult);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Stream failed', null, { duration: 2000 });\r\n      },\r\n    });\r\n  }\r\n\r\n  private fetchPipeline(refreshPipeline: boolean, refreshDataSourceConfigs: boolean, showSnackBar: boolean) {\r\n    if (showSnackBar) {\r\n      this.snackBar.open('Reloading query, please wait...');\r\n    }\r\n    this.queryDefinitionService.fetchPipeline(this.pipelineId, this.dataSources$.value).subscribe(pipelineModel => {\r\n      if (showSnackBar) {\r\n        this.snackBar.open('Query reloaded', null, { duration: 2000 });\r\n      }\r\n      this.titleService.setTitle(`${pipelineModel.Pipeline.Name} - Visual Query`);\r\n      if (refreshPipeline) {\r\n        this.pipelineModel$.next(pipelineModel);\r\n      }\r\n      if (refreshDataSourceConfigs) {\r\n        this.calculateDataSourceConfigs(pipelineModel.DataSources);\r\n      }\r\n    });\r\n  }\r\n\r\n  private showQueryResult(result: PipelineResult, top: number, debugStream?: DebugStreamInfo) {\r\n    const dialogData: QueryResultDialogData = {\r\n      result,\r\n      debugStream,\r\n      top,\r\n    };\r\n    this.dialog.open(QueryResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private showStreamErrorResult(stream: PipelineResultStream) {\r\n    const dialogData: StreamErrorResultDialogData = {\r\n      errorData: stream.ErrorData,\r\n    };\r\n    this.dialog.open(StreamErrorResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private fetchDataSources(callback?: () => void) {\r\n    this.queryDefinitionService.fetchDataSources().subscribe(dataSources => {\r\n      this.dataSources$.next(dataSources);\r\n      callback();\r\n    });\r\n  }\r\n\r\n  private attachKeyboardSave() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<KeyboardEvent>(window, 'keydown').pipe(\r\n          filter(() => !this.route.snapshot.firstChild),\r\n          filter(event => {\r\n            const CTRL_S = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.keyCode === 83;\r\n            return CTRL_S;\r\n          }),\r\n        ).subscribe(event => {\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.savePipeline(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        if (this.refreshPipeline || this.refreshDataSourceConfigs) {\r\n          this.fetchPipeline(this.refreshPipeline, this.refreshDataSourceConfigs, this.refreshPipeline);\r\n        }\r\n        this.refreshPipeline = false;\r\n        this.refreshDataSourceConfigs = false;\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Rename stream</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<!-- <p class=\"dialog-description\"></p> -->\r\n\r\n<form [formGroup]=\"form\" class=\"dialog-form\">\r\n  <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n    <!-- Simple form -->\r\n    <ng-container *ngIf=\"!isSource || !pipelineResultExists\">\r\n      <!-- Label -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Label</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"label\" required>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"isSource && !pipelineResultExists\">\r\n        You will get suggestions for out-streams after you run query\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"controls.label.touched && controls.label.errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </ng-container>\r\n\r\n    <!-- Rich form -->\r\n    <ng-container *ngIf=\"isSource && pipelineResultExists\">\r\n      <!-- Scope -->\r\n      <ng-container *ngIf=\"advancedMode && guidedLabel\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select formControlName=\"scope\" [placeholder]=\"!scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n      </ng-container>\r\n\r\n      <!-- Label -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Label</mat-label>\r\n        <mat-select *ngIf=\"guidedLabel\" formControlName=\"label\" required\r\n          [placeholder]=\"!labelOptions.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let labelOption of labelOptions\" [value]=\"labelOption\">\r\n            {{ labelOption }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"text\" *ngIf=\"!guidedLabel\" formControlName=\"label\" required>\r\n\r\n        <div matSuffix class=\"selection-suffix\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': guidedLabel }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedLabel(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !guidedLabel }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedLabel(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"controls.label.touched && controls.label.errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <div class=\"dialog-form-actions\">\r\n    <!-- Extra button for rich form -->\r\n    <ng-container *ngIf=\"isSource && pipelineResultExists\">\r\n      <mat-slide-toggle color=\"accent\" [checked]=\"advancedMode\" (change)=\"toggleAdvancedMode($event)\">\r\n        {{ advancedMode ? 'Advanced' : 'Simple' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n    </ng-container>\r\n    <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"rename()\">\r\n      Rename\r\n    </button>\r\n  </div>\r\n</form>\r\n","import { ChangeDetectorRef, Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, startWith } from 'rxjs/operators';\r\nimport { ContentTypesService } from '../../../app-administration/services';\r\nimport { eavConstants, ScopeOption } from '../../../shared/constants/eav.constants';\r\nimport { VisualQueryService } from '../../services/visual-query.service';\r\nimport { RenameStreamDialogControls, RenameStreamDialogData, RenameStreamDialogFormValue } from './rename-stream.models';\r\n\r\n@Component({\r\n  selector: 'app-rename-stream',\r\n  templateUrl: './rename-stream.component.html',\r\n  styleUrls: ['./rename-stream.component.scss']\r\n})\r\nexport class RenameStreamComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  controls: RenameStreamDialogControls;\r\n  isSource = this.dialogData.isSource;\r\n  pipelineResultExists = this.visualQueryService.pipelineResult != null;\r\n  scopeOptions: ScopeOption[] = [];\r\n  labelOptions: string[] = [];\r\n  guidedLabel = true;\r\n  advancedMode = false;\r\n\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: RenameStreamDialogData,\r\n    private dialogRef: MatDialogRef<RenameStreamComponent>,\r\n    private visualQueryService: VisualQueryService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.buildForm();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog(label?: string): void {\r\n    this.dialogRef.close(label);\r\n  }\r\n\r\n  toggleGuidedLabel(guidedLabel: boolean): void {\r\n    this.guidedLabel = guidedLabel;\r\n  }\r\n\r\n  toggleAdvancedMode(event: MatSlideToggleChange): void {\r\n    this.advancedMode = event.checked;\r\n  }\r\n\r\n  rename(): void {\r\n    const formValue: RenameStreamDialogFormValue = this.form.getRawValue();\r\n    this.closeDialog(formValue.label);\r\n  }\r\n\r\n  private buildForm(): void {\r\n    this.form = new FormGroup({\r\n      label: new FormControl(this.dialogData.label, Validators.required),\r\n      scope: new FormControl(eavConstants.scopes.default.value),\r\n    });\r\n    this.controls = this.form.controls as any;\r\n\r\n    if (!this.isSource || !this.pipelineResultExists) { return; }\r\n\r\n    this.subscription.add(\r\n      this.controls.scope.valueChanges.pipe(\r\n        startWith<string, string>(this.controls.scope.value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(scope => {\r\n        this.labelOptions = Object.values(this.visualQueryService.pipelineResult.Sources)\r\n          .find(source => source.Guid === this.dialogData.pipelineDataSourceGuid).Out\r\n          .filter(out => out.Scope === scope)\r\n          .map(out => out.Name);\r\n        if (!this.labelOptions.includes(this.controls.label.value) && this.controls.label.value != null) {\r\n          this.controls.label.patchValue(null);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      const sourceOut = Object.values(this.visualQueryService.pipelineResult.Sources)\r\n        .find(source => source.Guid === this.dialogData.pipelineDataSourceGuid).Out;\r\n      const filtered = scopes.filter(s => sourceOut.some(o => o.Scope === s.value));\r\n      this.scopeOptions = filtered;\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectorRef, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { EndpointInfo, PlumbType } from './plumb-editor.models';\r\nimport { RenameStreamComponent } from './rename-stream/rename-stream.component';\r\nimport { RenameStreamDialogData } from './rename-stream/rename-stream.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\nexport const dataSrcIdPrefix = 'dataSource_';\r\n\r\nexport class Plumber {\r\n  private instance: PlumbType;\r\n  private lineCount = 0;\r\n  private linePaintDefault = {\r\n    stroke: '#61B7CF',\r\n    strokeWidth: 4,\r\n    outlineStroke: 'white',\r\n    outlineWidth: 2,\r\n  };\r\n  private lineColors = [\r\n    '#009688', '#00bcd4', '#3f51b5', '#9c27b0', '#e91e63',\r\n    '#db4437', '#ff9800', '#60a917', '#60a917', '#008a00',\r\n    '#00aba9', '#1ba1e2', '#0050ef', '#6a00ff', '#aa00ff',\r\n    '#f472d0', '#d80073', '#a20025', '#e51400', '#fa6800',\r\n    '#f0a30a', '#e3c800', '#825a2c', '#6d8764', '#647687',\r\n    '#76608a', '#a0522d',\r\n  ];\r\n  private maxCols = this.lineColors.length - 1;\r\n  private uuidColorMap: Record<string, any> = {};\r\n  private bulkDelete = false;\r\n  private dialogRef: MatDialogRef<RenameStreamComponent>;\r\n\r\n  constructor(\r\n    private jsPlumbRoot: HTMLElement,\r\n    private pipelineModel: PipelineModel,\r\n    private dataSources: DataSource[],\r\n    private onConnectionsChanged: () => void,\r\n    private onDragend: (pipelineDataSourceGuid: string, position: VisualDesignerData) => void,\r\n    private onDebugStream: (stream: PipelineResultStream) => void,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    this.instance = window.jsPlumb.getInstance(this.getInstanceDefaults(this.jsPlumbRoot));\r\n    this.instance.batch(() => {\r\n      this.initDomDataSources();\r\n      this.initWirings();\r\n      this.bindEvents();\r\n    });\r\n    // spm NOTE: repaint after initial paint fixes:\r\n    // Error: <svg> attribute width: Expected length, \"-Infinity\".\r\n    this.instance.repaintEverything();\r\n  }\r\n\r\n  destroy() {\r\n    this.dialogRef?.close();\r\n    this.instance.reset();\r\n    this.instance.unbindContainer();\r\n  }\r\n\r\n  removeEndpointsOnDataSource(pipelineDataSourceGuid: string) {\r\n    const elementId = dataSrcIdPrefix + pipelineDataSourceGuid;\r\n    this.bulkDelete = true;\r\n    this.instance.batch(() => {\r\n      this.instance.selectEndpoints({ element: elementId }).delete();\r\n    });\r\n    this.bulkDelete = false;\r\n  }\r\n\r\n  getAllConnections() {\r\n    const connectionInfos: StreamWire[] = this.instance.getAllConnections().map((connection: PlumbType) => {\r\n      const wire: StreamWire = {\r\n        From: connection.sourceId.replace(dataSrcIdPrefix, ''),\r\n        Out: connection.endpoints[0].getOverlay('endpointLabel').label,\r\n        To: connection.targetId.replace(dataSrcIdPrefix, ''),\r\n        In: connection.endpoints[1].getOverlay('endpointLabel').label,\r\n      };\r\n      return wire;\r\n    });\r\n    return connectionInfos;\r\n  }\r\n\r\n  getStreamsOut() {\r\n    const streamsOut: string[] = [];\r\n    this.instance.selectEndpoints({ target: dataSrcIdPrefix + 'Out' }).each((endpoint: PlumbType) => {\r\n      streamsOut.push(endpoint.getOverlay('endpointLabel').label);\r\n    });\r\n    const streamsOutStr = streamsOut.join(',');\r\n    return streamsOutStr;\r\n  }\r\n\r\n  putEntityCountOnConnections(result: PipelineResult) {\r\n    result.Streams?.forEach(stream => {\r\n      const sourceElementId = dataSrcIdPrefix + stream.Source;\r\n      const outTargets = ['00000000-0000-0000-0000-000000000000', this.pipelineModel.Pipeline.EntityGuid];\r\n      const targetElementId = outTargets.includes(stream.Target) ? dataSrcIdPrefix + 'Out' : dataSrcIdPrefix + stream.Target;\r\n\r\n      const fromUuid = sourceElementId + '_out_' + stream.SourceOut;\r\n      const toUuid = targetElementId + '_in_' + stream.TargetIn;\r\n\r\n      const sEndp: PlumbType = this.instance.getEndpoint(fromUuid);\r\n      sEndp?.connections\r\n        ?.filter((connection: PlumbType) => connection.endpoints[1].getUuid() === toUuid)\r\n        ?.forEach((connection: PlumbType) => {\r\n          const label = !stream.Error ? stream.Count.toString() : '';\r\n          const cssClass = 'streamEntitiesCount ' + (!stream.Error ? '' : 'streamEntitiesError');\r\n          connection.setLabel({\r\n            label,\r\n            cssClass,\r\n            events: {\r\n              click: (overlay: PlumbType) => {\r\n                if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n                this.onDebugStream(stream);\r\n              },\r\n            },\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  private nextLinePaintStyle(uuid: string) {\r\n    return (\r\n      this.uuidColorMap[uuid] ||\r\n      (this.uuidColorMap[uuid] = Object.assign({}, this.linePaintDefault, { stroke: this.lineColors[this.lineCount++ % this.maxCols] }))\r\n    );\r\n  }\r\n\r\n  private getInstanceDefaults(container: HTMLElement) {\r\n    const defaults = {\r\n      Container: container,\r\n      Connector: ['Bezier', { curviness: 70 }],\r\n      PaintStyle: this.nextLinePaintStyle('dummy'),\r\n      HoverPaintStyle: {\r\n        stroke: '#216477',\r\n        strokeWidth: 4,\r\n        outlineStroke: 'white',\r\n        outlineWidth: 2,\r\n      },\r\n    };\r\n    return defaults;\r\n  }\r\n\r\n  /** Create sources, targets and endpoints */\r\n  private initDomDataSources() {\r\n    for (const pipelineDataSource of this.pipelineModel.DataSources) {\r\n      const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + dataSrcIdPrefix + pipelineDataSource.EntityGuid);\r\n      if (!domDataSource) { continue; }\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      if (!dataSource) { continue; }\r\n\r\n      if (this.pipelineModel.Pipeline.AllowEdit) {\r\n        // WARNING! Must happen before instance.makeSource()\r\n        this.instance.draggable(domDataSource, {\r\n          grid: [20, 20], stop: (event: PlumbType) => {\r\n            const element: HTMLElement = event.el;\r\n            const pipelineDataSourceGuid: string = element.id.replace(dataSrcIdPrefix, '');\r\n            const position: VisualDesignerData = {\r\n              Top: event.finalPos[1],\r\n              Left: event.finalPos[0],\r\n            };\r\n            setTimeout(() => { this.onDragend(pipelineDataSourceGuid, position); });\r\n          }\r\n        });\r\n      }\r\n\r\n      // Add Out-Endpoints from Definition\r\n      dataSource.Out?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, false, pipelineDataSource);\r\n      });\r\n\r\n      // Add In-Endpoints from Definition\r\n      dataSource.In?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, true, pipelineDataSource);\r\n      });\r\n\r\n      // Make DataSource a Target for new Endpoints (if .In is an Array)\r\n      if (dataSource.In) {\r\n        const targetEndpointUnlimited = this.buildTargetEndpoint(pipelineDataSource.EntityGuid);\r\n        targetEndpointUnlimited.maxConnections = -1;\r\n        this.instance.makeTarget(domDataSource, targetEndpointUnlimited);\r\n      }\r\n\r\n      if (dataSource.DynamicOut) {\r\n        this.instance.makeSource(domDataSource, this.buildSourceEndpoint(pipelineDataSource.EntityGuid), { filter: '.add-endpoint' });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Create wires */\r\n  private initWirings() {\r\n    this.pipelineModel.Pipeline.StreamWiring?.forEach(wire => {\r\n      // read connections from Pipeline\r\n      const sourceElementId = dataSrcIdPrefix + wire.From;\r\n      const fromUuid = sourceElementId + '_out_' + wire.Out;\r\n      const targetElementId = dataSrcIdPrefix + wire.To;\r\n      const toUuid = targetElementId + '_in_' + wire.In;\r\n\r\n      // Ensure In-Endpoint exist\r\n      if (!this.instance.getEndpoint(fromUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + sourceElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.Out, false, pipelineDataSource);\r\n      }\r\n\r\n      // Ensure Out-Endpoint exist\r\n      if (!this.instance.getEndpoint(toUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + targetElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.In, true, pipelineDataSource);\r\n      }\r\n\r\n      try {\r\n        this.instance.connect({\r\n          uuids: [fromUuid, toUuid],\r\n          paintStyle: this.nextLinePaintStyle(fromUuid),\r\n        });\r\n      } catch (e) {\r\n        console.error({ message: 'Connection failed', from: fromUuid, to: toUuid });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addEndpoint(domDataSource: HTMLElement, endpointName: string, isIn: boolean, pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources.find(d => d.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    const isDynamic = isIn\r\n      ? !dataSource.In?.some(name => this.getEndpointInfo(name, false))\r\n      : !dataSource.Out?.some(name => this.getEndpointInfo(name, false));\r\n    const endpointInfo = this.getEndpointInfo(endpointName, isDynamic);\r\n\r\n    let style: string;\r\n    if (isDynamic) {\r\n      style = 'dynamic';\r\n    } else if (!endpointInfo.required) {\r\n      style = '';\r\n    } else {\r\n      const wireExists = this.pipelineModel.Pipeline.StreamWiring?.some(wire => {\r\n        const targetElementId = dataSrcIdPrefix + wire.To;\r\n        const targetEndpointName = wire.In;\r\n\r\n        return targetElementId === domDataSource.id && targetEndpointName === endpointInfo.name;\r\n      });\r\n      style = wireExists ? '' : 'required';\r\n    }\r\n\r\n    const uuid = domDataSource.id + (isIn ? '_in_' : '_out_') + endpointInfo.name;\r\n    const model = isIn\r\n      ? this.buildTargetEndpoint(pipelineDataSource.EntityGuid, style)\r\n      : this.buildSourceEndpoint(pipelineDataSource.EntityGuid, style);\r\n    // Endpoints on Out-DataSource must be always enabled\r\n    const params = {\r\n      uuid,\r\n      enabled: this.pipelineModel.Pipeline.AllowEdit\r\n        || pipelineDataSource.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    };\r\n\r\n    const endpoint: PlumbType = this.instance.addEndpoint(domDataSource, model, params);\r\n    endpoint.getOverlay('endpointLabel').setLabel(endpointInfo.name);\r\n  }\r\n\r\n  private buildSourceEndpoint(pipelineDataSourceGuid: string, style?: string) {\r\n    const isSource = true;\r\n    const sourceEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'sourceEndpoint ' + style ?? '',\r\n      maxConnections: -1,\r\n      isSource,\r\n      anchor: ['Continuous', { faces: ['top'] }],\r\n      overlays: this.getEndpointOverlays(isSource),\r\n      events: {\r\n        click: (endpointOrOverlay: PlumbType) => {\r\n          this.onChangeLabel(endpointOrOverlay, isSource, pipelineDataSourceGuid);\r\n        },\r\n      },\r\n    };\r\n    return sourceEndpoint;\r\n  }\r\n\r\n  private buildTargetEndpoint(pipelineDataSourceGuid: string, style?: string) {\r\n    const isSource = false;\r\n    const targetEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'targetEndpoint ' + style ?? '',\r\n      maxConnections: 1,\r\n      isTarget: !isSource,\r\n      anchor: ['Continuous', { faces: ['bottom'] }],\r\n      overlays: this.getEndpointOverlays(isSource),\r\n      dropOptions: { hoverClass: 'hover', activeClass: 'active' },\r\n      events: {\r\n        click: (endpointOrOverlay: PlumbType) => {\r\n          this.onChangeLabel(endpointOrOverlay, isSource, pipelineDataSourceGuid);\r\n        },\r\n      },\r\n    };\r\n    return targetEndpoint;\r\n  }\r\n\r\n  private getEndpointOverlays(isSource: boolean) {\r\n    return [\r\n      [\r\n        'Label', {\r\n          id: 'endpointLabel',\r\n          location: [0.5, isSource ? 0 : 1],\r\n          label: 'Default',\r\n          cssClass: isSource ? 'endpointSourceLabel' : 'endpointTargetLabel',\r\n        },\r\n      ],\r\n    ];\r\n  }\r\n\r\n  private onChangeLabel(endpointOrOverlay: PlumbType, isSource: boolean, pipelineDataSourceGuid: string) {\r\n    if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n\r\n    const overlay: PlumbType = endpointOrOverlay.getOverlay ? endpointOrOverlay.getOverlay('endpointLabel') : endpointOrOverlay;\r\n    const data: RenameStreamDialogData = {\r\n      pipelineDataSourceGuid,\r\n      isSource,\r\n      label: overlay.label,\r\n    };\r\n    this.dialogRef = this.dialog.open(RenameStreamComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    this.dialogRef.afterClosed().subscribe(newLabel => {\r\n      if (!newLabel) { return; }\r\n      overlay.setLabel(newLabel);\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private bindEvents() {\r\n    this.instance.bind('connectionDetached', (info: PlumbType) => {\r\n      if (this.bulkDelete) { return; }\r\n      const domDataSource: HTMLElement = info.target;\r\n      const pipelineDataSource = this.pipelineModel.DataSources.find(\r\n        pipelineDS => pipelineDS.EntityGuid === domDataSource.id.replace(dataSrcIdPrefix, '')\r\n      );\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      const label: string = info.targetEndpoint.getOverlay('endpointLabel').label;\r\n      const isDynamic = !dataSource.In.some(name => this.getEndpointInfo(name, false).name === label);\r\n      if (isDynamic) {\r\n        this.instance.deleteEndpoint(info.targetEndpoint);\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      } else {\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      }\r\n    });\r\n\r\n    this.instance.bind('connection', (info: PlumbType) => {\r\n      if (info.sourceId === info.targetId) {\r\n        setTimeout(() => {\r\n          this.instance.deleteConnection(info.connection, { fireEvent: false });\r\n          setTimeout(() => { this.onConnectionsChanged(); });\r\n        });\r\n        return;\r\n      }\r\n      const endpointLabel: PlumbType = info.targetEndpoint.getOverlay('endpointLabel');\r\n      const labelPrompt: string = endpointLabel.getLabel();\r\n      const endpoints: PlumbType[] = this.instance.getEndpoints(info.target.id);\r\n      const targetEndpointHasSameLabel = endpoints.some(endpoint => {\r\n        const label: string = endpoint.getOverlay('endpointLabel').getLabel();\r\n        return label === labelPrompt &&\r\n          info.targetEndpoint.id !== endpoint.id &&\r\n          (endpoint.canvas as HTMLCanvasElement).classList.contains('targetEndpoint');\r\n      });\r\n      if (targetEndpointHasSameLabel) {\r\n        endpointLabel.setLabel(`PleaseRename${Math.floor(Math.random() * 99999)}`);\r\n      }\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n  }\r\n\r\n  private getEndpointInfo(endpointName: string, isDynamic: boolean): EndpointInfo {\r\n    let name: string;\r\n    let required: boolean;\r\n\r\n    if (isDynamic) {\r\n      name = endpointName;\r\n      required = false;\r\n    } else {\r\n      const trimmed = endpointName.trim();\r\n      required = trimmed.endsWith('*');\r\n      name = !required ? trimmed : trimmed.substring(0, trimmed.length - 1);\r\n    }\r\n\r\n    const endpointInfo: EndpointInfo = {\r\n      name,\r\n      required,\r\n    };\r\n    return endpointInfo;\r\n  }\r\n}\r\n","<div #domRoot id=\"pipeline-root\" *ngIf=\"(templateModel$ | async) as templateModel\">\r\n  <!-- do not use trackBy, jsPlumb drag stops working properly after delete -->\r\n  <ng-container *ngIf=\"!hardReset\">\r\n    <div #domDataSource *ngFor=\"let dataSource of templateModel.pipelineDataSources\"\r\n      [id]=\"dataSrcIdPrefix + dataSource.EntityGuid\" class=\"dataSource\" [ngStyle]=\"{\r\n        'top': dataSource.VisualDesignerData.Top + 'px',\r\n        'left': dataSource.VisualDesignerData.Left + 'px',\r\n        'min-width': dataSource.VisualDesignerData.Width ? dataSource.VisualDesignerData.Width + 'px' : null\r\n      }\" [ngClass]=\"{\r\n        'show-details': templateModel.showDataSourceDetails && templateModel.dataSourceConfigs[dataSource.EntityId]?.length\r\n      }\">\r\n\r\n      <div class=\"actions left\">\r\n        <mat-icon class=\"type-info\" [title]=\"templateModel.typeInfos[dataSource.EntityGuid].UiHint\">\r\n          {{ templateModel.typeInfos[dataSource.EntityGuid].Icon }}\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"configure\" title=\"Configure data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].EnableConfig\"\r\n          (click)=\"configureDataSource(dataSource)\">\r\n          settings\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"help\" title=\"Help for this data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.typeInfos[dataSource.EntityGuid].HelpLink\"\r\n          (click)=\"openHelp(templateModel.typeInfos[dataSource.EntityGuid].HelpLink)\">\r\n          help_outline\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"actions right\">\r\n        <mat-icon class=\"delete\" title=\"Delete\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && !isOutDataSource(dataSource)\" (click)=\"remove(dataSource)\">\r\n          delete\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"name\" title=\"Click to edit name\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editName(dataSource)\">\r\n        <span>{{ dataSource.Name || '(no name)' }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br>\r\n\r\n      <div class=\"description\" title=\"Click to edit description\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editDescription(dataSource)\">\r\n        <span>{{ dataSource.Description }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br>\r\n\r\n      <ng-container\r\n        *ngIf=\"templateModel.showDataSourceDetails && templateModel.dataSourceConfigs[dataSource.EntityId]?.length\">\r\n        <hr style=\"margin: 0\">\r\n        <table class=\"configs\">\r\n          <tr class=\"config\" *ngFor=\"let config of templateModel.dataSourceConfigs[dataSource.EntityId]\">\r\n            <td class=\"config-name\" [title]=\"config.name\">{{ config.name }}</td>\r\n            <td class=\"config-value\" [title]=\"config.value\">{{ config.value }}</td>\r\n          </tr>\r\n        </table>\r\n      </ng-container>\r\n\r\n      <div class=\"typename\" [title]=\"dataSource.PartAssemblyAndType\">\r\n        Type: {{ getTypeName(dataSource.PartAssemblyAndType) }}\r\n      </div>\r\n\r\n      <mat-icon class=\"add-endpoint\" title=\"Drag a new Out-Connection\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicOut\">\r\n        arrow_drop_up\r\n      </mat-icon>\r\n\r\n      <mat-icon class=\"many-in\" title=\"This data source supports multiple In-Connections\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicIn\">\r\n        arrow_drop_up\r\n      </mat-icon>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { loadScripts } from '../../shared/helpers/load-scripts.helper';\r\nimport { PipelineDataSource, PipelineResultStream, VisualDesignerData } from '../models';\r\nimport { QueryDefinitionService } from '../services/query-definition.service';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateTypeInfos } from './plumb-editor.helpers';\r\nimport { PlumbEditorTemplateModel } from './plumb-editor.models';\r\nimport { dataSrcIdPrefix, Plumber } from './plumber.helper';\r\n\r\nconst jsPlumbUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.14.5/js/jsplumb.min.js';\r\n\r\n@Component({\r\n  selector: 'app-plumb-editor',\r\n  templateUrl: './plumb-editor.component.html',\r\n  styles: [':host { display: block; width: 100%; height: 100%; }'],\r\n  styleUrls: ['./plumb-editor.component.scss'],\r\n})\r\nexport class PlumbEditorComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('domRoot') private domRootRef: ElementRef<HTMLDivElement>;\r\n  @ViewChildren('domDataSource') private domDataSourcesRef: QueryList<ElementRef<HTMLDivElement>>;\r\n\r\n  dataSrcIdPrefix = dataSrcIdPrefix;\r\n  templateModel$: Observable<PlumbEditorTemplateModel>;\r\n  hardReset = false;\r\n\r\n  private plumber: Plumber;\r\n  private scriptLoaded$ = new BehaviorSubject(false);\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private visualQueryService: VisualQueryService,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    loadScripts([{ test: 'jsPlumb', src: jsPlumbUrl }], () => {\r\n      this.scriptLoaded$.next(true);\r\n    });\r\n\r\n    this.subscription.add(\r\n      this.visualQueryService.putEntityCountOnConnections$.subscribe(result => {\r\n        this.plumber.putEntityCountOnConnections(result);\r\n      })\r\n    );\r\n\r\n    const pipelineDesignerData$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => GeneralHelpers.tryParse(pipelineModel?.Pipeline.VisualDesignerData) ?? {}),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.templateModel$ = combineLatest([\r\n      this.visualQueryService.pipelineModel$,\r\n      this.visualQueryService.dataSources$,\r\n      pipelineDesignerData$,\r\n      this.visualQueryService.dataSourceConfigs$,\r\n    ]).pipe(\r\n      map(([pipelineModel, dataSources, pipelineDesignerData, dataSourceConfigs]) => {\r\n        if (pipelineModel == null || dataSources == null) { return; }\r\n\r\n        // workaround for jsPlumb not working with dom elements which it initialized on previously.\r\n        // This wipes dom entirely and gives us new elements\r\n        this.hardReset = true;\r\n        this.changeDetectorRef.detectChanges();\r\n        this.hardReset = false;\r\n        const templateModel: PlumbEditorTemplateModel = {\r\n          pipelineDataSources: pipelineModel.DataSources,\r\n          typeInfos: calculateTypeInfos(pipelineModel.DataSources, dataSources),\r\n          allowEdit: pipelineModel.Pipeline.AllowEdit,\r\n          showDataSourceDetails: pipelineDesignerData.ShowDataSourceDetails ?? false,\r\n          dataSourceConfigs,\r\n        };\r\n        return templateModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // https://stackoverflow.com/questions/37087864/execute-a-function-when-ngfor-finished-in-angular-2/37088348#37088348\r\n    const domDataSourcesLoaded$ = this.domDataSourcesRef.changes.pipe(map(() => true));\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.scriptLoaded$, domDataSourcesLoaded$]).subscribe(([scriptLoaded, domDataSourcesLoaded]) => {\r\n        if (!scriptLoaded || !domDataSourcesLoaded) { return; }\r\n\r\n        this.plumber?.destroy();\r\n        this.plumber = new Plumber(\r\n          this.domRootRef.nativeElement,\r\n          this.visualQueryService.pipelineModel$.value,\r\n          this.visualQueryService.dataSources$.value,\r\n          this.onConnectionsChanged.bind(this),\r\n          this.onDragend.bind(this),\r\n          this.onDebugStream.bind(this),\r\n          this.dialog,\r\n          this.viewContainerRef,\r\n          this.changeDetectorRef,\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.plumber?.destroy();\r\n    this.scriptLoaded$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  onConnectionsChanged() {\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.changeConnections(connections, streamsOut);\r\n  }\r\n\r\n  onDragend(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    this.visualQueryService.changeDataSourcePosition(pipelineDataSourceGuid, position);\r\n  }\r\n\r\n  onDebugStream(stream: PipelineResultStream) {\r\n    this.visualQueryService.debugStream(stream);\r\n  }\r\n\r\n  configureDataSource(dataSource: PipelineDataSource) {\r\n    // ensure dataSource entity is saved\r\n    if (dataSource.EntityGuid.includes('unsaved')) {\r\n      this.visualQueryService.saveAndRun(true, false);\r\n    } else {\r\n      this.visualQueryService.editDataSource(dataSource);\r\n    }\r\n  }\r\n\r\n  getTypeName(partAssemblyAndType: string) {\r\n    const dataSource = this.visualQueryService.dataSources$.value.find(ds => ds.PartAssemblyAndType === partAssemblyAndType);\r\n    return this.queryDefinitionService.typeNameFilter(dataSource?.TypeNameForUi || partAssemblyAndType, 'className');\r\n  }\r\n\r\n  isOutDataSource(pipelineDataSource: PipelineDataSource) {\r\n    return pipelineDataSource.PartAssemblyAndType === eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType;\r\n  }\r\n\r\n  remove(pipelineDataSource: PipelineDataSource) {\r\n    if (!confirm(`Delete ${pipelineDataSource.Name} data source?`)) { return; }\r\n\r\n    this.plumber.removeEndpointsOnDataSource(pipelineDataSource.EntityGuid);\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.removeDataSource(pipelineDataSource.EntityGuid, connections, streamsOut);\r\n  }\r\n\r\n  openHelp(url: string) {\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  editName(dataSource: PipelineDataSource) {\r\n    const newName = prompt('Rename data source', dataSource.Name)?.trim();\r\n    if (newName == null || newName === '') { return; }\r\n\r\n    this.visualQueryService.renameDataSource(dataSource.EntityGuid, newName);\r\n  }\r\n\r\n  editDescription(dataSource: PipelineDataSource) {\r\n    const newDescription = prompt('Edit description', dataSource.Description)?.trim();\r\n    if (newDescription == null) { return; }\r\n\r\n    this.visualQueryService.changeDataSourceDescription(dataSource.EntityGuid, newDescription);\r\n  }\r\n\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"(pipelineModel$ | async) as pipelineModel\">\r\n\r\n  <div class=\"wrapper\">\r\n    <div class=\"actions\">\r\n      <button mat-raised-button class=\"action\" color=\"accent\" (click)=\"saveAndRunQuery(true, true)\">\r\n        Save and run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(false, true)\">\r\n        Run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(true, false)\">\r\n        Save\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">\r\n        <div>Query Parameters</div>\r\n        <div>\r\n          <button mat-icon-button tippy=\"Edit parameters\" (click)=\"editPipeline()\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button tippy=\"Query Params Docs\" (click)=\"openParamsHelp()\">\r\n            <mat-icon>info</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.Params?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.Params?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">Test Parameters</div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.TestParameters?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.TestParameters?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\" *ngIf=\"visualDesignerData$ | async as visualDesignerData\">\r\n      <mat-slide-toggle color=\"primary\" labelPosition=\"before\" [checked]=\"visualDesignerData.ShowDataSourceDetails\"\r\n        (change)=\"showDataSourceDetails($event)\">\r\n        Show DataSource Params\r\n      </mat-slide-toggle>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"(warnings$ | async) as warnings\">\r\n      <div class=\"warnings\" *ngIf=\"warnings.length\">\r\n        <div class=\"title\">\r\n          <span>Warnings</span>\r\n          <mat-icon style=\"color: red\">warning</mat-icon>\r\n        </div>\r\n        <ol class=\"values\">\r\n          <li *ngFor=\"let warning of warnings\" [innerHTML]=\"warning\">\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"description\" *ngIf=\"pipelineModel.Pipeline.Description\">\r\n      <div class=\"title\">Query Description</div>\r\n      <div>{{ pipelineModel.Pipeline.Description }}</div>\r\n    </div>\r\n\r\n    <div class=\"footer-actions\">\r\n      <button mat-raised-button class=\"action\" (click)=\"openRestApi()\">\r\n        <span>Use in JSON / REST API</span>\r\n        <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { GoToDevRest } from '../../dev-rest';\r\nimport { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateWarnings } from './run-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-run-explorer',\r\n  templateUrl: './run-explorer.component.html',\r\n  styleUrls: ['./run-explorer.component.scss'],\r\n})\r\nexport class RunExplorerComponent implements OnInit {\r\n  pipelineModel$: Observable<PipelineModel>;\r\n  warnings$: Observable<string[]>;\r\n  visualDesignerData$: Observable<Record<string, any>>;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.pipelineModel$ = this.visualQueryService.pipelineModel$.asObservable();\r\n    this.warnings$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => calculateWarnings(pipelineModel, this.context)),\r\n    );\r\n    this.visualDesignerData$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => GeneralHelpers.tryParse(pipelineModel.Pipeline.VisualDesignerData) ?? {}),\r\n    );\r\n  }\r\n\r\n  editPipeline() {\r\n    this.visualQueryService.editPipelineEntity();\r\n  }\r\n\r\n  openParamsHelp() {\r\n    window.open('http://r.2sxc.org/QueryParams', '_blank');\r\n  }\r\n\r\n  saveAndRunQuery(save: boolean, run: boolean) {\r\n    this.visualQueryService.saveAndRun(save, run);\r\n  }\r\n\r\n  showDataSourceDetails(event: MatSlideToggleChange): void {\r\n    this.visualQueryService.showDataSourceDetails(event.checked);\r\n  }\r\n\r\n  openRestApi() {\r\n    const queryGuid = this.visualQueryService.pipelineModel$.value.Pipeline.EntityGuid;\r\n    this.router.navigate([GoToDevRest.getUrlQuery(queryGuid)], { relativeTo: this.route });\r\n  }\r\n}\r\n","import { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\n\r\n/**\r\n * Check if there are special warnings the developer should know.\r\n * Typically when the test ModuleId is different from the one we're currently working on\r\n */\r\nexport function calculateWarnings(pipelineModel: PipelineModel, context: Context) {\r\n  const warnings: string[] = [];\r\n\r\n  try {\r\n    const queryParams = pipelineModel.Pipeline.Params?.split(/\\r?\\n/) || [];\r\n    const testParams = pipelineModel.Pipeline.TestParameters?.split(/\\r?\\n/) || [];\r\n\r\n    queryParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Query Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const paramSyntax = /^[a-zA-Z0-9]+=(.*)$/gmi;\r\n      const matched = paramSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Query Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>key=value</code> <br>\r\n          or resolve to a token like: <br>\r\n          <code>key=[source:key]</code>\r\n        `);\r\n      }\r\n    });\r\n\r\n    testParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Test Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const testParamSyntax = /^\\[[a-zA-Z]+:[a-zA-Z0-9]+\\]=(.*)$/gmi;\r\n      const matched = testParamSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Test Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>[source:key]=value</code>\r\n        `);\r\n      }\r\n\r\n      // Check if we should show the warning about the test ModuleId.\r\n      // This is because in the old days, the ModuleId wasn't auto-filled, so people had to add it as a test value.\r\n      // Now it's not necessary any more\r\n      const midRegex = /^\\[module:id\\]=([0-9]*)$/gmi;\r\n      const midMatch = midRegex.exec(param);\r\n      if (midMatch) {\r\n        const testMid = midMatch[1];\r\n        const urlMid = context.moduleId.toString();\r\n        if (testMid !== urlMid) {\r\n          warnings.push(`\r\n            Your test ModuleId (${testMid}) is different from the current ModuleId (${urlMid}).<br>\r\n            Note that 2sxc automatically provides the ModuleId - so you usually do not need to set it\r\n          `);\r\n        }\r\n      }\r\n\r\n      const oldMidRegex = /^\\[module:moduleid\\]=([0-9]*)$/gmi;\r\n      const oldMidMatch = oldMidRegex.exec(param);\r\n      if (oldMidMatch) {\r\n        warnings.push(`\r\n          You are using deprecated [Module:ModuleId] test parameter.<br>\r\n          Please use [Module:Id]\r\n        `);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Something went wrong in calculateWarnings for params', error);\r\n  }\r\n\r\n  return warnings;\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"sorted$ | async as sorted\">\r\n\r\n  <mat-slide-toggle labelPosition=\"before\" color=\"primary\" (change)=\"toggleDifficulty($event)\">\r\n    Show Advanced\r\n  </mat-slide-toggle>\r\n\r\n  <ng-container *ngFor=\"let group of sorted | keyvalue; trackBy: trackGroups\">\r\n    <div class=\"collapsible\" [tippy]=\"guiTypes[group.key].UiHint || group.key\" tippyShowDelay=\"750\"\r\n      (click)=\"toggleItem(group.key)\">\r\n      <mat-icon>{{ guiTypes[group.key].Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n      <span>{{ group.key }}</span>\r\n    </div>\r\n\r\n    <div class=\"list\" *ngIf=\"toggledItems.includes(group.key)\">\r\n      <div class=\"list-item\" *ngFor=\"let dataSource of group.value; trackBy: trackDataSources\"\r\n        [tippy]=\"dataSource.UiHint || dataSource.Name\" tippyShowDelay=\"750\" (click)=\"addDataSource(dataSource)\">\r\n        <mat-icon>{{ dataSource.Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n        <span>{{ dataSource.Name }}</span>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { KeyValue } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\nimport { guiTypes } from '../plumb-editor/plumb-editor.helpers';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { filterAndSortDataSources } from './add-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-add-explorer',\r\n  templateUrl: './add-explorer.component.html',\r\n  styleUrls: ['./add-explorer.component.scss'],\r\n})\r\nexport class AddExplorerComponent implements OnInit, OnDestroy {\r\n  sorted$: Observable<SortedDataSources>;\r\n  toggledItems: string[] = [];\r\n  guiTypes = guiTypes;\r\n\r\n  private difficulties = eavConstants.pipelineDesigner.dataSourceDifficulties;\r\n  private difficulty$ = new BehaviorSubject(this.difficulties.default);\r\n\r\n  constructor(private visualQueryService: VisualQueryService) { }\r\n\r\n  ngOnInit() {\r\n    this.sorted$ = combineLatest([this.visualQueryService.dataSources$, this.difficulty$]).pipe(\r\n      map(([dataSources, difficulty]) => filterAndSortDataSources(dataSources, difficulty)),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.difficulty$.complete();\r\n  }\r\n\r\n  toggleDifficulty(event: MatSlideToggleChange) {\r\n    const difficulty = event.checked ? this.difficulties.advanced : this.difficulties.default;\r\n    this.difficulty$.next(difficulty);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    this.visualQueryService.addDataSource(dataSource);\r\n  }\r\n\r\n  toggleItem(item: string) {\r\n    GeneralHelpers.toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n  trackGroups(index: number, type: KeyValue<string, DataSource[]>) {\r\n    return type.key;\r\n  }\r\n\r\n  trackDataSources(index: number, dataSource: DataSource) {\r\n    return dataSource.PartAssemblyAndType;\r\n  }\r\n}\r\n","import cloneDeep from 'lodash-es/cloneDeep';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\n\r\nexport function filterAndSortDataSources(dataSources: DataSource[], maxDifficulty: number) {\r\n  if (!dataSources) { return; }\r\n\r\n  const cloned = cloneDeep(dataSources);\r\n\r\n  const filtered = cloned.filter(dataSource =>\r\n    dataSource.Difficulty <= maxDifficulty\r\n    && dataSource.PartAssemblyAndType !== eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType\r\n  );\r\n\r\n  filtered.sort((a, b) => a.Name.toLocaleLowerCase().localeCompare(b.Name.toLocaleLowerCase()));\r\n\r\n  const sorted: SortedDataSources = {};\r\n  for (const dataSource of filtered) {\r\n    const type = dataSource.PrimaryType;\r\n    if (sorted[type]) {\r\n      sorted[type].push(dataSource);\r\n    } else {\r\n      sorted[type] = [dataSource];\r\n    }\r\n  }\r\n\r\n  return sorted;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit } from '../../../../edit/edit.matcher';\r\nimport { GoToDevRest } from '../dev-rest';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: VisualQueryComponent, children: [\r\n      GoToDevRest.route,\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule),\r\n        data: { history: false },\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class VisualQueryRoutingModule { }\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Context } from '../shared/services/context';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { VisualQueryService } from './services/visual-query.service';\r\n\r\n@Component({\r\n  selector: 'app-visual-query',\r\n  templateUrl: './visual-query.component.html',\r\n  styleUrls: ['./visual-query.component.scss'],\r\n  providers: [VisualQueryService],\r\n})\r\nexport class VisualQueryComponent implements OnInit {\r\n  @ViewChild(PlumbEditorComponent) plumbEditor: PlumbEditorComponent;\r\n\r\n  explorer = {\r\n    run: 'run',\r\n    add: 'add'\r\n  };\r\n  activeExplorer = this.explorer.run;\r\n\r\n  constructor(private context: Context, private route: ActivatedRoute, private visualQueryService: VisualQueryService) {\r\n    this.context.init(this.route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.visualQueryService.init();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    this.activeExplorer = (this.activeExplorer === explorer) ? null : explorer;\r\n  }\r\n\r\n  openHelp() {\r\n    window.open('http://r.2sxc.org/visual-query', '_blank');\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>\r\n\r\n<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" tippy=\"Run\" [ngClass]=\"{ 'active': activeExplorer === explorer.run }\"\r\n      (click)=\"toggleExplorer(explorer.run)\">\r\n      <mat-icon>play_arrow</mat-icon>\r\n    </div>\r\n    <div class=\"button\" tippy=\"Add\" [ngClass]=\"{ 'active': activeExplorer === explorer.add }\"\r\n      (click)=\"toggleExplorer(explorer.add)\">\r\n      <mat-icon>add</mat-icon>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"button\" tippy=\"Help\" (click)=\"openHelp()\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-run-explorer [hidden]=\"activeExplorer !== explorer.run\"></app-run-explorer>\r\n\r\n  <app-add-explorer [hidden]=\"activeExplorer !== explorer.add\"></app-add-explorer>\r\n\r\n  <app-plumb-editor></app-plumb-editor>\r\n</div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../permissions/services/metadata.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { AddExplorerComponent } from './add-explorer/add-explorer.component';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { RenameStreamComponent } from './plumb-editor/rename-stream/rename-stream.component';\r\nimport { QueryResultComponent } from './query-result/query-result.component';\r\nimport { RunExplorerComponent } from './run-explorer/run-explorer.component';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { StreamErrorResultComponent } from './stream-error-result/stream-error-result.component';\r\nimport { VisualQueryRoutingModule } from './visual-query-routing.module';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n    QueryResultComponent,\r\n    StreamErrorResultComponent,\r\n    RenameStreamComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedComponentsModule,\r\n    VisualQueryRoutingModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule,\r\n    MatSelectModule,\r\n    MatInputModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    QueryDefinitionService,\r\n    MetadataService,\r\n    ContentTypesService,\r\n  ],\r\n})\r\nexport class VisualQueryModule { }\r\n"],"sourceRoot":"webpack:///"}