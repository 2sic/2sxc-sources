{"version":3,"mappings":"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","names":["i0","c","_panelDoneAnimatingStream","_handleKeydown","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","transform","minWidth","opacity","animate","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","overlay","scrollStrategies","reposition","MatSelectChange","source","value","M","this","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","ɵdir","selectors","useExisting","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","o","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","Subject","_onChange","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","_focused","controlType","_multiple","_disableOptionCentering","disableOptionCentering","ariaLabel","optionSelectionChanges","defer","options","changes","pipe","startWith","switchMap","merge","map","option","onSelectionChange","onStable","take","openedChange","EventEmitter","_openedStream","filter","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","id","_placeholder","stateChanges","next","_d","_required","control","hasValidator","Validators","coerceBooleanProperty","fn","_selectionModel","_initializeSelection","_value","newValue","Array","isArray","_setSelectionByValue","coerceNumberProperty","_id","SelectionModel","multiple","distinctUntilChanged","takeUntil","subscribe","e","_panelDoneAnimating","panelOpen","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","updateErrorState","disabled","_keyManager","withTypeAhead","complete","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","setInactiveStyles","clear","currentValue","n","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","labelId","getLabelId","ariaLabelledby","isOpen","ids","_ariaDescribedby","i1","i2","i3","i4","MAT_FORM_FIELD","i5","viewQuery","ce","_e","CdkConnectedOverlay","i","MatSelect","arguments","_scrollTop","_triggerFontSize","_transformOrigin","_offsetY","_positions","originX","originY","overlayX","overlayY","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","Math","min","max","I","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","_countGroupLabelsBeforeOption","optionGroups","scrollTop","_getOptionScrollPosition","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","_getItemCount","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","selectedOptionOffset","items","panelHeight","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","ɵcmp","MatOption","MAT_OPTGROUP","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","fe","directives","i7","i8","styles","changeDetection","MatSelectModule","ɵmod","ɵinj","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule"],"sources":["./node_modules/@angular/material/fesm2015/select.mjs"],"sourcesContent":["import * as i7 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i8 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0,\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)',\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)',\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        var _a, _b, _c, _d;\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSelectBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: _MatSelectBase, inputs: { panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i6.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }, { type: i4.NgControl, decorators: [{\n                        type: Self\n                    }, {\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SELECT_SCROLL_STRATEGY]\n                    }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SELECT_CONFIG]\n                    }] }];\n    }, propDecorators: { trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize &&\n                    this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple\n            ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X\n            : SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - ((this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight);\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"true\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-describedby\": \"_ariaDescribedby || null\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-select-disabled\": \"disabled\", \"class.mat-select-invalid\": \"errorState\", \"class.mat-select-required\": \"required\", \"class.mat-select-empty\": \"empty\", \"class.mat-select-multiple\": \"multiple\" }, classAttribute: \"mat-select\" }, providers: [\n        { provide: MatFormFieldControl, useExisting: MatSelect },\n        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n    ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"], directives: [{ type: i7.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { type: i8.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i8.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i8.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { type: i7.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { type: i8.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                        // value. At some point we should try to switch it back to being `listbox`.\n                        'aria-haspopup': 'true',\n                        'class': 'mat-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-select-disabled]': 'disabled',\n                        '[class.mat-select-invalid]': 'errorState',\n                        '[class.mat-select-required]': 'required',\n                        '[class.mat-select-empty]': 'empty',\n                        '[class.mat-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n        MatFormFieldModule,\n        MatSelect,\n        MatSelectTrigger,\n        MatOptionModule,\n        MatCommonModule] });\nMatSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n"],"sourceRoot":"webpack:///","file":"default-node_modules_angular_material_fesm2015_select_mjs.f613b331b103d006.js"}