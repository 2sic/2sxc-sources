{"version":3,"mappings":"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","names":["i0","ctx_r6","ctx_r12","ctx_r15","ManageContentListComponent","dialogRef","contentGroupService","route","router","snackBar","T","this","BehaviorSubject","combineLatest","items$","header$","pipe","map","items","_","header","id","guid","snapshot","paramMap","get","part","index","parseInt","Subscription","fetchList","fetchHeader","refreshOnChildClosed","complete","subscription","unsubscribe","close","open","saveList","contentGroup","value","subscribe","n","closeDialog","formUrl","convertFormToUrl","Group","Guid","Index","Part","Add","Id","navigate","relativeTo","EntityId","event","moveItemInArray","previousIndex","currentIndex","next","reordered","item","getList","oldIds","length","some","includes","duration","sortOrder","sort","a","b","aIndex","indexOf","bIndex","getHeader","add","events","filter","NavigationEnd","startWith","firstChild","pairwise","r","selectors","ctx"],"sources":["./projects/ng-dialogs/src/app/manage-content-list/manage-content-list.component.html","./projects/ng-dialogs/src/app/manage-content-list/manage-content-list.component.ts"],"sourcesContent":["<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Manage content-item lists</div>\r\n</div>\r\n\r\n<router-outlet></router-outlet>\r\n\r\n<div class=\"dialog-component-content fancy-scrollbar-light\" *ngIf=\"(templateVars$ | async) as data\">\r\n  <ng-container *ngIf=\"data.header\">\r\n    <p class=\"dialog-description\">\r\n      You can manage the list header here (if it is defined):\r\n    </p>\r\n\r\n    <p class=\"dialog-description\">\r\n      <ng-container *ngIf=\"data.header.Type\">\r\n        <span>{{ data.header.Title }}</span>\r\n        <button mat-icon-button tippy=\"Edit header\" (click)=\"editHeader()\">\r\n          <mat-icon>edit</mat-icon>\r\n        </button>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!data.header.Type\">(this list has no header)</ng-container>\r\n    </p>\r\n  </ng-container>\r\n\r\n  <p class=\"dialog-description sort-title\">Sort the items by dragging as you need, then save:</p>\r\n\r\n  <div class=\"dnd-list\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\r\n    <div *ngFor=\"let item of data.items; trackBy: trackByFn\" class=\"dnd-item\" cdkDrag>\r\n      <div class=\"dnd-item__title\">\r\n        <mat-icon class=\"dnd-item__title-icon\" tippy=\"Drag to reorder the list\">drag_handle</mat-icon>\r\n        <span class=\"dnd-item__title-text\" tippy=\"{{ item.Title }} ({{ item.Id }})\">\r\n          {{ item.Title }} ({{ item.Id }})\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"item.Id !== 0\">\r\n        <button mat-icon-button tippy=\"Edit item\" appMousedownStopPropagation (click)=\"editItem(item.Id)\">\r\n          <mat-icon>edit</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"dialog-component-actions\">\r\n  <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n  <button mat-raised-button color=\"accent\" (click)=\"saveList()\">Save</button>\r\n</div>\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentGroup } from './models/content-group.model';\r\nimport { GroupHeader } from './models/group-header.model';\r\nimport { ContentGroupService } from './services/content-group.service';\r\n\r\n@Component({\r\n  selector: 'app-manage-content-list',\r\n  templateUrl: './manage-content-list.component.html',\r\n  styleUrls: ['./manage-content-list.component.scss'],\r\n})\r\nexport class ManageContentListComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private items$ = new BehaviorSubject<GroupHeader[]>(null);\r\n  private header$ = new BehaviorSubject<GroupHeader>(null);\r\n  templateVars$ = combineLatest([this.items$, this.header$]).pipe(\r\n    map(([items, header]) => ({ items, header })),\r\n  );\r\n\r\n  private contentGroup: ContentGroup = {\r\n    id: null,\r\n    guid: this.route.snapshot.paramMap.get('guid'),\r\n    part: this.route.snapshot.paramMap.get('part'),\r\n    index: parseInt(this.route.snapshot.paramMap.get('index'), 10),\r\n  };\r\n  private reordered = false;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ManageContentListComponent>,\r\n    private contentGroupService: ContentGroupService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchList();\r\n    this.fetchHeader();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.items$.complete();\r\n    this.header$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  saveList() {\r\n    this.snackBar.open('Saving...');\r\n    this.contentGroupService.saveList(this.contentGroup, this.items$.value).subscribe(res => {\r\n      this.snackBar.open('Saved');\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  editHeader() {\r\n    const form: EditForm = {\r\n      items: [\r\n        {\r\n          Group: {\r\n            Guid: this.contentGroup.guid,\r\n            Index: 0,\r\n            Part: 'listcontent',\r\n            Add: this.header$.value.Id === 0,\r\n          },\r\n        },\r\n        {\r\n          Group: {\r\n            Guid: this.contentGroup.guid,\r\n            Index: 0,\r\n            Part: 'listpresentation',\r\n            Add: this.header$.value.Id === 0,\r\n          },\r\n        },\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(id: number) {\r\n    const form: EditForm = {\r\n      items: [{ EntityId: id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  drop(event: CdkDragDrop<GroupHeader[]>) {\r\n    const items = [...this.items$.value];\r\n    moveItemInArray(items, event.previousIndex, event.currentIndex);\r\n    this.items$.next(items);\r\n    this.reordered = true;\r\n  }\r\n\r\n  trackByFn(index: number, item: GroupHeader) {\r\n    // we use both Index and Id because all demo items have Id=0\r\n    return `${item.Index}+${item.Id}`;\r\n  }\r\n\r\n  private fetchList() {\r\n    this.contentGroupService.getList(this.contentGroup).subscribe(items => {\r\n      if (this.reordered) {\r\n        const oldIds = this.items$.value.map(item => item.Id);\r\n        const idsChanged = this.items$.value.length !== items.length || items.some(item => !oldIds.includes(item.Id));\r\n        if (!idsChanged) {\r\n          const sortOrder = this.items$.value.map(item => item.Index);\r\n          items.sort((a, b) => {\r\n            const aIndex = sortOrder.indexOf(a.Index);\r\n            const bIndex = sortOrder.indexOf(b.Index);\r\n            if (aIndex === -1 || bIndex === -1) { return 0; }\r\n            return aIndex - bIndex;\r\n          });\r\n        } else {\r\n          this.snackBar.open('List was changed from somewhere else. Order of items is reset', null, { duration: 5000 });\r\n        }\r\n      }\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchHeader() {\r\n    this.contentGroupService.getHeader(this.contentGroup).subscribe(header => {\r\n      this.header$.next(header);\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchList();\r\n        this.fetchHeader();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_manage-content-list_manage-content-list_component_ts.71c97f61827ef326.js"}