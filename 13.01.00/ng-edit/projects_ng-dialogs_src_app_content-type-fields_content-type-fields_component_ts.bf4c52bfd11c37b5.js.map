{"version":3,"mappings":"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","names":["i0","ctx_r5","ctx_r7","ContentTypeFieldsActionsComponent","params","this","field","data","metadataCount","Metadata","Object","keys","filter","key","length","enablePermissions","InputType","InputTypeConstants","Type","DataTypeConstants","onOpenMetadata","onRename","onOpenPermissions","onDelete","a","selectors","ctx","ctx_r2","ContentTypeFieldsInputTypeComponent","value","onChangeInputType","ContentTypeFieldsSpecialComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ctx_r4","ContentTypeFieldsTitleComponent","isTitle","onSetTitle","ContentTypeFieldsTypeComponent","icon","calculateTypeIcon","ContentTypeFieldsComponent","dialogRef","route","router","contentTypesService","contentTypesFieldsService","snackBar","BehaviorSubject","AllCommunityModules","defaultGridOptions","getRowClass","rowClass","EditInfo","ReadOnly","push","join","frameworkComponents","contentTypeFieldsTitleComponent","contentTypeFieldsTypeComponent","contentTypeFieldsInputTypeComponent","contentTypeFieldsSpecialComponent","contentTypeFieldsActionsComponent","columnDefs","rowDrag","width","cellClass","headerName","cellRenderer","cellRendererParams","c","setTitle","flex","minWidth","sortable","onCellClicked","editFieldMetadata","nameCellRenderer","headerClass","valueGetter","inputTypeValueGetter","changeInputType","pinned","rename","delete","openPermissions","openMetadata","snapshot","paramMap","get","Subscription","fetchFields","refreshOnChildClosed","contentType$","complete","fields$","subscription","unsubscribe","close","gridApi","api","event","setEnableCellTextSelection","setSuppressRowDrag","idArray","map","Id","reOrder","subscribe","o","movingNode","node","overNode","movingData","overData","newFields","fromIndex","indexOf","toIndex","moveInArray","next","clearFocusedCell","arr","element","splice","sortModel","getSortModel","sortApplied","suppressRowDrag","filterModel","getFilterModel","fieldsFiltered","filterApplied","shouldSuppress","rowDragSuppressed","navigate","contentTypeStaticName","relativeTo","currentField","includes","isGroupOpen","u","StaticName","p","substring","callback","retrieveContentType","of","getFields","forkJoin","fields","form","items","createItemDefinition","formUrl","convertFormToUrl","metadataType","EntityId","ContentTypeName","For","Target","eavConstants","Number","Prefill","Name","open","duration","confirm","GoToPermissions","url","GoToMetadata","add","events","pipe","NavigationEnd","startWith","firstChild","t","pairwise"],"sources":["./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-actions/content-type-fields-actions.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-special/content-type-fields-special.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-special/content-type-fields-special.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-title/content-type-fields-title.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-title/content-type-fields-title.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-type/content-type-fields-type.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-type/content-type-fields-type.component.html","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.component.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.component.html"],"sourcesContent":["<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple *ngIf=\"!field.EditInfo.ReadOnly\" tippy=\"Metadata\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\">\r\n      local_offer\r\n    </mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"field.EditInfo.ReadOnly\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\">\r\n      local_offer\r\n    </mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Permissions\" *ngIf=\"!field.EditInfo.ReadOnly && enablePermissions\"\r\n    (click)=\"openPermissions()\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\">\r\n      person\r\n    </mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"field.EditInfo.ReadOnly || !enablePermissions\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\">\r\n      person\r\n    </mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <button mat-menu-item [disabled]=\"field.EditInfo.ReadOnly\" (click)=\"rename()\">\r\n    <mat-icon>text_fields</mat-icon>\r\n    <span>Rename</span>\r\n  </button>\r\n\r\n  <button mat-menu-item [disabled]=\"field.EditInfo.ReadOnly || field.IsTitle\" (click)=\"deleteField()\">\r\n    <mat-icon>delete</mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { DataTypeConstants } from '../../constants/data-type.constants';\r\nimport { InputTypeConstants } from '../../constants/input-type.constants';\r\nimport { Field } from '../../models/field.model';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-actions',\r\n  templateUrl: './content-type-fields-actions.component.html',\r\n  styleUrls: ['./content-type-fields-actions.component.scss'],\r\n})\r\nexport class ContentTypeFieldsActionsComponent implements ICellRendererAngularComp {\r\n  field: Field;\r\n  metadataCount: number;\r\n  enablePermissions: boolean;\r\n  private params: ContentTypeFieldsActionsParams;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ContentTypeFieldsActionsParams) {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    this.metadataCount = this.field.Metadata ? Object.keys(this.field.Metadata).filter(key => key !== 'merged').length : 0;\r\n    this.enablePermissions = this.field.InputType === InputTypeConstants.StringWysiwyg || this.field.Type === DataTypeConstants.Hyperlink;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata() {\r\n    this.params.onOpenMetadata(this.field);\r\n  }\r\n\r\n  rename() {\r\n    this.params.onRename(this.field);\r\n  }\r\n\r\n  openPermissions() {\r\n    this.params.onOpenPermissions(this.field);\r\n  }\r\n\r\n  deleteField() {\r\n    this.params.onDelete(this.field);\r\n  }\r\n}\r\n","<div matRipple class=\"input-component highlight\" *ngIf=\"!field.EditInfo.ReadOnly\" (click)=\"changeInputType()\">\r\n  <div class=\"text\">{{ value }}</div>\r\n  <div class=\"like-button\">\r\n    <mat-icon>arrow_drop_down</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"input-component disabled\" *ngIf=\"field.EditInfo.ReadOnly\">\r\n  <div class=\"text disabled\">{{ value }}</div>\r\n  <div class=\"like-button disabled\">\r\n    <mat-icon>arrow_drop_down</mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../models/field.model';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-input-type',\r\n  templateUrl: './content-type-fields-input-type.component.html',\r\n  styleUrls: ['./content-type-fields-input-type.component.scss'],\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  field: Field;\r\n\r\n  private params: ContentTypeFieldsInputTypeParams;\r\n\r\n  agInit(params: ContentTypeFieldsInputTypeParams) {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  changeInputType(): void {\r\n    this.params.onChangeInputType(this.field);\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon *ngIf=\"hasFormulas\" tippy=\"Has Formulas\">functions</mat-icon>\r\n  <mat-icon *ngIf=\"isEphemeral\" tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../models/field.model';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-special',\r\n  templateUrl: './content-type-fields-special.component.html',\r\n  styleUrls: ['./content-type-fields-special.component.scss'],\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple *ngIf=\"!field.EditInfo.ReadOnly\" tippy=\"Use as title field\"\r\n    (click)=\"setTitle()\">\r\n    <mat-icon *ngIf=\"isTitle\" svgIcon=\"star\"></mat-icon>\r\n    <mat-icon *ngIf=\"!isTitle\">star_outline</mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"field.EditInfo.ReadOnly\">\r\n    <mat-icon *ngIf=\"isTitle\" svgIcon=\"star\"></mat-icon>\r\n    <mat-icon *ngIf=\"!isTitle\">star_outline</mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../models/field.model';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-title',\r\n  templateUrl: './content-type-fields-title.component.html',\r\n  styleUrls: ['./content-type-fields-title.component.scss'],\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n  isTitle: boolean;\r\n  field: Field;\r\n\r\n  private params: ContentTypeFieldsTitleParams;\r\n\r\n  agInit(params: ContentTypeFieldsTitleParams) {\r\n    this.params = params;\r\n    this.isTitle = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  setTitle(): void {\r\n    this.params.onSetTitle(this.field);\r\n  }\r\n}\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { calculateTypeIcon } from '../../content-type-fields.helpers';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-type',\r\n  templateUrl: './content-type-fields-type.component.html',\r\n  styleUrls: ['./content-type-fields-type.component.scss'],\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AllCommunityModules, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowClassParams, RowDragEvent, SortChangedEvent, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin, of, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { AddItem, EditForm, EditItem } from '../shared/models/edit-form.model';\r\nimport { ContentTypeFieldsActionsComponent } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsInputTypeComponent } from './ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component';\r\n// tslint:disable-next-line:max-line-length\r\nimport { ContentTypeFieldsInputTypeParams } from './ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.models';\r\nimport { ContentTypeFieldsSpecialComponent } from './ag-grid-components/content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './ag-grid-components/content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTitleParams } from './ag-grid-components/content-type-fields-title/content-type-fields-title.models';\r\nimport { ContentTypeFieldsTypeComponent } from './ag-grid-components/content-type-fields-type/content-type-fields-type.component';\r\nimport { InputTypeConstants } from './constants/input-type.constants';\r\nimport { Field } from './models/field.model';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  styleUrls: ['./content-type-fields.component.scss'],\r\n})\r\nexport class ContentTypeFieldsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n  fields$ = new BehaviorSubject<Field[]>(null);\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    getRowClass(params: RowClassParams) {\r\n      const field: Field = params.data;\r\n      const rowClass: string[] = [];\r\n      if (field.EditInfo.ReadOnly) { rowClass.push('disable-row-drag'); }\r\n      if (field.InputType === InputTypeConstants.EmptyDefault) { rowClass.push('group-start-row'); }\r\n      if (field.InputType === InputTypeConstants.EmptyEnd) { rowClass.push('group-end-row'); }\r\n      return rowClass.join(' ');\r\n    },\r\n    frameworkComponents: {\r\n      contentTypeFieldsTitleComponent: ContentTypeFieldsTitleComponent,\r\n      contentTypeFieldsTypeComponent: ContentTypeFieldsTypeComponent,\r\n      contentTypeFieldsInputTypeComponent: ContentTypeFieldsInputTypeComponent,\r\n      contentTypeFieldsSpecialComponent: ContentTypeFieldsSpecialComponent,\r\n      contentTypeFieldsActionsComponent: ContentTypeFieldsActionsComponent,\r\n    },\r\n    columnDefs: [\r\n      { rowDrag: true, width: 18, cellClass: 'no-select no-padding no-outline' },\r\n      {\r\n        headerName: 'Title', field: 'IsTitle', width: 42, cellClass: 'secondary-action no-padding no-outline',\r\n        cellRenderer: 'contentTypeFieldsTitleComponent',\r\n        cellRendererParams: {\r\n          onSetTitle: (field) => this.setTitle(field),\r\n        } as ContentTypeFieldsTitleParams,\r\n      },\r\n      {\r\n        headerName: 'Name', field: 'StaticName', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: (params) => this.editFieldMetadata(params.data),\r\n        cellRenderer: (params: ICellRendererParams) => this.nameCellRenderer(params),\r\n      },\r\n      {\r\n        headerName: 'Type', field: 'Type', width: 70, headerClass: 'dense', cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter', cellRenderer: 'contentTypeFieldsTypeComponent',\r\n      },\r\n      {\r\n        headerName: 'Input', field: 'InputType', width: 160,\r\n        cellClass: (params) => (params.data as Field).EditInfo.ReadOnly ? 'no-outline no-padding' : 'secondary-action no-padding',\r\n        sortable: true, filter: 'agTextColumnFilter', cellRenderer: 'contentTypeFieldsInputTypeComponent',\r\n        valueGetter: (params) => this.inputTypeValueGetter(params),\r\n        cellRendererParams: {\r\n          onChangeInputType: (field) => this.changeInputType(field),\r\n        } as ContentTypeFieldsInputTypeParams,\r\n      },\r\n      {\r\n        headerName: 'Label', field: 'Metadata.All.Name', flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter',\r\n      },\r\n      {\r\n        headerName: 'Special', width: 66, headerClass: 'dense', cellClass: 'no-outline',\r\n        cellRenderer: 'contentTypeFieldsSpecialComponent',\r\n      },\r\n      {\r\n        headerName: 'Notes', field: 'Metadata.All.Notes', flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter',\r\n      },\r\n      {\r\n        width: 122, cellClass: 'secondary-action no-padding', cellRenderer: 'contentTypeFieldsActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onRename: (field) => this.rename(field),\r\n          onDelete: (field) => this.delete(field),\r\n          onOpenPermissions: (field) => this.openPermissions(field),\r\n          onOpenMetadata: (field) => this.openMetadata(field),\r\n        } as ContentTypeFieldsActionsParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n  private gridApi: GridApi;\r\n  private rowDragSuppressed = false;\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchFields();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.fields$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n  }\r\n\r\n  onRowDragEnter(event: RowDragEvent) {\r\n    this.gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(event: RowDragEvent) {\r\n    this.gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields$.value.map(field => field.Id);\r\n    this.contentTypesFieldsService.reOrder(idArray, this.contentType$.value).subscribe(res => {\r\n      this.fetchFields(() => {\r\n        this.gridApi.setEnableCellTextSelection(true);\r\n        this.gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const movingNode = event.node;\r\n    const overNode = event.overNode;\r\n    if (!overNode) { return; }\r\n    const rowNeedsToMove = movingNode !== overNode;\r\n    if (rowNeedsToMove) {\r\n      const movingData: Field = movingNode.data;\r\n      const overData: Field = overNode.data;\r\n      const newFields = [...this.fields$.value];\r\n      const fromIndex = newFields.indexOf(movingData);\r\n      const toIndex = newFields.indexOf(overData);\r\n      this.moveInArray(newFields, fromIndex, toIndex);\r\n      this.fields$.next(newFields);\r\n      this.gridApi.clearFocusedCell();\r\n    }\r\n  }\r\n\r\n  private moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n  }\r\n\r\n  onSortChanged(params: SortChangedEvent) {\r\n    const sortModel = this.gridApi.getSortModel();\r\n    this.sortApplied = sortModel.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(params: FilterChangedEvent) {\r\n    const filterModel = this.gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  private suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = true;\r\n      this.gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = false;\r\n      this.gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.router.navigate([`add/${this.contentTypeStaticName}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private nameCellRenderer(params: ICellRendererParams) {\r\n    const currentField: Field = params.data;\r\n    const empties: string[] = [InputTypeConstants.EmptyDefault, InputTypeConstants.EmptyEnd];\r\n    if (empties.includes(currentField.InputType)) {\r\n      return params.value;\r\n    }\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields$.value) {\r\n      if (field.InputType === InputTypeConstants.EmptyDefault) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (field.InputType === InputTypeConstants.EmptyEnd) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === currentField.StaticName) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  private inputTypeValueGetter(params: ValueGetterParams) {\r\n    const field: Field = params.data;\r\n    const inputType = field.InputType.substring(field.InputType.indexOf('-') + 1);\r\n    return inputType;\r\n  }\r\n\r\n  private fetchFields(callback?: () => void) {\r\n    const contentType$ = this.contentType$.value == null\r\n      ? this.contentTypesService.retrieveContentType(this.contentTypeStaticName)\r\n      : of(this.contentType$.value);\r\n    const fields$ = this.contentTypesFieldsService.getFields(this.contentTypeStaticName);\r\n    forkJoin([contentType$, fields$]).subscribe(([contentType, fields]) => {\r\n      this.contentType$.next(contentType);\r\n      this.fields$.next(fields);\r\n      if (callback != null) { callback(); }\r\n    });\r\n  }\r\n\r\n  private editFieldMetadata(field: Field) {\r\n    const form: EditForm = {\r\n      items: [\r\n        this.createItemDefinition(field, 'All'),\r\n        this.createItemDefinition(field, field.Type),\r\n        this.createItemDefinition(field, field.InputType),\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private createItemDefinition(field: Field, metadataType: string): AddItem | EditItem {\r\n    return field.Metadata[metadataType] != null\r\n      ? { EntityId: field.Metadata[metadataType].Id } // if defined, return the entity-number to edit\r\n      : {\r\n        ContentTypeName: '@' + metadataType, // otherwise the content type for new-assignment\r\n        For: {\r\n          Target: eavConstants.metadata.attribute.target,\r\n          Number: field.Id,\r\n        },\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n  private setTitle(field: Field) {\r\n    this.snackBar.open('Setting title...');\r\n    this.contentTypesFieldsService.setTitle(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private changeInputType(field: Field) {\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/inputType`], { relativeTo: this.route });\r\n  }\r\n\r\n  private rename(field: Field) {\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/name`], { relativeTo: this.route });\r\n  }\r\n\r\n  private delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.contentTypesFieldsService.delete(field, this.contentType$.value).subscribe(res => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private openPermissions(field: Field) {\r\n    this.router.navigate([GoToPermissions.getUrlAttribute(field.Id)], { relativeTo: this.route });\r\n  }\r\n\r\n  private openMetadata(field: Field) {\r\n    const url = GoToMetadata.getUrlAttribute(\r\n      field.Id,\r\n      `Metadata for Field: ${field.StaticName} (${field.Id})`,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchFields();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ (contentType$ | async)?.Name }} Fields</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"fields$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (rowDragEnter)=\"onRowDragEnter($event)\" (rowDragEnd)=\"onRowDragEnd($event)\"\r\n      (rowDragMove)=\"onRowDragMove($event)\" (gridReady)=\"onGridReady($event)\" (sortChanged)=\"onSortChanged($event)\"\r\n      (filterChanged)=\"onFilterChanged($event)\" [ngClass]=\"{\r\n        'grid-sorted': sortApplied,\r\n        'grid-filtered': filterApplied\r\n      }\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\"></div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add fields\"\r\n      [disabled]=\"(contentType$ | async) == null || (contentType$ | async).EditInfo.ReadOnly\" (click)=\"add()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_content-type-fields_content-type-fields_component_ts.bf4c52bfd11c37b5.js"}