{"version":3,"mappings":"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","names":["dest","source","importantProperties","key","hasOwnProperty","value","setProperty","has","removeProperty","element","enable","userSelect","extendStyles","style","position","top","opacity","left","transform","initialTransform","multiplier","toLowerCase","indexOf","parseFloat","computedStyle","name","getPropertyValue","split","map","part","trim","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","_viewportRuler","this","positions","Map","clear","elements","set","scrollPosition","getViewportScrollPosition","forEach","e","scrollTop","scrollLeft","getMutableClientRect","event","target","_getEventTarget","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","adjustClientRect","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","_a","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","dragImportantProperties","Set","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","Subject","_pointerMoveSubscription","Subscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","o","next","targetHandle","find","handle","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","_previewRect","_preview","preventDefault","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","observers","run","distance","_getDragDistance","delta","_pointerDirectionDelta","Math","abs","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","_startDragSequence","_pointerUp","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","newValue","coerceBooleanProperty","_toggleNativeDragInteractions","toggleNativeDragInteractions","_placeholder","getPlaceholderElement","getRootElement","handles","coerceElement","disabledHandles","add","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","_b","remove","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","delete","direction","_previewContainer","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","_createPreviewElement","toggleVisibility","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","_updateOnScroll","scrollEvent","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","t","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","preview","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","deepCloneNode","margin","zIndex","classList","setAttribute","Array","isArray","className","Promise","resolve","placeholderRect","duration","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","parseCssTimeUnitsToMs","getTransformTransitionDurationInMs","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","combineTransforms","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","array","fromIndex","toIndex","from","clamp","to","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_draggables","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","s","period","arguments","timer","asyncScheduler","interval","animationFrameScheduler","pipe","takeUntil","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","index","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","splice","parentElement","push","_cacheItemPositions","_cacheParentPositions","_reset","items","previousItems","_withDropContainer","filter","every","_cacheItems","connectedTo","slice","orientation","_scrollableElements","concat","reverse","findIndex","currentItem","size","pointerDelta","_clientRect","isPointerNearClientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","moveItemInArray","sibling","isDraggedItem","offset","elementToOffset","l","isInsideClientRect","scrollNode","verticalScrollDirection","horizontalScrollDirection","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getElementScrollDirections","m","getViewportSize","window","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","elementToMeasure","getVisibleElement","sort","a","b","current","_stopReceiving","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","d","floor","_canReceive","elementFromPoint","nativeElement","activeSiblings","n","_sortFromLastPointerPosition","draggedItems","_startReceiving","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","options","config","_clearGlobalListeners","streams","Observable","observer","merge","instance","ɵfac","i0","DOCUMENT","ɵprov","factory","DEFAULT_CONFIG","DragDrop","i1","CDK_DRAG_PARENT","InjectionToken","CDK_DROP_LIST_GROUP","CDK_DRAG_CONFIG","_uniqueIdCounter","CDK_DROP_LIST","CdkDropList","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_group","_destroyed","id","EventEmitter","_unsortedItems","_dropListRef","createDropList","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","_items","_syncItemsWithRef","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","dispose","ref","startWith","withDirection","coerceArray","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","coerceNumberProperty","withOrientation","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","i3","ɵdir","selectors","provide","useValue","useExisting","CDK_DRAG_HANDLE","CDK_DRAG_PLACEHOLDER","CDK_DRAG_PREVIEW","CdkDrag","_viewContainerRef","_selfHandle","_parentDrag","subscription","_","movedEvent","createDrag","addItem","_syncInputs","reset","getFreeDragPosition","onStable","take","_updateRootElement","_setupHandlesListener","freeDragPosition","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","removeItem","closest","boundary","dir","templateRef","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withPreviewContainer","tap","childHandleElements","withHandles","switchMap","_stateChanges","dragRef","handleInstance","disableHandle","enableHandle","DragDropModule","ɵmod","ɵinj","imports","CdkScrollableModule"],"sources":["./node_modules/@angular/cdk/fesm2015/drag-drop.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, Optional, SkipSelf, Output, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, (importantProperties === null || importantProperties === void 0 ? void 0 : importantProperties.has(key)) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    return event.target && (event.target === handle || handle.contains(event.target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        var _a, _b;\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            (_a = this._rootElement) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        (_b = this._anchor) === null || _b === void 0 ? void 0 : _b.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        var _a, _b;\n        (_a = this._preview) === null || _a === void 0 ? void 0 : _a.remove();\n        (_b = this._previewRef) === null || _b === void 0 ? void 0 : _b.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        var _a, _b;\n        (_a = this._placeholder) === null || _a === void 0 ? void 0 : _a.remove();\n        (_b = this._placeholderRef) === null || _b === void 0 ? void 0 : _b.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = this._initialTransform = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    var _a;\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        (_a = this._preview) === null || _a === void 0 ? void 0 : _a.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        var _a;\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = ((_a = this._previewTemplate) === null || _a === void 0 ? void 0 : _a.template) ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition\n            ? cachedPosition.scrollPosition\n            : this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item,\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            var _a;\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = (_a = this._itemPositions.find(current => current.drag === item)) === null || _a === void 0 ? void 0 : _a.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this.sortPredicate(index, item, this) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rjxs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nDragDropRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable });\nDragDrop.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: DragDrop, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkDropListGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CdkDropListGroup, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance,\n                dropPoint: event.dropPoint,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i3.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDropList.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CdkDropList, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n        // Prevent child drop lists from picking up the same group as their parent.\n        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n    ], exportAs: [\"cdkDropList\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i3.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: CdkDropListGroup, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [CDK_DROP_LIST_GROUP]\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [CDK_DRAG_CONFIG]\n                    }] }];\n    }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDragHandle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CdkDragHandle, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_DRAG_PARENT]\n                    }, {\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }];\n    }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDragPlaceholder.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CdkDragPlaceholder, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n}\nCdkDragPreview.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDragPreview.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CdkDragPreview, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        var _a;\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        (_a = element.parentElement) === null || _a === void 0 ? void 0 : _a.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            var _a;\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(((_a = CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })) === null || _a === void 0 ? void 0 : _a._dragRef) || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({\n                source: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n}\nCdkDrag._dragInstances = [];\nCdkDrag.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i3.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDrag.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CdkDrag, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_DROP_LIST]\n                    }, {\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [CDK_DRAG_CONFIG]\n                    }] }, { type: i3.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }, {\n                        type: Inject,\n                        args: [CDK_DRAG_HANDLE]\n                    }] }, { type: CdkDrag, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }, {\n                        type: Inject,\n                        args: [CDK_DRAG_PARENT]\n                    }] }];\n    }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDragDropModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: DragDropModule, declarations: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder], exports: [CdkScrollableModule,\n        CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder] });\nDragDropModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n"],"sourceRoot":"webpack:///","file":"default-node_modules_angular_cdk_fesm2015_drag-drop_mjs.641f33e52a61d56a.js"}