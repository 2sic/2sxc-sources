{"version":3,"mappings":"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","names":["EntityFilterComponent","this","params","filter","idFilter","length","values","valueGetter","node","some","value","includes","i","item","o","data","colDef","headerName","_a","Id","isFilterActive","filterType","model","e","_b","idFilterString","u","s","_c","join","_d","valueInputRef","nativeElement","focus","split","map","parseInt","el","isNaN","filterChangedCallback","r","selectors","i0","ctx","ContentItemsActionsComponent","onClone","onExport","onDelete","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","entities","text","replace","ctx_r2","ContentItemsStatusComponent","readOnly","_EditInfo","ReadOnly","metadataCount","Metadata","metadataTooltip","For","Target","TargetType","Number","String","Guid","Title","onOpenMetadata","PubMetaFilterComponent","published","metadata","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","toString","form","control","keyType","controls","testValue","eavConstants","test","patternWholeNumber","hasCurly","bracket","guid","substring","guidRegex","patternGuid","ctx_r54","ctx_r56","ctx_r58","ctx_r60","ctx_r61","CreateMetadataDialogComponent","dialogRef","context","contentItemsService","contentTypesService","c","dropdownInsertValue","subscription","Subscription","targetTypeOptions","Object","option","keyTypeOptions","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","FormGroup","addControl","FormControl","Validators","metadataKeyValidator","add","scopeForContentTypes","valueChanges","pipe","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","name","concat","fetchContentTypes","merge","targetType","getRawValue","key","formValues","getAll","contentTypeStaticName","items","formValues$","GeneralHelpers","combineLatest","guidedMode","foundTargetType","find","updatedForm","isAppMetadata","appId","keys","templateVars$","scopeOptions","contentItems","contentTypes","J","guidedKey","unknownTargetType","targetTypeHint","Y","hint","guidedKeyExists","complete","unsubscribe","result","close","event","checked","target","closeDialog","scope","retrieveContentTypes","getScopes","scopes","ctx_r3","ContentItemsComponent","router","route","entitiesService","contentExportService","snackBar","globalConfigService","dialog","viewContainerRef","changeDetectorRef","getDebugEnabled$","AllCommunityModules","defaultGridOptions","frameworkComponents","pubMetaFilterComponent","booleanFilterComponent","BooleanFilterComponent","entityFilterComponent","idFieldComponent","IdFieldComponent","contentItemsStatusComponent","contentItemsActionsComponent","contentItemsEntityComponent","snapshot","paramMap","get","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosed","contentType$","items$","gridApi$","api","retrieveContentType","contentType","getColumns","columnDefs","buildColumnDefs","columns","filterModel","urlFilters","filters","charAt","atob","JSON","parse","error","console","IsPublished","IsMetadata","n","Status","entries","forEach","p","columnDef","P","type","filterTo","F","undefined","v","buildFilterModel","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","consoleLogAngular","setFilterModel","url","GoToMetadata","_Title","navigate","relativeTo","formUrl","convertFormToUrl","ContentTypeName","EntityId","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","push","rowNode","files","importFile","lastIndexOf","toLocaleLowerCase","ext","importContent","importItem","dialogData","state","open","autoFocus","width","afterClosed","itemFor","markForCheck","warn","duration","events","NavigationEnd","firstChild","pairwise","field","headerClass","cellClass","cellRenderer","sortable","cellRendererParams","tooltipGetter","_RepositoryId","valueGetterStatus","openMetadata","bind","flex","minWidth","onCellClicked","editItem","headerTooltip","valueGetterUsage","pinned","clone","export","delete","column","StaticName","Type","DataTypeConstants","Entity","AllowMultiValue","valueGetterEntityField","useTimePicker","DateTime","UseTimePicker","valueGetterDateTime","valueGetterBoolean","h","DuplicateEntity","exportEntity","confirm","err","dismiss","ExceptionMessage","_Used","_Uses","rawValue","FieldHintComponent","isShort","D","id","tooltip","copyToClipboard","x","ClickStopPropagationDirective","stopPropagation","f","ToggleDebugDirective","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","m","str","document","createElement","setAttribute","style","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange","SafeHtmlPipe","sanitizer","html","bypassSecurityTrustHtml","pure"],"sources":["./projects/ng-dialogs/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/ng-dialogs/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.html","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/ng-dialogs/src/app/content-items/content-items.component.html","./projects/ng-dialogs/src/app/content-items/content-items.component.ts","./projects/ng-dialogs/src/app/content-items/content-items.helpers.ts","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.html","./projects/ng-dialogs/src/app/shared/constants/guid.constants.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private params: IFilterParams;\r\n  private idFilter: number[];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const values: string[] | undefined = this.params.valueGetter(params.node);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const item: { Id: number; Title: string; } | undefined = params.data[this.params.colDef.headerName]?.[0];\r\n      if (item == null) { return false; }\r\n      if (!this.idFilter.includes(item.Id)) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field appearance=\"standard\" color=\"accent\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"standard\" color=\"accent\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ContentItemsActionsParams;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ContentItemsActionsParams) {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone() {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export() {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem() {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <button mat-menu-item [disabled]=\"item._EditInfo.ReadOnly\" (click)=\"deleteItem()\">\r\n    <mat-icon>delete</mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","<div [tippy]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple *ngIf=\"!readOnly\"\r\n    [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\">\r\n      {{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"readOnly && !(!metadataCount && !value.metadata)\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\">\r\n      {{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  readOnly: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ContentItemsStatusParams;\r\n\r\n  agInit(params: ContentItemsStatusParams) {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.readOnly = this.item._EditInfo.ReadOnly;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    this.metadataTooltip = this.item.For\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${this.item.For.Target}`\r\n      + `\\nTargetType: ${this.item.For.TargetType}`\r\n      + (this.item.For.Number ? `\\nNumber: ${this.item.For.Number}` : '')\r\n      + (this.item.For.String ? `\\nString: ${this.item.For.String}` : '')\r\n      + (this.item.For.Guid ? `\\nGuid: ${this.item.For.Guid}` : '')\r\n      + (this.item.For.Title ? `\\nTitle: ${this.item.For.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata() {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n    const value: PubMeta = this.params.valueGetter(params.node);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","import { AbstractControl, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: FormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create Metadata</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This is a special operation to add an item which is metadata for another item,\r\n    see <a href=\"http://r.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- Target Type -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Target</mat-label>\r\n\r\n        <mat-select *ngIf=\"data.guidedMode\" formControlName=\"targetType\" required>\r\n          <mat-option *ngFor=\"let option of targetTypeOptions\" [value]=\"option.targetType\">\r\n            {{ option.label }}\r\n          </mat-option>\r\n          <mat-option *ngIf=\"data.unknownTargetType\" [value]=\"data.formValues.targetType\">\r\n            {{ data.formValues.targetType }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"number\" min=\"0\" *ngIf=\"!data.guidedMode\" formControlName=\"targetType\" required>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint\r\n        *ngIf=\"form.controls['targetType'].touched && !form.controls['targetType'].invalid && data.unknownTargetType\"\r\n        [isError]=\"false\">\r\n        Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"data.targetTypeHint\" [isError]=\"false\">{{ data.targetTypeHint }}</app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern\"\r\n        [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n\r\n      <!-- Key Type -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Key type</mat-label>\r\n\r\n        <mat-select formControlName=\"keyType\" required>\r\n          <mat-option *ngFor=\"let option of data.keyTypeOptions\" [value]=\"option\">\r\n            {{ option }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint *ngIf=\"form.controls['keyType'].touched && form.controls['keyType'].errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n\r\n      <!-- Content Type for Content Items -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\"\r\n        *ngIf=\"data.guidedMode && data.formValues.targetType === eavConstants.metadata.entity.targetType\">\r\n        <mat-label>Content Type</mat-label>\r\n\r\n        <mat-select formControlName=\"contentTypeForContentItems\"\r\n          [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <!-- Scope for Content Types -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\"\r\n        *ngIf=\"data.guidedMode && (data.formValues.targetType === eavConstants.metadata.entity.targetType || data.formValues.targetType === eavConstants.metadata.contentType.targetType)\">\r\n        <mat-label>Scope</mat-label>\r\n\r\n        <mat-select formControlName=\"scopeForContentTypes\"\r\n          [placeholder]=\"!data.scopeOptions.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n            {{ scopeOption.name }}\r\n          </mat-option>\r\n          <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint>\r\n        The scope should almost never be changed -\r\n        <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n      </app-field-hint>\r\n\r\n      <!-- Key -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Key</mat-label>\r\n\r\n        <ng-container *ngIf=\"data.guidedMode; then specialKeyInputs else defaultKeyInput\">\r\n        </ng-container>\r\n\r\n        <ng-template #specialKeyInputs>\r\n          <ng-container [ngSwitch]=\"data.formValues.targetType\">\r\n            <ng-container *ngSwitchCase=\"eavConstants.metadata.entity.targetType\">\r\n              <mat-select *ngIf=\"data.guidedKey\" formControlName=\"key\" required\r\n                [placeholder]=\"!data.contentItems.length ? 'No items found' : ''\">\r\n                <mat-option *ngFor=\"let item of data.contentItems\" [value]=\"item.Guid\">\r\n                  {{ item.Title }} ({{ item.Id }})\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n              <input matInput type=\"text\" *ngIf=\"!data.guidedKey\" formControlName=\"key\" required>\r\n            </ng-container>\r\n\r\n            <ng-container *ngSwitchCase=\"eavConstants.metadata.contentType.targetType\">\r\n              <mat-select *ngIf=\"data.guidedKey\" formControlName=\"key\" required\r\n                [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n                <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n              <input matInput type=\"text\" *ngIf=\"!data.guidedKey\" formControlName=\"key\" required>\r\n            </ng-container>\r\n\r\n            <ng-container *ngSwitchDefault>\r\n              <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n            </ng-container>\r\n          </ng-container>\r\n        </ng-template>\r\n\r\n        <ng-template #defaultKeyInput>\r\n          <input matInput type=\"text\" *ngIf=\"data.formValues.keyType !== eavConstants.keyTypes.number\"\r\n            formControlName=\"key\" required>\r\n          <input matInput type=\"number\" *ngIf=\"data.formValues.keyType === eavConstants.keyTypes.number\"\r\n            formControlName=\"key\" required>\r\n        </ng-template>\r\n\r\n        <div matSuffix class=\"selection-suffix\" *ngIf=\"data.guidedMode && data.guidedKeyExists\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': data.guidedKey }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedKey(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !data.guidedKey }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedKey(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber\"\r\n        [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternGuid\" [isError]=\"true\">\r\n        Must be a valid GUID\r\n      </app-field-hint>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <mat-slide-toggle color=\"accent\"\r\n        [tippy]=\"data.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n        [checked]=\"data.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n        {{ data.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, merge, Observable, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogTemplateVars, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss']\r\n})\r\nexport class CreateMetadataDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: FormGroup;\r\n  templateVars$: Observable<MetadataDialogTemplateVars>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = new Subscription();\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('targetType', new FormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new FormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new FormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new FormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new FormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscription.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscription.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscription.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!GeneralHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value)) {\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n        }\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType)) {\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n        }\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId) {\r\n          updatedForm.key = this.context.appId;\r\n        }\r\n\r\n        if (Object.keys(updatedForm).length) {\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        GeneralHelpers.disableControl(this.form.controls['keyType'], keyTypeDisabled);\r\n        GeneralHelpers.disableControl(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.templateVars$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const templateVars: MetadataDialogTemplateVars = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","<div appToggleDebug class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ (contentType$ | async)?.Name }} Data</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div *ngIf=\"(contentType$ | async)?.Properties?.ListInstructions as listInstructions\"\r\n    [innerHTML]=\"listInstructions | safeHtml\">\r\n  </div>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n      (filesDropped)=\"filesDropped($event)\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\">\r\n      <button mat-button tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon>cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n        <mat-icon>local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      <button mat-button color=\"accent\" tippy=\"Print filter to console\" *ngIf=\"debugEnabled$ | async\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon>filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n    </div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { AllCommunityModules, CellClickedEvent, ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith, take } from 'rxjs/operators';\r\nimport { GlobalConfigService } from '../../../../edit/shared/store/ngrx-data';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogAngular } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './ag-grid-components/content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './ag-grid-components/content-items-status/content-items-status.models';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemImportDialogData } from './content-item-import/content-item-import-dialog.config';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n  items$ = new BehaviorSubject<ContentItem[]>(null);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      pubMetaFilterComponent: PubMetaFilterComponent,\r\n      booleanFilterComponent: BooleanFilterComponent,\r\n      entityFilterComponent: EntityFilterComponent,\r\n      idFieldComponent: IdFieldComponent,\r\n      contentItemsStatusComponent: ContentItemsStatusComponent,\r\n      contentItemsActionsComponent: ContentItemsActionsComponent,\r\n      contentItemsEntityComponent: ContentItemsEntityComponent,\r\n    },\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      const columnDefs = this.buildColumnDefs(columns);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogAngular('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.contentTypeStaticName,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(params: CellClickedEvent) {\r\n    const item: ContentItem = params?.data;\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        ids.push((rowNode.data as ContentItem).Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: ContentItemImportDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: itemFor.target ?? itemFor.targetType.toString(),\r\n            TargetType: itemFor.targetType,\r\n            ...(itemFor.keyType === eavConstants.keyTypes.guid && { Guid: itemFor.key }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.number && { Number: parseInt(itemFor.key, 10) }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.string && { String: itemFor.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchItems();\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense',\r\n        cellClass: (params) => `${(params.data as ContentItem)._EditInfo.ReadOnly ? 'disabled' : ''} id-action no-padding no-outline`,\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agTextColumnFilter',\r\n        cellRendererParams: {\r\n          tooltipGetter: (item: ContentItem) => `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        headerName: 'Status', field: 'Status', width: 82, headerClass: 'dense', cellClass: 'secondary-action no-padding',\r\n        filter: 'pubMetaFilterComponent', cellRenderer: 'contentItemsStatusComponent', valueGetter: this.valueGetterStatus,\r\n        cellRendererParams: {\r\n          onOpenMetadata: this.openMetadata.bind(this),\r\n        } as ContentItemsStatusParams,\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)', field: '_Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: this.editItem.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Stats', headerTooltip: 'Used by others / uses others',\r\n        field: '_Used', width: 70, headerClass: 'dense', cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter', valueGetter: this.valueGetterUsage,\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding', width: 122, cellRenderer: 'contentItemsActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onClone: this.clone.bind(this),\r\n          onExport: this.export.bind(this),\r\n          onDelete: this.delete.bind(this),\r\n        } as ContentItemsActionsParams,\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName, field: column.StaticName, flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          try {\r\n            colDef.allowMultiValue = column.Metadata.Entity.AllowMultiValue;\r\n          } catch (e) {\r\n            colDef.allowMultiValue = true;\r\n          }\r\n          colDef.cellRenderer = 'contentItemsEntityComponent';\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = 'entityFilterComponent';\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          try {\r\n            colDef.useTimePicker = column.Metadata.DateTime.UseTimePicker;\r\n          } catch (e) {\r\n            colDef.useTimePicker = false;\r\n          }\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = 'booleanFilterComponent';\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterStatus(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    const published: PubMeta = {\r\n      published: item.IsPublished,\r\n      metadata: !!item.For,\r\n      hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n    };\r\n    return published;\r\n  }\r\n\r\n  private valueGetterUsage(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    return `${item._Used} / ${item._Uses}`;\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/all-modules';\r\nimport { GeneralHelpers } from '../../../../edit/shared/helpers';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { PubMetaFilterModel } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) { return; }\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === 'entityFilterComponent') {\r\n        value = GeneralHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: IdFieldParams) {\r\n    this.id = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>\r\n","/**\r\n * Do not reuse regex:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#using_test_on_a_regex_with_the_global_flag\r\n */\r\nexport function guidRegex(): RegExp {\r\n  return /^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$/i;\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_content-items_content-items_component_ts.81c4ce83e6c0c812.js"}