{"version":3,"sources":["./projects/ng-dialogs/src/app/replace-content/replace-content.component.html","./projects/ng-dialogs/src/app/replace-content/replace-content.component.ts"],"names":["dialogRef","contentGroupService","router","route","snackBar","hostClass","ngOnInit","this","guid","snapshot","paramMap","get","part","index","parseInt","add","queryParamMap","subscription","filterText$","options$","filteredOptions$","pipe","filterText","filter","option","label","toLocaleLowerCase","includes","map","templateVars$","filteredOptions","isAddMode","isMatch","fetchConfig","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","closeDialog","close","setFilter","next","select","event","value","copySelected","contentGroup","buildContentGroup","formUrl","items","ContentTypeName","contentTypeName","DuplicateEntity","id","navigate","relativeTo","save","open","saveItem","subscribe","duration","isRefresh","cloneId","getItems","replaceConfig","options","Object","entries","Items","itemId","itemName","SelectedId","newFilter","find","events","firstChild","editResult","getCurrentNavigation","extras","state","keys","ReplaceContentComponent"],"mappings":"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","file":"projects_ng-dialogs_src_app_replace-content_replace-content_component_ts.848346517bae7d372f7d.js","sourcesContent":["<ng-container *ngIf=\"templateVars$ | async as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">{{ data.isAddMode ? 'Add Existing Item' : 'Replace Content Item' }}</div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <p class=\"dialog-description\">\r\n    {{\r\n    data.isAddMode\r\n    ? 'Select a content-item to add to this list.'\r\n    : 'By replacing a content-item you can make other content appear in the slot of the original content.'\r\n    }}\r\n  </p>\r\n\r\n  <div class=\"options-box\">\r\n    <mat-form-field class=\"options-box__field\" appearance=\"standard\" color=\"accent\">\r\n      <mat-label>Choose item</mat-label>\r\n      <input matInput [matAutocomplete]=\"auto\" [ngModel]=\"data.filterText\" (ngModelChange)=\"setFilter($event)\">\r\n      <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"select($event)\">\r\n        <cdk-virtual-scroll-viewport itemSize=\"48\" minBufferPx=\"500\" maxBufferPx=\"1000\"\r\n          [style.height.px]=\"data.filteredOptions.length < 6 ? data.filteredOptions.length * 48 : 240\">\r\n          <mat-option *cdkVirtualFor=\"let option of data.filteredOptions\" [value]=\"option\">{{ option }}</mat-option>\r\n        </cdk-virtual-scroll-viewport>\r\n      </mat-autocomplete>\r\n    </mat-form-field>\r\n    <button mat-icon-button class=\"options-box__copy\" tippy=\"Copy\" [disabled]=\"!data.isMatch\" (click)=\"copySelected()\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!data.isMatch\" (click)=\"save()\">Save</button>\r\n  </div>\r\n</ng-container>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { ContentGroupAdd } from '../manage-content-list/models/content-group.model';\r\nimport { ContentGroupService } from '../manage-content-list/services/content-group.service';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ReplaceOption } from './models/replace-option.model';\r\nimport { ReplaceContentTemplateVars } from './replace-content.models';\r\n\r\n@Component({\r\n  selector: 'app-replace-content',\r\n  templateUrl: './replace-content.component.html',\r\n  styleUrls: ['./replace-content.component.scss'],\r\n})\r\nexport class ReplaceContentComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  templateVars$: Observable<ReplaceContentTemplateVars>;\r\n\r\n  private guid: string;\r\n  private part: string;\r\n  private index: number;\r\n  private add: boolean;\r\n  private filterText$: BehaviorSubject<string>;\r\n  private options$: BehaviorSubject<ReplaceOption[]>;\r\n  private contentTypeName: string;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ReplaceContentComponent>,\r\n    private contentGroupService: ContentGroupService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.guid = this.route.snapshot.paramMap.get('guid');\r\n    this.part = this.route.snapshot.paramMap.get('part');\r\n    this.index = parseInt(this.route.snapshot.paramMap.get('index'), 10);\r\n    this.add = !!this.route.snapshot.queryParamMap.get('add');\r\n\r\n    this.subscription = new Subscription();\r\n    this.filterText$ = new BehaviorSubject('');\r\n    this.options$ = new BehaviorSubject([]);\r\n\r\n    const filteredOptions$ = combineLatest([this.filterText$, this.options$]).pipe(\r\n      map(([filterText, options]) =>\r\n        options.filter(option => option.label.toLocaleLowerCase().includes(filterText.toLocaleLowerCase())).map(option => option.label)\r\n      ),\r\n    );\r\n    this.templateVars$ = combineLatest([this.filterText$, filteredOptions$]).pipe(\r\n      map(([filterText, filteredOptions]) => {\r\n        const templateVars: ReplaceContentTemplateVars = {\r\n          filterText,\r\n          filteredOptions,\r\n          isAddMode: this.add,\r\n          isMatch: filteredOptions.includes(filterText),\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n\r\n    this.fetchConfig(false, null);\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.filterText$.complete();\r\n    this.options$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  setFilter(filterText: string) {\r\n    this.filterText$.next(filterText);\r\n  }\r\n\r\n  select(event: MatAutocompleteSelectedEvent) {\r\n    this.filterText$.next(event.option.value);\r\n  }\r\n\r\n  copySelected() {\r\n    const contentGroup = this.buildContentGroup();\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeName, DuplicateEntity: contentGroup.id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    const contentGroup = this.buildContentGroup();\r\n    this.contentGroupService.saveItem(contentGroup).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  private fetchConfig(isRefresh: boolean, cloneId: number) {\r\n    const contentGroup = this.buildContentGroup();\r\n    this.contentGroupService.getItems(contentGroup).subscribe(replaceConfig => {\r\n      const options = Object.entries(replaceConfig.Items).map(([itemId, itemName]) => {\r\n        const option: ReplaceOption = {\r\n          id: parseInt(itemId, 10),\r\n          label: `${itemName} (${itemId})`,\r\n        };\r\n        return option;\r\n      });\r\n      this.options$.next(options);\r\n\r\n      // don't set selected option if dialog should be in add-mode and don't change selected option on refresh unless it's cloneId\r\n      if ((!contentGroup.add && !isRefresh) || cloneId != null) {\r\n        const newId = !isRefresh ? replaceConfig.SelectedId : cloneId;\r\n        const newFilter = this.options$.value.find(option => option.id === newId)?.label || '';\r\n        this.filterText$.next(newFilter);\r\n      }\r\n      this.contentTypeName = replaceConfig.ContentTypeName;\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        const navigation = this.router.getCurrentNavigation();\r\n        const editResult = navigation.extras?.state;\r\n        const cloneId: number = editResult?.[Object.keys(editResult)[0]];\r\n        this.fetchConfig(true, cloneId);\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildContentGroup() {\r\n    const id = this.options$.value.find(option => option.label === this.filterText$.value)?.id ?? null;\r\n\r\n    const contentGroup: ContentGroupAdd = {\r\n      id,\r\n      guid: this.guid,\r\n      part: this.part,\r\n      index: this.index,\r\n      add: this.add,\r\n    };\r\n    return contentGroup;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}