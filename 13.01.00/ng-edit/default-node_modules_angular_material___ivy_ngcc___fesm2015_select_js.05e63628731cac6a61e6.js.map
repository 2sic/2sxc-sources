{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js"],"names":["_c0","_c1","MatSelect_span_4_Template","rf","ctx","ctx_r2","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","MatSelect_span_5_Template","ctx_r3","customTrigger","MatSelect_ng_template_8_Template","_r9","$event","_panelDoneAnimatingStream","next","toState","_handleKeydown","ctx_r4","undefined","_getPanelTheme","_transformOrigin","_triggerFontSize","panelClass","multiple","id","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","overlay","scrollStrategies","reposition","MatSelectChange","source","value","this","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","t","ɵdir","type","selectors","features","useExisting","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","_focused","controlType","_required","_multiple","_disableOptionCentering","disableOptionCentering","optionSelectionChanges","options","changes","pipe","map","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","_placeholder","stateChanges","fn","_selectionModel","_initializeSelection","_value","newValue","Array","isArray","_setSelectionByValue","_id","subscribe","_panelDoneAnimating","panelOpen","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","updateErrorState","_keyManager","withTypeAhead","complete","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","isDisabled","disabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","setInactiveStyles","clear","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","labelId","getLabelId","ariaLabelledby","isOpen","ids","_ariaDescribedby","viewQuery","_t","trigger","first","inputs","required","compareWith","errorStateMatcher","outputs","MatSelect","arguments","_scrollTop","_offsetY","_positions","originX","originY","overlayX","overlayY","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","style","index","labelCount","optionGroups","scrollTop","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","height","maxOptionsDisplayed","floor","_getItemCount","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","selectedOptionOffset","items","panelHeight","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","ɵMatSelect_BaseFactory","ɵcmp","contentQueries","dirIndex","hostAttrs","hostVars","hostBindings","_onFocus","_onBlur","toString","errorState","_getAriaActiveDescendant","disableRipple","exportAs","ngContentSelectors","decls","vars","consts","template","toggle","_onAttached","_r0","directives","styles","encapsulation","data","animation","changeDetection","MatSelectModule","ɵmod","ɵinj","providers","imports"],"mappings":"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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_select_js.05e63628731cac6a61e6.js","sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/cdk/overlay';\nimport * as ɵngcc8 from '@angular/common';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\n            }]\n    }], null, null); })();\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._required = false;\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = (labelId ? labelId + ' ' : '');\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) { return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\n_MatSelectBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatSelectBase, viewQuery: function _MatSelectBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatSelectBase.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\n_MatSelectBase.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    _overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    panelClass: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], _overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], panelClass: [{\n            type: Input\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize =\n                parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize && this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset =\n                Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = /*@__PURE__*/ function () { let ɵMatSelect_BaseFactory; return function MatSelect_Factory(t) { return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect); }; }();\nMatSelect.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"], hostVars: 20, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 9, vars: 12, consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgSwitchDefault, ɵngcc8.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.propDecorators = {\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'combobox',\n                    'aria-autocomplete': 'none',\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                    // value. At some point we should try to switch it back to being `listbox`.\n                    'aria-haspopup': 'true',\n                    'class': 'mat-select',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                    '[attr.aria-expanded]': 'panelOpen',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    '[class.mat-select-multiple]': 'multiple',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"]\n            }]\n    }], null, { options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MAT_SELECT_TRIGGER]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\nMatSelectModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n\n//# sourceMappingURL=select.js.map"],"sourceRoot":"webpack:///"}