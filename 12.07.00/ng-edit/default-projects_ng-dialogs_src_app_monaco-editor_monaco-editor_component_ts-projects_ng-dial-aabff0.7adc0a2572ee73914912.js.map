{"version":3,"sources":["./projects/ng-dialogs/src/app/monaco-editor/monaco-instance.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.component.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.component.html","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.module.ts","./projects/ng-dialogs/src/app/shared/constants/file-names.constants.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts","./projects/ng-dialogs/src/app/shared/translation/translate-configuration.ts","./projects/ng-dialogs/src/app/shared/translation/translate-loader-with-error-handling.ts"],"names":["monaco","filename","value","container","options","snippets","this","defineThemes","cachedValue","editorInstance","createInstance","completionItemProviders","addSnippets","resizeObserver","createResizeObserver","addEvents","destroy","disconnect","forEach","completionItemProvider","dispose","getModel","updateValue","setValue","focus","onValueChange","callback","valueChangedCallback","onFocus","focusedCallback","onBlur","blurredCallback","insertSnippet","snippet","getContribution","insert","setJsonSchema","jsonSchema","uri","toString","jsonDiagnostics","languages","json","jsonDefaults","diagnosticsOptions","enableSchemaRequest","exists","schemas","some","schema","fileMatch","type","JSON","parse","map","filter","setDiagnosticsOptions","_themesAreDefined","editor","defineTheme","base","inherit","rules","token","foreground","create","editorModelUri","Uri","file","editorModel","createModel","undefined","setModel","_snippetsAreAdded","push","registerCompletionItemProvider","getModeId","triggerCharacters","provideCompletionItems","model","position","textUntilPosition","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","length","suggestions","tagStartIndex","lastIndexOf","codeInTag","substring","quotes","Array","from","c","startsWith","indexOf","tagEndIndex","tag","test","label","kind","CompletionItemKind","Snippet","insertText","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","range","word","getWordUntilPosition","content","name","documentation","title","help","links","ResizeObserver","layout","observe","onDidChangeContent","newValue","getValue","onDidFocusEditorWidget","onDidBlurEditorWidget","autoFocus","valueChanged","focused","blurred","ngAfterViewInit","window","require","config","paths","vs","monacoInstance","MonacoInstance","editorRef","nativeElement","emit","ngOnChanges","changes","ngOnDestroy","MonacoEditorComponent","MonacoEditorModule","defaultControllerName","defaultTemplateName","defaultTokenName","onClick","event","stopPropagation","ClickStopPropagationDirective","globalConfigService","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","ToggleDebugDirective","sanitizer","transform","html","bypassSecurityTrustHtml","SafeHtmlPipe","buildTranslateConfiguration","factory","loader","provide","useFactory","deps","defaultLanguage","isolate","http","prefix","suffix","getTranslation","lang","get","pipe","error","console","warn","of"],"mappings":"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","file":"default-projects_ng-dialogs_src_app_monaco-editor_monaco-editor_component_ts-projects_ng-dial-aabff0.7adc0a2572ee73914912.js","sourcesContent":["import { JsonSchema, MonacoType } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\n\r\nexport class MonacoInstance {\r\n  /** Editor instance configuration */\r\n  private editorInstance: MonacoType;\r\n  private completionItemProviders: MonacoType[];\r\n  private resizeObserver: ResizeObserver;\r\n  private cachedValue: string;\r\n  private valueChangedCallback?: (value: string) => void;\r\n  private focusedCallback?: () => void;\r\n  private blurredCallback?: () => void;\r\n\r\n  constructor(\r\n    /** Global Monaco configuration */\r\n    private monaco: MonacoType,\r\n    filename: string,\r\n    value: string,\r\n    container: HTMLElement,\r\n    options: MonacoType,\r\n    snippets: Snippet[],\r\n  ) {\r\n    this.defineThemes(this.monaco);\r\n    this.cachedValue = value;\r\n    this.editorInstance = this.createInstance(this.monaco, filename, value, container, options);\r\n    this.completionItemProviders = this.addSnippets(this.monaco, this.editorInstance, snippets);\r\n    this.resizeObserver = this.createResizeObserver(container, this.editorInstance);\r\n    this.addEvents(this.editorInstance);\r\n  }\r\n\r\n  destroy(): void {\r\n    this.resizeObserver.disconnect();\r\n    this.completionItemProviders.forEach(completionItemProvider => {\r\n      completionItemProvider.dispose();\r\n    });\r\n    this.editorInstance.getModel().dispose();\r\n    this.editorInstance.dispose();\r\n  }\r\n\r\n  updateValue(value: string): void {\r\n    if (this.cachedValue === value) { return; }\r\n    this.cachedValue = value;\r\n    this.editorInstance.getModel().setValue(value);\r\n  }\r\n\r\n  focus(): void {\r\n    this.editorInstance.focus();\r\n  }\r\n\r\n  onValueChange(callback: (value: string) => void): void {\r\n    this.valueChangedCallback = callback;\r\n  }\r\n\r\n  onFocus(callback: () => void): void {\r\n    this.focusedCallback = callback;\r\n  }\r\n\r\n  onBlur(callback: () => void): void {\r\n    this.blurredCallback = callback;\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    const snippetController = this.editorInstance.getContribution('snippetController2');\r\n    snippetController.insert(snippet);\r\n  }\r\n\r\n  setJsonSchema(jsonSchema: JsonSchema): void {\r\n    const uri = this.editorInstance.getModel().uri.toString();\r\n    const jsonDiagnostics = {\r\n      ...this.monaco.languages.json.jsonDefaults.diagnosticsOptions,\r\n      enableSchemaRequest: true,\r\n    };\r\n    const exists = jsonDiagnostics.schemas.some((schema: MonacoType) => schema.fileMatch[0] === uri);\r\n\r\n    if (jsonSchema?.value) {\r\n      const newSchema = jsonSchema.type === 'link'\r\n        ? { uri: jsonSchema.value, fileMatch: [uri] }\r\n        : { uri, fileMatch: [uri], schema: JSON.parse(jsonSchema.value) };\r\n\r\n      jsonDiagnostics.schemas = exists\r\n        ? jsonDiagnostics.schemas.map((schema: MonacoType) => schema.fileMatch[0] === uri ? newSchema : schema)\r\n        : [...jsonDiagnostics.schemas, newSchema];\r\n    } else {\r\n      if (!exists) { return; }\r\n      jsonDiagnostics.schemas = jsonDiagnostics.schemas.filter((schema: MonacoType) => schema.fileMatch[0] !== uri);\r\n    }\r\n\r\n    this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions(jsonDiagnostics);\r\n  }\r\n\r\n  /** Registers our themes. Themes are global. Run before creating editor */\r\n  private defineThemes(monaco: MonacoType): void {\r\n    // there is currently no official way to get defined themes from Monaco to check if some theme was already defined\r\n    if (monaco._themesAreDefined) { return; }\r\n    monaco._themesAreDefined = true;\r\n\r\n    monaco.editor.defineTheme('2sxc-dark', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'metatag.cs', foreground: 'ffff00' },\r\n      ],\r\n    });\r\n  }\r\n\r\n  private createInstance(monaco: MonacoType, filename: string, value: string, container: HTMLElement, options: MonacoType): MonacoType {\r\n    // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandaloneeditorconstructionoptions.html\r\n    const editorInstance = monaco.editor.create(container, options);\r\n    // editorInstance.updateOptions({ readOnly: true })\r\n    const editorModelUri = monaco.Uri.file(filename);\r\n    const editorModel = monaco.editor.createModel(value, undefined, editorModelUri);\r\n    editorInstance.setModel(editorModel);\r\n    // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.itextmodelupdateoptions.html\r\n    // editorInstance.getModel().updateOptions({ tabSize: 2 });\r\n    return editorInstance;\r\n  }\r\n\r\n  private addSnippets(monaco: MonacoType, editorInstance: MonacoType, snippets: Snippet[]): MonacoType[] {\r\n    // TODO: snippets are only defined once and for one language. Make sure snippetsAreAdded check includes file type\r\n    // predefined snippets should always be added, like the one for closing html tags\r\n    // and custom snippets should be read from monacoInstance where change occured to enable instance specific snippets\r\n    // and updates on those snippets. Only custom snippets should be destroyed with the instance\r\n    if (monaco._snippetsAreAdded) { return []; }\r\n    monaco._snippetsAreAdded = true;\r\n\r\n    const completionItemProviders = [];\r\n    completionItemProviders.push(\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getModeId(), {\r\n        triggerCharacters: ['>'],\r\n        provideCompletionItems: (model: any, position: any) => {\r\n          const textUntilPosition: string = model.getValueInRange({\r\n            startLineNumber: position.lineNumber,\r\n            startColumn: 1,\r\n            endLineNumber: position.lineNumber,\r\n            endColumn: position.column,\r\n          });\r\n\r\n          // sometimes trigger character is wrong\r\n          const trigger = textUntilPosition[textUntilPosition.length - 1];\r\n          if (trigger !== '>') { return { suggestions: [] }; }\r\n\r\n          const tagStartIndex = textUntilPosition.lastIndexOf('<');\r\n          if (tagStartIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const codeInTag = textUntilPosition.substring(tagStartIndex);\r\n          // check that > is not in between quotes like in <div class=\"car>\"\r\n          let quotes = 0;\r\n          Array.from(codeInTag).forEach(c => {\r\n            if (c === '\"') { quotes++; }\r\n          });\r\n          if (quotes % 2 !== 0) { return { suggestions: [] }; }\r\n          // check that it's not a closing tag\r\n          if (codeInTag.startsWith('</')) { return { suggestions: [] }; }\r\n          // check that tag is not already closed\r\n          if (codeInTag.indexOf('>') !== codeInTag.length - 1) { return { suggestions: [] }; }\r\n\r\n          // tag name ends with space or tag is closed completely\r\n          let tagEndIndex = codeInTag.indexOf(' ');\r\n          if (tagEndIndex === -1) {\r\n            tagEndIndex = codeInTag.indexOf('>');\r\n          }\r\n          if (tagEndIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const tag = codeInTag.substring(1, tagEndIndex);\r\n          if (!tag) { return { suggestions: [] }; }\r\n          if (!/[a-zA-Z0-9_-]/.test(tag)) { return { suggestions: [] }; }\r\n\r\n          const suggestions = [{\r\n            label: `</${tag}>`,\r\n            kind: monaco.languages.CompletionItemKind.Snippet,\r\n            insertText: `\\$0</${tag}>`,\r\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n            range: {\r\n              startLineNumber: position.lineNumber,\r\n              endLineNumber: position.lineNumber,\r\n              startColumn: position.column,\r\n              endColumn: position.column,\r\n            },\r\n          }];\r\n          return { suggestions };\r\n        },\r\n      }),\r\n    );\r\n\r\n    if (snippets) {\r\n      completionItemProviders.push(\r\n        monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getModeId(), {\r\n          provideCompletionItems: (model: any, position: any) => {\r\n            const word = model.getWordUntilPosition(position);\r\n            const range = {\r\n              startLineNumber: position.lineNumber,\r\n              endLineNumber: position.lineNumber,\r\n              startColumn: word.startColumn,\r\n              endColumn: word.endColumn\r\n            };\r\n            // kind and rule copied from:\r\n            // https://microsoft.github.io/monaco-editor/playground.html#extending-language-services-completion-provider-example\r\n            const suggestions = snippets.map(snippet => {\r\n              if (!snippet.content) { return; }\r\n              return {\r\n                label: snippet.name,\r\n                kind: monaco.languages.CompletionItemKind.Snippet,\r\n                documentation: `${snippet.title ?? ''}\\n${snippet.help ?? ''}\\n${snippet.links ?? ''}`,\r\n                insertText: snippet.content,\r\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n                range,\r\n              };\r\n            }).filter(snippet => !!snippet);\r\n            return { suggestions };\r\n          },\r\n        }),\r\n      );\r\n    }\r\n\r\n    return completionItemProviders;\r\n  }\r\n\r\n  private createResizeObserver(container: HTMLElement, editorInstance: MonacoType): ResizeObserver {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      editorInstance.layout();\r\n    });\r\n    resizeObserver.observe(container);\r\n    return resizeObserver;\r\n  }\r\n\r\n  private addEvents(editorInstance: MonacoType): void {\r\n    editorInstance.getModel().onDidChangeContent(() => {\r\n      const newValue = editorInstance.getModel().getValue();\r\n      if (newValue === this.cachedValue) { return; }\r\n      this.cachedValue = newValue;\r\n      this.valueChangedCallback?.(newValue);\r\n    });\r\n\r\n    editorInstance.onDidFocusEditorWidget(() => {\r\n      this.focusedCallback?.();\r\n    });\r\n\r\n    editorInstance.onDidBlurEditorWidget(() => {\r\n      this.blurredCallback?.();\r\n    });\r\n\r\n    // this.editorInstance.onDidChangeModelDecorations((e: any) => {\r\n    //   const value = this.editorInstance.getModel().getValue();\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter((marker: any) => marker.resource.path === `/${this.filename}`);\r\n    //   const valid = !markers.some(\r\n    //     (marker: any) => marker.severity === this.monaco.MarkerSeverity.Error || marker.severity === this.monaco.MarkerSeverity.Warning\r\n    //   );\r\n    // });\r\n\r\n    // this.monaco.editor.onDidChangeMarkers(() => {\r\n    //   // markers updates are async and lagging behind value updates\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter((marker: any) => marker.resource.path === `/${this.filename}`);\r\n    //   if (markers.some((marker: any) => marker.severity === this.monaco.MarkerSeverity.Error)) {\r\n    //     // has errors\r\n    //   } else if (markers.some((marker: any) => marker.severity === this.monaco.MarkerSeverity.Warning)) {\r\n    //     // has warnings\r\n    //   } else {\r\n    //     // has no errors or warnings\r\n    //   }\r\n    // });\r\n  }\r\n}\r\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { JsonSchema } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { MonacoInstance } from './monaco-instance';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-monaco-editor',\r\n  templateUrl: './monaco-editor.component.html',\r\n  styleUrls: ['./monaco-editor.component.scss'],\r\n})\r\nexport class MonacoEditorComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') private editorRef: ElementRef<HTMLElement>;\r\n  @Input() filename: string;\r\n  @Input() value: string;\r\n  @Input() snippets: Snippet[];\r\n  @Input() options?: Record<string, any>;\r\n  @Input() jsonSchema?: JsonSchema;\r\n  @Input() autoFocus = false;\r\n  @Output() private valueChanged = new EventEmitter<string>();\r\n  @Output() private focused = new EventEmitter<undefined>();\r\n  @Output() private blurred = new EventEmitter<undefined>();\r\n\r\n  private monacoInstance?: MonacoInstance;\r\n\r\n  constructor() { }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.require.config({\r\n      paths: {\r\n        vs: ['https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.25.2/min/vs'],\r\n      },\r\n    });\r\n\r\n    window.require(['vs/editor/editor.main'], (monaco: any) => {\r\n      this.monacoInstance = new MonacoInstance(\r\n        monaco, this.filename, this.value, this.editorRef.nativeElement, this.options, this.snippets,\r\n      );\r\n\r\n      if (this.jsonSchema) {\r\n        this.monacoInstance.setJsonSchema(this.jsonSchema);\r\n      }\r\n\r\n      this.monacoInstance.onValueChange(value => {\r\n        this.valueChanged.emit(value);\r\n      });\r\n\r\n      this.monacoInstance.onFocus(() => {\r\n        this.focused.emit();\r\n      });\r\n\r\n      this.monacoInstance.onBlur(() => {\r\n        this.blurred.emit();\r\n      });\r\n\r\n      if (this.autoFocus) {\r\n        this.monacoInstance.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.value != null) {\r\n      this.monacoInstance?.updateValue(this.value);\r\n    }\r\n    if (changes.jsonSchema != null) {\r\n      this.monacoInstance?.setJsonSchema(this.jsonSchema);\r\n    }\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.monacoInstance?.insertSnippet(snippet);\r\n    this.monacoInstance?.focus();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monacoInstance?.destroy();\r\n  }\r\n}\r\n","<div class=\"editor\" #editor></div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MonacoEditorComponent } from './monaco-editor.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    MonacoEditorComponent,\r\n  ],\r\n  exports: [\r\n    MonacoEditorComponent,\r\n  ],\r\n})\r\nexport class MonacoEditorModule { }\r\n","export const defaultControllerName = 'MyController.cs';\r\nexport const defaultTemplateName = '_MyFile.cshtml';\r\nexport const defaultTokenName = 'MyFile.html';\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}