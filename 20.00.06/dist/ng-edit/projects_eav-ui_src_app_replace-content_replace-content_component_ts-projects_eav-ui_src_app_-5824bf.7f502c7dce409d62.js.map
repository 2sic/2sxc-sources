{"version":3,"file":"projects_eav-ui_src_app_replace-content_replace-content_component_ts-projects_eav-ui_src_app_-5824bf.7f502c7dce409d62.js","mappings":"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","names":["i0","option_r2","label","ReplaceContentComponent","#contentGroupSvc","#dialogRoutes","constructor","dialog","snackBar","this","hostClass","transient","ContentGroupService","DialogRoutingService","#params","convert","getParams","p","guid","part","index","parseInt","isAddMode","signalObj","getQueryParam","filterText","model","#optionsRaw","options","computedObj","filter","toLocaleLowerCase","o","includes","canSave","map","#contentTypeName","ngOnInit","#watchKeyboardShortcuts","#fetchConfig","doOnDialogClosed","editResult","router","getCurrentNavigation","extras","state","cloneId","Object","keys","closeDialog","close","select","event","set","option","value","copySelected","contentGroup","#buildContentGroup","form","items","EditPrep","copy","id","formUrl","convertFormToUrl","navRelative","isRefresh","getItemsPromise","then","replaceConfig","entries","Items","itemId","itemName","add","newId","SelectedId","newFilter","find","ContentTypeName","saveAndClose","open","saveItem","subscribe","duration","keydownEvents","isCtrlEnter","preventDefault","static","__ngFactoryType__","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_4__","VBU","selectors","hostVars","hostBindings","rf","ctx","_r1","$event","ReplaceContentComponent_mat_option_19_Template","auto_r3","length","RouterOutlet","MatFormFieldModule","i3","MatInputModule","i4","MatAutocompleteModule","i5","i6","FormsModule","i7","CdkVirtualScrollViewport","CdkFixedSizeVirtualScroll","CdkVirtualForOf","MatOptionModule","MatButtonModule","i8","MatIconModule","i9","MatDialogActions","TippyDirective","SaveCloseButtonFabComponent","styles","ServiceBase","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__","jDH","factory","ɵfac","obj","fn","getWith","ExtendedFabSpeedDialActionDirective","elementRef","disabled","input","ngOnChanges","changes","nativeElement","toggleAttribute","FsC","inputs","features","SaveCloseButtonBase","triggerOnFormSubmit","icon","ngClass","action","output","isDisabled","onClick","emit","outputs","ExtendedFabSpeedDialTriggerContentDirective","templateRef","_angular_core__WEBPACK_IMPORTED_MODULE_0__","ExtendedFabSpeedDialActionsContentDirective","isEscape","key","isCtrlS","ctrlKey","metaKey","BaseComponent","decls","vars","template","encapsulation","logSpecs","route","super","log","classLog","snapshot","url","urlSegments","split","getParam","paramMap","get","reduce","acc","queryParamMap","getQueryParams","callback","l","fnIf","childDialogClosed$","data","a","end","doOnDialogClosedWithData","#childDialogClosedWithData","urlSubRoute","params","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","commands","events","pipe","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","tap","snapShot","prev","curr","_angular_core__WEBPACK_IMPORTED_MODULE_8__","ExtendedFabSpeedDialTriggerDirective","ExtendedFabSpeedDialComponent","open$","BehaviorSubject","ngAfterContentInit","combineLatest","distinctUntilChanged","actionButtons","undefined","forEach","btn","i","all","max","Math","min","step","transitionDuration","style","complete","setOpen","pointerType","next","_angular_core__WEBPACK_IMPORTED_MODULE_6__","contentQueries","dirIndex","ElementRef","trigger","actions","NgTemplateOutlet"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/replace-content/replace-content.component.html","./projects/eav-ui/src/app/replace-content/replace-content.component.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./projects/core/object-utilities.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial-action.directive.ts","./projects/eav-ui/src/app/shared/modules/save-close-button/save-close-button-base.directive.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial-trigger-content.directive.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial-actions-content.directive.ts","./projects/eav-ui/src/app/edit/dialog/main/keyboard-shortcuts.ts","./projects/eav-ui/src/app/shared/components/base.component.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial-trigger.directive.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial.component.ts","./projects/eav-ui/src/app/shared/modules/extended-fab-speed-dial/extended-fab-speed-dial.component.html"],"sourcesContent":["<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ isAddMode() ? 'Add Existing Item' : 'Replace Content Item' }}\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <router-outlet></router-outlet>\r\n    <p>{{isAddMode()\r\n      ? 'Select a content-item to add to this list.'\r\n      : 'By replacing a content-item you can make other content appear in the slot of the original content.'}}\r\n    </p>\r\n    <div class=\"eav-options-box\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n        <mat-label>Choose item</mat-label>\r\n        <!-- Search field -->\r\n        <input matInput [matAutocomplete]=\"auto\" [(ngModel)]=\"filterText\"> \r\n        <!-- Auto-Complete list based on search -->\r\n        <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"select($event)\"\r\n          [hideSingleSelectionIndicator]=\"true\">\r\n          <cdk-virtual-scroll-viewport itemSize=\"48\" minBufferPx=\"500\" maxBufferPx=\"1000\"\r\n            [style.height.px]=\"options().length < 6 ? options().length * 48 : 240\"\r\n          >\r\n            <mat-option *cdkVirtualFor=\"let option of options()\" [value]=\"option.label\">{{ option.label }}</mat-option>\r\n          </cdk-virtual-scroll-viewport>\r\n        </mat-autocomplete>\r\n      </mat-form-field>\r\n      <!-- Copy Button -->\r\n      <button\r\n        mat-icon-button\r\n        tippy=\"Create a Copy\"\r\n        tippyPlacement=\"top\"\r\n        [disabled]=\"!canSave()\"\r\n        (click)=\"copySelected()\"\r\n      >\r\n        <mat-icon>file_copy</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <!-- Close / Save -->\r\n  <mat-dialog-actions align=\"end\">\r\n    <app-save-close-button-fab\r\n      [ngClass]=\"!canSave() ? 'disabled' : ''\"\r\n      [disabled]=\"!canSave()\"\r\n      (action)=\"saveAndClose()\"\r\n    />\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\nimport { Component, HostBinding, model, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatAutocompleteModule, MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { convert, transient } from '../../../../core';\r\nimport { isCtrlEnter } from '../edit/dialog/main/keyboard-shortcuts';\r\nimport { ContentGroupAdd } from '../manage-content-list/models/content-group.model';\r\nimport { ContentGroupService } from '../manage-content-list/services/content-group.service';\r\nimport { TippyDirective } from '../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { SaveCloseButtonFabComponent } from '../shared/modules/save-close-button-fab/save-close-button-fab.component';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { computedObj, signalObj } from '../shared/signals/signal.utilities';\r\n\r\ninterface ReplaceOption {\r\n  id: number;\r\n  label: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-replace-content',\r\n    templateUrl: './replace-content.component.html',\r\n    styleUrls: ['./replace-content.component.scss'],\r\n    imports: [\r\n        RouterOutlet,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatAutocompleteModule,\r\n        FormsModule,\r\n        CdkVirtualScrollViewport,\r\n        CdkFixedSizeVirtualScroll,\r\n        CdkVirtualForOf,\r\n        MatOptionModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatDialogActions,\r\n        TippyDirective,\r\n        SaveCloseButtonFabComponent,\r\n    ]\r\n})\r\nexport class ReplaceContentComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  #contentGroupSvc = transient(ContentGroupService);\r\n  #dialogRoutes = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ReplaceContentComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  #params = convert(this.#dialogRoutes.getParams(['guid', 'part', 'index']), p => ({\r\n    guid: p.guid,\r\n    part: p.part,\r\n    index: parseInt(p.index, 10),\r\n  }));\r\n\r\n  #contentTypeName: string;\r\n  \r\n  /** Mode is adding the to-be-selected item, not replace */\r\n  protected isAddMode = signalObj('isAddMode', !!this.#dialogRoutes.getQueryParam('add'));\r\n\r\n  /** The text being searched for */\r\n  filterText = model<string>('');\r\n\r\n  /** The options which could be used */\r\n  #optionsRaw = signalObj<ReplaceOption[]>('options', []);\r\n\r\n  /** The options after filtering */\r\n  options = computedObj<ReplaceOption[]>('filteredOptions', () => {\r\n    const filter = this.filterText().toLocaleLowerCase();\r\n    return this.#optionsRaw()\r\n      .filter(o => o.label.toLocaleLowerCase().includes(filter));\r\n  });\r\n\r\n  /** The system has a selected item, when the text exactly matches the label of an option */\r\n  canSave = computedObj<boolean>('isMatch', () => this.options().map(o => o.label).includes(this.filterText()));\r\n\r\n  ngOnInit() {\r\n    this.#watchKeyboardShortcuts();\r\n\r\n    this.#fetchConfig(false, null);\r\n\r\n    this.#dialogRoutes.doOnDialogClosed(() => {\r\n      const navigation = this.#dialogRoutes.router.getCurrentNavigation();\r\n      const editResult = navigation.extras?.state;\r\n      const cloneId: number = editResult?.[Object.keys(editResult)[0]];\r\n      this.#fetchConfig(true, cloneId);\r\n    });\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  select(event: MatAutocompleteSelectedEvent) {\r\n    this.filterText.set(event.option.value);\r\n  }\r\n\r\n  copySelected() {\r\n    const contentGroup = this.#buildContentGroup();\r\n    const form: EditForm = {\r\n      items: [EditPrep.copy(this.#contentTypeName, contentGroup.id)],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRoutes.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #fetchConfig(isRefresh: boolean, cloneId: number) {\r\n    const contentGroup = this.#buildContentGroup();\r\n    this.#contentGroupSvc.getItemsPromise(contentGroup).then(replaceConfig => {\r\n      const options = Object.entries(replaceConfig.Items)\r\n        .map(([itemId, itemName]) => ({\r\n          id: parseInt(itemId, 10),\r\n          label: `${itemName} (${itemId})`,\r\n        } satisfies ReplaceOption));\r\n      this.#optionsRaw.set(options);\r\n\r\n      // don't set selected option if dialog should be in add-mode and don't change selected option on refresh unless it's cloneId\r\n      if ((!contentGroup.add && !isRefresh) || cloneId != null) {\r\n        const newId = !isRefresh ? replaceConfig.SelectedId : cloneId;\r\n        const newFilter = this.#optionsRaw().find(o => o.id === newId)?.label || '';\r\n        this.filterText.set(newFilter);\r\n      }\r\n      this.#contentTypeName = replaceConfig.ContentTypeName;\r\n    });\r\n  }\r\n\r\n  #buildContentGroup() {\r\n    const filter = this.filterText();\r\n    const id = this.#optionsRaw().find(o => o.label === filter)?.id ?? null;\r\n\r\n    const contentGroup: ContentGroupAdd = {\r\n      id,\r\n      ...this.#params,\r\n      add: this.isAddMode(),\r\n    };\r\n    return contentGroup;\r\n  }\r\n  \r\n  saveAndClose() {\r\n    this.snackBar.open('Saving...');\r\n    const contentGroup = this.#buildContentGroup();\r\n    this.#contentGroupSvc.saveItem(contentGroup).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n  }\r\n  \r\n  #watchKeyboardShortcuts(): void {\r\n    this.dialog.keydownEvents().subscribe(event => {\r\n      if (isCtrlEnter(event) && this.canSave()) {\r\n        event.preventDefault();\r\n        this.saveAndClose();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","\r\n/**\r\n * Conversion function to change something to something else, a bit like 'map' but for a single item.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `getWith` function, but has a different name to indicate the usage.\r\n */\r\nexport function convert<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n/**\r\n * Function to do something with an object and return the result.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `convert` function, but has a different name to indicate the usage.\r\n */\r\nexport function getWith<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n","import { Directive, ElementRef, input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n  selector: '[extended-fab-speed-dial-action]',\r\n})\r\nexport class ExtendedFabSpeedDialActionDirective implements OnChanges {\r\n  disabled = input<boolean>(false);\r\n\r\n  constructor(private elementRef: ElementRef<HTMLElement>) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.disabled != null) {\r\n      this.elementRef.nativeElement.toggleAttribute('disabled', this.disabled());\r\n    }\r\n  }\r\n}\r\n","import { Directive, input, output } from '@angular/core';\r\n\r\n// 2pp: needs to be a directive in order to make input, output functions work\r\n@Directive()\r\nexport abstract class SaveCloseButtonBase {\r\n  /** Button label, can be a translation key or plain text */\r\n  label = input<string>('Form.Buttons.SaveAndClose');\r\n\r\n  triggerOnFormSubmit = input<boolean>(false);\r\n\r\n  /** Material icon name to show */\r\n  icon = input<string>('done');\r\n\r\n  /** Classes to apply to the button */\r\n  ngClass = input<string>('');\r\n\r\n  /** If true, disables the button. Can also be a function returning boolean */\r\n  disabled = input<boolean | (() => boolean)>(false);\r\n\r\n  /** Emits when the button is clicked */\r\n  action = output<Event>();\r\n\r\n  /** Derived property for disabled state */\r\n  get isDisabled(): boolean {\r\n    return typeof this.disabled === 'function' ? !!this.disabled() : !!this.disabled;\r\n  }\r\n\r\n  onClick(event: Event) {\r\n    if (!this.isDisabled) {\r\n      this.action.emit(event);\r\n    }\r\n  }\r\n}","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n  selector: '[extendedFabSpeedDialTriggerContent]',\r\n})\r\nexport class ExtendedFabSpeedDialTriggerContentDirective {\r\n  constructor(public templateRef: TemplateRef<unknown>) { }\r\n}\r\n","import { Directive, TemplateRef } from '@angular/core';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n  selector: '[extendedFabSpeedDialActionsContent]',\r\n})\r\nexport class ExtendedFabSpeedDialActionsContentDirective {\r\n  constructor(public templateRef: TemplateRef<unknown>) { }\r\n}\r\n","/**\r\n * Checks if the keyboard event is triggered by the Escape key.\r\n * @param event KeyboardEvent\r\n * @returns boolean\r\n */\r\nexport function isEscape(event: KeyboardEvent): boolean {\r\n  return event.key === 'Escape';\r\n}\r\n\r\n/**\r\n * Checks if the keyboard event is triggered by Ctrl + S (or Cmd + S on Mac).\r\n * @param event KeyboardEvent\r\n * @returns boolean\r\n */\r\nexport function isCtrlS(event: KeyboardEvent): boolean {\r\n  return (event.key === 's' || event.key === 'S') && (event.ctrlKey || event.metaKey);\r\n}\r\n\r\n/**\r\n * Checks if the keyboard event is triggered by Ctrl + Enter (or Cmd + Enter on Mac).\r\n * @param event KeyboardEvent\r\n * @returns boolean\r\n */\r\nexport function isCtrlEnter(event: KeyboardEvent): boolean {\r\n  return event.key === 'Enter' && (event.ctrlKey || event.metaKey);\r\n}","import { Component, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * A newer base component, without Log being created / requested.\r\n * This is so it's easier to inherit than the BaseComponent,\r\n * which would make typed log with specs harder to implement.\r\n * \r\n * Note that as with time, we wish to get away from these, as we don't want to use many observables any more.\r\n */\r\n@Component({\r\n  selector: 'app-base-component',\r\n  template: '',\r\n})\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseComponent implements OnDestroy {\r\n  \r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe((data: unknown) => {\r\n        l.a('Dialog closed', { data });\r\n        return callback();\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  public doOnDialogClosedWithData(callback: (data: any) => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.#childDialogClosedWithData().subscribe(({ state }) => {\r\n        l.a('Dialog closed', { state });\r\n        callback(state);\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n  #childDialogClosedWithData() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      tap(event => {\r\n        const l = this.log.fn(\"childDialogClosed$\", {\r\n          event,\r\n          firstChild: this.route.snapshot.firstChild,\r\n          snapShot: this.route.snapshot,\r\n          state: this.router.getCurrentNavigation()?.extras.state,\r\n        });\r\n        l.a('NavigationEnd', { event });\r\n        l.end();\r\n      }),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => ({\r\n        hasChildNow: !!this.route.snapshot.firstChild,\r\n        state: this.router.getCurrentNavigation()?.extras.state,\r\n      })),\r\n      pairwise(),\r\n      filter(([prev, curr]) => prev.hasChildNow && !curr.hasChildNow),\r\n      map(([prev, curr]) => ({\r\n        hadChildBefore: prev.hasChildNow,\r\n        hasChildNow: curr.hasChildNow,\r\n        state: curr.state\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { Directive, ElementRef, input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n// tslint:disable-next-line:directive-selector\r\n@Directive({\r\n  selector: '[extended-fab-speed-dial-trigger]',\r\n})\r\nexport class ExtendedFabSpeedDialTriggerDirective implements OnChanges {\r\n  disabled = input<boolean>(false);\r\n\r\n  constructor(private elementRef: ElementRef<HTMLElement>) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.disabled != null) {\r\n      this.elementRef.nativeElement.toggleAttribute('disabled', this.disabled());\r\n    }\r\n  }\r\n}\r\n","// tslint:disable-next-line:max-line-length\r\nimport { NgTemplateOutlet } from '@angular/common';\r\nimport { AfterContentInit, Component, ContentChild, ContentChildren, ElementRef, input, OnDestroy, QueryList, ViewEncapsulation } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, startWith } from 'rxjs';\r\nimport { BaseComponent } from '../../components/base.component';\r\nimport { ExtendedFabSpeedDialActionDirective } from './extended-fab-speed-dial-action.directive';\r\nimport { ExtendedFabSpeedDialActionsContentDirective } from './extended-fab-speed-dial-actions-content.directive';\r\nimport { ExtendedFabSpeedDialTriggerContentDirective } from './extended-fab-speed-dial-trigger-content.directive';\r\n\r\n/**\r\n * Special Speed-Dial kind of FAB which opens more menu items on hover.\r\n *\r\n * IMPORTANT: to work it needs ca. 4 more directives.\r\n * So never import this component directly, but instead import the ExtendedFabSpeedDialImports.\r\n */\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'extended-fab-speed-dial',\r\n    templateUrl: './extended-fab-speed-dial.component.html',\r\n    styleUrls: ['./extended-fab-speed-dial.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    imports: [\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class ExtendedFabSpeedDialComponent extends BaseComponent implements AfterContentInit, OnDestroy {\r\n  @ContentChild(ExtendedFabSpeedDialTriggerContentDirective) trigger: ExtendedFabSpeedDialTriggerContentDirective;\r\n  @ContentChild(ExtendedFabSpeedDialActionsContentDirective) actions: ExtendedFabSpeedDialActionsContentDirective;\r\n  @ContentChildren(ExtendedFabSpeedDialActionDirective, { read: ElementRef }) actionButtons: QueryList<ElementRef<HTMLButtonElement>>;\r\n\r\n  disabled = input<boolean>(false);\r\n\r\n  open$ = new BehaviorSubject(false);\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this.subscriptions.add(\r\n      combineLatest([\r\n        this.open$.pipe(distinctUntilChanged()),\r\n        this.actionButtons.changes.pipe(startWith(undefined)),\r\n      ]).subscribe(([open]) => {\r\n        this.actionButtons.forEach((btn, i, all) => {\r\n          const min = 0.3;\r\n          const max = Math.min(min + (all.length - 1) * 0.05, 0.6);\r\n          const step = (max - min) / (all.length - 1);\r\n          const transitionDuration = `${open ? min + step * i : max - step * i}s`;\r\n          if (btn.nativeElement.style.transitionDuration !== transitionDuration) {\r\n            btn.nativeElement.style.transitionDuration = transitionDuration;\r\n          }\r\n        });\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.open$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  setOpen(event: PointerEvent, open: boolean): void {\r\n    if (event.pointerType === 'touch') return;\r\n    this.open$.next(open);\r\n  }\r\n}\r\n","<div class=\"extended-fab-speed-dial\" [attr.disabled]=\"disabled() || null\" (pointerenter)=\"setOpen($event, true)\"\r\n  (pointerleave)=\"setOpen($event, false)\">\r\n  <div class=\"extended-fab-speed-dial-trigger\">\r\n    <ng-container [ngTemplateOutlet]=\"trigger?.templateRef\"></ng-container>\r\n  </div>\r\n  <div class=\"extended-fab-speed-dial-actions\">\r\n    <ng-container [ngTemplateOutlet]=\"actions?.templateRef\"></ng-container>\r\n  </div>\r\n</div>\r\n"],"x_google_ignoreList":[]}