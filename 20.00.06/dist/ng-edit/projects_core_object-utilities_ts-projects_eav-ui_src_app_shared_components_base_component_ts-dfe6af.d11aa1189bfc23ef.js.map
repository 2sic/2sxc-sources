{"version":3,"file":"projects_core_object-utilities_ts-projects_eav-ui_src_app_shared_components_base_component_ts-dfe6af.d11aa1189bfc23ef.js","mappings":"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","names":["ServiceBase","constructor","this","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","jDH","factory","Éµfac","logSpecs","all","getEntities","getAvailableEntities","delete","webApiEntityRoot","webApiEntityList","EntityService","HttpServiceBaseSignal","log","classLog","queryService","transient","QueryService","getEntities$","params","fnIf","pipe","filter","p","switchMap","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","fields","map","data","Default","appId","contentType","entityId","force","parentId","parentField","parent","http","apiUrl","id","toString","_angular_core__WEBPACK_IMPORTED_MODULE_9__","convert","obj","fn","getWith","BaseComponent","VBU","selectors","decls","vars","template","rf","ctx","encapsulation","context","getFromQuery","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","post","Guids","join","i0","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_2__","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","_angular_core__WEBPACK_IMPORTED_MODULE_0__","EJ8","pure","visualQueryRoutes","path","loadComponent","Promise","__webpack_require__","e","then","bind","m","VisualQueryComponent","children","GoToDevRest","route","EditRoutesNoHistory"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/services/service-base.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/core/object-utilities.ts","./projects/eav-ui/src/app/shared/components/base.component.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts","./projects/eav-ui/src/app/visual-query/visual-query.routing.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBaseSignal } from './http-service-base-signal';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBaseSignal {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","\r\n/**\r\n * Conversion function to change something to something else, a bit like 'map' but for a single item.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `getWith` function, but has a different name to indicate the usage.\r\n */\r\nexport function convert<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n/**\r\n * Function to do something with an object and return the result.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `convert` function, but has a different name to indicate the usage.\r\n */\r\nexport function getWith<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * A newer base component, without Log being created / requested.\r\n * This is so it's easier to inherit than the BaseComponent,\r\n * which would make typed log with specs harder to implement.\r\n * \r\n * Note that as with time, we wish to get away from these, as we don't want to use many observables any more.\r\n */\r\n@Component({\r\n  selector: 'app-base-component',\r\n  template: '',\r\n})\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseComponent implements OnDestroy {\r\n  \r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      { Guids: itemIds} // 2dg Guids must be in the body as an array (API filter & too many IDs for URL parameters).\r\n    );\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safeHtml',\r\n})\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { Routes } from '@angular/router';\r\nimport { GoToDevRest } from '../dev-rest';\r\nimport { EditRoutesNoHistory } from '../edit/edit.routing';\r\n\r\nexport const visualQueryRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    loadComponent: () => import('./visual-query.component').then(m => m.VisualQueryComponent),\r\n    children: [\r\n      GoToDevRest.route,\r\n      ...EditRoutesNoHistory,\r\n    ]\r\n  },\r\n];\r\n\r\n"],"x_google_ignoreList":[]}