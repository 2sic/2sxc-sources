{"version":3,"file":"projects_eav-ui_src_app_import-app_import-app_component_ts-projects_eav-ui_src_app_shared_com-3db8ed.998a1a9a61dd1a92.js","mappings":"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","names":["ErrorStateMatcher","isErrorState","control","form","invalid","touched","submitted","static","__ngFactoryType__","i0","token","factory","ɵfac","providedIn","MatFormFieldModule","type","imports","MatCommonModule","ObserversModule","MatFormField","BaseComponent","constructor","this","subscriptions","Subscription","ngOnDestroy","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__","VBU","selectors","decls","vars","template","rf","ctx","encapsulation","ImportAppComponent","dialogData","uploadType","UploadTypes","App","importAppService","transient","ImportAppService","title","description","allowedFileTypes","upload$","files","name","importApp","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_3__","consts","FileUploadDialogComponent","_ErrorStateTracker","_defaultMatcher","ngControl","_parentFormGroup","_parentForm","_stateChanges","errorState","matcher","updateErrorState","oldState","parent","newState","next","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","i1","_angular_core__WEBPACK_IMPORTED_MODULE_0__","EJ8","pure","webApiAppRoot","HttpServiceBaseSignal","file","changedName","retryOnDuplicate","formData","FormData","append","http","post","apiUrl","params","zoneId","pipe","switchMap","result","Messages","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","_angular_core__WEBPACK_IMPORTED_MODULE_5__","jDH"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/error-options-DCNQlTOA.mjs","./node_modules/@angular/material/fesm2022/module-DzZHEh7B.mjs","./projects/eav-ui/src/app/shared/components/base.component.ts","./projects/eav-ui/src/app/import-app/import-app.component.ts","./projects/eav-ui/src/app/import-app/import-app.component.html","./node_modules/@angular/material/fesm2022/error-state-Dtb1IHM-.mjs","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\nclass ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, decorators: [{\n            type: Injectable\n        }] });\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nclass ErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nexport { ErrorStateMatcher as E, ShowOnDirtyErrorStateMatcher as S };\n","import { ObserversModule } from '@angular/cdk/observers';\nimport * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nimport { j as MatFormField, M as MatLabel, b as MatError, c as MatHint, e as MatPrefix, g as MatSuffix } from './form-field-C9DZXojn.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\n\nclass MatFormFieldModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            ObserversModule,\n            MatFormField,\n            MatLabel,\n            MatError,\n            MatHint,\n            MatPrefix,\n            MatSuffix], exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            ObserversModule,\n            MatFormField, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        ObserversModule,\n                        MatFormField,\n                        MatLabel,\n                        MatError,\n                        MatHint,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                    exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule],\n                }]\n        }] });\n\nexport { MatFormFieldModule as M };\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * A newer base component, without Log being created / requested.\r\n * This is so it's easier to inherit than the BaseComponent,\r\n * which would make typed log with specs harder to implement.\r\n * \r\n * Note that as with time, we wish to get away from these, as we don't want to use many observables any more.\r\n */\r\n@Component({\r\n  selector: 'app-base-component',\r\n  template: '',\r\n})\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseComponent implements OnDestroy {\r\n  \r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { transient } from '../../../../core';\r\nimport { FileUploadDialogComponent, FileUploadDialogData, UploadTypes } from '../shared/components/file-upload-dialog';\r\nimport { ImportAppService } from './services/import-app.service';\r\n\r\n@Component({\r\n    selector: 'app-import-app',\r\n    templateUrl: './import-app.component.html',\r\n    imports: [\r\n        FileUploadDialogComponent,\r\n    ]\r\n})\r\nexport class ImportAppComponent {\r\n\r\n  uploadType = UploadTypes.App;\r\n\r\n  private importAppService = transient(ImportAppService);\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) dialogData: FileUploadDialogData) {\r\n    dialogData.title ??= `Import App`;\r\n    dialogData.description ??= `\r\n    Select an app package (zip) from your computer to import an app. New apps can be downloaded on\r\n    <a href=\"https://2sxc.org/apps\" target=\"_blank\">https://2sxc.org/apps</a>.\r\n    For further help visit <a href=\"https://2sxc.org/en/help?tag=import-app\" target=\"_blank\">2sxc Help</a>.\r\n    `;\r\n    dialogData.allowedFileTypes ??= 'zip';\r\n    dialogData.upload$ ??= (files, name) => this.importAppService.importApp(files[0], name, true);\r\n  }\r\n}\r\n","<app-file-upload-dialog [uploadType]=\"uploadType\"></app-file-upload-dialog>\r\n","/**\n * Class that tracks the error state of a component.\n * @docs-private\n */\nclass _ErrorStateTracker {\n    _defaultMatcher;\n    ngControl;\n    _parentFormGroup;\n    _parentForm;\n    _stateChanges;\n    /** Whether the tracker is currently in an error state. */\n    errorState = false;\n    /** User-defined matcher for the error state. */\n    matcher;\n    constructor(_defaultMatcher, ngControl, _parentFormGroup, _parentForm, _stateChanges) {\n        this._defaultMatcher = _defaultMatcher;\n        this.ngControl = ngControl;\n        this._parentFormGroup = _parentFormGroup;\n        this._parentForm = _parentForm;\n        this._stateChanges = _stateChanges;\n    }\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const matcher = this.matcher || this._defaultMatcher;\n        const control = this.ngControl ? this.ngControl.control : null;\n        const newState = matcher?.isErrorState(control, parent) ?? false;\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this._stateChanges.next();\n        }\n    }\n}\n\nexport { _ErrorStateTracker as _ };\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safeHtml',\r\n})\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBaseSignal {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[0,1,5]}