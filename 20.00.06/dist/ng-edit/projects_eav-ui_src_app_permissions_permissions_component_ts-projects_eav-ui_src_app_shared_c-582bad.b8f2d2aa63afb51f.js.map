{"version":3,"file":"projects_eav-ui_src_app_permissions_permissions_component_ts-projects_eav-ui_src_app_shared_c-582bad.b8f2d2aa63afb51f.js","mappings":"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","names":["ServiceBase","constructor","this","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","jDH","factory","Éµfac","logSpecs","all","getEntities","getAvailableEntities","delete","webApiEntityRoot","webApiEntityList","EntityService","HttpServiceBaseSignal","log","classLog","queryService","transient","QueryService","getEntities$","params","fnIf","pipe","filter","p","switchMap","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","fields","map","data","Default","appId","contentType","entityId","force","parentId","parentField","parent","http","apiUrl","id","toString","_angular_core__WEBPACK_IMPORTED_MODULE_9__","PermissionsActionsComponent","agInit","refresh","deletePermission","onDelete","debug_node_JnOYh9kg","VBU","selectors","decls","vars","consts","template","rf","ctx","i0","MatRippleModule","i1","MatIconModule","i2","TippyDirective","encapsulation","PermissionsComponent","#permissionsService","#dialogRoutes","#params","#refresh","#prefills","dialog","snackBar","viewContainerRef","matDialog","gridOptions","buildGridOptions","PermissionsService","DialogRoutingService","convert","getParams","targetType","parseInt","keyType","key","signal","permissions","getAllLive","eavConstants","metadata","language","PermissionType","ngOnInit","doOnDialogClosed","update","x","closeDialog","close","editPermission","permission","form","items","EditPrep","newMetadataFromInfo","constructMetadataInfo","Prefill","editId","Id","formUrl","convertFormToUrl","navRelative","#deletePermission","open","ConfirmDeleteDialogComponent","autoFocus","entityTitle","Title","message","hasDeleteSnackbar","width","afterClosed","subscribe","isConfirmed","duration","defaultGridOptions","columnDefs","ColumnDefinitions","cellRendererParams","idFieldParamsTooltipGetter","TextWide","headerName","field","sort","onCellClicked","Character","ActionsPinnedRight1","cellRenderer","MatButtonModule","i3","i4","RouterOutlet","MatDialogActions","SxcGridModule","i5","obj","fn","getWith","BaseComponent","metadataService","MetadataService","entitiesService","EntityEditService","getAll","getMetadata","Items","metaDataSignal","getMetadataLive","value","computed","_angular_core__WEBPACK_IMPORTED_MODULE_6__","context","getFromQuery","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","post","Guids","join","_angular_core__WEBPACK_IMPORTED_MODULE_2__","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","_angular_core__WEBPACK_IMPORTED_MODULE_0__","EJ8","pure","webApiRoot","HttpServiceBase","getHttpApiUrl","newHttpResource","url","getMetadataPromise","fetchPromise","create","entity","zoneId","type","tryForce","HttpContext","set","IGNORED_STATUSES","_angular_core__WEBPACK_IMPORTED_MODULE_5__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/services/service-base.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/permissions/permissions-actions/permissions-actions.component.ts","./projects/eav-ui/src/app/permissions/permissions-actions/permissions-actions.component.html","./projects/eav-ui/src/app/permissions/permissions.component.ts","./projects/eav-ui/src/app/permissions/permissions.component.html","./projects/core/object-utilities.ts","./projects/eav-ui/src/app/shared/components/base.component.ts","./projects/eav-ui/src/app/permissions/services/permissions.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts","./projects/eav-ui/src/app/permissions/services/metadata.service.ts","./projects/eav-ui/src/app/shared/services/entity-edit.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBaseSignal } from './http-service-base-signal';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBaseSignal {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { Permission } from '../models/permission.model';\r\nimport { PermissionsActionsParams } from './permissions-actions.models';\r\n\r\n@Component({\r\n    selector: 'app-permissions-actions',\r\n    templateUrl: './permissions-actions.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class PermissionsActionsComponent implements ICellRendererAngularComp {\r\n  private params: ICellRendererParams & PermissionsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & PermissionsActionsParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  deletePermission(): void {\r\n    const permission: Permission = this.params.data;\r\n    this.params.onDelete(permission);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Delete\" (click)=\"deletePermission()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n</div>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, OnInit, signal, ViewContainerRef } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { convert, Of, transient } from '../../../../core';\r\nimport { ConfirmDeleteDialogComponent } from '../app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.component';\r\nimport { ConfirmDeleteDialogData } from '../app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.models';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants, MetadataKeyTypes } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { Permission } from './models/permission.model';\r\nimport { PermissionsActionsComponent } from './permissions-actions/permissions-actions.component';\r\nimport { PermissionsActionsParams } from './permissions-actions/permissions-actions.models';\r\nimport { PermissionsService } from './services/permissions.service';\r\n\r\n@Component({\r\n  selector: 'app-permissions',\r\n  templateUrl: './permissions.component.html',\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatDialogActions,\r\n    SxcGridModule,\r\n  ]\r\n})\r\nexport class PermissionsComponent implements OnInit {\r\n  gridOptions = this.buildGridOptions();\r\n  #permissionsService = transient(PermissionsService);\r\n  #dialogRoutes = transient(DialogRoutingService);\r\n\r\n  #params = convert(this.#dialogRoutes.getParams(['targetType', 'keyType', 'key']), p => ({\r\n    targetType: parseInt(p.targetType, 10),\r\n    keyType: p.keyType as Of<typeof MetadataKeyTypes>,\r\n    key: p.key,\r\n  }));\r\n\r\n  #refresh = signal<number>(0);\r\n  permissions = this.#permissionsService.getAllLive(this.#params.targetType, this.#params.keyType, this.#params.key, this.#refresh);\r\n\r\n  #prefills: Record<string, Record<string, string>> = {\r\n    [eavConstants.metadata.language.targetType]: {\r\n      PermissionType: 'language',\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<PermissionsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private matDialog: MatDialog,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.#dialogRoutes.doOnDialogClosed(() => this.#refresh.update(x => x + 1));\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n\r\n  editPermission(permission?: Permission) {\r\n    let form: EditForm;\r\n    if (permission == null) {\r\n      form = {\r\n        items: [{\r\n          ...EditPrep.newMetadataFromInfo(\r\n            eavConstants.contentTypes.permissions,\r\n            EditPrep.constructMetadataInfo(this.#params.targetType, this.#params.keyType, this.#params.key)\r\n          ),\r\n          ...(this.#prefills[this.#params.targetType] && { Prefill: this.#prefills[this.#params.targetType] }),\r\n        }],\r\n      };\r\n    } else {\r\n      form = {\r\n        items: [EditPrep.editId(permission.Id)],\r\n      };\r\n    }\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRoutes.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #deletePermission(permission: Permission) {\r\n    const data: ConfirmDeleteDialogData = {\r\n      entityId: permission.Id,\r\n      entityTitle: permission.Title,\r\n      message: \"Delete this permission?\",\r\n      hasDeleteSnackbar: true\r\n    };\r\n    const confirmationDialogRef = this.matDialog.open(ConfirmDeleteDialogComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '400px',\r\n    });\r\n    confirmationDialogRef.afterClosed().subscribe((isConfirmed: boolean) => {\r\n      if (isConfirmed)\r\n        this.#permissionsService.delete(permission.Id).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.#refresh.update(x => x + 1);\r\n        })\r\n    });\r\n    return;\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.Id,\r\n          cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<Permission>()\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          headerName: 'Name',\r\n          field: 'Title',\r\n          sort: 'asc',\r\n          onCellClicked: (params) => {\r\n            const permission: Permission = params.data;\r\n            this.editPermission(permission);\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Identity',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Condition',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Character,\r\n          field: 'Grant',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight1,\r\n          cellRenderer: PermissionsActionsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: PermissionsActionsParams = {\r\n              onDelete: (permission) => this.#deletePermission(permission),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","<div class=\"eav-dialog nav-component-wrapper\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Permissions</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"permissions()\" [gridOptions]=\"gridOptions\">\r\n      </ag-grid-angular>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new permission\" (click)=\"editPermission(null)\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n</div>\r\n","\r\n/**\r\n * Conversion function to change something to something else, a bit like 'map' but for a single item.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `getWith` function, but has a different name to indicate the usage.\r\n */\r\nexport function convert<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n/**\r\n * Function to do something with an object and return the result.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `convert` function, but has a different name to indicate the usage.\r\n */\r\nexport function getWith<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * A newer base component, without Log being created / requested.\r\n * This is so it's easier to inherit than the BaseComponent,\r\n * which would make typed log with specs harder to implement.\r\n * \r\n * Note that as with time, we wish to get away from these, as we don't want to use many observables any more.\r\n */\r\n@Component({\r\n  selector: 'app-base-component',\r\n  template: '',\r\n})\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseComponent implements OnDestroy {\r\n  \r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { eavConstants, MetadataKeyTypes } from '../../shared/constants/eav.constants';\r\nimport { EntityEditService } from '../../shared/services/entity-edit.service';\r\nimport { Permission } from '../models/permission.model';\r\nimport { MetadataService } from './metadata.service';\r\n\r\n@Injectable()\r\nexport class PermissionsService {\r\n\r\n  private metadataService = transient(MetadataService);\r\n  private entitiesService = transient(EntityEditService);\r\n\r\n  getAll(targetType: number, keyType: Of<typeof MetadataKeyTypes>, key: string): Observable<Permission[]> {\r\n    return this.metadataService.getMetadata(targetType, keyType, key, eavConstants.contentTypes.permissions).pipe(\r\n      map(metadata => metadata.Items as Permission[]),\r\n    );\r\n  }\r\n\r\n  getAllLive(targetType: number, keyType: Of<typeof MetadataKeyTypes>, key: string, refresh?: Signal<unknown>,\r\n  ): Signal<Permission[]> {\r\n    const metaDataSignal = this.metadataService.getMetadataLive(refresh, targetType, keyType, key, eavConstants.contentTypes.permissions\r\n    ).value;\r\n\r\n    return computed(() => {\r\n      const metaData = metaDataSignal();\r\n      return (metaData?.Items ?? []) as Permission[];\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.entitiesService.delete(eavConstants.contentTypes.permissions, id, false);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      { Guids: itemIds} // 2dg Guids must be in the body as an array (API filter & too many IDs for URL parameters).\r\n    );\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safeHtml',\r\n})\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { Injectable, Signal } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Of } from '../../../../../core';\r\nimport { MetadataDto } from '../../metadata';\r\nimport { MetadataKeyTypes } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiRoot = 'admin/metadata/get';\r\n@Injectable()\r\nexport class MetadataService extends HttpServiceBase {\r\n  /**\r\n   * Fetches metadata for given key in metadata content type\r\n   * @param targetType type of target metadata item is for, e.g. for Entity, or ContentType\r\n   * @param keyType e.g. for keyType === guid, key === contentTypeStaticName\r\n   * @param key key of target metadata item is for\r\n   * @param contentTypeName name of content type where permissions are stored. If blank, backend returns all metadata except permissions\r\n   */\r\n  // TODO: 2dg, ask 2dm \r\n  getMetadata(targetType: number, keyType: Of<typeof MetadataKeyTypes>, key: string | number, contentTypeName?: string): Observable<MetadataDto> {\r\n    return this.getHttpApiUrl<MetadataDto>(webApiRoot, {\r\n      params: {\r\n        appId: this.appId,\r\n        targetType: targetType.toString(),\r\n        keyType,\r\n        key: key.toString(),\r\n        ...(contentTypeName && { contentType: contentTypeName }),\r\n      },\r\n    });\r\n  }\r\n\r\n  getMetadataLive(refresh: Signal<unknown>, targetType: number, keyType: Of<typeof MetadataKeyTypes>, key: string | number, contentTypeName?: string) {\r\n    return this.newHttpResource<MetadataDto>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiRoot),\r\n        params: {\r\n          appId: this.appId,\r\n          targetType: targetType.toString(),\r\n          keyType,\r\n          key: key.toString(),\r\n          ...(contentTypeName && { contentType: contentTypeName }),\r\n        },\r\n      });\r\n    });\r\n  }\r\n\r\n  // New method to return a promise\r\n  getMetadataPromise(targetType: number, keyType: Of<typeof MetadataKeyTypes>, key: string | number, contentTypeName?: string): Promise<MetadataDto> {\r\n    return this.fetchPromise<MetadataDto>(webApiRoot, {\r\n      params: {\r\n        appId: this.appId,\r\n        targetType: targetType.toString(),\r\n        keyType,\r\n        key: key.toString(),\r\n        ...(contentTypeName && { contentType: contentTypeName }),\r\n      },\r\n    });\r\n  }\r\n\r\n\r\n}\r\n","import { HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { IGNORED_STATUSES } from '../interceptors/handle-errors.interceptor';\r\nimport { ItemInListIdentifier } from '../models/edit-form.model';\r\nimport { webApiEntityRoot } from './entity.service';\r\nimport { HttpServiceBaseSignal } from './http-service-base-signal';\r\n\r\n@Injectable()\r\nexport class EntityEditService extends HttpServiceBaseSignal {\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.appId, force: tryForce.toString() },\r\n      context: new HttpContext().set(IGNORED_STATUSES, [400]),\r\n    });\r\n  }\r\n}\r\n\r\ninterface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\ninterface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n"],"x_google_ignoreList":[]}