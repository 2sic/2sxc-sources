{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_content-type-fields_component_ts-node_modules_ang-44be62.3f316e03fa8b447f.js","mappings":"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","names":["InputTypeCatalog","BooleanDefault","BooleanTristate","CustomDefault","CustomGps","CustomJsonEditor","DateTimeDefault","DefaultSuffix","EmptyDefault","EmptyEnd","EmptyMessage","EntityContentBlocks","EntityDefault","EntityQuery","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","NumberDefault","NumberDropdown","StringDefault","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","StringWysiwyg","EntityPicker","StringPicker","NumberPicker","Unknown","i0","_r2","ctx_r2","do","shareText","shareOrInheritIcon","_r4","_r5","field","EditInfo","DisableRename","DisableDelete","IsTitle","ContentTypeFieldsActionsComponent","agInit","params","this","data","disableEdit","DisableEdit","enablePermissions","InputType","Type","DataTypeCatalog","Hyperlink","enableMetadata","DisableMetadata","metadataCount","Metadata","Object","keys","filter","key","length","enableImageConfig","imageConfiguration","isRecommended","imgConfigCount","entityId","highlightOrDisabled","toggle","clickToConfigure","ss","SysSettings","Share","Guid","InheritMetadataOf","refresh","verb","static","__ngFactoryType__","debug_node_JnOYh9kg","VBU","selectors","decls","vars","consts","template","rf","ctx","_r1","ContentTypeFieldsActionsComponent_Conditional_10_Template","ContentTypeFieldsActionsComponent_Conditional_11_Template","ContentTypeFieldsActionsComponent_ng_template_17_Template","Permissions","Count","menu_r6","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","MatMenuModule","i4","TippyDirective","styles","ContentTypeFieldsSpecialComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ContentTypeFieldsSpecialComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent_Conditional_2_Template","encapsulation","ctx_r1","setTitle","isTitle","suitableForTitle","ContentTypeFieldsTitleComponent","constructor","value","InputTypeHelpers","isEmpty","onSetTitle","ContentTypeFieldsTitleComponent_Conditional_1_Template","ContentTypeFieldsTitleComponent_Conditional_2_Template","ReadOnly","ContentTypeFieldsTypeComponent","icon","calculateTypeIcon","_DisposeViewRepeaterStrategy","applyChanges","changes","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","currentIndex","view","operation","previousIndex","insertContext","createEmbeddedView","templateRef","context","index","_ViewRepeaterOperation","INSERTED","remove","REMOVED","get","move","MOVED","detach","_c0","_c1","CdkTable_Conditional_2_Template","CdkTable_Conditional_3_Template","CdkTable_Conditional_4_Template","CDK_TABLE","InjectionToken","CdkCellDef","inject","TemplateRef","type","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","_table","optional","_hasStickyChanged","name","_name","_setNameInput","sticky","_sticky","stickyEnd","_stickyEnd","cell","headerCell","footerCell","cssClassFriendlyName","_columnCssClassName","hasStickyChanged","resetStickyChanged","_updateColumnCssClassName","replace","contentQueries","dirIndex","_t","first","inputs","booleanAttribute","features","provide","useExisting","BaseCdkCell","columnDef","elementRef","nativeElement","classList","add","CdkHeaderCell","super","ElementRef","hostAttrs","CdkCell","role","_getCellRole","setAttribute","BaseRowDef","_differs","IterableDiffers","columns","_columnsDiffer","ngOnChanges","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","when","CdkCellOutlet","_viewContainer","ViewContainerRef","cells","mostRecentCellOutlet","ngOnDestroy","CdkHeaderRow","dependencies","CdkRow","CdkNoDataRow","_contentClassName","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","_isBrowser","_needsPositionStickyOnElement","direction","_positionListener","_tableInjector","_elemSizeCache","WeakMap","_resizeObserver","globalThis","ResizeObserver","entries","_updateCachedSizes","_updatedStickyColumnsParamsToReplay","_stickyColumnsReplayTimeout","_cachedCellWidths","_borderCellCss","_destroyed","top","bottom","left","right","clearStickyPositioning","rows","stickyDirections","includes","_removeFromStickyColumnReplayQueue","elementsToClear","row","nodeType","ELEMENT_NODE","push","Array","from","children","afterNextRender","write","element","_removeStickyStyle","injector","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","replay","some","state","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","isRtl","start","end","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","cellWidths","startPositions","endPositions","_updateStickyColumnReplayQueue","earlyRead","_getCellWidths","_getStickyStartColumnPositions","_getStickyEndColumnPositions","i","_addStickyStyle","w","slice","map","width","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","height","_retrieveElementSize","borderedRowIndex","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","destroy","clearTimeout","disconnect","contains","dir","style","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","firstRowCells","widths","positions","nextPosition","cachedSize","clientRect","getBoundingClientRect","size","set","observe","box","rowsSet","Set","update","has","needsColumnUpdate","entry","newEntry","borderBoxSize","inlineSize","blockSize","contentRect","target","isCell","setTimeout","klass","STICKY_POSITIONING_LISTENER","DataRowOutlet","viewContainer","table","_rowOutlet","_outletAssigned","HeaderRowOutlet","_headerRowOutlet","FooterRowOutlet","_footerRowOutlet","NoDataRowOutlet","_noDataRowOutlet","CdkTable","_changeDetectorRef","ChangeDetectorRef","_elementRef","_dir","Directionality","_platform","Platform","_viewRepeater","_VIEW_REPEATER_STRATEGY","_viewportRuler","ViewportRuler","_stickyPositioningListener","skipSelf","_document","DOCUMENT","_data","_onDestroy","Subject","_renderRows","_renderChangeSubscription","_columnDefsByName","Map","_rowDefs","_headerRowDefs","_footerRowDefs","_dataDiffer","_defaultRowDef","_customColumnDefs","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_customNoDataRow","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","_stickyStyler","stickyCssClass","needsPositionStickyOnElement","_isServer","_isShowingNoDataRow","_hasAllOutlets","_hasInitialized","undefined","_cellRoleInternal","tableRole","getAttribute","trackBy","_trackByFn","fn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_multiTemplateDataRows","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","_fixedLayout","contentChanged","EventEmitter","viewChange","BehaviorSubject","Number","MAX_VALUE","_contentColumnDefs","_contentRowDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_noDataRow","_injector","Injector","HostAttributeToken","isBrowser","nodeName","_i","dataRow","dataIndex","ngOnInit","_setupStickyStyler","change","pipe","takeUntil","subscribe","ngAfterContentInit","ngAfterContentChecked","_canRender","_render","forEach","def","clear","next","complete","isDataSource","renderRows","_getAllRenderRows","_updateNoDataRow","_adjustedPreviousIndex","_getEmbeddedViewArgs","item","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","$implicit","addColumnDef","removeColumnDef","delete","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","closestTableSection","display","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","_cacheRowDefs","_cacheColumnDefs","rowDefsChanged","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_observeRenderChanges","_checkStickyStates","prevCachedRenderRows","renderRowsForData","_getRenderRowsForData","j","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeArrayAndSet","_getOwnDefs","defaultRowDefs","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isObservable","isArray","of","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","outlet","cellTemplate","_getCellTemplates","markForCheck","renderIndex","count","last","even","odd","columnId","stickyCheckReducer","d","items","shouldShow","container","rootNode","hostVars","hostBindings","outputs","exportAs","useClass","useValue","ngContentSelectors","array","concat","section","uppercaseSection","toUpperCase","current","parentNode","CdkTableModule","imports","ScrollingModule","MatTable_Conditional_2_Template","MatTable_Conditional_3_Template","MatTable_Conditional_4_Template","MatTable","ɵMatTable_BaseFactory","MatCellDef","ɵMatCellDef_BaseFactory","MatHeaderCellDef","ɵMatHeaderCellDef_BaseFactory","MatColumnDef","ɵMatColumnDef_BaseFactory","MatHeaderCell","ɵMatHeaderCell_BaseFactory","MatCell","ɵMatCell_BaseFactory","MatHeaderRowDef","ɵMatHeaderRowDef_BaseFactory","MatRowDef","ɵMatRowDef_BaseFactory","MatHeaderRow","ɵMatHeaderRow_BaseFactory","MatRow","ɵMatRow_BaseFactory","MatTableModule","MatCommonModule","MatTableDataSource","DataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","filteredData","_filterData","sort","_sort","_updateChangeSubscription","paginator","_paginator","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","active","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","filterPredicate","transformedFilter","trim","toLowerCase","initialData","sortChange","merge","initialized","pageChange","page","combineLatest","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","field_r2","ContentType","Name","field_r3","StaticName","field_r4","field_r6","ctx_r6","selectField","fieldNameError","newName_r10","errors","reservedNames","FieldSharingAddMany_td_48_Conditional_6_Conditional_0_Template","FieldSharingAddMany_td_48_Conditional_6_Conditional_1_Template","pattern","$event","item_r9","_r8","newName","FieldSharingAddMany_td_48_Conditional_6_Template","fieldNamePattern","i_r11","item_r12","item_r14","_r13","removeField","FieldSharingAddMany","BaseComponent","#features","#contentTypesFieldsSvc","dialogData","dialog","snackBar","matDialog","changeDetectorRef","hostClass","FeaturesService","transient","ContentTypesFieldsService","ContentTypeFieldsReuseDefinitions","FeatureNames","optionsColumns","selectedColumns","shareableFields","selectedFields","#reservedNamesSystem","getReservedNames","computed","reserved","ReservedNamesValidatorDirective","mergeReserved","existingFields","saving","signalObj","#fieldShareConfigManagement","isEnabled","disableClose","subscriptions","backdropClick","ngForm","dirty","confirm","close","getShareableFieldsPromise","fields","splice","closeDialog","save","open","inheritField","concatMap","addInheritedField","contentType","Id","catchError","_","toArray","duration","openFeatureDialog","MAT_DIALOG_DATA","viewQuery","NgForm","FieldSharingAddMany_th_29_Template","FieldSharingAddMany_td_30_Template","FieldSharingAddMany_th_32_Template","FieldSharingAddMany_td_33_Template","FieldSharingAddMany_th_35_Template","FieldSharingAddMany_td_36_Template","FieldSharingAddMany_th_38_Template","FieldSharingAddMany_td_39_Template","FieldSharingAddMany_tr_40_Template","FieldSharingAddMany_tr_41_Template","FieldSharingAddMany_th_47_Template","FieldSharingAddMany_td_48_Template","FieldSharingAddMany_th_50_Template","FieldSharingAddMany_td_51_Template","FieldSharingAddMany_th_53_Template","FieldSharingAddMany_td_54_Template","FieldSharingAddMany_tr_55_Template","FieldSharingAddMany_tr_56_Template","ngForm_r15","form","valid","MatCardModule","MatButtonModule","i5","FormsModule","i6","MatFormFieldModule","i7","MatInputModule","i8","MatDialogActions","TranslateModule","i9","FeatureTextInfoComponent","FieldHintComponent","i10","SaveCloseButtonFabComponent","SharingOrInheriting","None","Sharing","Inheriting","ShareOrInheritDialogComponent_Case_9_ng_container_8_Template","detailsOrWarning_r3","s_r4","ShareOrInheritDialogComponent_Case_10_Conditional_4_For_2_Template","_forTrack0","inherited","s_r5","ShareOrInheritDialogComponent_Case_10_Conditional_6_For_6_Template","notInherited","ShareOrInheritDialogComponent_Case_10_Conditional_4_Template","ShareOrInheritDialogComponent_Case_10_ng_container_5_Template","ShareOrInheritDialogComponent_Case_10_Conditional_6_Template","requiredFeature","field_r7","field_r8","field_r9","row_r11","_r10","guid","ShareOrInheritDialogComponent_Case_11_Case_20_th_11_Template","ShareOrInheritDialogComponent_Case_11_Case_20_td_12_Template","ShareOrInheritDialogComponent_Case_11_Case_20_th_14_Template","ShareOrInheritDialogComponent_Case_11_Case_20_td_15_Template","ShareOrInheritDialogComponent_Case_11_Case_20_th_17_Template","ShareOrInheritDialogComponent_Case_11_Case_20_td_18_Template","ShareOrInheritDialogComponent_Case_11_Case_20_tr_19_Template","ShareOrInheritDialogComponent_Case_11_Case_20_tr_20_Template","_r6","setShare","startInherit","ShareOrInheritDialogComponent_Case_11_Case_19_Template","ShareOrInheritDialogComponent_Case_11_Case_20_Template","sharingOrInheriting","tmp_4_0","field_r12","AttributeId","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Conditional_0_For_2_Template","_forTrack1","details","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Conditional_0_Template","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Conditional_1_Template","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Template","ShareOrInheritDialogComponent_ng_template_17_Conditional_1_Template","logSpecs","all","ShareOrInheritDialogComponent","log","classLog","signal","initialState","sysS","title","#inheritsInfo","computedObj","withFieldNames","split","substring","groupBy","g","none","n","inherits","fnIf","getDescendants","getAncestors","getShareableFieldsFor","share","inherit","ShareOrInheritDialogComponent_Case_9_Template","ShareOrInheritDialogComponent_Case_10_Template","ShareOrInheritDialogComponent_Case_11_Template","ShareOrInheritDialogComponent_ng_template_17_Template","tmp_2_0","NgClass","NgTemplateOutlet","FeatureIconTextComponent","onRowDragEnter","onRowDragEnd","onRowDragMove","onGridReady","onSortChanged","onFilterChanged","gridOptions","sortApplied","filterApplied","ContentTypeFieldsComponent","#dialogRouter","#contentTypesSvc","DialogRoutingService","ContentTypesService","#contentTypeStaticName","getParam","#helpTextConst","empty","description","hint","content","uxHelpText","getType","#buildGridOptions","#rowDragSuppressed","#gridApi","#columnApi","#fetchFields","doOnDialogClosed","api","columnApi","setEnableCellTextSelection","setSuppressRowDrag","idArray","reOrder","event","overNode","movingNode","node","newFields","fromIndex","toIndex","reordered","#moveInArray","clearFocusedCell","arr","columnStates","getColumnState","#suppressRowDrag","filterModel","getFilterModel","fieldsFiltered","shouldSuppress","navRelative","addSharedField","autoFocus","afterClosed","#nameCellRenderer","inputType","endsPreviousGroup","isGroupOpen","isGroupStart","isGroupEnd","callback","getFieldsPromise","#createItemDefinition","metadataType","keyForMdLookup","newItemTypeName","existingMd","EditPrep","editId","newMetadata","eavConstants","metadata","attribute","Prefill","#setTitle","#rename","#delete","ConfirmDeleteDialogComponent","entityTitle","message","hasDeleteSnackbar","isConfirmed","#openPermissions","GoToPermissions","getUrlAttribute","#openImageConfiguration","imgConfig","Error","itemIdentifier","typeName","formUrl","convertFormToUrl","#openMetadata","url","GoToMetadata","#fieldEditUrl","ConfigTypes","t","urlSubRoute","#inputTypeEditUrl","#shareOrInherit","defaultGridOptions","getRowClass","rowClass","DisableSort","rowDrag","cellClass","valueGetter","p","cellRenderer","cellRendererParams","ColumnDefinitions","TextWidePrimary","headerName","AgGridHelper","cellLink","ItemsText","flex","minWidth","sortable","All","headerClass","Notes","ActionsPinnedRight5","ContentTypeFieldsComponent_Conditional_8_Template","tmp_3_0","Label","RouterOutlet","ToggleDebugDirective","SxcGridModule","GridWithHelpComponent","FeatureComponentBase","#matDialog","#viewContainerRef","#changeDetectorRef","#featuresService","featureNameId","input","required","showIf","MatDialog","feature","getCurrent","show","feat","openDialog","_angular_core__WEBPACK_IMPORTED_MODULE_5__","FsC","featureId","FeatureInfoDialogComponent","link","body","classes","ErrorStateMatcher","isErrorState","control","invalid","touched","submitted","token","factory","ɵfac","providedIn","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","AppExportAssetsAdvanced","DataExportImportBundles","PickerUiCheckbox","PickerUiRadio","PickerSourceCsv","PickerSourceAppAssets","PickerFormulas","PickerUiMoreInfo","ObserversModule","MatFormField","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","webApiFeatureDetails","FeatureDetailService","HttpServiceBaseSignal","getFeatureDetail","nameId","newHttpResource","apiUrl","getFeatureDetails","nameIds","featureList","fetchPromise","prev","_angular_core__WEBPACK_IMPORTED_MODULE_1__","jDH","_r3","clipboard","copyToClipboard","FeatureDetailsDialogComponent_Conditional_0_Conditional_16_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_17_Template","mySpecs","showStatus","showGuid","security","Impact","Message","FeatureDetailsDialogComponent","dialogSpecs","specs","ClipboardService","FeatureDetailsDialogComponent_Conditional_0_Template","SafeHtmlPipe","_ErrorStateTracker","_defaultMatcher","ngControl","_parentFormGroup","_parentForm","_stateChanges","errorState","matcher","updateErrorState","oldState","parent","newState","gridWrapper","viewChild","read","agGrid","contentChild","AgGridAngular","dialogAction","helpText","rowLength","DEFAULT_ROW_HEIGHT","GRID_HEADER_HEIGHT","HELP_CARD_BUFFER","effect","gridWrapperEl","untracked","#updateLayout","agGridEl","dialogActionEl","helpCard","dimensions","#calculateDimensions","rowHeight","agGridHeight","sideNavEl","document","dialogEl","maxHeight","clientHeight","dialogHeaderHeight","dialogActionHeight","shouldHideHelp","helpCardHeight","wrapperHeight","offsetHeight","asInfo","FeatureTextInfoComponent_Conditional_0_Template","#featureDetailSvc","route","snapshot","featureDetails","FeatureInfoDialogComponent_Conditional_0_Template","tmp_0_0"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.html","./node_modules/@angular/cdk/fesm2022/dispose-view-repeater-strategy-Cvpav0PR.mjs","./node_modules/@angular/cdk/fesm2022/table.mjs","./node_modules/@angular/material/fesm2022/table.mjs","./projects/eav-ui/src/app/content-type-fields/field-sharing-add-many/field-sharing-add-many.component.html","./projects/eav-ui/src/app/content-type-fields/field-sharing-add-many/field-sharing-add-many.component.ts","./projects/eav-ui/src/app/content-type-fields/field-sharing-configure/field-sharing-configure.enums.ts","./projects/eav-ui/src/app/content-type-fields/field-sharing-configure/field-sharing-configure.component.html","./projects/eav-ui/src/app/content-type-fields/field-sharing-configure/field-sharing-configure.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/ag-grid/ag-grid-helper.ts","./node_modules/@angular/material/fesm2022/error-options-DCNQlTOA.mjs","./projects/eav-ui/src/app/features/feature-names.ts","./node_modules/@angular/material/fesm2022/module-DzZHEh7B.mjs","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./node_modules/@angular/material/fesm2022/error-state-Dtb1IHM-.mjs","./projects/eav-ui/src/app/shared/ag-grid/grid-with-help/grid-with-help.component.ts","./projects/eav-ui/src/app/shared/ag-grid/grid-with-help/grid-with-help.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts"],"sourcesContent":["export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","<div class=\"actions-component\">\r\n  <!-- Metadata Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableMetadata) }}\"\r\n    matRipple tippy=\"Metadata\"\r\n    (click)=\"enableMetadata ? do('metadata') : ''\"\r\n  >\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enableMetadata\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n    >local_offer</mat-icon>\r\n  </div>\r\n\r\n  <!-- Image Config Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableImageConfig) }}\"\r\n    matRipple\r\n    tippy=\"{{ enableImageConfig ? 'Image Configuration' : 'no image configuration for this field' }}\"\r\n    (click)=\"enableImageConfig ? do('image') : ''\">\r\n    <mat-icon [matBadge]=\"imgConfigCount\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!imgConfigCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      matBadgeColor=\"accent\" [matBadgeDisabled]=\"!enableImageConfig\"\r\n      >filter_center_focus</mat-icon>\r\n  </div>\r\n\r\n  <!-- Permissions Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enablePermissions) }}\"\r\n    matRipple\r\n    tippy=\"{{ enablePermissions ? 'Permissions' : 'no permissions to configure on this field' }}\"\r\n    (click)=\"enablePermissions ? do('permissions') : ''\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enablePermissions\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      >person</mat-icon>\r\n  </div>\r\n\r\n\r\n  <!-- Share Button -->\r\n  @if (shareOrInheritIcon() != '') {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\">\r\n        {{ shareOrInheritIcon() }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled eav-hover-icon-div\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\" class=\"eav-hover-icon disabled\">\r\n        share\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <!-- More Button -->\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<!-- More Menu -->\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableRename\" (click)=\"do('rename')\">\r\n      <mat-icon>text_fields</mat-icon>\r\n      <span>Rename</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableDelete || field.IsTitle\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { InputTypeCatalog } from '../../shared/fields/input-type-catalog';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsActions, ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-actions',\r\n    templateUrl: './content-type-fields-actions.component.html',\r\n    styleUrls: ['./content-type-fields-actions.component.scss'],\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatBadgeModule,\r\n        MatMenuModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentTypeFieldsActionsComponent implements ICellRendererAngularComp {\r\n  field: Field;\r\n  metadataCount: number;\r\n  enablePermissions: boolean;\r\n  enableMetadata: boolean;\r\n\r\n  enableImageConfig: boolean;\r\n  imgConfigCount: number;\r\n  private params: ICellRendererParams & ContentTypeFieldsActionsParams;\r\n\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsActionsParams): void {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    const disableEdit = this.field.EditInfo.DisableEdit;\r\n\r\n    this.enablePermissions = !disableEdit && (this.field.InputType === InputTypeCatalog.StringWysiwyg || this.field.Type === DataTypeCatalog.Hyperlink);\r\n    this.enableMetadata = !this.field.EditInfo.DisableMetadata;\r\n    this.metadataCount = this.field.Metadata ? Object.keys(this.field.Metadata).filter(key => key !== 'merged').length : 0;\r\n\r\n    this.enableImageConfig = !disableEdit && this.field.imageConfiguration.isRecommended;\r\n    this.imgConfigCount = this.field.imageConfiguration.entityId ? 1 : 0;\r\n  }\r\n\r\n  highlightOrDisabled(toggle: boolean): string {\r\n    return toggle ? 'highlight' : 'disabled';\r\n  }\r\n\r\n  // #region Sharing Info for better icons #SharedFieldDefinition\r\n\r\n  shareText(): string {\r\n    const clickToConfigure = 'click to configure sharing';\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return clickToConfigure;\r\n    return ss.Share\r\n      ? 'shared enabled as ' + this.field.Guid\r\n      : ss.InheritMetadataOf\r\n        ? 'inherits ' + ss.InheritMetadataOf\r\n        : clickToConfigure;\r\n  }\r\n\r\n  shareOrInheritIcon(): string {\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return '';\r\n    return ss.Share\r\n      ? 'share'\r\n      : ss.InheritMetadataOf ? 'adjust' : '';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentTypeFieldsActions): void {\r\n    this.params.do(verb, this.field);\r\n  }\r\n\r\n}\r\n","<div class=\"icon-container\">\r\n  @if (hasFormulas) {\r\n    <mat-icon tippy=\"Has Formulas\">functions</mat-icon>\r\n  }\r\n  @if (isEphemeral) {\r\n    <mat-icon tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Field } from '../../shared/fields/field.model';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-special',\r\n    templateUrl: './content-type-fields-special.component.html',\r\n    imports: [MatIconModule,]\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  @if (!field.EditInfo.ReadOnly)\r\n  {\r\n    <div class=\"eav-grid-action-button highlight {{ isTitle ? '' : suitableForTitle ? 'hover-only' : 'no-button' }}\"\r\n      [attr.disabled]=\"isTitle || !suitableForTitle\"\r\n      matRipple\r\n      tippy=\"Use as title field\"\r\n      (click)=\"setTitle()\"\r\n    >\r\n      <mat-icon>star</mat-icon>\r\n    </div>\r\n  }\r\n  @else\r\n  {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>{{ isTitle ? 'star' : '' }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { InputTypeHelpers } from '../../shared/fields/input-type-helpers';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title.models';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-title',\r\n    templateUrl: './content-type-fields-title.component.html',\r\n    styleUrls: ['./content-type-fields-title.component.scss'],\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n\r\n  isTitle: boolean;\r\n\r\n  field: Field;\r\n\r\n  suitableForTitle = true;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsTitleParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsTitleParams): void {\r\n    this.params = params;\r\n    this.isTitle = params.value;\r\n    this.field = params.data;\r\n\r\n    this.suitableForTitle = !InputTypeHelpers.isEmpty(this.field.InputType)\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  setTitle(): void {\r\n    if (this.suitableForTitle)\r\n      this.params.onSetTitle(this.field);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\n\r\n@Component({\r\n    selector: 'app-content-type-fields-type',\r\n    templateUrl: './content-type-fields-type.component.html',\r\n    imports: [\r\n        MatIconModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","import { a as _ViewRepeaterOperation } from './recycle-view-repeater-strategy-SfuyU210.mjs';\n\n/**\n * A repeater that destroys views when they are removed from a\n * `ViewContainerRef`. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = _ViewRepeaterOperation.INSERTED;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = _ViewRepeaterOperation.REMOVED;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = _ViewRepeaterOperation.MOVED;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() { }\n}\n\nexport { _DisposeViewRepeaterStrategy as _ };\n","import { i as isDataSource } from './data-source-D34wiQZj.mjs';\nexport { D as DataSource } from './data-source-D34wiQZj.mjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, TemplateRef, Directive, booleanAttribute, Input, ContentChild, ElementRef, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, afterNextRender, ChangeDetectorRef, DOCUMENT, EventEmitter, Injector, HostAttributeToken, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { b as _VIEW_REPEATER_STRATEGY, _ as _RecycleViewRepeaterStrategy, a as _ViewRepeaterOperation } from './recycle-view-repeater-strategy-SfuyU210.mjs';\nimport { _ as _DisposeViewRepeaterStrategy } from './dispose-view-repeater-strategy-Cvpav0PR.mjs';\nimport { D as Directionality } from './directionality-CChdj3az.mjs';\nimport { P as Platform } from './platform-DNDzkVcI.mjs';\nimport { ViewportRuler, ScrollingModule } from './scrolling.mjs';\nimport '@angular/common';\nimport './element-x4z00URv.mjs';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /** @docs-private */\n    template = inject(TemplateRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkCellDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkCellDef, isStandalone: true, selector: \"[cdkCellDef]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellDef]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /** @docs-private */\n    template = inject(TemplateRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderCellDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkHeaderCellDef, isStandalone: true, selector: \"[cdkHeaderCellDef]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderCellDef]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /** @docs-private */\n    template = inject(TemplateRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterCellDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkFooterCellDef, isStandalone: true, selector: \"[cdkFooterCellDef]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterCellDef]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    _hasStickyChanged = false;\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    _name;\n    /** Whether the cell is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _sticky = false;\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(value) {\n        if (value !== this._stickyEnd) {\n            this._stickyEnd = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _stickyEnd = false;\n    /** @docs-private */\n    cell;\n    /** @docs-private */\n    headerCell;\n    /** @docs-private */\n    footerCell;\n    /**\n     * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n     * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n     * do not match are replaced by the '-' character.\n     */\n    cssClassFriendlyName;\n    /**\n     * Class name for cells in this column.\n     * @docs-private\n     */\n    _columnCssClassName;\n    constructor() { }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkColumnDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkColumnDef, isStandalone: true, selector: \"[cdkColumnDef]\", inputs: { name: [\"cdkColumnDef\", \"name\"], sticky: [\"sticky\", \"sticky\", booleanAttribute], stickyEnd: [\"stickyEnd\", \"stickyEnd\", booleanAttribute] }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], sticky: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], stickyEnd: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor() {\n        super(inject(CdkColumnDef), inject(ElementRef));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderCell, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkHeaderCell, isStandalone: true, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor() {\n        const columnDef = inject(CdkColumnDef);\n        const elementRef = inject(ElementRef);\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterCell, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkFooterCell, isStandalone: true, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor() {\n        const columnDef = inject(CdkColumnDef);\n        const elementRef = inject(ElementRef);\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkCell, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkCell, isStandalone: true, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    template = inject(TemplateRef);\n    _differs = inject(IterableDiffers);\n    /** The columns to be displayed on this row. */\n    columns;\n    /** Differ used to check if any changes were made to the columns. */\n    _columnsDiffer;\n    constructor() { }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: BaseRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: BaseRowDef, isStandalone: true, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [] });\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends BaseRowDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    _hasStickyChanged = false;\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _sticky = false;\n    constructor() {\n        super(inject(TemplateRef), inject(IterableDiffers));\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkHeaderRowDef, isStandalone: true, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkHeaderRowDef' }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkHeaderRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends BaseRowDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    _hasStickyChanged = false;\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    _sticky = false;\n    constructor() {\n        super(inject(TemplateRef), inject(IterableDiffers));\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkFooterRowDef, isStandalone: true, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkFooterRowDef' }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkFooterRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    _table = inject(CDK_TABLE, { optional: true });\n    /**\n     * Function that should return true if this row template should be used for the provided index\n     * and row data. If left undefined, this row will be considered the default row template to use\n     * when no other when functions return true for the data.\n     * For every row, there must be at least one when function that passes or an undefined to default.\n     */\n    when;\n    constructor() {\n        // TODO(andrewseguin): Add an input for providing a switch function to determine\n        //   if this template should be used.\n        super(inject(TemplateRef), inject(IterableDiffers));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkRowDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkRowDef, isStandalone: true, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: [\n                        { name: 'columns', alias: 'cdkRowDefColumns' },\n                        { name: 'when', alias: 'cdkRowDefWhen' },\n                    ],\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    _viewContainer = inject(ViewContainerRef);\n    /** The ordered list of cells to render within this outlet's view container */\n    cells;\n    /** The data context to be provided to each cell */\n    context;\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static mostRecentCellOutlet = null;\n    constructor() {\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkCellOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkCellOutlet, isStandalone: true, selector: \"[cdkCellOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkHeaderRow, isStandalone: true, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkFooterRow, isStandalone: true, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkRow, isStandalone: true, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    templateRef = inject(TemplateRef);\n    _contentClassName = 'cdk-no-data-row';\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkNoDataRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkNoDataRow, isStandalone: true, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Directions that can be used when setting sticky positioning.\n * @docs-private\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    _isNativeHtmlTable;\n    _stickCellCss;\n    _isBrowser;\n    _needsPositionStickyOnElement;\n    direction;\n    _positionListener;\n    _tableInjector;\n    _elemSizeCache = new WeakMap();\n    _resizeObserver = globalThis?.ResizeObserver\n        ? new globalThis.ResizeObserver(entries => this._updateCachedSizes(entries))\n        : null;\n    _updatedStickyColumnsParamsToReplay = [];\n    _stickyColumnsReplayTimeout = null;\n    _cachedCellWidths = [];\n    _borderCellCss;\n    _destroyed = false;\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     * @param _tableInjector The table's Injector.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, _isBrowser = true, _needsPositionStickyOnElement = true, direction, _positionListener, _tableInjector) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this.direction = direction;\n        this._positionListener = _positionListener;\n        this._tableInjector = _tableInjector;\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        if (stickyDirections.includes('left') || stickyDirections.includes('right')) {\n            this._removeFromStickyColumnReplayQueue(rows);\n        }\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row, ...Array.from(row.children));\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        afterNextRender({\n            write: () => {\n                for (const element of elementsToClear) {\n                    this._removeStickyStyle(element, stickyDirections);\n                }\n            },\n        }, {\n            injector: this._tableInjector,\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     * @param replay Whether to enqueue this call for replay after a ResizeObserver update.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true, replay = true) {\n        // Don't cache any state if none of the columns are sticky.\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            this._positionListener?.stickyColumnsUpdated({ sizes: [] });\n            this._positionListener?.stickyEndColumnsUpdated({ sizes: [] });\n            return;\n        }\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const isRtl = this.direction === 'rtl';\n        const start = isRtl ? 'right' : 'left';\n        const end = isRtl ? 'left' : 'right';\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        let cellWidths;\n        let startPositions;\n        let endPositions;\n        if (replay) {\n            this._updateStickyColumnReplayQueue({\n                rows: [...rows],\n                stickyStartStates: [...stickyStartStates],\n                stickyEndStates: [...stickyEndStates],\n            });\n        }\n        afterNextRender({\n            earlyRead: () => {\n                cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n                startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n                endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n            },\n            write: () => {\n                for (const row of rows) {\n                    for (let i = 0; i < numCells; i++) {\n                        const cell = row.children[i];\n                        if (stickyStartStates[i]) {\n                            this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                        }\n                        if (stickyEndStates[i]) {\n                            this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                        }\n                    }\n                }\n                if (this._positionListener && cellWidths.some(w => !!w)) {\n                    this._positionListener.stickyColumnsUpdated({\n                        sizes: lastStickyStart === -1\n                            ? []\n                            : cellWidths\n                                .slice(0, lastStickyStart + 1)\n                                .map((width, index) => (stickyStartStates[index] ? width : null)),\n                    });\n                    this._positionListener.stickyEndColumnsUpdated({\n                        sizes: firstStickyEnd === -1\n                            ? []\n                            : cellWidths\n                                .slice(firstStickyEnd)\n                                .map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null)\n                                .reverse(),\n                    });\n                }\n            },\n        }, {\n            injector: this._tableInjector,\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        afterNextRender({\n            earlyRead: () => {\n                for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n                    if (!states[rowIndex]) {\n                        continue;\n                    }\n                    stickyOffsets[rowIndex] = stickyOffset;\n                    const row = rows[rowIndex];\n                    elementsToStick[rowIndex] = this._isNativeHtmlTable\n                        ? Array.from(row.children)\n                        : [row];\n                    const height = this._retrieveElementSize(row).height;\n                    stickyOffset += height;\n                    stickyCellHeights[rowIndex] = height;\n                }\n            },\n            write: () => {\n                const borderedRowIndex = states.lastIndexOf(true);\n                for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                    if (!states[rowIndex]) {\n                        continue;\n                    }\n                    const offset = stickyOffsets[rowIndex];\n                    const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                    for (const element of elementsToStick[rowIndex]) {\n                        this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                    }\n                }\n                if (position === 'top') {\n                    this._positionListener?.stickyHeaderRowsUpdated({\n                        sizes: stickyCellHeights,\n                        offsets: stickyOffsets,\n                        elements: elementsToStick,\n                    });\n                }\n                else {\n                    this._positionListener?.stickyFooterRowsUpdated({\n                        sizes: stickyCellHeights,\n                        offsets: stickyOffsets,\n                        elements: elementsToStick,\n                    });\n                }\n            },\n        }, {\n            injector: this._tableInjector,\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        afterNextRender({\n            write: () => {\n                const tfoot = tableElement.querySelector('tfoot');\n                if (tfoot) {\n                    if (stickyStates.some(state => !state)) {\n                        this._removeStickyStyle(tfoot, ['bottom']);\n                    }\n                    else {\n                        this._addStickyStyle(tfoot, 'bottom', 0, false);\n                    }\n                }\n            },\n        }, {\n            injector: this._tableInjector,\n        });\n    }\n    /** Triggered by the table's OnDestroy hook. */\n    destroy() {\n        if (this._stickyColumnsReplayTimeout) {\n            clearTimeout(this._stickyColumnsReplayTimeout);\n        }\n        this._resizeObserver?.disconnect();\n        this._destroyed = true;\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        if (!element.classList.contains(this._stickCellCss)) {\n            return;\n        }\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            const cell = firstRowCells[i];\n            cellWidths.push(this._retrieveElementSize(cell).width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Retreives the most recently observed size of the specified element from the cache, or\n     * meaures it directly if not yet cached.\n     */\n    _retrieveElementSize(element) {\n        const cachedSize = this._elemSizeCache.get(element);\n        if (cachedSize) {\n            return cachedSize;\n        }\n        const clientRect = element.getBoundingClientRect();\n        const size = { width: clientRect.width, height: clientRect.height };\n        if (!this._resizeObserver) {\n            return size;\n        }\n        this._elemSizeCache.set(element, size);\n        this._resizeObserver.observe(element, { box: 'border-box' });\n        return size;\n    }\n    /**\n     * Conditionally enqueue the requested sticky update and clear previously queued updates\n     * for the same rows.\n     */\n    _updateStickyColumnReplayQueue(params) {\n        this._removeFromStickyColumnReplayQueue(params.rows);\n        // No need to replay if a flush is pending.\n        if (!this._stickyColumnsReplayTimeout) {\n            this._updatedStickyColumnsParamsToReplay.push(params);\n        }\n    }\n    /** Remove updates for the specified rows from the queue. */\n    _removeFromStickyColumnReplayQueue(rows) {\n        const rowsSet = new Set(rows);\n        for (const update of this._updatedStickyColumnsParamsToReplay) {\n            update.rows = update.rows.filter(row => !rowsSet.has(row));\n        }\n        this._updatedStickyColumnsParamsToReplay = this._updatedStickyColumnsParamsToReplay.filter(update => !!update.rows.length);\n    }\n    /** Update _elemSizeCache with the observed sizes. */\n    _updateCachedSizes(entries) {\n        let needsColumnUpdate = false;\n        for (const entry of entries) {\n            const newEntry = entry.borderBoxSize?.length\n                ? {\n                    width: entry.borderBoxSize[0].inlineSize,\n                    height: entry.borderBoxSize[0].blockSize,\n                }\n                : {\n                    width: entry.contentRect.width,\n                    height: entry.contentRect.height,\n                };\n            if (newEntry.width !== this._elemSizeCache.get(entry.target)?.width &&\n                isCell(entry.target)) {\n                needsColumnUpdate = true;\n            }\n            this._elemSizeCache.set(entry.target, newEntry);\n        }\n        if (needsColumnUpdate && this._updatedStickyColumnsParamsToReplay.length) {\n            if (this._stickyColumnsReplayTimeout) {\n                clearTimeout(this._stickyColumnsReplayTimeout);\n            }\n            this._stickyColumnsReplayTimeout = setTimeout(() => {\n                if (this._destroyed) {\n                    return;\n                }\n                for (const update of this._updatedStickyColumnsParamsToReplay) {\n                    this.updateStickyColumns(update.rows, update.stickyStartStates, update.stickyEndStates, true, false);\n                }\n                this._updatedStickyColumnsParamsToReplay = [];\n                this._stickyColumnsReplayTimeout = null;\n            }, 0);\n        }\n    }\n}\nfunction isCell(element) {\n    return ['cdk-cell', 'cdk-header-cell', 'cdk-footer-cell'].some(klass => element.classList.contains(klass));\n}\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkRecycleRows, isStandalone: true, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._rowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DataRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: DataRowOutlet, isStandalone: true, selector: \"[rowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[rowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._headerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: HeaderRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: HeaderRowOutlet, isStandalone: true, selector: \"[headerRowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[headerRowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._footerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: FooterRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: FooterRowOutlet, isStandalone: true, selector: \"[footerRowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[footerRowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    viewContainer = inject(ViewContainerRef);\n    elementRef = inject(ElementRef);\n    constructor() {\n        const table = inject(CDK_TABLE);\n        table._noDataRowOutlet = this;\n        table._outletAssigned();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: NoDataRowOutlet, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: NoDataRowOutlet, isStandalone: true, selector: \"[noDataRowOutlet]\", ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[noDataRowOutlet]',\n                }]\n        }], ctorParameters: () => [] });\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    _differs = inject(IterableDiffers);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dir = inject(Directionality, { optional: true });\n    _platform = inject(Platform);\n    _viewRepeater = inject(_VIEW_REPEATER_STRATEGY);\n    _viewportRuler = inject(ViewportRuler);\n    _stickyPositioningListener = inject(STICKY_POSITIONING_LISTENER, { optional: true, skipSelf: true });\n    _document = inject(DOCUMENT);\n    /** Latest data provided by the data source. */\n    _data;\n    /** Subject that emits when the component has been destroyed. */\n    _onDestroy = new Subject();\n    /** List of the rendered rows as identified by their `RenderRow` object. */\n    _renderRows;\n    /** Subscription that listens for the data provided by the data source. */\n    _renderChangeSubscription;\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n    _columnDefsByName = new Map();\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n     */\n    _rowDefs;\n    /**\n     * Set of all header row definitions that can be used by this table. Populated by the rows\n     * gathered by using `ContentChildren` as well as any custom row definitions added to\n     * `_customHeaderRowDefs`.\n     */\n    _headerRowDefs;\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to\n     * `_customFooterRowDefs`.\n     */\n    _footerRowDefs;\n    /** Differ used to find the changes in the data provided by the data source. */\n    _dataDiffer;\n    /** Stores the row definition that does not have a when predicate. */\n    _defaultRowDef;\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     */\n    _customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     */\n    _customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     */\n    _customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     */\n    _customFooterRowDefs = new Set();\n    /** No data row that was defined outside of the direct content children of the table. */\n    _customNoDataRow;\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    _headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    _footerRowDefChanged = true;\n    /**\n     * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n     * change.\n     */\n    _stickyColumnStylesNeedReset = true;\n    /**\n     * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n     * `false`, cached values will be used instead. This is only applicable to tables with\n     * `_fixedLayout` enabled. For other tables, cell widths will always be recalculated.\n     */\n    _forceRecalculateCellWidths = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n    _cachedRenderRowsMap = new Map();\n    /** Whether the table is applied to a native `<table>`. */\n    _isNativeHtmlTable;\n    /**\n     * Utility class that is responsible for applying the appropriate sticky positioning styles to\n     * the table's rows and cells.\n     */\n    _stickyStyler;\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n     * table subclasses.\n     */\n    stickyCssClass = 'cdk-table-sticky';\n    /**\n     * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n     * the position is set in a selector associated with the value of stickyCssClass. May be\n     * overridden by table subclasses\n     */\n    needsPositionStickyOnElement = true;\n    /** Whether the component is being rendered on the server. */\n    _isServer;\n    /** Whether the no data row is currently showing anything. */\n    _isShowingNoDataRow = false;\n    /** Whether the table has rendered out all the outlets for the first time. */\n    _hasAllOutlets = false;\n    /** Whether the table is done initializing. */\n    _hasInitialized = false;\n    /** Aria role to apply to the table's cells based on the table's own role. */\n    _getCellRole() {\n        // Perform this lazily in case the table's role was updated by a directive after construction.\n        if (this._cellRoleInternal === undefined) {\n            // Note that we set `role=\"cell\"` even on native `td` elements,\n            // because some browsers seem to require it. See #29784.\n            const tableRole = this._elementRef.nativeElement.getAttribute('role');\n            return tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n        }\n        return this._cellRoleInternal;\n    }\n    _cellRoleInternal = undefined;\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    _trackByFn;\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    _dataSource;\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(value) {\n        this._multiTemplateDataRows = value;\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    _multiTemplateDataRows = false;\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(value) {\n        this._fixedLayout = value;\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    _fixedLayout = false;\n    /**\n     * Emits when the table completes rendering a set of data rows based on the latest data from the\n     * data source, even if the set of rows is empty.\n     */\n    contentChanged = new EventEmitter();\n    // TODO(andrewseguin): Remove max value as the end index\n    //   and instead calculate the view on init and scroll.\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * @docs-private\n     */\n    viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE,\n    });\n    // Outlets in the table's template where the header, data rows, and footer will be inserted.\n    _rowOutlet;\n    _headerRowOutlet;\n    _footerRowOutlet;\n    _noDataRowOutlet;\n    /**\n     * The column definitions provided by the user that contain what the header, data, and footer\n     * cells should render for each column.\n     */\n    _contentColumnDefs;\n    /** Set of data row definitions that were provided to the table as content children. */\n    _contentRowDefs;\n    /** Set of header row definitions that were provided to the table as content children. */\n    _contentHeaderRowDefs;\n    /** Set of footer row definitions that were provided to the table as content children. */\n    _contentFooterRowDefs;\n    /** Row definition that will only be rendered if there's no data in the table. */\n    _noDataRow;\n    _injector = inject(Injector);\n    constructor() {\n        const role = inject(new HostAttributeToken('role'), { optional: true });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentInit() {\n        this._hasInitialized = true;\n    }\n    ngAfterContentChecked() {\n        // Only start re-rendering in `ngAfterContentChecked` after the first render.\n        if (this._canRender()) {\n            this._render();\n        }\n    }\n    ngOnDestroy() {\n        this._stickyStyler?.destroy();\n        [\n            this._rowOutlet?.viewContainer,\n            this._headerRowOutlet?.viewContainer,\n            this._footerRowOutlet?.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach((def) => {\n            def?.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        this.contentChanged.next();\n        this.updateStickyColumnStyles();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const thead = closestTableSection(this._headerRowOutlet, 'thead');\n            if (thead) {\n                thead.style.display = headerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const tfoot = closestTableSection(this._footerRowOutlet, 'tfoot');\n            if (tfoot) {\n                tfoot.style.display = footerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /** Invoked whenever an outlet is created and has been assigned to the table. */\n    _outletAssigned() {\n        // Trigger the first render once all outlets have been assigned. We do it this way, as\n        // opposed to waiting for the next `ngAfterContentChecked`, because we don't know when\n        // the next change detection will happen.\n        // Also we can't use queries to resolve the outlets, because they're wrapped in a\n        // conditional, so we have to rely on them being assigned via DI.\n        if (!this._hasAllOutlets &&\n            this._rowOutlet &&\n            this._headerRowOutlet &&\n            this._footerRowOutlet &&\n            this._noDataRowOutlet) {\n            this._hasAllOutlets = true;\n            // In some setups this may fire before `ngAfterContentInit`\n            // so we need a check here. See #28538.\n            if (this._canRender()) {\n                this._render();\n            }\n        }\n    }\n    /** Whether the table has all the information to start rendering. */\n    _canRender() {\n        return this._hasAllOutlets && this._hasInitialized;\n    }\n    /** Renders the table if its state has changed. */\n    _render() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        if (!this._data) {\n            return renderRows;\n        }\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => {\n            // The differ should be run for every column, even if `acc` is already\n            // true (see #29922)\n            const diff = !!def.getColumnsDiff();\n            return acc || diff;\n        };\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            if (this._rowOutlet) {\n                this._rowOutlet.viewContainer.clear();\n            }\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef?.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, this._platform.isBrowser, this.needsPositionStickyOnElement, direction, this._stickyPositioningListener, this._injector);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n        this._changeDetectorRef.markForCheck();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTable, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.0.0\", type: CdkTable, isStandalone: true, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: [\"multiTemplateDataRows\", \"multiTemplateDataRows\", booleanAttribute], fixedLayout: [\"fixedLayout\", \"fixedLayout\", booleanAttribute] }, outputs: { contentChanged: \"contentChanged\" }, host: { properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], fixedLayout: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], contentChanged: [{\n                type: Output\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n/**\n * Finds the closest table section to an outlet. We can't use `HTMLElement.closest` for this,\n * because the node representing the outlet is a comment.\n */\nfunction closestTableSection(outlet, section) {\n    const uppercaseSection = section.toUpperCase();\n    let current = outlet.viewContainer.element.nativeElement;\n    while (current) {\n        // 1 is an element node.\n        const nodeName = current.nodeType === 1 ? current.nodeName : null;\n        if (nodeName === uppercaseSection) {\n            return current;\n        }\n        else if (nodeName === 'TABLE') {\n            // Stop traversing past the `table` node.\n            break;\n        }\n        current = current.parentNode;\n    }\n    return null;\n}\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    _table = inject(CdkTable, { optional: true });\n    _options = inject(TEXT_COLUMN_OPTIONS, { optional: true });\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    _name;\n    /**\n     * Text label that should be used for the column header. If this property is not\n     * set, the header text will default to the column name with its first letter capitalized.\n     */\n    headerText;\n    /**\n     * Accessor function to retrieve the data rendered for each cell. If this\n     * property is not set, the data cells will render the value found in the data's property matching\n     * the column's name. For example, if the column is named `id`, then the rendered value will be\n     * value defined by the data's `id` property.\n     */\n    dataAccessor;\n    /** Alignment of the cell values. */\n    justify = 'start';\n    /** @docs-private */\n    columnDef;\n    /**\n     * The column cell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * @docs-private\n     */\n    cell;\n    /**\n     * The column headerCell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * @docs-private\n     */\n    headerCell;\n    constructor() {\n        this._options = this._options || {};\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTextColumn, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkTextColumn, isStandalone: true, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"cdkColumnDef\", \"sticky\", \"stickyEnd\"] }, { kind: \"directive\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { kind: \"directive\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }, { kind: \"directive\", type: CdkCellDef, selector: \"[cdkCellDef]\" }, { kind: \"directive\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    imports: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n                }]\n        }], ctorParameters: () => [], propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule, CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet], exports: [CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule, ...EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_POSITIONING_LISTENER, TEXT_COLUMN_OPTIONS };\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, booleanAttribute, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE, STICKY_POSITIONING_LISTENER, HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CdkCellOutlet, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy, DataSource } from '@angular/cdk/collections';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { map } from 'rxjs/operators';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/bidi';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass MatRecycleRows {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatRecycleRows, isStandalone: true, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\nclass MatTable extends CdkTable {\n    /** Overrides the sticky CSS class set by the `CdkTable`. */\n    stickyCssClass = 'mat-mdc-table-sticky';\n    /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n    needsPositionStickyOnElement = false;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTable, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.0.0\", type: MatTable, isStandalone: true, selector: \"mat-table, table[mat-table]\", host: { properties: { \"class.mdc-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-mdc-table mdc-data-table__table\" }, providers: [\n            { provide: CdkTable, useExisting: MatTable },\n            { provide: CDK_TABLE, useExisting: MatTable },\n            // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n            //  is only included in the build if used.\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, isInline: true, styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:var(--mat-table-header-container-height, 56px)}mat-row{min-height:var(--mat-table-row-item-container-height, 52px)}mat-footer-row{min-height:var(--mat-table-footer-container-height, 52px)}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-sys-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-sys-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-sys-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-sys-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-sys-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-sys-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-sys-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mdc-data-table__row:last-child>.mat-mdc-header-cell{border-bottom:none}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child>.mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\\n\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, host: {\n                        'class': 'mat-mdc-table mdc-data-table__table',\n                        '[class.mdc-table-fixed-layout]': 'fixedLayout',\n                    }, providers: [\n                        { provide: CdkTable, useExisting: MatTable },\n                        { provide: CDK_TABLE, useExisting: MatTable },\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                        //  is only included in the build if used.\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:var(--mat-table-header-container-height, 56px)}mat-row{min-height:var(--mat-table-row-item-container-height, 52px)}mat-footer-row{min-height:var(--mat-table-footer-container-height, 52px)}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-sys-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-sys-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-sys-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-sys-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-sys-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-sys-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-sys-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-sys-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-sys-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-sys-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-sys-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-sys-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mdc-data-table__row:last-child>.mat-mdc-header-cell{border-bottom:none}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-sys-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child>.mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-sys-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\\n\"] }]\n        }] });\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatCellDef, isStandalone: true, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatCellDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }],\n                }]\n        }] });\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatHeaderCellDef, isStandalone: true, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }],\n                }]\n        }] });\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatFooterCellDef, isStandalone: true, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }],\n                }]\n        }] });\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatColumnDef, isStandalone: true, selector: \"[matColumnDef]\", inputs: { name: [\"matColumnDef\", \"name\"] }, providers: [\n            { provide: CdkColumnDef, useExisting: MatColumnDef },\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n        ], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matColumnDef]',\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n                    ],\n                }]\n        }], propDecorators: { name: [{\n                type: Input,\n                args: ['matColumnDef']\n            }] } });\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatHeaderCell, isStandalone: true, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-mdc-header-cell mdc-data-table__header-cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }] });\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatFooterCell, isStandalone: true, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { classAttribute: \"mat-mdc-footer-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-mdc-footer-cell mdc-data-table__cell',\n                    },\n                }]\n        }] });\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatCell, isStandalone: true, selector: \"mat-cell, td[mat-cell]\", host: { classAttribute: \"mat-mdc-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-mdc-cell mdc-data-table__cell',\n                    },\n                }]\n        }] });\n\n// We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatHeaderRowDef, isStandalone: true, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matHeaderRowDef' },\n                        { name: 'sticky', alias: 'matHeaderRowDefSticky', transform: booleanAttribute },\n                    ],\n                }]\n        }] });\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatFooterRowDef, isStandalone: true, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matFooterRowDef' },\n                        { name: 'sticky', alias: 'matFooterRowDefSticky', transform: booleanAttribute },\n                    ],\n                }]\n        }] });\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatRowDef, isStandalone: true, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatRowDef }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matRowDefColumns' },\n                        { name: 'when', alias: 'matRowDefWhen' },\n                    ],\n                }]\n        }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatHeaderRow, isStandalone: true, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-header-row mdc-data-table__header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-header-row, tr[mat-header-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-header-row mdc-data-table__header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatFooterRow, isStandalone: true, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-footer-row mdc-data-table__row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-footer-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatRow, isStandalone: true, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-row mdc-data-table__row\" }, providers: [{ provide: CdkRow, useExisting: MatRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-row, tr[mat-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n    _contentClassName = 'mat-mdc-no-data-row';\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatNoDataRow, isStandalone: true, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matNoDataRow]',\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }],\n                }]\n        }] });\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatTextColumn, isStandalone: true, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"matColumnDef\"] }, { kind: \"directive\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: MatCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: MatCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-text-column',\n                    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    imports: [MatColumnDef, MatHeaderCellDef, MatHeaderCell, MatCellDef, MatCell],\n                }]\n        }] });\n\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    MatRecycleRows,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn], exports: [MatCommonModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CdkTableModule, ...EXPORTED_DECLARATIONS],\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends DataSource {\n    /** Stream that emits when a new data array is set on the data source. */\n    _data;\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n    _renderData = new BehaviorSubject([]);\n    /** Stream that emits when a new filter string is set on the data source. */\n    _filter = new BehaviorSubject('');\n    /** Used to react to internal changes of the paginator that are made by the data source itself. */\n    _internalPageChanges = new Subject();\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n    _renderChangesSubscription = null;\n    /**\n     * The filtered set of data that has been matched by the filter string, or all the data if there\n     * is no filter. Useful for knowing the set of data the table represents.\n     * For example, a 'selectAll()' function would likely want to select the set of filtered data\n     * shown to the user rather than all the data.\n     */\n    filteredData;\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() {\n        return this._data.value;\n    }\n    set data(data) {\n        data = Array.isArray(data) ? data : [];\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() {\n        return this._filter.value;\n    }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() {\n        return this._sort;\n    }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    _sort;\n    /**\n     * Instance of the paginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the paginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() {\n        return this._paginator;\n    }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    _paginator;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n    sortingDataAccessor = (data, sortHeaderId) => {\n        const value = data[sortHeaderId];\n        if (_isNumberValue(value)) {\n            const numberValue = Number(value);\n            // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we leave them as strings.\n            // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n            return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n        }\n        return value;\n    };\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n    sortData = (data, sort) => {\n        const active = sort.active;\n        const direction = sort.direction;\n        if (!active || direction == '') {\n            return data;\n        }\n        return data.sort((a, b) => {\n            let valueA = this.sortingDataAccessor(a, active);\n            let valueB = this.sortingDataAccessor(b, active);\n            // If there are data in the column that can be converted to a number,\n            // it must be ensured that the rest of the data\n            // is of the same type so as not to order incorrectly.\n            const valueAType = typeof valueA;\n            const valueBType = typeof valueB;\n            if (valueAType !== valueBType) {\n                if (valueAType === 'number') {\n                    valueA += '';\n                }\n                if (valueBType === 'number') {\n                    valueB += '';\n                }\n            }\n            // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n            // one value exists while the other doesn't. In this case, existing value should come last.\n            // This avoids inconsistent results when comparing values to undefined/null.\n            // If neither value exists, return 0 (equal).\n            let comparatorResult = 0;\n            if (valueA != null && valueB != null) {\n                // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                if (valueA > valueB) {\n                    comparatorResult = 1;\n                }\n                else if (valueA < valueB) {\n                    comparatorResult = -1;\n                }\n            }\n            else if (valueA != null) {\n                comparatorResult = 1;\n            }\n            else if (valueB != null) {\n                comparatorResult = -1;\n            }\n            return comparatorResult * (direction == 'asc' ? 1 : -1);\n        });\n    };\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @returns Whether the filter matches against the data\n     */\n    filterPredicate = (data, filter) => {\n        // Transform the filter by converting it to lowercase and removing whitespace.\n        const transformedFilter = filter.trim().toLowerCase();\n        // Loops over the values in the array and returns true if any of them match the filter string\n        return Object.values(data).some(value => `${value}`.toLowerCase().includes(transformedFilter));\n    };\n    constructor(initialData = []) {\n        super();\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort\n            ? merge(this._sort.sortChange, this._sort.initialized)\n            : of(null);\n        const pageChange = this._paginator\n            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)\n            : of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterPredicate function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterPredicate.\n        // May be overridden for customization.\n        this.filteredData =\n            this.filter == null || this.filter === ''\n                ? data\n                : data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided paginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn };\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ 'SharingOrInheriting.TitleAddFieldsWhichInherit' | translate }} (new v18)</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <p>\r\n      Shared fields allow you to compose a content-type using fields which were defined in another content-type. These fields exist on this\r\n      content-type, but use the definition incl. label and all other specs from the original field.\r\n    </p>\r\n    <p>\r\n      This is a bit like <strong>Content-Type Inheritance</strong>, but instead of inheritance we're using <strong>composition</strong>,\r\n      which is much more powerful.\r\n    </p>\r\n    <p>\r\n      {{ 'SharingOrInheriting.PickFieldsToInheritFrom' | translate }}\r\n      <br />\r\n      <em> Note that if this app doesn't have published/shared field definitions, the list below will be empty. </em>\r\n    </p>\r\n    <div class=\"eav-tables-div\">\r\n      <mat-card class=\"eav-table-div-left\">\r\n        <table mat-table [dataSource]=\"shareableFields\">\r\n          <ng-container matColumnDef=\"contentType\">\r\n            <th mat-header-cell *matHeaderCellDef><b>Content Type</b></th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\">{{ field.ContentType.Name }}</td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef><b>Name</b></th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\">{{ field.StaticName }}</td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"type\">\r\n            <th mat-header-cell *matHeaderCellDef><b>Type</b></th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\">{{ field.Type }}</td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"share\">\r\n            <th mat-header-cell *matHeaderCellDef><b>Share</b></th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\">\r\n              <button mat-raised-button type=\"button\" (click)=\"selectField(field)\">Select</button>\r\n            </td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"optionsColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: optionsColumns\"></tr>\r\n        </table>\r\n      </mat-card>\r\n\r\n      <mat-card class=\"eav-table-div-right\">\r\n        <form #ngForm=\"ngForm\">\r\n          <table mat-table [dataSource]=\"selectedFields\">\r\n            <ng-container matColumnDef=\"newName\">\r\n              <th mat-header-cell *matHeaderCellDef><b>New Name</b></th>\r\n              <td mat-cell *matCellDef=\"let item; index as i\" class=\"eav-table-cell\">\r\n                <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                  <mat-label>New Name</mat-label>\r\n                  <input\r\n                    matInput\r\n                    [pattern]=\"fieldNamePattern\"\r\n                    [(ngModel)]=\"item.newName\"\r\n                    [name]=\"'StaticName' + i\"\r\n                    #newName=\"ngModel\"\r\n                    [appReservedNames]=\"reservedNames()\"\r\n                  />\r\n                </mat-form-field>\r\n                @if (newName.errors) {\r\n                  @if (newName.errors.pattern) {\r\n                    <app-field-hint [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                  }\r\n                  @if (newName.errors.reservedNames) {\r\n                    <app-field-hint [isError]=\"true\">\r\n                      {{ newName.errors.reservedNames }}\r\n                    </app-field-hint>\r\n                  }\r\n                }\r\n              </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"source\">\r\n              <th mat-header-cell *matHeaderCellDef><b>Source</b></th>\r\n              <td mat-cell *matCellDef=\"let item\" style=\"word-break: break-all\" class=\"eav-table-cell\">\r\n                {{ item.field.ContentType.Name }}/{{ item.field.StaticName }} ({{ item.field.Type }})\r\n              </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"remove\">\r\n              <th mat-header-cell *matHeaderCellDef><b>Remove</b></th>\r\n              <td mat-cell *matCellDef=\"let item\" class=\"eav-table-cell\">\r\n                <button mat-raised-button type=\"button\" (click)=\"removeField(item)\">Remove</button>\r\n              </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"selectedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: selectedColumns\"></tr>\r\n          </table>\r\n        </form>\r\n      </mat-card>\r\n    </div>\r\n\r\n    <!-- Show feature warning -->\r\n    <app-feature-text-info [featureNameId]=\"ContentTypeFieldsReuseDefinitions\" [asInfo]=\"true\">\r\n      <em> Even if the feature is not licensed, it will always work but show warnings. </em>\r\n    </app-feature-text-info>\r\n  </div>\r\n  <!-- Save buttons -->\r\n  <mat-dialog-actions align=\"end\">\r\n    <app-save-close-button-fab\r\n      [ngClass]=\"!ngForm.form.valid || selectedFields.data.length == 0 || saving() ? 'disabled' : ''\"\r\n      [disabled]=\"!ngForm.form.valid || selectedFields.data.length == 0 || saving()\"\r\n      (action)=\"save()\"\r\n    />\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { ChangeDetectorRef, Component, HostBinding, Inject, OnInit, ViewChild, ViewContainerRef, computed, inject } from '@angular/core';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { catchError, concatMap, filter, of, toArray } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { openFeatureDialog } from '../../features/shared/base-feature.component';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { SaveCloseButtonFabComponent } from '../../shared/modules/save-close-button-fab/save-close-button-fab.component';\r\nimport { signalObj } from '../../shared/signals/signal.utilities';\r\nimport { ReservedNamesValidatorDirective } from '../edit-content-type-fields/reserved-names.directive';\r\n\r\n@Component({\r\n  selector: 'app-field-sharing-add-many',\r\n  templateUrl: './field-sharing-add-many.component.html',\r\n  styleUrls: ['./field-sharing-add-many.component.scss'],\r\n  imports: [\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    ReservedNamesValidatorDirective,\r\n    MatDialogActions,\r\n    TranslateModule,\r\n    FeatureTextInfoComponent,\r\n    FieldHintComponent,\r\n    MatIconModule,\r\n    SaveCloseButtonFabComponent,\r\n  ]\r\n})\r\nexport class FieldSharingAddMany extends BaseComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private ngForm: NgForm;\r\n\r\n  #features = inject(FeaturesService);\r\n\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  ContentTypeFieldsReuseDefinitions = FeatureNames.ContentTypeFieldsReuseDefinitions;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: { contentType: ContentType, existingFields: Field[] },\r\n    protected dialog: MatDialogRef<FieldSharingAddMany>,\r\n    private snackBar: MatSnackBar,\r\n    // All this is just for the feature dialog\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n    this.dialog.disableClose = true;\r\n    this.subscriptions.add(\r\n      this.dialog.backdropClick().subscribe(() => {\r\n        if (this.ngForm.dirty || this.selectedFields.data.length > 0) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) return;\r\n        }\r\n        this.dialog.close();\r\n      })\r\n    );\r\n  }\r\n\r\n  optionsColumns: string[] = ['contentType', 'name', 'type', 'share'];\r\n  selectedColumns: string[] = ['newName', 'source', 'remove'];\r\n\r\n  protected shareableFields = new MatTableDataSource<Field>([]);\r\n  protected selectedFields = new MatTableDataSource<NewNameField>([]);\r\n  protected fieldNamePattern = fieldNamePattern;\r\n  protected fieldNameError = fieldNameError;\r\n  #reservedNamesSystem = this.#contentTypesFieldsSvc.getReservedNames().value;\r\n\r\n  reservedNames = computed(() => {\r\n    const reserved = this.#reservedNamesSystem();\r\n    return ReservedNamesValidatorDirective.mergeReserved(reserved, this.dialogData.existingFields);\r\n  });\r\n\r\n  protected saving = signalObj('saving', false);\r\n\r\n  #fieldShareConfigManagement = this.#features.isEnabled[FeatureNames.ContentTypeFieldsReuseDefinitions];\r\n\r\n  ngOnInit() {\r\n\r\n    this.#contentTypesFieldsSvc.getShareableFieldsPromise().then(fields => {\r\n      this.shareableFields.data = fields;\r\n    });\r\n\r\n  }\r\n\r\n  selectField(field: Field) {\r\n    this.selectedFields.data = [...this.selectedFields.data, { newName: field.StaticName, field }];\r\n  }\r\n\r\n  removeField(field: NewNameField) {\r\n    const selectedFields = this.selectedFields.data;\r\n    selectedFields.splice(selectedFields.indexOf(field), 1);\r\n    this.selectedFields.data = [...selectedFields];\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  // When API gets created we will need to send the selected fields to the API\r\n  save() {\r\n    if (!this.#fieldShareConfigManagement()) {\r\n      openFeatureDialog(this.matDialog, FeatureNames.ContentTypeFieldsReuseDefinitions, this.viewContainerRef, this.changeDetectorRef);\r\n    } else {\r\n      this.saving.set(true);\r\n      this.snackBar.open('Saving...');\r\n      of(...this.selectedFields.data).pipe(\r\n        filter(inheritField => !!inheritField.newName),\r\n        concatMap(inheritField =>\r\n          this.#contentTypesFieldsSvc.addInheritedField(\r\n            this.dialogData.contentType.Id,\r\n            inheritField.field.ContentType.Id,\r\n            inheritField.field.Guid,\r\n            inheritField.newName\r\n          ).pipe(catchError(_ => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(_ => {\r\n        this.saving.set(false);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.dialog.close();\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport interface AppSharingFieldsViewModel {\r\n  shareableFields: Field[];\r\n  selectedFields: Field[];\r\n}\r\n\r\ninterface NewNameField {\r\n  newName: string;\r\n  field: Field;\r\n}\r\n","\r\nexport enum SharingOrInheriting {\r\n  None,\r\n  Sharing,\r\n  Inheriting\r\n}\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ title | translate }}\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"dialog.close()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    @switch (initialState) {\r\n      @case (sharingOrInheriting.Sharing) {\r\n        <p>\r\n          This field is published so it can be shared by other Content Types. As such you cannot configure anything here, but just review\r\n          the information.\r\n        </p>\r\n        <div>\r\n          Global Identifier: <strong>{{ dialogData.Guid }}</strong>\r\n        </div>\r\n        <h4>Inherited by</h4>\r\n        <ng-container *ngTemplateOutlet=\"detailsOrWarning\"></ng-container>\r\n      }\r\n      @case (sharingOrInheriting.Inheriting) {\r\n        <p>This field is inheriting it's definition from another previously shared field.</p>\r\n        <h4>Inherits Definition from</h4>\r\n        @if (!features.isEnabled[requiredFeature]()) {\r\n          <ol>\r\n            @for (s of inherited(); track s.complete) {\r\n              <li>{{ s.complete }}</li>\r\n            }\r\n          </ol>\r\n        }\r\n        <ng-container *ngTemplateOutlet=\"detailsOrWarning\"></ng-container>\r\n\r\n        @if (notInherited().length) {\r\n          <h4>Not Inherited Definitions</h4>\r\n          <p>The following definitions are not inherited, so you can specify them on this field:</p>\r\n          <ol>\r\n            @for (s of notInherited(); track s) {\r\n              <li>{{ s }}</li>\r\n            }\r\n          </ol>\r\n        }\r\n      }\r\n      @case (sharingOrInheriting.None) {\r\n        <p>This field is currently not shared or inherited. You can choose to:</p>\r\n        <ul>\r\n          <li>Make it public (<strong>share</strong>) so it can be re-used by other Content Types</li>\r\n          <li>Change it to <strong>inherit</strong> it's definition from another previously shared field</li>\r\n        </ul>\r\n        <br />\r\n        <div>\r\n          <button\r\n            mat-raised-button\r\n            type=\"button\"\r\n            class=\"eav-dialog-action-button\"\r\n            [color]=\"state == sharingOrInheriting.Sharing ? 'accent' : ''\"\r\n            (click)=\"setShare()\"\r\n          >\r\n            Share\r\n          </button>\r\n\r\n          <button\r\n            mat-raised-button\r\n            type=\"button\"\r\n            class=\"eav-dialog-action-button\"\r\n            [color]=\"state == sharingOrInheriting.Inheriting ? 'accent' : ''\"\r\n            (click)=\"startInherit()\"\r\n          >\r\n            Inherit\r\n          </button>\r\n          @switch (state) {\r\n            @case (sharingOrInheriting.Sharing) {\r\n              <p>This will share the field definition for others to use. Save to complete the operation.</p>\r\n            }\r\n            @case (sharingOrInheriting.Inheriting) {\r\n              <p>\r\n                The following fields have the same data type and share their definitions. Select one to inherit from. Some notes:\r\n                <br />\r\n              </p>\r\n              <ul>\r\n                <li>Inheriting will remove/ignore all current definition of this field such as label, hidden, etc.</li>\r\n                <li>\r\n                  If the field you want to inherit the definition from is missing from this list, it's either a different data type or it's\r\n                  not shared.\r\n                </li>\r\n              </ul>\r\n              <mat-card class=\"my-options-wrapper\">\r\n                <table mat-table [dataSource]=\"shareableFields()\" class=\"mat-elevation-z8\">\r\n                  <!-- Column Definition \"Content Type\" -->\r\n                  <ng-container matColumnDef=\"contentType\">\r\n                    <th mat-header-cell *matHeaderCellDef><b>Content Type</b></th>\r\n                    <td mat-cell *matCellDef=\"let field\">{{ field.ContentType.Name }}</td>\r\n                  </ng-container>\r\n                  <!-- Column Definition \"Name\" -->\r\n                  <ng-container matColumnDef=\"name\">\r\n                    <th mat-header-cell *matHeaderCellDef><b>Name</b></th>\r\n                    <td mat-cell *matCellDef=\"let field\">{{ field.StaticName }}</td>\r\n                  </ng-container>\r\n                  <!-- Column Definition \"Type\" -->\r\n                  <ng-container matColumnDef=\"type\">\r\n                    <th mat-header-cell *matHeaderCellDef><b>Type</b></th>\r\n                    <td mat-cell *matCellDef=\"let field\">{{ field.Type }}</td>\r\n                  </ng-container>\r\n                  <!-- Header Row -->\r\n                  <tr mat-header-row *matHeaderRowDef=\"optionsColumns\"></tr>\r\n                  <!-- Repeater for each row -->\r\n                  <tr\r\n                    mat-row\r\n                    *matRowDef=\"let row; columns: optionsColumns\"\r\n                    [ngClass]=\"{ 'my-selected': guid === row.Guid }\"\r\n                    (click)=\"inheritField(row)\"\r\n                  ></tr>\r\n                </table>\r\n              </mat-card>\r\n            }\r\n          }\r\n        </div>\r\n      }\r\n    }\r\n    \r\n    <app-feature-text-info [featureNameId]=\"requiredFeature\" [asInfo]=\"true\">\r\n      <em> Even if the feature is not licensed, it will always work but show warnings. </em>\r\n    </app-feature-text-info>\r\n  </div>\r\n\r\n  <mat-dialog-actions align=\"end\">\r\n    <app-save-close-button-fab\r\n      [ngClass]=\"!(initialState == sharingOrInheriting.None) ? 'disabled' : ''\"\r\n      [disabled]=\"!(initialState == sharingOrInheriting.None)\"\r\n      (action)=\"save()\"\r\n    />\r\n  </mat-dialog-actions>\r\n</div>\r\n\r\n<!-- Reusable part showing a list of ancestors or descendants - or showing a license warning to see more -->\r\n<ng-template #detailsOrWarning>\r\n  @if (features.isEnabled[requiredFeature]()) {\r\n    @if (details().length) {\r\n      <ul>\r\n        @for (field of details(); track field.AttributeId) {\r\n          <li>\r\n            Guid: <strong>{{ field.Guid }}</strong>\r\n            <br />\r\n            Content Type: <strong>{{ field.ContentType.Name }}</strong>\r\n            <br />\r\n            Field: <strong>{{ field.StaticName }}</strong> ({{ field.AttributeId }})\r\n          </li>\r\n        }\r\n      </ul>\r\n    } @else {\r\n      <em> No details available. This field probably does not have any inheriting fields. </em>\r\n    }\r\n  } @else {\r\n    <em>\r\n      You can get more details about the parents by enabling the feature\r\n      <br />\r\n      {{ requiredFeature }}\r\n      <app-feature-icon-text [featureNameId]=\"requiredFeature\"></app-feature-icon-text>.\r\n    </em>\r\n  }\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Inject, signal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport groupBy from 'lodash-es/groupBy';\r\nimport { transient } from '../../../../../core/transient';\r\nimport { FeatureIconTextComponent } from '../../features/feature-icon-text/feature-icon-text.component';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { classLog } from '../../shared/logging';\r\nimport { SaveCloseButtonFabComponent } from '../../shared/modules/save-close-button-fab/save-close-button-fab.component';\r\nimport { computedObj, signalObj } from '../../shared/signals/signal.utilities';\r\nimport { SharingOrInheriting } from './field-sharing-configure.enums';\r\n\r\nconst logSpecs = {\r\n  all: true,\r\n  constructor: true,\r\n}\r\n\r\nconst noInheritGuid = '00000000-0000-0000-0000-000000000000';\r\n\r\n@Component({\r\n  selector: 'app-field-sharing-configure',\r\n  templateUrl: './field-sharing-configure.component.html',\r\n  styleUrls: ['./field-sharing-configure.component.scss'],\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    NgClass,\r\n    NgTemplateOutlet,\r\n    TranslateModule,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconTextComponent,\r\n    MatDialogActions,\r\n    SaveCloseButtonFabComponent,\r\n  ]\r\n})\r\nexport class ShareOrInheritDialogComponent {\r\n\r\n  log = classLog({ ShareOrInheritDialogComponent }, logSpecs);\r\n\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: Field,\r\n    public features: FeaturesService,\r\n    protected dialog: MatDialogRef<ShareOrInheritDialogComponent>,\r\n  ) {\r\n    const l = this.log.fnIf('constructor', { dialogData });\r\n\r\n    const sysS = dialogData.SysSettings;\r\n    if (sysS) {\r\n      if (sysS.Share)\r\n        this.#contentTypesFieldsSvc.getDescendants(dialogData.Id)\r\n          .then(fields => this.details.set(fields));\r\n      else if (sysS.InheritMetadataOf)\r\n        this.#contentTypesFieldsSvc.getAncestors(dialogData.Id)\r\n          .then(fields => this.details.set(fields));\r\n    }\r\n  }\r\n\r\n  requiredFeature = FeatureNames.ContentTypeFieldsReuseDefinitions;\r\n\r\n  details = signalObj<Field[]>('details', []);\r\n\r\n  optionsColumns: string[] = ['contentType', 'name', 'type'];\r\n  message: string;\r\n  state: SharingOrInheriting = SharingOrInheriting.None;\r\n\r\n  // Constants for the UI\r\n  sharingOrInheriting = SharingOrInheriting;\r\n  guid: string = null;\r\n\r\n  shareableFields = signal<Field[]>(undefined);\r\n\r\n  // Figure out the initial state how at the time of opening the dialog\r\n  initialState: SharingOrInheriting = (() => {\r\n    const sysS = this.dialogData.SysSettings;\r\n    const notConfigured = !sysS || (!sysS.Share && !sysS.InheritMetadataOf);\r\n    return notConfigured\r\n      ? SharingOrInheriting.None\r\n      : sysS.Share\r\n        ? SharingOrInheriting.Sharing\r\n        : SharingOrInheriting.Inheriting;\r\n  })();\r\n\r\n  // Assemble i18n title part, using the current state name\r\n  title: string = 'SharingOrInheriting.Title' + this.sharingOrInheriting[this.initialState];\r\n\r\n  /** Prepare info about inheritance, which is kind of compacted into a string */\r\n  #inheritsInfo = computedObj('inheritsInfo', () => {\r\n    const parts = this.dialogData.SysSettings.InheritMetadataOf.split(',');\r\n    const withFieldNames = parts.map(complete => ({\r\n      complete,\r\n      // Guid, required, could be empty-guid\r\n      guid: complete.substring(0, 36),\r\n      // Field name, optional; only required if it's the no-inherit guid\r\n      name: complete.substring(36),\r\n    }));\r\n    return groupBy(withFieldNames, g => g.guid === noInheritGuid ? 'none' : 'inherits');\r\n  });\r\n\r\n  /** Metadata content-type names which are not inherited */\r\n  notInherited = computedObj('notInherited', () => this.#inheritsInfo().none?.map(n => n.name) ?? []);\r\n\r\n  /** Metadata items which are inherited */\r\n  inherited = computedObj('inherited', () => this.#inheritsInfo().inherits ?? []);\r\n\r\n  setShare() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Sharing;\r\n  }\r\n\r\n  startInherit() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Inheriting;\r\n\r\n    // Load possible fields which match the current field type\r\n    this.#contentTypesFieldsSvc.getShareableFieldsFor(this.dialogData.AttributeId)\r\n      .then(fields => this.shareableFields.set(fields));\r\n  }\r\n\r\n  inheritField(field: Field) {\r\n    this.guid = field.Guid;\r\n  }\r\n\r\n  save() {\r\n    if (this.state == SharingOrInheriting.Sharing) {\r\n      this.#contentTypesFieldsSvc.share(this.dialogData.Id)\r\n        .subscribe(() => this.dialog.close());\r\n    } else if (this.state == SharingOrInheriting.Inheriting) {\r\n      this.#contentTypesFieldsSvc.inherit(this.dialogData.Id, this.guid)\r\n        .subscribe(() => this.dialog.close());\r\n    }\r\n  }\r\n\r\n}\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n  <app-grid-with-help style=\"height: 100%\" [helpText]=\"uxHelpText()\" [refresh]=\"refresh()\" [rowLength]=\"fields()?.length\">\r\n    <div class=\"eav-dialog-header\" eav-dialog-header>\r\n      <div class=\"eav-dialog-header__title\">{{ contentType()?.Label || contentType()?.Name }} Data</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"dialog.close()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    @if (fields()?.length > 0) {\r\n      <ag-grid-angular\r\n        class=\"ag-theme-material eav-dialog-content\"\r\n        [rowData]=\"fields()\"\r\n        [gridOptions]=\"gridOptions\"\r\n        (rowDragEnter)=\"onRowDragEnter($event)\"\r\n        (rowDragEnd)=\"onRowDragEnd($event)\"\r\n        (rowDragMove)=\"onRowDragMove($event)\"\r\n        (gridReady)=\"onGridReady($event)\"\r\n        (sortChanged)=\"onSortChanged($event)\"\r\n        (filterChanged)=\"onFilterChanged($event)\"\r\n        [ngClass]=\"{\r\n          'grid-sorted': sortApplied,\r\n          'grid-filtered': filterApplied,\r\n        }\"\r\n      >\r\n      </ag-grid-angular>\r\n    }\r\n    <mat-dialog-actions align=\"end\">\r\n      <!-- @if (isDebug()) { -->\r\n      <button mat-raised-button type=\"button\" (click)=\"addSharedField()\">{{ 'SharingOrInheriting.AddSharedField' | translate }}</button>\r\n      <!-- } -->\r\n      <button\r\n        mat-fab\r\n        mat-elevation-z24\r\n        class=\"grid-fab\"\r\n        tippy=\"Add fields\"\r\n        [disabled]=\"contentType() == null || contentType().EditInfo.ReadOnly\"\r\n        (click)=\"add()\"\r\n      >\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </app-grid-with-help>\r\n</div>\r\n\r\n<router-outlet></router-outlet>\r\n","import { ColumnApi, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowClassParams, RowDragEvent, SortChangedEvent } from '@ag-grid-community/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { Component, computed, OnInit, signal, ViewContainerRef } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../core';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ConfirmDeleteDialogComponent } from '../app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.component';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { AgGridHelper } from '../shared/ag-grid/ag-grid-helper';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { GridWithHelpComponent, HelpTextConst } from '../shared/ag-grid/grid-with-help/grid-with-help.component';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { ContentTypesFieldsService } from '../shared/fields/content-types-fields.service';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { InputTypeHelpers } from '../shared/fields/input-type-helpers';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep, ItemAddIdentifier, ItemEditIdentifier, ItemIdentifier } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { ContentTypeFieldsActionsComponent } from './content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsSpecialComponent } from './content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title/content-type-fields-title.models';\r\nimport { ContentTypeFieldsTypeComponent } from './content-type-fields-type/content-type-fields-type.component';\r\nimport { FieldSharingAddMany } from './field-sharing-add-many/field-sharing-add-many.component';\r\nimport { ShareOrInheritDialogComponent } from './field-sharing-configure/field-sharing-configure.component';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  styleUrls: ['./content-type-fields.component.scss'],\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    NgClass,\r\n    MatDialogActions,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n    TranslateModule,\r\n    GridWithHelpComponent,\r\n  ]\r\n})\r\nexport class ContentTypeFieldsComponent implements OnInit {\r\n\r\n  #dialogRouter = transient(DialogRoutingService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    protected dialog: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef, // for dependency injection in the dialog\r\n  ) { }\r\n\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n\r\n  /** Signal to trigger reloading of data */\r\n  refresh = signal(0);\r\n\r\n  // UI Help Text for the UX Help Info Card\r\n  #helpTextConst: HelpTextConst = {\r\n    empty: {\r\n      description: '<p><b>This is where you manage Fields</b></p>',\r\n      hint: \"<p>Click the (+) in the bottom right corner to create your first Field (think: column).</p>\"\r\n    },\r\n    content: {\r\n      description: '<p><b>These are the Fields of this Content-Type</b> <br>They are similar to database columns.</p>',\r\n      hint: '<p>Click on the <em>Name</em> to configure it or on the <em>Input</em> to change the type. <br><br>You can also create new fields, share field definitions, manage field metadata/permissions or rename fields.</p>'\r\n    }\r\n  };\r\n\r\n  uxHelpText = computed(() => {\r\n    const data = this.fields();\r\n    return data?.length === 0 ? this.#helpTextConst.empty : this.#helpTextConst.content;\r\n  })\r\n\r\n  contentType = this.#contentTypesSvc.getType(this.#contentTypeStaticName).value;\r\n\r\n  fields = signal<Field[]>(undefined);\r\n\r\n  gridOptions = this.#buildGridOptions();\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n\r\n  #gridApi: GridApi;\r\n  #columnApi: ColumnApi;\r\n  #rowDragSuppressed = false;\r\n\r\n  ngOnInit() {\r\n    this.#fetchFields();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.#fetchFields());\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApi = params.api;\r\n    this.#columnApi = params.columnApi;\r\n  }\r\n\r\n  onRowDragEnter(_: RowDragEvent) {\r\n    this.#gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(_: RowDragEvent) {\r\n    this.#gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields().map(field => field.Id);\r\n    this.#contentTypesFieldsSvc.reOrder(idArray, this.contentType()).subscribe(() => {\r\n      this.#fetchFields(() => {\r\n        this.#gridApi.setEnableCellTextSelection(true);\r\n        this.#gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const overNode = event.overNode as { data: Field };\r\n    if (!overNode) return;\r\n    const movingNode = event.node as { data: Field };\r\n    if (movingNode === overNode) return;\r\n\r\n    const newFields = [...this.fields()];\r\n    const fromIndex = newFields.indexOf(movingNode.data);\r\n    const toIndex = newFields.indexOf(overNode.data);\r\n    const reordered = this.#moveInArray(newFields, fromIndex, toIndex);\r\n    this.fields.set(reordered);\r\n    this.#gridApi.clearFocusedCell();\r\n  }\r\n\r\n  #moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n    return [...arr];\r\n  }\r\n\r\n  onSortChanged(_: SortChangedEvent) {\r\n    const columnStates = this.#columnApi.getColumnState();\r\n    this.sortApplied = columnStates.some(state => state.sort != null);\r\n    this.#suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(_: FilterChangedEvent) {\r\n    const filterModel = this.#gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.#suppressRowDrag();\r\n  }\r\n\r\n  #suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.#rowDragSuppressed) {\r\n      this.#rowDragSuppressed = true;\r\n      this.#gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.#rowDragSuppressed) {\r\n      this.#rowDragSuppressed = false;\r\n      this.#gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.#dialogRouter.navRelative([`add/${this.#contentTypeStaticName}`]);\r\n  }\r\n\r\n  addSharedField() {\r\n    this.matDialog.open(FieldSharingAddMany, {\r\n      autoFocus: false,\r\n      width: '1600px',\r\n      data: { contentType: this.contentType(), existingFields: this.fields() },\r\n      viewContainerRef: this.viewContainerRef, // for dependency injection in the dialog\r\n    }).afterClosed().subscribe(() => this.#fetchFields());\r\n  }\r\n\r\n  #nameCellRenderer(params: Omit<ICellRendererParams, 'data'> & { data: Field }) {\r\n    const inputType = params.data.InputType;\r\n\r\n    if (InputTypeHelpers.endsPreviousGroup(inputType))\r\n      return params.value;\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields()) {\r\n      if (InputTypeHelpers.isGroupStart(inputType)) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (InputTypeHelpers.isGroupEnd(inputType)) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === params.data.StaticName)\r\n        break;\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  #fetchFields(callback?: () => void) {\r\n    this.#contentTypesFieldsSvc.getFieldsPromise(this.#contentTypeStaticName).then(fields => {\r\n      this.fields.set(fields);\r\n      if (callback != null)\r\n        callback();\r\n    });\r\n  }\r\n\r\n  // 2pp: made \"Name\" a link with urlTo - so not in use anymore\r\n  // #editFieldMetadata(field: Field) {\r\n  //   // If this field is inherited and therefor has no own metadata, show a snackbar and exit\r\n  //   if (field.SysSettings?.InheritMetadataOf) {\r\n  //     if (!Object.keys(field.ConfigTypes).length) {\r\n  //       this.snackBar.open('This field inherits all configuration so there is nothing to edit.', null, { duration: 3000 });\r\n  //       return;\r\n  //     }\r\n  //     this.snackBar.open('This field inherits some configuration. Edit will only show configuration which is not inherited.', null, { duration: 5000 });\r\n  //   }\r\n\r\n  //   // if this field is shared/can-be-inherited, show warning so the user is aware of it\r\n  //   if (field.SysSettings?.Share)\r\n  //     this.snackBar.open('This field is shared, so changing it will affect all other fields inheriting it.', null, { duration: 5000 });\r\n\r\n  //   const form: EditForm = {\r\n  //     items: Object.keys(field.ConfigTypes).map((t) => this.#createItemDefinition(field, t))\r\n  //   };\r\n  //   // console.warn('2dm - editFieldMetadata', field.ConfigTypes, form);\r\n  //   const formUrl = convertFormToUrl(form);\r\n  //   this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  // }\r\n\r\n  #createItemDefinition(field: Field, metadataType: string): ItemAddIdentifier | ItemEditIdentifier {\r\n    // The keys could start with an @ but may not, and in some cases we need it, others we don't\r\n    const keyForMdLookup = metadataType.replace('@', '');\r\n    const newItemTypeName = ('@' + metadataType).replace('@@', '@');\r\n\r\n    // Is an item of this type already loaded? Then just edit it, otherwise request new as Metadata\r\n    const existingMd = field.Metadata[keyForMdLookup];\r\n    return existingMd != null\r\n      ? EditPrep.editId(existingMd.Id) // if defined, return the entity-number to edit\r\n      : {\r\n        ...EditPrep.newMetadata(field.Id, newItemTypeName, eavConstants.metadata.attribute),\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n  #setTitle(field: Field) {\r\n    this.snackBar.open('Setting title...');\r\n    this.#contentTypesFieldsSvc.setTitle(field, this.contentType()).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.#fetchFields();\r\n    });\r\n  }\r\n\r\n  // #changeInputType(field: Field) {\r\n  //   this.#dialogRouter.navRelative([`update/${this.#contentTypeStaticName}/${field.Id}/inputType`]);\r\n  // }\r\n\r\n  #rename(field: Field) {\r\n    this.#dialogRouter.navRelative([`update/${this.#contentTypeStaticName}/${field.Id}/name`]);\r\n  }\r\n\r\n  #delete(field: Field) {\r\n    this.matDialog.open(ConfirmDeleteDialogComponent, {\r\n      autoFocus: false,\r\n      data: {\r\n        entityId: field.Id,\r\n        entityTitle: field.StaticName,\r\n        message: \"Delete Item?\",\r\n        hasDeleteSnackbar: true\r\n      },\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '400px',\r\n    }).afterClosed().subscribe(isConfirmed => {\r\n      if (!isConfirmed) return;\r\n      this.#contentTypesFieldsSvc.delete(field, this.contentType()).subscribe(() => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.#fetchFields();\r\n      });\r\n    })\r\n  }\r\n\r\n  #openPermissions(field: Field) {\r\n    this.#dialogRouter.navRelative([GoToPermissions.getUrlAttribute(field.Id)]);\r\n  }\r\n\r\n  #openImageConfiguration(field: Field) {\r\n    const imgConfig = field.imageConfiguration;\r\n    if (imgConfig?.isRecommended != true)\r\n      throw new Error('This field does not expect to have an image configuration');\r\n\r\n    const itemIdentifier: ItemIdentifier = imgConfig.entityId\r\n      ? EditPrep.editId(imgConfig.entityId)\r\n      : EditPrep.newMetadata(field.Id, imgConfig.typeName, eavConstants.metadata.attribute);\r\n    const formUrl = convertFormToUrl({ items: [itemIdentifier] });\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #openMetadata(field: Field) {\r\n    const url = GoToMetadata.getUrlAttribute(\r\n      field.Id,\r\n      `Metadata for Field: ${field.StaticName} (${field.Id})`,\r\n    );\r\n    this.#dialogRouter.navRelative([url]);\r\n  }\r\n\r\n  // Add this method - required for the Name column to generate the edit URL for a field\r\n  #fieldEditUrl(field: Field): string {\r\n    const form: EditForm = {\r\n      items: Object.keys(field.ConfigTypes).map((t) => this.#createItemDefinition(field, t))\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    return '#' + this.#dialogRouter.urlSubRoute(`edit/${formUrl}`);\r\n  }\r\n\r\n  #inputTypeEditUrl(field: Field): string {\r\n    return '#' + this.#dialogRouter.urlSubRoute(`update/${this.#contentTypeStaticName}/${field.Id}/inputType`);\r\n  }\r\n\r\n  #shareOrInherit(field: Field) {\r\n    const shareOrInheritDialogRef = this.matDialog.open(ShareOrInheritDialogComponent, {\r\n      autoFocus: false,\r\n      width: '800px',\r\n      data: field,\r\n      viewContainerRef: this.viewContainerRef, // for dependency injection in the dialog\r\n    });\r\n    shareOrInheritDialogRef.afterClosed().subscribe(() => this.#fetchFields());\r\n  }\r\n\r\n  //#region Grid Options\r\n\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      getRowClass(params: RowClassParams) {\r\n        const field: Field = params.data;\r\n        const rowClass: string[] = [];\r\n        if (field.EditInfo.DisableSort) { rowClass.push('disable-row-drag'); }\r\n        if (InputTypeHelpers.isGroupStart(field.InputType)) { rowClass.push('group-start-row'); }\r\n        if (InputTypeHelpers.isGroupEnd(field.InputType)) { rowClass.push('group-end-row'); }\r\n        return rowClass;\r\n      },\r\n      columnDefs: [\r\n        {\r\n          rowDrag: true,\r\n          width: 18,\r\n          cellClass: 'no-select no-padding no-outline'.split(' '),\r\n        },\r\n        {\r\n          field: 'Title',\r\n          width: 42,\r\n          cellClass: 'secondary-action no-padding no-outline'.split(' '),\r\n          valueGetter: (p: { data: Field }) => p.data.IsTitle,\r\n          cellRenderer: ContentTypeFieldsTitleComponent,\r\n          cellRendererParams: (() => ({\r\n            onSetTitle: (field) => this.#setTitle(field),\r\n          } satisfies ContentTypeFieldsTitleParams))(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWidePrimary,\r\n          headerName: 'Name',\r\n          field: 'StaticName',\r\n          cellClass: (p: { data: Field }) => `${p.data.EditInfo.DisableEdit ? 'no-outline' : 'primary-action highlight'}`.split(' '),\r\n          cellRenderer: (params: ICellRendererParams & { data: Field }) =>\r\n            AgGridHelper.cellLink(\r\n              this.#fieldEditUrl(params.data),\r\n              params.value\r\n            ),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          field: 'Type',\r\n          width: 70,\r\n          valueGetter: (p: { data: Field }) => p.data.Type,\r\n          cellRenderer: ContentTypeFieldsTypeComponent,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          headerName: 'Input',\r\n          field: 'InputType',\r\n          width: 160,\r\n          cellClass: (p: { data: Field }) => `${p.data.EditInfo.DisableEdit ? 'no-outline' : 'primary-action highlight'}`.split(' '),\r\n          valueGetter: (p: { data: Field }) => p.data.InputType.substring(p.data.InputType.indexOf('-') + 1),\r\n          cellRenderer: (params: ICellRendererParams & { data: Field }) =>\r\n            AgGridHelper.cellLink(\r\n              this.#inputTypeEditUrl(params.data),\r\n              params.value\r\n            ),\r\n        },\r\n        {\r\n          field: 'Label',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (p: { data: Field }) => p.data.Metadata?.All?.Name,\r\n        },\r\n        {\r\n          field: 'Special',\r\n          width: 66,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          cellRenderer: ContentTypeFieldsSpecialComponent,\r\n        },\r\n        {\r\n          field: 'Notes',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (p: { data: Field }) => p.data.Metadata?.All?.Notes,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight5,\r\n          cellRenderer: ContentTypeFieldsActionsComponent,\r\n          cellRendererParams: (() => ({\r\n            do: (verb, field) => {\r\n              switch (verb) {\r\n                case 'rename': this.#rename(field); break;\r\n                case 'delete': this.#delete(field); break;\r\n                case 'permissions': this.#openPermissions(field); break;\r\n                case 'metadata': this.#openMetadata(field); break;\r\n                case 'shareOrInherit': this.#shareOrInherit(field); break;\r\n                case 'image': this.#openImageConfiguration(field); break;\r\n              }\r\n            }\r\n          } satisfies ContentTypeFieldsActionsParams))(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n\r\n  //#endregion\r\n}","import { ChangeDetectorRef, Directive, ViewContainerRef, inject, input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { FeaturesService } from '../features.service';\r\n\r\n/**\r\n * Base component for various UI components which inform that a feature is not enabled.\r\n * It's meant to show the indicator/warning, and open a dialog with more information about the feature.\r\n */\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n\r\n  /** Feature NameId to check */\r\n  featureNameId = input.required<string>();\r\n\r\n  /** When to show it - typically when it is _not_ enabled (default) */\r\n  showIf = input<boolean>(false);\r\n\r\n  #matDialog = inject(MatDialog);\r\n  #viewContainerRef = inject(ViewContainerRef);\r\n  #changeDetectorRef = inject(ChangeDetectorRef);\r\n  #featuresService = inject(FeaturesService);\r\n\r\n  constructor() { }\r\n\r\n  feature = computedObj('feature', () => this.#featuresService.getCurrent(this.featureNameId()));\r\n\r\n  show = computedObj('show', () => {\r\n    const feat = this.feature();\r\n    if (feat == null) return false;\r\n    return this.showIf() == (feat?.isEnabled ?? false);\r\n  })\r\n\r\n  openDialog() {\r\n    openFeatureDialog(this.#matDialog, this.featureNameId(), this.#viewContainerRef, this.#changeDetectorRef);\r\n  }\r\n}\r\n\r\nexport function openFeatureDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n  dialog.open(FeatureInfoDialogComponent, {\r\n    autoFocus: false,\r\n    data: featureId,\r\n    viewContainerRef: viewContainerRef,\r\n    width: '400px',\r\n  });\r\n\r\n  changeDetectorRef?.markForCheck();\r\n}\r\n","export class AgGridHelper {\r\n  public static cellLink(link: string, body: string, classes?: string): string {\r\n    return `<a class=\"default-link fill-cell ${classes}\" href=\"${link}\">${body}</a>`;\r\n  }\r\n}","import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\nclass ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, decorators: [{\n            type: Injectable\n        }] });\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nclass ErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nexport { ErrorStateMatcher as E, ShowOnDirtyErrorStateMatcher as S };\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  ContentTypeFieldsReuseDefinitions: 'ContentTypeFieldsReuseDefinitions',\r\n  AppExportAssetsAdvanced: 'AppExportAssetsAdvanced',\r\n  DataExportImportBundles: 'DataExportImportBundles',\r\n\r\n  // Picker features\r\n  PickerUiCheckbox: 'PickerUiCheckbox',\r\n  PickerUiRadio: 'PickerUiRadio',\r\n  PickerSourceCsv: 'PickerSourceCsv',\r\n  PickerSourceAppAssets: 'PickerSourceAppAssets',\r\n  PickerFormulas: 'PickerFormulas',\r\n  PickerUiMoreInfo: 'PickerUiMoreInfo',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { ObserversModule } from '@angular/cdk/observers';\nimport * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nimport { j as MatFormField, M as MatLabel, b as MatError, c as MatHint, e as MatPrefix, g as MatSuffix } from './form-field-C9DZXojn.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\n\nclass MatFormFieldModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            ObserversModule,\n            MatFormField,\n            MatLabel,\n            MatError,\n            MatHint,\n            MatPrefix,\n            MatSuffix], exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            ObserversModule,\n            MatFormField, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        ObserversModule,\n                        MatFormField,\n                        MatLabel,\n                        MatError,\n                        MatHint,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                    exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule],\n                }]\n        }] });\n\nexport { MatFormFieldModule as M };\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n    selector: 'app-field-hint',\r\n    templateUrl: './field-hint.component.html',\r\n    styleUrls: ['./field-hint.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        NgClass,\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Injectable, signal, Signal } from '@angular/core';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { Feature } from '../models';\r\n\r\nconst webApiFeatureDetails = \"admin/feature/details\";\r\n@Injectable()\r\nexport class FeatureDetailService extends HttpServiceBaseSignal {\r\n  \r\n  getFeatureDetail(nameId: Signal<string>) {\r\n    return this.newHttpResource<Feature>(() => ({\r\n      url: this.apiUrl(webApiFeatureDetails),\r\n      params: { nameId: nameId() },\r\n    }));\r\n  }\r\n\r\n  getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n    const featureList = signal<Feature[]>([]);\r\n    for (const nameId of nameIds) {\r\n\r\n      this.fetchPromise<Feature>(webApiFeatureDetails, {\r\n        params: { nameId }\r\n      }).then(feature => {\r\n        featureList.update(prev => [...prev, feature]);\r\n      });\r\n    }\r\n    return featureList;\r\n  }\r\n}\r\n","@if (feature()) {\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">\r\n        {{ feature().name }}\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p [innerHtml]=\"feature().description | safeHtml\"></p>\r\n      <!-- Name ID -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">ID:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span (click)=\"clipboard.copyToClipboard(feature().nameId)\">{{ feature().nameId }}</span>\r\n        </div>\r\n      </div>\r\n      <!-- Status -->\r\n      @if (mySpecs().showStatus) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">{{ 'Features.Status' | translate }}:</div>\r\n          <div class=\"eav-info-row__value\">\r\n            <span>{{ (feature().isEnabled ? 'Features.Active' : 'Features.NotActive') | translate }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- GUID -->\r\n      @if (mySpecs().showGuid) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">GUID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span (click)=\"clipboard.copyToClipboard(feature().guid)\">{{ feature().guid }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- Security Rating -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Security Rating:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ feature().security.Impact + ': ' + feature().security.Message }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <a [href]=\"feature().link\" target=\"_blank\" mat-raised-button>\r\n        <mat-icon>open_in_new</mat-icon>\r\n        Find out more\r\n      </a>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { Component, Inject, input, Optional } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MAT_DIALOG_DATA, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core/transient';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { computedObj } from '../../../shared/signals/signal.utilities';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-feature-details-dialog',\r\n  templateUrl: './feature-details-dialog.component.html',\r\n  styleUrls: ['./feature-details-dialog.component.scss'],\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    SafeHtmlPipe,\r\n    TranslateModule,\r\n    MatDialogActions,\r\n  ]\r\n})\r\nexport class FeatureDetailsDialogComponent {\r\n  specs = input<FeatureDetailsDialogData>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_DIALOG_DATA) private dialogSpecs: FeatureDetailsDialogData,\r\n    protected dialog: MatDialogRef<FeatureDetailsDialogComponent>,\r\n  ) { }\r\n\r\n  protected mySpecs = computedObj('mySpecs', () => this.specs() ?? this.dialogSpecs);\r\n  protected feature = computedObj('feature', () => this.mySpecs()?.feature);\r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n}\r\n","/**\n * Class that tracks the error state of a component.\n * @docs-private\n */\nclass _ErrorStateTracker {\n    _defaultMatcher;\n    ngControl;\n    _parentFormGroup;\n    _parentForm;\n    _stateChanges;\n    /** Whether the tracker is currently in an error state. */\n    errorState = false;\n    /** User-defined matcher for the error state. */\n    matcher;\n    constructor(_defaultMatcher, ngControl, _parentFormGroup, _parentForm, _stateChanges) {\n        this._defaultMatcher = _defaultMatcher;\n        this.ngControl = ngControl;\n        this._parentFormGroup = _parentFormGroup;\n        this._parentForm = _parentForm;\n        this._stateChanges = _stateChanges;\n    }\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const matcher = this.matcher || this._defaultMatcher;\n        const control = this.ngControl ? this.ngControl.control : null;\n        const newState = matcher?.isErrorState(control, parent) ?? false;\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this._stateChanges.next();\n        }\n    }\n}\n\nexport { _ErrorStateTracker as _ };\n","import { AgGridAngular } from '@ag-grid-community/angular';\r\nimport { Component, contentChild, effect, ElementRef, input, untracked, viewChild } from '@angular/core';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\n\r\nexport interface HelpTextConst {\r\n  empty: GridWithHelpInput;\r\n  content: GridWithHelpInput;\r\n}\r\n\r\nexport interface GridWithHelpInput {\r\n  description: string;\r\n  hint: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-grid-with-help',\r\n  imports: [],\r\n  templateUrl: './grid-with-help.component.html',\r\n  styleUrl: './grid-with-help.component.scss'\r\n})\r\n\r\nexport class GridWithHelpComponent {\r\n  // ViewChild and ContentChild references - Access to DOM elements\r\n  gridWrapper = viewChild(\"gridWrapper\", { read: ElementRef });\r\n  agGrid = contentChild(AgGridAngular, { read: ElementRef });\r\n  dialogAction = contentChild(MatDialogActions, { read: ElementRef });\r\n\r\n  // Input properties - Required data from parent component\r\n  readonly helpText = input.required<GridWithHelpInput>({});\r\n  readonly refresh = input.required<number>();\r\n  readonly rowLength = input.required<number>();\r\n\r\n  // Constants - Fixed values for layout calculations\r\n  readonly DEFAULT_ROW_HEIGHT = 47; // Default height for AG Grid rows in pixels\r\n  readonly GRID_HEADER_HEIGHT = 64; // Height of AG Grid header in pixels\r\n  readonly HELP_CARD_BUFFER = 12;   // Additional buffer space for help card in pixels\r\n\r\n  constructor() {\r\n    // Effect that reacts to changes in refresh and rowLength signals\r\n    effect(() => {\r\n      const refresh = this.refresh();\r\n      const rowLength = this.rowLength();\r\n      const gridWrapperEl = this.gridWrapper()?.nativeElement;\r\n\r\n      // Early return if grid wrapper element is not available\r\n      if (!gridWrapperEl) return;\r\n\r\n      // Untracked execution to prevent unnecessary effect re-runs during layout updates\r\n      untracked(() => this.#updateLayout(gridWrapperEl, rowLength));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Main layout update method - Handles the dynamic sizing and positioning of grid and help card\r\n   * @param gridWrapperEl - The main container element\r\n   * @param rowLength - Number of rows in the grid\r\n   */\r\n  #updateLayout(gridWrapperEl: HTMLElement, rowLength: number): void {\r\n    // Get references to essential DOM elements\r\n    const agGridEl = this.agGrid()?.nativeElement;\r\n    const dialogActionEl = this.dialogAction()?.nativeElement;\r\n    const helpCard = gridWrapperEl.querySelector('.help-info-card') as HTMLElement;\r\n\r\n    helpCard.classList.toggle('center-center', rowLength === 0);\r\n\r\n    // Early return if critical elements are missing\r\n    if (!agGridEl || !dialogActionEl) return;\r\n\r\n    helpCard.style.flex = \"\";\r\n\r\n    // Calculate all necessary dimensions for layout\r\n    const dimensions = this.#calculateDimensions(gridWrapperEl, agGridEl, dialogActionEl, helpCard, rowLength);\r\n\r\n    // Set AG Grid height based on row count and maximum height to prevent overflow\r\n    agGridEl.style.flex = dimensions.rowHeight ? `0 0 ${dimensions.agGridHeight}px` : '0px';\r\n\r\n    // Outer Container for max Size\r\n    const sideNavEl = document.querySelector<HTMLElement>('.mat-sidenav-content'); // with SideNav (settings)\r\n    const dialogEl = document.querySelector<HTMLElement>('.mat-mdc-dialog-container'); // only Dialog (Content)\r\n\r\n    const outerContainer = sideNavEl ?? dialogEl;\r\n    const maxHeight = outerContainer.clientHeight - dimensions.dialogHeaderHeight - dimensions.dialogActionHeight;\r\n\r\n    agGridEl.style.maxHeight = `${maxHeight}px`;\r\n\r\n    // Determine if help card should be hidden when content exceeds available space\r\n    const shouldHideHelp = dimensions.helpCardHeight + dimensions.agGridHeight + dimensions.dialogActionHeight + dimensions.dialogHeaderHeight > dimensions.wrapperHeight;\r\n\r\n    helpCard.style.flex = \"1 1 auto\";\r\n    // Remove Help card from layout if it should be hidden\r\n    helpCard?.classList.toggle('hidden-help-info-card', shouldHideHelp);\r\n  }\r\n\r\n  // Calculate dimensions for AG Grid and help card based on current layout\r\n  #calculateDimensions(gridWrapperEl: HTMLElement, agGridEl: HTMLElement, dialogActionEl: HTMLElement, helpCard: HTMLElement, rowLength: number) {\r\n    const rowHeight = agGridEl.querySelector('.ag-row')?.clientHeight ?? this.DEFAULT_ROW_HEIGHT;\r\n    const agGridHeight = this.GRID_HEADER_HEIGHT + (rowLength * rowHeight);\r\n    const helpCardHeight = helpCard.clientHeight + this.HELP_CARD_BUFFER;\r\n    const dialogActionHeight = dialogActionEl.offsetHeight;\r\n    const dialogHeaderHeight = gridWrapperEl.querySelector('.eav-dialog-header')?.clientHeight ?? 0;\r\n    // Get total available wrapper height\r\n    const wrapperHeight = gridWrapperEl.offsetHeight;\r\n    return {\r\n      rowHeight,\r\n      agGridHeight,\r\n      helpCardHeight,\r\n      dialogActionHeight,\r\n      dialogHeaderHeight,\r\n      wrapperHeight\r\n    };\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"grid-wrapper-dynamic\" #gridWrapper>\r\n  <ng-content select=\"[eav-dialog-header]\"></ng-content>\r\n  <ng-content select=\"[eav-dialog-content]\"> </ng-content>\r\n  <ng-content select=\"ag-grid-angular\"></ng-content>\r\n  <div class=\"help-info-card\">\r\n    <div class=\"help-info-card-text\">\r\n      <span [innerHTML]=\"helpText().description\"></span>\r\n      <span [innerHTML]=\"helpText().hint\"></span>\r\n    </div>\r\n  </div>\r\n  <ng-content select=\"mat-dialog-actions\"></ng-content>\r\n</div>\r\n","@if (show()) {\r\n  <div class=\"feature-text-info\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: feature()\">\r\n    <!-- Icon column -->\r\n    <mat-icon class=\"icon icon-{{icon()}}\">{{ icon() }}</mat-icon>\r\n    <!-- Text column -->\r\n    <div class=\"feature-text-info-content\">\r\n      <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n      <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n}\r\n","import { Component, input } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss'],\r\n  imports: [\r\n    MatIconModule,\r\n    TranslateModule,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  asInfo = input<boolean>(false);\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  icon = computedObj('icon', () => this.asInfo() ? 'info' : 'warning');\r\n}\r\n","@if (featureDetails(); as feature) {\r\n  <app-feature-details-dialog [specs]=\"{ feature: feature, showGuid: false, showStatus: true, showClose: true }\"></app-feature-details-dialog>\r\n}\r\n","import { Component, Inject, OnInit, signal } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { transient } from \"projects/core\";\r\nimport { FeatureDetailsDialogComponent } from \"../../apps-management/licence-info/feature-details-dialog/feature-details-dialog.component\";\r\nimport { ClipboardService } from \"../../shared/services/clipboard.service\";\r\nimport { FeatureDetailService } from \"../services/feature-detail.service\";\r\n\r\n@Component({\r\n    selector: 'app-feature-info-dialog',\r\n    templateUrl: './feature-info-dialog.component.html',\r\n    imports: [\r\n        FeatureDetailsDialogComponent\r\n    ]\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  #featureDetailSvc = transient(FeatureDetailService);\r\n  featureId = signal<string>('');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    protected dialog: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.featureId.set(this.route.snapshot.data['featureId'] || this.dialogData || '');\r\n    this.featureDetails = this.#featureDetailSvc.getFeatureDetail(this.featureId).value;\r\n  }\r\n\r\n  protected featureDetails: any;\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n"],"x_google_ignoreList":[9,10,11,21,23,29]}