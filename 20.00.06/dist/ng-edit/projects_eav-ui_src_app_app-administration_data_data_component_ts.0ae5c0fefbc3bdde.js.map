{"version":3,"file":"projects_eav-ui_src_app_app-administration_data_data_component_ts.0ae5c0fefbc3bdde.js","mappings":"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","names":["i0","ctx_r0","params","urlTo","contentType","Metadata","length","Permissions","Count","_r2","do","EditInfo","DisableRename","DisableDelete","DataActionsComponent","AgActionsAlwaysRefresh","agInit","this","data","enablePermissions","enablePermissionsGetter","guidRegex","test","NameId","static","__ngFactoryType__","debug_node_JnOYh9kg","VBU","selectors","features","decls","vars","consts","template","rf","ctx","DataActionsComponent_Conditional_1_Template","DataActionsComponent_Conditional_2_Template","DataActionsComponent_Conditional_3_Template","DataActionsComponent_Conditional_4_Template","DataActionsComponent_Conditional_5_Template","DataActionsComponent_Conditional_6_Template","DataActionsComponent_ng_template_12_Template","DisableEdit","Properties","DisableMetadata","menu_r3","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","MatMenuModule","i4","TippyDirective","encapsulation","DataFieldsComponent","value","tooltip","ReadOnly","ReadOnlyMessage","SharedDefId","icon","refresh","fieldsUrl","DataItemsComponent","constructor","router","inject","Router","itemsUrl","addItemUrl","styles","$event","_r1","ctx_r1","filesDropped","contentTypes","gridOptions","scopeOption_r3","name","label","_r4","createGhost","DataComponent","BaseComponent","#snackBar","#matDialog","#contentTypeSvc","#contentExportSvc","#dialogConfigSvc","#dialogRouter","#helpTextConst","viewContainerRef","super","isDebug","GlobalConfigService","MatSnackBar","MatDialog","transient","ContentTypesService","ContentExportService","DialogConfigAppService","DialogRoutingService","empty","description","hint","content","uxHelpText","computed","signal","undefined","scope","scopeOptions","scopeSelected","find","s","#buildGridOptions","dropdownInsertValue","ngOnInit","#fetchScopes","#refreshScopeOnRouteChange","doOnDialogClosedWithData","#fetchContentTypes","getCurrent$","subscribe","Context","Enable","AppPermissions","files","importFile","substring","lastIndexOf","toLocaleLowerCase","from","toString","pipe","take","fileString","contentTypeName","split","ct","Name","#openDataImport","open","duration","importType","navRelative","state","urlToImportType","#urlTo","editContentType","retrieveContentTypesPromise","then","_compareLabel","Label","replace","RegExp","set","update","v","eavConstants","scopes","default","getScopesV2Promise","scopeList","manual","filter","sOld","sNew","withNiceLabel","map","countInfo","typesInherited","typesTotal","sourceName","window","prompt","_","changeScope","newScope","subscriptions","add","events","event","NavigationEnd","getParam","startWith","mapUntilChanged","m","option","includes","newScopeOption","typesOfApp","defaultGridOptions","columnDefs","ColumnDefinitions","IdWithDefaultRenderer","cellRendererParams","idFieldParamsTooltipGetter","TextWidePrimary","headerName","field","sort","comparator","valueA","valueB","nodeA","nodeB","isInverted","localeCompare","cellRenderer","p","AgGridHelper","cellLink","Items","#routeAddItem","Fields","TextWideMin100","cellClass","TextWideFlex3","valueGetter","Description","ActionsPinnedRight4","verb","#routeCreateOrEditMetadata","GoToPermissions","getUrlContentType","GoToMetadata","Id","GoToDevRest","getUrlData","#exportType","#deleteContentType","url","urlSubRoute","convertFormToUrl","items","EditPrep","newFromType","urlToNewContentType","form","editId","newMetadata","metadata","Prefill","exportJson","ConfirmDeleteDialogComponent","autoFocus","entityId","entityTitle","message","hasDeleteSnackbar","width","afterClosed","isConfirmed","delete","DataComponent_Conditional_1_Template","DataComponent_For_10_Template","DataComponent_Conditional_19_Template","tmp_2_0","tmp_3_0","tmp_5_0","MatDialogActions","MatFormFieldModule","MatSelectModule","FormsModule","MatOptionModule","MatButtonModule","i5","RouterOutlet","SxcGridModule","i6","DragAndDropDirective","GridWithHelpComponent"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/data/data-actions/data-actions.component.html","./projects/eav-ui/src/app/app-administration/data/data-actions/data-actions.component.ts","./projects/eav-ui/src/app/app-administration/data/data-fields/data-fields.component.ts","./projects/eav-ui/src/app/app-administration/data/data-fields/data-fields.component.html","./projects/eav-ui/src/app/app-administration/data/data-items/data-items.component.ts","./projects/eav-ui/src/app/app-administration/data/data-items/data-items.component.html","./projects/eav-ui/src/app/app-administration/data/data.component.html","./projects/eav-ui/src/app/app-administration/data/data.component.ts"],"sourcesContent":["<div class=\"actions-component\">\r\n  @if (!contentType.EditInfo.DisableEdit || contentType.Properties) {\r\n    <a [href]=\"params.urlTo('createUpdateMetaData', contentType)\" class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Description and more\">\r\n      <mat-icon>edit</mat-icon>\r\n    </a>\r\n  } @else {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>edit</mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!contentType.EditInfo.DisableMetadata) {\r\n    <a [href]=\"params.urlTo('openMetadata', contentType)\" class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Metadata\">\r\n      <mat-icon\r\n        [matBadge]=\"contentType.Metadata.length\"\r\n        matBadgePosition=\"below after\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!contentType.Metadata.length\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        local_offer\r\n      </mat-icon>\r\n    </a>\r\n  } @else {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"contentType.Metadata.length\"\r\n        matBadgePosition=\"below after\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!contentType.Metadata.length\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!contentType.EditInfo.DisableEdit && enablePermissions) {\r\n    <a [href]=\"params.urlTo('openPermissions', contentType)\" class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Permissions\">\r\n      <mat-icon\r\n        [matBadge]=\"contentType.Permissions.Count\"\r\n        matBadgePosition=\"below after\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!contentType.Permissions.Count\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        person</mat-icon\r\n      >\r\n    </a>\r\n  } @else {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"contentType.Permissions.Count\"\r\n        matBadgePosition=\"below after\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!contentType.Permissions.Count\"\r\n        aria-hidden=\"false\"\r\n      >\r\n        person\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <a [href]=\"params.urlTo('editContentType', contentType)\" mat-menu-item [disabled]=\"contentType.EditInfo.DisableRename\">\r\n      <mat-icon>settings</mat-icon>\r\n      <span>Rename</span>\r\n    </a>\r\n    <a mat-menu-item [href]=\"params.urlTo('openRestApi', contentType)\">\r\n      <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      <span>REST API</span>\r\n    </a>\r\n    <button mat-menu-item (click)=\"params.do('typeExport', contentType)\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export content type</span>\r\n    </button>\r\n    <a mat-menu-item [href]=\"params.urlTo('dataExport', contentType)\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export data</span>\r\n    </a>\r\n    <a mat-menu-item [href]=\"params.urlTo('dataImport', contentType)\">\r\n      <mat-icon>cloud_upload</mat-icon>\r\n      <span>Import data</span>\r\n    </a>\r\n    <button mat-menu-item [disabled]=\"contentType.EditInfo.DisableDelete\" (click)=\"params.do('deleteContentType', contentType)\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { guidRegex } from '../../../shared/constants/guid.constants';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { ContentType } from '../../models/content-type.model';\r\nimport { AgActionsAlwaysRefresh } from '../../queries/ag-actions/ag-actions-component';\r\n\r\n\r\n@Component({\r\n    selector: 'app-data-actions',\r\n    templateUrl: './data-actions.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatBadgeModule,\r\n        MatMenuModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class DataActionsComponent extends AgActionsAlwaysRefresh {\r\n  contentType: ContentType;\r\n  enablePermissions: boolean;\r\n\r\n  public params: {\r\n    enablePermissionsGetter(): boolean;\r\n\r\n    do(verb: 'typeExport' | 'deleteContentType', contentType: ContentType): void;\r\n    urlTo(verb: 'createUpdateMetaData'\r\n      | 'openPermissions'\r\n      | 'editContentType'\r\n      | 'openMetadata'\r\n      | 'openRestApi'\r\n      | 'dataExport'\r\n      | 'dataImport', contentType: ContentType): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & DataActionsComponent['params']): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    const enablePermissions = this.params.enablePermissionsGetter();\r\n    this.enablePermissions = enablePermissions && guidRegex().test(this.contentType.NameId);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { ContentType } from '../../models/content-type.model';\r\n\r\n@Component({\r\n    selector: 'app-data-fields',\r\n    templateUrl: './data-fields.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatBadgeModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class DataFieldsComponent implements ICellRendererAngularComp {\r\n  value: number;\r\n  tooltip: string;\r\n  icon: string;\r\n\r\n  // TODO: @2pp - change all cases where Ag-Grid has separate interfaces to use this params mechanism\r\n  // 2dm will brief you\r\n  // 1. put type directly on the params (and make public)\r\n  // 2. make type checks (like in agInit) use this, as well as the type checks in the grid-definitions\r\n  // 3. where simple, call it directly from the HTML, don't create more methods which just call this again\r\n  public params: {\r\n    fieldsUrl(contentType: ContentType): string;\r\n  };\r\n  protected contentType: ContentType;\r\n\r\n  agInit(params: ICellRendererParams & DataFieldsComponent[\"params\"]): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    this.value = params.value;\r\n    this.tooltip = !this.contentType.EditInfo.ReadOnly\r\n      ? 'Edit fields'\r\n      : `${this.contentType.EditInfo.ReadOnlyMessage ? `${this.contentType.EditInfo.ReadOnlyMessage}\\n\\n` : ''}This ContentType shares the definition of #${this.contentType.SharedDefId} so you can't edit it here. Read 2sxc.org/help?tag=shared-types`;\r\n    this.icon = !this.contentType.EditInfo.ReadOnly ? 'dns' : 'share';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple [tippy]=\"tooltip\" [href]=\"params.fieldsUrl(contentType)\">\r\n    <mat-icon [matBadge]=\"value\" matBadgePosition=\"below after\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!value\" aria-hidden=\"false\">\r\n      {{icon}}\r\n    </mat-icon>\r\n  </a>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component, inject } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Router } from '@angular/router';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { ContentType } from '../../models';\r\n\r\n@Component({\r\n  selector: 'app-data-items',\r\n  templateUrl: './data-items.component.html',\r\n  styleUrls: ['./data-items.component.scss'],\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class DataItemsComponent implements ICellRendererAngularComp {\r\n  value: number;\r\n\r\n  router = inject(Router);\r\n\r\n  /** Params, directly typed here and anywhere it's used should use this type definition */\r\n  public params: {\r\n    addItemUrl(contentType: ContentType): string;\r\n    itemsUrl(contentType: ContentType): string;\r\n  };\r\n\r\n  protected contentType: ContentType;\r\n\r\n  agInit(params: ICellRendererParams & DataItemsComponent[\"params\"]): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n}\r\n","<div class=\"actions-component\">\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"{{ value }} items\" [href]=\"params.itemsUrl(contentType)\">\r\n    <div class=\"text-icon\">{{ value }}</div>\r\n  </a>\r\n\r\n  <!-- TODO: fix color again -->\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Add item\" [href]=\"params.addItemUrl(contentType)\">\r\n    <mat-icon>add</mat-icon>\r\n  </a>\r\n</div>\r\n","<app-grid-with-help [helpText]=\"uxHelpText()\" [refresh]=\"refresh()\" [rowLength]=\"contentTypes()?.length\">\r\n  @if (contentTypes()?.length) {\r\n    <ag-grid-angular\r\n      class=\"ag-theme-material \"\r\n      [rowData]=\"contentTypes()\"\r\n      [gridOptions]=\"gridOptions\"\r\n      appDragAndDrop\r\n      [allowedFileTypes]=\"'xml,json'\"\r\n      (filesDropped)=\"filesDropped($event)\"\r\n    >\r\n    </ag-grid-angular>\r\n  }\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field eav-scope-dropdown\">\r\n        <mat-select [ngModel]=\"scope()\" name=\"Scope\" (ngModelChange)=\"changeScope($event)\" panelWidth=\"\">\r\n          <mat-select-trigger>\r\n            <span>Scope: {{ scopeSelected()?.label }}</span>\r\n          </mat-select-trigger>\r\n          @for (scopeOption of scopeOptions(); track scopeOption) {\r\n            <mat-option [value]=\"scopeOption.name\">\r\n              {{ scopeOption.label }}\r\n            </mat-option>\r\n          }\r\n          <mat-option [value]=\"dropdownInsertValue\">Scope: Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <a [href]=\"urlToImportType()\">\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Import content type\" tippyPlacement=\"top\">\r\n          <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n          <span>Content Type</span>\r\n        </button>\r\n      </a>\r\n      @if (isDebug()) {\r\n        <button\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          color=\"accent\"\r\n          tippy=\"Create a ghost content type\"\r\n          tippyPlacement=\"top\"\r\n          (click)=\"createGhost()\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">share</mat-icon>\r\n          <span>Ghost</span>\r\n        </button>\r\n      }\r\n    </div>\r\n    <a [href]=\"urlToNewContentType()\">\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new content type\" tippyPlacement=\"top\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </a>\r\n  </mat-dialog-actions>\r\n</app-grid-with-help>\r\n<router-outlet></router-outlet>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, computed, inject, OnDestroy, OnInit, signal, ViewContainerRef } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialog, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { NavigationEnd, RouterOutlet } from '@angular/router';\r\nimport { filter, from, map, startWith, take } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { ContentExportService } from '../../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../../content-import/content-import-dialog.config';\r\nimport { GoToDevRest } from '../../dev-rest/go-to-dev-rest';\r\nimport { GoToMetadata } from '../../metadata';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { AgGridHelper } from '../../shared/ag-grid/ag-grid-helper';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { GridWithHelpComponent, HelpTextConst } from '../../shared/ag-grid/grid-with-help/grid-with-help.component';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FileUploadDialogData } from '../../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DragAndDropDirective } from '../../shared/directives/drag-and-drop.directive';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { toString } from '../../shared/helpers/file-to-base64.helper';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { mapUntilChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\nimport { ContentType } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { ContentTypesService } from '../services/content-types.service';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { ConfirmDeleteDialogComponent } from '../sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.component';\r\nimport { ConfirmDeleteDialogData } from '../sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.models';\r\nimport { DataActionsComponent } from './data-actions/data-actions.component';\r\nimport { DataFieldsComponent } from './data-fields/data-fields.component';\r\nimport { DataItemsComponent } from './data-items/data-items.component';\r\n\r\n@Component({\r\n  selector: 'app-data',\r\n  templateUrl: './data.component.html',\r\n  styleUrl: './data.component.scss',\r\n  imports: [\r\n    MatDialogActions,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    FormsModule,\r\n    MatOptionModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    SxcGridModule,\r\n    DragAndDropDirective,\r\n    TippyDirective,\r\n    GridWithHelpComponent\r\n  ]\r\n})\r\nexport class DataComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n  #snackBar = inject(MatSnackBar);\r\n  #matDialog = inject(MatDialog);\r\n\r\n  #contentTypeSvc = transient(ContentTypesService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n\r\n  // UI Help Text for the UX Help Info Card\r\n  #helpTextConst: HelpTextConst = {\r\n    empty: {\r\n      description: '<p><b>This is where you manage data</b></p>',\r\n      hint: \"<p>Click the (+) in the bottom right corner to create your first Content Type (think: table).</p>\"\r\n    },\r\n    content: {\r\n      description: '<p><b>Each row shows a Content Type</b> <br> They define the fields, similar to a database table.</p>',\r\n      hint: '<p>Click on the title to list the Entities (think: records). <br>You can also create new Entities, configure the fields and export/import the schema or the data.</p>'\r\n    }\r\n  };\r\n\r\n  uxHelpText = computed(() => {\r\n    const data = this.contentTypes();\r\n    return data?.length === 0 ? this.#helpTextConst.empty : this.#helpTextConst.content;\r\n  })\r\n\r\n  constructor(private viewContainerRef: ViewContainerRef,) {\r\n    super();\r\n  }\r\n\r\n  contentTypes = signal<ContentType[]>(undefined);\r\n  scope = signal<string>(undefined);\r\n  scopeOptions = signal<ScopeDetailsDto[]>([]);\r\n  scopeSelected = computed(() => this.scopeOptions().find(s => s.name === this.scope()));\r\n\r\n  /** Possible scopes - the ones from the backend + manually entered scopes by the current user */\r\n  gridOptions = this.#buildGridOptions();\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  enablePermissions!: boolean;\r\n\r\n  refresh = signal<number>(0);\r\n\r\n  ngOnInit() {\r\n    this.#fetchScopes();\r\n    this.#refreshScopeOnRouteChange();\r\n    this.#dialogRouter.doOnDialogClosedWithData(() => {\r\n      this.#fetchContentTypes()\r\n    });\r\n\r\n    this.#dialogConfigSvc.getCurrent$().subscribe(data => {\r\n      this.enablePermissions = data.Context.Enable.AppPermissions;\r\n    });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        from(toString(files[0])).pipe(take(1)).subscribe(fileString => {\r\n          const contentTypeName = fileString.split('<Entity Type=\"')[1]?.split('\"')[0];\r\n          const contentType = this.contentTypes().find(ct => ct.Name === contentTypeName);\r\n          if (contentType == null) {\r\n            const message = `Cannot find Content Type named '${contentTypeName}'. Please open Content Type Import dialog manually.`;\r\n            this.#snackBar.open(message, null, { duration: 5000 });\r\n            return;\r\n          }\r\n          this.#openDataImport(contentType, files);\r\n        });\r\n        break;\r\n      case 'json':\r\n        this.importType(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importType(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navRelative(['import'], { state: dialogData });\r\n  }\r\n\r\n  urlToImportType() {\r\n    return this.#urlTo('import');\r\n  }\r\n\r\n  editContentType(contentType: ContentType) {\r\n    if (!contentType) {\r\n      this.#dialogRouter.navRelative(['add']);\r\n    } else {\r\n      if (contentType.EditInfo.ReadOnly) return;\r\n      this.#dialogRouter.navRelative([`${contentType.NameId}/edit`]);\r\n    }\r\n  }\r\n\r\n  #fetchContentTypes() {\r\n    this.#contentTypeSvc.retrieveContentTypesPromise(this.scope()).then(contentTypes => {\r\n      for (const contentType of contentTypes) {\r\n        contentType._compareLabel = contentType.Label.replace(/\\p{Emoji}/gu, 'ž');\r\n      }\r\n      this.contentTypes.set(contentTypes);\r\n      this.refresh.update(v => ++v)\r\n\r\n      if (this.scope() !== eavConstants.scopes.default.value) {\r\n        const message = 'Warning! You are in a special scope. Changing things here could easily break functionality';\r\n        this.#snackBar.open(message, null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  #fetchScopes() {\r\n    this.#contentTypeSvc.getScopesV2Promise().then(scopeList => {\r\n      // Merge the new scopes with the existing ones - in case there were manual scopes added\r\n      // If old scope list had a manual scope which the server didn't send, re-add it here\r\n      const manual = this.scopeOptions()\r\n        .filter(sOld => scopeList.find(sNew => sNew.name === sOld.name) == null);\r\n\r\n      // Add a nice label to each scope containing count-information of types\r\n      const withNiceLabel = scopeList.map(s => {\r\n        let countInfo = !s.typesInherited\r\n          ? `${s.typesTotal} types`               // only not-inherited\r\n          : (s.typesInherited == s.typesTotal)\r\n            ? s.typesInherited + ' sys types'     // only inherited\r\n            : `${s.typesTotal} types / ${s.typesInherited} system`;\r\n        return ({ ...s, label: s.name + ` - ${countInfo}` });\r\n      });\r\n\r\n      this.scopeOptions.set([...withNiceLabel, ...manual]);\r\n    });\r\n  }\r\n\r\n  createGhost() {\r\n    const sourceName = window.prompt('To create a ghost content-type enter source static name / id - this is a very advanced operation - read more about it on 2sxc.org/help?tag=ghost');\r\n    if (!sourceName) return;\r\n    this.#snackBar.open('Saving...');\r\n    this.#contentTypeSvc.createGhost(sourceName).subscribe(_ => {\r\n      this.#snackBar.open('Saved', null, { duration: 2000 });\r\n      this.#fetchContentTypes();\r\n    });\r\n  }\r\n\r\n  changeScope(newScope: string) {\r\n    if (newScope === dropdownInsertValue) {\r\n      newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n    }\r\n    this.#dialogRouter.navRelative(['..', newScope]);\r\n  }\r\n\r\n  /**\r\n   * Refreshes the scope when the route changes.\r\n   * ...also adds a scope name if the route scope is not found in the list of possible scopes.\r\n   * This is to allow an admin to enter a custom scope.\r\n   * Note 2024-03-04 2dm - not sure if this auto-add feature is still needed though...\r\n   */\r\n  #refreshScopeOnRouteChange() {\r\n    this.subscriptions.add(\r\n      this.#dialogRouter.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        map(() => this.#dialogRouter.getParam('scope')),\r\n        startWith(this.#dialogRouter.getParam('scope')),\r\n        filter(scope => !!scope),\r\n        mapUntilChanged(m => m),\r\n      ).subscribe(scope => {\r\n        this.scope.set(scope);\r\n\r\n        // If we can't find the scope in the list of options, add it as it was entered manually\r\n        if (!this.scopeOptions().map(option => option.name).includes(scope)) {\r\n          const newScopeOption: ScopeDetailsDto = {\r\n            name: scope,\r\n            label: scope,\r\n            typesTotal: 0,\r\n            typesInherited: 0,\r\n            typesOfApp: 0,\r\n          };\r\n          this.scopeOptions.set([...this.scopeOptions(), newScopeOption]);\r\n        }\r\n        this.#fetchContentTypes();\r\n      })\r\n    );\r\n  }\r\n\r\n  //#region Grid\r\n\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.IdWithDefaultRenderer,\r\n          cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentType>('StaticName'),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWidePrimary,\r\n          headerName: 'ContentType',\r\n          field: 'Label',\r\n          sort: 'asc',\r\n          comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {\r\n            const contentTypeA: ContentType = nodeA.data;\r\n            const contentTypeB: ContentType = nodeB.data;\r\n            return contentTypeA._compareLabel.localeCompare(contentTypeB._compareLabel);\r\n          },\r\n          cellRenderer: (p: { data: ContentType }) => AgGridHelper.cellLink(this.#urlTo(`items/${p.data.NameId}`), p.data.Label),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Items,\r\n          field: 'Items',\r\n          cellRenderer: DataItemsComponent,\r\n          cellRendererParams: ({\r\n            addItemUrl: (ct) => this.#urlTo(`edit/${this.#routeAddItem(ct)}`),\r\n            itemsUrl: (ct) => this.#urlTo(`items/${ct.NameId}`),\r\n          } satisfies DataItemsComponent[\"params\"]),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Fields,\r\n          field: 'Fields',\r\n          cellRenderer: DataFieldsComponent,\r\n          cellRendererParams: ({\r\n            fieldsUrl: (contentType) => this.#urlTo(`fields/${contentType.NameId}`),\r\n          } satisfies DataFieldsComponent[\"params\"]),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideMin100,\r\n          field: 'Name',\r\n          cellClass: (p) => `${p.data.EditInfo.DisableEdit ? 'no-outline' : 'primary-action highlight'}`.split(' '),\r\n          cellRenderer: (p: { data: ContentType }) =>\r\n            AgGridHelper.cellLink(this.#urlTo(`${p.data.NameId}/edit`), p.data?.Name),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideFlex3,\r\n          field: 'Description',\r\n          valueGetter: (p: { data: ContentType }) => p.data?.Properties?.Description,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight4,\r\n          cellRenderer: DataActionsComponent,\r\n          cellRendererParams: ({\r\n            enablePermissionsGetter: () => this.enablePermissions,\r\n            urlTo: (verb, ct) => {\r\n              switch (verb) {\r\n                case 'createUpdateMetaData': return this.#urlTo(`edit/${this.#routeCreateOrEditMetadata(ct)}`);\r\n                case 'openPermissions': return this.#urlTo(GoToPermissions.getUrlContentType(ct.NameId));\r\n                case 'editContentType': return this.#urlTo(ct.EditInfo.ReadOnly ? '' : `${ct.NameId}/edit`);\r\n                case 'openMetadata': return this.#urlTo(GoToMetadata.getUrlContentType(ct.NameId, `Metadata for Content Type: ${ct.Name} (${ct.Id})`));\r\n                case 'openRestApi': return this.#urlTo(GoToDevRest.getUrlData(ct));\r\n                case 'dataExport': return this.#urlTo(`export/${ct.NameId}`);\r\n                case 'dataImport': return this.#urlTo(`${ct.NameId}/import`);\r\n              }\r\n            },\r\n            do: (verb, ct) => {\r\n              switch (verb) {\r\n                case 'typeExport': this.#exportType(ct); break;\r\n                case 'deleteContentType': this.#deleteContentType(ct); break;\r\n              }\r\n            }\r\n          } satisfies DataActionsComponent['params']),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Actions in the grid\r\n\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n\r\n  #routeAddItem(contentType: ContentType): string {\r\n    return convertFormToUrl({\r\n      items: [EditPrep.newFromType(contentType.NameId)],\r\n    } satisfies EditForm);\r\n  }\r\n\r\n\r\n  urlToNewContentType(): string {\r\n    return this.#urlTo('add');\r\n  }\r\n\r\n  #routeCreateOrEditMetadata(contentType: ContentType): string {\r\n    const form: EditForm = {\r\n      items: [\r\n        !contentType.Properties\r\n          ? {\r\n            ...EditPrep.newMetadata(contentType.NameId, eavConstants.contentTypes.contentType, eavConstants.metadata.contentType),\r\n            Prefill: {\r\n              Label: contentType.Name,\r\n              Description: contentType.Description\r\n            },\r\n          }\r\n          : EditPrep.editId(contentType.Properties.Id),\r\n      ],\r\n    };\r\n    return convertFormToUrl(form);\r\n  }\r\n\r\n  // 2pp | not in use?\r\n  // #createOrEditMetadata(contentType: ContentType) {\r\n  //   this.#dialogRouter.navParentFirstChild([`edit/${this.#routeCreateOrEditMetadata(contentType)}`]);\r\n  // }\r\n\r\n  // #openPermissions(contentType: ContentType) {\r\n  //   this.#dialogRouter.navParentFirstChild([GoToPermissions.getUrlContentType(contentType.NameId)]);\r\n  // }\r\n\r\n  // #routeMetadata(ct: ContentType) {\r\n  //   return GoToMetadata.getUrlContentType(ct.NameId, `Metadata for Content Type: ${ct.Name} (${ct.Id})`);\r\n  // }\r\n\r\n  // #openMetadata(contentType: ContentType) {\r\n  //   this.#dialogRouter.navParentFirstChild([this.#routeMetadata(contentType)]);\r\n  // }\r\n\r\n  // #openRestApi(contentType: ContentType) {\r\n  //   this.#dialogRouter.navParentFirstChild([GoToDevRest.getUrlData(contentType)]);\r\n  // }\r\n\r\n  #exportType(contentType: ContentType) {\r\n    this.#contentExportSvc.exportJson(contentType.NameId);\r\n  }\r\n\r\n\r\n  #openDataImport(contentType: ContentType, files?: File[]) {\r\n    this.#dialogRouter.navRelative([`${contentType.NameId}/import`], { state: { files } satisfies ContentImportDialogData });\r\n  }\r\n\r\n\r\n  #deleteContentType(contentType: ContentType) {\r\n    const data: ConfirmDeleteDialogData = {\r\n      entityId: contentType.Id,\r\n      entityTitle: contentType.Name,\r\n      message: \"Are you sure you want to delete?\",\r\n      hasDeleteSnackbar: true\r\n    };\r\n    const confirmationDialogRef = this.#matDialog.open(ConfirmDeleteDialogComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '400px',\r\n    });\r\n    confirmationDialogRef.afterClosed().subscribe((isConfirmed: boolean) => {\r\n      if (isConfirmed)\r\n        this.#contentTypeSvc.delete(contentType).subscribe(_ => {\r\n          this.#snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.#fetchContentTypes();\r\n        })\r\n    });\r\n    return;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n"],"x_google_ignoreList":[]}