{"version":3,"file":"projects_eav-ui_src_app_edit_dialog_footer_edit-dialog-footer_component_ts.dc8e5de76344f26d.js","mappings":"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","names":["EntitiesService","constructor","http","context","dnnContext","this","create","contentType","entity","post","params","appId","zoneId","update","entityId","delete","type","id","tryForce","$2sxc","apiUrl","webApiEntityRoot","toString","force","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","DebugTypes","Data","Formulas","Logs","log_r2","_r1","$implicit","ctx_r2","logToConsole","_c0","severity","LogSeverities","Error","Warn","time","label","LogsDumpComponent_Conditional_0_Conditional_1_Template","LogsDumpComponent_Conditional_0_For_3_Template","vm_r4","logs","length","LogsDumpComponent","loggingService","ngOnInit","logs$","getLogs$","viewModel$","combineLatest","pipe","map","log","Log","console","error","warn","core","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","LogsDumpComponent_Conditional_0_Template","tmp_0_0","NgClass","ExtendedModule","AsyncPipe","DatePipe","styles","SelectTargets","Entity","Field","Target","SnippetLabelSizePipe","maxLength","transform","substring","EJ8","pure","entityOption_r3","entityGuid","_c2","hasFormula","fieldOption_r4","fieldName","targetOption_r6","target","$event","_r5","ctx_r1","selectedChanged","FormulaDesignerComponent_Conditional_0_Conditional_0_Conditional_16_For_2_Template","vm_r7","designer","targetOptions","_r8","snippet_r10","_r9","copyToClipboard","code","snippet_r12","_r11","result","FormulaDesignerComponent_Conditional_0_Conditional_0_Conditional_40_Conditional_0_Conditional_0_Template","FormulaDesignerComponent_Conditional_0_Conditional_0_Conditional_40_Conditional_0_Conditional_1_Template","FormulaDesignerComponent_Conditional_0_Conditional_0_Conditional_40_Conditional_0_Conditional_2_Template","undefined","resultIsOnlyPromise","FormulaDesignerComponent_Conditional_0_Conditional_0_Conditional_40_Conditional_0_Template","FormulaDesignerComponent_Conditional_0_Conditional_0_Conditional_40_Conditional_1_Template","resultIsError","_r13","save","editMode","formula","source","saving","FormulaDesignerComponent_Conditional_0_Conditional_0_For_6_Template","trackEntityOptions","FormulaDesignerComponent_Conditional_0_Conditional_0_For_12_Template","trackFieldOptions","FormulaDesignerComponent_Conditional_0_Conditional_0_Conditional_16_Template","FormulaDesignerComponent_Conditional_0_Conditional_0_Conditional_17_Template","toggleFreeText","openFormulasHelp","formulaChanged","onFocused","onBlurred","FormulaDesignerComponent_Conditional_0_Conditional_0_For_32_Template","trackSnippets","FormulaDesignerComponent_Conditional_0_Conditional_0_Conditional_33_Template","FormulaDesignerComponent_Conditional_0_Conditional_0_For_35_Template","FormulaDesignerComponent_Conditional_0_Conditional_0_Conditional_40_Template","toggleEdit","deleteFormula","reset","FormulaDesignerComponent_Conditional_0_Conditional_0_Conditional_60_Template","run","entityOptions","fieldOptions","freeTextTarget","focused","filename","tmp_14_0","typings","monacoOptions","_c1","dataSnippets","contextSnippets","resultExists","menu_r14","sourceId","allowSaveFormula","FormulaDesignerComponent_Conditional_0_Conditional_0_Template","tmp_1_0","FormulaDesignerComponent","formulaDesignerService","snackBar","formConfig","entitiesService","itemService","contentTypeService","translate","loadError","config","enableFormulaSave","isDeleted$","BehaviorSubject","saving$","minimap","enabled","lineHeight","lineNumbers","lineDecorationsWidth","folding","scrollBeyondLastLine","tabSize","fixedOverflowWidgets","formId","formBuilderRefs","setDesignerOpen","buildViewModel","ngOnDestroy","complete","index","entityOption","fieldOption","snippet","value","newState","getDesignerState","selectedFormRef","find","formBuilderRef","Object","keys","fieldsSettingsService","getFieldsProps","setDesignerState","updateFormulaFromEditor","text","open","duration","oldState","getFormula","values","FormulaListItemTargets","includes","listItemFormulaNow","defaultFormulaNow","resetFormula","retriggerFormulas","next","item","getItem","contentTypeId","InputFieldHelpers","getContentTypeId","atAllFieldSettings","getContentType","Attributes","a","Name","Metadata","m","Type","Id","eavConstants","contentTypes","formulas","Title","Formula","Enabled","ParentRelationship","Add","EntityId","Index","Parent","Guid","subscribe","savedFormula","updateSaved","sourceGuid","confirm","instant","title","window","first","fieldsProps","FormulaTargets","Value","designerState$","getDesignerState$","options$","getFormulas$","some","f","getContentTypeSettings","_itemTitle","i","field","push","FormulaDefaultTargets","targetOption","lastIndexOf","inputType","InputType","EmptyFieldHelpers","isGroupStart","FormulaOptionalTargets","Collapsed","InputTypeConstants","StringDropdown","NumberDropdown","DropdownValues","EntityPicker","StringPicker","NumberPicker","formulasForThisField","filter","formula$","switchMap","getFormula$","itemHeader$","distinctUntilChanged","getItemHeader$","dataSnippets$","options","itemHeader","FormulaHelpers","buildDesignerSnippetsData","Prefill","contextSnippets$","buildDesignerSnippetsContext","typings$","buildFormulaTypings","result$","getFormulaResult$","isDeleted","isError","isOnlyPromise","i4","i5","i6","inputs","FormulaDesignerComponent_Conditional_0_Template","MatFormFieldModule","i7","MatSelectModule","i8","i9","FormsModule","i10","MatOptionModule","i11","MatInputModule","i12","MatButtonModule","i13","MatIconModule","i14","MonacoEditorComponent","MatMenuModule","i15","JsonPipe","TippyDirective","items","DataDumpComponent","items$","getItems$","itemGuids","DataDumpComponent_Conditional_0_Template","ctx_r0","EditDialogFooterComponent_Conditional_20_Conditional_1_Template","EditDialogFooterComponent_Conditional_20_Conditional_2_Template","EditDialogFooterComponent_Conditional_20_Conditional_3_Template","activeDebug","EditDialogFooterComponent","debugInfoOpened","EventEmitter","sxcVer","sxcVersion","toggleDebugType","emit","outputs","EditDialogFooterComponent_Conditional_20_Template","MatCardModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-items/services/entities.service.ts","./projects/eav-ui/src/app/edit/dialog/footer/edit-dialog-footer.models.ts","./projects/eav-ui/src/app/edit/dialog/footer/logs-dump/logs-dump.component.html","./projects/eav-ui/src/app/edit/dialog/footer/logs-dump/logs-dump.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/formula-designer/formula-designer.models.ts","./projects/eav-ui/src/app/edit/dialog/footer/formula-designer/snippet-label-size.pipe.ts","./projects/eav-ui/src/app/edit/dialog/footer/formula-designer/formula-designer.component.html","./projects/eav-ui/src/app/edit/dialog/footer/formula-designer/formula-designer.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/data-dump/data-dump.component.html","./projects/eav-ui/src/app/edit/dialog/footer/data-dump/data-dump.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/edit-dialog-footer.component.html","./projects/eav-ui/src/app/edit/dialog/footer/edit-dialog-footer.component.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { webApiEntityRoot } from '../../edit/shared/services';\r\nimport { ItemInListIdentifier } from '../../shared/models/edit-form.model';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\nexport interface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\nexport interface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","export const DebugTypes = {\r\n  Data: 'data',\r\n  Formulas: 'formulas',\r\n  Logs: 'logs',\r\n} as const;\r\n\r\nexport type DebugType = typeof DebugTypes[keyof typeof DebugTypes];\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"logs-box fancy-scrollbar-light\">\r\n    @if (vm.logs.length === 0) {\r\n      <div>Logs are empty</div>\r\n    }\r\n    @for (log of vm.logs; track log) {\r\n      <div class=\"log-entry\" [ngClass]=\"{\r\n        'log-error': log.severity === LogSeverities.Error,\r\n        'log-warn': log.severity === LogSeverities.Warn\r\n        }\">\r\n        <span class=\"log-entry-part log-entry-time\">{{ log.time | date : 'HH:mm:ss' }}:</span>\r\n        <span class=\"log-entry-part log-entry-label\">{{ log.label }}</span>\r\n        <span class=\"log-entry-part log-entry-show\" tippy=\"Log to console\" (click)=\"logToConsole(log)\">\r\n          console\r\n        </span>\r\n      </div>\r\n    }\r\n  </div>\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { combineLatest, map, Observable } from 'rxjs';\r\nimport { LogEntry, LogSeverities } from '../../../shared/models';\r\nimport { LoggingService } from '../../../shared/services';\r\nimport { LogsDumpViewModel } from './logs-dump.component.models';\r\nimport { ExtendedModule } from '@angular/flex-layout/extended';\r\nimport { NgClass, AsyncPipe, DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-logs-dump',\r\n  templateUrl: './logs-dump.component.html',\r\n  styleUrls: ['./logs-dump.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    ExtendedModule,\r\n    AsyncPipe,\r\n    DatePipe,\r\n  ],\r\n})\r\nexport class LogsDumpComponent implements OnInit {\r\n  LogSeverities = LogSeverities;\r\n  viewModel$: Observable<LogsDumpViewModel>;\r\n\r\n  constructor(private loggingService: LoggingService) { }\r\n\r\n  ngOnInit(): void {\r\n    const logs$ = this.loggingService.getLogs$();\r\n    this.viewModel$ = combineLatest([logs$]).pipe(\r\n      map(([logs]) => {\r\n        const viewModel: LogsDumpViewModel = {\r\n          logs,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  logToConsole(log: LogEntry): void {\r\n    switch (log.severity) {\r\n      case LogSeverities.Log:\r\n        console.log(log.label, log.error);\r\n        break;\r\n      case LogSeverities.Warn:\r\n        console.warn(log.label, log.error);\r\n        break;\r\n      case LogSeverities.Error:\r\n        console.error(log.label, log.error);\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import { FieldValue } from '../../../../../../../edit-types';\r\nimport { DesignerState } from '../../../formulas/models/formula-results.models';\r\nimport { FormulaCacheItem, FormulaTarget } from '../../../formulas/models/formula.models';\r\n\r\nexport interface FormulaDesignerViewModel {\r\n  entityOptions: EntityOption[];\r\n  fieldOptions: FieldOption[];\r\n  targetOptions: TargetOption[];\r\n  formula: FormulaCacheItem;\r\n  designer: DesignerState;\r\n  dataSnippets: DesignerSnippet[];\r\n  contextSnippets: DesignerSnippet[];\r\n  typings: string;\r\n  template: string;\r\n  result: FieldValue;\r\n  resultExists: boolean;\r\n  resultIsError: boolean;\r\n  // currently used only for UI to know when to display Result: promise(...)\r\n  resultIsOnlyPromise: boolean;\r\n  saving: boolean;\r\n}\r\n\r\nexport interface SelectOptions {\r\n  entityOptions: EntityOption[];\r\n  fieldOptions: FieldOption[];\r\n  targetOptions: TargetOption[];\r\n}\r\n\r\nexport interface EntityOption {\r\n  entityGuid: string;\r\n  hasFormula: boolean;\r\n  label: string;\r\n}\r\n\r\nexport interface FieldOption {\r\n  fieldName: string;\r\n  hasFormula: boolean;\r\n  label: string;\r\n}\r\n\r\nexport interface TargetOption {\r\n  hasFormula: boolean;\r\n  label: string;\r\n  target: FormulaTarget;\r\n}\r\n\r\nexport interface DesignerSnippet {\r\n  code: string;\r\n  label: string;\r\n}\r\n\r\nexport const SelectTargets = {\r\n  Entity: 'entityGuid',\r\n  Field: 'fieldValue',\r\n  Target: 'formulaTarget',\r\n} as const;\r\n\r\nexport type SelectTarget = typeof SelectTargets[keyof typeof SelectTargets];\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'snippetLabelSize',\r\n    standalone: true\r\n})\r\nexport class SnippetLabelSizePipe implements PipeTransform {\r\n\r\n  private maxLength = 24;\r\n\r\n  transform(label: string): string {\r\n    if (label.length <= this.maxLength) { return label; }\r\n    return `…${label.substring(label.length - this.maxLength)}`;\r\n  }\r\n}\r\n","@if (!loadError) {\r\n  @if (viewModel$ | async; as vm) {\r\n    <div class=\"formula-context-box\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n        <mat-label>Entity</mat-label>\r\n        <mat-select [ngModel]=\"vm.designer.entityGuid\" (ngModelChange)=\"selectedChanged(SelectTargets.Entity, $event)\">\r\n          @for (entityOption of vm.entityOptions; track trackEntityOptions($index, entityOption)) {\r\n            <mat-option\r\n              [value]=\"entityOption.entityGuid\">\r\n              <span [ngClass]=\"{ 'has-formula': entityOption.hasFormula }\">\r\n                {{ entityOption.label }}\r\n              </span>\r\n            </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n        <mat-label>Attribute</mat-label>\r\n        <mat-select [ngModel]=\"vm.designer.fieldName\" (ngModelChange)=\"selectedChanged(SelectTargets.Field, $event)\"\r\n          [disabled]=\"vm.designer.entityGuid == null\">\r\n          @for (fieldOption of vm.fieldOptions; track trackFieldOptions($index, fieldOption)) {\r\n            <mat-option\r\n              [value]=\"fieldOption.fieldName\">\r\n              <span [ngClass]=\"{ 'has-formula': fieldOption.hasFormula }\">\r\n                {{ fieldOption.fieldName }}\r\n              </span>\r\n            </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n        <mat-label>Target</mat-label>\r\n        @if (!freeTextTarget) {\r\n          <mat-select [ngModel]=\"vm.designer.target\"\r\n            (ngModelChange)=\"selectedChanged(SelectTargets.Target, $event)\"\r\n            [disabled]=\"vm.designer.entityGuid == null || vm.designer.fieldName == null\">\r\n            @for (targetOption of vm.targetOptions; track targetOption) {\r\n              <mat-option [value]=\"targetOption.target\">\r\n                <span [ngClass]=\"{ 'has-formula': targetOption.hasFormula }\">\r\n                  {{ targetOption.label }}\r\n                </span>\r\n              </mat-option>\r\n            }\r\n          </mat-select>\r\n        }\r\n        @if (freeTextTarget) {\r\n          <input matInput [ngModel]=\"vm.designer.target\"\r\n            (ngModelChange)=\"selectedChanged(SelectTargets.Target, $event)\"\r\n            [disabled]=\"vm.designer.entityGuid == null || vm.designer.fieldName == null\">\r\n        }\r\n      </mat-form-field>\r\n      <button mat-icon-button tippy=\"FreeText Target\" class=\"eav-formula-button\"\r\n        [disabled]=\"vm.designer.entityGuid == null || vm.designer.fieldName == null\" (click)=\"toggleFreeText()\">\r\n        <mat-icon>text_fields</mat-icon>\r\n      </button>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-icon-button tippy=\"Help\" class=\"eav-formula-button\" (click)=\"openFormulasHelp()\">\r\n        <mat-icon>help</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"formula-box\">\r\n      <div class=\"formula-field\" [ngClass]=\"{\r\n        'disabled': !vm.designer.editMode || vm.designer.entityGuid == null || vm.designer.fieldName == null || vm.designer.target == null,\r\n        'focused': focused\r\n        }\">\r\n        <mat-label class=\"label\">Function</mat-label>\r\n        <app-monaco-editor class=\"editor\" [filename]=\"filename\" [value]=\"vm.formula?.source ?? vm.template\"\r\n          [jsTypings]=\"vm.typings\" (valueChanged)=\"formulaChanged($event)\" [options]=\"monacoOptions\"\r\n          (focused)=\"onFocused()\" (blurred)=\"onBlurred()\">\r\n        </app-monaco-editor>\r\n      </div>\r\n      <div class=\"formula-snippets fancy-scrollbar-light\" [ngClass]=\"{ 'disabled': !vm.designer.editMode }\">\r\n        @for (snippet of vm.dataSnippets; track trackSnippets($index, snippet)) {\r\n          <div class=\"snippet\" [title]=\"snippet.code\"\r\n            (click)=\"copyToClipboard(snippet.code)\">\r\n            {{ snippet.label | snippetLabelSize }}\r\n          </div>\r\n        }\r\n        @if (vm.dataSnippets?.length && vm.contextSnippets?.length) {\r\n          <div class=\"separator\"></div>\r\n        }\r\n        @for (snippet of vm.contextSnippets; track trackSnippets($index, snippet)) {\r\n          <div class=\"snippet\" [title]=\"snippet.code\"\r\n            (click)=\"copyToClipboard(snippet.code)\">\r\n            {{ snippet.label | snippetLabelSize }}\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n    <div class=\"formula-footer-box\">\r\n      <div class=\"formula-result-box hide-scrollbar\">\r\n        <span class=\"label\">Result:&nbsp;</span>\r\n        @if (vm.resultExists) {\r\n          @if (!vm.resultIsError) {\r\n            @if (vm.result === undefined && !vm.resultIsOnlyPromise) {\r\n              <span class=\"result-undefined\">undefined</span>\r\n            }\r\n            @if (vm.result === undefined && vm.resultIsOnlyPromise) {\r\n              <span>promise(🤞🏽)</span>\r\n            }\r\n            @if (vm.result !== undefined) {\r\n              <span>{{ vm.result | json }}</span>\r\n            }\r\n          }\r\n          @if (vm.resultIsError) {\r\n            <span class=\"result-error\">\r\n              Calculation failed. Please check logs for more info\r\n            </span>\r\n          }\r\n        }\r\n      </div>\r\n      <div class=\"formula-actions-box\">\r\n        <button mat-icon-button tippy=\"Edit\" class=\"eav-formula-action-button\" (click)=\"toggleEdit()\">\r\n          <mat-icon>edit</mat-icon>\r\n        </button>\r\n        <button mat-icon-button tippy=\"Menu\" class=\"eav-formula-action-button\" [matMenuTriggerFor]=\"menu\">\r\n          <mat-icon>more_vert</mat-icon>\r\n        </button>\r\n        <mat-menu #menu=\"matMenu\">\r\n          <button mat-menu-item (click)=\"deleteFormula()\"\r\n            [disabled]=\"!vm.formula?.sourceId\">\r\n            <mat-icon>delete</mat-icon>\r\n            <span>Delete</span>\r\n          </button>\r\n          <button mat-menu-item (click)=\"reset()\">\r\n            <mat-icon>history</mat-icon>\r\n            <span>Reset</span>\r\n          </button>\r\n        </mat-menu>\r\n        @if (allowSaveFormula) {\r\n          <button mat-icon-button tippy=\"Save\" class=\"eav-formula-action-button\"\r\n            [tippyDisabled]=\"!vm.designer.editMode || !vm.formula?.source\"\r\n            [disabled]=\"!vm.designer.editMode || !vm.formula?.source || vm.saving\" (click)=\"save()\">\r\n            <mat-icon>save</mat-icon>\r\n          </button>\r\n        }\r\n        <button mat-icon-button class=\"eav-formula-action-button\" tippy=\"Run\"\r\n          [disabled]=\"!vm.designer.editMode || !vm.formula?.source\" (click)=\"run()\">\r\n          <mat-icon>play_arrow</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, Input, OnDestroy, OnInit, QueryList } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport type * as Monaco from 'monaco-editor';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, Observable, switchMap } from 'rxjs';\r\nimport { EntitiesService } from '../../../../content-items/services/entities.service';\r\nimport { InputTypeConstants } from '../../../../content-type-fields/constants/input-type.constants';\r\nimport { eavConstants } from '../../../../shared/constants/eav.constants';\r\nimport { copyToClipboard } from '../../../../shared/helpers/copy-to-clipboard.helper';\r\nimport { FormBuilderComponent } from '../../../form/builder/form-builder/form-builder.component';\r\nimport { FormulaDesignerService } from '../../../formulas/formula-designer.service';\r\nimport { defaultFormulaNow, listItemFormulaNow } from '../../../formulas/formula.constants';\r\nimport { FormulaHelpers } from '../../../formulas/helpers/formula.helpers';\r\nimport { FormulaListItemTargets, FormulaDefaultTargets, FormulaTarget, FormulaTargets, FormulaOptionalTargets } from '../../../formulas/models/formula.models';\r\nimport { InputFieldHelpers } from '../../../shared/helpers';\r\nimport { FormConfigService } from '../../../shared/services';\r\nimport { ContentTypeService, ItemService } from '../../../shared/store/ngrx-data';\r\n// tslint:disable-next-line:max-line-length\r\nimport { DesignerSnippet, EntityOption, FieldOption, FormulaDesignerViewModel, SelectOptions, SelectTarget, SelectTargets, TargetOption } from './formula-designer.models';\r\nimport { DesignerState } from '../../../formulas/models/formula-results.models';\r\nimport { EmptyFieldHelpers } from '../../../form/fields/empty/empty-field-helpers';\r\nimport { SnippetLabelSizePipe } from './snippet-label-size.pipe';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MonacoEditorComponent } from '../../../../monaco-editor/monaco-editor.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { ExtendedModule } from '@angular/flex-layout/extended';\r\nimport { NgClass, AsyncPipe, JsonPipe } from '@angular/common';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { TippyDirective } from 'projects/eav-ui/src/app/shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-formula-designer',\r\n  templateUrl: './formula-designer.component.html',\r\n  styleUrls: ['./formula-designer.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    FormsModule,\r\n    MatOptionModule,\r\n    NgClass,\r\n    ExtendedModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MonacoEditorComponent,\r\n    MatMenuModule,\r\n    AsyncPipe,\r\n    JsonPipe,\r\n    SnippetLabelSizePipe,\r\n    TippyDirective,\r\n  ],\r\n  providers: [\r\n    EntitiesService,\r\n  ]\r\n})\r\nexport class FormulaDesignerComponent implements OnInit, OnDestroy {\r\n  @Input() formBuilderRefs: QueryList<FormBuilderComponent>;\r\n\r\n  SelectTargets = SelectTargets;\r\n  loadError = false;\r\n  freeTextTarget = false;\r\n  allowSaveFormula = this.formConfig.config.enableFormulaSave;\r\n  isDeleted$ = new BehaviorSubject(false);\r\n  saving$ = new BehaviorSubject(false);\r\n  monacoOptions: Monaco.editor.IStandaloneEditorConstructionOptions = {\r\n    minimap: {\r\n      enabled: false,\r\n    },\r\n    lineHeight: 19,\r\n    lineNumbers: 'off',\r\n    lineDecorationsWidth: 0,\r\n    folding: false,\r\n    scrollBeyondLastLine: false,\r\n    tabSize: 2,\r\n    fixedOverflowWidgets: true,\r\n  };\r\n  filename = `formula${this.formConfig.config.formId}.js`;\r\n  focused = false;\r\n  viewModel$: Observable<FormulaDesignerViewModel>;\r\n\r\n  constructor(\r\n    private formulaDesignerService: FormulaDesignerService,\r\n    private snackBar: MatSnackBar,\r\n    private formConfig: FormConfigService,\r\n    private entitiesService: EntitiesService,\r\n    private itemService: ItemService,\r\n    private contentTypeService: ContentTypeService,\r\n    private translate: TranslateService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadError = false;\r\n    if (this.formBuilderRefs == null) {\r\n      this.loadError = true;\r\n      return;\r\n    }\r\n    this.formulaDesignerService.setDesignerOpen(true);\r\n    this.buildViewModel();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.formulaDesignerService.setDesignerOpen(false);\r\n    this.saving$.complete();\r\n  }\r\n\r\n  trackEntityOptions(index: number, entityOption: EntityOption): string {\r\n    return entityOption.entityGuid;\r\n  }\r\n\r\n  trackFieldOptions(index: number, fieldOption: FieldOption): string {\r\n    return fieldOption.fieldName;\r\n  }\r\n\r\n  trackSnippets(index: number, snippet: DesignerSnippet): string {\r\n    return snippet.code;\r\n  }\r\n\r\n  selectedChanged(target: SelectTarget, value: string | FormulaTarget): void {\r\n    const newState: DesignerState = {\r\n      ...this.formulaDesignerService.getDesignerState(),\r\n      editMode: false,\r\n    };\r\n    switch (target) {\r\n      case SelectTargets.Entity:\r\n        newState.entityGuid = value;\r\n        const selectedFormRef = this.formBuilderRefs.find(formBuilderRef => formBuilderRef.entityGuid === newState.entityGuid);\r\n        newState.fieldName = Object.keys(selectedFormRef.fieldsSettingsService.getFieldsProps())[0];\r\n        break;\r\n      case SelectTargets.Field:\r\n        newState.fieldName = value;\r\n        break;\r\n      case SelectTargets.Target:\r\n        newState.target = value as FormulaTarget;\r\n        break;\r\n    }\r\n\r\n    this.formulaDesignerService.setDesignerState(newState);\r\n  }\r\n\r\n  toggleFreeText(): void {\r\n    this.freeTextTarget = !this.freeTextTarget;\r\n  }\r\n\r\n  formulaChanged(formula: string): void {\r\n    const designer = this.formulaDesignerService.getDesignerState();\r\n    this.formulaDesignerService.updateFormulaFromEditor(designer.entityGuid, designer.fieldName, designer.target, formula, false);\r\n  }\r\n\r\n  onFocused(): void {\r\n    this.focused = true;\r\n  }\r\n\r\n  onBlurred(): void {\r\n    this.focused = false;\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  toggleEdit(): void {\r\n    const oldState = this.formulaDesignerService.getDesignerState();\r\n    const designer: DesignerState = {\r\n      ...oldState,\r\n      editMode: !oldState.editMode,\r\n    };\r\n    this.formulaDesignerService.setDesignerState(designer);\r\n    if (designer.editMode) {\r\n      const formula = this.formulaDesignerService.getFormula(designer.entityGuid, designer.fieldName, designer.target, true);\r\n      if (formula == null) {\r\n        this.formulaDesignerService.updateFormulaFromEditor(\r\n          designer.entityGuid, designer.fieldName, designer.target, Object.values(FormulaListItemTargets).includes(designer.target) ? listItemFormulaNow : defaultFormulaNow, false\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  reset(): void {\r\n    const designer: DesignerState = {\r\n      ...this.formulaDesignerService.getDesignerState(),\r\n      editMode: false,\r\n    };\r\n    this.formulaDesignerService.setDesignerState(designer);\r\n    this.formulaDesignerService.resetFormula(designer.entityGuid, designer.fieldName, designer.target);\r\n    this.formBuilderRefs\r\n      .find(formBuilderRef => formBuilderRef.entityGuid === designer.entityGuid)\r\n      .fieldsSettingsService.retriggerFormulas();\r\n  }\r\n\r\n  run(): void {\r\n    const designer = this.formulaDesignerService.getDesignerState();\r\n    const formula = this.formulaDesignerService.getFormula(designer.entityGuid, designer.fieldName, designer.target, true);\r\n    this.formulaDesignerService.updateFormulaFromEditor(designer.entityGuid, designer.fieldName, designer.target, formula.source, true);\r\n    this.formBuilderRefs\r\n      .find(formBuilderRef => formBuilderRef.entityGuid === designer.entityGuid)\r\n      .fieldsSettingsService.retriggerFormulas();\r\n    this.isDeleted$.next(false);\r\n  }\r\n\r\n  save(): void {\r\n    this.saving$.next(true);\r\n    const designer = this.formulaDesignerService.getDesignerState();\r\n    const formula = this.formulaDesignerService.getFormula(designer.entityGuid, designer.fieldName, designer.target, true);\r\n\r\n    if (formula.sourceId == null) {\r\n      const item = this.itemService.getItem(formula.entityGuid);\r\n      const contentTypeId = InputFieldHelpers.getContentTypeId(item);\r\n      const contentType = this.contentTypeService.getContentType(contentTypeId);\r\n      const attributeDef = contentType.Attributes.find(a => a.Name === formula.fieldName);\r\n      const atAllFieldSettings = attributeDef.Metadata.find(m => m.Type.Id === '@All');\r\n      if (!atAllFieldSettings) {\r\n        this.snackBar.open('Field configuration is missing. Please create formula in Administration', undefined, { duration: 3000 });\r\n        this.saving$.next(false);\r\n        return;\r\n      }\r\n      this.entitiesService.create(\r\n        eavConstants.contentTypes.formulas,\r\n        {\r\n          Title: formula.target,\r\n          Target: formula.target,\r\n          Formula: formula.source,\r\n          Enabled: true,\r\n          ParentRelationship: {\r\n            Add: null,\r\n            EntityId: null,\r\n            Field: 'Formulas',\r\n            Index: 0,\r\n            Parent: atAllFieldSettings.Guid,\r\n          },\r\n        },\r\n      ).subscribe(savedFormula => {\r\n        this.formulaDesignerService.updateSaved(\r\n          formula.entityGuid, formula.fieldName, formula.target, formula.source, savedFormula.Guid, savedFormula.Id,\r\n        );\r\n        this.snackBar.open('Formula saved', null, { duration: 2000 });\r\n        this.saving$.next(false);\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.entitiesService.update(eavConstants.contentTypes.formulas, formula.sourceId, { Formula: formula.source }).subscribe(() => {\r\n      this.formulaDesignerService.updateSaved(\r\n        formula.entityGuid, formula.fieldName, formula.target, formula.source, formula.sourceGuid, formula.sourceId,\r\n      );\r\n      this.snackBar.open('Formula saved', null, { duration: 2000 });\r\n      this.saving$.next(false);\r\n    });\r\n  }\r\n\r\n  deleteFormula(): void {\r\n    const designer = this.formulaDesignerService.getDesignerState();\r\n    const formula = this.formulaDesignerService.getFormula(designer.entityGuid, designer.fieldName, designer.target, true);\r\n\r\n    const id = formula.sourceId;\r\n    const title = formula.fieldName + ' - ' + formula.target;\r\n\r\n    const confirmed = confirm(this.translate.instant('Data.Delete.Question', { title, id }));\r\n    if (!confirmed) { return; }\r\n\r\n    this.entitiesService.delete(eavConstants.contentTypes.formulas, formula.sourceId, true).subscribe({\r\n      next: () => {\r\n        this.formulaDesignerService.delete(formula.entityGuid, formula.fieldName, formula.target);\r\n        this.snackBar.open(this.translate.instant('Message.Deleted'), null, { duration: 2000 });\r\n        this.isDeleted$.next(true);\r\n        if (designer.editMode)\r\n          this.toggleEdit();\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open(this.translate.instant('Message.DeleteError'), null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  openFormulasHelp(): void {\r\n    window.open('https://go.2sxc.org/formulas', '_blank');\r\n  }\r\n\r\n  private buildViewModel(): void {\r\n    const oldState = this.formulaDesignerService.getDesignerState();\r\n    if (oldState.entityGuid == null && oldState.fieldName == null && oldState.target == null) {\r\n      const entityGuid = this.formBuilderRefs.first.entityGuid;\r\n      const fieldsProps = this.formBuilderRefs.first.fieldsSettingsService.getFieldsProps();\r\n      const fieldName = Object.keys(fieldsProps)[0];\r\n      const target = fieldName != null ? FormulaTargets.Value : null;\r\n      const newState: DesignerState = {\r\n        ...oldState,\r\n        entityGuid,\r\n        fieldName,\r\n        target,\r\n      };\r\n      this.formulaDesignerService.setDesignerState(newState);\r\n    }\r\n\r\n    const designerState$ = this.formulaDesignerService.getDesignerState$();\r\n    const options$ = combineLatest([\r\n      designerState$,\r\n      this.formulaDesignerService.getFormulas$()\r\n    ]).pipe(\r\n      map(([designer, formulas]): SelectOptions => {\r\n        const entityOptions = this.formBuilderRefs.map(formBuilderRef => {\r\n          const entity: EntityOption = {\r\n            entityGuid: formBuilderRef.entityGuid,\r\n            hasFormula: formulas.some(f => f.entityGuid === formBuilderRef.entityGuid),\r\n            label: formBuilderRef.fieldsSettingsService.getContentTypeSettings()._itemTitle,\r\n          };\r\n          return entity;\r\n        });\r\n\r\n        const fieldOptions: FieldOption[] = [];\r\n        if (designer.entityGuid != null) {\r\n          const selectedItem = this.formBuilderRefs.find(i => i.entityGuid === designer.entityGuid);\r\n          const fieldsProps = selectedItem.fieldsSettingsService.getFieldsProps();\r\n          for (const fieldName of Object.keys(fieldsProps)) {\r\n            const field: FieldOption = {\r\n              fieldName,\r\n              hasFormula: formulas.some(f => f.entityGuid === designer.entityGuid && f.fieldName === fieldName),\r\n              label: fieldName,\r\n            };\r\n            fieldOptions.push(field);\r\n          }\r\n        }\r\n\r\n        const targetOptions: TargetOption[] = [];\r\n        if (designer.entityGuid != null && designer.fieldName != null) {\r\n          // default targets\r\n          for (const target of Object.values(FormulaDefaultTargets)) {\r\n            const targetOption: TargetOption = {\r\n              hasFormula: formulas.some(\r\n                f => f.entityGuid === designer.entityGuid && f.fieldName === designer.fieldName && f.target === target\r\n              ),\r\n              label: target.substring(target.lastIndexOf('.') + 1),\r\n              target,\r\n            };\r\n            targetOptions.push(targetOption);\r\n          }\r\n\r\n          // optional targets\r\n          const item = this.itemService.getItem(designer.entityGuid);\r\n          const contentTypeId = InputFieldHelpers.getContentTypeId(item);\r\n          const contentType = this.contentTypeService.getContentType(contentTypeId);\r\n          const attribute = contentType.Attributes.find(a => a.Name === designer.fieldName);\r\n          const inputType = attribute.InputType;\r\n          if (EmptyFieldHelpers.isGroupStart(inputType)) {\r\n            for (const target of [FormulaOptionalTargets.Collapsed]) {\r\n              const targetOption: TargetOption = {\r\n                hasFormula: formulas.some(\r\n                  f => f.entityGuid === designer.entityGuid && f.fieldName === designer.fieldName && f.target === target\r\n                ),\r\n                label: target.substring(target.lastIndexOf('.') + 1),\r\n                target: target as FormulaTarget,\r\n              };\r\n              targetOptions.push(targetOption);\r\n            }\r\n          }\r\n          if (inputType === InputTypeConstants.StringDropdown || inputType === InputTypeConstants.NumberDropdown) {\r\n            for (const target of [FormulaOptionalTargets.DropdownValues]) {\r\n              const targetOption: TargetOption = {\r\n                hasFormula: formulas.some(\r\n                  f => f.entityGuid === designer.entityGuid && f.fieldName === designer.fieldName && f.target === target\r\n                ),\r\n                label: target.substring(target.lastIndexOf('.') + 1),\r\n                target: target as FormulaTarget,\r\n              };\r\n              targetOptions.push(targetOption);\r\n            }\r\n          }\r\n          if (inputType === InputTypeConstants.EntityPicker\r\n            || inputType === InputTypeConstants.StringPicker\r\n            || inputType === InputTypeConstants.NumberPicker) {\r\n            for (const target of Object.values(FormulaListItemTargets)) {\r\n              const targetOption: TargetOption = {\r\n                hasFormula: formulas.some(\r\n                  f => f.entityGuid === designer.entityGuid && f.fieldName === designer.fieldName && f.target === target\r\n                ),\r\n                label: \"List Item \" + target.substring(target.lastIndexOf('.') + 1),\r\n                target: target as FormulaTarget,\r\n              };\r\n              targetOptions.push(targetOption);\r\n            }\r\n          }\r\n          /*\r\n          TODO: @SDV\r\n          for all picker types\r\n          add formulas -> Field.ListItem.Label\r\n                          Field.ListItem.Tooltip\r\n                          Field.ListItem.Information\r\n                          Field.ListItem.HelpLink\r\n                          Field.ListItem.Disabled\r\n\r\n          Template for all new type formulas\r\n          v2((data, context, item) => {\r\n            return data.value;\r\n          });\r\n\r\n          old template for all of the rest\r\n\r\n          run formulas upon dropdowning the picker, upon each opening\r\n          */\r\n\r\n          // targets for formulas\r\n          const formulasForThisField = formulas.filter(f => f.entityGuid === designer.entityGuid && f.fieldName === designer.fieldName);\r\n          for (const formula of formulasForThisField) {\r\n            const formulaExists = targetOptions.some(t => t.target === formula.target);\r\n            if (formulaExists) { continue; }\r\n\r\n            const targetOption: TargetOption = {\r\n              hasFormula: true,\r\n              label: formula.target.substring(formula.target.lastIndexOf('.') + 1),\r\n              target: formula.target,\r\n            };\r\n            targetOptions.push(targetOption);\r\n          }\r\n\r\n          // currently selected target\r\n          const selectedExists = targetOptions.some(t => t.target === designer.target);\r\n          if (!selectedExists) {\r\n            const targetOption: TargetOption = {\r\n              hasFormula: formulas.some(\r\n                f => f.entityGuid === designer.entityGuid && f.fieldName === designer.fieldName && f.target === designer.target\r\n              ),\r\n              label: designer.target.substring(designer.target.lastIndexOf('.') + 1),\r\n              target: designer.target,\r\n            };\r\n            targetOptions.push(targetOption);\r\n          }\r\n        }\r\n\r\n        const selectOptions: SelectOptions = {\r\n          entityOptions,\r\n          fieldOptions,\r\n          targetOptions,\r\n        };\r\n        return selectOptions;\r\n      }),\r\n    );\r\n    const formula$ = designerState$.pipe(\r\n      switchMap(designer => this.formulaDesignerService.getFormula$(designer.entityGuid, designer.fieldName, designer.target, true)),\r\n    );\r\n    const itemHeader$ = designerState$.pipe(\r\n      map(designer => designer.entityGuid),\r\n      distinctUntilChanged(),\r\n      switchMap(entityGuid => this.itemService.getItemHeader$(entityGuid)),\r\n    );\r\n    const dataSnippets$ = combineLatest([options$, formula$, itemHeader$]).pipe(\r\n      map(([options, formula, itemHeader]) => formula != null && itemHeader != null\r\n        ? FormulaHelpers.buildDesignerSnippetsData(formula, options.fieldOptions, itemHeader.Prefill)\r\n        : []\r\n      ),\r\n    );\r\n    const contextSnippets$ = combineLatest([formula$]).pipe(\r\n      map(([formula]) => formula != null\r\n        ? FormulaHelpers.buildDesignerSnippetsContext(formula)\r\n        : []\r\n      ),\r\n    );\r\n    const typings$ = combineLatest([options$, formula$, itemHeader$]).pipe(\r\n      map(([options, formula, itemHeader]) => formula != null && itemHeader != null\r\n        ? FormulaHelpers.buildFormulaTypings(formula, options.fieldOptions, itemHeader.Prefill)\r\n        : ''\r\n      ),\r\n    );\r\n    const result$ = designerState$.pipe(\r\n      switchMap(designer =>\r\n        this.formulaDesignerService.getFormulaResult$(designer.entityGuid, designer.fieldName, designer.target)\r\n      ),\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([options$, formula$, dataSnippets$, contextSnippets$, typings$, designerState$]),\r\n      combineLatest([result$, this.saving$, this.isDeleted$]),\r\n    ]).pipe(\r\n      map(([\r\n        [options, formula, dataSnippets, contextSnippets, typings, designer],\r\n        [result, saving, isDeleted],\r\n      ]) => {\r\n        const template = Object.values(FormulaListItemTargets).includes(designer.target) ? listItemFormulaNow : defaultFormulaNow;\r\n        const viewModel: FormulaDesignerViewModel = {\r\n          entityOptions: options.entityOptions,\r\n          fieldOptions: options.fieldOptions,\r\n          targetOptions: options.targetOptions,\r\n          formula,\r\n          designer,\r\n          dataSnippets,\r\n          contextSnippets,\r\n          typings,\r\n          template,\r\n          result: result?.value,\r\n          resultExists: result != null && !isDeleted,\r\n          resultIsError: result?.isError ?? false,\r\n          resultIsOnlyPromise: result?.isOnlyPromise ?? false,\r\n          saving,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <textarea readonly class=\"fancy-scrollbar-light\">{{ vm.items | json }}</textarea>\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { combineLatest, map, Observable } from 'rxjs';\r\nimport { FormConfigService } from '../../../shared/services';\r\nimport { ItemService } from '../../../shared/store/ngrx-data';\r\nimport { DataDumpViewModel } from './data-dump.component.models';\r\nimport { AsyncPipe, JsonPipe } from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'app-data-dump',\r\n    templateUrl: './data-dump.component.html',\r\n    styleUrls: ['./data-dump.component.scss'],\r\n    standalone: true,\r\n    imports: [AsyncPipe, JsonPipe],\r\n})\r\nexport class DataDumpComponent implements OnInit {\r\n  viewModel$: Observable<DataDumpViewModel>;\r\n\r\n  constructor(private itemService: ItemService, private formConfig: FormConfigService) { }\r\n\r\n  ngOnInit(): void {\r\n    const items$ = this.itemService.getItems$(this.formConfig.config.itemGuids);\r\n    this.viewModel$ = combineLatest([items$]).pipe(\r\n      map(([items]) => {\r\n        const viewModel: DataDumpViewModel = {\r\n          items,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","<mat-card appearance=\"raised\" class=\"mat-elevation-z4\" [ngClass]=\"{ 'debug-enabled': activeDebug != null }\">\r\n\r\n  <div class=\"debug-buttons-container\">\r\n    <button mat-button tippy=\"Show Data JSON\" (click)=\"toggleDebugType(DebugTypes.Data)\">\r\n      <mat-icon>offline_bolt</mat-icon>\r\n      <span>Data</span>\r\n    </button>\r\n    <button mat-button tippy=\"Show Formula Designer\" (click)=\"toggleDebugType(DebugTypes.Formulas)\">\r\n      <mat-icon>functions</mat-icon>\r\n      <span>Formulas</span>\r\n    </button>\r\n    <button mat-button tippy=\"Show Logs\" (click)=\"toggleDebugType(DebugTypes.Logs)\">\r\n      <mat-icon>speed</mat-icon>\r\n      <span>Logs</span>\r\n    </button>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"sxc-version\">2sxc {{ sxcVer }}</div>\r\n  </div>\r\n\r\n  @if (activeDebug != null) {\r\n    <div class=\"debug-info-container\">\r\n      @if (activeDebug === DebugTypes.Data) {\r\n        <app-data-dump></app-data-dump>\r\n      }\r\n      @if (activeDebug === DebugTypes.Formulas) {\r\n        <app-formula-designer [formBuilderRefs]=\"formBuilderRefs\">\r\n        </app-formula-designer>\r\n      }\r\n      @if (activeDebug === DebugTypes.Logs) {\r\n        <app-logs-dump></app-logs-dump>\r\n      }\r\n    </div>\r\n  }\r\n</mat-card>","import { Component, EventEmitter, Input, OnInit, Output, QueryList } from '@angular/core';\r\nimport { EavWindow } from '../../../shared/models/eav-window.model';\r\nimport { FormBuilderComponent } from '../../form/builder/form-builder/form-builder.component';\r\nimport { DebugType, DebugTypes } from './edit-dialog-footer.models';\r\nimport { LogsDumpComponent } from './logs-dump/logs-dump.component';\r\nimport { FormulaDesignerComponent } from './formula-designer/formula-designer.component';\r\nimport { DataDumpComponent } from './data-dump/data-dump.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ExtendedModule } from '@angular/flex-layout/extended';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-edit-dialog-footer',\r\n  templateUrl: './edit-dialog-footer.component.html',\r\n  styleUrls: ['./edit-dialog-footer.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    NgClass,\r\n    ExtendedModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    DataDumpComponent,\r\n    FormulaDesignerComponent,\r\n    LogsDumpComponent,\r\n  ],\r\n})\r\nexport class EditDialogFooterComponent implements OnInit {\r\n  @Input() formBuilderRefs: QueryList<FormBuilderComponent>;\r\n  @Output() private debugInfoOpened = new EventEmitter<boolean>();\r\n\r\n  DebugTypes = DebugTypes;\r\n  activeDebug: DebugType;\r\n  sxcVer = window.sxcVersion.substring(0, window.sxcVersion.lastIndexOf('.'));\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  toggleDebugType(type: DebugType): void {\r\n    this.activeDebug = type !== this.activeDebug ? type : null;\r\n    this.debugInfoOpened.emit(this.activeDebug != null);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}