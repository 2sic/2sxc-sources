{"version":3,"sources":["./src/app/import-app/import-app-dialog.config.ts","./src/app/import-app/import-app-routing.module.ts","./src/app/import-app/import-app.module.ts","./src/app/import-app/services/import-app.service.ts","./src/app/shared/components/dialog-entry/dialog-entry.component.ts","C:/Projects/eav-item-dialog-angular/node_modules/@angular/material/__ivy_ngcc__/fesm5/progress-spinner.js"],"names":["importAppDialog","name","initContext","panelSize","panelClass","getComponent","routes","path","component","data","dialog","ImportAppRoutingModule","forChild","ImportAppModule","http","context","dnnContext","importApp","file","changedName","formData","FormData","append","this","appId","toString","zoneId","post","$2sxc","apiUrl","ImportAppService","viewContainerRef","router","route","subscription","dialogConfig","snapshot","Error","ngOnInit","id","init","dialogRef","open","backdropClass","showScrollbar","autoFocus","closeOnNavigation","position","top","add","afterClosed","subscribe","pathFromRoot","length","window","parent","totalPopup","close","error","navigate","url","relativeTo","state","ngOnDestroy","unsubscribe","DialogEntryComponent","MatProgressSpinner__svg_circle_1_Template","rf","ctx","ctx_r6","diameter","_strokeDashOffset","_strokeCircumference","_circleStrokeWidth","_circleRadius","MatProgressSpinner__svg_circle_2_Template","ctx_r7","MatSpinner__svg_circle_1_Template","ctx_r8","MatSpinner__svg_circle_2_Template","ctx_r9","MatProgressSpinnerBase","_elementRef","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","providedIn","factory","MatProgressSpinner","_super","platform","_document","animationMode","defaults","_this","call","_diameter","_value","_fallbackAnimation","mode","trackedDiameters","_diameters","has","head","set","Set","EDGE","TRIDENT","_noopAnimations","_forceAnimations","strokeWidth","Object","defineProperty","prototype","get","size","_styleRoot","_attachStyleNode","enumerable","configurable","_strokeWidth","value","newValue","Math","max","min","element","nativeElement","classList","viewBox","PI","styleRoot","currentDiameter","diameters","diametersForElement","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","replace","WeakMap","ɵfac","t","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","inputs","color","exportAs","features","decls","vars","consts","template","_viewBox","directives","styles","encapsulation","changeDetection","MatSpinner","elementRef","document","MatProgressSpinnerModule","ɵmod","ɵinj","imports"],"mappings":"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","file":"import-app-import-app-module.a9fa71195fccef7bdaac.js","sourcesContent":["import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const importAppDialog: DialogConfig = {\r\n  name: 'IMPORT_APP_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ImportAppComponent } = await import('./import-app.component');\r\n    return ImportAppComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { importAppDialog } from './import-app-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: importAppDialog } }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ImportAppRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\nimport { ImportAppRoutingModule } from './import-app-routing.module';\r\nimport { ImportAppComponent } from './import-app.component';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ImportAppService } from './services/import-app.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ImportAppComponent,\r\n  ],\r\n  entryComponents: [\r\n    ImportAppComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ImportAppRoutingModule,\r\n    SharedComponentsModule,\r\n    MatProgressSpinnerModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ImportAppService,\r\n  ]\r\n})\r\nexport class ImportAppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\n\r\nimport { Context } from '../../shared/services/context';\r\nimport { ImportAppResult } from '../models/import-app-result.model';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string) {\r\n    const formData = new FormData();\r\n    formData.append('AppId', this.context.appId.toString());\r\n    formData.append('ZoneId', this.context.zoneId.toString());\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ? changedName : '');\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl('app-sys/ImportExport/ImportApp'), formData) as Observable<ImportAppResult>;\r\n  }\r\n}\r\n","import { Component, OnInit, OnDestroy, ViewContainerRef, Type } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { MatDialogRef, MatDialog } from '@angular/material/dialog';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Context } from '../../services/context';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { angularConsoleLog } from '../../helpers/angular-console-log.helper';\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss']\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private subscription = new Subscription();\r\n  private dialogRef: MatDialogRef<any, any>;\r\n  private dialogConfig: DialogConfig;\r\n  private component: Type<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n  ) {\r\n    this.dialogConfig = this.route.snapshot.data.dialog;\r\n    if (!this.dialogConfig) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n  }\r\n\r\n  async ngOnInit() {\r\n    angularConsoleLog('Open dialog:', this.dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n    this.component = await this.dialogConfig.getComponent();\r\n    if (this.dialogConfig.initContext) {\r\n      this.context.init(this.route);\r\n    }\r\n\r\n    this.dialogRef = this.dialog.open(this.component, {\r\n      backdropClass: 'dialog-backdrop',\r\n      panelClass: [\r\n        'dialog-panel',\r\n        `dialog-panel-${this.dialogConfig.panelSize}`,\r\n        this.dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n        ...(this.dialogConfig.panelClass ? this.dialogConfig.panelClass : []),\r\n      ],\r\n      viewContainerRef: this.viewContainerRef,\r\n      autoFocus: false,\r\n      closeOnNavigation: false,\r\n      // spm NOTE: used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' }\r\n    });\r\n\r\n    this.subscription.add(\r\n      this.dialogRef.afterClosed().subscribe((data: any) => {\r\n        angularConsoleLog('Dialog was closed:', this.dialogConfig.name, 'Data:', data);\r\n\r\n        if (this.route.pathFromRoot.length <= 3) {\r\n          try {\r\n            (window.parent as any).$2sxc.totalPopup.close();\r\n          } catch (error) { }\r\n          return;\r\n        }\r\n\r\n        if (this.route.snapshot.url.length > 0) {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n        } else {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n    this.subscription = null;\r\n    this.dialogConfig = null;\r\n    this.component = null;\r\n    this.dialogRef.close();\r\n    this.dialogRef = null;\r\n  }\r\n\r\n}\r\n","import { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { __extends } from 'tslib';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { _getShadowRoot, Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    var ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r6.diameter)(\"stroke-dashoffset\", ctx_r6._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r6._strokeCircumference, \"px\")(\"stroke-width\", ctx_r6._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r6._circleRadius);\n} }\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    var ctx_r7 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r7._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r7._strokeCircumference, \"px\")(\"stroke-width\", ctx_r7._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r7._circleRadius);\n} }\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    var ctx_r8 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r8.diameter)(\"stroke-dashoffset\", ctx_r8._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r8._strokeCircumference, \"px\")(\"stroke-width\", ctx_r8._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r8._circleRadius);\n} }\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    var ctx_r9 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r9._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r9._strokeCircumference, \"px\")(\"stroke-width\", ctx_r9._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r9._circleRadius);\n} }\nvar BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nvar BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nvar MatProgressSpinnerBase = /** @class */ (function () {\n    function MatProgressSpinnerBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatProgressSpinnerBase;\n}());\nvar _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nvar MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nvar INDETERMINATE_ANIMATION_TEMPLATE = \"\\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\\n\\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\\n\\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\\n\\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\\n  }\\n\";\n/**\n * `<mat-progress-spinner>` component.\n */\nvar MatProgressSpinner = /** @class */ (function (_super) {\n    __extends(MatProgressSpinner, _super);\n    function MatProgressSpinner(_elementRef, platform, _document, animationMode, defaults) {\n        var _this = _super.call(this, _elementRef) || this;\n        _this._elementRef = _elementRef;\n        _this._document = _document;\n        _this._diameter = BASE_SIZE;\n        _this._value = 0;\n        _this._fallbackAnimation = false;\n        /** Mode of the progress circle */\n        _this.mode = 'determinate';\n        var trackedDiameters = MatProgressSpinner._diameters;\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        _this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        _this._noopAnimations = animationMode === 'NoopAnimations' &&\n            (!!defaults && !defaults._forceAnimations);\n        if (defaults) {\n            if (defaults.diameter) {\n                _this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                _this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n        return _this;\n    }\n    Object.defineProperty(MatProgressSpinner.prototype, \"diameter\", {\n        /** The diameter of the progress spinner (will set width and height of svg). */\n        get: function () { return this._diameter; },\n        set: function (size) {\n            this._diameter = coerceNumberProperty(size);\n            // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n            if (!this._fallbackAnimation && this._styleRoot) {\n                this._attachStyleNode();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"strokeWidth\", {\n        /** Stroke width of the progress spinner. */\n        get: function () {\n            return this._strokeWidth || this.diameter / 10;\n        },\n        set: function (value) {\n            this._strokeWidth = coerceNumberProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"value\", {\n        /** Value of the progress circle. */\n        get: function () {\n            return this.mode === 'determinate' ? this._value : 0;\n        },\n        set: function (newValue) {\n            this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MatProgressSpinner.prototype.ngOnInit = function () {\n        var element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        var animationClass = \"mat-progress-spinner-indeterminate\" + (this._fallbackAnimation ? '-fallback' : '') + \"-animation\";\n        element.classList.add(animationClass);\n    };\n    Object.defineProperty(MatProgressSpinner.prototype, \"_circleRadius\", {\n        /** The radius of the spinner, adjusted for stroke width. */\n        get: function () {\n            return (this.diameter - BASE_STROKE_WIDTH) / 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"_viewBox\", {\n        /** The view box of the spinner's svg element. */\n        get: function () {\n            var viewBox = this._circleRadius * 2 + this.strokeWidth;\n            return \"0 0 \" + viewBox + \" \" + viewBox;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"_strokeCircumference\", {\n        /** The stroke circumference of the svg circle. */\n        get: function () {\n            return 2 * Math.PI * this._circleRadius;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"_strokeDashOffset\", {\n        /** The dash offset of the svg circle. */\n        get: function () {\n            if (this.mode === 'determinate') {\n                return this._strokeCircumference * (100 - this._value) / 100;\n            }\n            // In fallback mode set the circle to 80% and rotate it with CSS.\n            if (this._fallbackAnimation && this.mode === 'indeterminate') {\n                return this._strokeCircumference * 0.2;\n            }\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"_circleStrokeWidth\", {\n        /** Stroke width of the circle in percent. */\n        get: function () {\n            return this.strokeWidth / this.diameter * 100;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    MatProgressSpinner.prototype._attachStyleNode = function () {\n        var styleRoot = this._styleRoot;\n        var currentDiameter = this._diameter;\n        var diameters = MatProgressSpinner._diameters;\n        var diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            var styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    };\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    MatProgressSpinner.prototype._getAnimationText = function () {\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, \"\" + 0.95 * this._strokeCircumference)\n            .replace(/END_VALUE/g, \"\" + 0.2 * this._strokeCircumference)\n            .replace(/DIAMETER/g, \"\" + this.diameter);\n    };\n    /**\n     * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n     * We need to keep track of which elements the diameters were attached to, because for\n     * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n     * than the document head.\n     */\n    MatProgressSpinner._diameters = new WeakMap();\n    /** @nocollapse */\n    MatProgressSpinner.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Platform },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n    ]; };\n    MatProgressSpinner.propDecorators = {\n        diameter: [{ type: Input }],\n        strokeWidth: [{ type: Input }],\n        mode: [{ type: Input }],\n        value: [{ type: Input }]\n    };\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatProgressSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\", mode: \"mode\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"], encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    '[class._mat-animation-noopable]': \"_noopAnimations\",\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                    '[attr.mode]': 'mode'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_viewBox\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, { diameter: [{\n            type: Input\n        }], strokeWidth: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], mode: [{\n            type: Input\n        }] }); })();\n    return MatProgressSpinner;\n}(_MatProgressSpinnerMixinBase));\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nvar MatSpinner = /** @class */ (function (_super) {\n    __extends(MatSpinner, _super);\n    function MatSpinner(elementRef, platform, document, animationMode, defaults) {\n        var _this = _super.call(this, elementRef, platform, document, animationMode, defaults) || this;\n        _this.mode = 'indeterminate';\n        return _this;\n    }\n    /** @nocollapse */\n    MatSpinner.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Platform },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n    ]; };\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"], encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': \"_noopAnimations\",\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_viewBox\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n    return MatSpinner;\n}(MatProgressSpinner));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MatProgressSpinnerModule = /** @class */ (function () {\n    function MatProgressSpinnerModule() {\n    }\nMatProgressSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\nMatProgressSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); }, imports: [[MatCommonModule, CommonModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner,\n        MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner,\n        MatSpinner,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ]\n            }]\n    }], function () { return []; }, null); })();\n    return MatProgressSpinnerModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n\n//# sourceMappingURL=progress-spinner.js.map"],"sourceRoot":"webpack:///"}