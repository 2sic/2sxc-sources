{"version":3,"sources":["C:/Projects/eav-item-dialog-angular/node_modules/@angular/material/__ivy_ngcc__/fesm5/slide-toggle.js","./src/app/shared/directives/mousedown-stop-propagination.directive.ts","./src/app/shared/constants/eav.constants.ts"],"names":["_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","source","checked","this","MatSlideToggleBase","_elementRef","_super","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","_ngZone","defaults","_animationMode","_dir","_this","call","_onChange","_","_onTouched","_uniqueId","_required","_checked","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","dragChange","parseInt","Object","defineProperty","prototype","get","set","value","enumerable","configurable","markForCheck","ngAfterContentInit","monitor","subscribe","focusOrigin","_inputElement","nativeElement","focus","Promise","resolve","then","ngOnDestroy","stopMonitoring","_onChangeEvent","event","stopPropagation","emit","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","options","focusVia","toggle","_onLabelTextChange","detectChanges","ɵfac","t","ɵcmp","type","selectors","viewQuery","rf","ctx","_t","_thumbEl","first","_thumbBarEl","hostAttrs","hostVars","hostBindings","inputs","disableRipple","color","required","outputs","exportAs","features","ngContentSelectors","decls","vars","consts","template","$event","_r10","_r14","inputId","textContent","trim","toString","directives","styles","encapsulation","changeDetection","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","apply","arguments","ɵMatSlideToggleRequiredValidator_BaseFactory","ɵdir","_MatSlideToggleRequiredValidatorModule","ɵmod","ɵinj","MatSlideToggleModule","imports","onClick","stopImmediatePropagation","MousedownStopPropagationDirective","eavConstants","metadata","attribute","target","app","entity","contentType","zone","cmsObject","keyTypes","guid","string","number","scopes","default","cmsSystem","system","contentTypes","permissions","query","settings","resources","pipelineDesigner","outDataSource","className","in","description","visualDesignerData","Top","Left","Width","defaultPipeline","dataSources","entityGuid","partAssemblyAndType","streamWiring","From","Out","To","In","testParameters"],"mappings":"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","file":"default~edit-edit-module~visual-query-visual-query-module.734e2809dee5168805e1.js","sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, NgZone, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { __extends } from 'tslib';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/observers';\n\nvar _c0 = [\"thumbContainer\"];\nvar _c1 = [\"toggleBar\"];\nvar _c2 = [\"input\"];\nvar _c3 = function () { return { enterDuration: 150 }; };\nvar _c4 = [\"*\"];\nvar MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: function () { return ({ disableToggleValue: false }); }\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nvar nextUniqueId = 0;\n/** @docs-private */\nvar MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MatSlideToggle; }),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nvar MatSlideToggleChange = /** @class */ (function () {\n    function MatSlideToggleChange(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n    return MatSlideToggleChange;\n}());\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nvar MatSlideToggleBase = /** @class */ (function () {\n    function MatSlideToggleBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatSlideToggleBase;\n}());\nvar _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nvar MatSlideToggle = /** @class */ (function (_super) {\n    __extends(MatSlideToggle, _super);\n    function MatSlideToggle(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, \n    /**\n     * @deprecated `_ngZone` and `_dir` parameters to be removed.\n     * @breaking-change 10.0.0\n     */\n    _ngZone, defaults, _animationMode, _dir) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._focusMonitor = _focusMonitor;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this.defaults = defaults;\n        _this._animationMode = _animationMode;\n        _this._onChange = function (_) { };\n        _this._onTouched = function () { };\n        _this._uniqueId = \"mat-slide-toggle-\" + ++nextUniqueId;\n        _this._required = false;\n        _this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        _this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        _this.id = _this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        _this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        _this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        _this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        _this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        _this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        _this.dragChange = new EventEmitter();\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        return _this;\n    }\n    Object.defineProperty(MatSlideToggle.prototype, \"required\", {\n        /** Whether the slide-toggle is required. */\n        get: function () { return this._required; },\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlideToggle.prototype, \"checked\", {\n        /** Whether the slide-toggle element is checked or not. */\n        get: function () { return this._checked; },\n        set: function (value) {\n            this._checked = coerceBooleanProperty(value);\n            this._changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlideToggle.prototype, \"inputId\", {\n        /** Returns the unique id for the visual hidden input. */\n        get: function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    MatSlideToggle.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(function (focusOrigin) {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                _this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(function () { return _this._onTouched(); });\n            }\n        });\n    };\n    MatSlideToggle.prototype.ngOnDestroy = function () {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    };\n    /** Method being called whenever the underlying input emits a change event. */\n    MatSlideToggle.prototype._onChangeEvent = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    };\n    /** Method being called whenever the slide-toggle has been clicked. */\n    MatSlideToggle.prototype._onInputClick = function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /** Implemented as part of ControlValueAccessor. */\n    MatSlideToggle.prototype.writeValue = function (value) {\n        this.checked = !!value;\n    };\n    /** Implemented as part of ControlValueAccessor. */\n    MatSlideToggle.prototype.registerOnChange = function (fn) {\n        this._onChange = fn;\n    };\n    /** Implemented as part of ControlValueAccessor. */\n    MatSlideToggle.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    /** Implemented as a part of ControlValueAccessor. */\n    MatSlideToggle.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    };\n    /** Focuses the slide-toggle. */\n    MatSlideToggle.prototype.focus = function (options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    };\n    /** Toggles the checked state of the slide-toggle. */\n    MatSlideToggle.prototype.toggle = function () {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    };\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    MatSlideToggle.prototype._emitChangeEvent = function () {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    };\n    /** Method being called whenever the label text changes. */\n    MatSlideToggle.prototype._onLabelTextChange = function () {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    };\n    /** @nocollapse */\n    MatSlideToggle.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    MatSlideToggle.propDecorators = {\n        _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n        _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n        name: [{ type: Input }],\n        id: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        required: [{ type: Input }],\n        checked: [{ type: Input }],\n        change: [{ type: Output }],\n        toggleChange: [{ type: Output }],\n        dragChange: [{ type: Output }],\n        _inputElement: [{ type: ViewChild, args: ['input',] }]\n    };\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", required: \"required\", checked: \"checked\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"] }, outputs: { change: \"change\", toggleChange: \"toggleChange\", dragChange: \"dragChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var _r10 = ɵngcc0.ɵɵreference(1);\n        var _r14 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r14.textContent || !_r14.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r10)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc3.MatRipple, ɵngcc4.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], dragChange: [{\n            type: Output\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n    return MatSlideToggle;\n}(_MatSlideToggleMixinBase));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MatSlideToggleRequiredValidator; }),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nvar MatSlideToggleRequiredValidator = /** @class */ (function (_super) {\n    __extends(MatSlideToggleRequiredValidator, _super);\n    function MatSlideToggleRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nvar ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: \"mat-slide-toggle[required][formControlName],\\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]\",\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n    return MatSlideToggleRequiredValidator;\n}(CheckboxRequiredValidator));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nvar _MatSlideToggleRequiredValidatorModule = /** @class */ (function () {\n    function _MatSlideToggleRequiredValidatorModule() {\n    }\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], function () { return []; }, null); })();\n    return _MatSlideToggleRequiredValidatorModule;\n}());\nvar MatSlideToggleModule = /** @class */ (function () {\n    function MatSlideToggleModule() {\n    }\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); }, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ],\n        _MatSlideToggleRequiredValidatorModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule,\n        MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule,\n        MatSlideToggle,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], function () { return []; }, null); })();\n    return MatSlideToggleModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appMousedownStopPropagation]' })\r\nexport class MousedownStopPropagationDirective {\r\n  @HostListener('mousedown', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopImmediatePropagation();\r\n  }\r\n}\r\n","export type EavMetadataKey = 'attribute' | 'app' | 'entity' | 'contentType' | 'zone' | 'cmsObject';\r\nexport type EavKeyTypeKey = 'guid' | 'string' | 'number';\r\nexport type EavScopesKey = 'default' | 'app' | 'cmsSystem' | 'system';\r\nexport interface EavScopeOption { name: string; value: string; }\r\n\r\nexport const eavConstants = {\r\n  metadata: {\r\n    /** metadataOfAttribute */\r\n    attribute: { type: 2, target: 'EAV Field Properties' },\r\n    /** metadataOfApp */\r\n    app: { type: 3, target: 'App' },\r\n    /** metadataOfEntity */\r\n    entity: { type: 4, target: 'Entity' },\r\n    /** metadataOfContentType */\r\n    contentType: { type: 5, target: 'ContentType' },\r\n    /** metadataOfZone */\r\n    zone: { type: 6, target: 'Zone' },\r\n    /** metadataOfCmsObject */\r\n    cmsObject: { type: 10, target: 'CmsObject' },\r\n  },\r\n\r\n  /** Loopup type for the metadata, e.g. key=80adb152-efad-4aa4-855e-74c5ef230e1f is keyType=guid */\r\n  keyTypes: {\r\n    guid: 'guid',\r\n    string: 'string',\r\n    number: 'number',\r\n  },\r\n\r\n  /** Scopes */\r\n  scopes: {\r\n    /** This is the main schema and the data you usually see is from here */\r\n    default: { name: 'Default', value: '2SexyContent' },\r\n    /** This contains content-types for configuration, settings and resources of the app */\r\n    app: { name: 'App', value: '2SexyContent-App' },\r\n    /** This contains view-definitions, content-types etc. */\r\n    cmsSystem: { name: 'CMS System', value: '2SexyContent-System' },\r\n    /** This contains core EAV data like input-field configurations and similar */\r\n    system: { name: 'System', value: 'System' },\r\n  },\r\n\r\n  /** Content types where templates, permissions, etc. are stored */\r\n  contentTypes: {\r\n    /** Content type containing app templates (views) */\r\n    template: '2SexyContent-Template',\r\n    /** Content type containing permissions */\r\n    permissions: 'PermissionConfiguration',\r\n    /** Content type containing queries */\r\n    query: 'DataPipeline',\r\n    /** Content type containing content type metadata (app administration > data > metadata) */\r\n    contentType: 'ContentType',\r\n    /** Content type containing app settings */\r\n    settings: 'App-Settings',\r\n    /** Content type containing app resources */\r\n    resources: 'App-Resources',\r\n  },\r\n\r\n  pipelineDesigner: {\r\n    outDataSource: {\r\n      className: 'SexyContentTemplate',\r\n      in: ['ListContent', 'Default'],\r\n      name: '2sxc Target (View or API)',\r\n      description: 'The template/script which will show this data',\r\n      visualDesignerData: { Top: 20, Left: 200, Width: 700 }\r\n    },\r\n    defaultPipeline: {\r\n      dataSources: [\r\n        {\r\n          entityGuid: 'unsaved1',\r\n          partAssemblyAndType: 'ToSic.Eav.DataSources.Caches.ICache, ToSic.Eav.DataSources',\r\n          visualDesignerData: { Top: 440, Left: 440 }\r\n        }, {\r\n          entityGuid: 'unsaved2',\r\n          partAssemblyAndType: 'ToSic.Eav.DataSources.PublishingFilter, ToSic.Eav.DataSources',\r\n          visualDesignerData: { Top: 300, Left: 440 }\r\n        }, {\r\n          entityGuid: 'unsaved3',\r\n          partAssemblyAndType: 'ToSic.SexyContent.DataSources.ModuleDataSource, ToSic.SexyContent',\r\n          visualDesignerData: { Top: 170, Left: 440 }\r\n        }\r\n      ],\r\n      streamWiring: [\r\n        { From: 'unsaved1', Out: 'Default', To: 'unsaved2', In: 'Default' },\r\n        { From: 'unsaved1', Out: 'Drafts', To: 'unsaved2', In: 'Drafts' },\r\n        { From: 'unsaved1', Out: 'Published', To: 'unsaved2', In: 'Published' },\r\n        { From: 'unsaved2', Out: 'Default', To: 'unsaved3', In: 'Default' },\r\n        { From: 'unsaved3', Out: 'ListContent', To: 'Out', In: 'ListContent' },\r\n        { From: 'unsaved3', Out: 'Default', To: 'Out', In: 'Default' }\r\n      ]\r\n    },\r\n    testParameters: '[Demo:Demo]=true',\r\n  },\r\n};\r\n"],"sourceRoot":"webpack:///"}