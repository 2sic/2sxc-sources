{"version":3,"sources":["../edit/eav-material-controls/adam/sanitize.service.ts","./src/app/shared/services/snack-bar-stack.service.ts","./src/app/code-editor/services/source.service.ts","./src/app/code-editor/services/snippets.service.ts","./src/app/code-editor/code-templates/code-templates.helpers.ts","./src/app/code-editor/code-templates/code-templates.component.html","./src/app/code-editor/code-templates/code-templates.component.ts","./src/app/code-editor/code-snippets/code-snippets.helpers.ts","./src/app/code-editor/code-snippets/toarray.pipe.ts","./src/app/code-editor/code-snippets/code-snippets.component.html","./src/app/code-editor/code-snippets/code-snippets.component.ts","./src/app/code-editor/ace-editor/ace-options.ts","./src/app/code-editor/ace-editor/ace-editor.component.ts","./src/app/code-editor/ace-editor/ace-editor.helpers.ts","./src/app/code-editor/code-editor.component.html","./src/app/code-editor/code-editor-routing.module.ts","./src/app/code-editor/code-editor.component.ts","./src/app/code-editor/code-editor.module.ts"],"names":["cleanBadPath","sanitized","replace","removeFromStart","charToRemove","substring","removeFromEnd","length","sanitizePath","this","sanitizeName","SanitizeService","snackBar","defaultDuration","processingMessage","messageQueue","add","message","action","config","duration","triggered","Subject","push","showSnackBar","asObservable","nextMsg","shift","snackBarRef","open","afterDismissed","subscribe","complete","onAction","next","ngOnDestroy","SnackBarStackService","http","context","dnnContext","get","key","$2sxc","apiUrl","params","appId","toString","templateIdOrPath","pipe","map","view","Type","toLowerCase","Extension","save","post","getTemplates","global","withSubfolders","createTemplate","name","path","templateId","SourceService","keyPrefixes","keyPrefixIndex","indexOf","getSnippets","toPromise","res","relevant","filterAwayNotNeededSnippetsList","snippets","standAndInputSnips","extractInputTypeSnippets","sets","initSnippetsWithConfig","standardArray","inputTypeSnippets","list","newList","itm","setHasPrefix","set","substr","inputTypeArray","catalogInputTypeSnippets","inputTypeList","undefined","subset","templateConfiguration","makeTree","Content","Object","assign","Fields","PresentationFields","TypeContent","loadContentType","TypeContentPresentation","HasList","List","TypeList","TypeListPresentation","HasApp","App","Resources","Settings","tree","o","reformatted","label","snip","content","help","links","linksList","getHelpKey","result","addition","linksString","llist","split","pair","trim","url","target","type","prefix","getFields","AppId","then","fields","value","fieldname","StaticName","valuePlaceholder","Metadata","merged","Notes","snipDefaults","cloneDeep","attachSnippets","InputType","std","i","obj","val","staticName","appid","fld","md","allMd","All","typeMd","inputMd","inputType","genericSnippet","fieldType","typeSnips","concat","more","fieldSnips","g","localizeGenericSnippet","collapse","objName","fieldName","SnippetsService","calculateOpenItems","filename","openItems","paths","parent","existing","find","item","children","dialogService","toggledItems","ngOnInit","ngOnChanges","changes","templates","currentValue","template","last","pathFromRoot","calculateTree","FileName","openTemplate","openCodeFile","toggleItem","array","index","splice","toggleInArray","addFile","emit","CodeTemplatesComponent","transform","keys","ToArrayPipe","insertSnippet","toggledSections","toggledFolders","toggledInfos","addSnippet","snippet","toggleSection","toggleFolder","toggleInfo","info","CodeSnippetsComponent","aceOptions","mode","wrap","useSoftTabs","theme","fontSize","fontFamily","showGutter","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","zone","propagateChange","propagateTouched","loadScripts","scriptObjects","callback","iteration","newCallback","bind","scrObj","window","globalVar","scriptInDom","document","querySelector","src","addEventListener","once","scriptEl","createElement","head","appendChild","aceLoaded","updateValues","editor","toggleResize","previousValue","runOutsideAngular","setTimeout","resize","ace","require","snippetManager","focus","writeValue","p","getCursorPosition","setValue","moveCursorToPosition","registerOnChange","fn","registerOnTouched","destroy","container","remove","edit","editorRef","nativeElement","$blockScrolling","Infinity","session","on","onEditorValueChange","onEditorBlurred","run","getValue","getModeForPath","setMode","register","AceEditorComponent","provide","useExisting","multi","routes","component","route","snackBarStack","sourceService","snippetsService","titleService","sanitizeService","explorer","activeExplorer","eventListeners","init","calculateViewKey","attachListeners","forkJoin","viewKey","savedCode","Code","setTitle","showCodeAndEditionWarnings","explorerSnipps","editorSnipps","detachListeners","toggleExplorer","prompt","files","changeInsertSnipp","insertSnipp","codeToSave","error","itemsRaw","sessionStorage","getItem","JSON","parse","EntityId","Path","pathAndName","pathSeparator","lastIndexOf","pathWithSlash","fullName","nameCode","codeFile","file","otherEditions","filter","endsWith","closing","stopClose","keyboardSave","element","listener","forEach","removeEventListener","e","preventDefault","returnValue","keyCode","navigator","platform","match","metaKey","ctrlKey","CodeEditorComponent","CodeEditorRoutingModule","forChild","CodeEditorModule"],"mappings":"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","file":"code-editor-code-editor-module.b8ff53094c83f3708b47.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class SanitizeService {\r\n\r\n  constructor() { }\r\n\r\n  private removeFromStart(sanitized: string, charToRemove: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(0, 1) === charToRemove) {\r\n      sanitized = sanitized.substring(1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private removeFromEnd(sanitized: string, charToRemove: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(sanitized.length - 1, sanitized.length) === charToRemove) {\r\n      sanitized = sanitized.substring(0, sanitized.length - 1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private cleanBadPath = (sanitized: string) => {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    const goodChar = '_';\r\n    const illegalRe = /[\\?<>\\\\:\\*\\|\":]/g;\r\n    const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\r\n    const reservedRe = /^\\.+$/;\r\n    const windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\r\n    const windowsTrailingRe = /[\\. ]+$/;\r\n    return sanitized\r\n      .replace(illegalRe, goodChar)\r\n      .replace(controlRe, goodChar)\r\n      .replace(reservedRe, goodChar)\r\n      .replace(windowsReservedRe, goodChar)\r\n      .replace(windowsTrailingRe, goodChar);\r\n  }\r\n\r\n  // sanitize path\r\n  public sanitizePath(sanitized: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // remove slashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\/');\r\n\r\n    // remove slashed form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\/');\r\n\r\n    // remove backslashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\\\');\r\n\r\n    // remove backslashes form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\\\');\r\n\r\n    // replace bad\r\n    sanitized = this.cleanBadPath(sanitized);\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  // sanitize file or folder name\r\n  public sanitizeName(sanitized: string) {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // in addition to all path validation rules\r\n    // slashes are not valid in file or folder name\r\n    const replacement = '_';\r\n    const illegalRe = /\\//g;\r\n    return this.sanitizePath(sanitized)\r\n      .replace(illegalRe, replacement);\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\n/** This service ensures that multiple SnackBars are shown one after another. */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SnackBarStackService implements OnDestroy {\r\n  private defaultDuration = 3000;\r\n  private processingMessage = false;\r\n  private messageQueue: SnackBarData[] = [];\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  /**\r\n   * Add a message to the stack queue.\r\n   * @returns observable that fires if the action is triggered.\r\n   * Service will complete the observable\r\n   */\r\n  add(message: string, action?: string, config: MatSnackBarConfig<any> = { duration: this.defaultDuration }): Observable<boolean> {\r\n    const triggered = new Subject<boolean>();\r\n    this.messageQueue.push({ message, action, config, triggered });\r\n    if (!this.processingMessage) {\r\n      this.showSnackBar();\r\n    }\r\n    return triggered.asObservable();\r\n  }\r\n\r\n  private showSnackBar() {\r\n    const nextMsg = this.messageQueue.shift();\r\n\r\n    if (nextMsg == null) {\r\n      this.processingMessage = false;\r\n      return;\r\n    }\r\n\r\n    this.processingMessage = true;\r\n\r\n    const snackBarRef = this.snackBar.open(nextMsg.message, nextMsg.action, nextMsg.config);\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      nextMsg.triggered.complete();\r\n      this.showSnackBar();\r\n    });\r\n    snackBarRef.onAction().subscribe(() => {\r\n      nextMsg.triggered.next(true);\r\n      nextMsg.triggered.complete();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    for (const message of this.messageQueue) {\r\n      message.triggered.complete();\r\n    }\r\n    this.messageQueue = null;\r\n  }\r\n}\r\n\r\nclass SnackBarData {\r\n  message: string;\r\n  action: string;\r\n  config: MatSnackBarConfig<any>;\r\n  triggered: Subject<boolean>;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\n\r\nimport { Context } from '../../shared/services/context';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SourceService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  /** Key is templateId or path */\r\n  get(key: number | string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('app-sys/appassets/asset'), {\r\n      params: { appId: this.context.appId.toString(), ...this.templateIdOrPath(key) }\r\n    }).pipe(\r\n      map((view: SourceView) => {\r\n        if (view.Type.toLowerCase() === 'auto') {\r\n          switch (view.Extension.toLowerCase()) {\r\n            case '.cs':\r\n            case '.cshtml':\r\n              view.Type = 'Razor';\r\n              break;\r\n            case '.html':\r\n            case '.css':\r\n            case '.js':\r\n              view.Type = 'Token';\r\n              break;\r\n          }\r\n        }\r\n        return view;\r\n      })\r\n    ) as Observable<SourceView>;\r\n  }\r\n\r\n  /** Key is templateId or path */\r\n  save(key: number | string, view: SourceView) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl('app-sys/appassets/asset'), view, {\r\n      params: { appId: this.context.appId.toString(), ...this.templateIdOrPath(key) },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  getTemplates() {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('app-sys/appassets/list'), {\r\n      params: { appId: this.context.appId.toString(), global: 'false', withSubfolders: 'true' },\r\n    }) as Observable<string[]>;\r\n  }\r\n\r\n  createTemplate(name: string) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl('app-sys/appassets/create'), {}, {\r\n      params: { appId: this.context.appId.toString(), global: 'false', path: name },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  private templateIdOrPath(key: number | string) {\r\n    if (typeof key === typeof 0) {\r\n      return { templateId: key.toString() };\r\n    } else {\r\n      return { path: key as string };\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\n\r\nimport { SourceView } from '../models/source-view.model';\r\nimport { Snippet } from '../models/snippet.model';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\n\r\n@Injectable()\r\nexport class SnippetsService {\r\n  private keyPrefixes = ['@', '['];\r\n  private keyPrefixIndex = (view: SourceView) => (view.Type.indexOf('Razor') > -1) ? 0 : 1;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext,\r\n  ) { }\r\n\r\n  async getSnippets(view: SourceView) {\r\n    const res: any = await this.http.get('../sxc-develop/snippets.json.js').toPromise();\r\n    const snippets: Snippet[] = res.snippets;\r\n    const relevant = this.filterAwayNotNeededSnippetsList(snippets, view);\r\n    const standAndInputSnips = this.extractInputTypeSnippets(relevant);\r\n    const sets = this.initSnippetsWithConfig(standAndInputSnips.standardArray, view, standAndInputSnips.inputTypeSnippets);\r\n    return { sets, list: standAndInputSnips.standardArray };\r\n  }\r\n\r\n  // scan the list for sets starting with @ or [ and filter if not needed right now\r\n  private filterAwayNotNeededSnippetsList(list: Snippet[], view: SourceView) {\r\n    const newList = [];\r\n    for (const itm of list) {\r\n      const setHasPrefix = this.keyPrefixes.indexOf(itm.set[0]);\r\n      if (setHasPrefix === -1 || (setHasPrefix === this.keyPrefixIndex(view))) {\r\n        // if necessary, remove first char\r\n        if (setHasPrefix === this.keyPrefixIndex(view)) {\r\n          itm.set = itm.set.substr(1);\r\n        }\r\n        newList.push(itm);\r\n      }\r\n    }\r\n    return newList;\r\n  }\r\n\r\n  private extractInputTypeSnippets(list: Snippet[]) {\r\n    const standardArray: Snippet[] = [];\r\n    const inputTypeArray: Snippet[] = [];\r\n\r\n    for (const itm of list) {\r\n      const systemSnippet = itm.set[0] === '\\\\';\r\n      if (!systemSnippet) {\r\n        standardArray.push(itm);\r\n      } else {\r\n        itm.set = itm.set.substr(1);\r\n        inputTypeArray.push(itm);\r\n      }\r\n    }\r\n    const inputTypeSnippets = this.catalogInputTypeSnippets(inputTypeArray);\r\n    return {\r\n      standardArray,\r\n      inputTypeSnippets,\r\n    };\r\n  }\r\n\r\n  private catalogInputTypeSnippets(list: Snippet[]) {\r\n    const inputTypeList: any = {};\r\n    for (const itm of list) {\r\n      if (inputTypeList[itm.subset] === undefined) {\r\n        inputTypeList[itm.subset] = [];\r\n      }\r\n      inputTypeList[itm.subset].push(itm);\r\n    }\r\n    return inputTypeList;\r\n  }\r\n\r\n  private initSnippetsWithConfig(sets: any, templateConfiguration: SourceView, inputTypeSnippets: any) {\r\n    sets = this.makeTree(sets);\r\n\r\n    // retrieve all relevant content-types and infos\r\n    sets.Content = Object.assign({}, sets.Content, { Fields: {}, PresentationFields: {} });\r\n    if (templateConfiguration.TypeContent) {\r\n      this.loadContentType(sets.Content.Fields, templateConfiguration.TypeContent, 'Content', templateConfiguration, inputTypeSnippets);\r\n    }\r\n    if (templateConfiguration.TypeContentPresentation) {\r\n      this.loadContentType(\r\n        sets.Content.PresentationFields, templateConfiguration.TypeContentPresentation,\r\n        'Content.Presentation', templateConfiguration, inputTypeSnippets,\r\n      );\r\n    }\r\n\r\n    if (templateConfiguration.HasList) {\r\n      sets.List = Object.assign({}, sets.List, { Fields: {}, PresentationFields: {} });\r\n      if (templateConfiguration.TypeList) {\r\n        this.loadContentType(sets.List.Fields, templateConfiguration.TypeList, 'ListContent', templateConfiguration, inputTypeSnippets);\r\n      }\r\n      if (templateConfiguration.TypeListPresentation) {\r\n        this.loadContentType(\r\n          sets.List.PresentationFields, templateConfiguration.TypeListPresentation,\r\n          'ListContent.Presentation', templateConfiguration, inputTypeSnippets,\r\n        );\r\n      }\r\n    } else {\r\n      delete sets.List;\r\n    }\r\n\r\n    // maybe App-infos\r\n    if (templateConfiguration.HasApp) {\r\n      sets.App.Resources = {};\r\n      sets.App.Settings = {};\r\n      this.loadContentType(sets.App.Resources, 'App-Resources', 'App.Resources', templateConfiguration, inputTypeSnippets);\r\n      this.loadContentType(sets.App.Settings, 'App-Settings', 'App.Settings', templateConfiguration, inputTypeSnippets);\r\n    }\r\n\r\n    return sets;\r\n  }\r\n\r\n  // Convert the list into a tree with set/subset/item\r\n  private makeTree(list: Snippet[]) {\r\n    const tree: any = {};\r\n    for (const o of list) {\r\n      if (tree[o.set] === undefined) {\r\n        tree[o.set] = {};\r\n      }\r\n      if (tree[o.set][o.subset] === undefined) {\r\n        tree[o.set][o.subset] = [];\r\n      }\r\n      const reformatted = {\r\n        key: o.name,\r\n        label: this.label(o.set, o.subset, o.name),\r\n        snip: o.content,\r\n        help: o.help || this.help(o.set, o.subset, o.name),\r\n        links: this.linksList(o.links)\r\n      };\r\n\r\n      tree[o.set][o.subset].push(reformatted);\r\n    }\r\n    return tree;\r\n  }\r\n\r\n  private label(set: any, subset: any, snip: any) {\r\n    const key = this.getHelpKey(set, subset, snip, '.Key');\r\n\r\n    let result = key;\r\n    if (result === key) {\r\n      result = snip;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getHelpKey(set: any, subset: any, snip: any, addition: any) {\r\n    return 'SourceEditorSnippets' + '.' + set + '.' + subset + '.' + snip + addition;\r\n  }\r\n\r\n  private help(set: any, subset: any, snip: any) {\r\n    const key = this.getHelpKey(set, subset, snip, '.Help');\r\n\r\n    let result = key;\r\n    if (result === key) {\r\n      result = '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private linksList(linksString: any) {\r\n    if (!linksString) {\r\n      return null;\r\n    }\r\n    const links = [];\r\n    const llist = linksString.split('\\n');\r\n    for (const l of llist) {\r\n      const pair = l.split(':');\r\n      if (pair.length === 3) {\r\n        links.push({ name: pair[0].trim(), url: pair[1].trim() + ':' + pair[2].trim() });\r\n      }\r\n    }\r\n    if (links.length === 0) { return null; }\r\n    return links;\r\n  }\r\n\r\n  // get fields in content types\r\n  private loadContentType(target: any, type: any, prefix: any, templateConfiguration: SourceView, inputTypeSnippets: any) {\r\n    this.getFields(templateConfiguration.AppId, type)\r\n      .then(fields => {\r\n        // first add common items if the content-type actually exists\r\n        for (const value of fields) {\r\n          const fieldname = value.StaticName;\r\n          target[fieldname] = {\r\n            key: fieldname,\r\n            label: fieldname,\r\n            snip: this.valuePlaceholder(prefix, fieldname, templateConfiguration),\r\n            help: value.Metadata.merged.Notes || '' + ' (' + value.Type.toLowerCase() + ') '\r\n          };\r\n          // try to add generic snippets specific to this input-type\r\n          const snipDefaults = cloneDeep(target[fieldname]); // must be a copy, because target[fieldname] will grow\r\n\r\n          this.attachSnippets(target, prefix, fieldname, value.InputType, snipDefaults, inputTypeSnippets);\r\n        }\r\n\r\n        const std = ['EntityId', 'EntityTitle', 'EntityGuid', 'EntityType', 'IsPublished', 'Modified'];\r\n        if (fields.length) {\r\n          // tslint:disable-next-line:prefer-for-of\r\n          for (let i = 0; i < std.length; i++) {\r\n            target[std[i]] = {\r\n              key: std[i],\r\n              label: std[i],\r\n              snip: this.valuePlaceholder(prefix, std[i], templateConfiguration),\r\n              help: 'SourceEditorSnippets.StandardFields.' + std[i] + '.Help'\r\n            };\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  private valuePlaceholder(obj: any, val: any, templateConfiguration: any) {\r\n    return (templateConfiguration.Type.indexOf('Razor') > -1)\r\n      ? '@' + obj + '.' + val\r\n      : '[' + obj.replace('.', ':') + ':' + val + ']';\r\n  }\r\n\r\n  private getFields(appId: number, staticName: string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/getfields'), {\r\n      params: { appid: appId.toString(), staticName },\r\n    })\r\n      .toPromise()\r\n      .then((fields: Field[]) => {\r\n        if (fields) {\r\n          for (const fld of fields) {\r\n            if (!fld.Metadata) { continue; }\r\n            const md = fld.Metadata;\r\n            const allMd = md.All;\r\n            const typeMd = md[fld.Type];\r\n            const inputMd = md[fld.InputType];\r\n            md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n          }\r\n        }\r\n        return fields;\r\n      });\r\n  }\r\n\r\n  private attachSnippets(target: any, prefix: any, fieldname: any, inputType: any, snipDefaults: any, inputTypeSnippets: any) {\r\n    let genericSnippet = inputTypeSnippets[inputType];\r\n    if (inputType.indexOf('-')) {   // if it's a sub-type, let's also get the master-type\r\n      const fieldType = inputType.substr(0, inputType.indexOf('-'));\r\n      if (fieldType) {\r\n        const typeSnips = inputTypeSnippets[fieldType];\r\n        if (typeSnips) {\r\n          genericSnippet = genericSnippet ? genericSnippet.concat(typeSnips) : typeSnips;\r\n        }\r\n      }\r\n    }\r\n    if (!genericSnippet) {\r\n      return;\r\n    }\r\n\r\n    if (target[fieldname].more === undefined) {\r\n      target[fieldname].more = [];\r\n    }\r\n    const fieldSnips = target[fieldname].more;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let g = 0; g < genericSnippet.length; g++) {\r\n      try {\r\n        fieldSnips[fieldname + '-' + genericSnippet[g].name] = Object.assign({}, snipDefaults, {\r\n          key: fieldname + ' - ' + genericSnippet[g].name,\r\n          label: genericSnippet[g].name,\r\n          snip: this.localizeGenericSnippet(genericSnippet[g].content, prefix, fieldname),\r\n          collapse: true\r\n        });\r\n      } finally { }\r\n    }\r\n  }\r\n\r\n  private localizeGenericSnippet(snip: any, objName: any, fieldName: any) {\r\n    snip = snip.replace(/(\\$\\{[0-9]+\\:)var(\\})/gi, '$1' + objName + '$2')\r\n      .replace(/(\\$\\{[0-9]+\\:)prop(\\})/gi, '$1' + fieldName + '$2');\r\n    return snip;\r\n  }\r\n}\r\n","import { TreeItem } from '../models/tree-item.model';\r\n\r\nexport function calculateTree(templates: string[]): TreeItem[] {\r\n  if (!templates) { return []; }\r\n\r\n  const tree: TreeItem[] = [];\r\n  for (const template of templates) {\r\n    let parent: TreeItem[] = tree;\r\n    const paths = template.split('/');\r\n    const last = paths[paths.length - 1];\r\n    for (const path of paths) {\r\n      const existing = parent.find(item => item.name === path);\r\n      if (existing) {\r\n        parent = existing.children;\r\n      } else {\r\n        const item: TreeItem = {\r\n          name: path,\r\n          children: (path !== last) ? [] : null,\r\n          pathFromRoot: template,\r\n        };\r\n        parent.push(item);\r\n        parent = item.children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function calculateOpenItems(filename: string, tree: TreeItem[]): TreeItem[] {\r\n  if (!filename || !tree) { return []; }\r\n\r\n  const openItems: TreeItem[] = [];\r\n  const paths = filename.split('/');\r\n  let parent = tree;\r\n  for (const path of paths) {\r\n    const existing = parent.find(item => item.name === path);\r\n    if (!existing) { break; }\r\n    openItems.push(existing);\r\n    if (!existing.children) { break; }\r\n    parent = existing.children;\r\n  }\r\n\r\n  return openItems;\r\n}\r\n\r\nexport function toggleInArray(item: TreeItem, array: TreeItem[]) {\r\n  const index = array.indexOf(item);\r\n  if (index === -1) {\r\n    array.push(item);\r\n  } else {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer editor-fancy-scrollbar explorer-wrapper\">\r\n\r\n  <div>\r\n    <ng-container *ngFor=\"let item of tree\">\r\n      <ng-container *ngTemplateOutlet=\"collapsible; context: {item: item}\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-template #collapsible let-item=\"item\">\r\n\r\n      <div class=\"template-option\" [ngClass]=\"{'active': toggledItems.includes(item) }\" *ngIf=\"!item.children\"\r\n        matTooltipShowDelay=\"750\" [matTooltip]=\"item.name\" (click)=\"openTemplate(item.pathFromRoot)\">\r\n        {{ item.name }}\r\n      </div>\r\n\r\n      <div class=\"collapsible\" *ngIf=\"item.children\" matTooltipShowDelay=\"750\" [matTooltip]=\"item.name\"\r\n        (click)=\"toggleItem(item)\">\r\n        <mat-icon>{{ toggledItems.includes(item) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n        <span>{{ item.name }}</span>\r\n      </div>\r\n\r\n      <ng-container *ngIf=\"toggledItems.includes(item)\">\r\n        <div class=\"list\" *ngFor=\"let item1 of item.children\">\r\n          <ng-container *ngTemplateOutlet=\"collapsible; context: {item: item1}\"></ng-container>\r\n        </div>\r\n      </ng-container>\r\n\r\n    </ng-template>\r\n  </div>\r\n\r\n  <div class=\"create-button-wrapper\">\r\n    <button mat-icon-button matTooltip=\"Create file\" (click)=\"addFile()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, Input, ChangeDetectionStrategy, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { SourceView } from '../models/source-view.model';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { calculateTree, toggleInArray, calculateOpenItems } from './code-templates.helpers';\r\nimport { TreeItem } from '../models/tree-item.model';\r\n\r\n@Component({\r\n  selector: 'app-code-templates',\r\n  templateUrl: './code-templates.component.html',\r\n  styleUrls: ['./code-templates.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CodeTemplatesComponent implements OnInit, OnChanges {\r\n  @Input() view: SourceView;\r\n  @Input() templates: string[];\r\n  @Output() createTemplate: EventEmitter<null> = new EventEmitter();\r\n  tree: TreeItem[];\r\n  toggledItems: TreeItem[] = [];\r\n\r\n  constructor(private dialogService: DialogService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.templates?.currentValue) {\r\n      this.tree = calculateTree(this.templates);\r\n      this.toggledItems = calculateOpenItems(this.view?.FileName, this.tree);\r\n    }\r\n    if (changes.view?.currentValue) {\r\n      this.toggledItems = calculateOpenItems(this.view?.FileName, this.tree);\r\n    }\r\n  }\r\n\r\n  openTemplate(path: string) {\r\n    // const form: EditForm = {\r\n    //   items: [\r\n    //     { Path: path }\r\n    //   ]\r\n    // };\r\n    this.dialogService.openCodeFile(path);\r\n  }\r\n\r\n  toggleItem(item: TreeItem) {\r\n    toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n  addFile() {\r\n    this.createTemplate.emit();\r\n  }\r\n\r\n}\r\n","export function toggleInArray(item: any, array: any[]) {\r\n  const index = array.indexOf(item);\r\n  if (index === -1) {\r\n    array.push(item);\r\n  } else {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'toarray' })\r\nexport class ToArrayPipe implements PipeTransform {\r\n  transform(obj: object | Array<any>): Array<any> {\r\n    if (typeof obj !== typeof {}) { return obj as Array<any>; }\r\n    return Object.keys(obj).map(key => {\r\n      return (obj as any)[key];\r\n    });\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer editor-fancy-scrollbar\">\r\n  <div *ngFor=\"let section of snippets | keyvalue\">\r\n\r\n    <div class=\"collapsible-header section\" (click)=\"toggleSection(section)\">\r\n      <mat-icon>{{ toggledSections.includes(section) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n      <span>{{ section.key.toLocaleUpperCase() }}</span>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"toggledSections.includes(section)\">\r\n      <div *ngFor=\"let folder of section.value | keyvalue\">\r\n\r\n        <div class=\"collapsible-header folder\" [matTooltip]=\"folder.key\" matTooltipShowDelay=\"750\"\r\n          (click)=\"toggleFolder(folder)\">\r\n          <mat-icon>{{ toggledFolders.includes(folder) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n          <span>{{ folder.key }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledFolders.includes(folder)\">\r\n          <div class=\"snippet\" *ngFor=\"let snippet of (folder.value | toarray)\">\r\n\r\n            <div class=\"snippet-label\">\r\n              <div matRipple class=\"text\" [matTooltip]=\"snippet.snip\" matTooltipShowDelay=\"750\"\r\n                (click)=\"addSnippet(snippet.snip)\">\r\n                {{ snippet.label }}\r\n              </div>\r\n              <mat-icon matTooltip=\"Show Help\" matTooltipShowDelay=\"750\" appClickStopPropagation\r\n                (click)=\"toggleInfo(snippet)\">\r\n                info\r\n              </mat-icon>\r\n            </div>\r\n\r\n            <div class=\"snippet-help\" *ngIf=\"toggledInfos.includes(snippet)\">\r\n              <div class=\"text\">{{ snippet.help }}</div>\r\n              <div *ngFor=\"let link of snippet.links\">\r\n                <a href=\"{{ link.url }}\" target=\"_blank\">{{ link.name }}</a>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </ng-container>\r\n\r\n      </div>\r\n    </ng-container>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, Input, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { toggleInArray } from './code-snippets.helpers';\r\n\r\n@Component({\r\n  selector: 'app-code-snippets',\r\n  templateUrl: './code-snippets.component.html',\r\n  styleUrls: ['./code-snippets.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CodeSnippetsComponent implements OnInit {\r\n  @Input() snippets: any;\r\n  @Output() insertSnippet: EventEmitter<any> = new EventEmitter();\r\n  toggledSections: any[] = [];\r\n  toggledFolders: any[] = [];\r\n  toggledInfos: any[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  addSnippet(snippet: string) {\r\n    this.insertSnippet.emit(snippet);\r\n  }\r\n\r\n  toggleSection(set: any) {\r\n    toggleInArray(set, this.toggledSections);\r\n  }\r\n\r\n  toggleFolder(item: any) {\r\n    toggleInArray(item, this.toggledFolders);\r\n  }\r\n\r\n  toggleInfo(info: any) {\r\n    toggleInArray(info, this.toggledInfos);\r\n  }\r\n\r\n}\r\n","import { EditorOptions } from './ace.model';\r\n\r\nexport const aceOptions: Partial<EditorOptions> & EditorPluginsOptions = {\r\n  mode: 'ace/mode/razor',\r\n  wrap: true,\r\n  useSoftTabs: true,\r\n  theme: 'ace/theme/sqlserver',\r\n  fontSize: 14,\r\n  fontFamily: 'Consolas, Courier New, monospace',\r\n  showGutter: true,\r\n  enableBasicAutocompletion: true,\r\n  enableLiveAutocompletion: true,\r\n  enableSnippets: true,\r\n};\r\n\r\ninterface EditorPluginsOptions {\r\n  enableBasicAutocompletion: boolean;\r\n  enableLiveAutocompletion: boolean;\r\n  enableSnippets: boolean;\r\n}\r\n","// tslint:disable-next-line:max-line-length\r\nimport { Component, OnInit, Input, ElementRef, NgZone, OnChanges, SimpleChanges, ChangeDetectionStrategy, OnDestroy, forwardRef, ViewChild } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { loadScripts } from './ace-editor.helpers';\r\nimport { aceOptions } from './ace-options';\r\nimport { Ace, Editor } from './ace.model';\r\ndeclare const ace: Ace;\r\n\r\n@Component({\r\n  selector: 'app-ace-editor',\r\n  template: `<div style=\"width: 100%; height: 100%;\" #editor></div>`,\r\n  styles: [':host {display: block; width: 100%; height: 100%}'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => AceEditorComponent),\r\n    multi: true\r\n  }],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AceEditorComponent implements OnInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') editorRef: ElementRef;\r\n  @Input() filename: string;\r\n  @Input() snippets: any[];\r\n  @Input() insertSnippet: any;\r\n  /** If value changes editor will be resized */\r\n  @Input() toggleResize: boolean;\r\n\r\n  private value = '';\r\n  private editor: Editor;\r\n\r\n  propagateChange: (_: any) => void = () => { };\r\n  propagateTouched: (_: any) => void = () => { };\r\n\r\n  constructor(private zone: NgZone) { }\r\n\r\n  ngOnInit() {\r\n    loadScripts(\r\n      [\r\n        { globalVar: 'ace', src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ace.min.js' },\r\n        { globalVar: null, src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ext-modelist.min.js' },\r\n        { globalVar: null, src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ext-language_tools.min.js' },\r\n      ],\r\n      this.aceLoaded.bind(this)\r\n    );\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const filename = changes.filename?.currentValue;\r\n    const snippets = changes.snippets?.currentValue;\r\n    this.updateValues(filename, snippets);\r\n\r\n    if (!this.editor) { return; }\r\n    const resize = changes.toggleResize?.currentValue !== changes.toggleResize?.previousValue;\r\n    if (resize) {\r\n      this.zone.runOutsideAngular(() => {\r\n        // wait for Angular to update DOM to be able to get proper size of the container\r\n        setTimeout(() => { this.editor.resize(); }, 50);\r\n      });\r\n    }\r\n    const snippet = changes.insertSnippet?.currentValue;\r\n    if (snippet) {\r\n      this.zone.runOutsideAngular(() => {\r\n        const snippetManager = ace.require('ace/snippets').snippetManager;\r\n        snippetManager.insertSnippet(this.editor, snippet);\r\n        this.editor.focus();\r\n      });\r\n    }\r\n  }\r\n\r\n  writeValue(value: string) {\r\n    this.value = value || '';\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      const p = this.editor.getCursorPosition();\r\n      this.editor.setValue(this.value, -1);\r\n      this.editor.moveCursorToPosition(p);\r\n    });\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void) {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: (_: any) => void) {\r\n    this.propagateTouched = fn;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.editor.destroy();\r\n      this.editor.container.remove();\r\n      this.editor = null;\r\n    });\r\n  }\r\n\r\n  private aceLoaded() {\r\n    this.zone.runOutsideAngular(() => {\r\n      ace.config.set('basePath', 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11');\r\n      this.editor = ace.edit(this.editorRef.nativeElement, aceOptions);\r\n      (this.editor as any).$blockScrolling = Infinity;\r\n      this.editor.session.setValue(this.value); // set value and reset undo history\r\n      this.updateValues(this.filename, this.snippets);\r\n      this.editor.on('change', this.onEditorValueChange.bind(this));\r\n      this.editor.on('blur', this.onEditorBlurred.bind(this));\r\n      this.editor.focus();\r\n    });\r\n  }\r\n\r\n  private onEditorValueChange() {\r\n    this.zone.run(() => {\r\n      this.propagateChange(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private onEditorBlurred() {\r\n    this.zone.run(() => {\r\n      this.propagateTouched(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private updateValues(filename: string, snippets: any[]) {\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      if (filename) {\r\n        const modelist = ace.require('ace/ext/modelist');\r\n        const mode = modelist.getModeForPath(filename).mode;\r\n        this.editor.session.setMode(mode);\r\n      }\r\n      if (snippets) {\r\n        const snippetManager = ace.require('ace/snippets').snippetManager;\r\n        snippetManager.register(this.snippets);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","export function loadScripts(scriptObjects: ScriptObject[], callback: (...args: any[]) => any, iteration = 0) {\r\n  const isLast = scriptObjects.length === iteration + 1;\r\n  const newCallback = isLast ? callback : loadScripts.bind(this, scriptObjects, callback, iteration + 1);\r\n  const scrObj = scriptObjects[iteration];\r\n\r\n  if (!!(window as any)[scrObj.globalVar]) {\r\n    callback();\r\n    return;\r\n  }\r\n\r\n  const scriptInDom: HTMLScriptElement = document.querySelector(`script[src=\"${scrObj.src}\"]`);\r\n  if (scriptInDom) {\r\n    scriptInDom.addEventListener('load', newCallback, { once: true });\r\n    return;\r\n  }\r\n\r\n  const scriptEl = document.createElement('script');\r\n  scriptEl.src = scrObj.src;\r\n  scriptEl.addEventListener('load', newCallback, { once: true });\r\n  document.head.appendChild(scriptEl);\r\n}\r\n\r\nexport class ScriptObject {\r\n  globalVar: string;\r\n  src: string;\r\n}\r\n","<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" [ngClass]=\"{'active': activeExplorer === explorer.templates}\" matTooltip=\"Templates\"\r\n      (click)=\"toggleExplorer(explorer.templates)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{'active': activeExplorer === explorer.snippets}\" matTooltip=\"Snippets\"\r\n      (click)=\"toggleExplorer(explorer.snippets)\">\r\n      <mat-icon>code</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-code-templates [hidden]=\"activeExplorer !== explorer.templates\" [view]=\"view\" [templates]=\"templates\"\r\n    (createTemplate)=\"createTemplate()\">\r\n  </app-code-templates>\r\n  <app-code-snippets [hidden]=\"activeExplorer !== explorer.snippets\" [snippets]=\"explorerSnipps\"\r\n    (insertSnippet)=\"changeInsertSnipp($event)\">\r\n  </app-code-snippets>\r\n\r\n  <app-ace-editor *ngIf=\"view\" [filename]=\"view.FileName\" [(ngModel)]=\"view.Code\" [snippets]=\"editorSnipps\"\r\n    [insertSnippet]=\"insertSnipp\" [toggleResize]=\"!this.activeExplorer\">\r\n  </app-ace-editor>\r\n\r\n  <button mat-fab mat-elevation-z24 matTooltip=\"Click to save or CTRL + S\" (click)=\"save()\">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CodeEditorComponent } from './code-editor.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: CodeEditorComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CodeEditorRoutingModule { }\r\n","import { Component, OnInit, OnDestroy, NgZone } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { forkJoin } from 'rxjs';\r\n\r\nimport { Context } from '../shared/services/context';\r\nimport { keyItems } from '../shared/constants/session.constants';\r\nimport { SourceService } from './services/source.service';\r\nimport { EditItem, SourceItem, } from '../shared/models/edit-form.model';\r\nimport { SourceView } from './models/source-view.model';\r\nimport { ElementEventListener } from '../../../../shared/element-event-listener.model';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SnackBarStackService } from '../shared/services/snack-bar-stack.service';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { SanitizeService } from '../../../../edit/eav-material-controls/adam/sanitize.service';\r\n\r\n@Component({\r\n  selector: 'app-code-editor',\r\n  templateUrl: './code-editor.component.html',\r\n  styleUrls: ['./code-editor.component.scss']\r\n})\r\nexport class CodeEditorComponent implements OnInit, OnDestroy {\r\n  explorer = {\r\n    templates: 'templates',\r\n    snippets: 'snippets'\r\n  };\r\n  activeExplorer = this.explorer.templates;\r\n  view: SourceView;\r\n  templates: string[];\r\n  explorerSnipps: any;\r\n  editorSnipps: any;\r\n  insertSnipp: any;\r\n\r\n  private viewKey: number | string; // templateId or path\r\n  private eventListeners: ElementEventListener[] = [];\r\n  private savedCode: string;\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private snackBarStack: SnackBarStackService,\r\n    private sourceService: SourceService,\r\n    private snippetsService: SnippetsService,\r\n    private zone: NgZone,\r\n    private titleService: Title,\r\n    private dialogService: DialogService,\r\n    private sanitizeService: SanitizeService,\r\n  ) {\r\n    this.context.init(this.route);\r\n    this.calculateViewKey();\r\n    this.attachListeners();\r\n  }\r\n\r\n  ngOnInit() {\r\n    forkJoin({\r\n      view: this.sourceService.get(this.viewKey),\r\n      templates: this.sourceService.getTemplates(),\r\n    }).subscribe(result => {\r\n      this.view = result.view;\r\n      this.savedCode = this.view.Code;\r\n      this.titleService.setTitle(`${this.view.FileName} - Code Editor`);\r\n      this.templates = result.templates;\r\n      this.showCodeAndEditionWarnings(result.view, result.templates);\r\n\r\n      this.snippetsService.getSnippets(this.view).then(res => {\r\n        this.explorerSnipps = res.sets;\r\n        this.editorSnipps = res.list;\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.detachListeners();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    if (this.activeExplorer === explorer) {\r\n      this.activeExplorer = null;\r\n    } else {\r\n      this.activeExplorer = explorer;\r\n    }\r\n  }\r\n\r\n  createTemplate() {\r\n    let name = prompt('File name:', '_MyFile.cshtml');\r\n    if (name === null || name.length === 0) { return; }\r\n\r\n    name = this.sanitizeService.sanitizeName(name);\r\n    this.sourceService.createTemplate(name).subscribe(res => {\r\n      this.sourceService.getTemplates().subscribe(files => {\r\n        this.templates = files;\r\n      });\r\n    });\r\n  }\r\n\r\n  changeInsertSnipp(snippet: any) {\r\n    this.insertSnipp = snippet;\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    let codeToSave = this.view.Code;\r\n    this.sourceService.save(this.viewKey, this.view).subscribe({\r\n      next: res => {\r\n        if (!res) {\r\n          this.snackBar.open('Failed', null, { duration: 2000 });\r\n          return;\r\n        }\r\n        this.savedCode = codeToSave;\r\n        codeToSave = null;\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private calculateViewKey() {\r\n    const itemsRaw = sessionStorage.getItem(keyItems);\r\n    const editItems: EditItem[] | SourceItem[] = JSON.parse(itemsRaw);\r\n    const item = editItems[0];\r\n    this.viewKey = (item as EditItem).EntityId || (item as SourceItem).Path;\r\n  }\r\n\r\n  /** Show info about editions if other files with the same name exist */\r\n  private showCodeAndEditionWarnings(view: SourceView, files: string[]) {\r\n    const pathAndName = view.FileName;\r\n    const pathSeparator = pathAndName.indexOf('/') > -1 ? pathAndName.lastIndexOf('/') + 1 : 0;\r\n    const pathWithSlash = pathSeparator === 0 ? '' : pathAndName.substring(0, pathSeparator);\r\n    const fullName = pathAndName.substring(pathSeparator);\r\n    const name = fullName.substring(0, fullName.length - view.Extension.length);\r\n    const nameCode = name + '.code' + view.Extension;\r\n    // find out if we also have a code file\r\n    const codeFile = files.find(file => file === pathWithSlash + nameCode);\r\n    const otherEditions = files.filter(file => file.endsWith(fullName)).length - 1;\r\n\r\n    if (codeFile) {\r\n      this.snackBarStack\r\n        .add(`This template also has a code-behind file '${codeFile}'.`, 'Open')\r\n        .subscribe(res => {\r\n          this.dialogService.openCodeFile(codeFile);\r\n        });\r\n    }\r\n    if (otherEditions) {\r\n      this.snackBarStack\r\n        .add(`There are ${otherEditions} other editions of this. You may be editing an edition which is not the one you see.`, 'Help')\r\n        .subscribe(res => {\r\n          window.open('https://r.2sxc.org/polymorphism', '_blank');\r\n        });\r\n    }\r\n  }\r\n\r\n  private attachListeners() {\r\n    this.zone.runOutsideAngular(() => {\r\n      const closing = this.stopClose.bind(this);\r\n      const save = this.keyboardSave.bind(this);\r\n      window.addEventListener('beforeunload', closing);\r\n      window.addEventListener('keydown', save);\r\n      this.eventListeners.push({ element: window, type: 'beforeunload', listener: closing });\r\n      this.eventListeners.push({ element: window, type: 'keydown', listener: save });\r\n    });\r\n  }\r\n\r\n  private detachListeners() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.eventListeners.forEach(listener => {\r\n        listener.element.removeEventListener(listener.type, listener.listener);\r\n      });\r\n      this.eventListeners = null;\r\n    });\r\n  }\r\n\r\n  private stopClose(e: BeforeUnloadEvent) {\r\n    if (this.savedCode === this.view.Code) { return; }\r\n    e.preventDefault(); // Cancel the event\r\n    e.returnValue = ''; // Chrome requires returnValue to be set\r\n  }\r\n\r\n  private keyboardSave(e: KeyboardEvent) {\r\n    const CTRL_S = e.keyCode === 83 && (navigator.platform.match('Mac') ? e.metaKey : e.ctrlKey);\r\n    if (!CTRL_S) { return; }\r\n    e.preventDefault();\r\n    this.zone.run(() => { this.save(); });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\nimport { CodeEditorRoutingModule } from './code-editor-routing.module';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\nimport { Context } from '../shared/services/context';\r\nimport { SourceService } from './services/source.service';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { CodeSnippetsComponent } from './code-snippets/code-snippets.component';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { ToArrayPipe } from './code-snippets/toarray.pipe';\r\nimport { CodeTemplatesComponent } from './code-templates/code-templates.component';\r\nimport { AceEditorComponent } from './ace-editor/ace-editor.component';\r\nimport { SanitizeService } from '../../../../edit/eav-material-controls/adam/sanitize.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    ToArrayPipe,\r\n    CodeTemplatesComponent,\r\n    AceEditorComponent,\r\n  ],\r\n  entryComponents: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    CodeTemplatesComponent,\r\n    AceEditorComponent,\r\n  ],\r\n  imports: [\r\n    CodeEditorRoutingModule,\r\n    SharedComponentsModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatSnackBarModule,\r\n    FormsModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    SourceService,\r\n    DialogService,\r\n    SnippetsService,\r\n    SanitizeService,\r\n  ]\r\n})\r\nexport class CodeEditorModule { }\r\n"],"sourceRoot":"webpack:///"}