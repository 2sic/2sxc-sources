{"version":3,"sources":["./src/app/visual-query/services/query-definition.service.ts","./src/app/visual-query/plumb-editor/plumb-editor.helpers.ts","./src/app/visual-query/plumb-editor/plumber.helper.ts","./src/app/visual-query/query-result/query-result.component.html","./src/app/visual-query/query-result/query-result.component.ts","./src/app/visual-query/services/visual-query.service.ts","./src/app/visual-query/plumb-editor/plumb-editor.component.html","./src/app/visual-query/plumb-editor/plumb-editor.component.ts","./src/app/visual-query/run-explorer/run-explorer.component.html","./src/app/visual-query/run-explorer/run-explorer.component.ts","./src/app/visual-query/run-explorer/run-explorer.helpers.ts","./src/app/visual-query/add-explorer/add-explorer.component.html","./src/app/visual-query/add-explorer/add-explorer.component.ts","./src/app/visual-query/add-explorer/add-explorer.helpers.ts","./src/app/visual-query/visual-query-routing.module.ts","./src/app/visual-query/visual-query.component.ts","./src/app/visual-query/visual-query.component.html","./src/app/visual-query/visual-query.module.ts"],"names":["http","context","dnnContext","fetchPipeline","pipelineEntityId","this","get","$2sxc","apiUrl","params","appId","toString","id","pipe","map","pipelineModel","DataSources","length","buildDefaultModel","fixPipelineDataSources","templateDataSources","pipelineDesigner","defaultPipeline","dataSources","templateDS","visualDesignerData","Top","Left","pipelineDataSource","Description","EntityGuid","entityGuid","EntityId","undefined","Name","typeNameFilter","partAssemblyAndType","PartAssemblyAndType","VisualDesignerData","push","Pipeline","StreamWiring","streamWiring","pipelineDataSources","some","pipelineDS","outDs","outDataSource","description","name","className","fetchDataSources","ContentType","Difficulty","DynamicOut","EnableConfig","HelpLink","Icon","In","in","Out","PrimaryType","UiHint","allowNew","input","format","globalParts","split","classFullNameParts","savePipeline","pipeline","post","Id","pipeModel","runPipeline","QueryDefinitionService","guiTypes","Cache","icon","notes","Filter","Logic","Lookup","Modify","Security","Sort","Source","Target","Unknown","calculateTypeInfos","typeInfos","typeInfo","dataSource","find","ds","dynamicOut","helpLink","config","dataSrcIdPrefix","jsPlumbRoot","onConnectionsChanged","onDragend","plumbInits","lineCount","linePaintDefault","stroke","strokeWidth","outlineStroke","outlineWidth","lineColors","maxCols","uuidColorMap","bulkDelete","instance","jsPlumb","getInstance","getInstanceDefaults","batch","initDomDataSources","initWirings","bindEvents","repaintEverything","destroy","reset","removeEndpointsOnDataSource","pipelineDataSourceGuid","elementId","selectEndpoints","element","delete","getAllConnections","connection","From","sourceId","replace","endpoints","getOverlay","label","To","targetId","getStreamsOut","streamsOut","target","each","endpoint","join","putEntityCountOnConnections","result","Streams","forEach","stream","sourceElementId","toUuid","includes","TargetIn","sEndp","getEndpoint","SourceOut","connections","getUuid","setLabel","Count","cssClass","nextLinePaintStyle","uuid","Object","assign","container","Container","Connector","curviness","PaintStyle","HoverPaintStyle","domDataSource","querySelector","AllowEdit","draggable","grid","stop","event","el","position","finalPos","setTimeout","addEndpoint","targetEndpointUnlimited","buildTargetEndpoint","maxConnections","makeTarget","makeSource","buildSourceEndpoint","filter","wire","fromUuid","targetElementId","pipeDataSource","connect","uuids","paintStyle","e","console","error","message","from","to","isIn","model","enabled","fill","radius","isSource","anchor","faces","overlays","getEndpointOverlays","isTarget","dropOptions","hoverClass","activeClass","location","events","dblclick","labelOverlay","dblClickCounter","newLabel","prompt","bind","info","fixedEndpoints","targetEndpoint","deleteEndpoint","endpointLabel","labelPrompt","getLabel","getEndpoints","canvas","classList","contains","Math","floor","random","deleteConnection","fireEvent","dialogData","dialogRef","ngOnInit","testParameters","timeUsed","QueryTimer","Milliseconds","ticksUsed","Ticks","Query","sources","Sources","streams","closeDialog","close","QueryResultComponent","router","route","queryDefinitionService","titleService","snackBar","dialog","viewContainerRef","zone","metadataService","contentTypesService","changeDetectorRef","pipelineModel$","BehaviorSubject","dataSources$","putEntityCountOnConnections$","Subject","pipelineId","parseInt","snapshot","paramMap","doRefresh","subscription","Subscription","ngOnDestroy","complete","unsubscribe","init","attachKeyboardSave","refreshOnChildClosed","editPipelineEntity","form","items","value","formUrl","navigate","relativeTo","saveAndRun","save","run","addDataSource","cloneDeep","newPipelineDataSource","next","removeDataSource","StreamsOut","renameDataSource","changeDataSourceDescription","changeConnections","changeDataSourcePosition","editDataSource","contentTypeName","key","getMetadata","metadata","entity","type","keyTypes","guid","subscribe","retrieveContentType","contentType","ContentTypeName","For","Guid","alert","callback","open","duration","pipelineResult","data","TestParameters","backdropClass","panelClass","autoFocus","closeOnNavigation","top","markForCheck","warn","reloadingSnackBar","setTitle","runOutsideAngular","add","fromEvent","window","firstChild","navigator","platform","match","metaKey","ctrlKey","keyCode","preventDefault","startWith","pairwise","refresh","VisualQueryService","visualQueryService","hardReset","scriptLoaded$","test","src","plumber","templateModel$","combineLatest","detectChanges","allowEdit","ngAfterViewInit","domDataSourcesLoaded$","domDataSourcesRef","changes","domRootRef","nativeElement","configureDataSource","remove","confirm","editName","newName","trim","editDescription","newDescription","PlumbEditorComponent","warnings$","warnings","testMid","exec","urlMid","moduleId","calculateWarnings","editPipeline","openParamsHelp","saveAndRunQuery","RunExplorerComponent","toggledItems","difficulties","default","advanced","difficulty$","sorted$","maxDifficulty","filtered","sort","a","b","toLocaleLowerCase","localeCompare","sorted","filterAndSortDataSources","toggleDifficulty","checked","toggleItem","item","array","index","indexOf","splice","toggleInArray","AddExplorerComponent","routes","path","component","explorer","activeExplorer","toggleExplorer","openHelp","VisualQueryComponent","children","matcher","loadChildren","then","m","EditModule","history","VisualQueryRoutingModule","forChild","VisualQueryModule"],"mappings":"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","file":"visual-query-visual-query-module.f78e4bbcc54d9de5d807.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiQueryDataSources, webApiQueryGet, webApiQueryRun, webApiQuerySave } from '../../app-administration/services';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult } from '../models';\r\n\r\n@Injectable()\r\nexport class QueryDefinitionService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  fetchPipeline(pipelineEntityId: number) {\r\n    const pipelineModel$ = this.http.get(this.dnnContext.$2sxc.http.apiUrl(webApiQueryGet), {\r\n      params: { appId: this.context.appId.toString(), id: pipelineEntityId.toString() }\r\n    }) as Observable<PipelineModel>;\r\n\r\n    return pipelineModel$.pipe(\r\n      map(pipelineModel => {\r\n        // if pipeline is new, populate it with default model\r\n        if (!pipelineModel.DataSources.length) {\r\n          this.buildDefaultModel(pipelineModel);\r\n        }\r\n        this.fixPipelineDataSources(pipelineModel.DataSources);\r\n        return pipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private buildDefaultModel(pipelineModel: PipelineModel) {\r\n    const templateDataSources = eavConstants.pipelineDesigner.defaultPipeline.dataSources;\r\n    for (const templateDS of templateDataSources) {\r\n      if (templateDS.visualDesignerData == null) {\r\n        templateDS.visualDesignerData = { Top: 100, Left: 100 };\r\n      }\r\n      const pipelineDataSource: PipelineDataSource = {\r\n        Description: '',\r\n        EntityGuid: templateDS.entityGuid || 'unsaved' + (pipelineModel.DataSources.length + 1),\r\n        EntityId: undefined,\r\n        Name: this.typeNameFilter(templateDS.partAssemblyAndType, 'className'),\r\n        PartAssemblyAndType: templateDS.partAssemblyAndType,\r\n        VisualDesignerData: templateDS.visualDesignerData,\r\n      };\r\n      pipelineModel.DataSources.push(pipelineDataSource);\r\n    }\r\n\r\n    pipelineModel.Pipeline.StreamWiring = eavConstants.pipelineDesigner.defaultPipeline.streamWiring;\r\n  }\r\n\r\n  private fixPipelineDataSources(pipelineDataSources: PipelineDataSource[]) {\r\n    const outDataSourceExists = pipelineDataSources.some(pipelineDS => pipelineDS.EntityGuid === 'Out');\r\n    if (!outDataSourceExists) {\r\n      const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n      const outDsConst: PipelineDataSource = {\r\n        Description: outDs.description,\r\n        EntityGuid: 'Out',\r\n        EntityId: undefined,\r\n        Name: outDs.name,\r\n        PartAssemblyAndType: outDs.className,\r\n        VisualDesignerData: outDs.visualDesignerData,\r\n      };\r\n      pipelineDataSources.push(outDsConst);\r\n    }\r\n\r\n    for (const pipelineDataSource of pipelineDataSources) {\r\n      pipelineDataSource.VisualDesignerData = pipelineDataSource.VisualDesignerData || { Top: 50, Left: 50 };\r\n    }\r\n  }\r\n\r\n  fetchDataSources() {\r\n    const dataSources$ = this.http.get(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiQueryDataSources)\r\n    ) as Observable<DataSource[]>;\r\n    return dataSources$.pipe(\r\n      map(dataSources => {\r\n        const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n        const outDsConst: DataSource = {\r\n          ContentType: undefined,\r\n          Difficulty: 100,\r\n          DynamicOut: false,\r\n          EnableConfig: undefined,\r\n          HelpLink: undefined,\r\n          Icon: undefined,\r\n          In: outDs.in,\r\n          Name: outDs.name || outDs.className,\r\n          Out: undefined,\r\n          PartAssemblyAndType: outDs.className,\r\n          PrimaryType: 'Target',\r\n          UiHint: undefined,\r\n          allowNew: false,\r\n        };\r\n        dataSources.push(outDsConst);\r\n        return dataSources;\r\n      }),\r\n    );\r\n  }\r\n\r\n  typeNameFilter(input: string, format: string) {\r\n    const globalParts = input.split(', ');\r\n\r\n    switch (format) {\r\n      case 'classFullName':\r\n        const classFullName = globalParts[0];\r\n        return classFullName;\r\n      case 'className':\r\n        const classFullNameParts = globalParts[0].split('.');\r\n        const className = classFullNameParts[classFullNameParts.length - 1];\r\n        return className;\r\n    }\r\n\r\n    return input;\r\n  }\r\n\r\n  /** Save the current query and reload entire definition as returned from server */\r\n  savePipeline(pipelineModel: PipelineModel) {\r\n    const pipeline = pipelineModel.Pipeline;\r\n    const dataSources = pipelineModel.DataSources;\r\n    const pipelineModel$ = this.http.post(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiQuerySave),\r\n      { pipeline, dataSources },\r\n      { params: { appId: this.context.appId.toString(), Id: pipeline.EntityId.toString() } }\r\n    ) as Observable<PipelineModel>;\r\n\r\n    return pipelineModel$.pipe(\r\n      map(pipeModel => {\r\n        this.fixPipelineDataSources(pipeModel.DataSources);\r\n        return pipeModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  runPipeline(id: number) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl(webApiQueryRun), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString() }\r\n    }) as Observable<PipelineResult>;\r\n  }\r\n\r\n}\r\n","import { DataSource } from '../models/data-sources.model';\r\nimport { PipelineDataSource } from '../models/pipeline.model';\r\nimport { GuiTypes, TypeInfo, TypeInfos } from './plumb-editor.models';\r\n\r\nexport const guiTypes: GuiTypes = {\r\n  Cache: { name: 'Cache', icon: 'history', notes: 'Caching of data' },\r\n  Filter: { name: 'Filter', icon: 'filter_list', notes: 'Filter data - usually returning less items than came in' },\r\n  Logic: { name: 'Logic', icon: 'share', notes: 'Logic operations - usually choosing between different streams' },\r\n  Lookup: { name: 'Lookup', icon: 'search', notes: 'Lookup operation - usually looking for other data based on a criteria' },\r\n  Modify: { name: 'Modify', icon: 'star_half', notes: 'Modify data - usually changing, adding or removing values' },\r\n  Security: { name: 'Security', icon: 'account_circle', notes: 'Security - usually limit what the user sees based on his identity' },\r\n  Sort: { name: 'Sort', icon: 'sort', notes: 'Sort the items' },\r\n  Source: { name: 'Source', icon: 'cloud_upload', notes: 'Source of new data - usually SQL, CSV or similar' },\r\n  Target: { name: 'Target', icon: 'adjust', notes: 'Target - usually just a destination of data' },\r\n  Unknown: { name: 'Unknown', icon: 'fiber_manual_record', notes: 'Unknown type' },\r\n};\r\n\r\nexport function calculateTypeInfos(pipelineDataSources: PipelineDataSource[], dataSources: DataSource[]) {\r\n  const typeInfos: TypeInfos = {};\r\n\r\n  for (const pipelineDataSource of pipelineDataSources) {\r\n    let typeInfo: TypeInfo;\r\n    const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    if (dataSource) {\r\n      typeInfo = { ...(dataSource.PrimaryType ? guiTypes[dataSource.PrimaryType] : guiTypes.Unknown) };\r\n      if (dataSource.Icon) { typeInfo.icon = dataSource.Icon; }\r\n      if (dataSource.DynamicOut) { typeInfo.dynamicOut = true; }\r\n      if (dataSource.HelpLink) { typeInfo.helpLink = dataSource.HelpLink; }\r\n      if (dataSource.EnableConfig) { typeInfo.config = dataSource.EnableConfig; }\r\n    }\r\n    if (!typeInfo) { typeInfo = guiTypes.Unknown; }\r\n    typeInfos[pipelineDataSource.EntityGuid] = typeInfo;\r\n  }\r\n\r\n  return typeInfos;\r\n}\r\n","import { DataSource } from '../models/data-sources.model';\r\nimport { PipelineResult } from '../models/pipeline-result.model';\r\nimport { PipelineDataSource, PipelineModel, StreamWire, VisualDesignerData } from '../models/pipeline.model';\r\n\r\nexport const dataSrcIdPrefix = 'dataSource_';\r\ntype PlumbType = any;\r\ndeclare const jsPlumb: PlumbType;\r\n\r\nexport class Plumber {\r\n  private instance: PlumbType;\r\n  private lineCount = 0;\r\n  private linePaintDefault = {\r\n    stroke: '#61B7CF',\r\n    strokeWidth: 4,\r\n    outlineStroke: 'white',\r\n    outlineWidth: 2,\r\n  };\r\n  private lineColors = [\r\n    '#009688', '#00bcd4', '#3f51b5', '#9c27b0', '#e91e63',\r\n    '#db4437', '#ff9800', '#60a917', '#60a917', '#008a00',\r\n    '#00aba9', '#1ba1e2', '#0050ef', '#6a00ff', '#aa00ff',\r\n    '#f472d0', '#d80073', '#a20025', '#e51400', '#fa6800',\r\n    '#f0a30a', '#e3c800', '#825a2c', '#6d8764', '#647687',\r\n    '#76608a', '#a0522d',\r\n  ];\r\n  private maxCols = this.lineColors.length - 1;\r\n  private uuidColorMap: { [key: string]: any } = {};\r\n  private bulkDelete = false;\r\n\r\n  constructor(\r\n    private jsPlumbRoot: HTMLElement,\r\n    private pipelineModel: PipelineModel,\r\n    private dataSources: DataSource[],\r\n    private onConnectionsChanged: () => void,\r\n    private onDragend: (pipelineDataSourceGuid: string, position: VisualDesignerData) => void,\r\n    /** Workaround for multiple dblClick listeners */\r\n    private plumbInits: number,\r\n  ) {\r\n    this.instance = jsPlumb.getInstance(this.getInstanceDefaults(this.jsPlumbRoot));\r\n    this.instance.batch(() => {\r\n      this.initDomDataSources();\r\n      this.initWirings();\r\n      this.bindEvents();\r\n    });\r\n    // spm NOTE: repaint after initial paint fixes:\r\n    // Error: <svg> attribute width: Expected length, \"-Infinity\".\r\n    this.instance.repaintEverything();\r\n  }\r\n\r\n  destroy() {\r\n    this.instance.reset();\r\n  }\r\n\r\n  removeEndpointsOnDataSource(pipelineDataSourceGuid: string) {\r\n    const elementId = dataSrcIdPrefix + pipelineDataSourceGuid;\r\n    this.bulkDelete = true;\r\n    this.instance.batch(() => {\r\n      this.instance.selectEndpoints({ element: elementId }).delete();\r\n    });\r\n    this.bulkDelete = false;\r\n  }\r\n\r\n  getAllConnections() {\r\n    const connectionInfos: StreamWire[] = this.instance.getAllConnections().map((connection: PlumbType) => {\r\n      const wire: StreamWire = {\r\n        From: connection.sourceId.replace(dataSrcIdPrefix, ''),\r\n        Out: connection.endpoints[0].getOverlay('endpointLabel').label,\r\n        To: connection.targetId.replace(dataSrcIdPrefix, ''),\r\n        In: connection.endpoints[1].getOverlay('endpointLabel').label,\r\n      };\r\n      return wire;\r\n    });\r\n    return connectionInfos;\r\n  }\r\n\r\n  getStreamsOut() {\r\n    const streamsOut: string[] = [];\r\n    this.instance.selectEndpoints({ target: dataSrcIdPrefix + 'Out' }).each((endpoint: PlumbType) => {\r\n      streamsOut.push(endpoint.getOverlay('endpointLabel').label);\r\n    });\r\n    const streamsOutStr = streamsOut.join(',');\r\n    return streamsOutStr;\r\n  }\r\n\r\n  putEntityCountOnConnections(result: PipelineResult) {\r\n    result.Streams?.forEach(stream => {\r\n      const sourceElementId = dataSrcIdPrefix + stream.Source;\r\n      const outTargets = ['00000000-0000-0000-0000-000000000000', this.pipelineModel.Pipeline.EntityGuid];\r\n      const targetElementId = outTargets.includes(stream.Target) ? dataSrcIdPrefix + 'Out' : dataSrcIdPrefix + stream.Target;\r\n\r\n      const fromUuid = sourceElementId + '_out_' + stream.SourceOut;\r\n      const toUuid = targetElementId + '_in_' + stream.TargetIn;\r\n\r\n      const sEndp: PlumbType = this.instance.getEndpoint(fromUuid);\r\n      sEndp?.connections?.forEach((connection: PlumbType) => {\r\n        if (connection.endpoints[1].getUuid() !== toUuid) { return; }\r\n\r\n        connection.setLabel({ label: stream.Count.toString(), cssClass: 'streamEntitiesCount' });\r\n      });\r\n    });\r\n  }\r\n\r\n  private nextLinePaintStyle(uuid: string) {\r\n    return (\r\n      this.uuidColorMap[uuid] ||\r\n      (this.uuidColorMap[uuid] = Object.assign({}, this.linePaintDefault, { stroke: this.lineColors[this.lineCount++ % this.maxCols] }))\r\n    );\r\n  }\r\n\r\n  private getInstanceDefaults(container: HTMLElement) {\r\n    const defaults = {\r\n      Container: container,\r\n      Connector: ['Bezier', { curviness: 70 }],\r\n      PaintStyle: this.nextLinePaintStyle('dummy'),\r\n      HoverPaintStyle: {\r\n        stroke: '#216477',\r\n        strokeWidth: 4,\r\n        outlineStroke: 'white',\r\n        outlineWidth: 2,\r\n      },\r\n    };\r\n    return defaults;\r\n  }\r\n\r\n  /** Create sources, targets and endpoints */\r\n  private initDomDataSources() {\r\n    for (const pipelineDataSource of this.pipelineModel.DataSources) {\r\n      const domDataSource: HTMLElement = this.jsPlumbRoot.querySelector('#' + dataSrcIdPrefix + pipelineDataSource.EntityGuid);\r\n      if (!domDataSource) { continue; }\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      if (!dataSource) { continue; }\r\n\r\n      if (this.pipelineModel.Pipeline.AllowEdit) {\r\n        // WARNING! Must happen before instance.makeSource()\r\n        this.instance.draggable(domDataSource, {\r\n          grid: [20, 20], stop: (event: PlumbType) => {\r\n            const element: HTMLElement = event.el;\r\n            const pipelineDataSourceGuid: string = element.id.replace(dataSrcIdPrefix, '');\r\n            const position: VisualDesignerData = {\r\n              Top: event.finalPos[1],\r\n              Left: event.finalPos[0],\r\n            };\r\n            setTimeout(() => { this.onDragend(pipelineDataSourceGuid, position); });\r\n          }\r\n        });\r\n      }\r\n\r\n      // Add Out-Endpoints from Definition\r\n      dataSource.Out?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, false, pipelineDataSource);\r\n      });\r\n\r\n      // Add Out-Endpoints from Definition\r\n      dataSource.In?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, true, pipelineDataSource);\r\n      });\r\n\r\n      // Make DataSource a Target for new Endpoints (if .In is an Array)\r\n      if (dataSource.In) {\r\n        const targetEndpointUnlimited = this.buildTargetEndpoint();\r\n        targetEndpointUnlimited.maxConnections = -1;\r\n        this.instance.makeTarget(domDataSource, targetEndpointUnlimited);\r\n      }\r\n\r\n      if (dataSource.DynamicOut) {\r\n        this.instance.makeSource(domDataSource, this.buildSourceEndpoint(), { filter: '.add-endpoint .new-connection' });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Create wires */\r\n  private initWirings() {\r\n    this.pipelineModel.Pipeline.StreamWiring?.forEach(wire => {\r\n      // read connections from Pipeline\r\n      const sourceElementId = dataSrcIdPrefix + wire.From;\r\n      const fromUuid = sourceElementId + '_out_' + wire.Out;\r\n      const targetElementId = dataSrcIdPrefix + wire.To;\r\n      const toUuid = targetElementId + '_in_' + wire.In;\r\n\r\n      // Ensure In-Endpoint exist\r\n      if (!this.instance.getEndpoint(fromUuid)) {\r\n        const domDataSource: HTMLElement = this.jsPlumbRoot.querySelector('#' + sourceElementId);\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.Out, false, pipelineDataSource);\r\n      }\r\n\r\n      // Ensure Out-Endpoint exist\r\n      if (!this.instance.getEndpoint(toUuid)) {\r\n        const domDataSource: HTMLElement = this.jsPlumbRoot.querySelector('#' + targetElementId);\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.In, true, pipelineDataSource);\r\n      }\r\n\r\n      try {\r\n        this.instance.connect({\r\n          uuids: [fromUuid, toUuid],\r\n          paintStyle: this.nextLinePaintStyle(fromUuid),\r\n        });\r\n      } catch (e) {\r\n        console.error({ message: 'Connection failed', from: fromUuid, to: toUuid });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addEndpoint(domDataSource: HTMLElement, name: string, isIn: boolean, pipelineDataSource: PipelineDataSource) {\r\n    const uuid = domDataSource.id + (isIn ? '_in_' : '_out_') + name;\r\n    const model = isIn ? this.buildTargetEndpoint() : this.buildSourceEndpoint();\r\n    // Endpoints on Out-DataSource must be always enabled\r\n    const params = { uuid, enabled: this.pipelineModel.Pipeline.AllowEdit || pipelineDataSource.EntityGuid === 'Out' };\r\n\r\n    const endPoint: PlumbType = this.instance.addEndpoint(domDataSource, model, params);\r\n    endPoint.getOverlay('endpointLabel').setLabel(name);\r\n  }\r\n\r\n  private buildSourceEndpoint() {\r\n    const sourceEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'sourceEndpoint',\r\n      maxConnections: -1,\r\n      isSource: true,\r\n      anchor: ['Continuous', { faces: ['top'] }],\r\n      overlays: this.getEndpointOverlays(true)\r\n    };\r\n    return sourceEndpoint;\r\n  }\r\n\r\n  private buildTargetEndpoint() {\r\n    const targetEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'targetEndpoint',\r\n      maxConnections: 1,\r\n      isTarget: true,\r\n      anchor: ['Continuous', { faces: ['bottom'] }],\r\n      overlays: this.getEndpointOverlays(false),\r\n      dropOptions: { hoverClass: 'hover', activeClass: 'active' }\r\n    };\r\n    return targetEndpoint;\r\n  }\r\n\r\n  private getEndpointOverlays(isSource: boolean) {\r\n    return [\r\n      [\r\n        'Label', {\r\n          id: 'endpointLabel',\r\n          // location: [0.5, isSource ? -0.5 : 1.5],\r\n          location: [0.5, isSource ? 0 : 1],\r\n          label: 'Default',\r\n          cssClass: 'noselect ' + (isSource ? 'endpointSourceLabel' : 'endpointTargetLabel'),\r\n          events: {\r\n            dblclick: (labelOverlay: PlumbType) => {\r\n              if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n\r\n              // spm NOTE: workaround for multiple dblclick listeners\r\n              if (labelOverlay.dblClickCounter == null || labelOverlay.dblClickCounter >= this.plumbInits) {\r\n                labelOverlay.dblClickCounter = 1;\r\n              } else {\r\n                labelOverlay.dblClickCounter++;\r\n              }\r\n              if (labelOverlay.dblClickCounter > 1) { return; }\r\n\r\n              const newLabel = prompt('Rename stream', labelOverlay.label);\r\n              if (!newLabel) { return; }\r\n              labelOverlay.setLabel(newLabel);\r\n              setTimeout(() => { this.onConnectionsChanged(); });\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    ];\r\n  }\r\n\r\n  private bindEvents() {\r\n    // If connection on Out-DataSource was removed, remove custom Endpoint\r\n    this.instance.bind('connectionDetached', (info: PlumbType) => {\r\n      // spm TODO: custom endpoints were removed only on Out DataSource. Bug?\r\n      // if (info.targetId !== dataSrcIdPrefix + 'Out') { return; }\r\n      if (this.bulkDelete) { return; }\r\n      const domDataSource: HTMLElement = info.target;\r\n      const pipelineDataSource = this.pipelineModel.DataSources.find(\r\n        pipelineDS => pipelineDS.EntityGuid === domDataSource.id.replace(dataSrcIdPrefix, '')\r\n      );\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      const fixedEndpoints = dataSource.In;\r\n      const label: string = info.targetEndpoint.getOverlay('endpointLabel').label;\r\n      if (fixedEndpoints.includes(label)) {\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n        return;\r\n      }\r\n      this.instance.deleteEndpoint(info.targetEndpoint);\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n\r\n    this.instance.bind('connection', (info: PlumbType) => {\r\n      if (info.sourceId === info.targetId) {\r\n        setTimeout(() => {\r\n          this.instance.deleteConnection(info.connection, { fireEvent: false });\r\n          setTimeout(() => { this.onConnectionsChanged(); });\r\n        });\r\n        return;\r\n      }\r\n      const endpointLabel: PlumbType = info.targetEndpoint.getOverlay('endpointLabel');\r\n      const labelPrompt: string = endpointLabel.getLabel();\r\n      const endpoints: PlumbType[] = this.instance.getEndpoints(info.target.id);\r\n      const targetEndpointHasSameLabel = endpoints.some(endpoint => {\r\n        const label: string = endpoint.getOverlay('endpointLabel').getLabel();\r\n        return label === labelPrompt &&\r\n          info.targetEndpoint.id !== endpoint.id &&\r\n          (endpoint.canvas as HTMLCanvasElement).classList.contains('targetEndpoint');\r\n      });\r\n      if (targetEndpointHasSameLabel) {\r\n        endpointLabel.setLabel(`PleaseRename${Math.floor(Math.random() * 99999)}`);\r\n      }\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n  }\r\n\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Query Results</div>\r\n    <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n<p class=\"dialog-description\">\r\n  The Full result was logged to the Browser Console. Further down you'll find more debug-infos.\r\n</p>\r\n\r\n<br />\r\n\r\n<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Parameters & Statistics</div>\r\n</div>\r\n<p class=\"description\">\r\n  Executed in {{ timeUsed }}ms ({{ ticksUsed }} ticks)\r\n</p>\r\n<ul class=\"description\">\r\n  <li *ngFor=\"let param of testParameters?.split('\\n')\">{{ param }}</li>\r\n</ul>\r\n\r\n<br />\r\n\r\n<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Query Results</div>\r\n</div>\r\n<pre>\r\n  {{ result | json }}\r\n</pre>\r\n\r\n<br />\r\n\r\n<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Sources</div>\r\n</div>\r\n<table class=\"description\">\r\n  <tr>\r\n    <th>Guid</th>\r\n    <th>Type</th>\r\n    <th>Configuration</th>\r\n    <th>Error</th>\r\n  </tr>\r\n  <tr *ngFor=\"let source of sources | keyvalue\">\r\n    <td>\r\n      <pre>{{ source.value.Guid }}</pre>\r\n    </td>\r\n    <td>{{ source.value.Type }}</td>\r\n    <td>\r\n      <ol>\r\n        <li *ngFor=\"let config of source.value.Configuration | keyvalue\">\r\n          <b>{{ config.key }}</b>=<em>{{ config.value }}</em></li>\r\n      </ol>\r\n    </td>\r\n    <td>{{ source.value.Error }}</td>\r\n  </tr>\r\n</table>\r\n\r\n<br />\r\n\r\n<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Streams</div>\r\n</div>\r\n<table class=\"description\">\r\n  <tr>\r\n    <th>Source</th>\r\n    <th>Target</th>\r\n    <th>Items</th>\r\n    <th>Error</th>\r\n  </tr>\r\n  <tr *ngFor=\"let stream of streams\">\r\n    <td>\r\n      <pre>{{ stream.Source + \":\" + stream.SourceOut }}</pre>\r\n    </td>\r\n    <td>\r\n      <pre>{{ stream.Target + \":\" + stream.TargetIn }}</pre>\r\n    </td>\r\n    <td>{{ stream.Count }}</td>\r\n    <td>{{ stream.Error }}</td>\r\n  </tr>\r\n</table>\r\n","import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { PipelineResultQuery, PipelineResultSources, PipelineResultStream } from '../models/pipeline-result.model';\r\nimport { QueryResultDialogData } from './query-result.models';\r\n\r\n@Component({\r\n  selector: 'app-query-result',\r\n  templateUrl: './query-result.component.html',\r\n  styleUrls: ['./query-result.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class QueryResultComponent implements OnInit {\r\n  testParameters: string;\r\n  timeUsed: number;\r\n  ticksUsed: number;\r\n  result: PipelineResultQuery;\r\n  sources: PipelineResultSources;\r\n  streams: PipelineResultStream[];\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public dialogData: QueryResultDialogData, private dialogRef: MatDialogRef<QueryResultComponent>) { }\r\n\r\n  ngOnInit() {\r\n    this.testParameters = this.dialogData.testParameters;\r\n    this.timeUsed = this.dialogData.result.QueryTimer.Milliseconds;\r\n    this.ticksUsed = this.dialogData.result.QueryTimer.Ticks;\r\n    this.result = this.dialogData.result.Query;\r\n    this.sources = this.dialogData.result.Sources;\r\n    this.streams = this.dialogData.result.Streams;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Injectable, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { BehaviorSubject, fromEvent, Subject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../../permissions/services/metadata.service';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\nimport { DataSource, DataSourceMetadata } from '../models/data-sources.model';\r\nimport { PipelineResult } from '../models/pipeline-result.model';\r\nimport { PipelineDataSource, PipelineModel, StreamWire, VisualDesignerData } from '../models/pipeline.model';\r\nimport { QueryResultComponent } from '../query-result/query-result.component';\r\nimport { QueryResultDialogData } from '../query-result/query-result.models';\r\nimport { QueryDefinitionService } from './query-definition.service';\r\n\r\n@Injectable()\r\nexport class VisualQueryService implements OnDestroy {\r\n  pipelineModel$ = new BehaviorSubject<PipelineModel>(null);\r\n  dataSources$ = new BehaviorSubject<DataSource[]>(null);\r\n  putEntityCountOnConnections$ = new Subject<PipelineResult>();\r\n\r\n  private pipelineId = parseInt(this.route.snapshot.paramMap.get('pipelineId'), 10);\r\n  private doRefresh = false;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private titleService: Title,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private zone: NgZone,\r\n    private metadataService: MetadataService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnDestroy() {\r\n    this.pipelineModel$.complete();\r\n    this.dataSources$.complete();\r\n    this.putEntityCountOnConnections$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  init() {\r\n    this.fetchPipeline();\r\n    this.fetchDataSources();\r\n    this.attachKeyboardSave();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  editPipelineEntity() {\r\n    // save Pipeline, then open Edit Dialog\r\n    this.savePipeline(() => {\r\n      const form: EditForm = {\r\n        items: [{ EntityId: this.pipelineModel$.value.Pipeline.EntityId }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.doRefresh = true;\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n    });\r\n  }\r\n\r\n  saveAndRun(save: boolean, run: boolean) {\r\n    if (save && run) {\r\n      this.savePipeline(() => { this.runPipeline(); });\r\n    } else if (save) {\r\n      this.savePipeline();\r\n    } else if (run) {\r\n      this.runPipeline();\r\n    }\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const newPipelineDataSource: PipelineDataSource = {\r\n      Description: '',\r\n      EntityGuid: 'unsaved' + (pipelineModel.DataSources.length + 1),\r\n      EntityId: undefined,\r\n      Name: this.queryDefinitionService.typeNameFilter(dataSource.PartAssemblyAndType, 'className'),\r\n      PartAssemblyAndType: dataSource.PartAssemblyAndType,\r\n      VisualDesignerData: { Top: 100, Left: 100 },\r\n    };\r\n    pipelineModel.DataSources.push(newPipelineDataSource);\r\n    this.pipelineModel$.next(pipelineModel);\r\n    this.savePipeline();\r\n  }\r\n\r\n  removeDataSource(pipelineDataSourceGuid: string, connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.DataSources = pipelineModel.DataSources.filter(pipelineDS => pipelineDS.EntityGuid !== pipelineDataSourceGuid);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  renameDataSource(pipelineDataSourceGuid: string, name: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Name = name;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourceDescription(pipelineDataSourceGuid: string, description: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Description = description;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeConnections(connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourcePosition(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    if (!pipelineDataSource) {\r\n      // spm NOTE: fixes problem where dataSource position can't be updated if dataSource with guid unsavedXX gets saved while dragging.\r\n      // Can happen if dataSource is just added and user drags it and save happens.\r\n      return;\r\n    }\r\n    pipelineDataSource.VisualDesignerData = { ...pipelineDataSource.VisualDesignerData, ...position };\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  editDataSource(pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources$.value.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n\r\n    const contentTypeName = dataSource?.ContentType\r\n      ? dataSource.ContentType\r\n      : '|Config ' + this.queryDefinitionService.typeNameFilter(pipelineDataSource.PartAssemblyAndType, 'classFullName');\r\n\r\n    const typeId = eavConstants.metadata.entity.type;\r\n    const keyType = eavConstants.keyTypes.guid;\r\n    const key = pipelineDataSource.EntityGuid;\r\n\r\n    // Query for existing Entity\r\n    this.metadataService.getMetadata(typeId, keyType, key, contentTypeName).subscribe((metadata: DataSourceMetadata[]) => {\r\n      // Edit existing Entity\r\n      if (metadata.length) {\r\n        const form: EditForm = {\r\n          items: [{ EntityId: metadata[0].Id }],\r\n        };\r\n        const formUrl = convertFormToUrl(form);\r\n        this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        return;\r\n      }\r\n\r\n      // Check if the type exists, and if yes, create new Entity\r\n      this.contentTypesService.retrieveContentType(contentTypeName /*, { ignoreErrors: 'true' } */).subscribe({\r\n        next: contentType => {\r\n          const form: EditForm = {\r\n            items: [{\r\n              ContentTypeName: contentTypeName,\r\n              For: {\r\n                Target: eavConstants.metadata.entity.target,\r\n                Guid: key,\r\n              }\r\n            }],\r\n          };\r\n          const formUrl = convertFormToUrl(form);\r\n          this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        },\r\n        error: error => {\r\n          alert('Server reports error - this usually means that this data-source doesn\\'t have any configuration');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private savePipeline(callback?: () => void) {\r\n    this.snackBar.open('Saving...');\r\n    this.queryDefinitionService.savePipeline(this.pipelineModel$.value).subscribe({\r\n      next: pipelineModel => {\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.pipelineModel$.next(pipelineModel);\r\n        if (callback != null) { callback(); }\r\n      },\r\n      error: error => {\r\n        this.snackBar.open('Save Pipeline failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private runPipeline() {\r\n    this.snackBar.open('Running query...');\r\n    this.queryDefinitionService.runPipeline(this.pipelineModel$.value.Pipeline.EntityId).subscribe({\r\n      next: pipelineResult => {\r\n        this.snackBar.open('Query worked', null, { duration: 2000 });\r\n        // open modal with the results\r\n        const dialogData: QueryResultDialogData = {\r\n          testParameters: this.pipelineModel$.value.Pipeline.TestParameters,\r\n          result: pipelineResult,\r\n        };\r\n        this.dialog.open(QueryResultComponent, {\r\n          data: dialogData,\r\n          backdropClass: 'dialog-backdrop',\r\n          panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n          viewContainerRef: this.viewContainerRef,\r\n          autoFocus: false,\r\n          closeOnNavigation: false,\r\n          // spm NOTE: used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n          // Real top margin is overwritten in css e.g. dialog-panel-large\r\n          position: { top: '0' },\r\n        });\r\n        this.changeDetectorRef.markForCheck();\r\n        console.warn(pipelineResult);\r\n        setTimeout(() => { this.putEntityCountOnConnections$.next(pipelineResult); });\r\n      },\r\n      error: error => {\r\n        this.snackBar.open('Query failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchPipeline(reloadingSnackBar = false) {\r\n    if (reloadingSnackBar) {\r\n      this.snackBar.open('Reloading query, please wait...');\r\n    }\r\n    this.queryDefinitionService.fetchPipeline(this.pipelineId).subscribe(pipelineModel => {\r\n      if (reloadingSnackBar) {\r\n        this.snackBar.open('Query reloaded', null, { duration: 2000 });\r\n      }\r\n      this.pipelineModel$.next(pipelineModel);\r\n      this.titleService.setTitle(`${pipelineModel.Pipeline.Name} - Visual Query`);\r\n    });\r\n  }\r\n\r\n  private fetchDataSources() {\r\n    this.queryDefinitionService.fetchDataSources().subscribe(dataSources => {\r\n      this.dataSources$.next(dataSources);\r\n    });\r\n  }\r\n\r\n  private attachKeyboardSave() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent(window, 'keydown').pipe(\r\n          filter(() => !this.route.snapshot.firstChild),\r\n          filter((event: KeyboardEvent) => {\r\n            const CTRL_S = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.keyCode === 83;\r\n            return CTRL_S;\r\n          }),\r\n        ).subscribe(event => {\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.savePipeline(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n        filter(() => {\r\n          const refresh = this.doRefresh;\r\n          this.doRefresh = false;\r\n          return refresh;\r\n        }),\r\n      ).subscribe(() => {\r\n        this.fetchPipeline(true);\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div #domRoot id=\"pipeline-root\" *ngIf=\"(templateModel$ | async) as templateModel\">\r\n  <!-- do not use trackBy, jsPlumb drag stops working properly after delete -->\r\n  <ng-container *ngIf=\"!hardReset\">\r\n    <div #domDataSource *ngFor=\"let dataSource of templateModel.pipelineDataSources\"\r\n      [id]=\"dataSrcIdPrefix + dataSource.EntityGuid\" class=\"dataSource\" [ngStyle]=\"{\r\n        'top': dataSource.VisualDesignerData.Top + 'px',\r\n        'left': dataSource.VisualDesignerData.Left + 'px',\r\n        'min-width': dataSource.VisualDesignerData.Width ? dataSource.VisualDesignerData.Width + 'px' : null\r\n      }\">\r\n\r\n      <div class=\"configure\" title=\"Configure data source\" appMousedownStopPropagation\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].config\"\r\n        (click)=\"configureDataSource(dataSource)\">\r\n        <mat-icon class=\"eav-icon-settings\">settings</mat-icon>\r\n      </div>\r\n\r\n      <mat-icon class=\"type-info\" [title]=\"templateModel.typeInfos[dataSource.EntityGuid].notes\">\r\n        {{ templateModel.typeInfos[dataSource.EntityGuid].icon }}\r\n      </mat-icon>\r\n\r\n      <div class=\"name noselect\" title=\"Click to edit name\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editName(dataSource)\">\r\n        <span>{{ dataSource.Name || '(no name)' }}</span>\r\n        <mat-icon class=\"show-hover-inline eav-icon-pencil\">edit</mat-icon>\r\n      </div>\r\n      <br />\r\n\r\n      <div class=\"description noselect\" title=\"Click to edit description\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editDescription(dataSource)\">\r\n        <span>{{ dataSource.Description }}</span>\r\n        <mat-icon class=\"show-hover-inline eav-icon-pencil\">edit</mat-icon>\r\n      </div>\r\n      <br />\r\n\r\n      <div class=\"typename\" [title]=\"dataSource.PartAssemblyAndType\">\r\n        Type: {{ typeNameFilter(dataSource.PartAssemblyAndType, 'className') }}\r\n      </div>\r\n\r\n      <div class=\"add-endpoint\" title=\"Drag a new Out-Connection\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].dynamicOut\">\r\n        <mat-icon class=\"new-connection eav-icon-up-dir\">arrow_drop_up</mat-icon>\r\n      </div>\r\n\r\n      <mat-icon class=\"delete eav-icon-cancel\" title=\"Delete\" appMousedownStopPropagation\r\n        *ngIf=\"templateModel.allowEdit\" (click)=\"remove(dataSource)\">\r\n        delete\r\n      </mat-icon>\r\n\r\n      <a class=\"help eav-icon-help-circled\" title=\"Help for this data source\"\r\n        [href]=\"templateModel.typeInfos[dataSource.EntityGuid].helpLink\" target=\"_blank\" appMousedownStopPropagation\r\n        *ngIf=\"templateModel.typeInfos[dataSource.EntityGuid].helpLink\">\r\n        <mat-icon>help_outline</mat-icon>\r\n      </a>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { loadScripts } from '../../shared/helpers/load-scripts.helper';\r\nimport { PipelineDataSource, VisualDesignerData } from '../models/pipeline.model';\r\nimport { QueryDefinitionService } from '../services/query-definition.service';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateTypeInfos } from './plumb-editor.helpers';\r\nimport { PlumbEditorTemplateModel } from './plumb-editor.models';\r\nimport { dataSrcIdPrefix, Plumber } from './plumber.helper';\r\n\r\nconst jsPlumbUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.14.5/js/jsplumb.min.js';\r\n\r\n@Component({\r\n  selector: 'app-plumb-editor',\r\n  templateUrl: './plumb-editor.component.html',\r\n  styles: [':host { display: block; width: 100%; height: 100%; }'],\r\n  styleUrls: ['./plumb-editor.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PlumbEditorComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('domRoot') private domRootRef: ElementRef<HTMLDivElement>;\r\n  @ViewChildren('domDataSource') private domDataSourcesRef: QueryList<ElementRef<HTMLDivElement>>;\r\n\r\n  dataSrcIdPrefix = dataSrcIdPrefix;\r\n  templateModel$: Observable<PlumbEditorTemplateModel>;\r\n  hardReset = false;\r\n\r\n  private plumber: Plumber;\r\n  private scriptLoaded$ = new BehaviorSubject(false);\r\n  private subscription = new Subscription();\r\n  private plumbInits = 0;\r\n\r\n  constructor(\r\n    private visualQueryService: VisualQueryService,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    loadScripts([{ test: 'jsPlumb', src: jsPlumbUrl }], () => {\r\n      this.scriptLoaded$.next(true);\r\n    });\r\n\r\n    this.subscription.add(\r\n      this.visualQueryService.putEntityCountOnConnections$.subscribe(result => {\r\n        this.plumber.putEntityCountOnConnections(result);\r\n      })\r\n    );\r\n\r\n    this.templateModel$ = combineLatest([this.visualQueryService.pipelineModel$, this.visualQueryService.dataSources$]).pipe(\r\n      map(([pipelineModel, dataSources]) => {\r\n        if (pipelineModel == null || dataSources == null) { return; }\r\n\r\n        // workaround for jsPlumb not working with dom elements which it initialized on previously.\r\n        // This wipes dom entirely and gives us new elements\r\n        this.hardReset = true;\r\n        this.changeDetectorRef.detectChanges();\r\n        this.hardReset = false;\r\n        const templateModel: PlumbEditorTemplateModel = {\r\n          pipelineDataSources: pipelineModel.DataSources,\r\n          typeInfos: calculateTypeInfos(pipelineModel.DataSources, dataSources),\r\n          allowEdit: pipelineModel.Pipeline.AllowEdit,\r\n        };\r\n        return templateModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // https://stackoverflow.com/questions/37087864/execute-a-function-when-ngfor-finished-in-angular-2/37088348#37088348\r\n    const domDataSourcesLoaded$ = this.domDataSourcesRef.changes.pipe(map(() => true));\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.scriptLoaded$, domDataSourcesLoaded$]).subscribe(([scriptLoaded, domDataSourcesLoaded]) => {\r\n        if (!scriptLoaded || !domDataSourcesLoaded) { return; }\r\n\r\n        this.plumber?.destroy();\r\n        this.plumber = new Plumber(\r\n          this.domRootRef.nativeElement,\r\n          this.visualQueryService.pipelineModel$.value,\r\n          this.visualQueryService.dataSources$.value,\r\n          this.onConnectionsChanged.bind(this),\r\n          this.onDragend.bind(this),\r\n          ++this.plumbInits,\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.plumber?.destroy();\r\n    this.scriptLoaded$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  onConnectionsChanged() {\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.changeConnections(connections, streamsOut);\r\n  }\r\n\r\n  onDragend(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    this.visualQueryService.changeDataSourcePosition(pipelineDataSourceGuid, position);\r\n  }\r\n\r\n  configureDataSource(dataSource: PipelineDataSource) {\r\n    // ensure dataSource entity is saved\r\n    if (dataSource.EntityGuid.includes('unsaved')) {\r\n      this.visualQueryService.saveAndRun(true, false);\r\n    } else {\r\n      this.visualQueryService.editDataSource(dataSource);\r\n    }\r\n  }\r\n\r\n  typeNameFilter(input: string, format: string) {\r\n    const filtered = this.queryDefinitionService.typeNameFilter(input, format);\r\n    return filtered;\r\n  }\r\n\r\n  remove(pipelineDataSource: PipelineDataSource) {\r\n    if (!confirm(`Delete ${pipelineDataSource.Name} data source?`)) { return; }\r\n\r\n    this.plumber.removeEndpointsOnDataSource(pipelineDataSource.EntityGuid);\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.removeDataSource(pipelineDataSource.EntityGuid, connections, streamsOut);\r\n  }\r\n\r\n  editName(dataSource: PipelineDataSource) {\r\n    const newName = prompt('Rename data source', dataSource.Name)?.trim();\r\n    if (newName == null || newName === '') { return; }\r\n\r\n    this.visualQueryService.renameDataSource(dataSource.EntityGuid, newName);\r\n  }\r\n\r\n  editDescription(dataSource: PipelineDataSource) {\r\n    const newDescription = prompt('Edit description', dataSource.Description)?.trim();\r\n    if (newDescription == null) { return; }\r\n\r\n    this.visualQueryService.changeDataSourceDescription(dataSource.EntityGuid, newDescription);\r\n  }\r\n\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"(pipelineModel$ | async) as pipelineModel\">\r\n\r\n  <div class=\"wrapper\">\r\n    <div class=\"actions\">\r\n      <button mat-raised-button class=\"action\" color=\"accent\" (click)=\"saveAndRunQuery(true, true)\">\r\n        Save and run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(false, true)\">\r\n        Run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(true, false)\">\r\n        Save\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">\r\n        <div>Parameters</div>\r\n        <div>\r\n          <button mat-icon-button matTooltip=\"Edit parameters\" (click)=\"editPipeline()\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button matTooltip=\"Query Params Docs\" (click)=\"openParamsHelp()\">\r\n            <mat-icon>info</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.Params?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.Params?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">Test Parameters</div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.TestParameters?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.TestParameters?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"(warnings$ | async) as warnings\">\r\n      <div class=\"warnings\" *ngIf=\"warnings.length\">\r\n        <div class=\"title\">\r\n          <span>Warnings</span>\r\n          <mat-icon style=\"color: red\">warning</mat-icon>\r\n        </div>\r\n        <ol class=\"values\">\r\n          <li *ngFor=\"let warning of warnings\">\r\n            {{ warning }}\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"description\" *ngIf=\"pipelineModel.Pipeline.Description\">\r\n      <div class=\"title\">Query Description</div>\r\n      <div>{{ pipelineModel.Pipeline.Description }}</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models/pipeline.model';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateWarnings } from './run-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-run-explorer',\r\n  templateUrl: './run-explorer.component.html',\r\n  styleUrls: ['./run-explorer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RunExplorerComponent implements OnInit {\r\n  pipelineModel$: Observable<PipelineModel>;\r\n  warnings$: Observable<string[]>;\r\n\r\n  constructor(private context: Context, private visualQueryService: VisualQueryService) { }\r\n\r\n  ngOnInit() {\r\n    this.pipelineModel$ = this.visualQueryService.pipelineModel$;\r\n    this.warnings$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => calculateWarnings(pipelineModel, this.context)),\r\n    );\r\n  }\r\n\r\n  editPipeline() {\r\n    this.visualQueryService.editPipelineEntity();\r\n  }\r\n\r\n  openParamsHelp() {\r\n    window.open('https://r.2sxc.org/QueryParams', '_blank');\r\n  }\r\n\r\n  saveAndRunQuery(save: boolean, run: boolean) {\r\n    this.visualQueryService.saveAndRun(save, run);\r\n  }\r\n\r\n}\r\n","import { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models/pipeline.model';\r\n\r\n/**\r\n * Check if there are special warnings the developer should know.\r\n * Typically when the test-module-id is different from the one we're currently\r\n * working on, or if no test-module-id is provided\r\n */\r\nexport function calculateWarnings(pipelineModel: PipelineModel, context: Context) {\r\n  const warnings: string[] = [];\r\n\r\n  try { // catch various not-initialized errors\r\n    const regex = /^\\[module:moduleid\\]=([0-9]*)$/gmi; // capture the mod-id\r\n    const testParams = pipelineModel.Pipeline.TestParameters;\r\n    const matches = regex.exec(testParams);\r\n    const testMid = matches[1];\r\n    const urlMid = context.moduleId.toString();\r\n    if (testMid !== urlMid) {\r\n      warnings.push(`Your test moduleid (${testMid}) is different from the current moduleid (${urlMid}). Note that 2sxc 9.33 automatically provides the moduleid - so you usually do not need to set it any more.`);\r\n    }\r\n  } catch (error) { }\r\n\r\n  return warnings;\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"(sorted$ | async) as sorted\">\r\n\r\n  <mat-slide-toggle labelPosition=\"before\" (change)=\"toggleDifficulty($event)\">\r\n    Show Advanced\r\n  </mat-slide-toggle>\r\n\r\n  <ng-container *ngFor=\"let item of sorted | keyvalue\">\r\n    <div class=\"collapsible\" [matTooltip]=\"item.key\" matTooltipShowDelay=\"750\" (click)=\"toggleItem(item.key)\">\r\n      <mat-icon>{{ toggledItems.includes(item.key) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n      <span>{{ item.key }}</span>\r\n    </div>\r\n\r\n    <div class=\"list\" *ngIf=\"toggledItems.includes(item.key)\">\r\n      <div class=\"list-item\" *ngFor=\"let value of item.value\" [matTooltip]=\"value.Name\" matTooltipShowDelay=\"750\"\r\n        (click)=\"addDataSource(value)\">\r\n        {{ value.Name }}\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { DataSource } from '../models/data-sources.model';\r\nimport { SortedDataSources } from '../models/data-sources.model';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { filterAndSortDataSources, toggleInArray } from './add-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-add-explorer',\r\n  templateUrl: './add-explorer.component.html',\r\n  styleUrls: ['./add-explorer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AddExplorerComponent implements OnInit, OnDestroy {\r\n  sorted$: Observable<SortedDataSources>;\r\n  toggledItems: string[] = [];\r\n\r\n  private difficulties = {\r\n    default: 100,\r\n    advanced: 200,\r\n  };\r\n  private difficulty$ = new BehaviorSubject(this.difficulties.default);\r\n\r\n  constructor(private visualQueryService: VisualQueryService) { }\r\n\r\n  ngOnInit() {\r\n    this.sorted$ = combineLatest([this.visualQueryService.dataSources$, this.difficulty$]).pipe(\r\n      map(([dataSources, difficulty]) => {\r\n        if (dataSources == null) { return; }\r\n        const sorted = filterAndSortDataSources(dataSources, difficulty);\r\n        return sorted;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.difficulty$.complete();\r\n  }\r\n\r\n  toggleDifficulty(event: MatSlideToggleChange) {\r\n    const difficulty = event.checked ? this.difficulties.advanced : this.difficulties.default;\r\n    this.difficulty$.next(difficulty);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    this.visualQueryService.addDataSource(dataSource);\r\n  }\r\n\r\n  toggleItem(item: string) {\r\n    toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n}\r\n","import cloneDeep from 'lodash-es/cloneDeep';\r\nimport { DataSource, SortedDataSources } from '../models/data-sources.model';\r\n\r\nexport function filterAndSortDataSources(dataSources: DataSource[], maxDifficulty: number) {\r\n  const cloned = cloneDeep(dataSources);\r\n\r\n  const filtered = cloned.filter(dataSource =>\r\n    (dataSource.Difficulty <= maxDifficulty) && (dataSource.allowNew == null)\r\n  );\r\n\r\n  filtered.sort((a, b) => a.Name.toLocaleLowerCase().localeCompare(b.Name.toLocaleLowerCase()));\r\n\r\n  const sorted: SortedDataSources = {};\r\n  for (const dataSource of filtered) {\r\n    const type = dataSource.PrimaryType;\r\n    sorted[type] ? sorted[type].push(dataSource) : sorted[type] = [dataSource];\r\n  }\r\n\r\n  return sorted;\r\n}\r\n\r\nexport function toggleInArray(item: string, array: string[]) {\r\n  const index = array.indexOf(item);\r\n  if (index === -1) {\r\n    array.push(item);\r\n  } else {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit } from '../../../../edit/edit.matcher';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: VisualQueryComponent, children: [\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule),\r\n        data: { history: false },\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class VisualQueryRoutingModule { }\r\n","import { ChangeDetectionStrategy, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Context } from '../shared/services/context';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { VisualQueryService } from './services/visual-query.service';\r\n\r\n@Component({\r\n  selector: 'app-visual-query',\r\n  templateUrl: './visual-query.component.html',\r\n  styleUrls: ['./visual-query.component.scss'],\r\n  providers: [VisualQueryService],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class VisualQueryComponent implements OnInit {\r\n  @ViewChild(PlumbEditorComponent) plumbEditor: PlumbEditorComponent;\r\n\r\n  explorer = {\r\n    run: 'run',\r\n    add: 'add'\r\n  };\r\n  activeExplorer = this.explorer.run;\r\n\r\n  constructor(private context: Context, private route: ActivatedRoute, private visualQueryService: VisualQueryService) {\r\n    this.context.init(this.route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.visualQueryService.init();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    this.activeExplorer = (this.activeExplorer === explorer) ? null : explorer;\r\n  }\r\n\r\n  openHelp() {\r\n    window.open('https://2sxc.org/help', '_blank');\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>\r\n\r\n<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" matTooltip=\"Run\" [ngClass]=\"{ 'active': activeExplorer === explorer.run }\"\r\n      (click)=\"toggleExplorer(explorer.run)\">\r\n      <mat-icon>play_arrow</mat-icon>\r\n    </div>\r\n    <div class=\"button\" matTooltip=\"Add\" [ngClass]=\"{ 'active': activeExplorer === explorer.add }\"\r\n      (click)=\"toggleExplorer(explorer.add)\">\r\n      <mat-icon>add</mat-icon>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"button\" matTooltip=\"Help\" (click)=\"openHelp()\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-run-explorer [hidden]=\"activeExplorer !== explorer.run\"></app-run-explorer>\r\n\r\n  <app-add-explorer [hidden]=\"activeExplorer !== explorer.add\"></app-add-explorer>\r\n\r\n  <app-plumb-editor></app-plumb-editor>\r\n</div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../permissions/services/metadata.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { AddExplorerComponent } from './add-explorer/add-explorer.component';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { QueryResultComponent } from './query-result/query-result.component';\r\nimport { RunExplorerComponent } from './run-explorer/run-explorer.component';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { VisualQueryRoutingModule } from './visual-query-routing.module';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n    QueryResultComponent,\r\n  ],\r\n  entryComponents: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n    QueryResultComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedComponentsModule,\r\n    VisualQueryRoutingModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatDialogModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    QueryDefinitionService,\r\n    MetadataService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class VisualQueryModule { }\r\n"],"sourceRoot":"webpack:///"}