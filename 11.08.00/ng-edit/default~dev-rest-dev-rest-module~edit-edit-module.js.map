{"version":3,"sources":["../../../../../../src/material/list/list.ts","../../../../../../src/material/list/selection-list.ts","../../../../../../src/material/list/list-module.ts","../../../../../../src/material/list/public-api.ts","../../../../../../src/material/list/index.ts","../../../../../../src/material/divider/divider.ts","../../../../../../src/material/divider/divider-module.ts","../../../../../../src/material/divider/public-api.ts","../../../../../../src/material/divider/index.ts"],"names":[],"mappings":"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","file":"default~dev-rest-dev-rest-module~edit-edit-module.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, BooleanInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n  Input,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  mixinDisabled,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatListBase =\n    mixinDisabled(mixinDisableRipple(MatListBase));\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n/**\n * Injection token that can be used to inject instances of `MatList`. It serves as\n * alternative token to the actual `MatList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_LIST = new InjectionToken<MatList>('MatList');\n\n/**\n * Injection token that can be used to inject instances of `MatNavList`. It serves as\n * alternative token to the actual `MatNavList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_NAV_LIST = new InjectionToken<MatNavList>('MatNavList');\n\n@Component({\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MAT_NAV_LIST, useExisting: MatNavList}],\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisable, CanDisableRipple,\n  OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Component({\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MAT_LIST, useExisting: MatList}],\n})\nexport class MatList extends _MatListMixinBase implements CanDisable, CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item mat-focus-indicator',\n    '[class.mat-list-item-disabled]': 'disabled',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_NAV_LIST) navList?: MatNavList,\n              @Optional() @Inject(MAT_LIST) list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attribute is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || !!(this._list && this._list.disabled); }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager, FocusMonitor} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  ENTER,\n  hasModifierKey,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  mixinDisableRipple,\n  setLines,\n  ThemePalette,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option mat-focus-indicator',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme.\n    '[class.mat-primary]': 'color === \"primary\"',\n    // Even though accent is the default, we need to set this class anyway, because the  list might\n    // be placed inside a parent that has one of the other colors with a higher specificity.\n    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[class.mat-list-single-selected-option]': 'selected && !selectionList.multiple',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabindex]': '-1',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase implements AfterContentInit, OnDestroy,\n                                                                      OnInit, FocusableOption,\n                                                                      CanDisableRipple {\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n   * in the first cycle.\n   */\n  private _inputsInitialized = false;\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (\n      this.selected &&\n      !this.selectionList.compareWith(newValue, this.value) &&\n      this._inputsInitialized\n    ) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n    this._inputsInitialized = true;\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled && (this.selectionList.multiple || !this.selected)) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    'class': 'mat-selection-list mat-list-base',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabindex]': '_tabIndex',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n  private _multiple = true;\n  private _contentInitialized = false;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /**\n   * Tabindex of the selection list.\n   * @breaking-change 11.0.0 Remove `tabIndex` input.\n   */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** Whether selection is limited to one or multiple items (default multiple). */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._multiple) {\n      if (this._contentInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw new Error(\n            'Cannot change `multiple` mode of mat-selection-list after initialization.');\n      }\n\n      this._multiple = newValue;\n      this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n    }\n  }\n\n  /** The currently selected options. */\n  selectedOptions = new SelectionModel<MatListOption>(this._multiple);\n\n  /** The tabindex of the selection list. */\n  _tabIndex = -1;\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n    // @breaking-change 11.0.0 Remove `tabIndex` parameter.\n    @Attribute('tabindex') tabIndex: string,\n    private _changeDetector: ChangeDetectorRef,\n    // @breaking-change 11.0.0 `_focusMonitor` parameter to become required.\n    private _focusMonitor?: FocusMonitor) {\n    super();\n  }\n\n  ngAfterContentInit(): void {\n    this._contentInitialized = true;\n\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      .withHomeAndEnd()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // If the user attempts to tab out of the selection list, allow focus to escape.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the number of options change, update the tabindex of the selection list.\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._updateTabIndex();\n    });\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n\n    // @breaking-change 11.0.0 Remove null assertion once _focusMonitor is required.\n    this._focusMonitor?.monitor(this._element)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(origin => {\n        if (origin === 'keyboard' || origin === 'program') {\n          const activeIndex = this._keyManager.activeItemIndex;\n\n          if (!activeIndex || activeIndex === -1) {\n            // If there is no active index, set focus to the first option.\n            this._keyManager.setFirstItemActive();\n          } else {\n            // Otherwise, set focus to the active option.\n            this._keyManager.setActiveItem(activeIndex);\n          }\n        }\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    // @breaking-change 11.0.0 Remove null assertion once _focusMonitor is required.\n    this._focusMonitor?.stopMonitoring(this._element);\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier && !manager.isTyping()) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      default:\n        // The \"A\" key gets special treatment, because it's used for the \"select all\" functionality.\n        if (keyCode === A && this.multiple && hasModifierKey(event, 'ctrlKey') &&\n            !manager.isTyping()) {\n          const shouldSelect = this.options.some(option => !option.disabled && !option.selected);\n          this._setAllOptionsSelected(shouldSelect, true);\n          event.preventDefault();\n        } else {\n          manager.onKeydown(event);\n        }\n    }\n\n    if (this.multiple && (keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean, skipDisabled?: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n\n  /**\n   * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\n   * to tab out of it. This prevents the list from capturing focus and redirecting it back within\n   * the list, creating a focus trap if it user tries to tab away.\n   */\n  private _allowFocusEscape() {\n    this._tabIndex = -1;\n\n    setTimeout(() => {\n      this._tabIndex = 0;\n      this._changeDetector.markForCheck();\n    });\n  }\n\n  /** Updates the tabindex based upon if the selection list is empty. */\n  private _updateTabIndex(): void {\n    this._tabIndex = (this.options.length === 0) ? -1 : 0;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './list-module';\nexport * from './list';\nexport * from './selection-list';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n\n  static ngAcceptInputType_vertical: BooleanInput;\n  static ngAcceptInputType_inset: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './divider';\nexport * from './divider-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"sourceRoot":"webpack:///"}