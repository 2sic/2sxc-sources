{"version":3,"sources":["./src/app/dev-rest/dev-rest-dialog.config.ts","./src/app/dev-rest/help-popup/help-popup.component.ts","./src/app/dev-rest/selector-with-help/selector-with-help.component.ts","./src/app/dev-rest/data/environments.ts","./src/app/dev-rest/selector-with-help/selector-with-help.component.html","./src/app/dev-rest/index.ts","./src/app/dev-rest/help-popup/help-popup.component.html","./src/app/dev-rest/dev-rest.component.ts","./src/app/dev-rest/dev-rest.component.scss","./src/app/dev-rest/data/access-scenarios.ts","./src/app/dev-rest/dev-rest.component.html","./src/app/dev-rest/dev-rest.module.ts","./src/app/dev-rest/dev-rest-routing.module.ts"],"names":[],"mappings":"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","file":"dev-rest-dev-rest-module.js","sourcesContent":["import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const devRestDialog: DialogConfig = {\r\n  name: 'DEV_REST_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'fullscreen',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { DevRestComponent } = await import('./dev-rest.component');\r\n    return DevRestComponent;\r\n  }\r\n};\r\n","import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { HelpPopupData } from './help-popup.models';\r\n\r\n@Component({\r\n  selector: 'app-help-popup',\r\n  templateUrl: './help-popup.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class HelpPopupComponent implements OnInit {\r\n\r\n  constructor(private dialogRef: MatDialogRef<HelpPopupComponent>, @Inject(MAT_DIALOG_DATA) public dialogData: HelpPopupData) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { HelpPopupComponent, SelectorData } from '..';\r\nimport { EnvironmentSelectorData } from '../data/environments';\r\nimport { HelpPopupData } from '../help-popup/help-popup.models';\r\n\r\n@Component({\r\n  selector: 'app-selector-with-help',\r\n  templateUrl: './selector-with-help.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SelectorWithHelpComponent implements OnInit {\r\n  @Input() label: string;\r\n  @Input() items: SelectorData[] | EnvironmentSelectorData[];\r\n  @Input() value: string;\r\n  @Output() private valueChange = new EventEmitter<SelectorData | EnvironmentSelectorData>();\r\n\r\n  constructor(private dialog: MatDialog) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  selectionChange(key: string) {\r\n    this.value = key;\r\n    const scenario = this.items.find(item => item.key === this.value);\r\n    this.valueChange.emit(scenario);\r\n  }\r\n\r\n  showHelp() {\r\n    const scenario = this.items.find(item => item.key === this.value);\r\n    const data: HelpPopupData = {\r\n      name: scenario.name,\r\n      body: scenario.description,\r\n      notes: scenario.notes,\r\n    };\r\n\r\n    this.dialog.open(HelpPopupComponent, {\r\n      width: '500px',\r\n      data,\r\n      autoFocus: false,\r\n    });\r\n  }\r\n}\r\n","import { SelectorData } from './selector-data';\r\n\r\nexport interface EnvironmentSelectorData extends SelectorData {\r\n  rootPath: string;\r\n}\r\n\r\nexport const Environments: Array<EnvironmentSelectorData> = [\r\n  {\r\n    key: 'dnn7',\r\n    name: 'DNN 7 or higher',\r\n    rootPath: '/desktopmodules/2sxc/api/',\r\n    description: 'DNN 7 had a longer API-root path, which still works in later versions of DNN',\r\n  },\r\n  {\r\n    key: 'dnn8',\r\n    name: 'DNN 8 or higher',\r\n    rootPath: '/api/2sxc/',\r\n    description: 'DNN 8+ has a shorter root path, with doesn\\'t work in DNN 7',\r\n  },\r\n];\r\n","export default \"<mat-form-field color=\\\"accent\\\">\\r\\n  <mat-label>{{ label }}</mat-label>\\r\\n  <mat-select [value]=\\\"value\\\" (selectionChange)=\\\"selectionChange($event.value)\\\">\\r\\n    <mat-option *ngFor=\\\"let item of items\\\" [value]=\\\"item.key\\\">{{ item.name }}</mat-option>\\r\\n  </mat-select>\\r\\n</mat-form-field>\\r\\n\\r\\n<button mat-icon-button (click)=\\\"showHelp()\\\">\\r\\n  <mat-icon>help_outline</mat-icon>\\r\\n</button>\\r\\n\";","\r\nexport * from './data/access-scenarios';\r\nexport * from './data/environments';\r\nexport * from './data/selector-data';\r\n\r\nexport * from './help-popup/help-popup.component';\r\nexport * from './selector-with-help/selector-with-help.component';\r\n","export default \"<div mat-dialog-title>\\r\\n  <div class=\\\"dialog-title-box\\\">\\r\\n    <div>{{ dialogData.name }}</div>\\r\\n    <button mat-icon-button matTooltip=\\\"Close dialog\\\" (click)=\\\"closeDialog()\\\">\\r\\n      <mat-icon>close</mat-icon>\\r\\n    </button>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"dialog-component-content fancy-scrollbar-light\\\">\\r\\n  <p class=\\\"dialog-description\\\">\\r\\n    {{ dialogData.body }}\\r\\n  </p>\\r\\n\\r\\n  <p class=\\\"dialog-description\\\" *ngIf=\\\"dialogData.notes\\\">\\r\\n    <em>{{ dialogData.notes }}</em>\\r\\n  </p>\\r\\n</div>\\r\\n\";","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ChangeDetectionStrategy, Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AccessScenarios, Environments, EnvironmentSelectorData, SelectorData } from '.';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { DialogSettings } from '../app-administration/models/dialog-settings.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { ItemResult } from './data/dev-rest.models';\r\n\r\nconst pathToContent = 'app/{appname}/content/{typename}';\r\n\r\n@Component({\r\n  selector: 'app-dev-rest',\r\n  templateUrl: './dev-rest.component.html',\r\n  styleUrls: ['./dev-rest.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DevRestComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component dialog-component--no-actions';\r\n\r\n  /** List of all known environments */\r\n  environments = Environments;\r\n\r\n  /** List of scenarios */\r\n  scenarios = AccessScenarios;\r\n\r\n  templateVars$: Observable<{\r\n    contentType: ContentType;\r\n    currentEnv: EnvironmentSelectorData;\r\n    currentScenario: SelectorData;\r\n    modeInternal: boolean;\r\n    root: string;\r\n  }>;\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  /** Content Type to show REST infos about */\r\n  private contentType$: BehaviorSubject<ContentType>;\r\n\r\n  /** App, language, etc. */\r\n  private dialogSettings$: BehaviorSubject<DialogSettings>;\r\n\r\n  /** Currently selected environment object */\r\n  private currentEnv$: BehaviorSubject<EnvironmentSelectorData>;\r\n\r\n  /** Currently selected scenario */\r\n  private currentScenario$: BehaviorSubject<SelectorData>;\r\n\r\n  private modeInternal$: Observable<boolean>;\r\n\r\n  /** The root path for the current request */\r\n  private root$: Observable<string>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<DevRestComponent>,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private http: HttpClient,\r\n    private contentTypesService: ContentTypesService,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n    /** Context for this dialog. Used for appId, zoneId, tabId, etc. */\r\n    private context: Context,\r\n    /** dnn-sxc-angular context. Used to resolve urls */\r\n    private dnnContext: DnnContext,\r\n  ) {\r\n    this.contentType$ = new BehaviorSubject<ContentType>(null);\r\n    this.dialogSettings$ = new BehaviorSubject<DialogSettings>(null);\r\n    this.currentEnv$ = new BehaviorSubject<EnvironmentSelectorData>(this.environments[0]);\r\n    this.currentScenario$ = new BehaviorSubject<SelectorData>(this.scenarios[0]);\r\n    this.modeInternal$ = this.currentScenario$.pipe(map(scenario => scenario.key === 'internal'));\r\n\r\n    this.root$ = combineLatest([this.contentType$, /* this.currentEnv$, */ this.currentScenario$, this.dialogSettings$]).pipe(\r\n      map(([contentType, /* env, */ scenario, dialogSettings]) => {\r\n        if (contentType == null || dialogSettings == null) { return ''; }\r\n\r\n        const internal = scenario === AccessScenarios[0];\r\n        // const root = internal ? '' : dnnContext.$2sxc.http.apiUrl() // env.rootPath;\r\n        const resolved = pathToContent\r\n          .replace('{typename}', contentType.Name)\r\n          .replace('{appname}', internal ? 'auto' : encodeURI(dialogSettings.Context.App.Folder));\r\n        return internal ? resolved : dnnContext.$2sxc.http.apiUrl(resolved);\r\n      }),\r\n    );\r\n\r\n    this.templateVars$ = combineLatest([this.contentType$, this.currentEnv$, this.currentScenario$, this.modeInternal$, this.root$]).pipe(\r\n      map(([contentType, currentEnv, currentScenario, modeInternal, root]) => ({\r\n        contentType,\r\n        currentEnv,\r\n        currentScenario,\r\n        modeInternal,\r\n        root,\r\n      })),\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(this.contentType$);\r\n    this.appDialogConfigService.getDialogSettings().subscribe(this.dialogSettings$);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.dialogSettings$.complete();\r\n    this.currentEnv$.complete();\r\n    this.currentScenario$.complete();\r\n  }\r\n\r\n  changeEnv(env: EnvironmentSelectorData) {\r\n    this.currentEnv$.next(env);\r\n  }\r\n\r\n  changeScenario(scenario: SelectorData) {\r\n    this.currentScenario$.next(scenario);\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  // todo: 2dm - probably open a dialog showing the results etc.\r\n  callApiGet(url: string) {\r\n    this.http.get<ItemResult[]>(url).subscribe(res => {\r\n      console.log(res);\r\n    });\r\n    this.openSnackBar('API call dispatched - to see it, you should have the console (F12) open.', 'API call');\r\n  }\r\n\r\n  openSnackBar(message: string, action: string) {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000,\r\n    });\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9uZy1kaWFsb2dzL3NyYy9hcHAvZGV2LXJlc3QvZGV2LXJlc3QuY29tcG9uZW50LnNjc3MifQ== */\";","import { SelectorData } from './selector-data';\r\n\r\nexport const AccessScenarios: Array<SelectorData> = [\r\n  {\r\n    key: 'internal',\r\n    name: 'Internal-Access from an App',\r\n    description: 'Internal access means that your JS code is running in a DNN-module on a DNN-page. This is the default access. In this scenario, various headers are included in the request, incl. the module it\\'s coming from, which allows various automatic things to happen. This results in simpler REST requests.',\r\n    notes: 'This mode also makes it easier to re-distribute your app, as you can perform API calls relative to the module that\\'s hosting it. This means, that even if you export/import the app to another system, the API-calls stay the same.',\r\n  },\r\n  {\r\n    key: 'external',\r\n    name: 'External access',\r\n    description: 'External access means that the JS code could be on another page / module in DNN (which is not the same app), or it could be coming from a mobile App, or another website altogether. In this case, automatic app-detection can\\'t work, as various headers are missing, and you must access the endpoint more explicitly.',\r\n    notes: 'This mode requires you to define the exact, full URL, so if you create copies of this app on another system, the URL must be updated to access that system specifically.',\r\n  },\r\n];\r\n","export default \"<ng-container *ngIf=\\\"templateVars$ | async as data\\\">\\r\\n  <div mat-dialog-title>\\r\\n    <div class=\\\"dialog-title-box\\\">\\r\\n      <div>Using REST with {{ data.contentType?.Name }}</div>\\r\\n      <button mat-icon-button matTooltip=\\\"Close dialog\\\" (click)=\\\"closeDialog()\\\">\\r\\n        <mat-icon>close</mat-icon>\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"dialog-component-content fancy-scrollbar-light\\\">\\r\\n    <p class=\\\"dialog-description\\\">\\r\\n      All data can easily be used in JavaScript using a REST API.\\r\\n    </p>\\r\\n\\r\\n    <p class=\\\"dialog-description\\\">\\r\\n      <em>\\r\\n        Important: As a host-user you can always access these REST endpoints, but\\r\\n        if you want to use them in a public UI, you must remember to set the\\r\\n        permissions to allow this.\\r\\n      </em>\\r\\n    </p>\\r\\n\\r\\n    <div>\\r\\n      <app-selector-with-help label=\\\"Choose Scenario\\\" [items]=\\\"scenarios\\\" [value]=\\\"data.currentScenario.key\\\"\\r\\n        (valueChange)=\\\"changeScenario($event)\\\">\\r\\n      </app-selector-with-help>\\r\\n\\r\\n      <app-selector-with-help *ngIf=\\\"!data.modeInternal\\\" label=\\\"Choose DNN Version\\\" [items]=\\\"environments\\\"\\r\\n        [value]=\\\"data.currentEnv.key\\\" (valueChange)=\\\"changeEnv($event)\\\">\\r\\n      </app-selector-with-help>\\r\\n    </div>\\r\\n\\r\\n    <ng-container *ngIf=\\\"data.modeInternal; then internal; else external\\\"></ng-container>\\r\\n  </div>\\r\\n\\r\\n\\r\\n  <ng-template #internal>\\r\\n    <mat-tab-group color=\\\"accent\\\">\\r\\n      <mat-tab label=\\\"Virtual REST URLs\\\">\\r\\n        <ng-template matTabContent>\\r\\n          <p class=\\\"dialog-description\\\">\\r\\n            Virtual REST URLs are shorter URLs, which are automatically resolved\\r\\n            to the full length (based on the dnn-version, current portal, etc.)\\r\\n            thanks to $2sxc. This happens when you use the\\r\\n            <a href=\\\"https://github.com/2sic/2sxc/wiki/javascript-sxc-webapi\\\" target=\\\"_blank\\\">\\r\\n              $2sxc.webApi(...)\\r\\n            </a>\\r\\n            or if you use\\r\\n            <a href=\\\"https://www.npmjs.com/package/@2sic.com/dnn-sxc-angular\\\" target=\\\"_blank\\\">\\r\\n              dnn-sxc-angular (npm package)\\r\\n            </a>\\r\\n            (which also passes url-resolving through $2sxc).\\r\\n          </p>\\r\\n\\r\\n          <ng-container *ngTemplateOutlet=\\\"restUrls\\\"></ng-container>\\r\\n        </ng-template>\\r\\n      </mat-tab>\\r\\n      <mat-tab label=\\\"JS Calls using $2sxc\\\">\\r\\n        <ng-template matTabContent>\\r\\n          <p class=\\\"dialog-description\\\">\\r\\n            First you must get the <code>sxc</code> controller for the current module instance.\\r\\n            The easiest way is to let <code>$2sxc</code> find it, by giving it a html-tag before running any additional\\r\\n            code.\\r\\n            $2sxc will then automatically look up everything and return a fully configured controller.\\r\\n            Note that this is just an example, you will probably do this differently and not use a global variable (bad\\r\\n            practice).\\r\\n          </p>\\r\\n          <pre>\\r\\n// this assumes a tag like &lt;div id='myGalleryTag'&gt; in your code\\r\\nvar mySxc = $2sxc(document.getElementById('myGalleryTag'));\\r\\n        </pre>\\r\\n\\r\\n          <p>\\r\\n            Then...\\r\\n          </p>\\r\\n          <pre>\\r\\n/** get all items - this returns a promise\\r\\n* so you can do getAll().then(...)\\r\\n*/\\r\\nfunction getAll() {{ '{' }}\\r\\nreturn mySxc.webApi.get('');\\r\\n{{ '}' }}\\r\\n\\r\\nfunction getOne(id) {{ '{' }}\\r\\nreturn mySxc.webApi.get('' + '/' + id);\\r\\n{{ '}' }}\\r\\n        </pre>\\r\\n        </ng-template>\\r\\n      </mat-tab>\\r\\n    </mat-tab-group>\\r\\n  </ng-template>\\r\\n\\r\\n\\r\\n  <ng-template #external>\\r\\n    <mat-tab-group color=\\\"accent\\\">\\r\\n      <mat-tab label=\\\"Full REST URLs\\\">\\r\\n        <ng-template matTabContent>\\r\\n          <ng-container *ngTemplateOutlet=\\\"restUrls\\\"></ng-container>\\r\\n        </ng-template>\\r\\n      </mat-tab>\\r\\n      <mat-tab label=\\\"JS Calls using $2sxc\\\">\\r\\n        <ng-template matTabContent>\\r\\n          todo\\r\\n        </ng-template>\\r\\n      </mat-tab>\\r\\n    </mat-tab-group>\\r\\n  </ng-template>\\r\\n\\r\\n\\r\\n  <ng-template #restUrls>\\r\\n    <mat-list>\\r\\n      <mat-list-item>\\r\\n        <h3 matLine>Read list of all items</h3>\\r\\n        <div matLine>\\r\\n          <code>GET</code>: <code>{{ data.root }}</code>\\r\\n        </div>\\r\\n        <button mat-raised-button (click)=\\\"callApiGet(data.root)\\\">execute call</button>\\r\\n        <a *ngIf=\\\"data.currentScenario?.key === 'external'\\\" [href]=\\\"data.root\\\" target=\\\"_blank\\\">open</a>\\r\\n      </mat-list-item>\\r\\n      <mat-divider></mat-divider>\\r\\n      <mat-list-item>\\r\\n        <h3 matLine>Read a single item #27</h3>\\r\\n        <div matLine>\\r\\n          <code>GET</code>: <code>{{ data.root }}/27</code>\\r\\n        </div>\\r\\n        <button mat-raised-button (click)=\\\"callApiGet(data.root)\\\">execute call</button>\\r\\n        <a *ngIf=\\\"data.currentScenario?.key === 'external'\\\" [href]=\\\"data.root\\\" target=\\\"_blank\\\">open</a>\\r\\n      </mat-list-item>\\r\\n      <mat-divider></mat-divider>\\r\\n      <mat-list-item>\\r\\n        <h3 matLine>Create an item</h3>\\r\\n        <div matLine>\\r\\n          <code>POST</code>: <code>{{ data.root }}</code>\\r\\n        </div>\\r\\n      </mat-list-item>\\r\\n      <mat-divider></mat-divider>\\r\\n      <mat-list-item>\\r\\n        <h3 matLine>Update the item #27</h3>\\r\\n        <div matLine>\\r\\n          <code>POST</code>: <code>{{ data.root }}/27</code>\\r\\n        </div>\\r\\n      </mat-list-item>\\r\\n      <mat-divider></mat-divider>\\r\\n      <mat-list-item>\\r\\n        <h3 matLine>Delete the item #27</h3>\\r\\n        <div matLine>\\r\\n          <code>DELETE</code>: <code>{{ data.root }}/27</code>\\r\\n        </div>\\r\\n      </mat-list-item>\\r\\n    </mat-list>\\r\\n  </ng-template>\\r\\n\\r\\n</ng-container>\\r\\n\";","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HelpPopupComponent, SelectorWithHelpComponent } from '.';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { DevRestRoutingModule } from './dev-rest-routing.module';\r\nimport { DevRestComponent } from './dev-rest.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DevRestComponent,\r\n    SelectorWithHelpComponent,\r\n    HelpPopupComponent,\r\n  ],\r\n  entryComponents: [\r\n    DevRestComponent,\r\n    SelectorWithHelpComponent,\r\n    HelpPopupComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    DevRestRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    MatSnackBarModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatTabsModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentTypesService,\r\n    AppDialogConfigService,\r\n  ]\r\n})\r\nexport class DevRestModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { devRestDialog } from './dev-rest-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: devRestDialog, title: 'REST API' } }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DevRestRoutingModule { }\r\n"],"sourceRoot":"webpack:///"}