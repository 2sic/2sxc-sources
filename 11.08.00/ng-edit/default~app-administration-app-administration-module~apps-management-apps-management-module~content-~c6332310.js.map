{"version":3,"sources":["../../../../../../src/material/input/autosize.ts","../../../../../../src/material/input/input-errors.ts","../../../../../../src/material/input/input-value-accessor.ts","../../../../../../src/material/input/input.ts","../../../../../../src/material/input/input-module.ts","../../../../../../src/material/input/public-api.ts","../../../../../../src/material/input/index.ts","../../../../../../src/cdk/text-field/autofill.ts","../../../../../../src/cdk/text-field/autosize.ts","../../../../../../src/cdk/text-field/text-field-module.ts","../../../../../../src/cdk/text-field/public-api.ts","../../../../../../src/cdk/text-field/index.ts"],"names":[],"mappings":"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","file":"default~app-administration-app-administration-module~apps-management-apps-management-module~content-~c6332310.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  AfterViewInit,\n  Directive,\n  DoCheck,\n  ElementRef,\n  HostListener,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl, MatFormField, MAT_FORM_FIELD} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    // At the time of writing, we have a lot of customer tests that look up the input based on its\n    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n    '[attr.data-placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, AfterViewInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  private _previousPlaceholder: string | null;\n\n  /** Whether the component is being rendered on the server. */\n  readonly _isServer: boolean;\n\n  /** Whether the component is a native html select. */\n  readonly _isNativeSelect: boolean;\n\n  /** Whether the component is a textarea. */\n  readonly _isTextarea: boolean;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input('aria-describedby') userAriaDescribedBy: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n      protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n      protected _platform: Platform,\n      /** @docs-private */\n      @Optional() @Self() public ngControl: NgControl,\n      @Optional() _parentForm: NgForm,\n      @Optional() _parentFormGroup: FormGroupDirective,\n      _defaultErrorStateMatcher: ErrorStateMatcher,\n      @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n      private _autofillMonitor: AutofillMonitor,\n      ngZone: NgZone,\n      // TODO: Remove this once the legacy appearance has been removed. We only need\n      // to inject the form-field for determining whether the placeholder has been promoted.\n      @Optional() @Inject(MAT_FORM_FIELD) private _formField?: MatFormField) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n    const nodeName = element.nodeName.toLowerCase();\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = nodeName === 'select';\n    this._isTextarea = nodeName === 'textarea';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n\n    // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n    // present or not depends on a query which is prone to \"changed after checked\" errors.\n    this._dirtyCheckPlaceholder();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  /** Callback for the cases where the focused state of the input changes. */\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('focus', ['true'])\n  @HostListener('blur', ['false'])\n  // tslint:enable:no-host-decorator-in-concrete\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('input')\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `placeholder` attribute. */\n  private _dirtyCheckPlaceholder() {\n    // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n    // screen readers will read it out twice: once from the label and once from the attribute.\n    // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n    // the only one that supports promoting the placeholder to a label.\n    const placeholder = this._formField?._hideControlPlaceholder?.() ? null : this.placeholder;\n    if (placeholder !== this._previousPlaceholder) {\n      const element = this._elementRef.nativeElement;\n      this._previousPlaceholder = placeholder;\n      placeholder ?\n          element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n    }\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    if (ids.length) {\n      this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      this._elementRef.nativeElement.removeAttribute('aria-describedby');\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_readonly: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n\n  // Accept `any` to avoid conflicts with other directives on `<input>` that may\n  // accept different types.\n  static ngAcceptInputType_value: any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './autosize';\nexport * from './input';\nexport * from './input-errors';\nexport * from './input-module';\nexport * from './input-value-accessor';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {EMPTY, Observable, Subject} from 'rxjs';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({passive: true});\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable({providedIn: 'root'})\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform, private _ngZone: NgZone) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent>;\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: ElementRef<Element>): Observable<AutofillEvent>;\n\n  monitor(elementOrRef: Element | ElementRef<Element>): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return EMPTY;\n    }\n\n    const element = coerceElement(elementOrRef);\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      return info.subject;\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const cssClass = 'cdk-text-field-autofilled';\n    const listener = ((event: AnimationEvent) => {\n      // Animation events fire on initial element render, we check for the presence of the autofill\n      // CSS class to make sure this is a real change in state, not just the initial render before\n      // we fire off events.\n      if (event.animationName === 'cdk-text-field-autofill-start' &&\n          !element.classList.contains(cssClass)) {\n        element.classList.add(cssClass);\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: true}));\n      } else if (event.animationName === 'cdk-text-field-autofill-end' &&\n          element.classList.contains(cssClass)) {\n        element.classList.remove(cssClass);\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: false}));\n      }\n    }) as EventListenerOrEventListenerObject;\n\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('animationstart', listener, listenerOptions);\n      element.classList.add('cdk-text-field-autofill-monitored');\n    });\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element): void;\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<Element>): void;\n\n  stopMonitoring(elementOrRef: Element | ElementRef<Element>): void {\n    const element = coerceElement(elementOrRef);\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('cdk-text-field-autofill-monitored');\n      element.classList.remove('cdk-text-field-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[cdkAutofill]',\n})\nexport class CdkAutofill implements OnDestroy, OnInit {\n  /** Emits when the autofill state of the element changes. */\n  @Output() cdkAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef)\n      .subscribe(event => this.cdkAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n  HostListener,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from 'rxjs/operators';\nimport {fromEvent, Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n/** Directive to automatically resize a textarea to fit its content. */\n@Directive({\n  selector: 'textarea[cdkTextareaAutosize]',\n  exportAs: 'cdkTextareaAutosize',\n  host: {\n    'class': 'cdk-textarea-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue?: string;\n  private _initialHeight: string | undefined;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n  private _enabled: boolean = true;\n\n  /**\n   * Value of minRows as of last resize. If the minRows has decreased, the\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\n   */\n  private _previousMinRows: number = -1;\n\n  private _textareaElement: HTMLTextAreaElement;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('cdkAutosizeMinRows')\n  get minRows(): number { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = coerceNumberProperty(value);\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('cdkAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = coerceNumberProperty(value);\n    this._setMaxHeight();\n  }\n\n  /** Whether autosizing is enabled or not */\n  @Input('cdkTextareaAutosize')\n  get enabled(): boolean { return this._enabled; }\n  set enabled(value: boolean) {\n    value = coerceBooleanProperty(value);\n\n    // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  /** Class that should be applied to the textarea while it's being measured. */\n  private _measuringClass: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              /** @breaking-change 11.0.0 make document required */\n              @Optional() @Inject(DOCUMENT) document?: any) {\n    this._document = document;\n\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\n    this._measuringClass = _platform.FIREFOX ?\n      'cdk-textarea-autosize-measuring-firefox' :\n      'cdk-textarea-autosize-measuring';\n  }\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n\n      this.resizeToFitContent();\n\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n\n        fromEvent(window, 'resize')\n          .pipe(auditTime(16), takeUntil(this._destroyed))\n          .subscribe(() => this.resizeToFitContent(true));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    this._textareaElement.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    this._textareaElement.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.classList.add(this._measuringClass);\n    textarea.placeholder = '';\n\n    // The measuring class includes a 2px padding to workaround an issue with Chrome,\n    // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n    const height = textarea.scrollHeight - 4;\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${height}px`;\n    textarea.classList.remove(this._measuringClass);\n    textarea.placeholder = placeholderText;\n\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(() => this._scrollToCaretPosition(textarea));\n      }\n    });\n\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n\n  /**\n   * Resets the textarea to its original size\n   */\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight !== undefined) {\n      this._textareaElement.style.height = this._initialHeight;\n    }\n  }\n\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('input')\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   */\n  private _scrollToCaretPosition(textarea: HTMLTextAreaElement) {\n    const {selectionStart, selectionEnd} = textarea;\n    const document = this._getDocument();\n\n    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n    if (!this._destroyed.isStopped && document.activeElement === textarea) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n\n  static ngAcceptInputType_minRows: NumberInput;\n  static ngAcceptInputType_maxRows: NumberInput;\n  static ngAcceptInputType_enabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkAutofill} from './autofill';\nimport {CdkTextareaAutosize} from './autosize';\n\n\n@NgModule({\n  declarations: [CdkAutofill, CdkTextareaAutosize],\n  imports: [PlatformModule],\n  exports: [CdkAutofill, CdkTextareaAutosize],\n})\nexport class TextFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './autofill';\nexport * from './autosize';\nexport * from './text-field-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"sourceRoot":"webpack:///"}