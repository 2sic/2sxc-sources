{"version":3,"sources":["./src/app/item-history/item-history.component.html","./src/app/item-history/item-history.component.ts","./src/app/item-history/item-history.helpers.ts"],"names":["dialogRef","route","versionsService","snackBar","hostClass","pageSize","expandedPanels","expandedAttributes","itemId","parseInt","this","snapshot","paramMap","get","versions$","BehaviorSubject","page$","historyItems$","combineLatest","pipe","map","versions","page","slice","version","previous","find","v","VersionNumber","previousJson","JSON","parse","Json","isLastVersion","some","json","allHistoryAttributes","Object","entries","Entity","Attributes","forEach","dataType","historyAttributes","attributeName","attributeValues","historyAttributeValues","langKey","value","hasChanged","stringify","push","changeSetId","ChangeSetId","attributes","historyId","HistoryId","timeStamp","TimeStamp","user","User","versionNumber","templateVars$","length","historyItems","ngOnInit","fetchVersions","subscribe","ngOnDestroy","complete","closeDialog","close","panelExpandedChange","expand","attributeExpandedToggle","name","pageChange","event","next","pageIndex","restore","changeId","open","res","duration","refreshEdit","ItemHistoryComponent"],"mappings":"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","file":"item-history-component.e1d0556e15fcb23535a3.js","sourcesContent":["<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Item History</div>\r\n      <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">Check version history for this item and restore the version you need.</p>\r\n\r\n  <div class=\"dialog-component-content fancy-scrollbar-light\">\r\n    <div *ngIf=\"data.historyItems === null\">Loading...</div>\r\n    <div *ngIf=\"data.historyItems?.length === 0\">No previous versions of this item found</div>\r\n    <mat-accordion multi *ngIf=\"data.historyItems?.length > 0\" class=\"history-tables\">\r\n      <mat-expansion-panel *ngFor=\"let historyItem of data.historyItems\"\r\n        (expandedChange)=\"panelExpandedChange($event, historyItem.versionNumber)\">\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>Version {{ historyItem.versionNumber }}</mat-panel-title>\r\n          <mat-panel-description>{{ historyItem.timeStamp | date:'yyyy-MM-dd hh:mm' }}</mat-panel-description>\r\n        </mat-expansion-panel-header>\r\n\r\n        <ng-container *ngIf=\"expandedPanels[historyItem.versionNumber]\">\r\n          <div class=\"table-row\" *ngFor=\"let attribute of historyItem.attributes\">\r\n            <div class=\"table-row__main row-main\"\r\n              (click)=\"attributeExpandedToggle(historyItem.versionNumber, attribute.attributeName)\">\r\n              <div class=\"row-main__label\" [class.history-changed]=\"attribute.hasChanged\">\r\n                {{ attribute.attributeName }}\r\n              </div>\r\n              <div class=\"row-main__value\" [class.history-changed]=\"attribute.hasChanged\">\r\n                <ng-container *ngIf=\"!expandedAttributes[historyItem.versionNumber + attribute.attributeName]\">\r\n                  {{ attribute.attributeValues[0]?.value }}\r\n                </ng-container>\r\n              </div>\r\n              <div class=\"row-main__type\">\r\n                <i *ngFor=\"let value of attribute.attributeValues\">[{{ value.langKey }}]</i>\r\n                <i>[{{ attribute.dataType }}]</i>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"table-row__details\"\r\n              *ngIf=\"expandedAttributes[historyItem.versionNumber + attribute.attributeName]\">\r\n              <div class=\"detail-row\" [class.history-changed]=\"value.hasChanged\"\r\n                *ngFor=\"let value of attribute.attributeValues\">\r\n                <div class=\"detail-row__label\">{{ value.langKey }}:</div>\r\n                <div class=\"detail-row__value\">{{ value.value }}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row-actions\">\r\n            <button mat-raised-button color=\"accent\" *ngIf=\"!historyItem.isLastVersion\"\r\n              (click)=\"restore(historyItem.changeSetId)\">\r\n              Restore\r\n            </button>\r\n          </div>\r\n        </ng-container>\r\n      </mat-expansion-panel>\r\n    </mat-accordion>\r\n  </div>\r\n\r\n  <mat-paginator showFirstLastButtons=\"true\" [length]=\"data.length\" [pageSize]=\"pageSize\" (page)=\"pageChange($event)\">\r\n  </mat-paginator>\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { PageEvent } from '@angular/material/paginator';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { getHistoryItems } from './item-history.helpers';\r\nimport { ExpandedPanels } from './models/expanded-panels.models';\r\nimport { ItemHistoryResult } from './models/item-history-result.model';\r\nimport { Version } from './models/version.model';\r\nimport { VersionsService } from './services/versions.service';\r\n\r\n@Component({\r\n  selector: 'app-item-history',\r\n  templateUrl: './item-history.component.html',\r\n  styleUrls: ['./item-history.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ItemHistoryComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  pageSize = 10;\r\n  expandedPanels: ExpandedPanels = {};\r\n  expandedAttributes: ExpandedPanels = {};\r\n\r\n  private itemId = parseInt(this.route.snapshot.paramMap.get('itemId'), 10);\r\n  private versions$ = new BehaviorSubject<Version[]>(null);\r\n  private page$ = new BehaviorSubject(1);\r\n  private historyItems$ = combineLatest([this.versions$, this.page$]).pipe(\r\n    map(([versions, page]) => getHistoryItems(versions, page, this.pageSize)),\r\n  );\r\n  templateVars$ = combineLatest([this.versions$, this.historyItems$]).pipe(\r\n    map(([versions, historyItems]) => ({\r\n      length: versions?.length,\r\n      historyItems,\r\n    })),\r\n  );\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ItemHistoryComponent>,\r\n    private route: ActivatedRoute,\r\n    private versionsService: VersionsService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.versionsService.fetchVersions(this.itemId).subscribe(this.versions$);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.versions$.complete();\r\n    this.page$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  panelExpandedChange(expand: boolean, versionNumber: number) {\r\n    this.expandedPanels[versionNumber] = expand;\r\n  }\r\n\r\n  attributeExpandedToggle(versionNumber: number, name: string) {\r\n    this.expandedAttributes[versionNumber + name] = !this.expandedAttributes[versionNumber + name];\r\n  }\r\n\r\n  pageChange(event: PageEvent) {\r\n    this.expandedPanels = {};\r\n    this.expandedAttributes = {};\r\n    this.page$.next(event.pageIndex + 1);\r\n  }\r\n\r\n  restore(changeId: number) {\r\n    this.snackBar.open('Restoring previous version...');\r\n    this.versionsService.restore(this.itemId, changeId).subscribe(res => {\r\n      this.snackBar.open('Previous version restored. Will reload edit dialog', null, { duration: 3000 });\r\n      const result: ItemHistoryResult = {\r\n        refreshEdit: true,\r\n      };\r\n      this.dialogRef.close(result);\r\n    });\r\n  }\r\n}\r\n","import { HistoryAttribute, HistoryAttributeValue, HistoryItem } from './models/history-item.model';\r\nimport { Version, VersionJsonParsed } from './models/version.model';\r\n\r\nexport function getHistoryItems(versions: Version[], page: number, pageSize: number) {\r\n  if (versions == null || page == null || pageSize == null) { return null; }\r\n  const filtered = versions?.slice((page - 1) * pageSize, page * pageSize);\r\n\r\n  const historyItems = filtered.map(version => {\r\n    const previous = versions.find(v => v.VersionNumber === version.VersionNumber - 1);\r\n    const previousJson: VersionJsonParsed = previous ? JSON.parse(previous.Json) : null;\r\n    const isLastVersion = !versions.some(v => v.VersionNumber === version.VersionNumber + 1);\r\n    const json: VersionJsonParsed = JSON.parse(version.Json);\r\n\r\n    const allHistoryAttributes: HistoryAttribute[] = [];\r\n    Object.entries(json.Entity.Attributes).forEach(([dataType, attributes]) => {\r\n      const historyAttributes = Object.entries(attributes).map(([attributeName, attributeValues]) => {\r\n        const historyAttributeValues = Object.entries(attributeValues).map(([langKey, value]) => {\r\n          const historyAttributeValue: HistoryAttributeValue = {\r\n            langKey,\r\n            value,\r\n            hasChanged: JSON.stringify(value) !== JSON.stringify(previousJson?.Entity.Attributes[dataType]?.[attributeName]?.[langKey]),\r\n          };\r\n          return historyAttributeValue;\r\n        });\r\n\r\n        const historyAttribute: HistoryAttribute = {\r\n          attributeName,\r\n          dataType,\r\n          hasChanged: JSON.stringify(attributeValues) !== JSON.stringify(previousJson?.Entity.Attributes[dataType]?.[attributeName]),\r\n          attributeValues: historyAttributeValues,\r\n        };\r\n        return historyAttribute;\r\n      });\r\n      allHistoryAttributes.push(...historyAttributes);\r\n    });\r\n\r\n    const historyItem: HistoryItem = {\r\n      changeSetId: version.ChangeSetId,\r\n      attributes: allHistoryAttributes,\r\n      historyId: version.HistoryId,\r\n      timeStamp: version.TimeStamp,\r\n      user: version.User,\r\n      versionNumber: version.VersionNumber,\r\n      isLastVersion,\r\n    };\r\n    return historyItem;\r\n  });\r\n\r\n  return historyItems;\r\n}\r\n"],"sourceRoot":"webpack:///"}