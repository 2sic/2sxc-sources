{"version":3,"sources":["../../../../../../src/material/menu/menu-animations.ts","../../../../../../src/material/menu/menu-content.ts","../../../../../../src/material/menu/menu-errors.ts","../../../../../../src/material/menu/menu-panel.ts","../../../../../../src/material/menu/menu-item.ts","../../../../../../src/material/menu/menu.ts","../../../../../../src/material/menu/menu-trigger.ts","../../../../../../src/material/menu/menu-module.ts","../../../../../../src/material/menu/menu-positions.ts","../../../../../../src/material/menu/public-api.ts","../../../../../../src/material/menu/index.ts"],"names":["observableOf"],"mappings":"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","file":"default~app-administration-app-administration-module~apps-management-apps-management-module~content-~688b9b68.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ChangeDetectorRef,\n  ComponentFactoryResolver,\n  Directive,\n  Inject,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_MENU_CONTENT = new InjectionToken<MatMenuContent>('MatMenuContent');\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]',\n  providers: [{provide: MAT_MENU_CONTENT, useExisting: MatMenuContent}],\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any,\n    private _changeDetectorRef?: ChangeDetectorRef) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nexport function throwMatMenuRecursiveError() {\n  throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n              `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  overlayPanelClass?: string|string[];\n  hasBackdrop?: boolean;\n  readonly panelId?: string;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  addItem?: (item: T) => void;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n  AfterViewInit,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n@Component({\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    '[class.mat-menu-item]': 'true',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    'class': 'mat-focus-indicator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, AfterViewInit, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Stream that emits when the menu item is focused. */\n  readonly _focused = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() public _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n\n    this._focused.next(this);\n  }\n\n  ngAfterViewInit() {\n    if (this._focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      this._focusMonitor.monitor(this._elementRef, false);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n    this._focused.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MAT_MENU_CONTENT, MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Class or list of classes to be applied to the menu's overlay panel. */\n  overlayPanelClass?: string | string[];\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\nlet menuPanelUid = 0;\n\n/** Base class with all of the `MatMenu` functionality. */\n@Directive()\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** All items inside the menu. Includes items nested inside another menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) _allItems: QueryList<MatMenuItem>;\n\n  /** Only the direct descendant menu items. */\n  private _directDescendantItems = new QueryList<MatMenuItem>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class or list of classes to be added to the overlay panel. */\n  overlayPanelClass: string|string[] = this._defaultOptions.overlayPanelClass || '';\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** aria-label for the menu panel. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** aria-labelledby for the menu panel. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** aria-describedby for the menu panel. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after' &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem, {descendants: false}) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MAT_MENU_CONTENT) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close: EventEmitter<void | 'click' | 'keydown' | 'tab'> = this.closed;\n\n  readonly panelId = `mat-menu-panel-${menuPanelUid++}`;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems)\n      .withWrap()\n      .withTypeAhead()\n      .withHomeAndEnd();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n\n    // If a user manually (programatically) focuses a menu item, we need to reflect that focus\n    // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n    // is internal and we know that it gets completed on destroy.\n    this._directDescendantItems.changes.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge<MatMenuItem>(...items.map((item: MatMenuItem) => item._focused)))\n    ).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n  }\n\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes as Observable<QueryList<MatMenuItem>>;\n    return itemChanges.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge(...items.map((item: MatMenuItem) => item._hovered)))\n    ) as Observable<MatMenuItem>;\n  }\n\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item: MatMenuItem) {}\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item: MatMenuItem) {}\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable\n        .pipe(take(1))\n        .subscribe(() => this._focusFirstItem(origin));\n    } else {\n      this._focusFirstItem(origin);\n    }\n  }\n\n  /**\n   * Actual implementation that focuses the first item. Needs to be separated\n   * out so we don't repeat the same logic in the public `focusFirstItem` method.\n   */\n  private _focusFirstItem(origin: FocusOrigin) {\n    const manager = this._keyManager;\n\n    manager.setFocusOrigin(origin).setFirstItemActive();\n\n    // If there's no active item at this point, it means that all the items are disabled.\n    // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n    // give _some_ feedback to screen readers.\n    if (!manager.activeItem && this._directDescendantItems.length) {\n      let element = this._directDescendantItems.first._getHostElement().parentElement;\n\n      // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n      // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n      // because the panel is inside an `ng-template`. We work around it by starting from one of\n      // the items and walking up the DOM.\n      while (element) {\n        if (element.getAttribute('role') === 'menu') {\n          element.focus();\n          break;\n        } else {\n          element = element.parentElement;\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n    const elevation = Math.min(MAT_MENU_BASE_ELEVATION + depth, 24);\n    const newElevation = `mat-elevation-z${elevation}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  private _updateDirectDescendants() {\n    this._allItems.changes\n      .pipe(startWith(this._allItems))\n      .subscribe((items: QueryList<MatMenuItem>) => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n  }\n\n  static ngAcceptInputType_overlapTrigger: BooleanInput;\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\n@Directive()\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\nexport class _MatMenu extends MatMenu {\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError, throwMatMenuRecursiveError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Directive applied to an element that should trigger a `mat-menu`. */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'class': 'mat-menu-trigger',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      if (menu === this._parentMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuRecursiveError();\n      }\n\n      this._menuCloseSubscription = menu.close.subscribe(\n        (reason: 'click' | 'tab' | 'keydown' | undefined) => {\n          this._destroyMenu();\n\n          // If a click closed the menu, we should close the entire chain of nested menus.\n          if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n            this._parentMenu.closed.emit(reason);\n          }\n        });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              // `MatMenu` is always used in combination with a `MatMenuTrigger`.\n              // tslint:disable-next-line: lightweight-tokens\n              @Optional() private _parentMenu: MatMenu,\n              // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n              // tslint:disable-next-line: lightweight-tokens\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n    this._restoreFocus();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._setIsMenuOpen(false)\n          });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /** Restores focus to the element that was focused before the menu was open. */\n  private _restoreFocus() {\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      panelClass: this.menu.overlayPanelClass,\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {_MatMenu} from './menu';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MatMenuTrigger} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [\n    MatMenuTrigger,\n    MatMenuContent,\n  ],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [CdkScrollableModule, MatCommonModule, _MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type MenuPositionX = 'before' | 'after';\n\nexport type MenuPositionY = 'above' | 'below';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {\n  MatMenu,\n  MatMenuDefaultOptions,\n  MAT_MENU_DEFAULT_OPTIONS,\n  _MatMenu,\n  _MatMenuBase,\n} from './menu';\nexport {MatMenuItem} from './menu-item';\nexport {MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY} from './menu-trigger';\nexport {MatMenuPanel, MAT_MENU_PANEL} from './menu-panel';\nexport * from './menu-module';\nexport * from './menu-animations';\nexport * from './menu-content';\nexport * from './menu-positions';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MAT_MENU_DEFAULT_OPTIONS_FACTORY as Éµangular_material_src_material_menu_menu_a} from './menu';\nexport {MAT_MENU_SCROLL_STRATEGY_FACTORY as Éµangular_material_src_material_menu_menu_b,MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as Éµangular_material_src_material_menu_menu_c} from './menu-trigger';"],"sourceRoot":"webpack:///"}