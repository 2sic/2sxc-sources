{"version":3,"file":"default-projects_eav-ui_src_app_shared_components_nav-item-list_nav-item-list_component_ts-pr-7c4da5.688b6acf9b063869.js","mappings":"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","names":["i0","_c0","ctx_r0","isOpenMenu","NavItemListComponent_Conditional_6_For_2_Template","_forTrack0","navItem","child","NavItemListComponent","constructor","router","this","input","ngOnInit","#openChildMenu","events","subscribe","length","urlSegments","url","split","find","includes","path","i1","selectors","inputs","decls","vars","consts","template","rf","ctx","NavItemListComponent_Conditional_5_Template","NavItemListComponent_Conditional_6_Template","tippy","icon","name","MatIconModule","i2","NgClass","RouterLink","RouterLinkActive","TippyDirective","styles","ToggleDebugDirective","globalConfigService","onClick","event","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","hostBindings","$event","_c1","_c2","_c3","MatDrawerContainer_Conditional_0_Template","_r1","ctx_r1","_onBackdropClicked","_isShowingBackdrop","MatDrawerContainer_Conditional_3_Template","_c4","_c5","MatSidenavContainer_Conditional_0_Template","MatSidenavContainer_Conditional_3_Template","matDrawerAnimations","transformDrawer","trigger","state","style","transform","visibility","transition","animate","MAT_DRAWER_DEFAULT_AUTOSIZE","InjectionToken","providedIn","factory","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","CdkScrollable","_platform","inject","Platform","_changeDetectorRef","ChangeDetectorRef","_container","MatDrawerContainer","super","elementRef","ElementRef","scrollDispatcher","ScrollDispatcher","ngZone","NgZone","ngAfterContentInit","_contentMarginChanges","markForCheck","_shouldBeHidden","isBrowser","start","end","mode","opened","static","__ngFactoryType__","type","hostAttrs","hostVars","_contentMargins","left","right","features","provide","useExisting","ngContentSelectors","encapsulation","changeDetection","MatDrawer","_elementRef","_focusTrapFactory","FocusTrapFactory","_focusMonitor","FocusMonitor","_ngZone","_interactivityChecker","InteractivityChecker","_doc","DOCUMENT","optional","_focusTrap","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_isAttached","_anchor","position","_position","value","_updatePositionInParent","onPositionChanged","emit","_mode","_updateFocusTrapState","_modeChanged","next","disableClose","_disableClose","coerceBooleanProperty","autoFocus","_autoFocus","_opened","toggle","_openedVia","_animationStarted","Subject","_animationEnd","_animationState","openedChange","EventEmitter","_openedStream","pipe","filter","o","map","openedStart","e","fromState","toState","indexOf","mapTo","undefined","_closedStream","closedStart","_destroyed","_content","_injector","Injector","takeUntil","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","runOutsideAngular","fromEvent","nativeElement","keyCode","ESCAPE","hasModifierKey","run","close","stopPropagation","preventDefault","_forceFocus","element","options","isFocusable","tabIndex","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","querySelector","afterNextRender","focusInitialElement","injector","focusOrigin","focusVia","blur","activeEl","contains","ngAfterViewInit","create","ngAfterContentChecked","ngOnDestroy","destroy","remove","complete","open","openedVia","_closeViaBackdropClick","_setOpen","isOpen","result","restoreFocus","Promise","resolve","take","_getWidth","offsetWidth","enabled","hasBackdrop","newPosition","parent","parentNode","createComment","insertBefore","appendChild","viewQuery","_t","first","outputs","exportAs","dependencies","data","animation","_dir","Directionality","_element","_animationMode","ANIMATION_MODULE_TYPE","_allDrawers","_drawers","QueryList","_userContent","_start","_end","autosize","_autosize","_drawerHasBackdrop","_backdropOverride","backdropClick","_left","_right","_doCheckSubject","scrollable","viewportRuler","ViewportRuler","change","_validateDrawers","updateContentMargins","changes","startWith","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","debounceTime","width","ngDoCheck","_isPushed","classList","add","_setContainerClass","phase","AfterRenderPhase","Read","merge","isAdd","className","_closeModalDrawersViaBackdrop","contentQueries","dirIndex","MatSidenavContent","ɵMatSidenavContent_BaseFactory","MatSidenav","fixedInViewport","_fixedInViewport","fixedTopGap","_fixedTopGap","coerceNumberProperty","fixedBottomGap","_fixedBottomGap","ɵMatSidenav_BaseFactory","MatSidenavContainer","ɵMatSidenavContainer_BaseFactory","MatSidenavModule","imports","MatCommonModule","CdkScrollableModule","MatToolbarRow","MatToolbar","_document","color","_toolbarRows","_checkToolbarMixedModes","MatToolbarModule","a0","a1","a2","a3","a4","a5","$implicit","info","last","index","count","BreadcrumbComponent_ng_container_2_a_2_ng_container_1_Template","BreadcrumbComponent_ng_container_2_a_2_ng_container_2_Template","breadcrumb_r1","label","BreadcrumbComponent_ng_container_2_a_2_Template","isLast_r3","isFirst_r4","index_r5","count_r6","ctx_r6","disable","routeInterceptor","routeLink","preserveQueryParams","queryParams","preserveFragment","fragment","anchorTarget","itemTemplate","BreadcrumbComponent_ng_container_2_label_3_ng_container_1_Template","BreadcrumbComponent_ng_container_2_label_3_ng_container_2_Template","BreadcrumbComponent_ng_container_2_label_3_Template","BreadcrumbComponent_ng_container_2_li_4_ng_container_1_Template","BreadcrumbComponent_ng_container_2_li_4_ng_container_2_Template","separator","BreadcrumbComponent_ng_container_2_li_4_Template","separatorTemplate","BreadcrumbComponent_ng_container_2_Template","BreadcrumbItemDirective","ɵfac","ɵdir","standalone","isNonEmpty","obj","Object","keys","BreadcrumbService","activatedRoute","baseHref","dynamicBreadcrumbStore","currentBreadcrumbs","previousBreadcrumbs","breadcrumbs","BehaviorSubject","breadcrumbs$","asObservable","detectRouteChanges","setupBreadcrumbs","snapshot","GuardsCheckEnd","shouldActivate","root","activatedRouteSnapshot","rootBreadcrumb","getRootBreadcrumb","prepareBreadcrumbList","rootConfig","config","extractObject","breadcrumb","storeItem","getFromStore","alias","getQueryParamsFromPreviousList","prepareBreadcrumbItem","routeLinkPrefix","parseRouteData","routeConfig","resolvedSegment","resolvePathSegment","extractLabel","isAutoGeneratedLabel","autoGeneratedLabel","breadcrumbItem","push","firstChild","setQueryParamsForActiveBreadcrumb","breadcrumbsToShow","skip","matchRegex","routeRegex","RegExp","segment","entries","params","key","replace","lastItem","mergeWithBaseChildData","baseChild","loadChildren","_loadedRoutes","route","children","childConfig","set","breadcrumbObject","updateArgs","startsWith","slice","buildRegex","ensureLeadingSlash","updateStore","updateCurrentBreadcrumbs","storeItemIndex","findIndex","itemIndex","resolvedParam","ɵprov","token","BreadcrumbComponent","breadcrumbService","activateRoute","_separator","autoGenerate","class","setupMessage","someParameterValue","setupComponent","someParam","TemplateRef","Date","ɵcmp","i3","BreadcrumbModule","ɵmod","ɵinj","CommonModule","RouterModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/components/nav-item-list/nav-item-list.component.html","./projects/eav-ui/src/app/shared/components/nav-item-list/nav-item-list.component.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./node_modules/@angular/material/fesm2022/sidenav.mjs","./node_modules/@angular/material/fesm2022/toolbar.mjs","./node_modules/xng-breadcrumb/fesm2020/xng-breadcrumb.mjs"],"sourcesContent":["<a\r\n  (click)=\"isOpenMenu = !isOpenMenu\"\r\n  [routerLink]=\"navItem().path\"\r\n  routerLinkActive=\"active\"\r\n  matRipple\r\n  class=\"app-menu-container\"\r\n  [tippy]=\"navItem().tippy\"\r\n>\r\n  <mat-icon>{{ navItem().icon }}</mat-icon>\r\n  <div class=\"link-text\">{{ navItem().name }}</div>\r\n  @if (navItem().child) {\r\n    <mat-icon [ngClass]=\"{ closed: !isOpenMenu, open: isOpenMenu, 'ml-auto': true }\"> expand_more</mat-icon>\r\n  }\r\n</a>\r\n\r\n@if (isOpenMenu) {\r\n  <div class=\"paddingLink\">\r\n    @for (child of navItem().child; track child.path) {\r\n      <app-nav-item-list [navItem]=\"child\"></app-nav-item-list>\r\n    }\r\n  </div>\r\n}","import { NgClass } from '@angular/common';\r\nimport { Component, input, OnInit } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { NavItem } from '../../models/nav-item.model';\r\n\r\n@Component({\r\n    selector: 'app-nav-item-list',\r\n    templateUrl: './nav-item-list.component.html',\r\n    styleUrl: './nav-item-list.component.scss',\r\n    imports: [\r\n        MatIconModule,\r\n        NgClass,\r\n        RouterLink,\r\n        RouterLinkActive,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class NavItemListComponent implements OnInit {\r\n  navItem = input<NavItem>();\r\n  isOpenMenu = false;\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.#openChildMenu();\r\n    this.router.events.subscribe(() => this.#openChildMenu());\r\n  }\r\n\r\n  #openChildMenu() {\r\n    if (!this.navItem().child?.length)\r\n      return;\r\n\r\n    const urlSegments = this.router.url.split('/');\r\n    const matchingChild = this.navItem().child.find(child => urlSegments.includes(child.path));\r\n    if (matchingChild)\r\n      this.isOpenMenu = true;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, ElementRef, NgZone, Component, ChangeDetectionStrategy, ViewEncapsulation, EventEmitter, Injector, afterNextRender, Input, Output, ViewChild, ANIMATION_MODULE_TYPE, QueryList, AfterRenderPhase, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { FocusTrapFactory, FocusMonitor, InteractivityChecker } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ]),\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    _platform = inject(Platform);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _container = inject(MatDrawerContainer);\n    constructor() {\n        const elementRef = inject(ElementRef);\n        const scrollDispatcher = inject(ScrollDispatcher);\n        const ngZone = inject(NgZone);\n        super(elementRef, scrollDispatcher, ngZone);\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Determines whether the content element should be hidden from the user. */\n    _shouldBeHidden() {\n        // In some modes the content is pushed based on the width of the opened sidenavs, however on\n        // the server we can't measure the sidenav so the margin is always zero. This can cause the\n        // content to jump around when it's rendered on the server and hydrated on the client. We\n        // avoid it by hiding the content on the initial render and then showing it once the sidenav\n        // has been measured on the client.\n        if (this._platform.isBrowser) {\n            return false;\n        }\n        const { start, end } = this._container;\n        return ((start != null && start.mode !== 'over' && start.opened) ||\n            (end != null && end.mode !== 'over' && end.opened));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDrawerContent, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatDrawerContent, isStandalone: true, selector: \"mat-drawer-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\", \"class.mat-drawer-content-hidden\": \"_shouldBeHidden()\" }, classAttribute: \"mat-drawer-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatDrawerContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDrawerContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-drawer-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                        '[class.mat-drawer-content-hidden]': '_shouldBeHidden()',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatDrawerContent,\n                        },\n                    ],\n                }]\n        }], ctorParameters: () => [] });\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    _elementRef = inject(ElementRef);\n    _focusTrapFactory = inject(FocusTrapFactory);\n    _focusMonitor = inject(FocusMonitor);\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _interactivityChecker = inject(InteractivityChecker);\n    _doc = inject(DOCUMENT, { optional: true });\n    _container = inject(MAT_DRAWER_CONTAINER, { optional: true });\n    _focusTrap = null;\n    _elementFocusedBeforeDrawerWasOpened = null;\n    /** Whether the drawer is initialized. Used for disabling the initial animation. */\n    _enableAnimations = false;\n    /** Whether the view of the component has been attached. */\n    _isAttached;\n    /** Anchor node used to restore the drawer to its initial position. */\n    _anchor;\n    /** The side that the drawer is attached to. */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value !== this._position) {\n            // Static inputs in Ivy are set before the element is in the DOM.\n            if (this._isAttached) {\n                this._updatePositionInParent(value);\n            }\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    _position = 'start';\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    _mode = 'over';\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() {\n        return this._disableClose;\n    }\n    set disableClose(value) {\n        this._disableClose = coerceBooleanProperty(value);\n    }\n    _disableClose = false;\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n     * instead.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n        // because we don't know how the sidenav is being used, but in some cases it still makes\n        // sense to do it. The consumer can explicitly set `autoFocus`.\n        if (value == null) {\n            if (this.mode === 'side') {\n                return 'dialog';\n            }\n            else {\n                return 'first-tabbable';\n            }\n        }\n        return value;\n    }\n    set autoFocus(value) {\n        if (value === 'true' || value === 'false' || value == null) {\n            value = coerceBooleanProperty(value);\n        }\n        this._autoFocus = value;\n    }\n    _autoFocus;\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() {\n        return this._opened;\n    }\n    set opened(value) {\n        this.toggle(coerceBooleanProperty(value));\n    }\n    _opened = false;\n    /** How the sidenav was opened (keypress, mouse click etc.) */\n    _openedVia;\n    /** Emits whenever the drawer has started animating. */\n    _animationStarted = new Subject();\n    /** Emits whenever the drawer is done animating. */\n    _animationEnd = new Subject();\n    /** Current state of the sidenav animation. */\n    _animationState = 'void';\n    /** Event emitted when the drawer open state is changed. */\n    openedChange = \n    // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n    new EventEmitter(/* isAsync */ true);\n    /** Event emitted when the drawer has been opened. */\n    _openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n    /** Event emitted when the drawer has started opening. */\n    openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n    /** Event emitted when the drawer has been closed. */\n    _closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n    /** Event emitted when the drawer has started closing. */\n    closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n    /** Emits when the component is destroyed. */\n    _destroyed = new Subject();\n    /** Event emitted when the drawer's position changes. */\n    // tslint:disable-next-line:no-output-on-prefix\n    onPositionChanged = new EventEmitter();\n    /** Reference to the inner element that contains all the content. */\n    _content;\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     */\n    _modeChanged = new Subject();\n    _injector = inject(Injector);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    constructor() {\n        this.openedChange.pipe(takeUntil(this._destroyed)).subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus(this._openedVia || 'program');\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'keydown')\n                .pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed))\n                .subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n        });\n        this._animationEnd.subscribe((event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        });\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this._focusTrap) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        // When autoFocus is not on the sidenav, if the element cannot be focused or does\n        // not exist, focus the sidenav itself so the keyboard navigation still works.\n        // We need to check that `focus` is a function due to Universal.\n        switch (this.autoFocus) {\n            case false:\n            case 'dialog':\n                return;\n            case true:\n            case 'first-tabbable':\n                afterNextRender(() => {\n                    const hasMovedFocus = this._focusTrap.focusInitialElement();\n                    if (!hasMovedFocus && typeof element.focus === 'function') {\n                        element.focus();\n                    }\n                }, { injector: this._injector });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this.autoFocus);\n                break;\n        }\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus(focusOrigin) {\n        if (this.autoFocus === 'dialog') {\n            return;\n        }\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        const activeEl = this._doc.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterViewInit() {\n        this._isAttached = true;\n        // Only update the DOM position when the sidenav is positioned at\n        // the end since we project the sidenav before the content by default.\n        if (this._position === 'end') {\n            this._updatePositionInParent('end');\n        }\n        // Needs to happen after the position is updated\n        // so the focus trap anchors are in the right place.\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            this._updateFocusTrapState();\n        }\n    }\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    ngOnDestroy() {\n        this._focusTrap?.destroy();\n        this._anchor?.remove();\n        this._anchor = null;\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurs the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true, 'mouse');\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        if (isOpen && openedVia) {\n            this._openedVia = openedVia;\n        }\n        const result = this._setOpen(isOpen, \n        /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n        if (!isOpen) {\n            this._openedVia = null;\n        }\n        return result;\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param focusOrigin Origin to use when restoring focus.\n     */\n    _setOpen(isOpen, restoreFocus, focusOrigin) {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n        }\n        else {\n            this._animationState = 'void';\n            if (restoreFocus) {\n                this._restoreFocus(focusOrigin);\n            }\n        }\n        // Needed to ensure that the closing sequence fires off correctly.\n        this._changeDetectorRef.markForCheck();\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // Trap focus only if the backdrop is enabled. Otherwise, allow end user to interact with the\n            // sidenav content.\n            this._focusTrap.enabled = !!this._container?.hasBackdrop && this.opened;\n        }\n    }\n    /**\n     * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n     * when it's in the `end` position so that it comes after the content and the visual order\n     * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n     * started off as `end` and was changed to `start`.\n     */\n    _updatePositionInParent(newPosition) {\n        // Don't move the DOM node around on the server, because it can throw off hydration.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        const parent = element.parentNode;\n        if (newPosition === 'end') {\n            if (!this._anchor) {\n                this._anchor = this._doc.createComment('mat-drawer-anchor');\n                parent.insertBefore(this._anchor, element);\n            }\n            parent.appendChild(element);\n        }\n        else if (this._anchor) {\n            this._anchor.parentNode.insertBefore(element, this._anchor);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDrawer, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatDrawer, isStandalone: true, selector: \"mat-drawer\", inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, host: { attributes: { \"tabIndex\": \"-1\" }, listeners: { \"@transform.start\": \"_animationStarted.next($event)\", \"@transform.done\": \"_animationEnd.next($event)\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"@transform\": \"_animationState\" }, classAttribute: \"mat-drawer\" }, viewQueries: [{ propertyName: \"_content\", first: true, predicate: [\"content\"], descendants: true }], exportAs: [\"matDrawer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDrawer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer', exportAs: 'matDrawer', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        'tabIndex': '-1',\n                        '[@transform]': '_animationState',\n                        '(@transform.start)': '_animationStarted.next($event)',\n                        '(@transform.done)': '_animationEnd.next($event)',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, imports: [CdkScrollable], template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { position: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], disableClose: [{\n                type: Input\n            }], autoFocus: [{\n                type: Input\n            }], opened: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], openedStart: [{\n                type: Output\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], closedStart: [{\n                type: Output\n            }], onPositionChanged: [{\n                type: Output,\n                args: ['positionChanged']\n            }], _content: [{\n                type: ViewChild,\n                args: ['content']\n            }] } });\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    _dir = inject(Directionality, { optional: true });\n    _element = inject(ElementRef);\n    _ngZone = inject(NgZone);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    /** All drawers in the container. Includes drawers from inside nested containers. */\n    _allDrawers;\n    /** Drawers that belong to this container. */\n    _drawers = new QueryList();\n    _content;\n    _userContent;\n    /** The drawer child with the `start` position. */\n    get start() {\n        return this._start;\n    }\n    /** The drawer child with the `end` position. */\n    get end() {\n        return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() {\n        return this._autosize;\n    }\n    set autosize(value) {\n        this._autosize = coerceBooleanProperty(value);\n    }\n    _autosize = inject(MAT_DRAWER_DEFAULT_AUTOSIZE);\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        return this._drawerHasBackdrop(this._start) || this._drawerHasBackdrop(this._end);\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    _backdropOverride;\n    /** Event emitted when the drawer backdrop is clicked. */\n    backdropClick = new EventEmitter();\n    /** The drawer at the start/end position, independent of direction. */\n    _start;\n    _end;\n    /**\n     * The drawer at the left/right. When direction changes, these will change as well.\n     * They're used as aliases for the above to set the left/right style properly.\n     * In LTR, _left == _start and _right == _end.\n     * In RTL, _left == _end and _right == _start.\n     */\n    _left;\n    _right;\n    /** Emits when the component is destroyed. */\n    _destroyed = new Subject();\n    /** Emits on every ngDoCheck. Used for debouncing reflows. */\n    _doCheckSubject = new Subject();\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     */\n    _contentMargins = { left: null, right: null };\n    _contentMarginChanges = new Subject();\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    _injector = inject(Injector);\n    constructor() {\n        const viewportRuler = inject(ViewportRuler);\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._validateDrawers();\n            this.updateContentMargins();\n        });\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject\n                .pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed))\n                .subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted\n            .pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n            .subscribe((event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange\n                .pipe(takeUntil(this._drawers.changes))\n                .subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            afterNextRender(() => {\n                this._validateDrawers();\n            }, { injector: this._injector, phase: AfterRenderPhase.Read });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged\n                .pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(() => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return ((this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over'));\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._drawerHasBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return ((this._isDrawerOpen(this._start) && this._drawerHasBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._drawerHasBackdrop(this._end)));\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n    // Whether argument drawer should have a backdrop when it opens\n    _drawerHasBackdrop(drawer) {\n        if (this._backdropOverride == null) {\n            return !!drawer && drawer.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDrawerContainer, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.0.0\", type: MatDrawerContainer, isStandalone: true, selector: \"mat-drawer-container\", inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatDrawerContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatDrawerContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatDrawer, descendants: true }], viewQueries: [{ propertyName: \"_userContent\", first: true, predicate: MatDrawerContent, descendants: true }], exportAs: [\"matDrawerContainer\"], ngImport: i0, template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-drawer-content>\\n    <ng-content></ng-content>\\n  </mat-drawer-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-sys-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-sys-background));box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color, color-mix(in srgb, var(--mat-sys-neutral-variant20) 40%, transparent))}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(forced-colors: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-content.mat-drawer-content-hidden{opacity:0}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow, none);background-color:var(--mat-sidenav-container-background-color, var(--mat-sys-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));width:var(--mat-sidenav-container-width, 360px);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(forced-colors: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(forced-colors: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"component\", type: MatDrawerContent, selector: \"mat-drawer-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDrawerContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer-container', exportAs: 'matDrawerContainer', host: {\n                        'class': 'mat-drawer-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatDrawerContainer,\n                        },\n                    ], imports: [MatDrawerContent], template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-drawer-content>\\n    <ng-content></ng-content>\\n  </mat-drawer-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-sys-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-sys-background));box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color, color-mix(in srgb, var(--mat-sys-neutral-variant20) 40%, transparent))}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(forced-colors: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-content.mat-drawer-content-hidden{opacity:0}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow, none);background-color:var(--mat-sidenav-container-background-color, var(--mat-sys-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));width:var(--mat-sidenav-container-width, 360px);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(forced-colors: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(forced-colors: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], ctorParameters: () => [], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatDrawer, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatDrawerContent]\n            }], _userContent: [{\n                type: ViewChild,\n                args: [MatDrawerContent]\n            }], autosize: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], backdropClick: [{\n                type: Output\n            }] } });\n\nclass MatSidenavContent extends MatDrawerContent {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSidenavContent, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatSidenavContent, isStandalone: true, selector: \"mat-sidenav-content\", host: { classAttribute: \"mat-drawer-content mat-sidenav-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatSidenavContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSidenavContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-sidenav-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content mat-sidenav-content',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatSidenavContent,\n                        },\n                    ],\n                }]\n        }] });\nclass MatSidenav extends MatDrawer {\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() {\n        return this._fixedInViewport;\n    }\n    set fixedInViewport(value) {\n        this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    _fixedInViewport = false;\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() {\n        return this._fixedTopGap;\n    }\n    set fixedTopGap(value) {\n        this._fixedTopGap = coerceNumberProperty(value);\n    }\n    _fixedTopGap = 0;\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() {\n        return this._fixedBottomGap;\n    }\n    set fixedBottomGap(value) {\n        this._fixedBottomGap = coerceNumberProperty(value);\n    }\n    _fixedBottomGap = 0;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSidenav, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatSidenav, isStandalone: true, selector: \"mat-sidenav\", inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, host: { attributes: { \"tabIndex\": \"-1\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"class.mat-sidenav-fixed\": \"fixedInViewport\", \"style.top.px\": \"fixedInViewport ? fixedTopGap : null\", \"style.bottom.px\": \"fixedInViewport ? fixedBottomGap : null\" }, classAttribute: \"mat-drawer mat-sidenav\" }, providers: [{ provide: MatDrawer, useExisting: MatSidenav }], exportAs: [\"matSidenav\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSidenav, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav', exportAs: 'matSidenav', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer mat-sidenav',\n                        'tabIndex': '-1',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, imports: [CdkScrollable], providers: [{ provide: MatDrawer, useExisting: MatSidenav }], template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], propDecorators: { fixedInViewport: [{\n                type: Input\n            }], fixedTopGap: [{\n                type: Input\n            }], fixedBottomGap: [{\n                type: Input\n            }] } });\nclass MatSidenavContainer extends MatDrawerContainer {\n    _allDrawers = undefined;\n    // We need an initializer here to avoid a TS error.\n    _content = undefined;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSidenavContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.0.0\", type: MatSidenavContainer, isStandalone: true, selector: \"mat-sidenav-container\", host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container mat-sidenav-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatSidenavContainer,\n            },\n            {\n                provide: MatDrawerContainer,\n                useExisting: MatSidenavContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatSidenavContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatSidenav, descendants: true }], exportAs: [\"matSidenavContainer\"], usesInheritance: true, ngImport: i0, template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-sidenav-content>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-sys-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-sys-background));box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color, color-mix(in srgb, var(--mat-sys-neutral-variant20) 40%, transparent))}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(forced-colors: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-content.mat-drawer-content-hidden{opacity:0}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow, none);background-color:var(--mat-sidenav-container-background-color, var(--mat-sys-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));width:var(--mat-sidenav-container-width, 360px);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(forced-colors: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(forced-colors: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"component\", type: MatSidenavContent, selector: \"mat-sidenav-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSidenavContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav-container', exportAs: 'matSidenavContainer', host: {\n                        'class': 'mat-drawer-container mat-sidenav-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatSidenavContainer,\n                        },\n                        {\n                            provide: MatDrawerContainer,\n                            useExisting: MatSidenavContainer,\n                        },\n                    ], imports: [MatSidenavContent], template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-sidenav-content>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-sys-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-sys-background));box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color, color-mix(in srgb, var(--mat-sys-neutral-variant20) 40%, transparent))}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}@media(forced-colors: active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-content.mat-drawer-content-hidden{opacity:0}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-sys-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow, none);background-color:var(--mat-sidenav-container-background-color, var(--mat-sys-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));width:var(--mat-sidenav-container-width, 360px);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}@media(forced-colors: active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media(forced-colors: active){[dir=rtl] .mat-drawer,.mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-sys-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color, transparent);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color, transparent);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatSidenav, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatSidenavContent]\n            }] } });\n\nclass MatSidenavModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSidenavModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSidenavModule, imports: [MatCommonModule,\n            CdkScrollableModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent], exports: [CdkScrollableModule,\n            MatCommonModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSidenavModule, imports: [MatCommonModule,\n            CdkScrollableModule, CdkScrollableModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSidenavModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        CdkScrollableModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };\n","import * as i0 from '@angular/core';\nimport { Directive, inject, ElementRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ContentChildren, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\nclass MatToolbarRow {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatToolbarRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatToolbarRow, isStandalone: true, selector: \"mat-toolbar-row\", host: { classAttribute: \"mat-toolbar-row\" }, exportAs: [\"matToolbarRow\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatToolbarRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-toolbar-row',\n                    exportAs: 'matToolbarRow',\n                    host: { 'class': 'mat-toolbar-row' },\n                }]\n        }] });\nclass MatToolbar {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    _document = inject(DOCUMENT);\n    // TODO: should be typed as `ThemePalette` but internal apps pass in arbitrary strings.\n    /**\n     * Theme color of the toolbar. This API is supported in M2 themes only, it has\n     * no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    color;\n    /** Reference to all toolbar row elements that have been projected. */\n    _toolbarRows;\n    constructor() { }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n        }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    _checkToolbarMixedModes() {\n        if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            // Check if there are any other DOM nodes that can display content but aren't inside of\n            // a <mat-toolbar-row> element.\n            const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n                .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n                .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n                .some(node => !!(node.textContent && node.textContent.trim()));\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatToolbar, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatToolbar, isStandalone: true, selector: \"mat-toolbar\", inputs: { color: \"color\" }, host: { properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"class.mat-toolbar-multiple-rows\": \"_toolbarRows.length > 0\", \"class.mat-toolbar-single-row\": \"_toolbarRows.length === 0\" }, classAttribute: \"mat-toolbar\" }, queries: [{ propertyName: \"_toolbarRows\", predicate: MatToolbarRow, descendants: true }], exportAs: [\"matToolbar\"], ngImport: i0, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color, var(--mat-sys-surface));color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font, var(--mat-sys-title-large-font));font-size:var(--mat-toolbar-title-text-size, var(--mat-sys-title-large-size));line-height:var(--mat-toolbar-title-text-line-height, var(--mat-sys-title-large-line-height));font-weight:var(--mat-toolbar-title-text-weight, var(--mat-sys-title-large-weight));letter-spacing:var(--mat-toolbar-title-text-tracking, var(--mat-sys-title-large-tracking));margin:0}@media(forced-colors: active){.mat-toolbar{outline:solid 1px}}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mdc-text-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface));--mdc-outlined-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height, 56px)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height, 56px)}}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatToolbar, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-toolbar', exportAs: 'matToolbar', host: {\n                        'class': 'mat-toolbar',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                        '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color, var(--mat-sys-surface));color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font, var(--mat-sys-title-large-font));font-size:var(--mat-toolbar-title-text-size, var(--mat-sys-title-large-size));line-height:var(--mat-toolbar-title-text-line-height, var(--mat-sys-title-large-line-height));font-weight:var(--mat-toolbar-title-text-weight, var(--mat-sys-title-large-weight));letter-spacing:var(--mat-toolbar-title-text-tracking, var(--mat-sys-title-large-tracking));margin:0}@media(forced-colors: active){.mat-toolbar{outline:solid 1px}}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mdc-text-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface));--mdc-outlined-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height, 56px)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height, 56px)}}\"] }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input\n            }], _toolbarRows: [{\n                type: ContentChildren,\n                args: [MatToolbarRow, { descendants: true }]\n            }] } });\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\nclass MatToolbarModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatToolbarModule, imports: [MatCommonModule, MatToolbar, MatToolbarRow], exports: [MatToolbar, MatToolbarRow, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatToolbarModule, imports: [MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatToolbarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatToolbar, MatToolbarRow],\n                    exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n","import * as i0 from '@angular/core';\nimport { Directive, Injectable, TemplateRef, Component, ViewEncapsulation, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { GuardsCheckEnd, RouterModule } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to the demo - app.component.html\n */\nclass BreadcrumbItemDirective {\n}\nBreadcrumbItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nBreadcrumbItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: BreadcrumbItemDirective, selector: \"[xngBreadcrumbItem]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbItemDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[xngBreadcrumbItem]',\n                }]\n        }] });\n\nconst PATH_PARAM = {\n    PREFIX: ':',\n    REGEX_IDENTIFIER: '/:[^/]+',\n    REGEX_REPLACER: '/[^/]+',\n};\nconst ALIAS_PREFIX = '@';\nconst isNonEmpty = (obj) => {\n    return obj && Object.keys(obj).length > 0;\n};\nclass BreadcrumbService {\n    constructor(activatedRoute, router) {\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        this.baseHref = '/';\n        /**\n         * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n         * Breadcrumbs can be set from anywhere (component, service) in the app.\n         * On every breadcrumb update check this store and use the info if available.\n         */\n        this.dynamicBreadcrumbStore = [];\n        /**\n         * breadcrumbList for the current route\n         * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n         * If effected, update the change and emit a new stream\n         */\n        this.currentBreadcrumbs = [];\n        this.previousBreadcrumbs = [];\n        /**\n         * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n         * Emits on every route change OR dynamic update of breadcrumb\n         */\n        this.breadcrumbs = new BehaviorSubject([]);\n        this.breadcrumbs$ = this.breadcrumbs.asObservable();\n        this.detectRouteChanges();\n    }\n    /**\n     * Whenever route changes build breadcrumb list again\n     */\n    detectRouteChanges() {\n        // Special case where breadcrumb service & component instantiates after a route is navigated.\n        // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\n        // This check is also required where  { initialNavigation: 'enabledBlocking' } is applied to routes\n        this.setupBreadcrumbs(this.activatedRoute.snapshot);\n        this.router.events\n            .pipe(filter((event) => event instanceof GuardsCheckEnd))\n            .subscribe((event) => {\n            // activatedRoute doesn't carry data when shouldReuseRoute returns false\n            // use the event data with GuardsCheckEnd as workaround\n            // Check for shouldActivate in case where the authGuard returns false the breadcrumbs shouldn't be changed\n            if (event.shouldActivate) {\n                this.setupBreadcrumbs(event.state.root);\n            }\n        });\n    }\n    setupBreadcrumbs(activatedRouteSnapshot) {\n        this.previousBreadcrumbs = this.currentBreadcrumbs;\n        // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n        const rootBreadcrumb = this.getRootBreadcrumb();\n        this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n        this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\n    }\n    getRootBreadcrumb() {\n        const rootConfig = this.router.config.find((config) => config.path === '');\n        const rootBreadcrumb = this.extractObject(rootConfig?.data?.breadcrumb);\n        const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n        if (isNonEmpty(rootBreadcrumb) || isNonEmpty(storeItem)) {\n            return {\n                ...storeItem,\n                ...rootBreadcrumb,\n                routeLink: this.baseHref,\n                ...this.getQueryParamsFromPreviousList('/'),\n            };\n        }\n    }\n    prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix) {\n        const { path, breadcrumb } = this.parseRouteData(activatedRouteSnapshot.routeConfig);\n        const resolvedSegment = this.resolvePathSegment(path, activatedRouteSnapshot);\n        const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n        const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n        const label = this.extractLabel(storeItem?.label || breadcrumb?.label, resolvedSegment);\n        let isAutoGeneratedLabel = false;\n        let autoGeneratedLabel = '';\n        if (!label) {\n            isAutoGeneratedLabel = true;\n            autoGeneratedLabel = resolvedSegment;\n        }\n        return {\n            ...storeItem,\n            ...breadcrumb,\n            label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\n            routeLink,\n            isAutoGeneratedLabel,\n            ...this.getQueryParamsFromPreviousList(routeLink),\n        };\n    }\n    prepareBreadcrumbList(activatedRouteSnapshot, routeLinkPrefix) {\n        if (activatedRouteSnapshot.routeConfig?.path) {\n            const breadcrumbItem = this.prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix);\n            this.currentBreadcrumbs.push(breadcrumbItem);\n            if (activatedRouteSnapshot.firstChild) {\n                return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, breadcrumbItem.routeLink + '/');\n            }\n        }\n        else if (activatedRouteSnapshot.firstChild) {\n            return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, routeLinkPrefix);\n        }\n        const lastCrumb = this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n        this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot);\n        // remove breadcrumb items that needs to be hidden\n        const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n        this.breadcrumbs.next(breadcrumbsToShow);\n    }\n    getFromStore(alias, routeLink) {\n        return this.dynamicBreadcrumbStore.find((item) => {\n            return ((alias && alias === item.alias) ||\n                (routeLink && routeLink === item.routeLink) ||\n                this.matchRegex(routeLink, item.routeRegex));\n        });\n    }\n    /**\n     * use exact match instead of regexp.test\n     * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n     */\n    matchRegex(routeLink, routeRegex) {\n        const match = routeLink.match(new RegExp(routeRegex));\n        return match?.[0] === routeLink;\n    }\n    /**\n     * if the path segment has route params, read the param value from url\n     * for each segment of route this gets called\n     *\n     * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n     */\n    resolvePathSegment(segment, activatedRouteSnapshot) {\n        //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n        if (segment.includes(PATH_PARAM.PREFIX)) {\n            Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\n                segment = segment.replace(`:${key}`, `${value}`);\n            });\n        }\n        return segment;\n    }\n    /**\n     * queryParams & fragments for previous breadcrumb path are copied over to new list\n     */\n    getQueryParamsFromPreviousList(routeLink) {\n        const { queryParams, fragment } = this.previousBreadcrumbs.find((item) => item.routeLink === routeLink) ||\n            {};\n        return { queryParams, fragment };\n    }\n    /**\n     * set current activated route query params to the last breadcrumb item\n     */\n    setQueryParamsForActiveBreadcrumb(lastItem, activatedRouteSnapshot) {\n        if (lastItem) {\n            const { queryParams, fragment } = activatedRouteSnapshot;\n            lastItem.queryParams = queryParams ? { ...queryParams } : undefined;\n            lastItem.fragment = fragment;\n        }\n    }\n    /**\n     * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n     * When both are defined, child takes precedence\n     *\n     * Ex: Below we are setting breadcrumb on both parent and child.\n     * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n     * { path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\n     *                                                AND\n     * children: [\n     *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n     * ]\n     */\n    parseRouteData(routeConfig) {\n        const { path, data } = routeConfig;\n        const breadcrumb = this.mergeWithBaseChildData(routeConfig, data?.breadcrumb);\n        return { path, breadcrumb };\n    }\n    /**\n     * get empty children of a module or Component. Empty child is the one with path: ''\n     * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n     */\n    mergeWithBaseChildData(routeConfig, config) {\n        if (!routeConfig) {\n            return this.extractObject(config);\n        }\n        let baseChild;\n        if (routeConfig.loadChildren) {\n            // To handle a module with empty child route\n            baseChild = routeConfig._loadedRoutes.find((route) => route.path === '');\n        }\n        else if (routeConfig.children) {\n            // To handle a component with empty child route\n            baseChild = routeConfig.children.find((route) => route.path === '');\n        }\n        const childConfig = baseChild?.data?.breadcrumb;\n        return childConfig\n            ? this.mergeWithBaseChildData(baseChild, {\n                ...this.extractObject(config),\n                ...this.extractObject(childConfig),\n            })\n            : this.extractObject(config);\n    }\n    /**\n     * Update breadcrumb dynamically\n     *\n     * key can be a path | alias\n     *\n     * 1) Using complete route path. route can be passed the same way you define angular routes\n     * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n     * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n     * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n     * ------------------------------------------ OR ------------------------------------------\n     * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n     * - update label Ex: set('@mentor', 'Enabler')\n     * - change visibility Ex: set('@mentorEdit', { skip: true })\n     *\n     *\n     * value can be string | BreadcrumbObject | BreadcrumbFunction\n     */\n    set(key, breadcrumb) {\n        const breadcrumbObject = this.extractObject(breadcrumb);\n        let updateArgs;\n        if (key.startsWith(ALIAS_PREFIX)) {\n            updateArgs = ['alias', { ...breadcrumbObject, alias: key.slice(1) }];\n        }\n        else if (key.includes(PATH_PARAM.PREFIX)) {\n            updateArgs = [\n                'routeRegex',\n                { ...breadcrumbObject, routeRegex: this.buildRegex(key) },\n            ];\n        }\n        else {\n            updateArgs = [\n                'routeLink',\n                { ...breadcrumbObject, routeLink: this.ensureLeadingSlash(key) },\n            ];\n        }\n        // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\n        // change it to false since this is user supplied value\n        updateArgs[1].isAutoGeneratedLabel = false;\n        this.updateStore(...updateArgs);\n        this.updateCurrentBreadcrumbs(...updateArgs);\n    }\n    /**\n     * Update the store to reuse for dynamic declarations\n     * If the store already has this route definition update it, else add\n     */\n    updateStore(key, breadcrumb) {\n        const storeItemIndex = this.dynamicBreadcrumbStore.findIndex((item) => {\n            return breadcrumb[key] === item[key];\n        });\n        if (storeItemIndex > -1) {\n            this.dynamicBreadcrumbStore[storeItemIndex] = {\n                ...this.dynamicBreadcrumbStore[storeItemIndex],\n                ...breadcrumb,\n            };\n        }\n        else {\n            this.dynamicBreadcrumbStore.push({ ...breadcrumb });\n        }\n    }\n    /**\n     * If breadcrumb is present in current breadcrumbs update it and emit new stream\n     */\n    updateCurrentBreadcrumbs(key, breadcrumb) {\n        const itemIndex = this.currentBreadcrumbs.findIndex((item) => {\n            return key === 'routeRegex'\n                ? this.matchRegex(item.routeLink, breadcrumb[key])\n                : breadcrumb[key] === item[key];\n        });\n        if (itemIndex > -1) {\n            this.currentBreadcrumbs[itemIndex] = {\n                ...this.currentBreadcrumbs[itemIndex],\n                ...breadcrumb,\n            };\n            const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n            this.breadcrumbs.next([...breadcrumbsToShow]);\n        }\n    }\n    /**\n     * For a route with path param, we create regex dynamically from angular route syntax\n     * '/mentor/:id' becomes '/mentor/[^/]',\n     * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n     */\n    buildRegex(path) {\n        return this.ensureLeadingSlash(path).replace(new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'), PATH_PARAM.REGEX_REPLACER);\n    }\n    ensureLeadingSlash(path) {\n        return path.startsWith('/') ? path : `/${path}`;\n    }\n    /**\n     * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n     *\n     * string: simple static breadcrumb label for a path\n     * function: callback that gets invoked with resolved path param\n     * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n     */\n    extractLabel(config, resolvedParam) {\n        const label = typeof config === 'object' ? config.label : config;\n        if (typeof label === 'function') {\n            return label(resolvedParam);\n        }\n        return label;\n    }\n    extractObject(config) {\n        // don't include {label} if config is undefined. This is important since we merge the configs\n        if (config &&\n            (typeof config === 'string' || typeof config === 'function')) {\n            return { label: config };\n        }\n        return config || {};\n    }\n}\nBreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });\nBreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }]; } });\n\nclass BreadcrumbComponent {\n    constructor(breadcrumbService, activateRoute) {\n        this.breadcrumbService = breadcrumbService;\n        this._separator = '/';\n        /**\n         * If true, breadcrumb is auto generated even without any mapping label\n         * Default label is same as route segment\n         */\n        this.autoGenerate = true;\n        /**\n         * By default query params will be preserved with breadcrumbs\n         */\n        this.preserveQueryParams = true;\n        /**\n         * By default query fragments will be preserved with breadcrumbs\n         */\n        this.preserveFragment = true;\n        /**\n         * custom class provided by consumer to increase specificity\n         * This will benefit to override styles that are conflicting\n         */\n        this.class = '';\n        this.setupMessage = 'not set up yet';\n        this.someParameterValue = null;\n        // breadcrumb inside ngIf works only this way\n        activateRoute.params.subscribe((params) => {\n            this.setupComponent(params['someParam']);\n        });\n    }\n    /**\n     * separator between breadcrumbs, defaults to '/'.\n     * User can customize separator either by passing a String or Template\n     *\n     * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n     *\n     * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n     * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n     */\n    set separator(value) {\n        if (value instanceof TemplateRef) {\n            this.separatorTemplate = value;\n            this._separator = undefined;\n        }\n        else {\n            this.separatorTemplate = undefined;\n            this._separator = value || '/';\n        }\n    }\n    get separator() {\n        return this._separator;\n    }\n    setupComponent(someParam) {\n        this.setupMessage = 'set up at ' + new Date();\n        this.someParameterValue = someParam;\n    }\n    ngOnInit() {\n        this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(map((breadcrumbs) => {\n            return breadcrumbs\n                .filter((breadcrumb) => {\n                // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n                // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n                if (this.autoGenerate) {\n                    return true;\n                }\n                return !breadcrumb.isAutoGeneratedLabel;\n            })\n                .map((breadcrumb) => {\n                // Do not mutate breadcrumb as its source of truth.\n                // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n                const { routeInterceptor, routeLink } = breadcrumb;\n                return {\n                    ...breadcrumb,\n                    routeLink: routeInterceptor?.(routeLink, breadcrumb) || routeLink,\n                };\n            });\n        }));\n    }\n}\nBreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbComponent, deps: [{ token: BreadcrumbService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nBreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0\", type: BreadcrumbComponent, selector: \"xng-breadcrumb\", inputs: { autoGenerate: \"autoGenerate\", preserveQueryParams: \"preserveQueryParams\", preserveFragment: \"preserveFragment\", class: \"class\", anchorTarget: \"anchorTarget\", separator: \"separator\" }, queries: [{ propertyName: \"itemTemplate\", first: true, predicate: BreadcrumbItemDirective, descendants: true, read: TemplateRef }], ngImport: i0, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i1.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"pipe\", type: i3.AsyncPipe, name: \"async\" }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'xng-breadcrumb', encapsulation: ViewEncapsulation.None, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: BreadcrumbService }, { type: i1.ActivatedRoute }]; }, propDecorators: { itemTemplate: [{\n                type: ContentChild,\n                args: [BreadcrumbItemDirective, { static: false, read: TemplateRef }]\n            }], autoGenerate: [{\n                type: Input\n            }], preserveQueryParams: [{\n                type: Input\n            }], preserveFragment: [{\n                type: Input\n            }], class: [{\n                type: Input\n            }], anchorTarget: [{\n                type: Input\n            }], separator: [{\n                type: Input,\n                args: ['separator']\n            }] } });\n\nclass BreadcrumbModule {\n}\nBreadcrumbModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBreadcrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, declarations: [BreadcrumbComponent, BreadcrumbItemDirective], imports: [CommonModule, RouterModule], exports: [BreadcrumbComponent, BreadcrumbItemDirective] });\nBreadcrumbModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, imports: [CommonModule, RouterModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [BreadcrumbComponent, BreadcrumbItemDirective],\n                    imports: [CommonModule, RouterModule],\n                    exports: [BreadcrumbComponent, BreadcrumbItemDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of xng-breadcrumb\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreadcrumbComponent, BreadcrumbItemDirective, BreadcrumbModule, BreadcrumbService };\n"],"x_google_ignoreList":[3,4,5]}