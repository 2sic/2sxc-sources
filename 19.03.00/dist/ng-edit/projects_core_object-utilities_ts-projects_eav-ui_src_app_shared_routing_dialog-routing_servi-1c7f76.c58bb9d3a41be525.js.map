{"version":3,"file":"projects_core_object-utilities_ts-projects_eav-ui_src_app_shared_routing_dialog-routing_servi-1c7f76.c58bb9d3a41be525.js","mappings":"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","names":["convert","obj","fn","getWith","logSpecs","doOnDialogClosed","DialogRoutingService","ServiceBase","constructor","router","route","super","this","log","classLog","snapshot","url","getParam","key","paramMap","get","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","fnIf","subscriptions","add","childDialogClosed$","subscribe","end","urlSubRoute","params","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","navRelative","commands","events","pipe","filter","event","NavigationEnd","startWith","firstChild","map","pairwise","hadChildBefore","hasChildNow","i0","i1","factory","Éµfac","all","getEntities","getAvailableEntities","delete","webApiEntityRoot","webApiEntityList","EntityService","HttpServiceBase","queryService","transient","QueryService","getEntities$","p","switchMap","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","fields","data","Default","appId","contentType","entityId","force","parentId","parentField","parent","http","apiUrl","id","toString","__ngFactoryType__","context","getFromQuery","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","post","Guids","join","i2","Subscription","ngOnDestroy","destroy","unsubscribe","visualQueryRoutes","path","loadComponent","Promise","__webpack_require__","e","then","bind","m","VisualQueryComponent","children","GoToDevRest","EditRoutesNoHistory"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/core/object-utilities.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./projects/eav-ui/src/app/visual-query/visual-query.routing.ts"],"sourcesContent":["\r\n/**\r\n * Conversion function to change something to something else, a bit like 'map' but for a single item.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `getWith` function, but has a different name to indicate the usage.\r\n */\r\nexport function convert<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n/**\r\n * Function to do something with an object and return the result.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `convert` function, but has a different name to indicate the usage.\r\n */\r\nexport function getWith<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { Routes } from '@angular/router';\r\nimport { GoToDevRest } from '../dev-rest';\r\nimport { EditRoutesNoHistory } from '../edit/edit.routing';\r\n\r\nexport const visualQueryRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    loadComponent: () => import('./visual-query.component').then(m => m.VisualQueryComponent),\r\n    children: [\r\n      GoToDevRest.route,\r\n      ...EditRoutesNoHistory,\r\n    ]\r\n  },\r\n];\r\n\r\n"],"x_google_ignoreList":[]}