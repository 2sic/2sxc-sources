{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts.a487c4471dd70b50.js","mappings":"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","names":["EntityFilterComponent","constructor","this","filter","idFilterString","idFilter","agInit","params","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","context","data","node","getValue","field","some","value","includes","items","headerName","idFltr","itm","Id","getModel","filterType","setModel","model","join","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","map","el","parseInt","isNaN","filterChanged","filterChangedCallback","selectors","viewQuery","rf","ctx","i0","$event","_r1","FormsModule","i1","MatRadioModule","MatFormFieldModule","i2","MatInputModule","i3","styles","_r2","ctx_r2","do","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","refresh","verb","decls","vars","consts","template","ContentItemsActionsComponent_ng_template_12_Template","urlTo","menu_r4","MatRippleModule","MatIconModule","MatMenuModule","TippyDirective","encapsulation","ctx_r0","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","metadataTooltip","_c0","metadataCount","metadata","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","NgClass","MatBadgeModule","metadataKeyValidator","form","control","keyType","controls","testValue","toString","eavConstants","keyTypes","number","test","patternWholeNumber","guid","hasCurly","bracket","substring","guidRegex","patternGuid","option_r2","targetType","label","vm_r3","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_14_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Conditional_3_Template","ctx_r3","targetTypeOptions","unknownTargetType","targetTypeHint","option_r5","contentType_r6","NameId","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_27_For_5_Template","contentTypes","scopeOption_r7","name","CreateMetadataDialogComponent_Conditional_0_Conditional_28_For_5_Template","scopeOptions","dropdownInsertValue","item_r8","Guid","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_1_Template","guidedKey","contentType_r9","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_ng_container_0_Template","defaultKeyInput_r10","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_Template","tmp_4_0","entity","contentType","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_1_Template","_r11","toggleGuidedKey","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_15_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_16_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_For_25_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_26_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_27_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_40_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_43_Template","toggleGuidedMode","closeDialog","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","key","valid","CreateMetadataDialogComponent","BaseComponent","dialog","super","hostClass","contentItemsService","transient","ContentItemsService","contentTypesService","ContentTypesService","ngOnInit","Object","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","scopes","default","subscriptions","add","scopeForContentTypes","valueChanges","pipe","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","contentTypeStaticName","getAll","formValues$","mapUntilObjChanged","m","combineLatest","foundTargetType","find","RxHelpers","arraysEqual","updatedForm","isAppMetadata","app","appId","keys","UiControl","disable","viewModel$","hint","ngOnDestroy","complete","result","close","event","checked","target","scope","retrieveContentTypes","getScopes","hostVars","hostBindings","CreateMetadataDialogComponent_Conditional_0_Template","tmp_0_0","ReactiveFormsModule","i4","MatSelectModule","i5","i6","MatOptionModule","i7","NgTemplateOutlet","MatButtonModule","i8","i9","MatDialogActions","MatSlideToggleModule","i10","AsyncPipe","FieldHintComponent","ClickStopPropagationDirective","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","ctx_r1","debugFilter","ContentItemsComponent","#entitiesSvc","#contentExportSvc","#contentItemsSvc","#contentTypesSvc","#dialogRouter","snackBar","matDialog","viewContainerRef","changeDetectorRef","log","classLog","isDebug","inject","GlobalConfigService","EntityEditService","ContentExportService","DialogRoutingService","gridOptions","defaultGridOptions","onFilterChanged","_","#filterChanged","update","v","signal","#gridApiSig","#contentTypeStaticName","getParam","retrieveContentTypeSig","#refresh","computed","getAllSig","undefined","urlToExportContent","computedObj","hasFilters","getFilterModel","ids","forEachNodeAfterFilterAndSort","n","push","#urlTo","doOnDialogClosed","fetchItems","onGridReady","set","fetchColumns","getColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","#buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","JsonHelpers","tryParse","sessionStorage","getItem","keyFilters","setColumnDefs","a","setFilterModel","url","urlSubRoute","#urlToMetadata","GoToMetadata","getUrlEntity","_Title","editItem","EditPrep","newFromType","editId","formUrl","convertFormToUrl","navRelative","#urlToOpenEditView","urlToNewItem","filesDropped","files","importFile","lastIndexOf","toLocaleLowerCase","urlToImportContent","importItem","f","state","urlToImportItem","createMetadata","open","autoFocus","width","afterClosed","itemFor","newMetadataFromInfo","markForCheck","warn","duration","ColumnDefinitions","IdWithDefaultRenderer","cellClass","p","ReadOnly","cellRendererParams","idFieldParamsTooltipGetter","headerClass","cellRenderer","TextWidePrimary","flex","AgGridHelper","cellLink","headerTooltip","sortable","_Used","_Uses","ActionsPinnedRight3","#urlToClone","export","delete","StaticName","minWidth","Type","DataTypeCatalog","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","Number","copy","exportEntity","_RepositoryId","err","dismiss","ExceptionMessage","rawValue","ContentItemsComponent_Conditional_9_Template","ContentItemsComponent_Conditional_34_Template","Name","tmp_1_0","Properties","ListInstructions","RouterOutlet","SafeHtmlPipe","DragAndDropDirective","ToggleDebugDirective","SxcGridModule","logSpecs","HttpServiceBase","fnIf","getHttpApiUrl","webApiEntityList","initial","getSignal","webApiFieldsAll","staticName","file","from","toBase64","switchMap","fileBase64","http","post","apiUrl","webApiEntityRoot","AppId","ContentBase64","success","Success","Messages","__ngFactoryType__","factory","ɵfac","link","body","classes","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","input","isShort","toggleIsShort","inputs","ngContentSelectors","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","onClick","stopPropagation","globalConfigService","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","ServiceBase","router","route","snapshot","paramMap","get","getParams","reduce","acc","getQueryParam","queryParamMap","getQueryParams","getCurrentNavigation","extras","callback","l","childDialogClosed$","end","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","commands","events","NavigationEnd","firstChild","pairwise","hadChildBefore","hasChildNow","mapUntilChanged","fn","isEqual","boolEquals","x","y","stringEquals","valueEquals","objectsEqual","obj1","obj2","keys1","keys2","every","key1","hasOwnProperty","index","distinct","array","indexOf","create","zoneId","entityId","id","tryForce","force","BADGE_CONTENT_CLASS","_MatBadgeStyleLoader","static","changeDetection","MatBadge","_ngZone","NgZone","_elementRef","ElementRef","_ariaDescriber","AriaDescriber","_renderer","Renderer2","_animationMode","ANIMATION_MODULE_TYPE","optional","_idGenerator","_IdGenerator","color","_color","_setColor","overlap","disabled","position","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","size","hidden","_badgeElement","_inlineBadgeDescription","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","isAbove","isAfter","getBadgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","remove","removeDescription","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","getId","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","hostAttrs","booleanAttribute","features","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/content-items/services/content-items.service.ts","./projects/eav-ui/src/app/shared/ag-grid/ag-grid-helper.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/constants/dropdown-insert-value.constant.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts","./projects/eav-ui/src/app/shared/rxJs/rx.helpers.ts","./projects/eav-ui/src/app/shared/services/entity-edit.service.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n    selector: 'app-entity-filter',\r\n    templateUrl: './entity-filter.component.html',\r\n    styleUrls: ['./entity-filter.component.scss'],\r\n    imports: [\r\n        FormsModule,\r\n        MatRadioModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n    ]\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Clone\" [href]=\"params.urlTo('clone', item)\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </a>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"do('export')\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams, ContentItemType } from './content-items-actions.models';\r\n\r\ntype GoToUrls = 'clone'\r\n\r\n@Component({\r\n    selector: 'app-data-bundle-actions',\r\n    templateUrl: './content-items-actions.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatMenuModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  protected item: ContentItem;\r\n\r\n  public params: ContentItemsActionsParams & {\r\n    urlTo(verb: GoToUrls, item: ContentItem): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsComponent['params']): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentItemType): void {\r\n    this.params.do(verb, this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n  <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n    selector: 'app-content-items-entity',\r\n    templateUrl: './content-items-entity.component.html',\r\n    styleUrls: ['./content-items-entity.component.scss'],\r\n    imports: [TippyDirective,]\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) return;\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n    <a\r\n      class=\"eav-grid-action-button default-link highlight\"\r\n      matRipple\r\n      [tippy]=\"metadataTooltip\"\r\n      [href]=\"params.urlTo('openMetadata', item)\"\r\n      [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\"\r\n    >\r\n      <mat-icon\r\n        [matBadge]=\"metadataCount\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n        >{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </a>\r\n  }\r\n  @else if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"metadataCount\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n        >{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\n\r\ntype GoToUrls = 'openMetadata'\r\n\r\n@Component({\r\n    selector: 'app-content-items-status',\r\n    templateUrl: './content-items-status.component.html',\r\n    styleUrls: ['./content-items-status.component.scss'],\r\n    imports: [\r\n        MatIconModule,\r\n        MatRippleModule,\r\n        NgClass,\r\n        MatBadgeModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  protected item: ContentItem;\r\n\r\n  public params: {\r\n    urlTo(verb: GoToUrls, item: ContentItem): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusComponent['params']): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { Of } from '../../../../../core';\r\nimport { eavConstants, MetadataKeyTypes } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: Of<typeof MetadataKeyTypes> = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This is a special operation to add an item which is metadata for another item, see\r\n        <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <form [formGroup]=\"form\">\r\n        <!-- Target Type -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Target</mat-label>\r\n          @if (vm.guidedMode) {\r\n            <mat-select formControlName=\"targetType\" required>\r\n              @for (option of targetTypeOptions; track option) {\r\n                <mat-option [value]=\"option.targetType\">\r\n                  {{ option.label }}\r\n                </mat-option>\r\n              }\r\n              @if (vm.unknownTargetType) {\r\n                <mat-option [value]=\"vm.formValues.targetType\">\r\n                  {{ vm.formValues.targetType }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          }\r\n          @if (!vm.guidedMode) {\r\n            <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required />\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType) {\r\n          <app-field-hint [isError]=\"false\">\r\n            Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n          </app-field-hint>\r\n        }\r\n        @if (vm.targetTypeHint) {\r\n          <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern) {\r\n          <app-field-hint [isError]=\"true\"> Must be a whole number </app-field-hint>\r\n        }\r\n        <!-- Key Type -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Key type</mat-label>\r\n          <mat-select formControlName=\"keyType\" required>\r\n            @for (option of vm.keyTypeOptions; track option) {\r\n              <mat-option [value]=\"option\">\r\n                {{ option }}\r\n              </mat-option>\r\n            }\r\n          </mat-select>\r\n        </mat-form-field>\r\n        @if (form.controls['keyType'].touched && form.controls['keyType'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        <!-- Content Type for Content Items -->\r\n        @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n          <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n            <mat-label>Content Type</mat-label>\r\n            <mat-select formControlName=\"contentTypeForContentItems\" [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n              @for (contentType of vm.contentTypes; track contentType) {\r\n                <mat-option [value]=\"contentType.NameId\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <!-- Scope for Content Types -->\r\n        @if (\r\n          vm.guidedMode &&\r\n          (vm.formValues.targetType === eavConstants.metadata.entity.targetType ||\r\n            vm.formValues.targetType === eavConstants.metadata.contentType.targetType)\r\n        ) {\r\n          <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n            <mat-label>Scope</mat-label>\r\n            <mat-select formControlName=\"scopeForContentTypes\" [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n              @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n                <mat-option [value]=\"scopeOption.value\">\r\n                  {{ scopeOption.name }}\r\n                </mat-option>\r\n              }\r\n              <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n        <!-- Key -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Key</mat-label>\r\n          @if (vm.guidedMode) {\r\n            @switch (vm.formValues.targetType) {\r\n              @case (eavConstants.metadata.entity.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                    @for (item of vm.contentItems; track item) {\r\n                      <mat-option [value]=\"item.Guid\"> {{ item.Title }} ({{ item.Id }}) </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                } @else {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required />\r\n                }\r\n              }\r\n              @case (eavConstants.metadata.contentType.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                    @for (contentType of vm.contentTypes; track contentType) {\r\n                      <mat-option [value]=\"contentType.NameId\">\r\n                        {{ contentType.Label }}\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                } @else {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required />\r\n                }\r\n              }\r\n              @default {\r\n                <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n              }\r\n            }\r\n          } @else {\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\" formControlName=\"key\" required />\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\" formControlName=\"key\" required />\r\n            }\r\n          }\r\n          <ng-template #defaultKeyInput>\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\" formControlName=\"key\" required />\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\" formControlName=\"key\" required />\r\n            }\r\n          </ng-template>\r\n          @if (vm.guidedMode && vm.guidedKeyExists) {\r\n            <div matTextSuffix class=\"eav-selection-suffix\">\r\n              <button\r\n                mat-icon-button\r\n                class=\"eav-selection-suffix-button\"\r\n                type=\"button\"\r\n                [ngClass]=\"{ active: vm.guidedKey }\"\r\n                tippy=\"Pick existing value\"\r\n                (click)=\"toggleGuidedKey(true)\"\r\n              >\r\n                <mat-icon class=\"eav-icon\">search</mat-icon>\r\n              </button>\r\n              <button\r\n                mat-icon-button\r\n                class=\"eav-selection-suffix-button\"\r\n                type=\"button\"\r\n                [ngClass]=\"{ active: !vm.guidedKey }\"\r\n                tippy=\"Manual entry\"\r\n                (click)=\"toggleGuidedKey(false)\"\r\n              >\r\n                <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n              </button>\r\n            </div>\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber) {\r\n          <app-field-hint [isError]=\"true\"> Must be a whole number </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternGuid) {\r\n          <app-field-hint [isError]=\"true\"> Must be a valid GUID </app-field-hint>\r\n        }\r\n      </form>\r\n    </div>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <mat-slide-toggle\r\n        color=\"accent\"\r\n        [tippy]=\"\r\n          vm.guidedMode\r\n            ? 'Guided mode helps you select options that work'\r\n            : 'Manual mode is for advanced uses and allows you to insert any values'\r\n        \"\r\n        [checked]=\"vm.guidedMode\"\r\n        (change)=\"toggleGuidedMode($event)\"\r\n      >\r\n        {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div>\r\n        <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">Confirm</button>\r\n      </div>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { AsyncPipe, NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { UiControl } from '../../edit/shared/controls/ui-control';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyTypes, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ClickStopPropagationDirective } from '../../shared/directives/click-stop-propagation.directive';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { mapUntilObjChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { RxHelpers } from '../../shared/rxJs/rx.helpers';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n    selector: 'app-create-metadata-dialog',\r\n    templateUrl: './create-metadata-dialog.component.html',\r\n    imports: [\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatFormFieldModule,\r\n        MatSelectModule,\r\n        MatOptionModule,\r\n        MatInputModule,\r\n        NgTemplateOutlet,\r\n        MatButtonModule,\r\n        NgClass,\r\n        MatIconModule,\r\n        MatDialogActions,\r\n        MatSlideToggleModule,\r\n        AsyncPipe,\r\n        FieldHintComponent,\r\n        ClickStopPropagationDirective,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: Of<typeof MetadataKeyTypes>[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<Of<typeof MetadataKeyTypes>[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n  \r\n  private contentTypesService = transient(ContentTypesService);\r\n  constructor(\r\n    private dialog: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<Of<typeof MetadataKeyTypes>[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscriptions.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscriptions.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscriptions.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      mapUntilObjChanged(m => m)\r\n      // distinctUntilChanged(RxHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscriptions.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!RxHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value))\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType))\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId)\r\n          updatedForm.key = this.context.appId;\r\n\r\n        if (Object.keys(updatedForm).length)\r\n          this.form.patchValue(updatedForm);\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        UiControl.disable(this.form.controls['keyType'], keyTypeDisabled);\r\n        UiControl.disable(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialog.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n    selector: 'app-pub-meta-filter',\r\n    templateUrl: './pub-meta-filter.component.html',\r\n    styleUrls: ['./pub-meta-filter.component.scss'],\r\n    imports: [\r\n        MatRadioModule,\r\n        FormsModule,\r\n    ]\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ contentType()?.Label || contentType()?.Name }} Data</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    @if (contentType()?.Properties?.ListInstructions; as listInstructions) {\r\n      <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n    }\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular\r\n        class=\"ag-theme-material\"\r\n        [rowData]=\"items()()\"\r\n        [gridOptions]=\"gridOptions\"\r\n        (gridReady)=\"onGridReady($event)\"\r\n        appDragAndDrop\r\n        [allowedFileTypes]=\"'xml,json'\"\r\n        (filesDropped)=\"filesDropped($event)\"\r\n      >\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <a [href]=\"urlToExportContent()\" mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" tippyPlacement=\"top\">\r\n        <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </a>\r\n      <a [href]=\"urlToImportContent()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" tippyPlacement=\"top\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </a>\r\n      <a [href]=\"urlToImportItem()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" tippyPlacement=\"top\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </a>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" tippyPlacement=\"top\" (click)=\"createMetadata()\">\r\n        <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      @if (isDebug()) {\r\n        <button\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          color=\"accent\"\r\n          tippy=\"Print filter to console\"\r\n          tippyPlacement=\"top\"\r\n          (click)=\"debugFilter()\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n          <span>Filter</span>\r\n        </button>\r\n      }\r\n    </div>\r\n    <a [href]=\"urlToNewItem()\" mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\">\r\n      <mat-icon>add</mat-icon>\r\n    </a>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, computed, inject, OnInit, signal, ViewContainerRef, WritableSignal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../../../core';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { AgGridHelper } from '../shared/ag-grid/ag-grid-helper';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { TippyDirective } from '../shared/directives/tippy.directive';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { classLog } from '../shared/logging';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { SafeHtmlPipe } from '../shared/pipes/safe-html.pipe';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { EntityEditService } from '../shared/services/entity-edit.service';\r\nimport { GlobalConfigService } from '../shared/services/global-config.service';\r\nimport { computedObj } from '../shared/signals/signal.utilities';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\n\r\n@Component({\r\n    selector: 'app-content-items',\r\n    templateUrl: './content-items.component.html',\r\n    imports: [\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        RouterOutlet,\r\n        MatDialogActions,\r\n        SafeHtmlPipe,\r\n        DragAndDropDirective,\r\n        ToggleDebugDirective,\r\n        SxcGridModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentItemsComponent implements OnInit {\r\n\r\n  log = classLog({ ContentItemsComponent });\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n\r\n  #entitiesSvc = transient(EntityEditService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ContentItemsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    onFilterChanged: _ => this.#filterChanged.update(v => v + 1),\r\n  };\r\n\r\n  /** Signal to tell other signals that the filter changed */\r\n  #filterChanged = signal(0);\r\n\r\n  #gridApiSig: WritableSignal<GridApi<ContentItem>> = signal<GridApi<ContentItem>>(null);\r\n\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n  contentType = this.#contentTypesSvc.retrieveContentTypeSig(this.#contentTypeStaticName,  /* initial: */ null);\r\n\r\n  #refresh = signal(0);\r\n\r\n  items = computed(() => {\r\n    const refresh = this.#refresh();\r\n    return this.#contentItemsSvc.getAllSig(this.#contentTypeStaticName, undefined);\r\n  });\r\n\r\n  ngOnInit() {\r\n    this.urlToExportContent();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.fetchItems());\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApiSig.set(params.api);\r\n    this.fetchColumns();\r\n    this.urlToExportContent();\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.#refresh.update(value => value + 1)\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.#contentItemsSvc.getColumns(this.#contentTypeStaticName).subscribe(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.#buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.#gridApiSig())\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.#gridApiSig().setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      this.log.a('Will try to apply filter:', filterModel);\r\n      this.#gridApiSig().setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  // This method is called multiple times, to reduce redundancy.\r\n  // It calls the urlSubRoute method from the dialogRouter service\r\n  // and sets a # infront of the url, so angular can differentiate\r\n  // angular routes from ordinary urls.\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  #urlToMetadata(item: ContentItem) {\r\n    return this.#dialogRouter.urlSubRoute(GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.#contentTypeStaticName,\r\n    ));\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n          : EditPrep.editId(item.Id)\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #urlToOpenEditView(item?: ContentItem) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          item == null\r\n            ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n            : EditPrep.editId(item.Id)\r\n        ]\r\n      })}`\r\n    )\r\n  }\r\n\r\n  urlToNewItem(item?: ContentItem) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          item == null\r\n            ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n            : EditPrep.editId(item.Id)\r\n        ],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  urlToExportContent = computedObj('urlToExportContent', () => {\r\n    const value = this.#gridApiSig();\r\n    if (!value)\r\n      return '';\r\n\r\n    // Watch for filter changes, as the IDs are probably different on each change\r\n    this.#filterChanged();\r\n\r\n    const hasFilters = Object.keys(value.getFilterModel()).length > 0;\r\n    const ids: number[] = [];\r\n\r\n    if (hasFilters)\r\n      value.forEachNodeAfterFilterAndSort(n => ids.push(n.data.Id));\r\n\r\n    return this.#urlTo(\r\n      `export/${this.#contentTypeStaticName}${ids.length > 0 ? `/${ids.join(',')}` : ''}`\r\n    );\r\n  });\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.urlToImportContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  urlToImportContent(files?: File[]) {\r\n    // Special, because the /import is at the end of the URL\r\n    return this.#urlTo(\r\n      `${this.#contentTypeStaticName}${files ? `/${files.map(f => f.name).join(',')}` : ''}/import`\r\n    );\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navRelative(['import'], { state: dialogData });\r\n  }\r\n\r\n  urlToImportItem() {\r\n    return this.#urlTo('import');\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.matDialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) return;\r\n\r\n      const form: EditForm = {\r\n        items: [EditPrep.newMetadataFromInfo(this.#contentTypeStaticName, itemFor)],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.#gridApiSig().getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  #buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        ...ColumnDefinitions.IdWithDefaultRenderer,\r\n        cellClass: (p: { data: ContentItem }) => `id-action no-padding no-outline ${p.data._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' '),\r\n        cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentItem>()\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (p) => {\r\n          const item: ContentItem = p.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => ({\r\n          urlTo: (verb, item) => '#' + this.#urlToMetadata(item),\r\n        } satisfies ContentItemsStatusComponent['params']))(),\r\n      },\r\n      {\r\n        ...ColumnDefinitions.TextWidePrimary,\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        cellRenderer: (p: { data: ContentItem, }) => AgGridHelper.cellLink(this.#urlToOpenEditView(p.data), p.data.Title),\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (p: { data: ContentItem }) => `${p.data._Used} / ${p.data._Uses}`,\r\n      },\r\n      {\r\n        ...ColumnDefinitions.ActionsPinnedRight3,\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            urlTo: (verb, item) => '#' + this.#urlToClone(item),\r\n            do: (verb, item) => {\r\n              switch (verb) {\r\n                case 'export': this.export(item); break;\r\n                case 'delete': this.delete(item); break;\r\n              }\r\n            }\r\n          } satisfies ContentItemsActionsParams;\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeCatalog.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeCatalog.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  #urlToClone(item: ContentItem) {\r\n    return this.#dialogRouter.urlSubRoute(\r\n      `edit/${convertFormToUrl({\r\n        items: [EditPrep.copy(this.#contentTypeStaticName, item.Id)],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.#contentExportSvc.exportEntity(item.Id, this.#contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { JsonHelpers } from '../shared/helpers/json.helpers';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) return;\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) return;\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = JsonHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Injectable, Signal } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { webApiFieldsAll } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\nconst logSpecs = {\r\n  getAll: true,\r\n  getAllSig: true,\r\n}\r\n\r\n@Injectable()\r\nexport class ContentItemsService extends HttpServiceBase {\r\n\r\n  log = classLog({ ContentItemsService }, logSpecs);\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    this.log.fnIf('getAll', { contentTypeStaticName });\r\n    return this.getHttpApiUrl<ContentItem[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getAllSig(contentTypeStaticName: string, initial: undefined): Signal<ContentItem[]> {\r\n    this.log.fnIf('getAllSig', { contentTypeStaticName, initial });\r\n    return this.getSignal<ContentItem[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType: contentTypeStaticName }\r\n    }, initial);\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.getHttpApiUrl<Field[]>(webApiFieldsAll, {\r\n      params: { appId: this.appId, staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","export class AgGridHelper {\r\n  public static cellLink(link: string, body: string, classes?: string): string {\r\n    return `<a class=\"default-link fill-cell ${classes}\" href=\"${link}\">${body}</a>`;\r\n  }\r\n}","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n    selector: 'app-field-hint',\r\n    templateUrl: './field-hint.component.html',\r\n    styleUrls: ['./field-hint.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        NgClass,\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","export const dropdownInsertValue = 'DROPDOWN_INSERT_VALUE' as const;\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { classLog } from '../logging';\r\n\r\n@Directive({\r\n  selector: '[appClickStopPropagation]',\r\n})\r\nexport class ClickStopPropagationDirective {\r\n\r\n  log = classLog({ClickStopPropagationDirective});\r\n\r\n  // Log constructor to detect that it was really attached/created\r\n  constructor() {\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.log.a('onClick', { event });\r\n    event.stopPropagation();\r\n\r\n    // This should never be added here, as it's often on a link, and the default behavior (link open) should happen\r\n    // event.preventDefault();\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n","import isEqual from 'lodash-es/isEqual';\r\n\r\nexport class RxHelpers {\r\n\r\n  static boolEquals(x: boolean, y: boolean): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static stringEquals(x: string, y: string): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static valueEquals<T>(x: T, y: T): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static objectsEqual<T>(x: T, y: T): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    const obj1 = x as Record<string, any>;\r\n    const obj2 = y as Record<string, any>;\r\n\r\n    const keys1 = Object.keys(obj1);\r\n    const keys2 = Object.keys(obj2);\r\n    if (keys1.length !== keys2.length) return false;\r\n\r\n    const equal = keys1.every(key1 => {\r\n      if (!obj2.hasOwnProperty(key1)) return false;\r\n\r\n      return obj1[key1] === obj2[key1];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  static arraysEqual<T>(x: T[], y: T[]): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    if (x.length !== y.length) return false;\r\n\r\n    const equal = x.every((item, index) => {\r\n      return x[index] === y[index];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  /** used as .filter(distinct), filters array to only have distinct values */\r\n  static distinct<T>(value: T, index: number, array: T[]): boolean {\r\n    return array.indexOf(value) === index;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { ItemInListIdentifier } from '../models/edit-form.model';\r\nimport { webApiEntityRoot } from './entity.service';\r\nimport { HttpServiceBase } from './http-service-base';\r\n\r\n@Injectable()\r\nexport class EntityEditService extends HttpServiceBase {\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.appId, force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\ninterface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\ninterface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, ElementRef, Renderer2, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, _IdGenerator, InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber);\n    _renderer = inject(Renderer2);\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _idGenerator = inject(_IdGenerator);\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    _color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    overlap = true;\n    /** Whether the badge is disabled. */\n    disabled;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position = 'above after';\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size = 'medium';\n    /** Whether the badge is hidden. */\n    hidden;\n    /** Visible badge element. */\n    _badgeElement;\n    /** Inline badge description. Used when the badge is applied to non-interactive host elements. */\n    _inlineBadgeDescription;\n    /** Whether the OnInit lifecycle hook has run yet */\n    _isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    _interactivityChecker = inject(InteractivityChecker);\n    _document = inject(DOCUMENT);\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_MatBadgeStyleLoader);\n        inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = this._elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === 'mat-icon' &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', this._idGenerator.getId('mat-badge-content-'));\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatBadge, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[27]}