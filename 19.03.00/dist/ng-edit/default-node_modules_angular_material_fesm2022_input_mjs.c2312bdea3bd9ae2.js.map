{"version":3,"file":"default-node_modules_angular_material_fesm2022_input_mjs.c2312bdea3bd9ae2.js","mappings":"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","names":["_CdkTextFieldStyleLoader","static","__ngFactoryType__","i0","type","selectors","hostAttrs","decls","vars","template","rf","ctx","styles","encapsulation","changeDetection","listenerOptions","normalizePassiveListenerOptions","passive","AutofillMonitor","_platform","inject","Platform","_ngZone","NgZone","_styleLoader","_CdkPrivateStyleLoader","_monitoredElements","Map","constructor","monitor","elementOrRef","this","isBrowser","EMPTY","load","element","coerceElement","info","get","subject","result","Subject","cssClass","listener","event","animationName","classList","contains","remove","run","next","target","isAutofilled","add","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","token","factory","Éµfac","providedIn","TextFieldModule","MAT_INPUT_VALUE_ACCESSOR","InjectionToken","MAT_INPUT_INVALID_TYPES","MAT_INPUT_CONFIG","MatInput","_elementRef","ElementRef","ngControl","NgControl","optional","self","_autofillMonitor","_formField","MAT_FORM_FIELD","_uid","_IdGenerator","getId","_previousNativeValue","_inputValueAccessor","_signalBasedValueAccessor","_previousPlaceholder","_errorStateTracker","_webkitBlinkWheelListenerAttached","_config","_formFieldDescribedBy","_isServer","_isNativeSelect","_isTextarea","_isInFormField","focused","stateChanges","controlType","autofilled","disabled","_disabled","value","coerceBooleanProperty","id","_id","placeholder","name","required","_required","control","hasValidator","Validators","_type","_validateType","getSupportedInputTypes","has","nativeElement","_ensureWheelDefaultBehavior","errorStateMatcher","matcher","userAriaDescribedBy","readonly","_readonly","disabledInteractive","errorState","_neverEmptyInputTypes","filter","t","parentForm","NgForm","parentFormGroup","FormGroupDirective","defaultErrorStateMatcher","ErrorStateMatcher","accessor","nodeName","toLowerCase","isSignal","IOS","_iOSKeyupListener","_ErrorStateTracker","multiple","effect","ngAfterViewInit","subscribe","ngOnChanges","_webkitBlinkWheelListener","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","setSelectionRange","_onInput","newValue","_getPlaceholder","setAttribute","removeAttribute","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","existingDescribedBy","getAttribute","toAssign","exclude","concat","split","includes","length","join","onContainerClick","_isInlineSelect","size","el","selectionStart","selectionEnd","BLINK","WEBKIT","_getReadonlyAttribute","hostVars","hostBindings","inputs","booleanAttribute","exportAs","features","provide","MatFormFieldControl","useExisting","MatInputModule","imports","MatCommonModule","MatFormFieldModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/text-field.mjs","./node_modules/@angular/material/fesm2022/input.mjs"],"sourcesContent":["import { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, inject, NgZone, Injectable, ElementRef, EventEmitter, Directive, Output, booleanAttribute, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { DOCUMENT } from '@angular/common';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n\n/** Component used to load the structural styles of the text field. */\nclass _CdkTextFieldStyleLoader {\n    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _CdkTextFieldStyleLoader, deps: [], target: i0.ÉµÉµFactoryTarget.Component });\n    static Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: _CdkTextFieldStyleLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-text-field-style-loader\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{padding:2px 0 !important;box-sizing:content-box !important;height:auto !important;overflow:hidden !important}textarea.cdk-textarea-autosize-measuring-firefox{padding:2px 0 !important;box-sizing:content-box !important;height:0 !important}@keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: _CdkTextFieldStyleLoader, decorators: [{\n            type: Component,\n            args: [{ template: '', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: { 'cdk-text-field-style-loader': '' }, styles: [\"textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{padding:2px 0 !important;box-sizing:content-box !important;height:auto !important;overflow:hidden !important}textarea.cdk-textarea-autosize-measuring-firefox{padding:2px 0 !important;box-sizing:content-box !important;height:0 !important}@keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}\"] }]\n        }] });\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    _monitoredElements = new Map();\n    constructor() { }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        this._styleLoader.load(_CdkTextFieldStyleLoader);\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: AutofillMonitor, deps: [], target: i0.ÉµÉµFactoryTarget.Injectable });\n    static Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' });\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    _elementRef = inject(ElementRef);\n    _autofillMonitor = inject(AutofillMonitor);\n    /** Emits when the autofill state of the element changes. */\n    cdkAutofill = new EventEmitter();\n    constructor() { }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkAutofill, deps: [], target: i0.ÉµÉµFactoryTarget.Directive });\n    static Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkAutofill, isStandalone: true, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 });\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                }]\n        }], ctorParameters: () => [], propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n    _previousValue;\n    _initialHeight;\n    _destroyed = new Subject();\n    _minRows;\n    _maxRows;\n    _enabled = true;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     */\n    _previousMinRows = -1;\n    _textareaElement;\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    /** Cached height of a textarea with a single row. */\n    _cachedLineHeight;\n    /** Cached height of a textarea with only the placeholder. */\n    _cachedPlaceholderHeight;\n    /** Used to reference correct document/window */\n    _document = inject(DOCUMENT, { optional: true });\n    _hasFocus;\n    _isViewInited = false;\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_CdkTextFieldStyleLoader);\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    /** Handles `focus` and `blur` events. */\n    _handleFocusEvent = (event) => {\n        this._hasFocus = event.type === 'focus';\n    };\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkTextareaAutosize, deps: [], target: i0.ÉµÉµFactoryTarget.Directive });\n    static Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: CdkTextareaAutosize, isStandalone: true, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\", booleanAttribute], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 });\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: [{ alias: 'cdkTextareaAutosize', transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }] } });\n\nclass TextFieldModule {\n    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\n    static Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: TextFieldModule, imports: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] });\n    static Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: TextFieldModule });\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform, getSupportedInputTypes } from '@angular/cdk/platform';\nimport { AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, NgZone, isSignal, effect, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _IdGenerator } from '@angular/cdk/a11y';\nimport { NgControl, Validators, NgForm, FormGroupDirective } from '@angular/forms';\nimport { ErrorStateMatcher, _ErrorStateTracker, MatCommonModule } from '@angular/material/core';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\n/** Injection token that can be used to provide the default options for the input. */\nconst MAT_INPUT_CONFIG = new InjectionToken('MAT_INPUT_CONFIG');\nclass MatInput {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    ngControl = inject(NgControl, { optional: true, self: true });\n    _autofillMonitor = inject(AutofillMonitor);\n    _ngZone = inject(NgZone);\n    _formField = inject(MAT_FORM_FIELD, { optional: true });\n    _uid = inject(_IdGenerator).getId('mat-input-');\n    _previousNativeValue;\n    _inputValueAccessor;\n    _signalBasedValueAccessor;\n    _previousPlaceholder;\n    _errorStateTracker;\n    _webkitBlinkWheelListenerAttached = false;\n    _config = inject(MAT_INPUT_CONFIG, { optional: true });\n    /** `aria-describedby` IDs assigned by the form field. */\n    _formFieldDescribedBy;\n    /** Whether the component is being rendered on the server. */\n    _isServer;\n    /** Whether the component is a native html select. */\n    _isNativeSelect;\n    /** Whether the component is a textarea. */\n    _isTextarea;\n    /** Whether the input is inside of a form field. */\n    _isInFormField;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    autofilled = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    _disabled = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    _id;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    placeholder;\n    /**\n     * Name of the input.\n     * @docs-private\n     */\n    name;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    _required;\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n        this._ensureWheelDefaultBehavior();\n    }\n    _type = 'text';\n    /** An object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    userAriaDescribedBy;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._signalBasedValueAccessor\n            ? this._signalBasedValueAccessor.value()\n            : this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            if (this._signalBasedValueAccessor) {\n                this._signalBasedValueAccessor.value.set(value);\n            }\n            else {\n                this._inputValueAccessor.value = value;\n            }\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    _readonly = false;\n    /** Whether the input should remain interactive when it is disabled. */\n    disabledInteractive;\n    /** Whether the input is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week',\n    ].filter(t => getSupportedInputTypes().has(t));\n    constructor() {\n        const parentForm = inject(NgForm, { optional: true });\n        const parentFormGroup = inject(FormGroupDirective, { optional: true });\n        const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n        const accessor = inject(MAT_INPUT_VALUE_ACCESSOR, { optional: true, self: true });\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        if (accessor) {\n            if (isSignal(accessor.value)) {\n                this._signalBasedValueAccessor = accessor;\n            }\n            else {\n                this._inputValueAccessor = accessor;\n            }\n        }\n        else {\n            // If no input value accessor was explicitly specified, use the element as the input value\n            // accessor.\n            this._inputValueAccessor = element;\n        }\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (this._platform.IOS) {\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, this.ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!this._formField;\n        this.disabledInteractive = this._config?.disabledInteractive || false;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n        if (this._signalBasedValueAccessor) {\n            effect(() => {\n                // Read the value so the effect can register the dependency.\n                this._signalBasedValueAccessor.value();\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n        if (this._webkitBlinkWheelListenerAttached) {\n            this._elementRef.nativeElement.removeEventListener('wheel', this._webkitBlinkWheelListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            // Since the input isn't a `ControlValueAccessor`, we don't have a good way of knowing when\n            // the disabled state has changed. We can't use the `ngControl.statusChanges`, because it\n            // won't fire if the input is disabled with `emitEvents = false`, despite the input becoming\n            // disabled.\n            if (this.ngControl.disabled !== null && this.ngControl.disabled !== this.disabled) {\n                this.disabled = this.ngControl.disabled;\n                this.stateChanges.next();\n            }\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Refreshes the error state of the input. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused === this.focused) {\n            return;\n        }\n        if (!this._isNativeSelect && isFocused && this.disabled && this.disabledInteractive) {\n            const element = this._elementRef.nativeElement;\n            // Focusing an input that has text will cause all the text to be selected. Clear it since\n            // the user won't be able to change it. This is based on the internal implementation.\n            if (element.type === 'number') {\n                // setSelectionRange doesn't work on number inputs so it needs to be set briefly to text.\n                element.type = 'text';\n                element.setSelectionRange(0, 0);\n                element.type = 'number';\n            }\n            else {\n                element.setSelectionRange(0, 0);\n            }\n        }\n        this.focused = isFocused;\n        this.stateChanges.next();\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        const placeholder = this._getPlaceholder();\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Gets the current placeholder of the form field. */\n    _getPlaceholder() {\n        return this.placeholder || null;\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return (this.focused && !this.disabled) || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        const element = this._elementRef.nativeElement;\n        const existingDescribedBy = element.getAttribute('aria-describedby');\n        let toAssign;\n        // In some cases there might be some `aria-describedby` IDs that were assigned directly,\n        // like by the `AriaDescriber` (see #30011). Attempt to preserve them by taking the previous\n        // attribute value and filtering out the IDs that came from the previous `setDescribedByIds`\n        // call. Note the `|| ids` here allows us to avoid duplicating IDs on the first render.\n        if (existingDescribedBy) {\n            const exclude = this._formFieldDescribedBy || ids;\n            toAssign = ids.concat(existingDescribedBy.split(' ').filter(id => id && !exclude.includes(id)));\n        }\n        else {\n            toAssign = ids;\n        }\n        this._formFieldDescribedBy = ids;\n        if (toAssign.length) {\n            element.setAttribute('aria-describedby', toAssign.join(' '));\n        }\n        else {\n            element.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n    _iOSKeyupListener = (event) => {\n        const el = event.target;\n        // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n        // indicate different things. If the value is 0, it means that the caret is at the start\n        // of the input, whereas a value of `null` means that the input doesn't support\n        // manipulating the selection range. Inputs that don't support setting the selection range\n        // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n        // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n        if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n        }\n    };\n    _webkitBlinkWheelListener = () => {\n        // This is a noop function and is used to enable mouse wheel input\n        // on number inputs\n        // on blink and webkit browsers.\n    };\n    /**\n     * In blink and webkit browsers a focused number input does not increment or decrement its value\n     * on mouse wheel interaction unless a wheel event listener is attached to it or one of its ancestors or a passive wheel listener is attached somewhere in the DOM.\n     * For example: Hitting a tooltip once enables the mouse wheel input for all number inputs as long as it exists.\n     * In order to get reliable and intuitive behavior we apply a wheel event on our own\n     * thus making sure increment and decrement by mouse wheel works every time.\n     * @docs-private\n     */\n    _ensureWheelDefaultBehavior() {\n        if (!this._webkitBlinkWheelListenerAttached &&\n            this._type === 'number' &&\n            (this._platform.BLINK || this._platform.WEBKIT)) {\n            this._ngZone.runOutsideAngular(() => {\n                this._elementRef.nativeElement.addEventListener('wheel', this._webkitBlinkWheelListener);\n            });\n            this._webkitBlinkWheelListenerAttached = true;\n        }\n        if (this._webkitBlinkWheelListenerAttached && this._type !== 'number') {\n            this._elementRef.nativeElement.removeEventListener('wheel', this._webkitBlinkWheelListener);\n            this._webkitBlinkWheelListenerAttached = true;\n        }\n    }\n    /** Gets the value to set on the `readonly` attribute. */\n    _getReadonlyAttribute() {\n        if (this._isNativeSelect) {\n            return null;\n        }\n        if (this.readonly || (this.disabled && this.disabledInteractive)) {\n            return 'true';\n        }\n        return null;\n    }\n    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatInput, deps: [], target: i0.ÉµÉµFactoryTarget.Directive });\n    static Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatInput, isStandalone: true, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\", disabledInteractive: [\"disabledInteractive\", \"disabledInteractive\", booleanAttribute] }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"class.mat-mdc-form-field-textarea-control\": \"_isInFormField && _isTextarea\", \"class.mat-mdc-form-field-input-control\": \"_isInFormField\", \"class.mat-mdc-input-disabled-interactive\": \"disabledInteractive\", \"class.mdc-text-field__input\": \"_isInFormField\", \"class.mat-mdc-native-select-inline\": \"_isInlineSelect()\", \"id\": \"id\", \"disabled\": \"disabled && !disabledInteractive\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"_getReadonlyAttribute()\", \"attr.aria-disabled\": \"disabled && disabledInteractive ? \\\"true\\\" : null\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\", \"attr.id\": \"id\" }, classAttribute: \"mat-mdc-input-element\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        'class': 'mat-mdc-input-element',\n                        // The BaseMatInput parent class adds `mat-input-element`, `mat-form-field-control` and\n                        // `mat-form-field-autofill-control` to the CSS class list, but this should not be added for\n                        // this MDC equivalent input.\n                        '[class.mat-input-server]': '_isServer',\n                        '[class.mat-mdc-form-field-textarea-control]': '_isInFormField && _isTextarea',\n                        '[class.mat-mdc-form-field-input-control]': '_isInFormField',\n                        '[class.mat-mdc-input-disabled-interactive]': 'disabledInteractive',\n                        '[class.mdc-text-field__input]': '_isInFormField',\n                        '[class.mat-mdc-native-select-inline]': '_isInlineSelect()',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[id]': 'id',\n                        '[disabled]': 'disabled && !disabledInteractive',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': '_getReadonlyAttribute()',\n                        '[attr.aria-disabled]': 'disabled && disabledInteractive ? \"true\" : null',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], disabledInteractive: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\nclass MatInputModule {\n    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\n    static Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatInput], exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule] });\n    static Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatFormFieldModule, TextFieldModule, MatCommonModule] });\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatFormFieldModule, MatInput],\n                    exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_CONFIG, MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n"],"x_google_ignoreList":[0,1]}