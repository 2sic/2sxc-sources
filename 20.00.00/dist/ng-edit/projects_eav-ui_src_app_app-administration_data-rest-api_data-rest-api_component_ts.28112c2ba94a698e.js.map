{"version":3,"file":"projects_eav-ui_src_app_app-administration_data-rest-api_data-rest-api_component_ts.28112c2ba94a698e.js","mappings":"kbAKQA,MAAA,kBACEA,MAAA,GACFA,kCAFYA,MAAA,QAAAC,EAAAC,QACVF,cAAA,IAAAC,EAAAE,MAAA,MCmBH,IAAMC,EAAoB,MAA3B,MAAOA,EACXC,GACAC,GAEAC,GAEAC,cALAC,MAAAJ,KAAmBK,KAAUC,MAC7BF,MAAAH,KAAgBI,KAAUE,KAE1BH,MAAAF,KAAeM,OAAOC,MAiBtBL,KAAAM,SAAQC,OAAO,WACfP,KAAAQ,aAAeR,MAAKJ,EAAiBa,SAAST,KAAKM,OAAOI,MAE1DV,KAAAW,gBAA6BX,MAAKF,EAAac,MAAM,CACnDC,YAAa,CAAC,OACf,EAlBCC,MAAO,KACL,MAAMC,EAAQf,KAAKQ,eACnB,GAAqB,IAAjBO,EAAMC,OACR,OAEF,MAAMC,EAAgBjB,MAAKH,EAAcqB,YAAYC,IAAG,GAElDC,EAAOL,EAAMM,KAAKC,GAAMA,EAAG7B,SAAWwB,GACxCG,GACFpB,KAAKW,gBAAgBY,IAAI,eAAeC,SAASJ,EAAK3B,OAAM,EAElE,CAUAgC,YAAYC,GACLA,GACL1B,MAAKH,EAAc8B,YAAY,CAAC,GAAGD,KACrC,CAACE,SAAA5B,KAAA,mBAAA6B,iBAhCUlC,EAAoB,EAAAiC,SAAA5B,KAAA,UAAA8B,EAAAC,IAAA,MAApBpC,EAAoBqC,UAAA,wBAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,0HAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDvB7B9C,MAFJ,WAEIA,CAFgC,qBAEhCA,CADwD,eAC7CA,MAAA,kBAAYA,QACvBA,MAAA,kBAA0CA,MAAA,uBAAAgD,GAAA,OAAeD,EAAAb,YAAAc,EAAmB,GAC1EhD,MAAA,EAAAiD,EAAA,mBAAAC,GAONlD,YAEAA,MAAA,0BAbMA,MAAA,YAAA+C,EAAA3B,iBAIApB,MAAA,GAAAA,MAAA+C,EAAA9B,eAAckC,wBCWhBC,IAAeC,QAAAC,QACfC,KACAC,KACAC,KACAC,KAAmBC,yBACnBC,KACAC,KAAaC,cAAA,WAIJ1D,CAAoB","names":["i0","contentType_r1","NameId","Label","DataRestApiComponent","#contentTypesSvc","#dialogRouter","#formBuilder","constructor","this","transient","ContentTypesService","DialogRoutingService","inject","FormBuilder","scope","signal","contentTypes","getTypes","value","contentTypeForm","group","contentType","effect","types","length","urlStaticName","urlSegments","at","type","find","ct","get","setValue","openRestApi","event","navRelative","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_3__","VBU","selectors","decls","vars","consts","template","rf","ctx","$event","DataRestApiComponent_For_6_Template","_forTrack0","sort","MatSelectModule","i1","i2","MatButtonModule","MatCardModule","MatIconModule","ReactiveFormsModule","i3","RouterOutlet","SxcGridModule","encapsulation"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/data-rest-api/data-rest-api.component.html","./projects/eav-ui/src/app/app-administration/data-rest-api/data-rest-api.component.ts"],"sourcesContent":["<form [formGroup]=\"contentTypeForm\">\r\n  <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n    <mat-label>Content-Type</mat-label>\r\n    <mat-select formControlName=\"contentType\" (valueChange)=\"openRestApi($event)\">\r\n      @for (contentType of contentTypes().sort() ; track contentType.Id) {\r\n        <mat-option [value]=\"contentType.NameId\" >\r\n          {{ contentType.Label }}\r\n        </mat-option>\r\n      }\r\n    </mat-select>\r\n  </mat-form-field>\r\n</form>\r\n\r\n<router-outlet></router-outlet>\r\n","import { Component, effect, inject, signal } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../../../../core';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { ContentTypesService } from '../services';\r\n\r\n@Component({\r\n  selector: 'app-data-rest-api',\r\n  imports: [\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n    RouterOutlet,\r\n    SxcGridModule,\r\n  ],\r\n  templateUrl: './data-rest-api.component.html'\r\n})\r\nexport class DataRestApiComponent {\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  #formBuilder = inject(FormBuilder);\r\n\r\n  constructor() {\r\n    // Update form if the url changes and the item is found\r\n    effect(() => {\r\n      const types = this.contentTypes();\r\n      if (types.length === 0)\r\n        return;\r\n\r\n      const urlStaticName = this.#dialogRouter.urlSegments.at(-1);\r\n\r\n      const type = types.find(ct => ct.NameId === urlStaticName);\r\n      if (type)\r\n        this.contentTypeForm.get('contentType').setValue(type.NameId);\r\n    });\r\n  }\r\n\r\n  scope = signal('Default');\r\n  contentTypes = this.#contentTypesSvc.getTypes(this.scope).value;\r\n\r\n  contentTypeForm: FormGroup = this.#formBuilder.group({\r\n    contentType: ['']\r\n  });\r\n\r\n\r\n  openRestApi(event: string): void {\r\n    if (!event) return;\r\n    this.#dialogRouter.navRelative([`${event}`]);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}