{"version":3,"file":"projects_eav-ui_src_app_apps-management_licence-info_license-info_component_ts-node_modules_a-750cb4.cadffaad368b65be.js","mappings":"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","names":["ServiceBase","constructor","this","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","jDH","factory","ɵfac","BADGE_CONTENT_CLASS","_MatBadgeStyleLoader","i0","type","selectors","decls","vars","template","rf","ctx","styles","encapsulation","changeDetection","MatBadge","_ngZone","inject","NgZone","_elementRef","ElementRef","_ariaDescriber","AriaDescriber","_renderer","Renderer2","_animationsDisabled","_idGenerator","_IdGenerator","color","_color","value","_setColor","overlap","disabled","position","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","size","hidden","_badgeElement","_inlineBadgeDescription","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","styleLoader","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","isAbove","indexOf","isAfter","getBadgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","destroyNode","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","getId","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","hostAttrs","hostVars","hostBindings","inputs","booleanAttribute","MatBadgeModule","imports","A11yModule","MatCommonModule","ClipboardService","snackBar","copyToClipboard","text","open","duration","i1","providedIn","ExpirationExtension","expandFeature","feature","getExpiration","expiration","expandLicense","license","lowestExpiration","Features","map","f","sort","dateString","result","icon","ExpMessage","ExpIcon","ExpWarningIcon","expires","split","startsWith","expDate","Date","toDateString","setDate","getDate","endsWith","ActiveFeaturesCountPipe","transform","filter","isEnabled","length","debug_node_JnOYh9kg","EJ8","pure","AgGridHeightDirective","elementRef","itemsCount","input","headerHeight","rowHeight","maxRows","extraHeight","element","ngOnChanges","changes","rows","style","height","FsC","features","FeaturesListEnabledReasonComponent","agInit","params","data","refresh","VBU","consts","enabledReasonDetailed","TippyDirective","ctx_r1","badgeValue","_r1","openSettings","FeaturesListEnabledComponent_Conditional_3_Conditional_1_Template","FeaturesListEnabledComponent_Conditional_3_Conditional_2_Template","FeaturesListEnabledComponent","router","Router","configurationContentType","contentType","configurationData","configuration","Object","keys","overrideContents","guid","enabled","enabledInConfiguration","LoadAppDetails","LoadAppSummary","LoadSystemDataDetails","LoadSystemDataSummary","rawUrl","addItemUrlTest","routeSegments","substring","navigate","state","returnValue","FeaturesListEnabledComponent_Conditional_3_Template","MatIconModule","i2","MatRippleModule","i3","FeaturesStatusComponent","isDisabled","tooltip","tooltipGetter","toggle","nextValue","onToggle","_c0","MatSlideToggleModule","NgClass","LicensesOrderPipe","licenses","isArray","a","b","Priority","license_r1","gridOptions","LicenseInfoComponent_For_2_Conditional_17_Template","IsEnabled","Name","panel_r3","expanded","Description","LicenseInfoComponent","#featuresConfigSvc","#dialogRouter","#disabled","#refresh","matDialog","viewContainerRef","changeDetectorRef","#buildGridOptions","transient","FeaturesConfigService","DialogRoutingService","isDebug","GlobalConfigService","signal","linkedSignal","source","getLicensesLive","computation","previous","l","ModuleRegistry","registerModules","ClientSideRowModelModule","doOnDialogClosedWithData","objData","saveFeatures","FeatureGuid","Enabled","Configuration","subscribe","#refreshFn","timer","setTimeout","update","v","set","trackLicenses","index","Guid","openRegistration","url","replace","#showFeatureDetails","FeatureDetailsDialogComponent","autoFocus","showGuid","showStatus","width","markForCheck","#toggleFeature","forkJoin","next","error","#urlTo","urlSubRoute","#routeAddItem","convertFormToUrl","items","EditPrep","newFromType","defaultGridOptions","columnDefs","ColumnDefinitions","TextWideMin100","headerName","field","cellClass","cellRenderer","IdFieldComponent","cellRendererParams","nameId","onCellClicked","headerClass","sortable","BooleanFilterComponent","ct","TextNarrow","ItemsText","tooltipValueGetter","p","ActionsPinnedRight6","isConfigurable","LicenseInfoComponent_For_2_Template","MatExpansionModule","SxcGridModule","i4","MatDialogActions","MatButtonModule","i5","RouterOutlet","FocusKeyManager","ListKeyManager","_origin","setFocusOrigin","origin","setActiveItem","item","super","activeItem","focus","_r3","clipboard","_r4","dialog","close","FeatureDetailsDialogComponent_Conditional_0_Conditional_13_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_14_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_26_Template","name","mySpecs","security","Impact","Message","link","showClose","dialogSpecs","specs","computedObj","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FeatureDetailsDialogComponent_Conditional_0_Template","MatCardModule","SafeHtmlPipe","TranslateModule","logSpecs","doOnDialogClosed","route","log","classLog","snapshot","urlSegments","getParam","key","paramMap","get","getParams","reduce","acc","getQueryParam","queryParamMap","getQueryParams","getCurrentNavigation","extras","callback","fnIf","childDialogClosed$","end","#childDialogClosedWithData","tree","createUrlTree","relativeTo","serializeUrl","navPath","navRelative","commands","events","pipe","event","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","tap","fn","snapShot","prev","curr","_angular_core__WEBPACK_IMPORTED_MODULE_8__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/services/service-base.ts","./node_modules/@angular/material/fesm2022/badge.mjs","./projects/eav-ui/src/app/shared/services/clipboard.service.ts","./projects/eav-ui/src/app/features/expiration-extension.ts","./projects/eav-ui/src/app/apps-management/licence-info/active-features-count.pipe.ts","./projects/eav-ui/src/app/apps-management/licence-info/ag-grid-height.directive.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled-reason/features-list-enabled-reason.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled-reason/features-list-enabled-reason.component.html","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled/features-list-enabled.component.html","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled/features-list-enabled.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-status/features-status.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-status/features-status.component.html","./projects/eav-ui/src/app/apps-management/licence-info/licenses-order.pipe.ts","./projects/eav-ui/src/app/apps-management/licence-info/license-info.component.html","./projects/eav-ui/src/app/apps-management/licence-info/license-info.component.ts","./node_modules/@angular/cdk/fesm2022/focus-key-manager-CPmlyB_c.mjs","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { AriaDescriber, _IdGenerator, InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, ElementRef, Renderer2, DOCUMENT, HOST_TAG_NAME, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/bidi';\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\\n\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber);\n    _renderer = inject(Renderer2);\n    _animationsDisabled = _animationsDisabled();\n    _idGenerator = inject(_IdGenerator);\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/badge/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    _color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    overlap = true;\n    /** Whether the badge is disabled. */\n    disabled;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position = 'above after';\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size = 'medium';\n    /** Whether the badge is hidden. */\n    hidden;\n    /** Visible badge element. */\n    _badgeElement;\n    /** Inline badge description. Used when the badge is applied to non-interactive host elements. */\n    _inlineBadgeDescription;\n    /** Whether the OnInit lifecycle hook has run yet */\n    _isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    _interactivityChecker = inject(InteractivityChecker);\n    _document = inject(DOCUMENT);\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_MatBadgeStyleLoader);\n        styleLoader.load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = this._elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const tagName = inject(HOST_TAG_NAME);\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.dev/components/badge/overview#accessibility\n            if (tagName.toLowerCase() === 'mat-icon' &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', this._idGenerator.getId('mat-badge-content-'));\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationsDisabled) {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && !this._animationsDisabled) {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadge, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\nexport { MatBadge, MatBadgeModule };\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../helpers/copy-to-clipboard.helper';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClipboardService {\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}","import { License } from '../apps-management/models/license.model';\r\nimport { Feature } from './models';\r\n\r\n/**\r\n * Helper class used in union with other classes to add expiration hints to features.\r\n * It's implemented as a class, so it's easier to bundle static functions.\r\n */\r\nexport class ExpirationExtension {\r\n\r\n  /** The expiration date as a human readable string. Not from the server; generated on the client */\r\n  ExpMessage?: string;\r\n  ExpIcon?: string;\r\n\r\n  ExpWarningIcon?: string;\r\n\r\n  static expandFeature(feature: Feature): Feature & ExpirationExtension {\r\n    return {\r\n      ...feature,\r\n      ...ExpirationExtension.getExpiration(feature?.expiration)\r\n    };\r\n  }\r\n\r\n  static expandLicense(license: License): License & ExpirationExtension {\r\n    // Wrap in Try-Catch to avoid errors in the UI\r\n    try {\r\n      // find the lowest expiration date on the features\r\n      const lowestExpiration = license?.Features?.map(f => f.expiration).sort()[0];\r\n      // if there is no lowest expiration date, skip the rest\r\n      if (lowestExpiration == null) return license;\r\n\r\n      // debugger;\r\n      const withState = {\r\n        ...license,\r\n        ...ExpirationExtension.getExpiration(lowestExpiration),\r\n      };\r\n\r\n      return withState;\r\n    } catch (error) {\r\n      return license;\r\n    }\r\n  }\r\n\r\n  private static getExpiration(dateString: string): ExpirationExtension {\r\n    // Inner helper to create the final result\r\n    const result = (icon: string, text: string) => ({\r\n      ExpMessage: (icon != null ? icon + ' ' : '') + text,\r\n      ExpIcon: icon,\r\n      ExpWarningIcon: icon != '✅' ? icon : null,\r\n    })\r\n    const expires = dateString?.split('T')[0];\r\n    // no valid expiration date\r\n    if (expires == null) return result(null, null);\r\n    // never expires\r\n    if (expires.startsWith('9999')) return result('✅', 'never');\r\n    const expDate = new Date(expires);\r\n    // show \"expired\" if it's over-due\r\n    if (expDate < new Date()) return result('🛑', 'expired');\r\n    // return \"today\" if it's today\r\n    if (expDate.toDateString() === new Date().toDateString()) return result('⚠️', 'today');\r\n    // return \"tomorrow\" if it's tomorrow\r\n    if (expDate.toDateString() === new Date(new Date().setDate(new Date().getDate() + 1)).toDateString()) return result('⚠️', 'tomorrow');\r\n    // Warn if it's within 30 days\r\n    if (expDate < new Date(new Date().setDate(new Date().getDate() + 30))) return result('⚠️', expires);\r\n    // Show special EOY if it's at the end of the year - the most common expiration\r\n    if (expires.endsWith('12-31')) return result('✅', `EOY ${expires.split('-')[0]}`);\r\n    // otherwise: just show the date\r\n    return result('❓', expires);\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { License } from '../models/license.model';\r\n\r\n@Pipe({\r\n  name: 'activeFeaturesCount',\r\n})\r\nexport class ActiveFeaturesCountPipe implements PipeTransform {\r\n\r\n  transform(license: License) {\r\n    return `${license.Features.filter(f => f.isEnabled).length}/${license.Features.length}`;\r\n  }\r\n}\r\n","import { Directive, ElementRef, input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appAgGridHeight]',\r\n})\r\nexport class AgGridHeightDirective implements OnChanges {\r\n  itemsCount = input<number>(0);\r\n  headerHeight = input<number>(32);\r\n  rowHeight = input<number>(48);\r\n  maxRows = input<number>(100);\r\n\r\n  /** Fixes a bug where scrollbar appears when then is no overflow */\r\n  private extraHeight = 2;\r\n\r\n  private element: HTMLElement;\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.itemsCount != null) {\r\n      const rows = this.itemsCount() === 0 ? 2 : this.itemsCount() > this.maxRows() ? this.maxRows() : this.itemsCount();\r\n      this.element.style.height = `${this.headerHeight() + rows * this.rowHeight() + this.extraHeight}px`;\r\n    }\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Feature } from '../../../features/models/feature.model';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n    selector: 'app-features-list-enabled-reason',\r\n    templateUrl: './features-list-enabled-reason.component.html',\r\n    imports: [TippyDirective]\r\n})\r\nexport class FeaturesListEnabledReasonComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n  feature: Feature;\r\n\r\n  agInit(params: ICellRendererParams): void {\r\n    this.value = params.value;\r\n    this.feature = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div [tippy]=\"feature.enabledReasonDetailed\">{{ value }}</div>\r\n","<div class=\"icon-container\">\r\n  <mat-icon>{{ value ? 'check_box' : 'check_box_outline_blank' }}</mat-icon>\r\n\r\n  @if (configurationContentType) {\r\n    <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Open Settings\" (click)=\"openSettings()\">\r\n      @if (badgeValue > 0) {\r\n        <mat-icon [matBadge]=\"badgeValue\" matBadgePosition=\"below after\" matBadgeSize=\"small\">settings</mat-icon>\r\n      } @else {\r\n        <mat-icon>settings</mat-icon>\r\n      }\r\n    </a>\r\n  }\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component, inject } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Router } from '@angular/router';\r\nimport { DialogRoutingState } from '../../../edit/dialog/dialogRouteState.model';\r\nimport { Feature } from '../../../features/models';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { OverrideContentsLogData } from './feature-list.model';\r\n\r\n@Component({\r\n  selector: 'app-features-list-settings',\r\n  templateUrl: './features-list-enabled.component.html',\r\n  styleUrls: ['./features-list-enabled.component.scss'],\r\n  imports: [MatIconModule, MatBadgeModule, MatRippleModule, TippyDirective]\r\n})\r\nexport class FeaturesListEnabledComponent implements ICellRendererAngularComp {\r\n  router = inject(Router);\r\n  configurationContentType: string | undefined;\r\n  contentType: Feature | undefined;\r\n  badgeValue: number\r\n  configurationData: OverrideContentsLogData; // TYPE\r\n\r\n  public params: {\r\n    addItemUrlTest(contentType: Feature): string;\r\n  };\r\n\r\n  value: boolean;\r\n\r\n  agInit(params: ICellRendererParams & FeaturesListEnabledComponent[\"params\"]): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.configurationContentType = params.data.configurationContentType;\r\n    this.contentType = params.data;\r\n\r\n    this.configurationData = params.data?.configuration;\r\n    this.badgeValue = this.configurationData && Object.keys(this.configurationData).length > 0 ? 1 : 0;\r\n\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n\r\n  openSettings() {\r\n    const overrideContents: Record<string, unknown>[] = [\r\n      {\r\n        guid: this.contentType.guid,\r\n        enabled: this.contentType.enabledInConfiguration,\r\n        LoadAppDetails: this.configurationData?.LoadAppDetails ?? null,\r\n        LoadAppSummary: this.configurationData?.LoadAppSummary ?? null,\r\n        LoadSystemDataDetails: this.configurationData?.LoadSystemDataDetails ?? null,\r\n        LoadSystemDataSummary: this.configurationData?.LoadSystemDataSummary ?? null,\r\n      }\r\n    ];\r\n\r\n    // Raw URL string, e.g. '#/2/v2/381/...'\r\n    const rawUrl = this.params.addItemUrlTest(this.contentType);\r\n\r\n    // Remove leading '#' or '/' to clean the URL string\r\n    const normalizedUrl = rawUrl.startsWith('#') || rawUrl.startsWith('/')\r\n      ? rawUrl.substring(1)\r\n      : rawUrl;\r\n\r\n    // Convert the cleaned URL string into individual route segments\r\n    const routeSegments = normalizedUrl.split('/');\r\n\r\n    // Use Angular router to navigate to the route segments with custom state\r\n    this.router.navigate(routeSegments, {\r\n      state: {\r\n        returnValue: true,\r\n        overrideContents,\r\n      } satisfies DialogRoutingState,\r\n    });\r\n  }\r\n\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { Feature } from '../../../features/models/feature.model';\r\nimport { IdFieldParams } from '../../../shared/components/id-field/id-field.models';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { FeaturesStatusParams } from './features-status.models';\r\n\r\n@Component({\r\n    selector: 'app-features-status',\r\n    templateUrl: './features-status.component.html',\r\n    styleUrls: ['./features-status.component.scss'],\r\n    imports: [\r\n        MatSlideToggleModule,\r\n        NgClass,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class FeaturesStatusComponent implements ICellRendererAngularComp {\r\n  value: boolean | null;\r\n  disabled: boolean;\r\n  tooltip: string;\r\n\r\n  private params: ICellRendererParams & FeaturesStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & FeaturesStatusParams & IdFieldParams<Feature>): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.disabled = params.isDisabled(params.data);\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params: ICellRendererParams & FeaturesStatusParams): boolean {\r\n    this.disabled = this.params.isDisabled(this.params.data);\r\n    return true;\r\n  }\r\n\r\n  toggle(): void {\r\n    const feature: Feature = this.params.data;\r\n    let nextValue: boolean;\r\n    switch (this.value) {\r\n      case false:\r\n        nextValue = null;\r\n        break;\r\n      case null:\r\n        nextValue = true;\r\n        break;\r\n      case true:\r\n        nextValue = false;\r\n        break;\r\n    }\r\n    this.value = nextValue;\r\n    this.params.onToggle(feature, nextValue);\r\n  }\r\n}\r\n","<mat-slide-toggle [checked]=\"value\" [tippy]=\"tooltip\" [disabled]=\"disabled\" (change)=\"toggle()\" [ngClass]=\"{\r\n  'toggle-false': value === false,\r\n  'toggle-null': value === null\r\n  }\">\r\n</mat-slide-toggle>\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { License } from '../models/license.model';\r\n\r\n@Pipe({\r\n  name: 'licensesOrder',\r\n})\r\nexport class LicensesOrderPipe implements PipeTransform {\r\n\r\n  transform(licenses: License[]): any {\r\n    if (!Array.isArray(licenses)) { return licenses; }\r\n\r\n    const sorted = [...licenses].sort((a: License, b: License) => {\r\n      if (a.Priority < b.Priority) {\r\n        return -1;\r\n      } else if (a.Priority > b.Priority) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return sorted;\r\n  }\r\n}\r\n","<mat-accordion multi>\r\n    @for (license of licenses() | licensesOrder; track trackLicenses($index, license)) {\r\n    <mat-expansion-panel #panel>\r\n      <mat-expansion-panel-header>\r\n        <mat-panel-title>\r\n          <mat-icon class=\"panel-icon\" [tippy]=\"license.IsEnabled ? 'License is active' : 'License is not active'\">{{\r\n            license.IsEnabled ? 'check_circle_outline' : 'cancel'\r\n          }}</mat-icon>\r\n          <div>\r\n            <div class=\"panel-title\">\r\n              <span>{{ license.Name }}</span>\r\n              <span class=\"active-features-count\">{{ license | activeFeaturesCount }}</span>\r\n              <span> {{ license.ExpWarningIcon }}</span>\r\n            </div>\r\n            <div class=\"panel-description\" [ngClass]=\"{ expanded: panel.expanded }\">\r\n              {{ license.Description }}\r\n            </div>\r\n          </div>\r\n        </mat-panel-title>\r\n      </mat-expansion-panel-header>\r\n      @if (panel.expanded) {\r\n        <ag-grid-angular\r\n          class=\"ag-theme-material\"\r\n          [rowData]=\"license.Features\"\r\n          [gridOptions]=\"gridOptions\"\r\n          appAgGridHeight\r\n          [itemsCount]=\"license.Features?.length\"\r\n        >\r\n        </ag-grid-angular>\r\n      }\r\n    </mat-expansion-panel>\r\n  }\r\n</mat-accordion>\r\n\r\n<mat-dialog-actions align=\"start\">\r\n  <button mat-button class=\"eav-button__with-icon\" tippy=\"Registration\" (click)=\"openRegistration()\">\r\n    <mat-icon class=\"eav-icon\">app_registration</mat-icon>\r\n    <span>Registration</span>\r\n  </button>\r\n</mat-dialog-actions>\r\n\r\n<router-outlet></router-outlet>\r\n","import { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\r\nimport { GridOptions, ModuleRegistry } from '@ag-grid-community/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { ChangeDetectorRef, Component, inject, linkedSignal, OnInit, signal, ViewContainerRef } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Router, RouterOutlet } from '@angular/router';\r\nimport { forkJoin } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { ExpirationExtension } from '../../features/expiration-extension';\r\nimport { FeatureState } from '../../features/models';\r\nimport { Feature } from '../../features/models/feature.model';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\nimport { License } from '../models/license.model';\r\nimport { FeaturesConfigService } from '../services/features-config.service';\r\nimport { ActiveFeaturesCountPipe } from './active-features-count.pipe';\r\nimport { AgGridHeightDirective } from './ag-grid-height.directive';\r\nimport { FeatureDetailsDialogComponent } from './feature-details-dialog/feature-details-dialog.component';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog/feature-details-dialog.models';\r\nimport { FeaturesListEnabledReasonComponent } from './features-list-enabled-reason/features-list-enabled-reason.component';\r\nimport { FeaturesListEnabledComponent } from './features-list-enabled/features-list-enabled.component';\r\nimport { FeaturesStatusComponent } from './features-status/features-status.component';\r\nimport { FeaturesStatusParams } from './features-status/features-status.models';\r\nimport { LicensesOrderPipe } from './licenses-order.pipe';\r\n\r\n@Component({\r\n  selector: 'app-license-info',\r\n  templateUrl: './license-info.component.html',\r\n  styleUrls: ['./license-info.component.scss'],\r\n  imports: [\r\n    MatExpansionModule,\r\n    MatIconModule,\r\n    NgClass,\r\n    SxcGridModule,\r\n    AgGridHeightDirective,\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    RouterOutlet,\r\n    LicensesOrderPipe,\r\n    ActiveFeaturesCountPipe,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class LicenseInfoComponent implements OnInit {\r\n  gridOptions = this.#buildGridOptions();\r\n\r\n  #featuresConfigSvc = transient(FeaturesConfigService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n  router = inject(Router);\r\n\r\n  #disabled = signal(false);\r\n  #refresh = signal(0);\r\n\r\n  licenses = linkedSignal<License[], License[]>({\r\n    source: this.#featuresConfigSvc.getLicensesLive(this.#refresh).value,\r\n    computation: (licenses, previous) => {\r\n\r\n      if (!licenses)\r\n        return previous?.value ?? [];\r\n\r\n      // Map/expand wie bisher\r\n      const expanded = licenses\r\n        .map(l => ({\r\n          ...ExpirationExtension.expandLicense(l),\r\n          Features: l.Features.map(f => ExpirationExtension.expandFeature(f)),\r\n        }));\r\n      return expanded;\r\n    }\r\n  });\r\n\r\n\r\n  constructor(\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    ModuleRegistry.registerModules([ClientSideRowModelModule]);\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.#dialogRouter.doOnDialogClosedWithData((data) => {\r\n      // Local Save, data not refreshing from Server \r\n      // Save the Data in Json, same als Toggle \r\n      if (data.objData) {\r\n        const featuresConfig: FeatureState = {\r\n          FeatureGuid: data.objData.guid,\r\n          Enabled: data.objData.enabled,\r\n          Configuration: {\r\n            LoadAppDetails: data.objData.LoadAppDetails,\r\n            LoadAppSummary: data.objData.LoadAppSummary,\r\n            LoadSystemDataDetails: data.objData.LoadSystemDataDetails,\r\n            LoadSystemDataSummary: data.objData.LoadSystemDataSummary,\r\n          }\r\n        }\r\n\r\n        this.#featuresConfigSvc.saveFeatures([featuresConfig]).subscribe(() => {\r\n          this.#refreshFn(100);    // Test, refresh Data from Server\r\n        });\r\n        //\r\n      } else  // Refresh from Server\r\n        this.#refreshFn(0);\r\n    });\r\n  }\r\n\r\n\r\n  #refreshFn(timer?: number): void {\r\n    setTimeout(() => {\r\n      this.#refresh.update(v => ++v);\r\n      this.#disabled.set(false);\r\n    }, timer);\r\n  }\r\n\r\n\r\n  trackLicenses(index: number, license: License): string {\r\n    return license.Guid;\r\n  }\r\n\r\n  openRegistration(): void {\r\n    const router = this.#dialogRouter.router;\r\n    router.navigate([router.url.replace('license', '') + \"/registration\"]);\r\n  }\r\n\r\n  #showFeatureDetails(feature: Feature): void {\r\n    const data: FeatureDetailsDialogData = {\r\n      feature,\r\n      showGuid: true,\r\n      showStatus: true,\r\n    };\r\n    this.matDialog.open(FeatureDetailsDialogComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '600px',\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  #toggleFeature(feature: Feature, enabled: boolean): void {\r\n    this.#disabled.set(true);\r\n    const state: FeatureState = {\r\n      FeatureGuid: feature.guid,\r\n      Enabled: enabled,\r\n    };\r\n    forkJoin([this.#featuresConfigSvc.saveFeatures([state])]).subscribe({\r\n      next: () => this.#refreshFn(100),\r\n      error: () => this.#refreshFn(100)\r\n    });\r\n  }\r\n\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  #routeAddItem(contentType: Feature): string {\r\n    return convertFormToUrl({\r\n      items: [EditPrep.newFromType(contentType.configurationContentType)],\r\n    } satisfies EditForm);\r\n  }\r\n\r\n  // Note: @SDV\r\n  // I think this should serve as a good example of how to use the grid\r\n  // 1. eg. with cellDefaults and similar initial objects containing most commonly used options here\r\n  // 2. Also we should probably never add a valueGetter for the simple properties\r\n  // ...not sure why it's even in here, my guess is copy-paste of code which wasn't understood properly\r\n  // 3. I think the header-name should always be the first line, then the field\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.TextWideMin100,\r\n          headerName: 'ID',\r\n          field: 'nameId',\r\n          width: 200,\r\n          cellClass: 'no-outline',\r\n          cellRenderer: IdFieldComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<Feature> = {\r\n              tooltipGetter: (feature: Feature) => feature.nameId,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideMin100,\r\n          headerName: 'Name',\r\n          field: 'name',\r\n          cellClass: [...'primary-action highlight'.split(' '), 'no-outline'],\r\n          onCellClicked: (params) => {\r\n            this.#showFeatureDetails(params.data as Feature);\r\n          },\r\n        },\r\n        {\r\n\r\n          headerName: 'Enabled',\r\n          field: 'isEnabled',\r\n          width: 82,\r\n          cellClass: 'no-outline',\r\n          headerClass: 'dense',\r\n          sortable: true,\r\n          filter: BooleanFilterComponent,\r\n          cellRenderer: FeaturesListEnabledComponent,\r\n          cellRendererParams: ({\r\n            addItemUrlTest: (ct) => this.#urlTo(`edit/${this.#routeAddItem(ct)}`),\r\n          } satisfies FeaturesListEnabledComponent[\"params\"]),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextNarrow,\r\n          headerName: 'Reason',\r\n          field: 'enabledReason',\r\n          cellRenderer: FeaturesListEnabledReasonComponent,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          headerName: 'Expiration',\r\n          field: 'ExpMessage',\r\n          sortable: false,\r\n          width: 80,\r\n          tooltipValueGetter: (p) => (p.data as Feature & ExpirationExtension)?.expiration,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight6,\r\n          cellClass: 'no-outline',\r\n          headerName: '',\r\n          field: 'enabledInConfiguration',\r\n          cellRenderer: FeaturesStatusComponent,\r\n          cellRendererParams: (() => {\r\n            const params: FeaturesStatusParams & IdFieldParams<Feature> = {\r\n              isDisabled: (feature) => !feature.isConfigurable || this.#disabled(),\r\n              onToggle: (feature, enabled) => this.#toggleFeature(feature, enabled),\r\n              tooltipGetter: (feature: Feature) => feature.isConfigurable ? \"Toggle off | default | on\" : \"This feature can't be configured\",\r\n            };\r\n            return params;\r\n          }),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","import { L as ListKeyManager } from './list-key-manager-C7tp3RbG.mjs';\n\nclass FocusKeyManager extends ListKeyManager {\n    _origin = 'program';\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\nexport { FocusKeyManager as F };\n","@if (feature()) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ feature().name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"feature().description | safeHtml\"></p>\r\n      <!-- Name ID -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">ID:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span (click)=\"clipboard.copyToClipboard(feature().nameId)\">{{ feature().nameId }}</span>\r\n        </div>\r\n      </div>\r\n      <!-- Status -->\r\n      @if (mySpecs().showStatus) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">{{ 'Features.Status' | translate }}:</div>\r\n          <div class=\"eav-info-row__value\">\r\n            <span>{{ (feature().isEnabled ? 'Features.Active' : 'Features.NotActive') | translate }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- GUID -->\r\n      @if (mySpecs().showGuid) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">GUID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span (click)=\"clipboard.copyToClipboard(feature().guid)\">{{ feature().guid }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- Security Rating -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Security Rating:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ feature().security.Impact + ': ' + feature().security.Message }}</span>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <a [href]=\"feature().link\" target=\"_blank\" mat-raised-button class=\"eav-card-action-button\" color=\"accent\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n        Find out more\r\n      </a>\r\n      @if (mySpecs().showClose != false) {\r\n        <button mat-raised-button class=\"eav-card-action-button\" (click)=\"dialog.close()\">Close</button>\r\n      }\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, Inject, input, Optional } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core/transient';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { computedObj } from '../../../shared/signals/signal.utilities';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\n\r\n@Component({\r\n    selector: 'app-feature-details-dialog',\r\n    templateUrl: './feature-details-dialog.component.html',\r\n    imports: [\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        SafeHtmlPipe,\r\n        TranslateModule,\r\n    ]\r\n})\r\nexport class FeatureDetailsDialogComponent {\r\n  specs = input<FeatureDetailsDialogData>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_DIALOG_DATA) private dialogSpecs: FeatureDetailsDialogData,\r\n    protected dialog: MatDialogRef<FeatureDetailsDialogComponent>,\r\n  ) { }\r\n\r\n  protected mySpecs = computedObj('mySpecs', () =>  this.specs() ?? this.dialogSpecs );\r\n  protected feature = computedObj('feature', () => this.mySpecs()?.feature);\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe((data: unknown) => {\r\n        l.a('Dialog closed', { data });\r\n        return callback();\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  public doOnDialogClosedWithData(callback: (data: any) => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.#childDialogClosedWithData().subscribe(({ state }) => {\r\n        l.a('Dialog closed', { state });\r\n        callback(state);\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n  #childDialogClosedWithData() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      tap(event => {\r\n        const l = this.log.fn(\"childDialogClosed$\", {\r\n          event,\r\n          firstChild: this.route.snapshot.firstChild,\r\n          snapShot: this.route.snapshot,\r\n          state: this.router.getCurrentNavigation()?.extras.state,\r\n        });\r\n        l.a('NavigationEnd', { event });\r\n        l.end();\r\n      }),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => ({\r\n        hasChildNow: !!this.route.snapshot.firstChild,\r\n        state: this.router.getCurrentNavigation()?.extras.state,\r\n      })),\r\n      pairwise(),\r\n      filter(([prev, curr]) => prev.hasChildNow && !curr.hasChildNow),\r\n      map(([prev, curr]) => ({\r\n        hadChildBefore: prev.hasChildNow,\r\n        hasChildNow: curr.hasChildNow,\r\n        state: curr.state\r\n      }))\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[1,15]}