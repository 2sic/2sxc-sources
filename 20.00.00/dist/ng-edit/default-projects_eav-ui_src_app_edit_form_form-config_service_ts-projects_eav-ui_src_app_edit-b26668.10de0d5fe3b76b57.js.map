{"version":3,"file":"default-projects_eav-ui_src_app_edit_form_form-config_service_ts-projects_eav-ui_src_app_edit-b26668.10de0d5fe3b76b57.js","mappings":"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","names":["InputTypeCatalog","BooleanDefault","BooleanTristate","CustomDefault","CustomGps","CustomJsonEditor","DateTimeDefault","DefaultSuffix","EmptyDefault","EmptyEnd","EmptyMessage","EntityContentBlocks","EntityDefault","EntityQuery","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","NumberDefault","NumberDropdown","StringDefault","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","StringWysiwyg","EntityPicker","StringPicker","NumberPicker","Unknown","ArrayHelpers","toggleInArray","item","array","index","indexOf","push","splice","FieldState","constructor","name","config","group","settings","basics","ui","uiValue","translationState","isOpen","pickerData","featuresSvc","injectorForEffects","this","#reqFeaturesMy","signalObj","#reqFeaturesFromSettings","setting","requiredFeatures","computedObj","merged","Array","from","Set","#pickerData","effect","reqFeaturesFromSettings","length","feature","requireFeature","injector","Error","settingExt","current","includes","set","FormConfigService","log","classLog","configSignal","signal","context","inject","Context","languageService","FormLanguageService","initFormConfig","dialogContext","formId","isParentDialog","itemGuids","createMode","isCopy","enableHistory","languages","initial","Language","Current","primary","Primary","list","List","zoneId","appId","appRoot","App","Url","appSharedRoot","SharedUrl","moduleId","toString","partOfPage","sessionStorage","getItem","keyPartOfPage","partOfPageDefault","portalRoot","Site","tabId","systemRoot","window","location","pathname","split","versioningOptions","getVersioningOptions","keyPublishing","enableFormulaSave","Enable","FormulaSave","removeEditRestrictions","OverrideEditRestrictions","language","getSignal","publishing","allowAll","show","hide","branch","publish","console","error","language$","_language$","getLanguage$","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_3__","jDH","factory","ɵfac","ContentTypeSettingsHelpers","getDefaultSettings","reader","contentType","itemHeader","defaultSettings","flatten","Metadata","Description","EditInstructions","Features","Label","ListInstructions","Notes","Icon","Link","_itemTitle","getTitle","_slotCanBeEmpty","IsEmptyAllowed","_slotIsEmpty","IsEmpty","type","find","metadata","Type","Name","label","FieldReader","Attributes","currentOrDefault","value","FileTypeHelpers","defaultIcon","customExtensions","doc","docx","xls","xlsx","ppt","pptx","pdf","mp3","avi","mpg","mpeg","mov","mp4","zip","rar","txt","html","css","xml","xsl","matExtensions","vcf","getExtension","filename","substring","lastIndexOf","toLocaleLowerCase","getIconClass","ext","isKnownType","isImage","isImgRegex","test","FieldDefaults","inputType","getDefaultOrPrefillValue","onlyPrefill","l","fn","prefillRaw","Prefill","undefined","rNull","defaultValue","DefaultValue","values","toLowerCase","Date","toJSON","isNaN","Number","replace","guids","map","guid","trim","JSON","stringify","startsWith","parse","SanitizeHelper","removeFromStart","sanitized","charToRemove","removeFromEnd","cleanBadPath","goodChar","sanitizePath","sanitizeName","SignalStoreBase","#cache","#list","Object","getId","id","sanitizeAdd","#itemSignalsCache","ComputedCacheHelper","a","cache","add","end","addMany","items","result","reduce","acc","update","before","get","newItem","n","remove","_","updatedStore","clearCache","getAll","getMany","ids","filter","r","getOrCreateWithInfo","isNew","getManySignal","sig","getAllSignal","logSpecs","getReader","getLanguage","getReaderSignal","SignalStoreObservableBase","super","FormLanguage","empty","#entityReaderCache","#signalsHideHeaderCache","addForm","hideHeader","setCurrent","newLanguage","getEntityReader","fnIf","EntityReader","rSilent","cache$","pipe","languageInstances","mapUntilChanged","m","shareReplay","getHideHeaderSignal","getOrCreate","updateHideHeader","_angular_core__WEBPACK_IMPORTED_MODULE_8__","providedIn","all","initSignal","watchAllFields","FieldsFindNoPrefix","FieldUnwrap","FieldMask","ServiceBase","#fieldState","#formConfig","#controls","controls","#fieldConfig","#requirePrefix","#maskSignal","#mask","computed","#fieldsUsedInMask","#extractFieldNames","initPreClean","overloadPreCleanValues","preClean","init","mask","requirePrefix","extendName","#updateMaskFinal","logChanges","enabled","#watchAllFields","#onChange","#process","hasPlaceholders","lowercaseInsideSquareBrackets","entityGuid","entityId","dataPlaceholders","data","forEach","e","i","replaceValue","cleaned","matches","match","token","key","maybeNew","f","c","subscriptions","valueChanges","subscribe","i0","field","#noData","#field","#language","#values","Values","ofLanguage","bothPrimary","currentOrDefaultOrAny","val","DimensionReader","dimensions","hasCurrent","hasPrimary","d","dimCode","hasCurrentReadonly","hasCurrentReadOnly","hasEditableValues","#valuesEditableOf","countEditable","countEditableWithContents","v","hasCurrentWrite","currentEditable","dimension","x","isEditableOrReadonlyTranslationExist","distinctUntilChanged","mapUntilObjChanged","isEqual","PagePickerComponent_Conditional_12_For_2_ng_container_0_Template","pageAndChildren_r3","_c0","page_r2","PagePickerComponent_Conditional_12_For_2_Template","ctx_r3","tree","page_r6","path","_r5","$implicit","select","PagePickerComponent_Conditional_13_For_3_Conditional_6_Template","PagePickerComponent_Conditional_13_For_3_Conditional_10_Template","PagePickerComponent_Conditional_13_For_3_Conditional_11_Template","selected","isNavigation","isClickable","PagePickerComponent_Conditional_13_Conditional_1_Template","PagePickerComponent_Conditional_13_For_3_Template","filteredSearch","_r8","page_r9","page","toggle","toggled","PagePickerComponent_ng_template_14_Conditional_12_For_2_ng_container_0_Template","child_r10","PagePickerComponent_ng_template_14_Conditional_12_For_2_Template","children","PagePickerComponent_ng_template_14_Conditional_2_Template","PagePickerComponent_ng_template_14_Conditional_3_Template","_r7","PagePickerComponent_ng_template_14_Conditional_10_Template","PagePickerComponent_ng_template_14_Conditional_11_Template","PagePickerComponent_ng_template_14_Conditional_12_Template","isVisible","PagePickerComponent","dialogData","dialog","translate","filterText","searchItems","queryService","transient","QueryService","ngOnInit","parseSelectedPageId","fetchPages","setFilter","confirm","instant","closeDialog","pageId","close","stream","getFromQuery","next","pages","buildPageSearch","Path","slice","join","Id","IsNavigation","IsClickable","buildPageTree","parentId","ParentId","parent","prefix","fieldValue","fieldName","parseInt","MAT_DIALOG_DATA","i1","i2","debug_node_JnOYh9kg","VBU","selectors","decls","vars","consts","template","rf","ctx","$event","_r1","PagePickerComponent_Conditional_12_Template","PagePickerComponent_Conditional_13_Template","PagePickerComponent_ng_template_14_Template","MatFormFieldModule","i3","MatInputModule","i4","FormsModule","i5","NgTemplateOutlet","NgClass","MatIconModule","i6","MatDialogActions","TranslateModule","TippyDirective","styles","PagePicker","open","matDialog","viewContainerRef","changeDetectorRef","callback","autoFocus","height","width","afterClosed","take","markForCheck","original","diffCurrent","currentRO","#cache$","toObservable","#list$","list$","getList$","getMany$","obj","getBestValue","attributeValues","metadataItems","isArray","entries","currentValues","itemAttributes"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./projects/eav-ui/src/app/shared/helpers/array.helpers.ts","./projects/eav-ui/src/app/edit/fields/field-state.ts","./projects/eav-ui/src/app/edit/form/form-config.service.ts","./projects/eav-ui/src/app/edit/state/fields-settings.helpers.ts","./projects/eav-ui/src/app/edit/shared/adam/file-type.helpers.ts","./projects/eav-ui/src/app/edit/shared/input-types/input-field.helpers.ts","./projects/eav-ui/src/app/edit/shared/helpers/sanitize.helper.ts","./projects/eav-ui/src/app/edit/shared/store/signal-store-base.ts","./projects/eav-ui/src/app/edit/form/form-language.service.ts","./projects/eav-ui/src/app/edit/shared/helpers/field-mask.helper.ts","./projects/eav-ui/src/app/edit/localization/field-reader.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.component.html","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.component.ts","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.helpers.ts","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.helper.ts","./projects/eav-ui/src/app/edit/form/form-languages.model.ts","./projects/eav-ui/src/app/edit/localization/dimension-reader.ts","./projects/eav-ui/src/app/edit/shared/store/signal-store-observable-base.ts","./projects/eav-ui/src/app/edit/shared/helpers/entity-reader.ts"],"sourcesContent":["export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","export class ArrayHelpers {\r\n  /**\r\n   * Toggles an item in an array. If the item is not in the array, it is added. If it is in the array, it is removed.\r\n   * @param item The item to toggle\r\n   * @param array The array to toggle the item in\r\n   */\r\n  static toggleInArray<T>(item: T, array: T[]): T[] {\r\n    const index = array.indexOf(item);\r\n    if (index === -1) {\r\n      array.push(item);\r\n    } else {\r\n      array.splice(index, 1);\r\n    }\r\n    return array;\r\n  }\r\n\r\n  // probably better: Array.from(new Set(merged));\r\n  // static distinct<T extends unknown>(array: T[]): T[] {\r\n  //   return array.filter(onlyUnique);\r\n  // }\r\n\r\n}\r\n\r\n// function onlyUnique<T extends unknown>(value: T, index: number, array: T[]): boolean {\r\n//   return array.indexOf(value) === index;\r\n// }","import { effect, Injector, Signal } from '@angular/core';\r\nimport { UntypedFormGroup } from '@angular/forms';\r\nimport { Of } from '../../../../../core';\r\nimport { BasicControlSettings } from '../../../../../edit-types/src/BasicControlSettings';\r\nimport { FieldSettings } from '../../../../../edit-types/src/FieldSettings';\r\nimport { FieldValue } from '../../../../../edit-types/src/FieldValue';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { computedObj, signalObj } from '../../shared/signals/signal.utilities';\r\nimport { TranslationState } from '../localization/translate-state.model';\r\nimport { UiControl } from '../shared/controls/ui-control';\r\nimport { FieldConfigSet } from './field-config-set.model';\r\nimport { PickerData } from './picker/picker-data';\r\n\r\n/**\r\n * This is provided / injected at the fields-builder for every single field.\r\n * So any control or service within that field, which requests this service, will get one containing exactly that fields.\r\n */\r\nexport class FieldState<TValue extends FieldValue = FieldValue, TSettings extends FieldSettings = FieldSettings> {\r\n  constructor(\r\n    /** The fields technical name to access settings etc. */\r\n    public name: string,\r\n\r\n    /** Field configuration, incl. a lot of unchanging values and access to adam, dropzone etc. */\r\n    public config: FieldConfigSet,\r\n\r\n    /** The form group containing the field - rarely relevant, as you should use the control in most cases */\r\n    public group: UntypedFormGroup,\r\n\r\n    // TODO: @2pp try to find out where this is used just to create a signal for a property\r\n    /** The settings as a signal - use this for most cases */\r\n    public settings: Signal<TSettings>,\r\n\r\n    /** The basic settings - use this for most cases as it will change less than the settings signal */\r\n    public basics: Signal<BasicControlSettings>,\r\n\r\n    /**\r\n     * The UI control (actually it's the virtual UI control), since it's a reactive form control.\r\n     * Note: e just introduced uiValue below, which should be used in most cases\r\n     */\r\n    public ui: Signal<UiControl>,\r\n\r\n    /** The value of the field in the UI control as a signal */\r\n    public uiValue: Signal<TValue>,\r\n\r\n    public translationState: Signal<TranslationState>,\r\n\r\n    /** Signal if a dialog (popup) of this field is open, like a hyperlink-dialog */\r\n    public isOpen: Signal<boolean>,\r\n\r\n    pickerData: PickerData,\r\n\r\n    featuresSvc: FeaturesService,\r\n\r\n    injectorForEffects: Injector,\r\n  ) {\r\n    this.#pickerData = pickerData;\r\n\r\n    // Required Features Transfer\r\n    effect(() => {\r\n      const reqFeaturesFromSettings = this.requiredFeatures();\r\n      if (reqFeaturesFromSettings.length == 0)\r\n        return;\r\n      for (const feature of reqFeaturesFromSettings)\r\n        featuresSvc.requireFeature(feature, `Used in field ${this.name}`);\r\n    }, { injector: injectorForEffects });\r\n\r\n  }\r\n\r\n  /**\r\n   * Picker Data - will throw an error if accessed on a field which doesn't have PickerData\r\n   * @readonly\r\n   * @type {PickerData}\r\n   */\r\n  get pickerData(): PickerData {\r\n    if (this.#pickerData)\r\n      return this.#pickerData;\r\n    throw new Error(`PickerData was not initialized for the field: ${this.name}`);\r\n  }\r\n  #pickerData: PickerData;\r\n\r\n  /**\r\n   * Cool helper to just get a single value-signal from the settings.\r\n   * It will automatically\r\n   * - ensure that you only use valid keys\r\n   * - return a signal with that name\r\n   * - the signal will be correctly typed as the setting value is typed\r\n   * @param name property name of a FieldSettings\r\n   * @returns the signal for that property, with isEqual change detection and name\r\n   */\r\n  setting<K extends keyof FieldSettings>(name: K): Signal<FieldSettings[K]> {\r\n    return computedObj(name as string, () => this.settings()[name]);\r\n  }\r\n\r\n  settingExt<K extends keyof TSettings>(name: K): Signal<TSettings[K]> {\r\n    return computedObj(name as string, () => this.settings()[name]);\r\n  }\r\n\r\n  // settingExt<TSet extends FieldSettings, K extends keyof TSet>(name: K): Signal<TSet[K]> {\r\n  //   return computedObj(name as string, () => (this.settings() as unknown as TSet)[name]);\r\n  // }\r\n\r\n  //#region Required Features\r\n\r\n  #reqFeaturesMy = signalObj<Of<typeof FeatureNames>[]>('requiredFeatures', []);\r\n  #reqFeaturesFromSettings = this.setting('requiredFeatures');\r\n\r\n  requiredFeatures = computedObj('requiredFeatures', () => {\r\n    const merged = [\r\n      ...this.#reqFeaturesMy(),\r\n      ...this.#reqFeaturesFromSettings() ?? [],\r\n    ];\r\n    // make distinct\r\n    return Array.from(new Set(merged));\r\n  });\r\n\r\n  requireFeature(feature: Of<typeof FeatureNames>) {\r\n    const current = this.#reqFeaturesMy();\r\n    if (!current.includes(feature))\r\n      this.#reqFeaturesMy.set([...current, feature]);\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","import { Injectable, Signal, inject, signal } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DialogContext } from '../../app-administration/models';\r\nimport { keyPartOfPage, keyPublishing, partOfPageDefault } from '../../shared/constants/session.constants';\r\nimport { classLog } from '../../shared/logging';\r\nimport { Context } from '../../shared/services/context';\r\nimport { EditSettings } from '../dialog/main/edit-dialog-main.models';\r\nimport { FormConfiguration, VersioningOptions } from './form-configuration.model';\r\nimport { FormLanguageService } from './form-language.service';\r\nimport { FormLanguageComplete, FormLanguagesConfig } from './form-languages.model';\r\n\r\n/**\r\n * Service which tell us about a single edit-form configuration.\r\n * It contains multiple entities.\r\n *\r\n * Things such as language, IDs shown on it, edit-settings etc.\r\n */\r\n@Injectable()\r\nexport class FormConfigService {\r\n  \r\n  log = classLog({FormConfigService});\r\n  \r\n  /** no constructor */\r\n  constructor() { }\r\n\r\n  /**\r\n   * Important! These are constants that form was loaded with.\r\n   * They are initialized in the main edit-form.\r\n   * They do not change while form is running\r\n   */\r\n  config: FormConfiguration;\r\n\r\n  // WIP, null at first\r\n  configSignal = signal<FormConfiguration>(null);\r\n\r\n  /**\r\n   * Current form language information\r\n   */\r\n  language: Signal<FormLanguageComplete>;\r\n\r\n  /**\r\n   * Current edit settings\r\n   * Note: Clean use - only used by classes that inject this themselves\r\n   */\r\n  settings: EditSettings;\r\n\r\n  /**\r\n   * Form language configuration, not meant to change during runtime...\r\n   */\r\n  languages: FormLanguagesConfig;\r\n\r\n  /** Used to fetch form data and fill up eavConfig. Do not use anywhere else */\r\n  private context = inject(Context);\r\n  private languageService = inject(FormLanguageService);\r\n\r\n  /** Create EavConfiguration from sessionStorage */\r\n  initFormConfig(\r\n    dialogContext: DialogContext,\r\n    formId: number,\r\n    isParentDialog: boolean,\r\n    itemGuids: string[],\r\n    createMode: boolean,\r\n    isCopy: boolean,\r\n    enableHistory: boolean,\r\n    settings: EditSettings\r\n  ) {\r\n    this.settings = settings;\r\n    this.languages = {\r\n      initial: dialogContext.Language.Current,\r\n      primary: dialogContext.Language.Primary,\r\n      list: dialogContext.Language.List,\r\n    };\r\n    this.config = {\r\n      zoneId: this.context.zoneId,\r\n      appId: this.context.appId,\r\n      appRoot: dialogContext.App.Url,\r\n      appSharedRoot: dialogContext.App.SharedUrl,\r\n      moduleId: this.context.moduleId?.toString(),\r\n      partOfPage: sessionStorage.getItem(keyPartOfPage) ?? partOfPageDefault,\r\n      portalRoot: dialogContext.Site.Url,\r\n      tabId: this.context.tabId?.toString(),\r\n      systemRoot: window.location.pathname.split('/dist/')[0] + '/',\r\n      versioningOptions: this.getVersioningOptions(\r\n        sessionStorage.getItem(keyPartOfPage) === 'true',\r\n        sessionStorage.getItem(keyPublishing)\r\n      ),\r\n      formId,\r\n      isParentDialog,\r\n      itemGuids,\r\n      createMode,\r\n      isCopy,\r\n      enableHistory,\r\n      enableFormulaSave: dialogContext.Enable.FormulaSave ?? false,\r\n      removeEditRestrictions: dialogContext.Enable.OverrideEditRestrictions ?? false,\r\n      dialogContext,\r\n      settings,\r\n    };\r\n    this.configSignal.set(this.config);\r\n    this.language = this.languageService.getSignal(this.config.formId);\r\n  }\r\n\r\n  private getVersioningOptions(\r\n    partOfPage: boolean,\r\n    publishing: string\r\n  ): VersioningOptions {\r\n\r\n    const allowAll: VersioningOptions = { show: true, hide: true, branch: true };\r\n\r\n    if (!partOfPage)\r\n      return allowAll;\r\n\r\n    const publish = publishing || '';\r\n    switch (publish) {\r\n      case '':\r\n      case 'DraftOptional':\r\n        return allowAll;\r\n      case 'DraftRequired':\r\n        // Note: the key 'show' should not be added, as the code later picks the first property to set the default\r\n        // Branch should also be first, as it's the preferred option\r\n        return { branch: true, hide: true };\r\n      case 'DraftForbidden':\r\n        return { show: true };\r\n      default: {\r\n        console.error(`Invalid versioning requirements: ${publish}`);\r\n        return {};\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the language observable for the form - it will keep track of the current language as it changes.\r\n   */\r\n  get language$(): Observable<FormLanguageComplete> {\r\n    return this._language$ ??= this.languageService.getLanguage$(this.config.formId);\r\n  }\r\n  private _language$: Observable<FormLanguageComplete>;\r\n\r\n}\r\n","import { ItemIdentifierEditConfig } from '../../shared/models/edit-form.model';\r\nimport { FormLanguage } from '../form/form-languages.model';\r\nimport { FieldReader } from '../localization/field-reader';\r\nimport { EntityReader } from '../shared/helpers';\r\nimport { EavContentType } from '../shared/models/eav';\r\nimport { ContentTypeSettings } from './content-type-settings.model';\r\n\r\nexport class ContentTypeSettingsHelpers {\r\n\r\n  /**\r\n   * Initialize the default settings of a ContentType to ensure everything is set or empty-string etc.\r\n   * @returns \r\n   */\r\n  static getDefaultSettings(reader: EntityReader, contentType: EavContentType, itemHeader: ItemIdentifierEditConfig): ContentTypeSettings {\r\n    const metadata = reader.flatten<ContentTypeSettings>(contentType.Metadata);\r\n    const defaultSettings = { ...metadata };\r\n    defaultSettings.Description ??= '';\r\n    defaultSettings.EditInstructions ??= '';\r\n    defaultSettings.Features ??= '';\r\n    defaultSettings.Label ??= '';\r\n    defaultSettings.ListInstructions ??= '';\r\n    defaultSettings.Notes ??= '';\r\n    defaultSettings.Icon ??= '';\r\n    defaultSettings.Link ??= '';\r\n    defaultSettings._itemTitle = this.getTitle(contentType, reader);\r\n    defaultSettings._slotCanBeEmpty = itemHeader.IsEmptyAllowed ?? false;\r\n    defaultSettings._slotIsEmpty = itemHeader.IsEmpty ?? false;\r\n    return defaultSettings;\r\n  }\r\n\r\n  static getTitle(contentType: EavContentType, language: FormLanguage): string {\r\n    try {\r\n      // xx ContentType is a historic bug and should be fixed when JSONs are rechecked\r\n      const type = contentType.Metadata.find(metadata => metadata.Type.Name === 'ContentType' || metadata.Type.Name === 'xx ContentType');\r\n      let label = (type)\r\n        ? new FieldReader(type.Attributes.Label, language).currentOrDefault?.value\r\n        : null;\r\n      label = label || contentType.Name;\r\n      return label;\r\n    } catch (error) {\r\n      return contentType.Name;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n","export class FileTypeHelpers {\r\n  private static defaultIcon = 'file';\r\n  private static customExtensions: Record<string, string> = {\r\n    doc: 'file-word',\r\n    docx: 'file-word',\r\n    xls: 'file-excel',\r\n    xlsx: 'file-excel',\r\n    ppt: 'file-powerpoint',\r\n    pptx: 'file-powerpoint',\r\n    pdf: 'file-pdf',\r\n    mp3: 'file-audio',\r\n    avi: 'file-video',\r\n    mpg: 'file-video',\r\n    mpeg: 'file-video',\r\n    mov: 'file-video',\r\n    mp4: 'file-video',\r\n    zip: 'file-archive',\r\n    rar: 'file-archive',\r\n    txt: 'file-text',\r\n    html: 'file-code',\r\n    css: 'file-code',\r\n    xml: 'file-code',\r\n    xsl: 'file-code',\r\n  };\r\n  private static matExtensions: Record<string, string> = {\r\n    vcf: 'person',\r\n  };\r\n\r\n  static getExtension(filename: string) {\r\n    return filename.substring(filename.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n  }\r\n\r\n  static getIconClass(filename: string) {\r\n    const ext = this.getExtension(filename);\r\n    return this.matExtensions[ext] || this.customExtensions[ext] || this.defaultIcon;\r\n  }\r\n\r\n  static isKnownType(filename: string) {\r\n    return this.matExtensions[this.getExtension(filename)] != null;\r\n  }\r\n\r\n  static isImage(filename: string) {\r\n    return this.isImgRegex().test(filename);\r\n  }\r\n\r\n  private static isImgRegex() {\r\n    return /(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*\\.(?:jpg|jpeg|gif|png|webp))(?:\\?([^#]*))?(?:#(.*))?/i;\r\n  }\r\n}\r\n","import { Of } from '../../../../../../core';\r\nimport { FieldSettings } from '../../../../../../edit-types/src/FieldSettings';\r\nimport { FieldValue } from '../../../../../../edit-types/src/FieldValue';\r\nimport { InputTypeCatalog } from '../../../shared/fields/input-type-catalog';\r\nimport { classLog } from '../../../shared/logging';\r\nimport { ItemIdentifierShared } from '../../../shared/models/edit-form.model';\r\n\r\n/**\r\n * Get the field initial / default value, incl. the prefilled value if available.\r\n */\r\nexport class FieldDefaults {\r\n\r\n  log = classLog({FieldDefaults});\r\n\r\n  constructor(\r\n    private name: string,\r\n    private inputType: Of<typeof InputTypeCatalog>,\r\n    private settings: FieldSettings,\r\n    private itemHeader?: Pick<ItemIdentifierShared, \"Prefill\">,\r\n  ) { }\r\n\r\n  /** Include itemHeader if you need data from prefill, and set onlyPrefill if you only need parsed prefill */\r\n  getDefaultOrPrefillValue(onlyPrefill?: boolean): FieldValue {\r\n\r\n    const inputType = this.inputType;\r\n    const name = this.name;\r\n    const settings = this.settings;\r\n    const itemHeader = this.itemHeader;\r\n    const l = this.log.fn('parseDefaultValue', { name, inputType, settings, itemHeader, onlyPrefill });\r\n\r\n    const prefillRaw = itemHeader?.Prefill?.[name];\r\n    if (onlyPrefill && prefillRaw === undefined)\r\n      return l.rNull('only prefill, but no prefill data found');\r\n\r\n    let defaultValue = prefillRaw?.toString() ?? settings.DefaultValue;\r\n\r\n    l.values({ defaultValue });\r\n\r\n    switch (inputType) {\r\n      case InputTypeCatalog.BooleanDefault:\r\n        return defaultValue?.toLowerCase() === 'true';\r\n      case InputTypeCatalog.BooleanTristate:\r\n        return defaultValue != null && defaultValue !== ''\r\n          ? defaultValue.toLowerCase() === 'true'\r\n          : null;\r\n      case InputTypeCatalog.DateTimeDefault:\r\n        return defaultValue != null && defaultValue !== ''\r\n          ? new Date(defaultValue).toJSON()\r\n          : null;\r\n      case InputTypeCatalog.NumberDefault:\r\n      case InputTypeCatalog.NumberDropdown:\r\n      case InputTypeCatalog.NumberPicker:\r\n        return defaultValue != null && defaultValue !== ''\r\n          ? !isNaN(Number(defaultValue)) ? Number(defaultValue) : null\r\n          : null;\r\n      case InputTypeCatalog.EntityDefault:\r\n      case InputTypeCatalog.EntityQuery:\r\n      case InputTypeCatalog.EntityContentBlocks:\r\n      case InputTypeCatalog.EntityPicker:\r\n        // Empty - return []\r\n        if (defaultValue == null || defaultValue === '')\r\n          return [];\r\n\r\n        // string has { } characters, we must switch them to quotes for parsing below\r\n        // 2024-06-01 2dm not sure why this is an option..., maybe some interim encoding?\r\n        if (defaultValue.includes('{'))\r\n          defaultValue = defaultValue.replace(/[\\{\\}]/g, '\\\"');\r\n\r\n        // list but no array, add brackets\r\n        if (defaultValue.includes(',') && !defaultValue.includes('[')) {\r\n          const guids = defaultValue.split(',').map(guid => guid.trim());\r\n          defaultValue = JSON.stringify(guids);\r\n        }\r\n\r\n        // Finally parse\r\n        return defaultValue.startsWith('[') // an array with guid strings\r\n          ? JSON.parse(defaultValue) // if it's a string containing an array\r\n          : [defaultValue.replace(/\"/g, '')]; // just a guid string, but might have quotes\r\n      default:\r\n        return defaultValue ?? '';\r\n    }\r\n  }\r\n}\r\n","export class SanitizeHelper {\r\n\r\n  private static removeFromStart(sanitized: string, charToRemove: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(0, 1) === charToRemove) {\r\n      sanitized = sanitized.substring(1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private static removeFromEnd(sanitized: string, charToRemove: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(sanitized.length - 1, sanitized.length) === charToRemove) {\r\n      sanitized = sanitized.substring(0, sanitized.length - 1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private static cleanBadPath(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    const goodChar = '_';\r\n    const illegalRe = /[\\?<>\\\\:\\*\\|\":]/g;\r\n    const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\r\n    const reservedRe = /^\\.+$/;\r\n    const windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\r\n    const windowsTrailingRe = /[\\. ]+$/;\r\n    return sanitized\r\n      .replace(illegalRe, goodChar)\r\n      .replace(controlRe, goodChar)\r\n      .replace(reservedRe, goodChar)\r\n      .replace(windowsReservedRe, goodChar)\r\n      .replace(windowsTrailingRe, goodChar);\r\n  }\r\n\r\n  // sanitize path\r\n  static sanitizePath(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // remove slashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\/');\r\n\r\n    // remove slashed form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\/');\r\n\r\n    // remove backslashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\\\');\r\n\r\n    // remove backslashes form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\\\');\r\n\r\n    // replace bad\r\n    sanitized = this.cleanBadPath(sanitized);\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  // sanitize file or folder name\r\n  static sanitizeName(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // in addition to all path validation rules\r\n    // slashes are not valid in file or folder name\r\n    const replacement = '_';\r\n    const illegalRe = /\\//g;\r\n    return this.sanitizePath(sanitized).replace(illegalRe, replacement);\r\n  }\r\n}\r\n","import { Signal } from '@angular/core';\r\nimport { ComputedCacheHelper } from '../../../shared/signals/computed-cache';\r\nimport { computedObj, signalObj } from '../../../shared/signals/signal.utilities';\r\nimport { classLog, ClassLogger } from '../../../shared/logging';\r\n\r\n/**\r\n * Signal based store for any kind of data which is accessed by a key.\r\n * - The data type is generic.\r\n * - The key type can be customized.\r\n * - Standard get/add/remove methods exist, and can be augmented by the inheriting store.\r\n */\r\nexport abstract class SignalStoreBase<TKey extends string | number, TValue> {\r\n  \r\n  protected log: ClassLogger;\r\n\r\n  constructor(log: ClassLogger) {\r\n    this.log = log ?? classLog({SignalStoreBase});\r\n    this.log.a('SignalStoreBase created');\r\n    this.name = this.log.name;\r\n  }\r\n  \r\n  /** Main Cache */\r\n  #cache = signalObj<Record<TKey, TValue>>('cache', {} as Record<TKey, TValue>);\r\n\r\n  /** Cached version of the list, with the latest object-values */\r\n  #list = computedObj('list', () => Object.values(this.#cache()) as TValue[]);\r\n\r\n  /** Cache for the inheriting classes, but as read-only */\r\n  protected get cache(): Signal<Record<TKey, TValue>> { return this.#cache; }\r\n\r\n  /** List for the inheriting classes, but as read-only */\r\n  protected get list(): Signal<TValue[]> { return this.#list; }\r\n\r\n  /**\r\n   * Function to get the key / id for storing in the cache.\r\n   * Default is to get the 'id' property of the item.\r\n   * This should be overriden in the inheriting class.\r\n   */\r\n  protected getId: (item: TValue) => TKey = (item) => (item as any).id as TKey;\r\n\r\n  protected sanitizeAdd: (item: TValue) => TValue = (item) => item;\r\n\r\n  name: string;\r\n\r\n\r\n  //#region Add / Update / Remove / Clear Cache\r\n\r\n  add(item: TValue): void {\r\n    const l = this.log.fn('add', { item });\r\n    if (!item)\r\n      return l.end('item is null');\r\n\r\n    // add to signal\r\n    this.#cache.set({\r\n      ...this.#cache(),\r\n      [this.getId(item)]: this.sanitizeAdd(item)\r\n    });\r\n    l.end('added');\r\n  }\r\n\r\n  addMany(items: TValue[]): void {\r\n    var l = this.log.fn('addMany', { items });\r\n    if (!items || items.length == 0)\r\n      return l.end('items is null or empty');\r\n\r\n    // also add to signal, but in one go\r\n    const result = items.reduce((acc, item) => ({\r\n      ...acc,\r\n      [this.getId(item)]: this.sanitizeAdd(item)\r\n    }), { ...this.#cache() });\r\n    \r\n    this.#cache.set(result);\r\n    l.end('added');\r\n  }\r\n\r\n  update(id: TKey, item: Partial<TValue>): void {\r\n    const l = this.log.fn('update', { id, item });\r\n    if (!id || !item)\r\n      return l.end('id or item is null');\r\n\r\n    const before = this.get(id);\r\n    if (!before)\r\n      return l.end(`Item with id ${id} not found in store`);\r\n\r\n    // merge\r\n    const newItem = { ...before, ...item };\r\n\r\n    // add to signal\r\n    this.#cache.set({\r\n      ...this.#cache(),\r\n      [id]: newItem\r\n    });\r\n    l.end('updated');\r\n  }\r\n\r\n  remove(id: TKey): void {\r\n    const l = this.log.fn('remove', { id });\r\n    const { [id]: _, ...updatedStore } = this.#cache();\r\n    this.#cache.set(updatedStore as Record<TKey, TValue>);\r\n    l.end('removed');\r\n  }\r\n\r\n  clearCache(): void {\r\n    const l = this.log.fn('clearCache');\r\n    this.#cache.set({} as Record<TKey, TValue>);\r\n    l.end('cleared');\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Now-Getters\r\n\r\n  get(id: TKey): TValue {\r\n    const result = this.#cache()[id];\r\n    this.log.a(`get(${id}) - ` + (result == null ? 'not' : '') + 'found');\r\n    return result;\r\n  }\r\n\r\n  getAll(): TValue[] {\r\n    const result = this.#list();\r\n    this.log.a('getAll() - ' + `found ${result.length} items`);\r\n    return result;\r\n  }\r\n\r\n  getMany(ids: TKey[]): TValue[] {\r\n    const l = this.log.fn('getMany', { ids });\r\n    const result = ids\r\n      .map(id => this.#cache()[id])\r\n      .filter(item => item != null);\r\n    return l.r(result, `found ${result.length} items`);\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Signal Getters\r\n\r\n  getSignal(id: TKey): Signal<TValue> {\r\n    const result = this.#itemSignalsCache.getOrCreateWithInfo(id, () => this.get(id));\r\n    this.log.a(`getSignal(${id})`, { isNew: result.isNew });\r\n    return result.signal;\r\n  }\r\n  #itemSignalsCache = new ComputedCacheHelper<TKey, TValue>('item');\r\n\r\n\r\n  getManySignal(ids: TKey[]): Signal<TValue[]> {\r\n    const sig = computedObj('getMany', () => ids.map(id => this.get(id)).filter(item => item != null));\r\n    this.log.a('getManySignal()', { ids });\r\n    return sig;\r\n  }\r\n\r\n  getAllSignal(): Signal<TValue[]> {\r\n    const list = this.#list;\r\n    this.log.a(`getAllSignal() - found ${list().length} items`);\r\n    return list;\r\n  }\r\n\r\n  //#endregion\r\n\r\n}\r\n","import { Injectable, Signal } from '@angular/core';\r\nimport { map, Observable, shareReplay } from 'rxjs';\r\nimport { classLog } from '../../shared/logging';\r\nimport { mapUntilChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { ComputedCacheHelper } from '../../shared/signals/computed-cache';\r\nimport { EntityReader } from '../shared/helpers';\r\nimport { SignalStoreObservableBase } from '../shared/store/signal-store-observable-base';\r\nimport { FormLanguage, FormLanguageComplete } from './form-languages.model';\r\n\r\nconst logSpecs = {\r\n  getReader: false,\r\n  getLanguage: false,\r\n  getReaderSignal: false,\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FormLanguageService extends SignalStoreObservableBase<number, FormLanguageInStore> {\r\n\r\n  constructor() {\r\n    super(classLog({FormLanguageService}, logSpecs));\r\n  }\r\n\r\n  protected override getId = (item: FormLanguageInStore) => item.formId;\r\n\r\n  protected override sanitizeAdd = (item: FormLanguageInStore) => ({\r\n    ...FormLanguage.empty,\r\n    initial: item.current,\r\n    ...item\r\n  });\r\n\r\n  addForm(formId: number, primary: string, current: string, hideHeader: boolean): void {\r\n    this.add({\r\n      formId,\r\n      current,\r\n      initial: current,\r\n      primary,\r\n      hideHeader,\r\n    } satisfies FormLanguageInStore);\r\n  }\r\n\r\n  setCurrent(formId: number, newLanguage: string): void {\r\n    this.update(formId, { current: newLanguage } satisfies Partial<FormLanguageInStore>);\r\n  }\r\n\r\n  /**\r\n   * Get an EntityReader for the current form.\r\n   * ATM used in fields settings service.\r\n   * \r\n   * If the form doesn't exist, the reader returned will not have the correct languages specified.\r\n   * This is to avoid errors when the form is not yet loaded or is being unloaded.\r\n   */\r\n  getEntityReader(formId: number): Signal<EntityReader> {\r\n    const l = this.log.fnIf('getReader', { formId });\r\n    // Place creation of the language signal here to avoid creating it multiple times\r\n    const sig = this.#entityReaderCache.getOrCreateWithInfo(formId, () => {\r\n      const language = this.getSignal(formId)() ?? FormLanguage.empty();\r\n      const l2 = this.log.fnIf('getReaderSignal', { language });\r\n      return new EntityReader(language);\r\n    });\r\n    return l.rSilent(sig.signal, `isNew: ${sig.isNew}`);\r\n  }\r\n  #entityReaderCache = new ComputedCacheHelper<number, EntityReader>('entityReader');\r\n\r\n  // use in form config service for language$()\r\n  getLanguage$(formId: number): Observable<FormLanguageComplete> {\r\n    return this.cache$.pipe(\r\n      map(languageInstances => languageInstances[formId]),\r\n      mapUntilChanged(m => m),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  /** Get hideHeader for the form. Fix for safari and mobile browsers */\r\n  getHideHeaderSignal(formId: number): Signal<boolean> {\r\n    return this.#signalsHideHeaderCache.getOrCreate(formId, () => this.cache()[formId]?.hideHeader ?? false);\r\n  }\r\n  #signalsHideHeaderCache = new ComputedCacheHelper<number, boolean>('hideHeader');\r\n\r\n\r\n  /** Update hideHeader for the form. Fix for safari and mobile browsers */\r\n  updateHideHeader(formId: number, hideHeader: boolean): void {\r\n    this.update(formId, { hideHeader } satisfies Partial<FormLanguageInStore>);\r\n  }\r\n}\r\n\r\nexport interface FormLanguageInStore extends FormLanguageComplete {\r\n  formId: number;\r\n  hideHeader: boolean;\r\n}\r\n","import { Injectable, Injector, Signal, computed, effect, inject, signal } from '@angular/core';\r\nimport { IFieldMask } from '../../../../../../edit-types/src/IFieldMask';\r\nimport { classLog } from '../../../shared/logging';\r\nimport { ServiceBase } from '../../../shared/services/service-base';\r\nimport { FieldState } from '../../fields/field-state';\r\nimport { FormConfigService } from '../../form/form-config.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  initSignal: false,\r\n  watchAllFields: true,\r\n}\r\n\r\nconst dataPrefix = 'data';\r\nconst FieldsFindNoPrefix = /\\[.*?\\]/ig;\r\nconst FieldsFindPrefix = /\\[[a-zA-Z]+\\:.*?\\]/ig;\r\nconst FieldUnwrap = /[\\[\\]]/ig;\r\n\r\n/**\r\n * Create a new FieldMask instance and access result with resolve\r\n * @example\r\n * const mask = new FieldMask(\"[FirstName]\", formGroup.controls);\r\n * const maskValue = mask.resolve();\r\n *\r\n * @param mask a string like \"[FirstName] [LastName]\"\r\n * @param model usually FormGroup controls, passed into here\r\n * @param overloadPreCleanValues a function which will \"scrub\" the found field-values\r\n */\r\n\r\n@Injectable()\r\nexport class FieldMask extends ServiceBase implements IFieldMask /* for field-change subscription */ {\r\n  \r\n  log = classLog({FieldMask}, logSpecs);\r\n\r\n  #fieldState = inject(FieldState);\r\n  #formConfig = inject(FormConfigService);\r\n\r\n  constructor(private injector: Injector) {\r\n    super();\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  /**\r\n   * The result of the mask as a signal, for external use/subscribing.\r\n   */\r\n  public result = signal<string>('');\r\n\r\n  #controls = this.#fieldState.group.controls;\r\n  #fieldConfig = this.#fieldState.config;\r\n  #requirePrefix = false;\r\n\r\n  /**\r\n   * The mask as a signal.\r\n   * This allows us to use a simple value or a possibly runtime-changing mask. \r\n   */\r\n  #maskSignal = signal<Signal<string>>(signal<string>(''));\r\n\r\n  /**\r\n   * The final mask to use - either picking the signal or the text\r\n   * TODO: we should be able to simplify this to just use a signal\r\n   */\r\n  #mask = computed(() => this.#maskSignal()());\r\n\r\n  /** Fields used in the mask */\r\n  #fieldsUsedInMask = computed(() => this.#extractFieldNames(this.#mask()));\r\n\r\n  // #fieldValuesSignals = inject(FieldsSettingsService).fieldValues;\r\n\r\n  // // TODO create a multi-field signal?\r\n\r\n  // public result2 = computed(() => {\r\n  //   // listen to all the fields for changes\r\n  //   this.#fieldsUsedInMask().forEach(field => {\r\n\r\n  //   });\r\n  // });\r\n\r\n\r\n  /**\r\n   * Attach any processing events before the mask is resolved the first time\r\n   */\r\n  public initPreClean(overloadPreCleanValues: (key: string, value: string) => string): this {\r\n    this.log.a('initPreClean');\r\n    this.preClean = overloadPreCleanValues;\r\n    return this;\r\n  }\r\n\r\n  public init(name: string, mask: string, requirePrefix: boolean = false): this {\r\n    return this.initSignal(name, signal(mask));\r\n  }\r\n\r\n  public initSignal(name: string, mask: Signal<string>): this {\r\n    this.log.extendName(`-${name}`);\r\n    const l = this.log.fnIf('initSignal', { name, mask });\r\n    this.#maskSignal.set(mask);\r\n    this.#updateMaskFinal();\r\n    return l.r(this, 'first result:' + this.result());\r\n  }\r\n\r\n  /**\r\n   * Activate an aggressive change logger to debug what's happening.\r\n   * Should only be used in development, as it will log a lot of data to the console.\r\n   */\r\n  public logChanges(): this {\r\n    // use logger, but if not enabled, create new just for this\r\n    const l = this.log.enabled ? this.log : classLog({FieldMask});\r\n    effect(() => l.a(`Mask '${this.#mask()}' value changed to: ${this.result()}`), { injector: this.injector });\r\n    return this;\r\n  }\r\n\r\n  #updateMaskFinal() {\r\n    // bind auto-watch only if needed...\r\n    // otherwise it's just on-demand\r\n    this.#watchAllFields();\r\n    this.#onChange();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Process a mask to the get the final value\r\n   */\r\n  #process(): string {\r\n\r\n    // if no mask, exit early\r\n    if (!hasPlaceholders(this.#mask()))\r\n      return this.#mask();\r\n\r\n    let value = lowercaseInsideSquareBrackets(this.#mask());\r\n\r\n    // If we have form info (which we usually do), replace the placeholders\r\n    if (this.#formConfig != null)\r\n      value = value\r\n        .replace('[app:appid]', this.#formConfig.config.appId.toString())\r\n        .replace('[app:zoneid]', this.#formConfig.config.zoneId.toString());\r\n\r\n    // If we have field info (which we usually do), replace the placeholders\r\n    if (this.#fieldConfig != null)\r\n      value = value\r\n        .replace('[guid]', this.#fieldConfig.entityGuid)\r\n        .replace('[data:guid]', this.#fieldConfig.entityGuid)\r\n        .replace('[id]', this.#fieldConfig.entityId.toString())\r\n        .replace('[data:id]', this.#fieldConfig.entityId.toString());\r\n\r\n    const dataPlaceholders = this.#fieldsUsedInMask().data;\r\n    if (!dataPlaceholders)\r\n      return value;\r\n\r\n    dataPlaceholders.forEach((e, i) => {\r\n      const replaceValue = this.#controls?.[e]?.value ?? '';\r\n      const cleaned = this.preClean(e, replaceValue);\r\n      // New with prefix 'data:'\r\n      value = value.replace('[data:' + e.toLowerCase() + ']', cleaned);\r\n      // Old without prefix - only if allowed (for compatibility)\r\n      value = value.replace('[' + e.toLowerCase() + ']', cleaned);\r\n    });\r\n    return value;\r\n  }\r\n\r\n  /** Retrieves a list of all fields used in the mask */\r\n  #extractFieldNames(mask: string): Record<string, string[]> {\r\n    // exit early if mask very simple or not a mask\r\n    if (!mask || !hasPlaceholders(mask))\r\n      return {};\r\n\r\n    const matches = mask.match(FieldsFindNoPrefix);\r\n    \r\n    if (!matches)\r\n      return {};\r\n    \r\n    const fields: string[] = matches.map(token => token.replace(FieldUnwrap, ''));\r\n    return { data: fields };\r\n  }\r\n\r\n  /**\r\n   * Default preClean function, if no other function was specified for this\r\n   * Will be replaced if need be.\r\n   */\r\n  private preClean(key: string, value: string): string { return value; }\r\n\r\n  /** Change-event - will only fire if it really changes */\r\n  #onChange() {\r\n    const maybeNew = this.#process();\r\n    this.result.set(maybeNew);\r\n  }\r\n\r\n  /**\r\n   * Add watcher and execute onChange.\r\n   * Uses observables, since that's what angular provides on valueChanges.\r\n   */\r\n  #watchAllFields() {\r\n    const l = this.log.fnIf('watchAllFields');\r\n    const dataPlaceholders = this.#fieldsUsedInMask().data;\r\n    if (!dataPlaceholders)\r\n      return l.end('no data placeholders');\r\n\r\n    // add a watch for each field in the field-mask\r\n    const controls = dataPlaceholders\r\n      .map(f => this.#controls[f])\r\n      .filter(f => f != null);\r\n\r\n    if (controls.length == 0)\r\n      return l.end('no fields to watch');\r\n\r\n    controls.forEach(c => this.subscriptions.add(c.valueChanges.subscribe(_ => this.#onChange())));\r\n    l.end();\r\n  }\r\n}\r\n\r\n\r\nfunction hasPlaceholders(mask: string): boolean {\r\n  return (mask ?? '').includes('[');\r\n}\r\n\r\n/** used for query parameters */\r\nfunction lowercaseInsideSquareBrackets(value: string) {\r\n  return value.replace(/\\[([^\\]]+)\\]/g, (_, group) => `[${group.toLowerCase()}]`);\r\n}\r\n","import { classLog } from '../../shared/logging';\r\nimport { FormLanguage } from '../form/form-languages.model';\r\nimport { EavField, EavFieldValue } from '../shared/models/eav';\r\nimport { DimensionReader } from './dimension-reader';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  constructor: false,\r\n};\r\n\r\nexport class FieldReader<T = any> {\r\n  \r\n  log = classLog({FieldReader}, logSpecs);\r\n\r\n  constructor(field: EavField<T>, language: string);\r\n  constructor(field: EavField<T>, language: FormLanguage);\r\n  constructor(field: EavField<T>, language: FormLanguage | string) {\r\n    this.log.fnIf('constructor', { field, language });\r\n    this.#field = field;\r\n    this.#language = typeof language === 'string' ? { current: language, primary: language } : language;\r\n    this.#values = field?.Values ?? [];\r\n    this.#noData = !field || !field.Values || field.Values.length === 0;\r\n  }\r\n\r\n  #noData = true;\r\n\r\n  #field: EavField<T>;\r\n  /** Values - never empty for read-safety */\r\n  #values: EavFieldValue<T>[];\r\n  #language: FormLanguage;\r\n\r\n  get current(): EavFieldValue<T> | null {\r\n    return this.ofLanguage(this.#language); // first match if any is the one we're looking for\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Priority:\r\n   * 1. value for current language\r\n   * 2. value for all languages\r\n   * 3. value for default language\r\n   *\r\n   * @readonly\r\n   * @type {EavFieldValue<T>}\r\n   * @memberof FieldReader\r\n   */\r\n  get currentOrDefault(): EavFieldValue<T> {\r\n    if (this.#noData) return null;\r\n    return this.current\r\n      // note that having both languages primary will also result in checking the '*' dimension\r\n      ?? this.ofLanguage(FormLanguage.bothPrimary(this.#language));\r\n  }\r\n\r\n  /**\r\n   * Priority:\r\n   * 1. value for current language\r\n   * 2. value for all languages\r\n   * 3. value for default language\r\n   * 4. first/any value in the system\r\n   */\r\n  get currentOrDefaultOrAny(): EavFieldValue<T> | null {\r\n    if (this.#noData) return null;\r\n    return this.currentOrDefault ?? this.#values[0] ?? null;\r\n  }\r\n\r\n\r\n  ofLanguage(language: FormLanguage): EavFieldValue<T> | null {\r\n    if (this.#noData) return null;\r\n    return this.#values.filter(val => new DimensionReader(val.dimensions, language).hasCurrent)[0] ?? null;\r\n  }\r\n\r\n  /** Check if there is a value on the specified primary language or on the '*' dimension */\r\n  get hasPrimary(): boolean {\r\n    if (this.#noData) return false;\r\n    const primary = this.#language.primary;\r\n    return this.#values.filter(val => val.dimensions.find(d => d.dimCode === primary || d.dimCode === '*')).length > 0;\r\n  }\r\n\r\n  get hasCurrentReadonly(): boolean {\r\n    if (this.#noData) return false;\r\n    return this.#values.filter(val => new DimensionReader(val.dimensions, this.#language).hasCurrentReadOnly).length > 0;\r\n  }\r\n\r\n  /** A value in specified Language is editable, if assigned to current language or to '*' (but only when on default-language) */\r\n  get hasEditableValues(): boolean {\r\n    if (this.#noData) return false;\r\n    return this.#valuesEditableOf().length > 0;\r\n  }\r\n\r\n  /** Number of editable translatable fields that */\r\n  countEditable(): number {\r\n    return this.#valuesEditableOf().length;\r\n  }\r\n\r\n  /** Number of editable translatable fields that have some content (not empty/null) */\r\n  countEditableWithContents(): number {\r\n    return this.#valuesEditableOf().filter(v => v.value != \"\" && v.value != null)?.length;\r\n  }\r\n\r\n  /**\r\n   * Values of a field are for the current language,\r\n   * if they are assigned to the current language or to '*' (but only when the current-language is also the primary-language)\r\n   */\r\n  #valuesEditableOf(language?: FormLanguage): EavFieldValue<T>[] {\r\n    if (this.#noData) return [];\r\n    language ??= this.#language;\r\n    return this.#values.filter(val => new DimensionReader(val.dimensions, language).hasCurrentWrite);\r\n  }\r\n\r\n  /** Value of current language which is editable. `null` if not found. */\r\n  get currentEditable(): EavFieldValue<T> {\r\n    if (this.#noData) return null;\r\n    const dimension = this.#language.current;\r\n    return this.#values.find(v => v.dimensions.find(x => x.dimCode === dimension)) ?? null;\r\n  }\r\n\r\n  isEditableOrReadonlyTranslationExist(): boolean {\r\n    if (this.#noData) return false;\r\n    return this.#valuesEditableOf().length > 0;\r\n  }\r\n\r\n}\r\n","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ 'Fields.Hyperlink.PagePicker.Title' | translate }}</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <div class=\"page-search-box\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n        <mat-label>Search</mat-label>\r\n        <input matInput [ngModel]=\"filterText()\" (ngModelChange)=\"setFilter($event)\">\r\n      </mat-form-field>\r\n    </div>\r\n    <div class=\"page-tree-box\">\r\n      @if (!filterText()) {\r\n      <ul>\r\n        @for (page of tree(); track page) {\r\n        <ng-container *ngTemplateOutlet=\"pageAndChildren; context: {page: page}\"></ng-container>\r\n        }\r\n      </ul>\r\n      }\r\n      @if (filterText()) {\r\n      <ul>\r\n        @if (filteredSearch().length === 0) {\r\n        <li>\r\n          <div class=\"page-row\">\r\n            <div class=\"no-toggle\"></div>\r\n            <div>No results</div>\r\n          </div>\r\n        </li>\r\n        }\r\n        @for (page of filteredSearch(); track page) {\r\n        <li>\r\n          <div class=\"page-row\">\r\n            <div class=\"no-toggle\"></div>\r\n            <div class=\"page-label\" [ngClass]=\"page.id === selected ? 'selected' : ''\" (click)=\"select(page)\">\r\n              <div class=\"page-icon-and-text\">\r\n                <mat-icon class=\"page-icon\" svgIcon=\"file\"></mat-icon>\r\n                @if (page.path) {\r\n                <span class=\"page-path\" [tippy]=\"page.path\">{{ page.path }}&nbsp;>&nbsp;</span>\r\n                }\r\n                <span class=\"page-name\" [tippy]=\"page.name\">{{ page.name }}</span>\r\n              </div>\r\n              <div class=\"page-icons\">\r\n                @if (!page.isNavigation) {\r\n                <mat-icon class=\"page-visible-clickable-icon\">visibility_off</mat-icon>\r\n                }\r\n                @if (!page.isClickable) {\r\n                <mat-icon class=\"page-visible-clickable-icon\">cancel</mat-icon>\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </li>\r\n        }\r\n      </ul>\r\n      }\r\n    </div>\r\n    <ng-template #pageAndChildren let-page=\"page\">\r\n      <li>\r\n        <div class=\"page-row\">\r\n          @if (page.children.length === 0) {\r\n          <div class=\"no-toggle\"></div>\r\n          }\r\n          @if (page.children.length > 0) {\r\n          <mat-icon class=\"page-toggle\" (click)=\"toggle(page.id)\">\r\n            {{ toggled.includes(page.id) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n          </mat-icon>\r\n          }\r\n          <div class=\"page-label\" [ngClass]=\"page.id === selected ? 'selected' : ''\" (click)=\"select(page)\">\r\n            <div class=\"page-icon-and-text\">\r\n              <mat-icon class=\"page-icon\" svgIcon=\"file\"></mat-icon>\r\n              <span>{{ page.name }}</span>\r\n            </div>\r\n            <div class=\"page-icons\">\r\n              @if (!page.isVisible) {\r\n              <mat-icon class=\"page-visible-clickable-icon\">visibility_off</mat-icon>\r\n              }\r\n              @if (!page.isClickable) {\r\n              <mat-icon class=\"page-visible-clickable-icon\">cancel</mat-icon>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n        @if (page.children.length > 0 && toggled.includes(page.id)) {\r\n        <ul>\r\n          @for (child of page.children; track child) {\r\n          <ng-container *ngTemplateOutlet=\"pageAndChildren; context: {page: child}\"></ng-container>\r\n          }\r\n        </ul>\r\n        }\r\n      </li>\r\n    </ng-template>\r\n  </div>\r\n  <mat-dialog-actions>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, computed, Inject, OnInit, signal } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core';\r\nimport { FieldValue } from '../../../../../../edit-types/src/FieldValue';\r\nimport { PagePickerResult } from '../../../../../../edit-types/src/PagePickerResult';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { ArrayHelpers } from '../../../shared/helpers/array.helpers';\r\nimport { QueryService } from '../../../shared/services/query.service';\r\nimport { buildPageSearch, buildPageTree } from './page-picker.helpers';\r\nimport { PageEntity, PagePickerDialogData, PageSearchItem, PageTreeItem } from './page-picker.models';\r\n\r\n@Component({\r\n    selector: 'app-page-picker',\r\n    templateUrl: './page-picker.component.html',\r\n    styleUrls: ['./page-picker.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        FormsModule,\r\n        NgTemplateOutlet,\r\n        NgClass,\r\n        MatIconModule,\r\n        MatDialogActions,\r\n        TranslateModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class PagePickerComponent implements OnInit {\r\n  selected: number;\r\n  toggled: number[];\r\n\r\n  filterText = signal<string>('');\r\n  searchItems = signal<PageSearchItem[]>([]);\r\n  tree = signal<PageTreeItem[]>([]);\r\n\r\n  filteredSearch = computed(() => {\r\n    const filterText = this.filterText();\r\n    const searchItems = this.searchItems();\r\n    return searchItems.filter(item => item.name.toLocaleLowerCase().includes(filterText.toLocaleLowerCase()));\r\n  });\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: PagePickerDialogData,\r\n    private dialog: MatDialogRef<PagePickerComponent>,\r\n    private translate: TranslateService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.selected = this.parseSelectedPageId();\r\n    this.toggled = [];\r\n\r\n    this.fetchPages();\r\n  }\r\n\r\n  setFilter(filterText: string): void {\r\n    this.filterText.set(filterText);\r\n  }\r\n\r\n  select(page: PageTreeItem | PageSearchItem): void {\r\n    // filters out pages without parent (broken)\r\n    if (page.id == null) return;\r\n    if (!page.isClickable || !page.isNavigation) {\r\n      const ok = window.confirm(this.translate.instant('Fields.Hyperlink.PagePicker.HiddenOrSystemPageWarning'));\r\n      if (!ok) return;\r\n    }\r\n    this.closeDialog(page.id);\r\n  }\r\n\r\n  toggle(pageId: number): void {\r\n    ArrayHelpers.toggleInArray(pageId, this.toggled);\r\n  }\r\n\r\n  private closeDialog(pageId?: number): void {\r\n    if (pageId == null) {\r\n      this.dialog.close();\r\n      return;\r\n    }\r\n\r\n    const page = this.searchItems().find(i => i.id === pageId);\r\n    const result: PagePickerResult = {\r\n      id: page.id.toString(),\r\n      name: page.name,\r\n    };\r\n    this.dialog.close(result);\r\n  }\r\n\r\n  private fetchPages(): void {\r\n    const stream = 'Default';\r\n    const params = 'includehidden=true';\r\n    this.queryService.getFromQuery(`System.Pages/Default`, params, null).subscribe({\r\n      next: (data) => {\r\n        if (!data) {\r\n          console.error(this.translate.instant('Fields.Picker.QueryErrorNoData'));\r\n          return;\r\n        }\r\n        if (!data[stream]) {\r\n          console.error(this.translate.instant('Fields.Picker.QueryStreamNotFound') + ' ' + stream);\r\n          return;\r\n        }\r\n        const pages = data[stream] as PageEntity[];\r\n        const searchItems = buildPageSearch(pages);\r\n        this.searchItems.set(searchItems);\r\n        const tree = buildPageTree(pages);\r\n        this.tree.set(tree);\r\n      },\r\n      error: (error) => {\r\n        console.error(error);\r\n        console.error(`${this.translate.instant('Fields.Picker.QueryError')} - ${error.data}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  private parseSelectedPageId(): number {\r\n    const prefix = 'page:';\r\n    let fieldValue: FieldValue = this.dialogData.group.controls[this.dialogData.config.fieldName].value;\r\n    if (typeof fieldValue !== 'string') return;\r\n\r\n    fieldValue = fieldValue.trim().toLocaleLowerCase();\r\n    if (!fieldValue.startsWith(prefix)) return;\r\n\r\n    try {\r\n      const id = parseInt(fieldValue.split(prefix)[1], 10);\r\n      return id;\r\n    } catch {\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import { PageEntity, PageSearchItem, PageTreeItem } from './page-picker.models';\r\n\r\nexport function buildPageSearch(pages: PageEntity[]): PageSearchItem[] {\r\n  if (!pages) { return []; }\r\n\r\n  const items = pages.map(page => {\r\n    let path = page.Path.trim().replace(/\\\\/g, '/').replace(/\\/\\//g, '/');\r\n    if (path.startsWith('/')) {\r\n      path = path.substring(1);\r\n    }\r\n    path = path.split('/').slice(0, -1).join(' > ');\r\n\r\n    const item: PageSearchItem = {\r\n      id: page.Id,\r\n      name: page.Name,\r\n      path,\r\n      isNavigation: page.IsNavigation,\r\n      isClickable: page.IsClickable,\r\n    };\r\n    return item;\r\n  });\r\n\r\n  return items;\r\n}\r\n\r\nexport function buildPageTree(pages: PageEntity[]): PageTreeItem[] {\r\n  if (!pages) { return []; }\r\n\r\n  const items = pages.map(page => {\r\n    const item: PageTreeItem = {\r\n      children: [],\r\n      id: page.Id,\r\n      name: page.Name,\r\n      parentId: page.ParentId,\r\n      isNavigation: page.IsNavigation,\r\n      isClickable: page.IsClickable,\r\n    };\r\n    return item;\r\n  });\r\n\r\n  const tree: PageTreeItem[] = [];\r\n  for (const item of items) {\r\n    if (item.parentId === -1) {\r\n      tree.push(item);\r\n      continue;\r\n    }\r\n\r\n    const parent = items.find(i => i.id === item.parentId);\r\n    if (!parent) {\r\n      tree.push(item);\r\n    } else {\r\n      parent.children.push(item);\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n","import { ChangeDetectorRef, ViewContainerRef } from '@angular/core';\r\nimport { UntypedFormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { take } from 'rxjs';\r\nimport { PagePickerResult } from '../../../../../../edit-types/src/PagePickerResult';\r\nimport { FieldConfigSet } from '../field-config-set.model';\r\nimport { PagePickerComponent } from './page-picker.component';\r\nimport { PagePickerDialogData } from './page-picker.models';\r\n\r\nexport class PagePicker {\r\n  static open(\r\n    config: FieldConfigSet,\r\n    group: UntypedFormGroup,\r\n    matDialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    changeDetectorRef: ChangeDetectorRef,\r\n    callback: (value: PagePickerResult) => void,\r\n  ): void {\r\n    const dialogData: PagePickerDialogData = {\r\n      config,\r\n      group,\r\n    };\r\n    const dialogRef = matDialog.open(PagePickerComponent, {\r\n      autoFocus: false,\r\n      data: dialogData,\r\n      viewContainerRef,\r\n      height: '80%',\r\n      width: '650px',\r\n    });\r\n\r\n    dialogRef.afterClosed().pipe(take(1)).subscribe((value: PagePickerResult) => {\r\n      callback(value);\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","import { Language } from '../../shared/models/language.model';\r\n\r\nexport { Language } from '../../shared/models/language.model';\r\n\r\nexport class FormLanguage\r\n{\r\n  /** The current language of the system / UI. */\r\n  current: string;\r\n\r\n  /** The primary language of the system.\r\n   * Important, because the primary language must be filled in before all other languages.\r\n   */\r\n  primary: string;\r\n\r\n  /**\r\n   * In some cases we want both to be primary, but it's not clear why.\r\n   * I think it's just because we want certain tests to only use one value, but the test is meant for 2 values.\r\n   */\r\n  static bothPrimary(original: FormLanguage): FormLanguage {\r\n    return {\r\n      current: original.primary,\r\n      primary: original.primary\r\n    };\r\n  }\r\n\r\n  static diffCurrent(original: FormLanguage, current: string): FormLanguage {\r\n    return {\r\n      current: current,\r\n      primary: original.primary\r\n    };\r\n  }\r\n\r\n  static empty(): FormLanguageComplete {\r\n    return {\r\n      current: '',\r\n      primary: '',\r\n      initial: '',\r\n    };\r\n  }\r\n}\r\n\r\nexport class FormLanguageComplete extends FormLanguage {\r\n  /** initial language of the UI */\r\n  initial: string;\r\n}\r\n\r\nexport interface FormLanguagesConfig\r\n{\r\n  initial: string;\r\n  primary: string;\r\n  list: Language[];\r\n}\r\n\r\n","import { FormLanguage } from '../form/form-languages.model';\r\nimport { EavDimension } from '../shared/models/eav';\r\n\r\n\r\nexport class DimensionReader {\r\n  constructor(private dimensions: EavDimension[], private language: FormLanguage) { }\r\n\r\n  get hasCurrentWrite(): boolean {\r\n    const match = this.dimensions.find(d => d.dimCode === this.language.current\r\n      || (this.language.current === this.language.primary && d.dimCode === '*'));\r\n    return !!match;\r\n  }\r\n\r\n  get hasCurrentReadOnly(): boolean {\r\n    const currentRO = `~${this.language.current}`;\r\n    return this.dimensions.find(d => d.dimCode === currentRO) !== undefined;\r\n  }\r\n\r\n  get hasCurrent(): boolean {\r\n    const match = this.dimensions.find(d => d.dimCode === this.language.current\r\n      || d.dimCode === `~${this.language.current}`\r\n      || (this.language.current === this.language.primary && d.dimCode === '*'));\r\n    return !!match;\r\n  }\r\n}\r\n","import { toObservable } from '@angular/core/rxjs-interop';\r\nimport { SignalStoreBase } from './signal-store-base';\r\nimport { Observable } from 'rxjs';\r\nimport { mapUntilChanged } from '../../../shared/rxJs/mapUntilChanged';\r\n\r\nexport abstract class SignalStoreObservableBase<TKey extends string | number, TValue> extends SignalStoreBase<TKey, TValue> {\r\n\r\n  /** Old / existing functionality with observables */\r\n  #cache$ = toObservable(this.cache);\r\n\r\n  #list$ = toObservable(this.list);\r\n\r\n  // publish only as a read-only signal\r\n  protected get cache$(): Observable<Record<TKey, TValue>> {\r\n    return this.#cache$;\r\n  }\r\n\r\n  protected get list$(): Observable<TValue[]> {\r\n    return this.#list$;\r\n  }\r\n\r\n  getList$(): Observable<TValue[]> {\r\n    return this.list$;\r\n  }\r\n\r\n  getMany$(ids?: TKey[]): Observable<TValue[]> {\r\n    return this.cache$.pipe(\r\n      mapUntilChanged(obj => ids.map(id => obj[id]).filter(m => m != null)),\r\n    );\r\n  }\r\n\r\n}","import { classLog } from '../../../shared/logging';\r\nimport { FormLanguage } from '../../form/form-languages.model';\r\nimport { FieldReader } from '../../localization/field-reader';\r\nimport { ItemValuesOfLanguage } from '../../state/item-values-of-language.model';\r\nimport { EavEntity, EavEntityAttributes, EavField } from '../models/eav';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  constructor: false,\r\n};\r\n\r\nexport class EntityReader implements FormLanguage {\r\n  \r\n  log = classLog({EntityReader}, logSpecs);\r\n\r\n  /** @inheritdoc */\r\n  public current: string;\r\n  /** @inheritdoc */\r\n  public primary: string;\r\n\r\n  constructor(formLanguage: FormLanguage);\r\n  constructor(current: string, primary: string);\r\n  constructor(current: FormLanguage | string, primary?: string) {\r\n    this.log.fnIf('constructor', { current, primary });\r\n    if (typeof current === 'string') {\r\n      this.current = current;\r\n      this.primary = primary;\r\n    } else {\r\n      this.current = current.current;\r\n      this.primary = current.primary;\r\n    }\r\n  }\r\n\r\n  // WIP - to make code clearer, this is what should be used from now on\r\n  // But we'll probably end up calling this from the EntityReader only, so it should be straight forward\r\n  getBestValue<T>(attributeValues: EavField<T>, defaultValue: T = null): T {\r\n    const fieldReader = new FieldReader<T>(attributeValues, this);\r\n    return fieldReader.currentOrDefaultOrAny?.value ?? defaultValue;\r\n    // return LocalizationHelpers.translate<T>(this, attributeValues as EavField<T>, defaultValue);\r\n  }\r\n\r\n  public flatten<T>(metadata: EavEntity | EavEntity[]): T {\r\n    if (metadata == null)\r\n      return {} as T;\r\n\r\n    const metadataItems = Array.isArray(metadata) ? metadata : [metadata];\r\n    if (metadataItems.length === 0 || metadataItems[0] == null)\r\n      return {} as T;\r\n\r\n    const merged: Record<string, any> = {};\r\n    // copy metadata settings which are not @All\r\n    for (const item of metadataItems) {\r\n      if (item.Type.Id === '@All') continue;\r\n\r\n      for (const [name, values] of Object.entries(item.Attributes)) {\r\n        const value = this.getBestValue(values);\r\n        merged[name] = value;\r\n      }\r\n    }\r\n\r\n    // copy @All metadata settings, overwriting previous settings\r\n    for (const item of metadataItems) {\r\n      if (item.Type.Id !== '@All') continue;\r\n\r\n      for (const [name, values] of Object.entries(item.Attributes)) {\r\n        const value = this.getBestValue(values);\r\n        // do not overwrite previous settings if @All is empty\r\n        const exists = merged[name] != null;\r\n        const emptyAll = value == null || value === '';\r\n        if (exists && emptyAll) continue;\r\n\r\n        merged[name] = value;\r\n      }\r\n    }\r\n\r\n    return merged as T;\r\n  }\r\n\r\n  currentValues(itemAttributes: EavEntityAttributes): ItemValuesOfLanguage {\r\n    const formValues: ItemValuesOfLanguage = Object.entries(itemAttributes)\r\n      .reduce((acc, [name, values]) => {\r\n        acc[name] = this.getBestValue(values);\r\n        return acc;\r\n      }, {} as ItemValuesOfLanguage);\r\n    return formValues;\r\n  }\r\n\r\n}\r\n"],"x_google_ignoreList":[]}