{"version":3,"file":"default-projects_core_object-utilities_ts-projects_eav-ui_src_app_shared_directives_mousedown-ba87ff.1a7fe4e8a8873a9a.js","mappings":"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","names":["convert","obj","fn","getWith","MousedownStopPropagationDirective","onMousedown","event","stopPropagation","static","this","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FsC","selectors","hostBindings","rf","ctx","i0","$event","logSpecs","doOnDialogClosed","DialogRoutingService","ServiceBase","constructor","router","route","super","log","classLog","snapshot","url","urlSegments","split","getParam","key","paramMap","get","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","fnIf","subscriptions","add","childDialogClosed$","subscribe","data","a","end","doOnDialogClosedWithData","#childDialogClosedWithData","urlSubRoute","params","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","navRelative","commands","events","pipe","filter","NavigationEnd","startWith","firstChild","map","pairwise","hadChildBefore","hasChildNow","tap","snapShot","prev","curr","i1","_angular_core__WEBPACK_IMPORTED_MODULE_8__","jDH","factory","ɵfac","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","toLowerCase","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","descendantElements","cloneElements","cloneUniqueId","source","type","value","name","context","getContext","drawImage","getMutableClientRect","element","rect","getBoundingClientRect","top","right","bottom","left","width","height","x","y","isInsideClientRect","clientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","target","_getEventTarget","cachedPosition","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","contains","window","scrollY","scrollX","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","extendStyles","dest","importantProperties","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","enable","userSelect","style","toggleVisibility","opacity","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","getTransform","Math","round","parseCssTimeUnitsToMs","multiplier","indexOf","parseFloat","parseCssPropertyValue","computedStyle","getPropertyValue","part","trim","Set","PreviewRef","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","_renderer","_previewEmbeddedView","_preview","attach","parent","_createPreview","supportsPopover","showPopover","destroy","remove","setTransform","addClass","className","classList","getTransitionDuration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","find","prop","propertyIndex","rawDurations","rawDelays","addEventListener","handler","listen","previewConfig","previewClass","previewTemplate","template","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","margin","setAttribute","Array","isArray","passiveEventListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","dragImportantProperties","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_rootElementCleanups","_cleanupShadowRootSelectStart","_previewContainer","_placeholderRef","_placeholder","_pickupPositionInElement","_anchor","_passiveTransform","_activeTransform","_hasStartedDragging","signal","_hasMoved","_initialContainer","_initialIndex","_parentPositions","_moveEvents","Subject","_pointerDirectionDelta","_pointerPositionAtLastDirectionChange","_lastKnownPointerPosition","_ownerSVGElement","_rootElementTapHighlight","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_lastTouchEventTime","_dragStartTime","_boundaryElement","_nativeInteractionsEnabled","_previewRect","_boundaryRect","_placeholderTemplate","_handles","_disabledHandles","_dropContainer","_parentDragRef","_cachedShadowRoot","lockAxis","dragStartDelay","scale","disabled","_disabled","_toggleNativeDragInteractions","handle","beforeStarted","started","released","ended","entered","exited","dropped","moved","constrainPosition","withRootElement","withParent","parentDragRef","registerDragItem","getPlaceholderElement","getRootElement","getVisibleElement","isDragging","withHandles","handles","coerceElement","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","rootElement","_removeRootElementListeners","renderer","runOutsideAngular","_pointerDown","_nativeDragStart","undefined","SVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","_containInsideBoundaryOnResize","dispose","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","complete","reset","resetToBoundary","isOverflowingParent","parentRect","childRect","offsetX","offsetY","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","setFreeDragPosition","_applyRootElementTransform","withPreviewContainer","_sortFromLastPointerPosition","_updateActiveDropContainer","_getConstrainedPointerPosition","next","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","abs","dragStartThreshold","isDelayElapsed","Date","now","_getDragStartDelay","_endDragSequence","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_updatePointerDirectionDelta","offset","activeTransform","observers","distance","_getDragDistance","delta","_pointerUp","stopDragging","webkitTapHighlightColor","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","shadowRoot","_getShadowRoot","dropContainer","shadowDomSelectStart","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","zIndex","_getPreviewInsertionPoint","body","replaceChild","start","getItemIndex","getScrollableParents","referenceElement","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","cleanupListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","cleanup","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","min","max","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","SingleAxisSortStrategy","_element","_sortPredicate","_itemPositions","_activeDraggables","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","transformAmount","activeDraggables","newPositionReference","_shouldEnterAsFirstChild","splice","parentElement","push","_cacheItemPositions","withSortPredicate","predicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","withElementContainer","elementToMeasure","b","immediateSibling","itemPositions","lastItemRect","firstItemRect","floor","MixedSortStrategy","_rootNode","_activeItems","deltaX","deltaY","_relatedNodes","childNodes","nextSibling","previousSwap","toSwapWith","current","overlapElement","after","before","newOverlapElement","_getRootNode","elementFromPoint","enterIndex","_getClosestItemIndexToPointer","targetItem","root","elementAtPoint","minDistance","Infinity","minIndex","hypot","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_container","_isDragging","_sortStrategy","_domRect","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_scrollNode","_stopScrollTimers","_scrollableElements","_initialScrollSnap","coercedElement","withOrientation","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","every","connectedTo","strategy","withScrollableParents","oldContainerIndex","newContainerIndex","unshift","size","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_startScrollInterval","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","interval","period","scheduler","asyncScheduler","timer","animationFrameScheduler","takeUntil","scrollStep","scrollBy","_canReceive","_startReceiving","activeSiblings","initiator","receiver","draggedItems","capturingEventOptions","activeCapturingEventOptions","_ResetsLoader","hostAttrs","decls","vars","encapsulation","changeDetection","DragDropRegistry","inject","NgZone","DOCUMENT","_styleLoader","_CdkPrivateStyleLoader","RendererFactory2","createRenderer","_cleanupDocumentTouchmove","_scroll","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","_domNodesToDirectives","_persistentTouchmoveListener","load","update","instances","startsWith","endEventHandler","e","toBind","_preventDefaultWhileDragging","options","_clearGlobalListeners","streams","Observable","observer","merge","registerDirectiveNode","dragRef","WeakMap","removeDirectiveNode","getDragDirectiveForNode","ngOnDestroy","instance","some","token","providedIn","DEFAULT_CONFIG","DragDrop","ViewportRuler","createDrag","config","createDropList","CDK_DRAG_PARENT","InjectionToken","CDK_DRAG_HANDLE","CdkDragHandle","ElementRef","_parentDrag","optional","skipSelf","_stateChanges","_addHandle","ngAfterViewInit","nativeElement","ref","_removeHandle","inputs","booleanAttribute","features","provide","useExisting","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_viewContainerRef","ViewContainerRef","_dir","Directionality","_changeDetectorRef","ChangeDetectorRef","_selfHandle","self","_destroyed","BehaviorSubject","_dragRef","rootElementSelector","freeDragPosition","EventEmitter","subscription","movedEvent","_injector","Injector","dragDrop","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","afterNextRender","_updateRootElement","_setupHandlesListener","injector","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","closest","_getBoundaryElement","boundary","dir","templateRef","coerceNumberProperty","take","parentDrag","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","handleElements","switchMap","handleInstance","hostVars","numberAttribute","outputs","exportAs","CDK_DROP_LIST_GROUP","CdkDropList","_scrollDispatcher","ScrollDispatcher","_group","_latestSortedRefs","_scrollableParentsResolved","id","_IdGenerator","getId","elementContainerSelector","_unsortedItems","_setupInputSyncSubscription","_dropLists","_items","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","coerceArray","list","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","querySelector","listAutoScrollDisabled","listOrientation","useValue"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/core/object-utilities.ts","./projects/eav-ui/src/app/shared/directives/mousedown-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js"],"sourcesContent":["\r\n/**\r\n * Conversion function to change something to something else, a bit like 'map' but for a single item.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `getWith` function, but has a different name to indicate the usage.\r\n */\r\nexport function convert<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n/**\r\n * Function to do something with an object and return the result.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `convert` function, but has a different name to indicate the usage.\r\n */\r\nexport function getWith<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appMousedownStopPropagation]',\r\n})\r\nexport class MousedownStopPropagationDirective {\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe((data: unknown) => {\r\n        l.a('Dialog closed', { data });\r\n        return callback();\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  public doOnDialogClosedWithData(callback: (data: any) => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.#childDialogClosedWithData().subscribe(({ state }) => {\r\n        l.a('Dialog closed', { state });\r\n        callback(state);\r\n      })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n  #childDialogClosedWithData() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      tap(event => {\r\n        const l = this.log.fn(\"childDialogClosed$\", {\r\n          event,\r\n          firstChild: this.route.snapshot.firstChild,\r\n          snapShot: this.route.snapshot,\r\n          state: this.router.getCurrentNavigation()?.extras.state,\r\n        });\r\n        l.a('NavigationEnd', { event });\r\n        l.end();\r\n      }),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => ({\r\n        hasChildNow: !!this.route.snapshot.firstChild,\r\n        state: this.router.getCurrentNavigation()?.extras.state,\r\n      })),\r\n      pairwise(),\r\n      filter(([prev, curr]) => prev.hasChildNow && !curr.hasChildNow),\r\n      map(([prev, curr]) => ({\r\n        hadChildBefore: prev.hasChildNow,\r\n        hasChildNow: curr.hasChildNow,\r\n        state: curr.state\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { signal, Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, DOCUMENT, RendererFactory2, Injectable, InjectionToken, ElementRef, booleanAttribute, Directive, Input, ViewContainerRef, ChangeDetectorRef, EventEmitter, Injector, afterNextRender, numberAttribute, Output, TemplateRef, NgModule } from '@angular/core';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { _ as _getEventTarget, a as _getShadowRoot } from './shadow-dom-B0oHn41l.mjs';\nimport { a as isFakeTouchstartFromScreenReader, i as isFakeMousedownFromScreenReader } from './fake-event-detection-DWOdFTFz.mjs';\nimport { a as coerceElement, c as coerceNumberProperty } from './element-x4z00URv.mjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport { _ as _CdkPrivateStyleLoader } from './style-loader-B2sGQXxD.mjs';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from './scrolling.mjs';\nexport { CdkScrollable as ɵɵCdkScrollable } from './scrolling.mjs';\nimport { D as Directionality } from './directionality-CChdj3az.mjs';\nimport { _ as _IdGenerator } from './id-generator-LuoRZSid.mjs';\nimport { c as coerceArray } from './array-I1yfCXUO.mjs';\nimport './platform-DNDzkVcI.mjs';\nimport '@angular/common';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\nimport './recycle-view-repeater-strategy-SfuyU210.mjs';\nimport './data-source-D34wiQZj.mjs';\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Checks if the child element is overflowing from its parent.\n * @param parentRect - The bounding rect of the parent element.\n * @param childRect - The bounding rect of the child element.\n */\nfunction isOverflowingParent(parentRect, childRect) {\n    // check for horizontal overflow (left and right)\n    const isLeftOverflowing = childRect.left < parentRect.left;\n    const isRightOverflowing = childRect.left + childRect.width > parentRect.right;\n    // check for vertical overflow (top and bottom)\n    const isTopOverflowing = childRect.top < parentRect.top;\n    const isBottomOverflowing = childRect.top + childRect.height > parentRect.bottom;\n    return isLeftOverflowing || isRightOverflowing || isTopOverflowing || isBottomOverflowing;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    _document;\n    /** Cached positions of the scrollable parent elements. */\n    positions = new Map();\n    constructor(_document) {\n        this._document = _document;\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    _document;\n    _rootElement;\n    _direction;\n    _initialDomRect;\n    _previewTemplate;\n    _previewClass;\n    _pickupPositionOnPage;\n    _initialTransform;\n    _zIndex;\n    _renderer;\n    /** Reference to the view of the preview element. */\n    _previewEmbeddedView;\n    /** Reference to the preview element. */\n    _preview;\n    get element() {\n        return this._preview;\n    }\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex, _renderer) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n        this._renderer = _renderer;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if (supportsPopover(this._preview)) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        return this._renderer.listen(this._preview, name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n            // value for `margin-right` needs to be `auto` when opened as a popover, because our\n            // positioning is always top/left based, but native popover seems to position itself\n            // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n            // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n            'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element) {\n    return 'showPopover' in element;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = { passive: true };\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = { passive: false };\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = {\n    passive: false,\n    capture: true,\n};\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    _config;\n    _document;\n    _ngZone;\n    _viewportRuler;\n    _dragDropRegistry;\n    _renderer;\n    _rootElementCleanups;\n    _cleanupShadowRootSelectStart;\n    /** Element displayed next to the user's pointer while the element is dragged. */\n    _preview;\n    /** Container into which to insert the preview. */\n    _previewContainer;\n    /** Reference to the view of the placeholder element. */\n    _placeholderRef;\n    /** Element that is rendered instead of the draggable item while it is being sorted. */\n    _placeholder;\n    /** Coordinates within the element at which the user picked up the element. */\n    _pickupPositionInElement;\n    /** Coordinates on the page at which the user picked up the element. */\n    _pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     */\n    _anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n    _passiveTransform = { x: 0, y: 0 };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n    _activeTransform = { x: 0, y: 0 };\n    /** Inline `transform` value that the element had before the first dragging sequence. */\n    _initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n    _hasStartedDragging = signal(false);\n    /** Whether the element has moved since the user started dragging it. */\n    _hasMoved;\n    /** Drop container in which the DragRef resided when dragging began. */\n    _initialContainer;\n    /** Index at which the item started in its initial container. */\n    _initialIndex;\n    /** Cached positions of scrollable parent elements. */\n    _parentPositions;\n    /** Emits when the item is being moved. */\n    _moveEvents = new Subject();\n    /** Keeps track of the direction in which the user is dragging along each axis. */\n    _pointerDirectionDelta;\n    /** Pointer position at which the last change in the delta occurred. */\n    _pointerPositionAtLastDirectionChange;\n    /** Position of the pointer at the last pointer event. */\n    _lastKnownPointerPosition;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     */\n    _rootElement;\n    /**\n     * Nearest ancestor SVG, relative to which coordinates are calculated if dragging SVGElement\n     */\n    _ownerSVGElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     */\n    _rootElementTapHighlight;\n    /** Subscription to pointer movement events. */\n    _pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n    _pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n    _scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n    _resizeSubscription = Subscription.EMPTY;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     */\n    _lastTouchEventTime;\n    /** Time at which the last dragging sequence was started. */\n    _dragStartTime;\n    /** Cached reference to the boundary element. */\n    _boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n    _nativeInteractionsEnabled = true;\n    /** Client rect of the root element when the dragging sequence has started. */\n    _initialDomRect;\n    /** Cached dimensions of the preview element. Should be read via `_getPreviewRect`. */\n    _previewRect;\n    /** Cached dimensions of the boundary element. */\n    _boundaryRect;\n    /** Element that will be used as a template to create the draggable item's preview. */\n    _previewTemplate;\n    /** Template for placeholder element rendered to show where a draggable would be dropped. */\n    _placeholderTemplate;\n    /** Elements that can be used to drag the draggable item. */\n    _handles = [];\n    /** Registered handles that are currently disabled. */\n    _disabledHandles = new Set();\n    /** Droppable container that the draggable is a part of. */\n    _dropContainer;\n    /** Layout direction of the item. */\n    _direction = 'ltr';\n    /** Ref that the current drag item is nested in. */\n    _parentDragRef;\n    /**\n     * Cached shadow root that the element is placed in. `null` means that the element isn't in\n     * the shadow DOM and `undefined` means that it hasn't been resolved yet. Should be read via\n     * `_getShadowRoot`, not directly.\n     */\n    _cachedShadowRoot;\n    /** Axis along which dragging is locked. */\n    lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay = 0;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    _disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n    beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n    started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = this._moveEvents;\n    /** Arbitrary data that can be attached to the drag item. */\n    data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry, _renderer) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        this._renderer = _renderer;\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            this._removeRootElementListeners();\n            const renderer = this._renderer;\n            this._rootElementCleanups = this._ngZone.runOutsideAngular(() => [\n                renderer.listen(element, 'mousedown', this._pointerDown, activeEventListenerOptions),\n                renderer.listen(element, 'touchstart', this._pointerDown, passiveEventListenerOptions),\n                renderer.listen(element, 'dragstart', this._nativeDragStart, activeEventListenerOptions),\n            ]);\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners();\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /** Resets drag item to end of boundary element. */\n    resetToBoundary() {\n        if (\n        // can be null if the drag item was never dragged.\n        this._boundaryElement &&\n            this._rootElement &&\n            // check if we are overflowing off our boundary element\n            isOverflowingParent(this._boundaryElement.getBoundingClientRect(), this._rootElement.getBoundingClientRect())) {\n            const parentRect = this._boundaryElement.getBoundingClientRect();\n            const childRect = this._rootElement.getBoundingClientRect();\n            let offsetX = 0;\n            let offsetY = 0;\n            // check if we are overflowing from left or right\n            if (childRect.left < parentRect.left) {\n                offsetX = parentRect.left - childRect.left;\n            }\n            else if (childRect.right > parentRect.right) {\n                offsetX = parentRect.right - childRect.right;\n            }\n            // check if we are overflowing from top or bottom\n            if (childRect.top < parentRect.top) {\n                offsetY = parentRect.top - childRect.top;\n            }\n            else if (childRect.bottom > parentRect.bottom) {\n                offsetY = parentRect.bottom - childRect.bottom;\n            }\n            const currentLeft = this._activeTransform.x;\n            const currentTop = this._activeTransform.y;\n            let x = currentLeft + offsetX, y = currentTop + offsetY;\n            this._rootElement.style.transform = getTransform(x, y);\n            this._activeTransform = { x, y };\n            this._passiveTransform = { x, y };\n        }\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._cleanupShadowRootSelectStart?.();\n        this._cleanupShadowRootSelectStart = undefined;\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /** Handler for the `mousedown`/`touchstart` events. */\n    _pointerDown = (event) => {\n        this.beforeStarted.next();\n        // Delegate the event based on whether it started from a handle or the element itself.\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                this._initializeDragSequence(targetHandle, event);\n            }\n        }\n        else if (!this.disabled) {\n            this._initializeDragSequence(this._rootElement, event);\n        }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n    _pointerMove = (event) => {\n        const pointerPosition = this._getPointerPositionOnPage(event);\n        if (!this._hasStartedDragging()) {\n            const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n            const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n            const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n            // Only start dragging after the user has moved more than the minimum distance in either\n            // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n            // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n            // per pixel of movement (e.g. if the user moves their pointer quickly).\n            if (isOverThreshold) {\n                const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                const container = this._dropContainer;\n                if (!isDelayElapsed) {\n                    this._endDragSequence(event);\n                    return;\n                }\n                // Prevent other drag sequences from starting while something in the container is still\n                // being dragged. This can happen while we're waiting for the drop animation to finish\n                // and can cause errors, because some elements might still be moving around.\n                if (!container || (!container.isDragging() && !container.isReceiving())) {\n                    // Prevent the default action as soon as the dragging sequence is considered as\n                    // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                    if (event.cancelable) {\n                        event.preventDefault();\n                    }\n                    this._hasStartedDragging.set(true);\n                    this._ngZone.run(() => this._startDragSequence(event));\n                }\n            }\n            return;\n        }\n        // We prevent the default action down here so that we know that dragging has started. This is\n        // important for touch devices where doing this too early can unnecessarily block scrolling,\n        // if there's a dragging delay.\n        if (event.cancelable) {\n            event.preventDefault();\n        }\n        const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n        this._hasMoved = true;\n        this._lastKnownPointerPosition = pointerPosition;\n        this._updatePointerDirectionDelta(constrainedPointerPosition);\n        if (this._dropContainer) {\n            this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n        }\n        else {\n            // If there's a position constraint function, we want the element's top/left to be at the\n            // specific position on the page. Use the initial position as a reference if that's the case.\n            const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n            const activeTransform = this._activeTransform;\n            activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n            activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n            this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n        }\n        // Since this event gets fired for every pixel while dragging, we only\n        // want to fire it if the consumer opted into it. Also we have to\n        // re-enter the zone because we run all of the events on the outside.\n        if (this._moveEvents.observers.length) {\n            this._ngZone.run(() => {\n                this._moveEvents.next({\n                    source: this,\n                    pointerPosition: constrainedPointerPosition,\n                    event,\n                    distance: this._getDragDistance(constrainedPointerPosition),\n                    delta: this._pointerDirectionDelta,\n                });\n            });\n        }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n    _pointerUp = (event) => {\n        this._endDragSequence(event);\n    };\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging()) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                this._cleanupShadowRootSelectStart = this._renderer.listen(shadowRoot, 'selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor =\n                this._anchor ||\n                    this._document.createComment(typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-anchor' : ''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000, this._renderer);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasMoved = false;\n        this._hasStartedDragging.set(this._hasMoved);\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = (event) => {\n                    if (!event ||\n                        (this._preview &&\n                            _getEventTarget(event) === this._preview.element &&\n                            event.propertyName === 'transform')) {\n                        cleanupListener();\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                };\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                const cleanupListener = this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners() {\n        this._rootElementCleanups?.forEach(cleanup => cleanup());\n        this._rootElementCleanups = undefined;\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const scale = 1 / this.scale;\n        const transform = getTransform(x * scale, y * scale);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Handles a native `dragstart` event. */\n    _nativeDragStart = (event) => {\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                event.preventDefault();\n            }\n        }\n        else if (!this.disabled) {\n            // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n            // but some cases like dragging of links can slip through (see #24403).\n            event.preventDefault();\n        }\n    };\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Cache of the dimensions of all the items inside the container. */\n    _itemPositions = [];\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeDraggables;\n    /** Direction in which the list is oriented. */\n    orientation = 'vertical';\n    /** Layout direction of the drop list. */\n    direction;\n    constructor(_dragDropRegistry) {\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        delta: 0,\n        overlaps: false,\n    };\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${transformAmount}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${transformAmount}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this._element.appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables?.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        this._element = container;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nclass MixedSortStrategy {\n    _document;\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Lazily-resolved root node containing the list. Use `_getRootNode` to read this. */\n    _rootNode;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeItems;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        deltaX: 0,\n        deltaY: 0,\n        overlaps: false,\n    };\n    /**\n     * Keeps track of the relationship between a node and its next sibling. This information\n     * is used to restore the DOM to the order it was in before dragging started.\n     */\n    _relatedNodes = [];\n    constructor(_document, _dragDropRegistry) {\n        this._document = _document;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        const childNodes = this._element.childNodes;\n        this._relatedNodes = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const node = childNodes[i];\n            this._relatedNodes.push([node, node.nextSibling]);\n        }\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        const previousSwap = this._previousSwap;\n        if (newIndex === -1 || this._activeItems[newIndex] === item) {\n            return null;\n        }\n        const toSwapWith = this._activeItems[newIndex];\n        // Prevent too many swaps over the same item.\n        if (previousSwap.drag === toSwapWith &&\n            previousSwap.overlaps &&\n            previousSwap.deltaX === pointerDelta.x &&\n            previousSwap.deltaY === pointerDelta.y) {\n            return null;\n        }\n        const previousIndex = this.getItemIndex(item);\n        const current = item.getPlaceholderElement();\n        const overlapElement = toSwapWith.getRootElement();\n        if (newIndex > previousIndex) {\n            overlapElement.after(current);\n        }\n        else {\n            overlapElement.before(current);\n        }\n        moveItemInArray(this._activeItems, previousIndex, newIndex);\n        const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n        // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n        // break this functionality, because the same object is passed for all `sort` calls.\n        previousSwap.deltaX = pointerDelta.x;\n        previousSwap.deltaY = pointerDelta.y;\n        previousSwap.drag = toSwapWith;\n        previousSwap.overlaps =\n            overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n        return {\n            previousIndex,\n            currentIndex: newIndex,\n        };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        let enterIndex = index == null || index < 0\n            ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        // In some cases (e.g. when the container has padding) we might not be able to figure\n        // out which item to insert the dragged item next to, because the pointer didn't overlap\n        // with anything. In that case we find the item that's closest to the pointer.\n        if (enterIndex === -1) {\n            enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n        }\n        const targetItem = this._activeItems[enterIndex];\n        const currentIndex = this._activeItems.indexOf(item);\n        if (currentIndex > -1) {\n            this._activeItems.splice(currentIndex, 1);\n        }\n        if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n            this._activeItems.splice(enterIndex, 0, item);\n            targetItem.getRootElement().before(item.getPlaceholderElement());\n        }\n        else {\n            this._activeItems.push(item);\n            this._element.appendChild(item.getPlaceholderElement());\n        }\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeItems = items.slice();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        const root = this._element;\n        const previousSwap = this._previousSwap;\n        // Moving elements around in the DOM can break things like the `@for` loop, because it\n        // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n        // the DOM nodes in the list to their original order when the list is reset.\n        // Note that this could be simpler if we just saved all the nodes, cleared the root\n        // and then appended them in the original order. We don't do it, because it can break\n        // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n        // placeholder element which is removed after dragging.\n        for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n            const [node, nextSibling] = this._relatedNodes[i];\n            if (node.parentNode === root && node.nextSibling !== nextSibling) {\n                if (nextSibling === null) {\n                    root.appendChild(node);\n                }\n                else if (nextSibling.parentNode === root) {\n                    root.insertBefore(node, nextSibling);\n                }\n            }\n        }\n        this._relatedNodes = [];\n        this._activeItems = [];\n        previousSwap.drag = null;\n        previousSwap.deltaX = previousSwap.deltaY = 0;\n        previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeItems;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        return this._activeItems.indexOf(item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll() {\n        this._activeItems.forEach(item => {\n            if (this._dragDropRegistry.isDragging(item)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                item._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        if (container !== this._element) {\n            this._element = container;\n            this._rootNode = undefined;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY) {\n        const elementAtPoint = this._getRootNode().elementFromPoint(Math.floor(pointerX), Math.floor(pointerY));\n        const index = elementAtPoint\n            ? this._activeItems.findIndex(item => {\n                const root = item.getRootElement();\n                return elementAtPoint === root || root.contains(elementAtPoint);\n            })\n            : -1;\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n    /** Lazily resolves the list's root node. */\n    _getRootNode() {\n        // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n        if (!this._rootNode) {\n            this._rootNode = _getShadowRoot(this._element) || this._document;\n        }\n        return this._rootNode;\n    }\n    /**\n     * Finds the index of the item that's closest to the item being dragged.\n     * @param item Item being dragged.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _getClosestItemIndexToPointer(item, pointerX, pointerY) {\n        if (this._activeItems.length === 0) {\n            return -1;\n        }\n        if (this._activeItems.length === 1) {\n            return 0;\n        }\n        let minDistance = Infinity;\n        let minIndex = -1;\n        // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n        // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n        // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n        // for our purposes.\n        for (let i = 0; i < this._activeItems.length; i++) {\n            const current = this._activeItems[i];\n            if (current !== item) {\n                const { x, y } = current.getRootElement().getBoundingClientRect();\n                const distance = Math.hypot(pointerX - x, pointerY - y);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minIndex = i;\n                }\n            }\n        }\n        return minIndex;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    _dragDropRegistry;\n    _ngZone;\n    _viewportRuler;\n    /** Element that the drop list is attached to. */\n    element;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    disabled = false;\n    /** Whether sorting items within the list is disabled. */\n    sortingDisabled = false;\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n    autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Function that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n    beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n    dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new Subject();\n    /** Emits when a dragging sequence is started in a list connected to the current one. */\n    receivingStarted = new Subject();\n    /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n    receivingStopped = new Subject();\n    /** Arbitrary data that can be attached to the drop list. */\n    data;\n    /** Element that is the direct parent of the drag items. */\n    _container;\n    /** Whether an item in the list is being dragged. */\n    _isDragging = false;\n    /** Keeps track of the positions of any parent scrollable elements. */\n    _parentPositions;\n    /** Strategy being used to sort items within the list. */\n    _sortStrategy;\n    /** Cached `DOMRect` of the drop list. */\n    _domRect;\n    /** Draggable items in the container. */\n    _draggables = [];\n    /** Drop lists that are connected to the current one. */\n    _siblings = [];\n    /** Connected siblings that currently have a dragged item. */\n    _activeSiblings = new Set();\n    /** Subscription to the window being scrolled. */\n    _viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n    _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    /** Horizontal direction in which the list is currently scrolling. */\n    _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    /** Node that is being auto-scrolled. */\n    _scrollNode;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n    _stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n    _cachedShadowRoot = null;\n    /** Reference to the document. */\n    _document;\n    /** Elements that can be scrolled while the user is dragging. */\n    _scrollableElements = [];\n    /** Initial value for the element's `scroll-snap-type` style. */\n    _initialScrollSnap;\n    /** Direction of the list's layout. */\n    _direction = 'ltr';\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        const coercedElement = (this.element = coerceElement(element));\n        this._document = _document;\n        this.withOrientation('vertical').withElementContainer(coercedElement);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n            this._sortStrategy.direction = direction;\n        }\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        if (orientation === 'mixed') {\n            this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n        }\n        else {\n            const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n            strategy.direction = this._direction;\n            strategy.orientation = orientation;\n            this._sortStrategy = strategy;\n        }\n        this._sortStrategy.withElementContainer(this._container);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = this._container;\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /**\n     * Configures the drop list so that a different element is used as the container for the\n     * dragged items. This is useful for the cases when one might not have control over the\n     * full DOM that sets up the dragging.\n     * Note that the alternate container needs to be a descendant of the drop list.\n     * @param container New element container to be assigned.\n     */\n    withElementContainer(container) {\n        if (container === this._container) {\n            return this;\n        }\n        const element = coerceElement(this.element);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            container !== element &&\n            !element.contains(container)) {\n            throw new Error('Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.');\n        }\n        const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n        const newContainerIndex = this._scrollableElements.indexOf(container);\n        if (oldContainerIndex > -1) {\n            this._scrollableElements.splice(oldContainerIndex, 1);\n        }\n        if (newContainerIndex > -1) {\n            this._scrollableElements.splice(newContainerIndex, 1);\n        }\n        if (this._sortStrategy) {\n            this._sortStrategy.withElementContainer(container);\n        }\n        this._cachedShadowRoot = null;\n        this._scrollableElements.unshift(container);\n        this._container = container;\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = this._container.style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // Prevent the check from running on apps not using an alternate container. Ideally we\n            // would always run it, but introducing it at this stage would be a breaking change.\n            this._container !== coerceElement(this.element)) {\n            for (const drag of this._draggables) {\n                if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n                    throw new Error('Invalid DOM structure for drop list. All items must be placed directly inside of the element container.');\n                }\n            }\n        }\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(this._container).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = this._container.style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /** Starts the interval that'll auto-scroll the element. */\n    _startScrollInterval = () => {\n        this._stopScrolling();\n        interval(0, animationFrameScheduler)\n            .pipe(takeUntil(this._stopScrollTimers))\n            .subscribe(() => {\n            const node = this._scrollNode;\n            const scrollStep = this.autoScrollStep;\n            if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                node.scrollBy(0, -scrollStep);\n            }\n            else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                node.scrollBy(0, scrollStep);\n            }\n            if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                node.scrollBy(-scrollStep, 0);\n            }\n            else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                node.scrollBy(scrollStep, 0);\n            }\n        });\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(this._container);\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind a capturing event. */\nconst capturingEventOptions = {\n    capture: true,\n};\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n    passive: false,\n    capture: true,\n};\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\\n\"] }]\n        }] });\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\nclass DragDropRegistry {\n    _ngZone = inject(NgZone);\n    _document = inject(DOCUMENT);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _cleanupDocumentTouchmove;\n    _scroll = new Subject();\n    /** Registered drop container instances. */\n    _dropInstances = new Set();\n    /** Registered drag item instances. */\n    _dragInstances = new Set();\n    /** Drag item instances that are currently being dragged. */\n    _activeDragInstances = signal([]);\n    /** Keeps track of the event listeners that we've bound to the `document`. */\n    _globalListeners;\n    /**\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\n     * because it'll be called a lot and we don't want to create a new function every time.\n     */\n    _draggingPredicate = (item) => item.isDragging();\n    /**\n     * Map tracking DOM nodes and their corresponding drag directives. Note that this is different\n     * from looking through the `_dragInstances` and getting their root node, because the root node\n     * isn't necessarily the node that the directive is set on.\n     */\n    _domNodesToDirectives = null;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerMove = new Subject();\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerUp = new Subject();\n    constructor() { }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._cleanupDocumentTouchmove?.();\n                this._cleanupDocumentTouchmove = this._renderer.listen(this._document, 'touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._cleanupDocumentTouchmove?.();\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances().indexOf(drag) > -1) {\n            return;\n        }\n        this._styleLoader.load(_ResetsLoader);\n        this._activeDragInstances.update(instances => [...instances, drag]);\n        if (this._activeDragInstances().length === 1) {\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            const isTouchEvent = event.type.startsWith('touch');\n            const endEventHandler = (e) => this.pointerUp.next(e);\n            const toBind = [\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                ['scroll', (e) => this._scroll.next(e), capturingEventOptions],\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                ['selectstart', this._preventDefaultWhileDragging, activeCapturingEventOptions],\n            ];\n            if (isTouchEvent) {\n                toBind.push(['touchend', endEventHandler, capturingEventOptions], ['touchcancel', endEventHandler, capturingEventOptions]);\n            }\n            else {\n                toBind.push(['mouseup', endEventHandler, capturingEventOptions]);\n            }\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                toBind.push([\n                    'mousemove',\n                    (e) => this.pointerMove.next(e),\n                    activeCapturingEventOptions,\n                ]);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners = toBind.map(([name, handler, options]) => this._renderer.listen(this._document, name, handler, options));\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.update(instances => {\n            const index = instances.indexOf(drag);\n            if (index > -1) {\n                instances.splice(index, 1);\n                return [...instances];\n            }\n            return instances;\n        });\n        if (this._activeDragInstances().length === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances().indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this._scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const cleanup = this._renderer.listen(shadowRoot, 'scroll', (event) => {\n                        if (this._activeDragInstances().length) {\n                            observer.next(event);\n                        }\n                    }, capturingEventOptions);\n                    return () => {\n                        cleanup();\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    /**\n     * Tracks the DOM node which has a draggable directive.\n     * @param node Node to track.\n     * @param dragRef Drag directive set on the node.\n     */\n    registerDirectiveNode(node, dragRef) {\n        this._domNodesToDirectives ??= new WeakMap();\n        this._domNodesToDirectives.set(node, dragRef);\n    }\n    /**\n     * Stops tracking a draggable directive node.\n     * @param node Node to stop tracking.\n     */\n    removeDirectiveNode(node) {\n        this._domNodesToDirectives?.delete(node);\n    }\n    /**\n     * Gets the drag directive corresponding to a specific DOM node, if any.\n     * @param node Node for which to do the lookup.\n     */\n    getDragDirectiveForNode(node) {\n        return this._domNodesToDirectives?.get(node) || null;\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._domNodesToDirectives = null;\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * @param event Event whose default action should be prevented.\n     */\n    _preventDefaultWhileDragging = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            event.preventDefault();\n        }\n    };\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n    _persistentTouchmoveListener = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            // Note that we only want to prevent the default action after dragging has actually started.\n            // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n            // but it could be pushed back if the user has set up a drag delay or threshold.\n            if (this._activeDragInstances().some(this._draggingPredicate)) {\n                event.preventDefault();\n            }\n            this.pointerMove.next(event);\n        }\n    };\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners?.forEach(cleanup => cleanup());\n        this._globalListeners = undefined;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    _document = inject(DOCUMENT);\n    _ngZone = inject(NgZone);\n    _viewportRuler = inject(ViewportRuler);\n    _dragDropRegistry = inject(DragDropRegistry);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    constructor() { }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry, this._renderer);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDrop, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDrop, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    element = inject(ElementRef);\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    /** Emits when the state of the handle has changed. */\n    _stateChanges = new Subject();\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    _disabled = false;\n    constructor() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag?._addHandle(this);\n    }\n    ngAfterViewInit() {\n        if (!this._parentDrag) {\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const ref = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (ref) {\n                    this._parentDrag = ref;\n                    ref._addHandle(this);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragHandle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    element = inject(ElementRef);\n    dropContainer = inject(CDK_DROP_LIST, { optional: true, skipSelf: true });\n    _ngZone = inject(NgZone);\n    _viewContainerRef = inject(ViewContainerRef);\n    _dir = inject(Directionality, { optional: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _selfHandle = inject(CDK_DRAG_HANDLE, { optional: true, self: true });\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    _destroyed = new Subject();\n    _handles = new BehaviorSubject([]);\n    _previewTemplate;\n    _placeholderTemplate;\n    /** Reference to the underlying drag instance. */\n    _dragRef;\n    /** Arbitrary data to attach to this drag instance. */\n    data;\n    /** Locks the position of the dragged element along the specified axis. */\n    lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     */\n    rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     */\n    boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     */\n    freeDragPosition;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    _disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * Configures the place into which the preview of the item will be inserted. Can be configured\n     * globally through `CDK_DROP_LIST`. Possible values:\n     * - `global` - Preview will be inserted at the bottom of the `<body>`. The advantage is that\n     * you don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain\n     * its inherited styles.\n     * - `parent` - Preview will be inserted into the parent of the drag item. The advantage is that\n     * inherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be\n     * visible due to `z-index`. Furthermore, the preview is going to have an effect over selectors\n     * like `:nth-child` and some flexbox configurations.\n     * - `ElementRef<HTMLElement> | HTMLElement` - Preview will be inserted into a specific element.\n     * Same advantages and disadvantages as `parent`.\n     */\n    previewContainer;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Emits when the user starts dragging the item. */\n    started = new EventEmitter();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new EventEmitter();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new EventEmitter();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new EventEmitter();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new EventEmitter();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = new Observable((observer) => {\n        const subscription = this._dragRef.moved\n            .pipe(map(movedEvent => ({\n            source: this,\n            pointerPosition: movedEvent.pointerPosition,\n            event: movedEvent.event,\n            delta: movedEvent.delta,\n            distance: movedEvent.distance,\n        })))\n            .subscribe(observer);\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n    _injector = inject(Injector);\n    constructor() {\n        const dropContainer = this.dropContainer;\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        const dragDrop = inject(DragDrop);\n        this._dragRef = dragDrop.createDrag(this.element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        this._dragDropRegistry.registerDirectiveNode(this.element.nativeElement, this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n            // The drop container reads this so we need to sync it here.\n            dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._dragRef.scale = this.scale;\n            });\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /** Resets drag item to end of boundary element. */\n    resetToBoundary() {\n        this._dragRef.resetToBoundary();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // We need to wait until after render, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position, and then they get transferred to the portal.\n        afterNextRender(() => {\n            this._updateRootElement();\n            this._setupHandlesListener();\n            this._dragRef.scale = this.scale;\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }, { injector: this._injector });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in the `afterNextRender` queued up in the constructor.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Scale affects the free drag position so we need to sync it up here.\n        this._dragRef.scale = this.scale;\n        // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n        // constructor.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._dragDropRegistry.removeDirectiveNode(this.element.nativeElement);\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.scale = this.scale;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const parentDrag = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (parentDrag) {\n                    ref.withParent(parentDrag._dragRef);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDrag, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], scale: [\"cdkDragScale\", \"scale\", numberAttribute] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': 'cdk-drag',\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], scale: [{\n                type: Input,\n                args: [{ alias: 'cdkDragScale', transform: numberAttribute }]\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    /** Drop lists registered inside the group. */\n    _items = new Set();\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    disabled = false;\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    element = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _scrollDispatcher = inject(ScrollDispatcher);\n    _dir = inject(Directionality, { optional: true });\n    _group = inject(CDK_DROP_LIST_GROUP, {\n        optional: true,\n        skipSelf: true,\n    });\n    /** Refs that have been synced with the drop ref most recently. */\n    _latestSortedRefs;\n    /** Emits when the list has been destroyed. */\n    _destroyed = new Subject();\n    /** Whether the element's scrollable parents have been resolved. */\n    _scrollableParentsResolved;\n    /** Keeps track of the drop lists that are currently on the page. */\n    static _dropLists = [];\n    /** Reference to the underlying drop list instance. */\n    _dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     */\n    connectedTo = [];\n    /** Arbitrary data to attach to this container. */\n    data;\n    /** Direction in which the list is oriented. */\n    orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     */\n    id = inject(_IdGenerator).getId('cdk-drop-list-');\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    _disabled;\n    /** Whether sorting within this drop list is disabled. */\n    sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n    autoScrollDisabled;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep;\n    /**\n     * Selector that will be used to resolve an alternate element container for the drop list.\n     * Passing an alternate container is useful for the cases where one might not have control\n     * over the parent node of the draggable items within the list (e.g. due to content projection).\n     * This allows for usages like:\n     *\n     * ```\n     * <div cdkDropList cdkDropListElementContainer=\".inner\">\n     *   <div class=\"inner\">\n     *     <div cdkDrag></div>\n     *   </div>\n     * </div>\n     * ```\n     */\n    elementContainerSelector;\n    /** Emits when the user drops an item inside the container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new EventEmitter();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new EventEmitter();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new EventEmitter();\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     */\n    _unsortedItems = new Set();\n    constructor() {\n        const dragDrop = inject(DragDrop);\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(this.element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (this._group) {\n            this._group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        // Only sync the items while dragging since this method is\n        // called when items are being initialized one-by-one.\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef(this.getSortedItems().map(item => item._dragRef));\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        // This method might be called on destroy so we always want to sync with the ref.\n        // Note that we reuse the last set of synced items, rather than re-sorting the whole\n        // list, because it can slow down re-renders of large lists (see #30737).\n        if (this._latestSortedRefs) {\n            const index = this._latestSortedRefs.indexOf(item._dragRef);\n            if (index > -1) {\n                this._latestSortedRefs.splice(index, 1);\n                this._syncItemsWithRef(this._latestSortedRefs);\n            }\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._latestSortedRefs = undefined;\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            if (this.elementContainerSelector) {\n                const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n                if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throw new Error(`CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`);\n                }\n                ref.withElementContainer(container);\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef(this.getSortedItems().map(item => item._dragRef));\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef(items) {\n        this._latestSortedRefs = items;\n        this._dropListRef.withItems(items);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropList, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"], elementContainerSelector: [\"cdkDropListElementContainer\", \"elementContainerSelector\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], elementContainerSelector: [{\n                type: Input,\n                args: ['cdkDropListElementContainer']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the preview template instance. */\n    data;\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    matchSize = false;\n    constructor() {\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPreview, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the placeholder template instance. */\n    data;\n    constructor() {\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n"],"x_google_ignoreList":[3,4]}