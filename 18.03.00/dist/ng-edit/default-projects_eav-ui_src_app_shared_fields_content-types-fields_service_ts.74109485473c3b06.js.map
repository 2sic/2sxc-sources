{"version":3,"file":"default-projects_eav-ui_src_app_shared_fields_content-types-fields_service_ts.74109485473c3b06.js","mappings":"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","names":["webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","staticName","this","getHttpApiUrl","params","appId","contentTypeId","retrieveContentTypeSig","initial","getSignal","retrieveContentTypes","scope","retrieveContentTypesSig","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesSig","scopesSignal","computed","getScopesV2","save","contentType","http","post","apiUrl","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","__ngFactoryType__","factory","ɵfac","ExportAppPartsService","getContentInfo","exportParts","contentTypeIds","entityIds","templateIds","url","webApiAppPartsRoot","join","window","open","ExportAppService","getAppInfo","exportAppUrl","webApiAppRoot","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","toString","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","getAllSig","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","ViewsService","export","getPolymorphism","getUsage","guid","ImportAppService","importApp","changedName","retryOnDuplicate","result","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","webApiFieldsAll","webApiSetTitle","webApiFieldsGetShared","ContentTypesFieldsService","paramsAppId","more","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","contentTypeStaticName","fields","fld","Metadata","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","#getShareinfo","getAncestors","getDescendants","endpoint","addInheritedField","targetContentTypeId","sourceType","sourceFieldGuid","sourceField","share","inherit","inheritMetadataOf","reOrder","idArray","order","JSON","stringify","setTitle","item","rename","fieldId","newName","IsTitle","Error","add","newField","ContentTypeId","Index","SortOrder","updateInputType","field","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","error","readAsText","logSpecs","all","getEntities","getAvailableEntities","webApiEntityRoot","EntityService","constructor","log","classLog","queryService","transient","QueryService","getEntities$","fnIf","filter","p","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","data","Default","entityId","force","parentId","parentField","parent","context","getFromQuery","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","Guids","i0","i1","i2"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts"],"sourcesContent":["import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypeSig(staticName: string, initial: undefined): Signal<ContentType> {\r\n    return this.getSignal<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    }, initial);\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.getHttpApiUrl<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypesSig(scope: string, initial: undefined): Signal<ContentType[]> {\r\n    return this.getSignal<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesSig(initial: undefined): Signal<ScopeOption[]> {\r\n    const scopesSignal = this.getSignal<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(\r\n      webApiTypeScopes,\r\n      { params: { appId: this.appId } }, initial,\r\n    );\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      const scopesData = scopesSignal();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n\r\n  getScopesV2() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\nconst webApiAppPartsGet = 'admin/appParts/get';\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string, initial: ContentInfo) {\r\n    return this.getSignal<ContentInfo>(webApiAppPartsGet, {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n const webApiAppRootStatistics = 'admin/app/Statistics';\r\n const webApiAppRootSaveData = 'admin/app/SaveData';\r\n\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo(initial: AppInfo) {\r\n    return this.getSignal<AppInfo>(webApiAppRootStatistics, {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    }, initial);\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    // return this.get<boolean>(webApiAppRoot + 'SaveData', {\r\n    return this.getHttpApiUrl<boolean>(webApiAppRootSaveData, {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  getAll(contentType: string) {\r\n    return this.getHttpApiUrl<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    });\r\n  }\r\n\r\n  getAllSig(contentType: string, initial?: Query[]) {\r\n    return this.getSignal<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }, initial);\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.getHttpApiUrl<null>(webApiQueryClone, {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViews = 'admin/view/all';\r\nconst webApiViewDelete = 'admin/view/delete';\r\nconst webApiViewImport = 'admin/view/import';\r\nconst webApiViewPolymorph = 'admin/view/polymorphism';\r\nconst webApiViewUsage = 'admin/view/usage';\r\nconst webApiJson = 'admin/view/json';\r\n\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.getSignal<View[]>(webApiViews, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.getHttpApiUrl<boolean>(webApiViewDelete, {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiJson)\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.getSignal<Polymorphism>(webApiViewPolymorph, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.getSignal<ViewUsage[]>(webApiViewUsage, {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { Of } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services';\r\nimport { HttpServiceBase } from '../services/http-service-base';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeCatalog } from './input-type-catalog';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\n\r\nexport const webApiFieldsAll = 'admin/field/all';\r\n\r\n// All WebApi paths - to easily search/find when looking for where these are used\r\nconst webApiDataTypes = 'admin/field/DataTypes';\r\nconst webApiReservedNames = 'admin/field/ReservedNames';\r\nconst webApiAddInheritedField = 'admin/field/AddInheritedField';\r\nconst webApiInputTypes = 'admin/field/InputTypes';\r\nconst webApiInputType = 'admin/field/InputType';\r\nconst webApiShare = 'admin/field/Share';\r\nconst webApiInherit = 'admin/field/Inherit';\r\nconst webApiSort = 'admin/field/Sort';\r\nconst webApiSetTitle = webApiTypeRoot + 'SetTitle';\r\nconst webApiRename = 'admin/field/Rename';\r\nconst webApiDelete = 'admin/field/Delete';\r\nconst webApiAdd = 'admin/field/Add';\r\nconst webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\nconst webApiGetAncestors = 'admin/field/GetAncestors';\r\nconst webApiGetDescendants = 'admin/field/GetDescendants';\r\n\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService extends HttpServiceBase {\r\n\r\n  protected paramsAppId(more: Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>> = {}) {\r\n    return {\r\n      params: {\r\n        appid: this.appId,\r\n        ...more,\r\n      },\r\n    };\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.getHttpApiUrl<string[]>(webApiDataTypes, this.paramsAppId());\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.getHttpApiUrl<InputTypeMetadata[]>(webApiInputTypes, this.paramsAppId())\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => ({\r\n            dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n            inputType: config.Type,\r\n            label: config.Label,\r\n            description: config.Description,\r\n            isDefault: config.IsDefault,\r\n            isObsolete: config.IsObsolete,\r\n            isRecommended: config.IsRecommended,\r\n            obsoleteMessage: config.ObsoleteMessage,\r\n            icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n          } satisfies FieldInputTypeOption));\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.getHttpApiUrl<Record<string, string>>(webApiReservedNames);\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.getHttpApiUrl<Field[]>(webApiFieldsAll, this.paramsAppId({ staticName: contentTypeStaticName }))\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.getHttpApiUrl<Field[]>(webApiFieldsGetShared, this.paramsAppId());\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    return this.#getShareinfo(webApiFieldsGetShared, attributeId);\r\n    // return this.getHttp<Field[]>(this.apiUrl(webApiFieldsGetShared), this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  getAncestors(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetAncestors, attributeId);\r\n  }\r\n\r\n  getDescendants(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetDescendants, attributeId);\r\n  }\r\n\r\n  #getShareinfo(endpoint: string, attributeId: number) {\r\n    return this.getHttpApiUrl<Field[]>(endpoint, this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceType: string, sourceFieldGuid: string /* guid */, name: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiAddInheritedField), null, this.paramsAppId({\r\n      contentTypeId: targetContentTypeId.toString(),\r\n      sourceType,\r\n      sourceField: sourceFieldGuid,\r\n      name,\r\n    }));\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiShare), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiInherit), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiSort), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiSetTitle), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiRename), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle)\r\n      throw new Error('Can\\'t delete Title');\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiDelete), {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiAdd), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(attributeId: number, field: string, inputType: Of<typeof InputTypeCatalog>) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiInputType), null, {\r\n      params: { appId: this.appId, attributeId, field, inputType }\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}